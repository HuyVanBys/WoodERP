using BOSCommon;
using BOSCommon.Constants;
using BOSComponent;
using BOSERP.MES.Modules.CarcassBOM.ImportInfo;
using BOSERP.Modules.CarcassBOM.UI;
using BOSLib;
using BOSLib.Extensions;
using BOSLib.Interfaces;
using BOSReport;
using DevExpress.Utils.Extensions;
using DevExpress.XtraEditors;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraReports.UI;
using DevExpress.XtraTab;
using Localization;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.OleDb;
using System.Diagnostics;
using System.Drawing;
using System.Dynamic;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Text.RegularExpressions;
using System.Threading;
//using System.Transactions;
using System.Windows.Forms;
using Z.Expressions;
using Excel = Microsoft.Office.Interop.Excel;

namespace BOSERP.Modules.CarcassBOM
{

    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:CarcassBOMModule
    //Created Date:Friday, March 21, 2008
    //-----------------------------------------------------------

    public class CarcassBOMModule : BaseModuleERP
    {
        string[] AlphaString =  {"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"
                                            ,"AA","AB","AC","AD","AE","AF","AG","AH","AI","AJ","AK","AL","AM","AN","AO","AP","AQ","AR","AS","AT","AU","AV","AW","AX","AY","AZ"};

        public Dictionary<ProductionNormStatusType, List<string>> ControlDictionary;
        public Dictionary<ProductionNormStatusType, string> TypeAndColumnName;
        BOSTabControl tc;
        public ICProductsInfo CurrentCarcass;
        BOSRadioGroup PropertiesRadioGroup;
        BOSRadioGroup PackagingRadioGroup;
        BOSLookupEdit CarcassLookupEdit;
        BOSPictureEdit CarcassPicture;
        ListView PictureListView;
        BOSButton SavePaintButton;
        BOSButton SavePackagingButton;
        BOSButton SaveSemiProductButton;
        BOSButton PrintMaterialButton;
        public const string NewNo = "***NEW***";
        private bool IsCarcass = false;
        BOSTabControl tcBOM;
        BOSTabControl tcDetailInfo;
        BOSLookupEdit OperationPackagingLookupEdit;
        public BOSTextBox DepreciationRateTextBox;
        public BOSTextBox DepreciationRateHardWareTextBox;
        public BOSTextBox DepreciationRatePaintTextBox;
        public BOSTextBox DepreciationRatePackagingTextBox;
        public BOSTextBox DepreciationRateGeneralMaterialTextBox;
        public string ViewShowType = string.Empty;
        public string ProductCarcassNo = string.Empty;
        #region PackageNo
        BOSLabel fld_lblLength;
        BOSLabel fld_lblWidth;
        BOSLabel fld_lblHeigth;
        BOSLabel fld_lblVolumn;
        #endregion
        public BOSTabControl TabBOM;
        private guiCreateProductStructure GuiProductStructure { get; set; }
        public MMAllocationOperationConfigsInfo DefualtAOConfigs { get; set; }
        private guiProcess GuiProcess { get; set; }
        public List<MMOperationAndHardwareOperationTypesInfo> DefualtAllocationOperationList { get; set; }
        public CarcassBOMModule()
        {
            Name = "CarcassBOM";
            CurrentModuleEntity = new CarcassBOMEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();
            tc = (BOSTabControl)Controls["bosTabControl1"];
            if (tc != null)
            {
                foreach (XtraTabPage page in tc.TabPages)
                {
                    if (page.Name == "CarrcassBOMPage")
                    {
                        page.PageVisible = false;
                        break;
                    }
                }
            }
            PropertiesRadioGroup = (BOSRadioGroup)Controls["fld_radPropertiesOrProcess"];
            PackagingRadioGroup = (BOSRadioGroup)Controls["fld_radPackaging"];
            CarcassLookupEdit = (BOSLookupEdit)Controls["fld_lkeCarcassForCopy"];
            CarcassPicture = (BOSPictureEdit)Controls["fld_pteICProductPicture"];
            PictureListView = (ListView)Controls["fld_lvImageList"];
            SavePaintButton = (BOSButton)Controls["fld_btnSavePaint"];
            SavePackagingButton = (BOSButton)Controls["fld_btnSavePackaging"];
            SaveSemiProductButton = (BOSButton)Controls["fld_btnSave"];
            tcBOM = (BOSTabControl)Controls["fld_tcBOM"];
            tcDetailInfo = (BOSTabControl)Controls["fld_tcDetailInfo"];
            OperationPackagingLookupEdit = (BOSLookupEdit)Controls["fld_lkeMMOperationPackaging"];
            PrintMaterialButton = (BOSButton)Controls["fld_btnPrintMaterial"];

            DepreciationRateTextBox = (BOSTextBox)Controls["fld_txtDepreciationRate"];
            if(DepreciationRateTextBox != null)
                DepreciationRateTextBox.KeyDown += new KeyEventHandler(DepreciationRateTextBox_KeyUp);

            DepreciationRateHardWareTextBox = (BOSTextBox)Controls["fld_txtDepreciationRateHardware"];
            if (DepreciationRateHardWareTextBox != null)
            {
                DepreciationRateHardWareTextBox.Text = 1M.ToString();
                DepreciationRateHardWareTextBox.KeyDown += new KeyEventHandler(DepreciationRateHardWareTextBox_KeyUp);
            }    

            DepreciationRatePaintTextBox = (BOSTextBox)Controls["fld_txtDepreciationRateIngredientPaint"];
            if (DepreciationRatePaintTextBox != null)
            {
                DepreciationRatePaintTextBox.Text = 1M.ToString();
                DepreciationRatePaintTextBox.KeyDown += new KeyEventHandler(DepreciationRatePaintTextBox_KeyUp);
            }

            DepreciationRateGeneralMaterialTextBox = (BOSTextBox)Controls["fld_txtDepreciationRateGeneralMaterial"];
            if (DepreciationRateGeneralMaterialTextBox != null)
            {
                DepreciationRateGeneralMaterialTextBox.Text = 1M.ToString();
                DepreciationRateGeneralMaterialTextBox.KeyDown += new KeyEventHandler(DepreciationRateGeneralMaterialTextBox_KeyUp);
            }

            DepreciationRatePackagingTextBox = (BOSTextBox)Controls["fld_txtDepreciationRateIngredientPackaging"];
            if (DepreciationRatePackagingTextBox != null)
            {
                DepreciationRatePackagingTextBox.Text = 1M.ToString();
                DepreciationRatePackagingTextBox.KeyDown += new KeyEventHandler(DepreciationRatePackagingTextBox_KeyUp);
            }

            InitControlDictionary();
            InitTypeAndColumnName();
            BOSLookupEdit fld_lkeBRBranchID = (BOSLookupEdit)Controls["fld_lkeBRBranchID"];
            if (fld_lkeBRBranchID != null) fld_lkeBRBranchID.EditValue = BOSApp.CurrentCompanyInfo.FK_BRBranchID;
            DefualtAOConfigs = (new MMAllocationOperationConfigsController().GetDefualtAllocationOperationConfigs());
            //Hardcode license
            EvalManager.AddLicense("129;500-BYS", "4F4112F-8C2049B-9AC43EC-D3F9A0F-85CA");
            DefualtAllocationOperationList = (new MMOperationAndHardwareOperationTypesController().GetAllAliveObject());
        }

        void DepreciationRateTextBox_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (BOSApp.ShowMessageYesNo(string.Format("Bạn có muốn cập nhật Tỉ số tiêu hao {0} cho tất cả cụm và chi tiết?", DepreciationRateTextBox.Text)) == DialogResult.Yes)
                {
                    decimal rate = 0;
                    if (decimal.TryParse(DepreciationRateTextBox.Text, out rate))
                    {
                        CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
                        foreach (ICProductsInfo product in entity.ProductList)
                        {
                            product.ICProductDepreciationRate = rate;
                        }

                        RecalDepreciationAllItem();
                    }
                }
                e.SuppressKeyPress = true;
            }
        }
        void DepreciationRateHardWareTextBox_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (BOSApp.ShowMessageYesNo(string.Format("Bạn có muốn cập nhật Tỉ số tiêu hao {0} cho tất cả?", DepreciationRateHardWareTextBox.Text)) == DialogResult.Yes)
                {
                    decimal rate = 0;
                    if (decimal.TryParse(DepreciationRateHardWareTextBox.Text, out rate))
                    {
                        CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
                        foreach (MMProductionNormItemsInfo productNormsInfo in entity.ProductionNormItemHardwareList)
                        {
                            productNormsInfo.MMProductionNormItemDepreciationRate = rate;
                            productNormsInfo.MMProductionNormItemQuantity = productNormsInfo.MMProductionNormItemTotalQuantity * productNormsInfo.MMProductionNormItemDepreciationRate;
                        }
                        entity.ProductionNormItemHardwareList.TreeListControl?.RefreshDataSource();
                    }
                }
                e.SuppressKeyPress = true;
            }
        }
        void DepreciationRatePaintTextBox_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (BOSApp.ShowMessageYesNo(string.Format("Bạn có muốn cập nhật Tỉ số tiêu hao {0} cho tất cả?", DepreciationRatePaintTextBox.Text)) == DialogResult.Yes)
                {
                    decimal rate = 0;
                    if (decimal.TryParse(DepreciationRatePaintTextBox.Text, out rate))
                    {
                        CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
                        foreach (MMProductionNormItemsInfo productNormsInfo in entity.ProductionNormItemPaintList)
                        {
                            productNormsInfo.MMProductionNormItemDepreciationRate = rate;
                            productNormsInfo.MMProductionNormItemQuantity = productNormsInfo.MMProductionNormItemTotalQuantity * productNormsInfo.MMProductionNormItemDepreciationRate;
                            if (productNormsInfo.SubList != null && productNormsInfo.SubList.Count > 0)
                            {
                                foreach (MMProductionNormItemsInfo productNormsInfo1 in productNormsInfo.SubList)
                                {
                                    productNormsInfo1.MMProductionNormItemDepreciationRate = rate;
                                    productNormsInfo1.MMProductionNormItemQuantity = productNormsInfo1.MMProductionNormItemTotalQuantity * productNormsInfo1.MMProductionNormItemDepreciationRate;
                                }
                            }
                        }
                        entity.ProductionNormItemPaintList.TreeListControl?.RefreshDataSource();
                    }
                }
                e.SuppressKeyPress = true;
            }
        }
        void DepreciationRateGeneralMaterialTextBox_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (BOSApp.ShowMessageYesNo(string.Format("Bạn có muốn cập nhật Tỉ số tiêu hao {0} cho tất cả?", DepreciationRateGeneralMaterialTextBox.Text)) == DialogResult.Yes)
                {
                    decimal rate = 0;
                    if (decimal.TryParse(DepreciationRateGeneralMaterialTextBox.Text, out rate))
                    {
                        CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
                        foreach (MMProductionNormItemsInfo productNormsInfo in entity.GeneralMaterialList)
                        {
                            productNormsInfo.MMProductionNormItemDepreciationRate = rate;
                            productNormsInfo.MMProductionNormItemQuantity = productNormsInfo.MMProductionNormItemTotalQuantity * productNormsInfo.MMProductionNormItemDepreciationRate;
                            if (productNormsInfo.SubList != null && productNormsInfo.SubList.Count > 0)
                            {
                                foreach (MMProductionNormItemsInfo productNormsInfo1 in productNormsInfo.SubList)
                                {
                                    productNormsInfo1.MMProductionNormItemDepreciationRate = rate;
                                    productNormsInfo1.MMProductionNormItemQuantity = productNormsInfo1.MMProductionNormItemTotalQuantity * productNormsInfo1.MMProductionNormItemDepreciationRate;
                                }
                            }
                        }
                        entity.GeneralMaterialList.GridControl?.RefreshDataSource();
                    }
                }
                e.SuppressKeyPress = true;
            }
        }
        void DepreciationRatePackagingTextBox_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (BOSApp.ShowMessageYesNo(string.Format("Bạn có muốn cập nhật Tỉ số tiêu hao {0} cho tất cả?", DepreciationRatePackagingTextBox.Text)) == DialogResult.Yes)
                {
                    decimal rate = 0;
                    if (decimal.TryParse(DepreciationRatePackagingTextBox.Text, out rate))
                    {
                        CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
                        foreach (MMProductionNormItemsInfo productNormsInfo in entity.ProductionNormItemPackagingList)
                        {
                            productNormsInfo.MMProductionNormItemDepreciationRate = rate;
                            productNormsInfo.MMProductionNormItemQuantity = productNormsInfo.MMProductionNormItemTotalQuantity * productNormsInfo.MMProductionNormItemDepreciationRate;
                            if (productNormsInfo.SubList != null && productNormsInfo.SubList.Count > 0)
                            {
                                foreach (MMProductionNormItemsInfo productNormsInfo1 in productNormsInfo.SubList)
                                {
                                    productNormsInfo1.MMProductionNormItemDepreciationRate = rate;
                                    productNormsInfo1.MMProductionNormItemQuantity = productNormsInfo1.MMProductionNormItemTotalQuantity * productNormsInfo1.MMProductionNormItemDepreciationRate;
                                }
                            }
                        }
                        entity.ProductionNormItemPackagingList.TreeListControl?.RefreshDataSource();
                    }
                }
                e.SuppressKeyPress = true;
            }
        }

        public void RecalDepreciationAllItem()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            decimal rate = 0;
            decimal.TryParse(DepreciationRateTextBox.Text, out rate);

            List<ICProductItemsInfo> productStructuresList = new List<ICProductItemsInfo>();
            entity.ProductItemTreeList.ConvertToList(productStructuresList);

            MMCalMaterialConfigsController objCalMaterialConfigsController = new MMCalMaterialConfigsController();
            List<MMCalMaterialConfigsInfo> calMaterialConfigList = objCalMaterialConfigsController.GetAllConfig();
            foreach (ICProductsInfo product in entity.ProductList)
            {
                if (rate > 0 && product.ICProductDepreciationRate == 0)
                {
                    product.ICProductDepreciationRate = rate;
                }
                //Bỏ tính tiêu hao theo BTP
                CalculateDepreciation(product, calMaterialConfigList, productStructuresList);
            }
            entity.ProductList.GridControl?.RefreshDataSource();
        }
        public List<ICProductDetailsInfo> GetListParent(int productID)
        {
            List<ICProductDetailsInfo> result = (new ICProductDetailsController()).GetListProductDetailByProductID(productID);
            return result;
        }

        public decimal GetProductSteelQty(ICProductsInfo parent, ICProductItemMaterialsInfo item)
        {
            if (parent == null || item == null)
                return 0;

            ICProductItemMaterialsController objProductItemMaterialsController = new ICProductItemMaterialsController();
            decimal productQty = objProductItemMaterialsController.GetMaterialQtyFromConfigRate(item.FK_ICProductMaterialID, parent.ICProductLength, parent.ICProductWidth, parent.ICProductHeight, parent.FK_ICProductAttributeWoodTypeID);
            return productQty;
        }

        public decimal GetBlockByDemension(decimal l, decimal w, decimal h)
        {
            return (l / 1000) * (w / 1000) * (h / 1000);
        }

        //public void CalculateDepreciation(ICProductsInfo product)
        //{
        //    CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
        //    if (!product.HasComponent) // không có thành phần => tự tính => phân bổ tỉ lệ cho nguyên liệu
        //    {
        //        decimal qty = 0;
        //        ICProductItemsInfo finditem = FindProductItemByProductID(product.ICProductID, entity.ProductItemTreeList);
        //        if (finditem != null)
        //        {
        //            qty = finditem.ICProductItemQty;
        //        }
        //        if (qty == 0) qty = 1;
        //        decimal block = GetBlockByDemension(product.ICProductLength, product.ICProductWidth, product.ICProductHeight);
        //        product.ICProductDepreciationQty = block * product.ICProductDepreciationRate * qty;
        //        decimal sumKLTinh = 0;
        //        foreach (ICProductItemMaterialsInfo material in product.MaterialList)
        //        {
        //            ICProductsInfo objPro = BOSApp.GetProductFromCurrentProductList(material.FK_ICProductMaterialID);
        //            if (objPro != null && objPro.ICProductType == ProductType.Lumber.ToString())
        //            {
        //                sumKLTinh += material.ICProductItemMaterialWoodQty * GetBlockByDemension(material.ICProductItemMaterialLength, material.ICProductItemMaterialWidth, material.ICProductItemMaterialHeigth);
        //            }
        //        }
        //        foreach (ICProductItemMaterialsInfo item in product.MaterialList)
        //        {
        //            ICProductsInfo objPro = BOSApp.GetProductFromCurrentProductList(item.FK_ICProductMaterialID);
        //            if (objPro != null && objPro.ICProductType == ProductType.Lumber.ToString())
        //            {
        //                item.ICProductItemMaterialDepreciationQty = 0;
        //                item.ICProductItemMaterialDepreciationRate = 0;
        //                if (sumKLTinh > 0)
        //                {
        //                    item.KLTinh = item.ICProductItemMaterialWoodQty * GetBlockByDemension(item.ICProductItemMaterialLength
        //                                                                                   , item.ICProductItemMaterialWidth
        //                                                                                   , item.ICProductItemMaterialHeigth);
        //                    if (item.KLTinh > 0)
        //                    {
        //                        item.ICProductItemMaterialDepreciationQty = item.KLTinh * (product.ICProductDepreciationQty / sumKLTinh);
        //                        item.ICProductItemMaterialDepreciationRate = item.ICProductItemMaterialDepreciationQty / item.KLTinh;
        //                    }
        //                }
        //            }
        //            else
        //            {
        //                if (item.ICProductItemMaterialDepreciationRate == 0 && product.ICProductDepreciationRate > 0) item.ICProductItemMaterialDepreciationRate = product.ICProductDepreciationRate;
        //                item.ICProductItemMaterialDepreciationQty = item.ICProductItemMaterialDepreciationRate * item.ICProductItemMaterialWoodQty;
        //            }

        //        }
        //    }
        //    else
        //    {
        //        // có thành phần = sum kl tiêu hao của thành phần và nguyên liệu
        //        decimal sumComponentDepreciationQty = 0;
        //        decimal sumMaterialDepreciationQty = 0;
        //        decimal sumComponentBlock = 0;
        //        ICProductItemsInfo item = FindProductItemByProductID(product.ICProductID, entity.ProductItemTreeList);
        //        if (item != null && item.SubList != null && item.SubList.Any())
        //        {
        //            ICProductsInfo filterItem;
        //            foreach (ICProductItemsInfo sItem in item.SubList)
        //            {
        //                filterItem = entity.ProductList.FirstOrDefault(t => t.ICProductID == sItem.FK_ICProductItemChildID);
        //                if (filterItem != null)
        //                {
        //                    sumComponentDepreciationQty += (filterItem.ICProductDepreciationQty);
        //                    sumComponentBlock += (GetBlockByDemension(filterItem.ICProductLength
        //                                                            , filterItem.ICProductWidth
        //                                                            , filterItem.ICProductHeight) * sItem.ICProductItemQty);
        //                }
        //            }
        //        }
        //        MMExchangeRateConfigsController ercCtrl = new MMExchangeRateConfigsController();
        //        MMExchangeRateConfigsInfo erc = new MMExchangeRateConfigsInfo();
        //        if (product.MaterialList != null && product.MaterialList.Any())
        //        {
        //            foreach (ICProductItemMaterialsInfo materialsInfo in product.MaterialList)
        //            {
        //                ICProductsInfo objPro = BOSApp.GetProductFromCurrentProductList(materialsInfo.FK_ICProductMaterialID);
        //                if (objPro != null && objPro.ICProductType == ProductType.Lumber.ToString())
        //                {
        //                    materialsInfo.ICProductItemMaterialDepreciationRate = product.ICProductDepreciationRate;
        //                    materialsInfo.ICProductItemMaterialDepreciationQty = materialsInfo.ICProductItemMaterialDepreciationRate
        //                                                                * materialsInfo.ICProductItemMaterialWoodQty
        //                                                                * GetBlockByDemension(materialsInfo.ICProductItemMaterialLength
        //                                                                                       , materialsInfo.ICProductItemMaterialWidth
        //                                                                                       , materialsInfo.ICProductItemMaterialHeigth);
        //                    sumMaterialDepreciationQty += materialsInfo.ICProductItemMaterialDepreciationQty;
        //                }
        //                else if (objPro != null && objPro.ICProductType == ProductType.Steel.ToString())
        //                {
        //                    materialsInfo.ICProductItemMaterialWoodQty = GetProductSteelQty(product, materialsInfo);
        //                    if (materialsInfo.ICProductItemMaterialDepreciationRate == 0)
        //                        materialsInfo.ICProductItemMaterialDepreciationRate = product.ICProductDepreciationRate > 0 ? product.ICProductDepreciationRate : 1;

        //                    materialsInfo.ICProductItemMaterialDepreciationQty = materialsInfo.ICProductItemMaterialWoodQty * materialsInfo.ICProductItemMaterialDepreciationRate;
        //                }
        //                else
        //                {
        //                    if (materialsInfo.ICProductItemMaterialDepreciationRate == 0)
        //                        materialsInfo.ICProductItemMaterialDepreciationRate = product.ICProductDepreciationRate > 0 ? product.ICProductDepreciationRate : 1;
        //                    materialsInfo.ICProductItemMaterialDepreciationQty = materialsInfo.ICProductItemMaterialWoodQty * materialsInfo.ICProductItemMaterialDepreciationRate;
        //                }
        //            }
        //        }

        //        if (sumComponentBlock > 0 && BOSApp.UsingCarCass)
        //        {
        //            product.ICProductDepreciationQty = sumComponentDepreciationQty + sumMaterialDepreciationQty;
        //            product.ICProductDepreciationRate = 0;
        //            if (product.ICProductDepreciationQty > 0)
        //            {
        //                product.ICProductDepreciationRate = 0;
        //                product.ICProductDepreciationRate = product.ICProductDepreciationQty / sumComponentBlock;
        //            }
        //        }
        //    }
        //}

        public ICProductItemsInfo FindProductItemByProductID(int productID, IBOSTreeList treeList)
        {
            ICProductItemsInfo result = null;

            if (treeList != null && treeList.Any())
            {
                foreach (ICProductItemsInfo item in treeList)
                {
                    if (item.FK_ICProductItemChildID == productID)
                    {
                        result = item;
                        break;
                    }
                    else
                    {
                        result = FindProductItemByProductID(productID, item.SubList);
                        if (result != null)
                            break;
                    }
                }
            }
            return result;
        }

        public void InitControlDictionary()
        {
            ControlDictionary = new Dictionary<ProductionNormStatusType, List<string>>();
            ControlDictionary.Add(ProductionNormStatusType.WoodStatus, new List<string> { "fld_btnApproveMMProductionNormWoodStatus"
                                                                                        ,   "fld_btnEditMMProductionNormWoodStatus"
                                                                                        //,   "fld_btnSaveBOM"
            });

            ControlDictionary.Add(ProductionNormStatusType.HardwareStatus, new List<string> { "fld_btnApproveMMProductionNormHardwareStatus"
                                                                                        ,   "fld_btnEditMMProductionNormHardwareStatus"
                                                                                        ,   "fld_lkeICProductHardwareID"
                                                                                        //,   "fld_btnChangeHardware"
                                                                                        ,   "fld_btnSaveHardware"
            });

            ControlDictionary.Add(ProductionNormStatusType.PaintStatus, new List<string> { "fld_btnApproveMMProductionNormPaintStatus"
                                                                                        ,   "fld_btnEditMMProductionNormPaintStatus"
                                                                                        ,   "fld_lkeMMPaintProcessesID"
                                                                                        ,   "fld_lkeICProductIngredientPaintID"
                                                                                        ,   "fld_lkeMMOperationID"
                                                                                        ,   "fld_btnSavePaint"
            });

            ControlDictionary.Add(ProductionNormStatusType.PackingMaterialStatus, new List<string> { "fld_btnApproveMMProductionNormPackingMaterialStatus"
                                                                                        ,   "fld_btnEditMMProductionNormPackingMaterialStatus"
                                                                                        ,   "fld_lkeMMOperationPackaging"
                                                                                        ,   "fld_btnSavePackaging"
                                                                                        ,   "fld_lkeICProductPackaging"
            });

            ControlDictionary.Add(ProductionNormStatusType.GeneralMaterialStatus, new List<string> { "fld_btnApproveMMProductionNormGeneralMaterialStatus"
                                                                                        ,   "fld_btnEditMMProductionNormGeneralMaterialStatus"
                                                                                        ,   "fld_lkeICProductMaterialID"
                                                                                        ,   "fld_btnUpdateFromConfigMaterial"
                                                                                        ,   "fld_lkeOperationGeneralMaterial"
                                                                                        ,   "fld_btnSaveOther"
            });

            ControlDictionary.Add(ProductionNormStatusType.CarcassProccessStatus, new List<string> { "fld_btnApproveMMProductionNormCarcassProccessStatus"
                                                                                        ,   "fld_btnEditMMProductionNormCarcassProccessStatus"
                                                                                        ,   "fld_lkeMMProductionNormCarcassProccessStatus"

            });
            if (BOSApp.UsingCarCass)
                ControlDictionary.Add(ProductionNormStatusType.ColorProccessStatus, new List<string> { "fld_btnApproveMMProductionNormColorProccessStatus"
                                                                                        ,   "fld_btnEditMMProductionNormColorProccessStatus"
                                                                                        ,   "fld_lkeMMProductionNormColorProccessStatus"
                                                                                        ,  "fld_btnMainProductProcess"
            });
            else
                ControlDictionary.Add(ProductionNormStatusType.ColorProccessStatus, new List<string> { "fld_btnApproveMMProductionNormColorProccessStatus"
                                                                                        ,   "fld_btnEditMMProductionNormColorProccessStatus"
                                                                                        ,   "fld_lkeMMProductionNormColorProccessStatus"
            });
        }

        public void InitTypeAndColumnName()
        {
            TypeAndColumnName = new Dictionary<ProductionNormStatusType, string>();
            TypeAndColumnName.Add(ProductionNormStatusType.WoodStatus, "MMProductionNormWoodStatus");
            TypeAndColumnName.Add(ProductionNormStatusType.HardwareStatus, "MMProductionNormHardwareStatus");
            TypeAndColumnName.Add(ProductionNormStatusType.PaintStatus, "MMProductionNormPaintStatus");
            TypeAndColumnName.Add(ProductionNormStatusType.PackingMaterialStatus, "MMProductionNormPackingMaterialStatus");
            TypeAndColumnName.Add(ProductionNormStatusType.GeneralMaterialStatus, "MMProductionNormGeneralMaterialStatus");
            TypeAndColumnName.Add(ProductionNormStatusType.ColorProccessStatus, "MMProductionNormColorProccessStatus");
            TypeAndColumnName.Add(ProductionNormStatusType.CarcassProccessStatus, "MMProductionNormCarcassProccessStatus");
        }

        public void SetControlEnable()
        {
            bool isCarcassProduct = IsCarcassProduct();
            List<ProductionNormStatusType> colorDisableTypes
                = new List<ProductionNormStatusType>() { ProductionNormStatusType.WoodStatus
                                                       , ProductionNormStatusType.HardwareStatus
                                                       , ProductionNormStatusType.GeneralMaterialStatus};

            List<ProductionNormStatusType> colorHideTypes
                = new List<ProductionNormStatusType>() { ProductionNormStatusType.CarcassProccessStatus };


            List<ProductionNormStatusType> carcassHideTypes
               = new List<ProductionNormStatusType>() { ProductionNormStatusType.ColorProccessStatus };


            foreach (ProductionNormStatusType type in ControlDictionary.Keys)
            {
                if (!isCarcassProduct)
                {
                    if (colorDisableTypes.Contains(type))
                    {
                        foreach (string controlName in ControlDictionary[type])
                        {
                            Control ctrl = Controls[controlName];
                            if (ctrl != null) { ctrl.Enabled = false; }
                        }
                    }
                    else if (colorHideTypes.Contains(type))
                    {
                        foreach (string controlName in ControlDictionary[type])
                        {
                            Control ctrl = Controls[controlName];
                            if (ctrl != null) { ctrl.Visible = false; }
                        }
                    }
                    else
                    {
                        SetControlEnableByType(type, ControlDictionary[type], TypeAndColumnName[type]);
                    }
                }
                else
                {
                    if (carcassHideTypes.Contains(type))
                    {
                        foreach (string controlName in ControlDictionary[type])
                        {
                            Control ctrl = Controls[controlName];
                            if (ctrl != null) { ctrl.Visible = false; }
                        }
                    }
                    else
                    {
                        SetControlEnableByType(type, ControlDictionary[type], TypeAndColumnName[type]);
                    }
                }
            }
        }

        public void SetControlEnableByType(ProductionNormStatusType type, List<string> controlNames, string colName)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo pn = (MMProductionNormsInfo)entity.MainObject;

            BOSDbUtil dbUtil = new BOSDbUtil();

            string colStatus = dbUtil.GetPropertyStringValue(pn, colName);

            bool isApprove = (colStatus == Status.Approved.ToString());

            Control ctrl;
            foreach (string ctrlName in controlNames)
            {
                ctrl = Controls[ctrlName];
                if (ctrl != null)
                {
                    if (ctrlName.StartsWith("fld_btnEdit"))
                    {
                        ctrl.Enabled = isApprove;
                    }
                    else
                    {
                        ctrl.Enabled = !isApprove;
                    }
                    ctrl.Visible = true;
                    SetPermission(ctrl);
                }
            }

        }

        //public void EnableByCarcass()
        //{
        //    List<string> controlNameList = new List<string>() { "fld_btnCoppyCarcassSemiProduct"
        //                                                        ,   "fld_btnSave"
        //                                                        ,   "fld_btnSaveBOMTree"
        //                                                        ,   "fld_btnCreateBOM"
        //                                                        ,   "fld_btnSaveBOM"
        //                                                        ,   "fld_btnChangeHardware"
        //                                                        ,   "fld_lkeICProductHardwareID"
        //                                                        ,   "fld_btnSaveHardware"
        //                                                        ,   "fld_btnSaveOther"
        //                                                        ,   "fld_btnUpdateFromConfigMaterial"
        //                                                        ,   "fld_btnUpdateFromConfigMaterial"
        //                                                        };
        //    foreach (string coltrolName in controlNameList)
        //    {
        //        if (Controls[coltrolName] != null)
        //        {
        //            Controls[coltrolName].Enabled = IsCarcass;
        //        }
        //    }

        //    VisibleCarcassTabPages(IsCarcass);
        //    VisiblePaintAndPackagingTabPages(!IsCarcass);
        //}

        private void VisiblePaintAndPackagingTabPages(bool visible)
        {
            foreach (XtraTabPage page in tcBOM.TabPages)
            {
                //if (page.Name == "fld_tpPaint" || page.Name == "fld_tpPackaging")
                //    page.PageVisible = visible;
            }
        }

        private void VisibleCarcassTabPages(bool visible)
        {
            foreach (XtraTabPage page in tcDetailInfo.TabPages)
            {
                if (page.Name == "tpSemiProducts" || page.Name == "tpProductStructure")
                {
                    page.PageVisible = visible;
                }
            }
        }

        public void SearchCarcass(int productID, int productGroupID, int branchID, string typeGet, int batchProductID, int objectID, string objectType, bool isHasBOM, bool isNotBOM, string statusGet)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            ICProductsController productCtrl = new ICProductsController();
            List<ICProductsForViewIMES> carcassList = productCtrl.GetViewMESProductAndNormBySomeCriteria(productID, productGroupID, branchID, typeGet, batchProductID, objectID, objectType, isHasBOM, isNotBOM, statusGet, BOSApp.CurrentUsersInfo.ADUserID);
            entity.CarrcassList.InvalidateNoneBackUp(carcassList);
            entity.CarrcassList.GridControl?.RefreshDataSource();
        }

        public List<BRBranchsInfo> GetDataBranch()
        {
            BRBranchsController objBranchsController = new BRBranchsController();
            List<BRBranchsInfo> BranchList = objBranchsController.GetAllBranchByUserPermission(BOSApp.CurrentUsersInfo.ADUserID, BOSApp.CurrentCompanyInfo.FK_BRBranchID, ModuleName.Branch, ADDataViewPermissionType.Module);
            return BranchList;
        }
        public List<ICProductsInfo> GetWoodIngredient(List<MMMaterialDepartmentsInfo> MaterialDepartList)
        {
            ICProductsController objProductsController = new ICProductsController();
            List<ICProductsInfo> objProductsInfoList = new List<ICProductsInfo>();
            objProductsInfoList.Add(new ICProductsInfo());
            List<ICProductsInfo> dataList = new List<ICProductsInfo>();
            List<ICProductsForViewInfo> productViewList = new List<ICProductsForViewInfo>();
            if (MaterialDepartList != null)
            {
                productViewList = BOSApp.CurrentProductList.Where(o => MaterialDepartList.Any(dp => dp.FK_ICDepartmentID == o.FK_ICDepartmentID
                                                                    && (dp.ICProducType == string.Empty || (dp.ICProducType == o.ICProductType)))).ToList();
            }
            else
                productViewList = BOSApp.CurrentProductList.Where(o => o.FK_ICDepartmentID == DepartmentID.Wood).ToList();
            if (productViewList.Count() > 0) productViewList.ForEach(o =>
            {
                ICProductsInfo newObj = new ICProductsInfo();
                BOSUtil.CopyViewObject(o, newObj);
                dataList.Add(newObj);
            });
            if (dataList != null)
                objProductsInfoList.AddRange(dataList);

            return objProductsInfoList;
        }
      
        private void SetPermission(Control ctrl)
        {
           
            List<STFieldPermissionsInfo> fieldPermissionList = this.LstFieldPermission;
            if (fieldPermissionList != null)
                fieldPermissionList = fieldPermissionList.Where(fp => fp.STModuleName == this.Name
                    && fp.FK_ADUserGroupID == BOSApp.CurrentUserGroupInfo.ADUserGroupID
                    && fp.STScreenName == "guiCarcassBOM"
                    ).ToList();
            STFieldPermissionsInfo objFieldPermissionsInfo = fieldPermissionList.Where(o => o.STFieldName == ctrl.Name).FirstOrDefault();
            if (objFieldPermissionsInfo != null)
            {
                if (ctrl is XtraTabPage)
                {
                    XtraTabPage tabPage = (XtraTabPage)ctrl;
                    if (objFieldPermissionsInfo.STFieldPermissionType == Convert.ToByte(FieldPermissionType.Hided))
                        tabPage.PageVisible = false;
                }
                else
                {

                    if (objFieldPermissionsInfo.STFieldPermissionType == Convert.ToByte(FieldPermissionType.Hided))
                    {
                        ctrl.Visible = false;
                        ctrl.Enabled = false;
                    }
                    else if (objFieldPermissionsInfo.STFieldPermissionType == Convert.ToByte(FieldPermissionType.Disabled))
                        ctrl.Enabled = false;
                    else if (objFieldPermissionsInfo.STFieldPermissionType == Convert.ToByte(FieldPermissionType.HidedDisabled))
                        ctrl.Visible = false;
                    else if (objFieldPermissionsInfo.STFieldPermissionType == Convert.ToByte(FieldPermissionType.None))
                    {
                        ctrl.Visible = true;
                        ctrl.Enabled = true;
                        if (ctrl is BaseEdit)
                        {
                            (ctrl as BaseEdit).Properties.ReadOnly = false;
                        }
                    }
                }
            }
        }
        private void InvalidateCarcassGeneralInfo(XtraTabPage carcassPage, ICProductsInfo carcassInfo)
        {
            carcassPage.PageVisible = true;
            carcassPage.Text = carcassInfo.ICProductNo;

            BOSTextBox carcassNoControl = (BOSTextBox)Controls["fld_txtICProductNo"];
            if (carcassNoControl != null)
            {
                carcassNoControl.Text = carcassInfo.ICProductNo;
            }

            BOSTextBox carcassNameControl = (BOSTextBox)Controls["fld_txtICProductName"];
            if (carcassNameControl != null)
            {
                carcassNameControl.Text = carcassInfo.ICProductName;
            }

            BOSMemoEdit carcassDescControl = (BOSMemoEdit)Controls["fld_medICProductDesc"];
            if (carcassDescControl != null)
            {
                carcassDescControl.Text = carcassInfo.ICProductDesc;
            }

            if (DepreciationRateTextBox != null)
            {
                DepreciationRateTextBox.Text = carcassInfo.ICProductDepreciationRate.ToString("N2");
            }
            if (DepreciationRateHardWareTextBox != null)
            {
                DepreciationRateHardWareTextBox.Text = 1M.ToString();
            }
            if (DepreciationRatePackagingTextBox != null)
            {
                DepreciationRatePackagingTextBox.Text = 1M.ToString();
            }
            if (DepreciationRateGeneralMaterialTextBox != null)
            {
                DepreciationRateGeneralMaterialTextBox.Text = 1M.ToString();
            }
            CarcassPicture.Image = null;
            Thread thr = new Thread(() =>
            {
                CarcassPicture.Invoke(new Action(() =>
                {
                    InitProductPictureImage(carcassInfo.ICProductImageFile);
                }));
            });
            thr.Start();
            thr.IsBackground = true;
        }

        public void InitProductPictureImage(string image)
        {
            if (string.IsNullOrEmpty(image))
                return;
            image = image.Replace("/view?usp=sharing", "").Replace("https://drive.google.com/file/d/", "https://drive.google.com/uc?id=");
            try
            {
                WebClient webclient = new WebClient();
                webclient.Headers.Add("User-Agent: Other");
                byte[] bytes = webclient.DownloadData(image);
                MemoryStream ms = new MemoryStream(bytes);
                System.Drawing.Image img = System.Drawing.Image.FromStream(ms);
                if (CarcassPicture != null)
                    CarcassPicture.Image = img;
            }
            catch
            {
                //BOSApp.ShowMessage("Link ảnh hoặc định dạng hình ảnh không hợp lệ!");
                //if (CarcassPicture != null)
                //    CarcassPicture.Image = null;
            }
        }

        private void InvalidCarcassSemiProductGrid()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;

            ICProductsController productController = new ICProductsController();
            List<ICProductsInfo> products = productController.GetSemiProductByParent(CurrentCarcass.ICProductID, CurrentCarcass.MMProductionNormID);

            ICProductItemMaterialsController pimCtrl = new ICProductItemMaterialsController();
            List<ICProductItemMaterialsInfo> pimList = new List<ICProductItemMaterialsInfo>();
            if (products.Count() == 0)
            {
                ICProductsInfo item = new ICProductsInfo();
                ICProductsForViewInfo iProduct = BOSApp.CurrentProductList.FirstOrDefault(t => t.ICProductID == CurrentCarcass.ICProductID);
                BOSUtil.CopyObject(iProduct, item);
                item.ICProductOrderID = 1;
                item.ICProductID = CurrentCarcass.ICProductID;
                item.FK_ICProductParentID = 0;
                item.FK_MMProductionNormID = CurrentCarcass.MMProductionNormID;
                decimal rate = 0;
                if (DepreciationRateTextBox.Text != null)
                    decimal.TryParse(DepreciationRateTextBox.Text, out rate);
                if (rate > 0 && item.ICProductDepreciationRate == 0)
                {
                    item.ICProductDepreciationRate = rate;
                }
                if (CurrentCarcass.ICProductID > 0 && BOSApp.ShowMessageYesNo("Bạn muốn sao chép nguyên liệu không?") == DialogResult.Yes)
                {
                    guiCopyMaterial guiFind = new guiCopyMaterial(CurrentCarcass.ICProductID, 0, null);
                    guiFind.Module = this;
                    if (guiFind.ShowDialog() == DialogResult.OK)
                    {
                        pimList = guiFind.SelectedObjects;
                        item.MaterialList = new BindingList<ICProductItemMaterialsInfo>();
                        ICProductItemMaterialsInfo pim;
                        pimList.ForEach(m =>
                        {
                            pim = (ICProductItemMaterialsInfo)m.Clone();
                            pim.FK_ICProductCarcassID = CurrentCarcass.ICProductID;
                            pim.ICProductItemMaterialID = 0;
                            pim.FK_MMProductionNormID = CurrentCarcass.MMProductionNormID;
                            item.MaterialList.Add(pim);
                        });
                    }
                }
                products.Add(item);
            }
            pimList = pimCtrl.GetMaterialByProductionNormID(CurrentCarcass.MMProductionNormID);
            products.ForEach(btp =>
            {
                btp.MaterialList = new BindingList<ICProductItemMaterialsInfo>();
                pimList.ForEach(m =>
                {
                    if (m.FK_ICProductID == btp.ICProductID)
                    {
                        btp.MaterialList.Add(m);
                    }
                });
            });
            entity.ProductList.BackupList.Clear();
            entity.ProductList.Invalidate(products.OrderBy(o => o.ICProductOrderID).ToList());
            entity.ProductList.GridControl?.RefreshDataSource();
            if (entity.ProductList.GridControl != null)
            {
                GridView view = (GridView)entity.ProductList.GridControl.MainView;
                if (view != null)
                {
                    view.CollapseAllDetails();
                }
            }
        }

        public void CopySemiProduct(ICProductsInfo carcass, int btpID)
        {
            if (carcass == null)
                return;

            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo pn = (MMProductionNormsInfo)entity.MainObject;
            if (CurrentCarcass.FK_MMProductionNormID == 0)
                CurrentCarcass.FK_MMProductionNormID = pn.MMProductionNormID > 0 ? pn.MMProductionNormID : 0;

            ICProductsController productController = new ICProductsController();
            List<ICProductsInfo> products = productController.GetSemiProductListByProductionNormID(carcass.MMProductionNormID, btpID);
            if (!products.Any())
            {
                MessageBox.Show("Không tìm thấy BTP cần sao chép. Vui lòng kiểm tra lại!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            ICProductItemMaterialsController pimCtrl = new ICProductItemMaterialsController();
            List<ICProductItemMaterialsInfo> pimList = pimCtrl.GetMaterialByProductionNormID(carcass.MMProductionNormID, btpID);
            List<ICProductItemMaterialsInfo> materialTempList = new List<ICProductItemMaterialsInfo>();
            ICProductItemMaterialsInfo tempMaterialsInfo = new ICProductItemMaterialsInfo();

            ICProductItemProcesssController processsController = new ICProductItemProcesssController();
            List<ICProductItemProcesssInfo> lstProcess = processsController.GetProcessByProductionNormID(carcass.MMProductionNormID, btpID);
            List<ICProductItemProcesssInfo> processTempList = new List<ICProductItemProcesssInfo>();
            ICProductItemProcesssInfo tempProcessInfo = new ICProductItemProcesssInfo();
            ICProductsInfo newSemiProductsInfo = new ICProductsInfo();
            ICProductsInfo productSourcesInfo = products.Where(o => o.ICProductID == carcass.ICProductID).FirstOrDefault();
            if (!entity.ProductList.Where(o => o.ICProductID == pn.FK_ICProductID).Any())
            {
                newSemiProductsInfo = BOSApp.GetProductFromCurrentProductList(pn.FK_ICProductID);
                if (newSemiProductsInfo != null)
                {
                    newSemiProductsInfo.ICProductOrderID = 1;
                    newSemiProductsInfo.FK_ICProductParentID = 0;
                    newSemiProductsInfo.ICProductCode = productSourcesInfo == null ? string.Empty : productSourcesInfo.ICProductCode;
                    newSemiProductsInfo.FK_ICProductCarcassID = CurrentCarcass.ICProductID;
                    newSemiProductsInfo.FK_MMProductionNormID = CurrentCarcass.FK_MMProductionNormID;
                    newSemiProductsInfo.ICProductImageName = string.Empty;
                    newSemiProductsInfo.ICProductDetailID = 0;
                    entity.ProductList.Insert(0, newSemiProductsInfo);

                    materialTempList = pimList.Where(o => o.FK_ICProductID == carcass.ICProductID).ToList();
                    if (newSemiProductsInfo.MaterialList == null)
                        newSemiProductsInfo.MaterialList = new BindingList<ICProductItemMaterialsInfo>();

                    materialTempList.ForEach(m =>
                    {
                        tempMaterialsInfo = (ICProductItemMaterialsInfo)m.Clone();
                        tempMaterialsInfo.FK_ICProductCarcassID = CurrentCarcass.ICProductID;
                        tempMaterialsInfo.FK_MMProductionNormID = CurrentCarcass.FK_MMProductionNormID;
                        tempMaterialsInfo.FK_ICProductID = 0;
                        tempMaterialsInfo.ICProductItemMaterialID = 0;
                        tempMaterialsInfo.FK_ICProductDetailID = 0;
                        newSemiProductsInfo.MaterialList.Add(tempMaterialsInfo);
                    });

                    processTempList = lstProcess.Where(o => o.FK_ICProductID == carcass.ICProductID).ToList();
                    if (newSemiProductsInfo.ProcessList == null)
                        newSemiProductsInfo.ProcessList = new List<ICProductItemProcesssInfo>();

                    processTempList.ForEach(o =>
                    {
                        tempProcessInfo = (ICProductItemProcesssInfo)o.Clone();
                        tempProcessInfo.ICProductItemProcessID = 0;
                        tempProcessInfo.FK_ICProductDetailID = 0;
                        tempProcessInfo.FK_ICProductCarcassID = CurrentCarcass.ICProductID;
                        tempProcessInfo.FK_ICProductID = 0;
                        tempProcessInfo.FK_MMProductionNormID = CurrentCarcass.FK_MMProductionNormID;
                        newSemiProductsInfo.ProcessList.Add(tempProcessInfo);
                    });
                }
            }
            products.ForEach(p =>
            {
                if (p.ICProductID == carcass.ICProductID)
                    return;

                newSemiProductsInfo = new ICProductsInfo();
                BOSUtil.CopyObject(p, newSemiProductsInfo);
                newSemiProductsInfo.ICProductID = 0;
                newSemiProductsInfo.ICProductNo = string.Empty;
                newSemiProductsInfo.FK_ICProductParentID = 0;
                newSemiProductsInfo.FK_ICProductCarcassID = CurrentCarcass.ICProductID;
                newSemiProductsInfo.FK_MMProductionNormID = CurrentCarcass.FK_MMProductionNormID;
                newSemiProductsInfo.ICProductImageName = string.Empty;
                newSemiProductsInfo.ICProductDetailID = 0;
                entity.ProductList.Add(newSemiProductsInfo);

                materialTempList = pimList.Where(o => o.FK_ICProductID == p.ICProductID).ToList();
                if (newSemiProductsInfo.MaterialList == null)
                    newSemiProductsInfo.MaterialList = new BindingList<ICProductItemMaterialsInfo>();

                materialTempList.ForEach(m =>
                {
                    tempMaterialsInfo = (ICProductItemMaterialsInfo)m.Clone();
                    tempMaterialsInfo.FK_ICProductCarcassID = CurrentCarcass.ICProductID;
                    tempMaterialsInfo.FK_MMProductionNormID = CurrentCarcass.FK_MMProductionNormID;
                    tempMaterialsInfo.FK_ICProductID = 0;
                    tempMaterialsInfo.ICProductItemMaterialID = 0;
                    tempMaterialsInfo.FK_ICProductDetailID = 0;
                    newSemiProductsInfo.MaterialList.Add(tempMaterialsInfo);
                });

                processTempList = lstProcess.Where(o => o.FK_ICProductID == p.ICProductID).ToList();
                if (newSemiProductsInfo.ProcessList == null)
                    newSemiProductsInfo.ProcessList = new List<ICProductItemProcesssInfo>();

                processTempList.ForEach(o =>
                {
                    tempProcessInfo = (ICProductItemProcesssInfo)o.Clone();
                    tempProcessInfo.ICProductItemProcessID = 0;
                    tempProcessInfo.FK_ICProductDetailID = 0;
                    tempProcessInfo.FK_ICProductCarcassID = CurrentCarcass.ICProductID;
                    tempProcessInfo.FK_ICProductID = 0;
                    tempProcessInfo.FK_MMProductionNormID = CurrentCarcass.FK_MMProductionNormID;
                    newSemiProductsInfo.ProcessList.Add(tempProcessInfo);
                });
            });
            entity.ProductList.GridControl?.RefreshDataSource();
        }

        public void CopyHWFromCarcass(int bomID)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormItemsController normController = new MMProductionNormItemsController();
            MMProductionNormsInfo pn = (MMProductionNormsInfo)entity.MainObject;
            if (pn.MMProductionNormHardwareStatus == "Approved")
            {
                BOSApp.ShowMessage("Định mức đã duyệt, không thể thay đổi.");
                return;
            }
            if (pn.MMProductionNormID == bomID) return;
            List<MMProductionNormItemsInfo> listHW = normController.GetCarcassByProductIDHardware(bomID);
            if (listHW != null
                && listHW.Any())
            {
                listHW.ForEach(p =>
                {
                    if (p.MMProductionNormItemSortOrder == 0)
                    {
                        if (entity.ProductionNormItemHardwareList != null && entity.ProductionNormItemHardwareList.Count > 0)
                            p.MMProductionNormItemSortOrder = entity.ProductionNormItemHardwareList.Count + 1;
                        else
                            p.MMProductionNormItemSortOrder = 1;
                    }
                    p.FK_MMProductionNormID = pn.MMProductionNormID;
                    p.MMProductionNormItemID = 0;
                    p.MMProductionNormItemParentID = 0;
                    p.FK_MMSemiProductID = 0;
                    if (p.SubList == null) p.SubList = new BOSTreeList();
                    entity.ProductionNormItemHardwareList.Add((MMProductionNormItemsInfo)p.Clone());
                });
                entity.ProductionNormItemHardwareList.TreeListControl.RefreshDataSource();
                entity.ProductionNormItemHardwareList.TreeListControl.ExpandAll();
                entity.ProductionNormItemHardwareList.TreeListControl.BestFitColumns();
            }

        }
        public void CopyPackFromCarcass(int bomID)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormItemsController normController = new MMProductionNormItemsController();
            MMProductionNormsInfo pn = (MMProductionNormsInfo)entity.MainObject;
            if (pn.MMProductionNormPackingMaterialStatus == "Approved")
            {
                BOSApp.ShowMessage("Định mức đã duyệt, không thể thay đổi.");
                return;
            }
            if (pn.MMProductionNormID == bomID) return;
            List<MMProductionNormItemsInfo> listPack = normController.GetPackByProductID(bomID);

            if (listPack != null
                && listPack.Any())
            {
                MMProductionNormItemsInfo packaging = new MMProductionNormItemsInfo();
                listPack.ForEach(o =>
                {
                    o.AbstractID = o.MMProductionNormItemID;
                    o.MMProductionNormItemSortOrderString = o.MMProductionNormItemSortOrder.ToString();
                    packaging = listPack.FirstOrDefault(t => t.MMProductionNormItemID == o.FK_MMProductionNormItemRefID);
                    if (packaging != null)
                    {
                        o.AbstractParentID = packaging.MMProductionNormItemID;
                        o.MMProductionNormItemSortOrderString = string.Format("{0}.{1}", packaging.MMProductionNormItemSortOrder, o.MMProductionNormItemSortOrder);
                    }
                });
                listPack = listPack.OrderBy(p => p.MMProductionNormItemID).ToList();
                listPack.ForEach(p =>
                {
                    p.FK_MMProductionNormID = pn.MMProductionNormID;
                    p.MMProductionNormItemID = 0;
                    p.MMProductionNormItemParentID = 0;
                    p.FK_MMSemiProductID = 0;
                    if (p.SubList == null) p.SubList = new BOSTreeList();
                    entity.ProductionNormItemPackagingList.Add((MMProductionNormItemsInfo)p.Clone());
                });

                entity.ProductionNormItemPackagingList.TreeListControl?.RefreshDataSource();
                entity.ProductionNormItemPackagingList.TreeListControl?.ExpandAll();
            }

        }
        public void CopyPaintFromCarcass(int bomID)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormItemsController normController = new MMProductionNormItemsController();
            MMProductionNormsInfo pn = (MMProductionNormsInfo)entity.MainObject;
            if (pn.MMProductionNormPaintStatus == "Approved")
            {
                BOSApp.ShowMessage("Định mức đã duyệt, không thể thay đổi.");
                return;
            }
            if (pn.MMProductionNormID == bomID) return;
            List<MMProductionNormItemsInfo> listPaint = normController.GetPaintByProductID(bomID);

            //Add parent note


            if (listPaint != null
                && listPaint.Any())
            {
                listPaint.ForEach(p =>
                {
                    if (entity.ProductionNormItemPackagingList != null && entity.ProductionNormItemPackagingList.Count > 0)
                        p.MMProductionNormItemSortOrder = entity.ProductionNormItemPackagingList.Count + 1;
                    else
                        p.MMProductionNormItemSortOrder = 1;
                    p.FK_MMProductionNormID = pn.MMProductionNormID;
                    p.FK_MMProductionNormItemRefID = p.MMProductionNormItemID;
                    p.MMProductionNormItemID = 0;
                    p.FK_MMSemiProductID = 0;
                    if (p.SubList == null) p.SubList = new BOSTreeList();
                });
                InvalidatePaintList(entity, entity.ProductionNormItemPaintList, listPaint, 0);
                entity.ReDrawPaintTreeList();
                entity.ProductionNormItemPaintList.TreeListControl.RefreshDataSource();
                entity.ProductionNormItemPaintList.TreeListControl.ExpandAll();
                entity.ProductionNormItemPaintList.TreeListControl.BestFitColumns();

            }

        }
        public void InvalidatePaintList(object entity, IBOSTreeList treeList, List<MMProductionNormItemsInfo> collection, int parentID)
        {
            if (treeList != null && collection != null)
            {
                treeList.Clear();
                treeList.OriginalList.Clear();
                treeList.BackupList.Clear();
                //int index_orderNo = 1;
                string orderNo = string.Empty;

                foreach (MMProductionNormItemsInfo item in collection)
                {
                    if (item.MMProductionNormItemParentID == parentID)
                    {
                        MMProductionNormItemsInfo productionNormItem1 = item.Clone() as MMProductionNormItemsInfo;
                        productionNormItem1.MMProductionNormItemSortOrderString = productionNormItem1.MMProductionNormItemParentOrderName;
                        productionNormItem1.BackupObject = productionNormItem1.Clone() as MMProductionNormItemsInfo;
                        treeList.Add(productionNormItem1);
                        int parentItem = productionNormItem1.FK_MMProductionNormItemRefID;
                        productionNormItem1.FK_MMProductionNormItemRefID = 0;
                        if (productionNormItem1.TheNumberOfChild != 0)
                        {
                            //Make the type of sub list same as its parent
                            object objType = treeList.GetType().InvokeMember("", BindingFlags.CreateInstance, null, null, null);
                            productionNormItem1.SubList = (BOSTreeList)objType;
                            productionNormItem1.SubList.InitBOSList(entity, TableName.MMProductionNormItemsTableName, TableName.MMProductionNormItemsTableName);
                            InvalidatePaintList(entity, productionNormItem1.SubList, collection, parentItem);

                        }
                        productionNormItem1 = item.Clone() as MMProductionNormItemsInfo;
                        treeList.OriginalList.Add(productionNormItem1);
                        productionNormItem1 = item.Clone() as MMProductionNormItemsInfo;
                        treeList.BackupList.Add(productionNormItem1);
                    }
                }
            }
        }
        public void CreateNewTab(ICProductsInfo carcass)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            if (carcass.ICProductCheckCarcass || !BOSApp.UsingCarCass)
            {
                CurrentCarcass = carcass;
                IsCarcass = true;
            }
            else
            {
                IsCarcass = false;
                ICProductsController pController = new ICProductsController();
                ICProductsInfo refCarcass = (ICProductsInfo)pController.GetObjectByID(carcass.FK_ICProductCarcassID);
                if (refCarcass != null)
                {
                    CurrentCarcass = refCarcass;
                }
                else
                {
                    MessageBox.Show("Vui lòng chọn Hàng trắng cho sản phẩm này", BaseLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
            }
            XtraTabPage carcassPage = null;
            if (CurrentImageList == null) CurrentImageList = new List<ImageWithName>();
            int index = 0;
            foreach (XtraTabPage page in tc.TabPages)
            {
                if (page.Name == "CarrcassBOMPage")
                {

                    carcassPage = page;
                    break;
                }
                index++;
            }
            bool isSuccess;
            InvalidateProductionNorm(carcass, out isSuccess);
            if (!isSuccess)
                return;

            InvalidateCarcassGeneralInfo(carcassPage, carcass);
            InvalidCarcassSemiProductGrid();
            entity.InvalidateBOM();
            entity.InvalidateBOMHardware();
            entity.InvalidateBOMGeneralMaterial();
            entity.InvalidateProductItemTreeList();
            InvalidateProfileManagement();
            InvalidateProductPackingDetail();
            InvalidateCarcassLookupEdit();
            tc.SelectedTabPageIndex = index;
            MMProductionNormsInfo pn = (MMProductionNormsInfo)entity.MainObject;
            if (pn != null)
            {
                entity.InvalidatePaint();
                entity.InvalidatePackaging();
            }
            // ValidatePaintAndPackagingControl(pn);
            VisibleCarcassTabPages(IsCarcass);
            if (!BOSApp.UsingCarCass)
                VisiblePaintAndPackagingTabPages(true);
            else
                VisiblePaintAndPackagingTabPages(!IsCarcass);
            string stisBKV = ADConfigValueUtility.GetConfigTextByGroupAndValue("ProjectBKV", "true");
            bool isBKV = bool.Parse(stisBKV != string.Empty ? stisBKV : "false");
            PrintMaterialButton.Visible = isBKV;
        }

        public void InvalidateProductionNorm(ICProductsInfo carcass, out bool isSuccess)
        {
            isSuccess = true;
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            if (carcass.MMProductionNormID == 0)
            {
                entity.MainObject = CreateProductionNorm(carcass, out isSuccess, false);
                entity.UpdateMainObjectBindingSource();
                return;
            }
            entity.Invalidate(carcass.MMProductionNormID);
            MMProductionNormsInfo mainObject = (MMProductionNormsInfo)entity.MainObject;
            mainObject.ACObjectAccessKey = string.Format("{0};{1}", mainObject.FK_ACObjectID, mainObject.MMObjectType);
            entity.UpdateMainObjectBindingSource();
        }

        public MMProductionNormsInfo CreateProductionNorm(ICProductsInfo carcass, out bool isSuccessful, bool isGenerateNo)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainobject = (MMProductionNormsInfo)entity.MainObject;
            MMProductionNormsInfo mainobjectOld = (MMProductionNormsInfo)mainobject.Clone();
            mainobject = new MMProductionNormsInfo();
            isSuccessful = true;
            //int productCarcassID = BOSApp.UsingCarCass ? carcass.FK_ICProductCarcassID : carcass.ICProductID;
            //MMProductionNormsController objProductionNormsController = new MMProductionNormsController();
            //List<MMProductionNormsInfo> productionNormList = objProductionNormsController.GetProductionNormByProductCarcassID(productCarcassID);
            //MMProductionNormsInfo objProductionNormsInfo = productionNormList.FirstOrDefault();
            //if (productionNormList.Count() > 1)
            //{
            //    guiChooseBOM guiFind = new guiChooseBOM(productionNormList);
            //    guiFind.Module = this;
            //    DialogResult rs = guiFind.ShowDialog();
            //    if (rs != DialogResult.OK)
            //    {
            //        isSuccessful = false;
            //        mainobject = mainobjectOld == null ? new MMProductionNormsInfo() : mainobjectOld;
            //        return mainobject;
            //    }
            //    objProductionNormsInfo = guiFind.ProductionNormsInfo;
            //}
            //if (objProductionNormsInfo == null)
            MMProductionNormsInfo objProductionNormsInfo = new MMProductionNormsInfo();
            mainobject.MMProductionNormWoodStatus = objProductionNormsInfo.MMProductionNormWoodStatus;
            mainobject.MMProductionNormHardwareStatus = objProductionNormsInfo.MMProductionNormHardwareStatus;
            mainobject.MMProductionNormGeneralMaterialStatus = objProductionNormsInfo.MMProductionNormGeneralMaterialStatus;
            mainobject.FK_MMProductionNormCarcassID = carcass.ICProductCheckCarcass ? objProductionNormsInfo.MMProductionNormID : 0;

            mainobject.FK_HREmployeeID = BOSApp.CurrentUsersInfo.FK_HREmployeeID;
            mainobject.FK_ICProductID = carcass.ICProductID;
            if (mainobject.MMProductionNormID == 0 && (mainobject.MMProductionNormPromulgateDate.Date == DateTime.MinValue.Date ||
                mainobject.MMProductionNormPromulgateDate.Date == DateTime.MaxValue.Date))
                mainobject.MMProductionNormPromulgateDate = DateTime.Now;

            mainobject.MMProductionNormName = carcass.ICProductNo;
            mainobject.MMProductionNormOverallSize = (int)carcass.ICProductLength + "x" + (int)carcass.ICProductWidth + "x" + (int)carcass.ICProductHeight;
            mainobject.MMProductionNormOldProductNo = carcass.ICProductNoOfOldSys;
            mainobject.MMProductionNormType = mainobject.MMProductionNormType;
            mainobject.MMProductionNormVersion = mainobject.MMProductionNormVersion;
            if (carcass.FK_ICProductCarcassID != 0)
                mainobject.FK_ICProductCarcassID = carcass.FK_ICProductCarcassID;
            else
                mainobject.FK_ICProductCarcassID = carcass.ICProductID;

            if (isGenerateNo)
            {
                mainobject.MMProductionNormNo = GetProductionNormNo(0, mainobject);
                mainobject.MMProductionNormOriginNo = mainobject.MMProductionNormNo;
            }
            else
            {
                mainobject.MMProductionNormNo = NewNo;
            }
            return mainobject;
        }

        //public bool SetProductionNormCarcass(MMProductionNormsInfo mainobject, ICProductsInfo carcass, out int productionNormCarcassID)
        //{
        //    int productCarcassID = BOSApp.UsingCarCass ? carcass.FK_ICProductCarcassID : carcass.ICProductID;
        //    MMProductionNormsController objProductionNormsController = new MMProductionNormsController();
        //    List<MMProductionNormsInfo> productionNormList = new List<MMProductionNormsInfo>(); // objProductionNormItemsController.GetAllProductionNormByProductCarcassID(productCarcassID);
        //    MMProductionNormsInfo objProductionNormsInfo = productionNormList.FirstOrDefault();
        //    if (productionNormList.Count() > 1)
        //    {
        //        productionNormCarcassID = 0;
        //        guiChooseBOM guiFind = new guiChooseBOM(productionNormList);
        //        guiFind.Module = this;
        //        DialogResult rs = guiFind.ShowDialog();
        //        if (rs != DialogResult.OK)
        //            return false;

        //        objProductionNormsInfo = guiFind.ProductionNormsInfo;
        //    }
        //    if (objProductionNormsInfo == null)
        //        objProductionNormsInfo = new MMProductionNormsInfo();

        //    productionNormCarcassID = carcass.ICProductCheckCarcass ? objProductionNormsInfo.MMProductionNormID : 0;
        //    mainobject.MMProductionNormWoodStatus = objProductionNormsInfo.MMProductionNormWoodStatus;
        //    mainobject.MMProductionNormHardwareStatus = objProductionNormsInfo.MMProductionNormHardwareStatus;
        //    mainobject.MMProductionNormGeneralMaterialStatus = objProductionNormsInfo.MMProductionNormGeneralMaterialStatus;
        //    return true;
        //}

        public void InvalidateCarcassLookupEdit()
        {
            // Cho phép copy của chính nó
            if(CarcassLookupEdit != null)
            CarcassLookupEdit.Properties.DataSource = GetAnotherCarcass(false);
        }
        public DataTable GetAnotherCarcass(bool ignore)
        {
            ICProductsController productCtrl = new ICProductsController();
            DataSet ds = productCtrl.GetDataCarcassByNoAndName(string.Empty, string.Empty);
            DataTable table = new DataTable();
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                table = ds.Tables[0].Rows.Cast<DataRow>().Where(x => (x["ICProductID"] != null ? int.Parse(x["ICProductID"].ToString()) : 0) != CurrentCarcass.ICProductID && ignore || !ignore).CopyToDataTable();
            }
            ds.Dispose();
            return table;
        }
        public void InvalidateProductPackingDetail()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            ICProductPackingDetailsController packingCtrl = new ICProductPackingDetailsController();
            List<ICProductPackingDetailsInfo> packingList = packingCtrl.GetByProductID(CurrentCarcass.ICProductID);

            entity.ICProductPackingDetailsList.Invalidate(packingList);

        }

        private void UpdateProductInfo()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            string productCarcassNo = string.Empty;
            ICProductsInfo product = BOSApp.GetProductFromCurrentProductList(CurrentCarcass.FK_ICProductCarcassID);
            if (product != null)
                productCarcassNo = product.ICProductNo;

            if (entity.ProductList != null)
            {
                ICPriceCalculationMethodsController objPriceCalculationMethodsController = new ICPriceCalculationMethodsController();
                ICPriceCalculationMethodsInfo objPriceCalculationMethodsInfo = objPriceCalculationMethodsController.GetPriceCalculationMethodDefault();
                if (objPriceCalculationMethodsInfo == null)
                    objPriceCalculationMethodsInfo = new ICPriceCalculationMethodsInfo();
                ICDepartmentsInfo objICDepartmentsInfo = (ICDepartmentsInfo)(new ICDepartmentsController()).GetObjectByNo(
                    BOSApp.GetDisplayTextFromConfigText(ConfigValueGroup.DepartmentGroup, DepartmentGroup.SemiProductNo.ToString()));

                foreach (ICProductsInfo item in entity.ProductList)
                {
                    if (item.ICProductID > 0)
                    {
                        ICProductsInfo itemExit = BOSApp.GetProductFromCurrentProductList(item.ICProductID);
                        if (itemExit != null && string.IsNullOrEmpty(item.ICProductNo))
                        {
                            item.ICProductNo = itemExit.ICProductNo;
                        }
                    }
                    item.FK_ICProductCarcassID = CurrentCarcass.ICProductID;
                    if (item.ICProductID == 0)
                    {
                        item.FK_ICDepartmentID = objICDepartmentsInfo != null ? objICDepartmentsInfo.ICDepartmentID : 0;
                        item.ICProductType = ProductType.SemiProduct.ToString();
                        item.FK_ICPriceCalculationMethodID = objPriceCalculationMethodsInfo.ICPriceCalculationMethodID;
                    }
                }
            }

        }

        private bool ValidateProductList()
        {
            bool isValid = true;
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainobject = (MMProductionNormsInfo)entity.MainObject;
            if (entity.ProductList != null)
            {
                foreach (ICProductsInfo product in entity.ProductList)
                {
                    isValid = ValidateProductInfo(product);
                    if (!isValid)
                        break;
                }
            }
            if (mainobject.FK_ICProductID > 0)
            {
                ICProductsInfo mainSemi = entity.ProductList.Where(o => o.ICProductID == mainobject.FK_ICProductID).FirstOrDefault();
                if (mainSemi == null || (mainSemi != null && mainSemi.ICProductID == 0))
                {
                    ICProductsInfo iCProductsInfo = BOSApp.GetProductFromCurrentProductList(mainobject.FK_ICProductID);
                    BOSProgressBar.Close();
                    BOSApp.ShowMessage("Danh sách BTP không tồn tại sản phẩm cần SX: " + (iCProductsInfo != null ? iCProductsInfo.ICProductName : string.Empty));
                    isValid = false;
                }
            }
            int countItem = entity.ProductList.Count();
            int countPerioditem = entity.ProductList.Select(o => o.ICProductOrderID).Distinct().Count();
            if (countItem != countPerioditem)
            {
                if (BOSApp.ShowMessageYesNo("STT BTP không được trùng. Bạn muốn đánh đánh số tự động không ?") == DialogResult.Yes)
                {
                    int index = 1;
                    foreach (ICProductsInfo pip in entity.ProductList)
                    {
                        pip.ICProductOrderID = index;
                        index++;
                    }
                }
                else
                    isValid = false;
            }

            return isValid;
        }
        public bool CheckOperationMaterial(string Type)
        {
            bool result = true;
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainobject = (MMProductionNormsInfo)entity.MainObject;
            MMProductionNormItemsController pimController = new MMProductionNormItemsController();
            ICProductItemMaterialsController piController = new ICProductItemMaterialsController();
            if (Type == ProductionNormStatusType.WoodStatus.ToString() || Type == "All")
            {
                List<ICProductItemMaterialsInfo> piList = piController.GetOperationProcessMaterialByProductionNormID(CurrentCarcass.MMProductionNormID);
                if (piList != null)
                {
                    string mess = string.Empty;
                    piList.ForEach(m =>
                    {
                        if (m.FK_MMOperationID > 0 && m.FK_MMOperationProcessID == 0)
                        {
                            mess += Environment.NewLine + m.ICProductName + ": " + m.ICProductDetailProductName;
                            result = false;
                        }
                    });
                    if (!result)
                    {
                        BOSApp.ShowMessage("Nguyên liệu thuộc BTP sau có CĐ cấp phát không thuộc QTSX của BTP tương ứng" + mess);
                        return result;
                    }
                }
                if (Type == ProductionNormStatusType.WoodStatus.ToString()) return result;
            }
            List<MMProductionNormItemsInfo> pimList = pimController.GetOperationProcessForGroupByID(CurrentCarcass.MMProductionNormID);
            if (pimList != null)
            {
                string messHW = string.Empty;
                string messSon = string.Empty;
                string messPLDG = string.Empty;
                string messVTC = string.Empty;
                pimList.ForEach(m =>
                {
                    if (m.FK_MMOperationID > 0 && m.FK_MMSemiProductID > 0 && m.FK_MMOperationProcessID != m.FK_MMOperationID
                    && m.MMProductionNormItemGroup == ProductType.Hardware.ToString())
                    {
                        messHW += Environment.NewLine + m.ICProductName + ": " + m.MMProductionNormItemProductName;
                        result = false;
                    }
                    if (m.FK_MMOperationID > 0 && m.FK_MMSemiProductID > 0 && m.FK_MMOperationProcessID != m.FK_MMOperationID && m.MMProductionNormItemGroup == ProductType.IngredientPaint.ToString())
                    {
                        messSon += Environment.NewLine + m.ICProductName + ": " + m.MMProductionNormItemProductName;
                        result = false;
                    }
                    if (m.FK_MMOperationID > 0 && m.FK_MMSemiProductID > 0 && m.FK_MMOperationProcessID != m.FK_MMOperationID && m.MMProductionNormItemGroup == ProductType.IngredientPackaging.ToString())
                    {
                        messPLDG += Environment.NewLine + m.ICProductName + ": " + m.MMProductionNormItemProductName;
                        result = false;
                    }
                    if (m.FK_MMOperationID > 0 && m.FK_MMSemiProductID > 0 && m.FK_MMOperationProcessID != m.FK_MMOperationID && m.MMProductionNormItemGroup == ProductType.GeneralMaterial.ToString())
                    {
                        messVTC += Environment.NewLine + m.ICProductName + ": " + m.MMProductionNormItemProductName;
                        result = false;
                    }

                });
                if (!result)
                {
                    if (Type == ProductionNormStatusType.HardwareStatus.ToString() && !string.IsNullOrEmpty(messHW))
                    {
                        BOSApp.ShowMessage("CĐ cấp phát không thuộc QTSX của BTP tương ứng" + messHW);
                        return result;
                    }
                    else if (Type == ProductionNormStatusType.PaintStatus.ToString() && !string.IsNullOrEmpty(messSon))
                    {
                        BOSApp.ShowMessage("CĐ cấp phát không thuộc QTSX của BTP tương ứng" + messSon);
                        return result;
                    }
                    else if (Type == ProductionNormStatusType.PackingMaterialStatus.ToString() && !string.IsNullOrEmpty(messPLDG))
                    {
                        BOSApp.ShowMessage("CĐ cấp phát không thuộc QTSX của BTP tương ứng" + messPLDG);
                        return result;
                    }
                    else if (Type == ProductionNormStatusType.GeneralMaterialStatus.ToString() && !string.IsNullOrEmpty(messVTC))
                    {
                        BOSApp.ShowMessage("CĐ cấp phát không thuộc QTSX của BTP tương ứng" + messVTC);
                        return result;
                    }
                    else if (Type == "ALL" && (
                        !string.IsNullOrEmpty(messHW) ||
                        !string.IsNullOrEmpty(messSon) ||
                        !string.IsNullOrEmpty(messPLDG) ||
                        !string.IsNullOrEmpty(messVTC)))
                    {
                        BOSApp.ShowMessage("CĐ cấp phát không thuộc QTSX của BTP tương ứng" + messHW + messSon + messPLDG + messVTC);
                        return result;
                    }
                    else
                        result = true;
                }
            }
            return result;
        }
        public void SaveProductionNorm()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainobject = (MMProductionNormsInfo)entity.MainObject;
            ACObjectsController objObjectsControllers = new ACObjectsController();
            ACObjectsInfo obj = objObjectsControllers.GetObjectByAccessKey(mainobject.ACObjectAccessKey);
            obj = objObjectsControllers.GetObjectByIDAndType(obj.ACObjectID, obj.ACObjectType);
            if (obj != null)
            {
                mainobject.FK_ACObjectID = obj.ACObjectID;
                mainobject.MMObjectType = obj.ACObjectType;
                mainobject.ACObjectName = obj.ACObjectName;
            }    
            else
            {
                mainobject.FK_ACObjectID = 0;
                mainobject.MMObjectType = string.Empty;
                mainobject.ACObjectName = string.Empty;
            }    
            MMProductionNormsController objProductionNormsController = new MMProductionNormsController();
            if (mainobject.MMProductionNormID > 0)
            {
                objProductionNormsController.UpdateObject(mainobject);
                return;
            }
            mainobject.MMProductionNormNo = GetProductionNormNo(0, mainobject);
            objProductionNormsController.CreateObject(mainobject);
            CurrentCarcass.MMProductionNormID = mainobject.MMProductionNormID;
            CurrentCarcass.MMProductionNormNo = mainobject.MMProductionNormNo;
            entity.UpdateMainObjectBindingSource();
        }

        public bool CheckDeleteProduct()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo pn = (MMProductionNormsInfo)entity.MainObject;
            bool result = true;
            if (entity.ProductList.OriginalList != null && entity.ProductList.OriginalList.Count > 0)
            {
                foreach (var item in entity.ProductList.OriginalList)
                {
                    if (item.ICProductID > 0 && !entity.ProductList.Exists("ICProductID", item.ICProductID) && pn.MMProductionNormWoodStatus != "New")
                        result = false;
                }

            }
            return result;
        }

        public void SaveSemiProductList(bool updatePaint)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainobject = (MMProductionNormsInfo)entity.MainObject;
            bool isUpdateDataSource = false;
            try
            {
                BOSProgressBar.Start("Đang lưu Bảng định mức");
                SaveProductionNorm();
                if (CurrentCarcass != null && CurrentCarcass.ICProductID > 0)
                {
                    if (!updatePaint)
                        UpdateProductInfo();

                    if (entity.ProductList.Count() > 0)
                    {
                        if (!updatePaint)
                        {
                            bool isValid = ValidateProductList();
                            if (!isValid)
                            {

                                BOSProgressBar.Close();
                                return;
                            }
                        }
                        bool isSuccess = true;
                        if (!updatePaint)
                            GenerateProductNo(entity.ProductList, out isSuccess);
                        if (!isSuccess)
                        {
                            BOSProgressBar.Close();
                            return;
                        }
                        BOSProgressBar.SetDescription("Đang lưu Bán thành phẩm");
                        SaveSemiProduct(mainobject, CurrentCarcass, entity.ProductList, out isUpdateDataSource, (List<ICProductsInfo>)entity.ProductList.BackupList, updatePaint);
                        if (!updatePaint) SaveSemiProductImage();

                        entity.ProductList.GridControl?.RefreshDataSource();
                        ICProductItemProcesssController processCtrl = new ICProductItemProcesssController();

                        if (!updatePaint)
                            foreach (ICProductsInfo p in entity.ProductList)
                            {
                                if (p.ProcessList != null)
                                {
                                    p.ProcessList.ForEach(pro =>
                                    {
                                        pro.FK_ICProductID = p.ICProductID;
                                        pro.FK_MMProductionNormID = mainobject.MMProductionNormID;
                                        pro.FK_ICProductDetailID = p.ICProductDetailID;
                                        processCtrl.CreateObject(pro);
                                    });

                                    p.ProcessList = null;
                                }
                            }
                        if (!updatePaint)
                        {
                            ICProductItemMaterialsController pimController = new ICProductItemMaterialsController();
                            List<ICProductItemMaterialsInfo> pimList = pimController.GetMaterialByProductionNormID(CurrentCarcass.MMProductionNormID);
                            List<int> existIdList = new List<int>();
                            entity.ProductList.ForEach(btp =>
                            {
                                foreach (ICProductItemMaterialsInfo m in btp.MaterialList)
                                {
                                    m.FK_ICProductID = btp.ICProductID;
                                    m.FK_ICProductCarcassID = CurrentCarcass.ICProductID;
                                    m.FK_MMProductionNormID = mainobject.MMProductionNormID;
                                    m.FK_ICProductDetailID = btp.ICProductDetailID;
                                    if (m.ICProductItemMaterialID == 0)
                                    {
                                        pimController.CreateObject(m);
                                    }
                                    else
                                    {
                                        pimController.UpdateObject(m);
                                    }

                                    existIdList.Add(m.ICProductItemMaterialID);
                                }
                            });


                            foreach (ICProductItemMaterialsInfo pim in pimList)
                            {
                                if (!existIdList.Contains(pim.ICProductItemMaterialID))
                                {
                                    pimController.DeleteObject(pim.ICProductItemMaterialID);
                                }
                            }
                        }
                    }
                    else
                    {
                        if (!updatePaint)
                        {
                            if (mainobject.MMProductionNormID > 0)
                                (new ICProductDetailsController()).UpdateListProductDetailByProductID(mainobject.MMProductionNormID, CurrentCarcass.ICProductID
                                    , string.Join(",", entity.ProductList.Select(p => p.ICProductID.ToString()).ToArray()), BOSApp.CurrentUsersInfo.ADUserName);

                            List<ICProductDetailsInfo> DeleteItem = new List<ICProductDetailsInfo>();
                            List<ICProductsInfo> productBackupList = (List<ICProductsInfo>)entity.ProductList.BackupList;
                            if (productBackupList != null && productBackupList.Count > 0)
                            {
                                List<ICProductsInfo> checkList = entity.ProductList.Where(x => x.ICProductDetailID > 0).ToList();
                                foreach (ICProductsInfo item in productBackupList.Where(x => x.ICProductDetailID > 0))
                                {
                                    int count = 0;
                                    if (checkList != null)
                                        count = checkList.Where(x => x.ICProductDetailID == item.ICProductDetailID).ToList().Count();
                                    if (count == 0)
                                    {
                                        ICProductDetailsInfo delete = new ICProductDetailsInfo();
                                        delete.Id = item.ICProductDetailID;
                                        delete.FK_ICProductID = item.ICProductID;
                                        delete.FK_ICProductParentID = item.FK_ICProductCarcassID;
                                        delete.FK_MMProductionNormID = item.FK_MMProductionNormID;
                                        DeleteItem.Add(delete);
                                    }
                                }
                            }

                            if (DeleteItem != null && DeleteItem.Count > 0)
                                SaveItemWithDataTableType.DeleteItem<ICProductDetailsInfo>(DeleteItem, "ICProductDetails", BOSApp.CurrentUsersInfo.ADUserName);
                            else
                            {
                                BOSProgressBar.Close();
                                MessageBox.Show("Không tồn tại chi tiết BTP!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                        }
                    }
                }
                BOSProgressBar.Close();
                MessageBox.Show(MESLocalizedResources.SaveSuccess, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                BOSProgressBar.Close();
                MessageBox.Show("Xảy ra lỗi trong quá trình lưu. Vui lòng thử lại", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            entity.InvalidateBOM();
            if (updatePaint)
            {
                // Tính lại dt sơn, lấy tự động QTS
                if (mainobject.MMProductionNormID > 0)
                    (new MMProductionNormItemsController()).CalculateProductionNormItemConsumable(mainobject.MMProductionNormID, CurrentCarcass.ICProductID, BOSApp.CurrentUsersInfo.ADUserName);
                entity.InvalidatePaint();
            }
            InvalidCarcassSemiProductGrid();
            SaveImage(false);
            SaveCarcassDepreciationRate();
            if (isUpdateDataSource)
            {
                BOSApp.InvalidateProductList();
                if (entity.ProductList.GridControl != null)
                    entity.ProductList.GridControl.RefreshBindingDataLookupEdit();
            }
        }
       
        public string GetProductNoFromConfig(ICProductsInfo objProductsInfo, ref int currentStart, GEGenerateProductNoConfigsInfo objGenerateProductNoConfigsInfo)
        {
            string productNo = string.Empty;
            ICProductsController objProductsController = new ICProductsController();
            GEGenerateProductNoConfigsController objGenerateProductNoConfigsController = new GEGenerateProductNoConfigsController();
            if (objGenerateProductNoConfigsInfo == null)
                return productNo;

            currentStart = objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigStart;
            List<string> joinStrings = new List<string>();
            string tempNo = string.Empty;
            if (!string.IsNullOrWhiteSpace(objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigPrefix))
                joinStrings.Add(objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigPrefix);
            int CarcassID = objProductsInfo.ICProductID;
            if (objProductsInfo.FK_ICProductCarcassID > 0) CarcassID = objProductsInfo.FK_ICProductCarcassID;
            ICProductsInfo carcass = (ICProductsInfo)objProductsController.GetObjectByID(objProductsInfo.FK_ICProductCarcassID);

            if (objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigIsProductNo)
            {
                tempNo = carcass != null ? carcass.ICProductNo : string.Empty;
                if (!string.IsNullOrWhiteSpace(tempNo))
                    joinStrings.Add(tempNo);
            }
            if (objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigIsDepartmentNo)
            {
                tempNo = BOSApp.GetDisplayTextFromCatche("ICDepartments", "ICDepartmentID", objProductsInfo.FK_ICDepartmentID, "ICDepartmentNo");
                if (!string.IsNullOrWhiteSpace(tempNo))
                    joinStrings.Add(tempNo);
            }
            if (objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigIsDepartmentNo)
            {
                ICProductGroupsController objProductGroupsController = new ICProductGroupsController();
                tempNo = BOSApp.GetDisplayTextFromCatche("ICProductGroups", "ICProductGroupID", objProductsInfo.FK_ICProductGroupID, "ICProductGroupNo");
                if (!string.IsNullOrWhiteSpace(tempNo))
                    joinStrings.Add(tempNo);
            }
            if (objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigIsPrefixYear)
            {

                DateTime currentDate = BOSApp.GetCurrentServerDate();
                tempNo = currentDate.Year.ToString().Substring(2, 2);
                if (!string.IsNullOrWhiteSpace(tempNo))
                    joinStrings.Add(tempNo);
            }
            string configStart = currentStart.ToString().PadLeft(objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigLength, '0');
            productNo = string.Join(objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigJoinCharacter, joinStrings.ToArray());
            string productTemp = productNo + objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigJoinCharacter + configStart;
            while (objProductsController.IsExist(productTemp))
            {
                currentStart++;
                configStart = currentStart.ToString().PadLeft(objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigLength, '0');
                productTemp = productNo + objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigJoinCharacter + configStart;
            }
            currentStart++;
            objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigStart = currentStart;
            objGenerateProductNoConfigsController.UpdateObject(objGenerateProductNoConfigsInfo);
            return productTemp;
        }

        public string GetProductNoFromConfigEndemic(ICProductsInfo objProductsInfo, ref int currentStart, GEGenerateProductNoConfigsInfo objGenerateProductNoConfigsInfo, List<ICProductsInfo> listItem)
        {
            string productNo = string.Empty;
            ICProductsController objProductsController = new ICProductsController();
            GEGenerateProductNoConfigsController objGenerateProductNoConfigsController = new GEGenerateProductNoConfigsController();
            if (objGenerateProductNoConfigsInfo == null)
                return productNo;

            //currentStart = objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigStart;
            currentStart = 1;
            List<string> joinStrings = new List<string>();
            string tempNo = string.Empty;
            if (!string.IsNullOrWhiteSpace(objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigPrefix))
                joinStrings.Add(objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigPrefix);
            int CarcassID = objProductsInfo.ICProductID;
            if (objProductsInfo.FK_ICProductCarcassID > 0) CarcassID = objProductsInfo.FK_ICProductCarcassID;
            ICProductsInfo carcass = (ICProductsInfo)objProductsController.GetObjectByID(objProductsInfo.FK_ICProductCarcassID);
            ICProductGroupsController objProductGroupsController = new ICProductGroupsController();
            if (objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigIsProductNo)
            {
                tempNo = carcass != null ? carcass.ICProductNo : string.Empty;
                if (!string.IsNullOrWhiteSpace(tempNo) && objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigIsDepartmentNo)
                {
                    Regex regex = new Regex(tempNo.Substring(0, 2));
                    string department = BOSApp.GetDisplayTextFromCatche("ICDepartments", "ICDepartmentID", objProductsInfo.FK_ICDepartmentID, "ICDepartmentNo");
                    if (!string.IsNullOrWhiteSpace(department))
                        tempNo = regex.Replace(tempNo, department, 1);
                }
                joinStrings.Add(tempNo);
            }
            else
            {

                tempNo = BOSApp.GetDisplayTextFromCatche("ICDepartments", "ICDepartmentID", objProductsInfo.FK_ICDepartmentID, "ICDepartmentNo");
                if (carcass != null)
                {
                    string orderCarcass = carcass.ICProductNo.Substring(carcass.ICProductNo.Length - 5);
                    ICProductGroupsInfo objProductGroupsInfo = (ICProductGroupsInfo)objProductGroupsController.GetProductGroupHeadParent(carcass.FK_ICProductGroupID);
                    if (objProductGroupsInfo != null)
                    {
                        string headGroupNo = objProductGroupsInfo.ICProductGroupNo;
                        ICProductGroupsInfo objProductGroupsInfo2 = (ICProductGroupsInfo)objProductGroupsController.GetObjectByID(carcass.FK_ICProductGroupID);
                        string rootNo = objProductGroupsInfo2 != null && objProductGroupsInfo2.ICProductGroupID != objProductGroupsInfo.ICProductGroupID ?
                            objProductGroupsInfo2.ICProductGroupNo : String.Empty.PadLeft(objProductGroupsInfo.ICProductGroupConfigGroupNoLength, '0');
                        tempNo = (objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigIsDepartmentNo? tempNo: "") + headGroupNo + rootNo + (objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigIsDepartmentNo ? tempNo : "") + orderCarcass;
                    }
                }
                if (!string.IsNullOrWhiteSpace(tempNo))
                    joinStrings.Add(tempNo);
            }
            if (objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigIsProductGroupNo)
            {
                tempNo = BOSApp.GetDisplayTextFromCatche("ICProductGroups", "ICProductGroupID", objProductsInfo.FK_ICProductGroupID, "ICProductGroupNo");
                if (!string.IsNullOrWhiteSpace(tempNo))
                    joinStrings.Add(tempNo);
            }
            //string configStart = currentStart.ToString().PadLeft(objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigLength, '0');
            productNo = string.Join(objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigJoinCharacter, joinStrings.ToArray());
            //string productTemp = productNo + objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigJoinCharacter + configStart;
            string configStart = currentStart.ToString().PadLeft(objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigLength, '0');
            string productTemp = productNo + objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigJoinCharacter + configStart;
            while (listItem.Where(o => o.ICProductNo == productTemp).Count() > 0)
            {
                currentStart++;
                configStart = currentStart.ToString().PadLeft(objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigLength, '0');
                productTemp = productNo + objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigJoinCharacter + configStart;
            }
            currentStart++;
            //objGenerateProductNoConfigsInfo.GEGenerateProductNoConfigStart = currentStart;
            //objGenerateProductNoConfigsController.UpdateObject(objGenerateProductNoConfigsInfo);
            return productTemp;
        }

        public void RemoveProductItemNode()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            ICProductItemsInfo productitem = entity.ProductItemTreeList.CurrentObject as ICProductItemsInfo;
            if (productitem == null) return;
            ICProductsController pCtrl = new ICProductsController();
            ICProductsInfo checkProduct = pCtrl.CheckExitBOMSemiProduct(productitem.FK_ICProductItemChildID, productitem.FK_MMProductionNormID);
            bool canDelete = true;
            if (checkProduct != null)
            {

                if (checkProduct.IsHaveBOMWoodNotNew > 0)
                {
                    BOSApp.ShowMessage("Không thể xóa do BTP đã sử dụng ở Định mức BTP, vui lòng xoá chi tiết trong Định mức BTP!");
                    canDelete = false;
                }
                else if (checkProduct.IsHaveBOMPaintNotNew > 0)
                {
                    BOSApp.ShowMessage("Không thể xóa do BTP đã sử dụng ở Định mức Sơn, vui lòng xoá chi tiết trong Định mức Sơn!");
                    canDelete = false;
                }

            }
            if (!canDelete) return;
            if (productitem != null && productitem.FK_ICProductItemChildID == 0)
            {
                if (entity.ProductItemTreeList[0].SubList != null)
                {
                    for (int i = entity.ProductItemTreeList[0].SubList.Count - 1; i >= 0; i--)
                    {
                        entity.ProductItemTreeList[0].SubList.RemoveAt(i);
                    }
                }
            }
            else
            {

                entity.ProductItemTreeList.RemoveSelectedRowObjectFromList();
            }

            entity.RefreshProductItemTreeListView(entity.ProductItemTreeList);
        }

        public void CreateBOM()
        {
            if (!Toolbar.IsNullOrNoneAction())
                return;

            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            ICProductsInfo objProductsInfo = CurrentCarcass;

            MMProductionNormsController pnController = new MMProductionNormsController();
            MMProductionNormsInfo objProductionNormsInfo = (MMProductionNormsInfo)pnController.GetObjectByID(objProductsInfo.MMProductionNormID);
            bool isCreate = objProductionNormsInfo == null ? true : false;

            if (entity.ProductItemTreeList.Any())
            {
                if (entity.ProductItemTreeList[0].SubList != null)
                {
                    List<ICProductItemsInfo> parentList = new List<ICProductItemsInfo>();
                    entity.ProductItemTreeList[0].SubList.ConvertToList(parentList);
                    if (parentList.Count() > 0 && parentList.Where(p => p.FK_ICProductItemChildID == objProductionNormsInfo.FK_ICProductID).Count() == 0)
                    {
                        ICProductsInfo iCProductsInfo = BOSApp.GetProductFromCurrentProductList(objProductionNormsInfo.FK_ICProductID);
                        BOSApp.ShowMessage("Chưa tạo cây cho sản phẩm cần SX: " + (iCProductsInfo != null ? iCProductsInfo.ICProductName : string.Empty));
                    }
                }
                if (entity.ProductItemTreeList[0].SubList != null)
                {
                    List<ICProductItemsInfo> parentList = new List<ICProductItemsInfo>();
                    entity.ProductItemTreeList[0].SubList.ConvertToList(parentList);
                    if (parentList.Count() > 0 && parentList.Where(p => p.ICProductItemParentID == 0).Count() > 1)
                    {
                        MessageBox.Show("Cấu trúc định mức không đúng, cây định mức đang có hơn 1 node cha. Node cha chỉ có thể là mã thành phẩm!",
                                          CommonLocalizedResources.MessageBoxDefaultCaption,
                                          MessageBoxButtons.OK,
                                          MessageBoxIcon.Warning);
                        return;
                    } 
                    if (parentList.Count() > 0 && parentList.Where(p => p.ICProductItemParentID == 0 && p.FK_ICProductItemChildID != objProductionNormsInfo.FK_ICProductID).Count() > 0)
                    {
                        MessageBox.Show("Cấu trúc định mức không đúng, Node cha chỉ có thể là mã thành phẩm!",
                                          CommonLocalizedResources.MessageBoxDefaultCaption,
                                          MessageBoxButtons.OK,
                                          MessageBoxIcon.Warning);
                        return;
                    }    
                }    
            }
            if (!isCreate)
            {
                DialogResult rs = MessageBox.Show("Bạn có muốn cập nhật lại định mức không?", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (rs != DialogResult.Yes)
                    return;
            }
            UpdateProductionNormItemSemiProduct(isCreate);
        }

        public void UpdateProductionNormItemSemiProduct(bool isCreate)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainobject = (MMProductionNormsInfo)CurrentModuleEntity.MainObject;

            MMProductionNormsController pnController = new MMProductionNormsController();
            int productionNormID = mainobject.MMProductionNormID;
            if (isCreate)
                productionNormID = pnController.CreateObject(mainobject);

            if (!isCreate)
                CreateWoodProductionNormItems();

            UpdateProductionNormID(productionNormID, entity.ProductionNormItemList);
            List<MMProductionNormItemsInfo> collection = new List<MMProductionNormItemsInfo>();
            entity.ProductionNormItemList.ForEach(o => collection.Add((MMProductionNormItemsInfo)o));
            int index = 0;
            //GenerateOrderCode(entity.ProductionNormItemList, collection, null, true, ref index, true);
            entity.ProductionNormItemList.SaveItemObjectsNoneReference();
            MMProductionNormItemsController pniController = new MMProductionNormItemsController();

            if (!isCreate)
                pniController.UpdateDeleteProductionNormItemsByProductionNormID(productionNormID);

            
            CurrentCarcass.MMProductionNormID = productionNormID;
            entity.InvalidateBOM();
            entity.InvalidateBOMHardware();
            entity.InvalidateBOMGeneralMaterial();
            //entity.InvalidateProductItemTreeList();
            InvalidateProductPackingDetail();
            entity.InvalidatePaint();
            entity.InvalidatePackaging();
            UpdateProductionNormInfo(mainobject);
            pnController.UpdateObject(mainobject);
        }

        private MMProductionNormsInfo CreateProductionNorm(ICProductsInfo objProductsInfo, bool isGenNo)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainobject = (MMProductionNormsInfo)entity.MainObject;
            MMProductionNormsInfo pn = new MMProductionNormsInfo();
            pn.FK_HREmployeeID = BOSApp.CurrentUsersInfo.FK_HREmployeeID;
            pn.FK_ICProductID = objProductsInfo.ICProductID;
            if (pn.MMProductionNormID == 0 && (pn.MMProductionNormPromulgateDate.Date == DateTime.MinValue.Date ||
                pn.MMProductionNormPromulgateDate.Date == DateTime.MaxValue.Date))
                pn.MMProductionNormPromulgateDate = DateTime.Now;

            pn.MMProductionNormName = objProductsInfo.ICProductNo;
            pn.MMProductionNormOverallSize = (int)objProductsInfo.ICProductLength + "x" + (int)objProductsInfo.ICProductWidth + "x" + (int)objProductsInfo.ICProductHeight;
            pn.MMProductionNormOldProductNo = objProductsInfo.ICProductNoOfOldSys;
            pn.MMProductionNormType = mainobject.MMProductionNormType;
            pn.MMProductionNormVersion = mainobject.MMProductionNormVersion;
            if (objProductsInfo.FK_ICProductCarcassID != 0)
                pn.FK_ICProductCarcassID = objProductsInfo.FK_ICProductCarcassID;
            else
                pn.FK_ICProductCarcassID = objProductsInfo.ICProductID;

            if (isGenNo)
            {
                pn.MMProductionNormNo = GetProductionNormNo(0, pn);
                pn.MMProductionNormOriginNo = pn.MMProductionNormNo;
            }
            else
            {
                pn.MMProductionNormNo = NewNo;
            }
            return pn;
        }

        public string GetProductionNormNo(int numberingStart, MMProductionNormsInfo MainObject)
        {
            String strMainObjectNo = String.Empty;
            GENumberingController objGENumberingController = new GENumberingController();

            GENumberingInfo objGENumberingInfo;
            objGENumberingInfo = objGENumberingController.GetGENumberingByNameAndBranchID("ProductionNorm", BOSApp.CurrentCompanyInfo.FK_BRBranchID);

            if (objGENumberingInfo != null)
            {
                String mainTableName = BOSUtil.GetTableNameFromBusinessObject(MainObject);
                IBusinessController objMainObjectController = BusinessControllerFactory.GetBusinessController(mainTableName + "Controller");
                if (objMainObjectController != null)
                {
                    BOSDbUtil dbUtil = new BOSDbUtil();
                    DateTime currentDate = GetServerDate();

                    if (objGENumberingInfo.AAUpdatedDate.Year < currentDate.Year)
                    {
                        objGENumberingInfo.GENumberingStart = Convert.ToInt32(Math.Pow(10, objGENumberingInfo.GENumberingLength - 1)) + 1;
                    }

                    strMainObjectNo = String.Format("{0}{1}.{2}",
                                                    objGENumberingInfo.GENumberingPrefix,
                                                    currentDate.Year.ToString().Substring(2, 2),
                                                    objGENumberingInfo.GENumberingStart.ToString().PadLeft(objGENumberingInfo.GENumberingLength, '0'));
                    numberingStart = objGENumberingInfo.GENumberingStart;
                    while (objMainObjectController.IsExist(strMainObjectNo))
                    {
                        objGENumberingInfo.GENumberingStart++;
                        strMainObjectNo = String.Format("{0}{1}.{2}",
                                                        objGENumberingInfo.GENumberingPrefix,
                                                        currentDate.Year.ToString().Substring(2, 2),
                                                        objGENumberingInfo.GENumberingStart.ToString().PadLeft(objGENumberingInfo.GENumberingLength, '0'));
                        numberingStart = objGENumberingInfo.GENumberingStart;
                    }
                }
                objGENumberingInfo.GENumberingStart = numberingStart + 1;
                objGENumberingController.UpdateObject(objGENumberingInfo);
            }
            return strMainObjectNo;
        }

        private void UpdateProductionNormInfo(MMProductionNormsInfo pn)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            List<MMProductionNormItemsInfo> productionNormItemList = new List<MMProductionNormItemsInfo>();
            entity.ProductionNormItemList.ConvertToList(productionNormItemList);
            pn.MMProductionNormBlock = 0;
            foreach (MMProductionNormItemsInfo item in entity.ProductionNormItemList)
            {
                pn.MMProductionNormBlock += item.MMProductionNormItemWoodBlocks;
            }
            pn.MMProductionNormBlock = Math.Round(pn.MMProductionNormBlock, 6, MidpointRounding.AwayFromZero);
            pn.MMProductionNormTotalPaint = productionNormItemList.Where(o => o.MMProductionNormItemHavePaint).Sum(o => o.MMProductionNormItemPaintA + o.MMProductionNormItemPaintB + o.MMProductionNormItemPaintC);
            pn.MMProductionNormTotalPaint = Math.Round(pn.MMProductionNormTotalPaint, 6, MidpointRounding.AwayFromZero);
        }

        private void UpdateProductionNormID(int productionNormID, IBOSTreeList treeList)
        {
            if (treeList != null)
            {
                foreach (BOSTreeListObject treeNode in treeList)
                {
                    MMProductionNormItemsInfo productionNormItem = (MMProductionNormItemsInfo)treeNode;
                    productionNormItem.FK_MMProductionNormID = productionNormID;
                    if (treeNode.SubList != null && treeNode.SubList.Count != 0)
                        UpdateProductionNormID(productionNormID, treeNode.SubList);
                }
            }
        }

        private void CreateWoodProductionNormItems()
        {
            ICProductsController productController = new ICProductsController();
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            ICProductsInfo mainObject = CurrentCarcass;
            List<ICProductsInfo> collection = productController.GetProductsByProductCarcassID(mainObject.ICProductID, mainObject.MMProductionNormID);
            List<MMConsumableConfigsInfo> consumableConfigs;
            List<MMReuseSpecificateConfigsInfo> reuseSpecificateConfigs;
            if (collection != null && collection.Count > 0)
            {
                entity.ProductionNormItemList.Clear();
                consumableConfigs = GetConsumableConfigs();
                reuseSpecificateConfigs = GetReuseSpecificateConfigs();
                AddItemToTreeList(collection, 0, consumableConfigs, reuseSpecificateConfigs, entity.ProductionNormItemList);
                ClearDeletedNodes(entity.ProductionNormItemList);
                UpdateAllCalculatedColumns();
            }

            entity.RefreshProductItemTreeListView(entity.ProductionNormItemList);
        }

        public void UpdateAllCalculatedColumns()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            List<MMFormulaConfigurationsInfo> formulaConfig = GetAllFormulaConfigList();
            List<MMProductionNormItemConfigsInfo> woodFormulas = GetProductionNormItemConfigList();
            foreach (BOSTreeListObject productionNormItem in entity.ProductionNormItemList)
            {
                UpdateCalculatedColumnsForOneNode(productionNormItem, null, formulaConfig, woodFormulas);
            }
        }

        private void UpdateCalculatedColumnsForOneNode(BOSTreeListObject currentNode, BOSTreeListObject parentNode, List<MMFormulaConfigurationsInfo> formulaConfig, List<MMProductionNormItemConfigsInfo> woodFormulas)
        {
            if (currentNode == null)
                return;

            MMProductionNormItemsInfo currentObject = (MMProductionNormItemsInfo)currentNode;
            currentObject.MMProductionNormItemWoodBlocks = 0;
            currentObject.MMProductionNormItemMDFBlocks = 0;
            currentObject.MMProductionNormItemPlywood = 0;
            currentObject.MMProductionNormItemVeneer = 0;
            currentObject.MMProductionNormItemBlocks = 0;
            currentObject.MMProductionNormItemBlockPerOne = 0;
            currentObject.MMProductionNormItemAcreage = 0;
            currentObject.MMProductionNormItemPaintA = 0;
            currentObject.MMProductionNormItemPaintB = 0;
            currentObject.MMProductionNormItemPaintC = 0;
            if (currentNode.SubList != null && currentNode.SubList.Count > 0)
            {
                foreach (BOSTreeListObject childNode in currentNode.SubList)
                {
                    UpdateCalculatedColumnsForOneNode(childNode, currentNode, formulaConfig, woodFormulas);
                    CalculatePaintAcreageByPaintFormula(childNode, formulaConfig, parentNode);
                    CalculateWoodBlock(childNode, woodFormulas, parentNode);
                    CalculatePaintAcreageForAllEdges(childNode, parentNode);
                }
            }
            else
            {
                CalculatePaintAcreageByPaintFormula(currentNode, formulaConfig, parentNode);
                CalculateWoodBlock(currentNode, woodFormulas, parentNode);
                CalculatePaintAcreageForAllEdges(currentNode, parentNode);
            }
        }

        private void CalculatePaintAcreageForAllEdges(BOSTreeListObject normRM, BOSTreeListObject parentNode)
        {
            if (normRM == null)
                return;
            MMProductionNormItemsInfo productionNormItem = (MMProductionNormItemsInfo)normRM;
            decimal surface = CalSurFace(productionNormItem);
            decimal longEdge = CalLongEdge(productionNormItem);
            decimal shortEdge = CalShortEdge(productionNormItem);

            productionNormItem.MMProductionNormItemAcreage = (productionNormItem.MMProductionNormItemQuantity * (2 * (surface + longEdge + shortEdge))) / ProductionNormConst.ProducttionNormValue1000000;
            if (parentNode != null)
            {
                MMProductionNormItemsInfo parentItem = (MMProductionNormItemsInfo)parentNode;
                parentItem.MMProductionNormItemAcreage += productionNormItem.MMProductionNormItemAcreage;
            }
        }

        private void CalculateWoodBlock(BOSTreeListObject normRM, List<MMProductionNormItemConfigsInfo> woodFormulas, BOSTreeListObject parentNode)
        {
            if (normRM != null)
            {
                MMProductionNormItemsInfo productionNormItem = (MMProductionNormItemsInfo)normRM;

                if (woodFormulas == null)
                {
                    MMProductionNormItemConfigsController woodFormulaConfigsController = new MMProductionNormItemConfigsController();
                    woodFormulas = woodFormulaConfigsController.GetProductionNormItemConfigList();
                }
                //sai
                MMProductionNormItemConfigsInfo woodFormula = GetWoodFormulaConfig(productionNormItem.FK_ICProductAttributeWoodTypeID, woodFormulas);
                if (woodFormula != null)
                {
                    productionNormItem.MMProductionNormItemWoodBlocks = 0;
                    productionNormItem.MMProductionNormItemBlocks = 0;
                    productionNormItem.MMProductionNormItemPlywood = 0;
                    productionNormItem.MMProductionNormItemVeneer = 0;
                    if (woodFormula.MMProductionNormItemConfigBlocks)
                    {
                        productionNormItem.MMProductionNormItemBlockPerOne = (productionNormItem.MMProductionNormItemProductLength *
                            productionNormItem.MMProductionNormItemProductWidth * productionNormItem.MMProductionNormItemProductHeight)
                            / ProductionNormConst.ProducttionNormValue1000000000;
                        productionNormItem.MMProductionNormItemWoodBlocks = (productionNormItem.MMProductionNormItemBlockPerOne * productionNormItem.MMProductionNormItemQuantity);
                        productionNormItem.MMProductionNormItemBlocks = productionNormItem.MMProductionNormItemWoodBlocks;

                    }

                    if (woodFormula.MMProductionNormItemConfigMDFBlocks)
                    {
                        productionNormItem.MMProductionNormItemBlockPerOne = (productionNormItem.MMProductionNormItemProductLength *
                            productionNormItem.MMProductionNormItemProductWidth * productionNormItem.MMProductionNormItemProductHeight)
                            / ProductionNormConst.ProducttionNormValue1000000000;
                        productionNormItem.MMProductionNormItemMDFBlocks = (productionNormItem.MMProductionNormItemBlockPerOne * productionNormItem.MMProductionNormItemQuantity);
                        productionNormItem.MMProductionNormItemBlocks = productionNormItem.MMProductionNormItemMDFBlocks;
                    }

                    if (woodFormula.MMProductionNormItemConfigPlyWood)
                    {
                        productionNormItem.MMProductionNormItemPlywood = (productionNormItem.MMProductionNormItemProductLength *
                           productionNormItem.MMProductionNormItemProductWidth * productionNormItem.MMProductionNormItemQuantity)
                           / ProductionNormConst.ProducttionNormValue1000000;
                    }

                    if (woodFormula.MMProductionNormItemConfigVeneer)
                    {
                        productionNormItem.MMProductionNormItemVeneer = (productionNormItem.MMProductionNormItemProductLength *
                           productionNormItem.MMProductionNormItemProductWidth * productionNormItem.MMProductionNormItemQuantity)
                           / ProductionNormConst.ProducttionNormValue1000000;
                    }
                    if (parentNode != null)
                    {
                        MMProductionNormItemsInfo parentItem = (MMProductionNormItemsInfo)parentNode;
                        parentItem.MMProductionNormItemWoodBlocks += productionNormItem.MMProductionNormItemWoodBlocks;
                        parentItem.MMProductionNormItemMDFBlocks += productionNormItem.MMProductionNormItemMDFBlocks;
                        parentItem.MMProductionNormItemPlywood += productionNormItem.MMProductionNormItemPlywood;
                        parentItem.MMProductionNormItemVeneer += productionNormItem.MMProductionNormItemVeneer;
                        parentItem.MMProductionNormItemBlocks += productionNormItem.MMProductionNormItemBlocks;
                        // parentItem.MMProductionNormItemTotalWoodConsumable += productionNormItem.MMProductionNormItemTotalWoodConsumable;
                        if (parentItem.MMProductionNormItemQuantity != 0)
                            parentItem.MMProductionNormItemBlockPerOne += productionNormItem.MMProductionNormItemBlocks / parentItem.MMProductionNormItemQuantity;
                        else
                            parentItem.MMProductionNormItemBlockPerOne += 0;
                    }
                }
            }
        }

        private MMProductionNormItemConfigsInfo GetWoodFormulaConfig(int woodTypeID, List<MMProductionNormItemConfigsInfo> woodFormulas)
        {
            MMProductionNormItemConfigsInfo foundItem = null;

            if (woodFormulas != null)
            {
                foundItem = woodFormulas.FirstOrDefault(item => item.FK_ICProductAttributeID == woodTypeID);
            }

            return foundItem;
        }

        public void CalculatePaintAcreageByPaintFormula(BOSTreeListObject currentNode, List<MMFormulaConfigurationsInfo> formulas, BOSTreeListObject parentNode)
        {
            if (currentNode == null)
                return;
            MMProductionNormItemsInfo productionNormItem = (MMProductionNormItemsInfo)currentNode;
            decimal surFace = CalSurFace(productionNormItem);
            decimal longEdge = CalLongEdge(productionNormItem);
            decimal shortEdge = CalShortEdge(productionNormItem);
            productionNormItem.MMProductionNormItemPaintA = 0;
            productionNormItem.MMProductionNormItemPaintB = 0;
            productionNormItem.MMProductionNormItemPaintC = 0;
            MMFormulaConfigurationsInfo formula = GetPaintFormulaByID(productionNormItem.FK_MMFormulaIDPaintA, formulas);
            productionNormItem.MMProductionNormItemPaintA = CalPaintForFormula(productionNormItem.MMProductionNormItemQuantity, surFace, longEdge, shortEdge, formula);
            formula = GetPaintFormulaByID(productionNormItem.FK_MMFormulaIDPaintB, formulas);
            productionNormItem.MMProductionNormItemPaintB = CalPaintForFormula(productionNormItem.MMProductionNormItemQuantity, surFace, longEdge, shortEdge, formula);
            formula = GetPaintFormulaByID(productionNormItem.FK_MMFormulaIDPaintC, formulas);
            productionNormItem.MMProductionNormItemPaintC = CalPaintForFormula(productionNormItem.MMProductionNormItemQuantity, surFace, longEdge, shortEdge, formula);
            if (parentNode != null)
            {
                MMProductionNormItemsInfo parentItem = (MMProductionNormItemsInfo)parentNode;
                parentItem.MMProductionNormItemPaintA += productionNormItem.MMProductionNormItemPaintA;
                parentItem.MMProductionNormItemPaintB += productionNormItem.MMProductionNormItemPaintB;
                parentItem.MMProductionNormItemPaintC += productionNormItem.MMProductionNormItemPaintC;
            }
        }

        public decimal CalPaintForFormula(decimal qty, decimal surFace, decimal longEdge, decimal shortEdge, MMFormulaConfigurationsInfo formula)
        {
            if (formula == null)
                return 0;

            return (qty * (formula.MMFormulaConfigurationTopQty * surFace + formula.MMFormulaConfigurationLongEdgeQty * longEdge + formula.MMFormulaConfigurationShortEdgeQty * shortEdge)) / 1000000;
        }

        private MMFormulaConfigurationsInfo GetPaintFormulaByID(int paintFormulaID, List<MMFormulaConfigurationsInfo> collection)
        {
            MMFormulaConfigurationsInfo foundItem = null;
            if (collection == null)
            {
                MMFormulaConfigurationsController formulasController = new MMFormulaConfigurationsController();
                collection = formulasController.GetAllFormulaConfigList();
            }
            foundItem = collection.FirstOrDefault(item => item.FK_MMFormulaID == paintFormulaID && item.FK_MMFormulaID != 0);
            return foundItem;
        }

        private decimal CalSurFace(MMProductionNormItemsInfo item)
        {
            if (item == null)
                return 0;
            return item.MMProductionNormItemProductWidth * item.MMProductionNormItemProductLength;
        }
        private decimal CalLongEdge(MMProductionNormItemsInfo item)
        {
            if (item == null)
                return 0;
            return item.MMProductionNormItemProductHeight * item.MMProductionNormItemProductLength;
        }
        private decimal CalShortEdge(MMProductionNormItemsInfo item)
        {
            if (item == null)
                return 0;
            return item.MMProductionNormItemProductHeight * item.MMProductionNormItemProductWidth;
        }

        public List<MMProductionNormItemConfigsInfo> GetProductionNormItemConfigList()
        {
            MMProductionNormItemConfigsController woodFormulaConfigsController = new MMProductionNormItemConfigsController();
            List<MMProductionNormItemConfigsInfo> woodFormulas = woodFormulaConfigsController.GetProductionNormItemConfigList();
            return woodFormulas;
        }

        public List<MMFormulaConfigurationsInfo> GetAllFormulaConfigList()
        {
            MMFormulaConfigurationsController formulasController = new MMFormulaConfigurationsController();
            List<MMFormulaConfigurationsInfo> collection = formulasController.GetAllFormulaConfigList();
            return collection;
        }

        public void ClearDeletedNodes(IBOSTreeList treeList)
        {
            if (treeList == null)
                return;
            for (int index = treeList.Count - 1; index >= 0; index--)
            {
                BOSTreeListObject treeNode = treeList[index];
                MMProductionNormItemsInfo productionNormItem = (MMProductionNormItemsInfo)treeNode;
                if (!productionNormItem.IsExist)
                {
                    RemoveDeletedNodes(treeNode, treeList);
                    treeList.Remove(treeNode);
                }
                else
                {
                    if (treeNode.SubList != null && treeNode.SubList.Count != 0)
                        ClearDeletedNodes(treeNode.SubList);
                }

            }
        }

        private void RemoveDeletedNodes(BOSTreeListObject treeNode, IBOSTreeList treelist)
        {
            if (treeNode == null)
                return;
            if (treeNode.SubList == null || treeNode.SubList.Count == 0)
                treelist.Remove(treeNode);
            else
            {
                for (int index = treeNode.SubList.Count - 1; index >= 0; index--)
                {
                    RemoveDeletedNodes(treeNode.SubList[index], treeNode.SubList);
                }
            }
        }

        private List<MMConsumableConfigsInfo> GetConsumableConfigs()
        {
            MMConsumableConfigsController consumableConfigsController = new MMConsumableConfigsController();
            DataSet ds = consumableConfigsController.GetAllObjects();
            List<MMConsumableConfigsInfo> collection = consumableConfigsController.GetListFromDataSet(ds);
            return collection;
        }

        private List<MMReuseSpecificateConfigsInfo> GetReuseSpecificateConfigs()
        {
            MMReuseSpecificateConfigsController controller = new MMReuseSpecificateConfigsController();
            DataSet ds = controller.GetAllObjects();
            List<MMReuseSpecificateConfigsInfo> collection = controller.GetListFromDataSet(ds);
            return collection;

        }

        private void AddItemToTreeList(List<ICProductsInfo> collection, int parentID, List<MMConsumableConfigsInfo> consumableConfigs,
                                       List<MMReuseSpecificateConfigsInfo> reuseSpecificateConfigs, IBOSTreeList treeList)
        {
            if (collection == null)
                return;
            List<ICProductsInfo> parentNode = collection.Where(item => item.ICProductItemParentID == parentID).ToList();

            if (parentNode != null && parentNode.Count != 0)
            {
                foreach (ICProductsInfo product in parentNode)
                {
                    AddItemToProductionNormItemsList(product, consumableConfigs, reuseSpecificateConfigs, treeList);
                    AddItemToTreeList(collection, product.ICProductItemID, consumableConfigs, reuseSpecificateConfigs, treeList);
                }
            }
        }

        public void AddItemToProductionNormItemsList(ICProductsInfo objProductsInfo, List<MMConsumableConfigsInfo> consumableConfigs,
                                                        List<MMReuseSpecificateConfigsInfo> reuseSpecificateConfigs, IBOSTreeList treeList)
        {
            if (objProductsInfo != null)
            {
                MMProductionNormItemsInfo objProductionNormItemsInfo;
                BOSTreeListObject parentNode = FindParentNode(objProductsInfo.ICProductItemParentID, treeList);
                if (parentNode == null)
                {
                    MMProductionNormItemsInfo foundItem = ProductionNormItemHasExist(objProductsInfo.ICProductID, treeList);
                    if (foundItem != null)
                    {
                        UpdateProductionNormItem(foundItem, objProductsInfo);
                        foundItem.IsExist = true;
                        return;
                    }
                    else
                    {
                        objProductionNormItemsInfo = ConvertToProductionNormItem(objProductsInfo, consumableConfigs, reuseSpecificateConfigs);
                        treeList.Add(objProductionNormItemsInfo);
                    }
                }
                else
                {

                    MMProductionNormItemsInfo foundItem = ProductionNormItemHasExist(objProductsInfo.ICProductID, parentNode.SubList);
                    if (foundItem != null)
                    {
                        UpdateProductionNormItem(foundItem, objProductsInfo);
                        foundItem.IsExist = true;
                        return;
                    }
                    objProductionNormItemsInfo = ConvertToProductionNormItem(objProductsInfo, consumableConfigs, reuseSpecificateConfigs);
                    if (objProductionNormItemsInfo != null)
                    {
                        if (parentNode.SubList == null)
                            parentNode.SubList = new BOSTreeList();
                        parentNode.SubList.Add(objProductionNormItemsInfo);
                    }
                }

            }

        }

        private BOSTreeListObject FindParentNode(int productItemID, IBOSTreeList treeList)
        {
            if (treeList == null)
                return null;

            BOSTreeListObject filterObj = treeList.FirstOrDefault(item => ((MMProductionNormItemsInfo)item).FK_ICProductItemID == productItemID);
            if (filterObj != null)
                return filterObj;
            else
            {
                foreach (BOSTreeListObject treeListObject in treeList)
                {
                    if (treeListObject.SubList != null && treeListObject.SubList.Count != 0)
                    {
                        filterObj = FindParentNode(productItemID, treeListObject.SubList);
                        if (filterObj != null)
                        {
                            return filterObj;
                        }
                    }
                }
            }
            return null;
        }

        private MMProductionNormItemsInfo ProductionNormItemHasExist(int productChildID, IBOSTreeList treeList)
        {
            if (treeList == null)
                return null;

            MMProductionNormItemsInfo filterObj = (MMProductionNormItemsInfo)treeList.FirstOrDefault(item => ((MMProductionNormItemsInfo)item).FK_ICProductID == productChildID);
            if (filterObj != null)
                return filterObj;
            return null;
        }

        private void UpdateProductionNormItem(MMProductionNormItemsInfo productionNormItem, ICProductsInfo product)
        {
            if (productionNormItem != null && product != null)
            {
                productionNormItem.MMProductionNormItemQuantity = product.ICProductItemQty;
                productionNormItem.FK_ICProductAttributeWoodTypeID = product.FK_ICProductAttributeWoodTypeID;
                productionNormItem.MMProductionNormItemProductHeight = product.ICProductHeight;
                productionNormItem.MMProductionNormItemProductWidth = product.ICProductWidth;
                productionNormItem.MMProductionNormItemProductLength = product.ICProductLength;
                productionNormItem.MMProductionNormItemTotalWoodConsumable = product.ICProductDepreciationQty;
                productionNormItem.MMProductionNormItemDepreciationRate = product.ICProductDepreciationRate;
                productionNormItem.FK_MMFormulaIDPaintA = product.FK_MMFormulaIDPaintA;
                productionNormItem.FK_MMFormulaIDPaintB = product.FK_MMFormulaIDPaintB;
                productionNormItem.FK_MMFormulaIDPaintC = product.FK_MMFormulaIDPaintC;
                productionNormItem.MMProductionNormItemProductJoinery = product.ICProductJoinery;
                productionNormItem.MMProductionNormItemHavePaint = product.ICProductHavePaint;
                productionNormItem.MMProductionNormItemResourceType = product.ICProductResourceType;
                productionNormItem.MMProductionNormItemNo = product.ICProductNo;
                productionNormItem.MMProductionNormItemComment = product.ICProductComment;
                productionNormItem.FK_ICMeasureUnitID = product.FK_ICProductBasicUnitID;
                productionNormItem.FK_ICProductAttributeSpecialityID = product.FK_ICProductAttributeSemiProductSpecialityID;
                productionNormItem.FK_ICProductAttributeQualityID = product.FK_ICProductAttributeQualityID;
                productionNormItem.MMProductionNormItemProductName = product.ICProductName;
                productionNormItem.MMProductionNormItemProductSizeAndPacking = product.ICProductSizeAndSpecifiCations;
                productionNormItem.MMBatchProductProductionNormItemProductDesc = product.ICProductDesc;
                productionNormItem.MMProductionNormItemIsComponent = product.HasComponent;
                productionNormItem.MMProductionNormItemProductJoinery = product.ICProductJoinery;
                productionNormItem.MMProductionNormItemComment = product.ICProductComment;
                productionNormItem.MMProductionNormItemDiameter = product.ICProductDiameter;
                productionNormItem.MMProductionNormItemSerial = product.ICProductDetailSerial;
                productionNormItem.MMProductionNormItemTolenrance = 0; //product.ICProductPlusTolerance;
                productionNormItem.MMProductionNormItemParentOrderName = product.IPProductionItemCode;
                productionNormItem.MMProductionNormItemParentNo = product.IPProductionItemParentCode;
                productionNormItem.MMProductionNormItemSortOrderString = product.IPProductionItemCode;
                productionNormItem.MMProductionNormItemProductAttribute = product.FK_ICProductAttributeColorID.ToString();
                productionNormItem.MMProductionNormItemPaintExecuteMethod = product.ICConfigProductionComplexityType;
                productionNormItem.MMProductionNormItemColorDesc = product.ICProductAttributeColorText;
                productionNormItem.MMProductionNormItemOtherColor = product.ICProductColorAttribute;
                productionNormItem.MMProductionNormItemPaintAKey = product.ICProductColorPaintA;
                productionNormItem.MMProductionNormItemPaintBKey = product.ICProductColorPaintB;
                productionNormItem.MMProductionNormItemVeneerKey = product.ICProductColorPaintC;
                productionNormItem.MMProductionNormItemCode01Combo = product.ICProductPaintProcessA;
                productionNormItem.MMProductionNormItemCode02Combo = product.ICProductPaintProcessB;
                productionNormItem.MMProductionNormItemCode03Combo = product.ICProductPaintProcessC;

            }
        }

        private MMProductionNormItemsInfo ConvertToProductionNormItem(ICProductsInfo objProductsInfo, List<MMConsumableConfigsInfo> consumableConfigs,
                                                        List<MMReuseSpecificateConfigsInfo> reuseSpecificateConfigs)
        {
            if (objProductsInfo == null)
                return null;

            MMProductionNormItemsInfo objProductionNormItemsInfo = new MMProductionNormItemsInfo();
            objProductionNormItemsInfo = SetValueProductionNormItemFromProduct(objProductsInfo, consumableConfigs, reuseSpecificateConfigs);
            objProductionNormItemsInfo.MMProductionNormItemQuantity = objProductsInfo.ICProductItemQty;
            objProductionNormItemsInfo.MMProductionNormItemSortOrderString = objProductsInfo.IPProductionItemCode;
            objProductionNormItemsInfo.MMProductionNormItemParentOrderName = objProductsInfo.IPProductionItemCode;
            objProductionNormItemsInfo.MMProductionNormItemParentNo = objProductsInfo.IPProductionItemParentCode;
            objProductionNormItemsInfo.MMProductionNormItemProductAttribute = objProductsInfo.FK_ICProductAttributeColorID.ToString();
            objProductionNormItemsInfo.MMProductionNormItemOtherColor = objProductsInfo.ICProductColorAttribute.ToString();
            objProductionNormItemsInfo.MMProductionNormItemColorDesc = objProductsInfo.ICProductAttributeColorText;
            objProductionNormItemsInfo.MMProductionNormItemPaintExecuteMethod = objProductsInfo.ICConfigProductionComplexityType;
            objProductionNormItemsInfo.MMProductionNormItemPaintAKey = objProductsInfo.ICProductColorPaintA;
            objProductionNormItemsInfo.MMProductionNormItemPaintBKey = objProductsInfo.ICProductColorPaintB;
            objProductionNormItemsInfo.MMProductionNormItemVeneerKey = objProductsInfo.ICProductColorPaintC;
            objProductionNormItemsInfo.MMProductionNormItemCode01Combo = objProductsInfo.ICProductPaintProcessA;
            objProductionNormItemsInfo.MMProductionNormItemCode02Combo = objProductsInfo.ICProductPaintProcessB;
            objProductionNormItemsInfo.MMProductionNormItemCode03Combo = objProductsInfo.ICProductPaintProcessC;
          
            if (objProductionNormItemsInfo.SubList == null)
                objProductionNormItemsInfo.SubList = new BOSTreeList();
            //objProductionNormItemsInfo.MMProductionNormItemIsComponent = false;
            objProductionNormItemsInfo.MMProductionNormItemGroup = ProductType.SemiProduct.ToString();
            objProductionNormItemsInfo.IsExist = true;

            return objProductionNormItemsInfo;
        }

        public MMProductionNormItemsInfo SetValueProductionNormItemFromProduct(ICProductsInfo objProductsInfo,
                                                                       List<MMConsumableConfigsInfo> consumableConfigs,
                                                                       List<MMReuseSpecificateConfigsInfo> reuseSpecificateConfigs)
        {
            //MMReuseSpecificateConfigsController objReuseSpecificateConfigsController = new MMReuseSpecificateConfigsController();
            MMProductionNormItemsInfo objProductionNormItemsInfo = new MMProductionNormItemsInfo();
            //MMProductionNormItemsInfo objToGetProductionNormItemsInfo = new MMProductionNormItemsInfo();
            //ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
            //ICProductAttributesInfo objProductAttributesInfo;
            objProductionNormItemsInfo.FK_ICProductID = objProductsInfo.ICProductID;
            objProductionNormItemsInfo.FK_ICProductGroupID = objProductsInfo.FK_ICProductGroupID;
            objProductionNormItemsInfo.FK_ICDepartmentID = objProductsInfo.FK_ICDepartmentID;
            objProductionNormItemsInfo.MMProductionNormItemNo = objProductsInfo.ICProductNo;
            objProductionNormItemsInfo.MMProductionNormItemProductLength = objProductsInfo.ICProductLength;
            objProductionNormItemsInfo.MMProductionNormItemProductHeight = objProductsInfo.ICProductHeight;
            objProductionNormItemsInfo.MMProductionNormItemProductWidth = objProductsInfo.ICProductWidth;
            objProductionNormItemsInfo.MMProductionNormItemProductJoinery = objProductsInfo.ICProductJoinery;
            objProductionNormItemsInfo.MMProductionNormItemComment = objProductsInfo.ICProductComment;
            objProductionNormItemsInfo.MMProductionNormItemProductName = objProductsInfo.ICProductName;
            objProductionNormItemsInfo.MMProductionNormItemProductDesc = objProductsInfo.ICProductDesc;
            objProductionNormItemsInfo.FK_ICProductItemID = objProductsInfo.ICProductItemID;
            objProductionNormItemsInfo.FK_ICProductWoodIngredientID = objProductsInfo.FK_ICProductWoodIngredientID;
            objProductionNormItemsInfo.FK_MMProcessID = objProductsInfo.FK_MMProcessID;
            objProductionNormItemsInfo.FK_ICProductAttributeSpecialityID = objProductsInfo.FK_ICProductAttributeSemiProductSpecialityID;
            objProductionNormItemsInfo.MMProductionNormItemTotalWoodConsumable = objProductsInfo.ICProductDepreciationQty;
            objProductionNormItemsInfo.MMProductionNormItemDepreciationRate = objProductsInfo.ICProductDepreciationRate;
            //objProductionNormItemsInfo.MMProductionNormItemDepreciationRate = GetDepreciationRate(consumableConfigs, objProductionNormItemsInfo.FK_ICProductAttributeSpecialityID);
            objProductionNormItemsInfo.MMProductionNormItemProductWoodType = objProductsInfo.ICProductWoodType;
            objProductionNormItemsInfo.FK_ICProductAttributeWoodTypeID = objProductsInfo.FK_ICProductAttributeWoodTypeID;
            bool isReuse = IsReuseItem(reuseSpecificateConfigs, objProductsInfo.FK_ICProductAttributeWoodTypeID,
                         objProductionNormItemsInfo.MMProductionNormItemProductHeight, objProductionNormItemsInfo.MMProductionNormItemProductWidth,
                         objProductionNormItemsInfo.MMProductionNormItemProductLength, objProductionNormItemsInfo.FK_ICProductAttributeSpecialityID);
            objProductionNormItemsInfo.MMProductionNormItemIsReuse = isReuse;

            objProductionNormItemsInfo.FK_MMFormulaIDPaintA = objProductsInfo.FK_MMFormulaIDPaintA;
            objProductionNormItemsInfo.FK_MMFormulaIDPaintB = objProductsInfo.FK_MMFormulaIDPaintB;
            objProductionNormItemsInfo.FK_MMFormulaIDPaintC = objProductsInfo.FK_MMFormulaIDPaintC;
            objProductionNormItemsInfo.MMProductionNormItemProductJoinery = objProductsInfo.ICProductJoinery;
            objProductionNormItemsInfo.MMProductionNormItemHavePaint = objProductsInfo.ICProductHavePaint;
            objProductionNormItemsInfo.MMProductionNormItemResourceType = objProductsInfo.ICProductResourceType;
            objProductionNormItemsInfo.FK_ICMeasureUnitID = objProductsInfo.FK_ICProductBasicUnitID;
            objProductionNormItemsInfo.FK_ICProductAttributeQualityID = objProductsInfo.FK_ICProductAttributeQualityID;
            objProductionNormItemsInfo.MMProductionNormItemProductSizeAndPacking = objProductsInfo.ICProductSizeAndSpecifiCations;
            objProductionNormItemsInfo.MMProductionNormItemProductAttribute = objProductsInfo.FK_ICProductAttributeColorID.ToString();
            objProductionNormItemsInfo.MMProductionNormItemColorDesc = objProductsInfo.ICProductAttributeColorText;
            objProductionNormItemsInfo.MMProductionNormItemPaintExecuteMethod = objProductsInfo.ICConfigProductionComplexityType;
            objProductionNormItemsInfo.MMProductionNormItemOtherColor = objProductsInfo.ICProductColorAttribute;
            objProductionNormItemsInfo.MMProductionNormItemPaintAKey = objProductsInfo.ICProductColorPaintA;
            objProductionNormItemsInfo.MMProductionNormItemPaintBKey = objProductsInfo.ICProductColorPaintB;
            objProductionNormItemsInfo.MMProductionNormItemVeneerKey = objProductsInfo.ICProductColorPaintC;
            objProductionNormItemsInfo.MMProductionNormItemCode01Combo = objProductsInfo.ICProductPaintProcessA;
            objProductionNormItemsInfo.MMProductionNormItemCode02Combo = objProductsInfo.ICProductPaintProcessB;
            objProductionNormItemsInfo.MMProductionNormItemCode03Combo = objProductsInfo.ICProductPaintProcessC;
            return objProductionNormItemsInfo;
        }

        public bool IsReuseItem(List<MMReuseSpecificateConfigsInfo> collection, int woodTypeID, decimal productHeight,
                               decimal productWidth, decimal productLength, int specialityID)
        {
            if (collection == null)
                return false;

            if (productHeight == 0
                && productWidth == 0
                && productLength == 0)
                return false;

            MMReuseSpecificateConfigsInfo foundItem = collection.FirstOrDefault(item => item.FK_ICProductAttributeWoodTypeID == woodTypeID &&
                                                                                    item.FK_ICProductAttributeSpecialityID == specialityID &&
                                                                                    item.MMReuseSpecificateConfigThickMin <= productHeight &&
                                                                                    (item.MMReuseSpecificateConfigThickMax == 0 ||
                                                                                    item.MMReuseSpecificateConfigThickMax >= productHeight) &&
                                                                                    item.MMReuseSpecificateConfigHeightMin <= productLength &&
                                                                                    (item.MMReuseSpecificateConfigHeightMax == 0 ||
                                                                                    item.MMReuseSpecificateConfigHeightMax >= productLength) &&
                                                                                    item.MMReuseSpecificateConfigWidthMin <= productWidth &&
                                                                                    (item.MMReuseSpecificateConfigWidthMax == 0 ||
                                                                                    item.MMReuseSpecificateConfigWidthMax >= productWidth));


            if (foundItem != null)
                return true;
            return false;

        }

        private decimal GetDepreciationRate(List<MMConsumableConfigsInfo> collection, int specialityID)
        {
            if (collection == null)
                return 0;
            MMConsumableConfigsInfo foundItem = collection.FirstOrDefault(item => item.FK_ICProductAttributeID == specialityID);
            if (foundItem != null)
                return foundItem.MMConsumableConfigValue;
            return 0;
        }
        #region Generate AllProductItemCode -  will it soon remove
        public void GenerateAllProductItemCode()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            ICProductItemsController productItemController = new ICProductItemsController();
            List<ICProductItemsInfo> AllItem = productItemController.GetProductItemByProductionNormID(null);
            entity.CarrcassList.ForEach(n =>
            {
                if (n.MMProductionNormID > 0)
                {
                    List<ICProductItemsInfo> productItemList = AllItem.Where(c => c.FK_MMProductionNormID == n.MMProductionNormID).ToList();
                    if (productItemList.Count() > 0)
                    {
                        entity.ProductItemTreeList.Clear();
                        ICProductItemsInfo item = new ICProductItemsInfo();

                        entity.ProductItemTreeList.Add(item);
                        item.SubList = new BOSTreeList();
                        object objType = entity.ProductItemTreeList.GetType().InvokeMember("", BindingFlags.CreateInstance, null, null, null);
                        item.SubList = (BOSTreeList)objType;
                        item.SubList.InitBOSList(entity, "ICProductItems", "ICProductItems");
                        int index = 0;
                        if (productItemList != null && productItemList.Any())
                        {
                            entity.InvalidateTreeList(item.SubList, productItemList, 0, true, ref index, false);
                        }
                        // generate parent code
                        List<ICProductItemsInfo> parentOrderList = new List<ICProductItemsInfo>();
                        if (entity.ProductItemTreeList[0].SubList != null && entity.ProductItemTreeList[0].SubList.Count() > 0)
                        {
                            foreach (ICProductItemsInfo itemSub in entity.ProductItemTreeList[0].SubList)
                            {
                                parentOrderList.Add(itemSub);
                            }
                        }
                        int startIndex = 0;
                        if (parentOrderList.Count() > 0 && string.IsNullOrEmpty(parentOrderList[0].ICProductItemCode))
                        //if (parentOrderList.Count() > 0 )
                        {
                            GenerateProductItemOrderCode(entity.ProductItemTreeList[0].SubList, parentOrderList, null, true, ref startIndex, true, n.MMProductionNormID, n.ICProductID);
                            entity.ProductItemTreeList[0].SubList.SaveItemObjects();
                            productItemController.UpdateItemParentCodeProductionNormID(n.MMProductionNormID);
                        }
                    }
                }
            });
            MessageBox.Show("Lưu thành công", BaseLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

        }
        #endregion
        public void SaveProductItemTreeList(bool isRefresh)
        {
            if (!Toolbar.IsNullOrNoneAction())
                return;

            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            SaveProductionNorm();
            MMProductionNormsInfo mainobject = (MMProductionNormsInfo)entity.MainObject;
            ICProductsInfo product = CurrentCarcass;

            if (entity.ProductItemTreeList.Any())
            {
                if (entity.ProductItemTreeList[0].SubList != null)
                {
                    List<ICProductItemsInfo> parentList = new List<ICProductItemsInfo>();
                    entity.ProductItemTreeList[0].SubList.ConvertToList(parentList);
                    if (parentList.Count() > 0 && parentList.Where(p => p.FK_ICProductItemChildID == mainobject.FK_ICProductID).Count() == 0)
                    {
                        ICProductsInfo iCProductsInfo = BOSApp.GetProductFromCurrentProductList(mainobject.FK_ICProductID);
                        BOSApp.ShowMessage("Chưa tạo cây cho sản phẩm cần SX: " + (iCProductsInfo != null ? iCProductsInfo.ICProductName : string.Empty));
                        return;
                    }
                    if (parentList.Count() > 0 && parentList.Where(p => string.IsNullOrEmpty(p.ICProductItemCode)).Count() > 0)
                    {
                        BOSApp.ShowMessage("Mã cây, không thể để trống!");
                        return;
                    }
                    if (parentList.Count() > 0 && parentList.Where(p => string.IsNullOrEmpty(p.ICProductionItemParentCode)).Count() > 0)
                    {
                        BOSApp.ShowMessage("Thuộc cây ĐM, không thể để trống!");
                        return;
                    }
                    // generate parent code
                    List<ICProductItemsInfo> parentOrderList = new List<ICProductItemsInfo>();
                    if (entity.ProductItemTreeList[0].SubList != null && entity.ProductItemTreeList[0].SubList.Count() > 0)
                    // parentOrderList.Add((ICProductItemsInfo)entity.ProductItemTreeList[0].SubList[0]);
                    {
                        foreach (ICProductItemsInfo itemSub in entity.ProductItemTreeList[0].SubList)
                        {
                            parentOrderList.Add(itemSub);
                        }
                    }
                    int startIndex = 0;
                    if (entity.ProductItemTreeList[0].SubList.Count() > 0 && string.IsNullOrEmpty(parentOrderList[0].ICProductItemCode))
                        GenerateProductItemOrderCode(entity.ProductItemTreeList[0].SubList, parentOrderList, null, true, ref startIndex, true, mainobject.MMProductionNormID, mainobject.FK_ICProductID);

                    List<int> currentIds = parentList.Where(o => o.ICProductItemID > 0).Select(o => o.ICProductItemID).ToList();
                    entity.ProductItemTreeList[0].SubList.SaveItemObjects(currentIds);
                }
                ICProductItemsController piController = new ICProductItemsController();
                piController.UpdateDeleteProductItemByProductionNormID(mainobject.MMProductionNormID);

            }
            if (isRefresh)
            {
                MessageBox.Show("Lưu thành công", BaseLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                //entity.InvalidateProductItemTreeList();
            }
        }

        public void RemoveProductItemAbstractNote(BOSTreeList treeList)
        {
            int count = treeList.Count;
            for (int index = count - 1; index >= 0; index--)
            {
                ICProductItemsInfo item = treeList[index] as ICProductItemsInfo;
                if (item != null && item.SubList != null && item.SubList.Count > 0)
                {
                    foreach (ICProductItemsInfo subItem in item.SubList)
                    {
                        treeList.Add(subItem);
                    }
                    treeList.RemoveAt(index);
                }
            }
        }

        public DataSet GetAllFormulas()
        {
            MMFormulasController formulasController = new MMFormulasController();
            DataSet ds = formulasController.GetFormulaData();
            return ds;
        }

        #region Summary
        public void GetSumPNormItemQty(ref decimal result, IBOSTreeList itemList)
        {
            foreach (MMProductionNormItemsInfo item in itemList)
            {
                if (item.SubList == null || !item.SubList.Any())
                {
                    result += item.MMProductionNormItemQuantity;
                }
                else
                {
                    GetSumPNormItemQty(ref result, item.SubList);
                }
            }
        }

        public decimal GetSumProductionNormItemQty()
        {
            decimal result = 0;
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            ICProductsController objProductsController = new ICProductsController();
            foreach (MMProductionNormItemsInfo item in entity.ProductionNormItemList)
            {
                if (item.SubList == null || !item.SubList.Any())
                {
                    result += item.MMProductionNormItemQuantity;
                }
                else
                {
                    GetSumPNormItemQty(ref result, item.SubList);

                }
            }
            return result;
        }

        public decimal GetSumProductionNormItemBlocks()
        {
            decimal result = 0;
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            foreach (MMProductionNormItemsInfo item in entity.ProductionNormItemList)
            {
                result += item.MMProductionNormItemWoodBlocks;
            }
            return result;
        }
        public decimal GetSumProductionNormItemWoodConsumable()
        {
            decimal result = 0;
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            foreach (MMProductionNormItemsInfo item in entity.ProductionNormItemList)
            {
                result += item.MMProductionNormItemTotalWoodConsumable;
            }
            return result;
        }
        public decimal GetSumProductionNormItemMDFBlock()
        {
            decimal result = 0;
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            foreach (MMProductionNormItemsInfo item in entity.ProductionNormItemList)
            {
                result += item.MMProductionNormItemMDFBlocks;
            }
            return result;
        }
        public decimal GetSumProductionNormItemPaintA()
        {
            decimal result = 0;
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            foreach (MMProductionNormItemsInfo item in entity.ProductionNormItemList)
            {
                result += item.MMProductionNormItemPaintA;
            }
            return result;
        }
        public decimal GetSumProductionNormItemPaintB()
        {
            decimal result = 0;
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            foreach (MMProductionNormItemsInfo item in entity.ProductionNormItemList)
            {
                result += item.MMProductionNormItemPaintB;
            }
            return result;
        }
        public decimal GetSumProductionNormItemPaintC()
        {
            decimal result = 0;
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            foreach (MMProductionNormItemsInfo item in entity.ProductionNormItemList)
            {
                result += item.MMProductionNormItemPaintC;
            }
            return result;
        }
        public decimal GetSumProductionNormItemVeneer()
        {
            decimal result = 0;
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            foreach (MMProductionNormItemsInfo item in entity.ProductionNormItemList)
            {
                result += item.MMProductionNormItemVeneer;
            }
            return result;
        }
        #endregion

        public void ShowProductionNormItemHardwareDetail(MMProductionNormItemsInfo objProductionNormItemsInfo)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            entity.ProductionNormItemHardwareDetailList.Clear();
            if (objProductionNormItemsInfo.MMProductionNormItemID == 0)
            {
                MessageBox.Show("Vui lòng lưu trước khi thêm chi tiết!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            if (objProductionNormItemsInfo.FK_ICProductID == 0)
            {
                MessageBox.Show("Vui lòng chọn hardware để bổ sung số lượng chi tiết!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            ICProductsController objProductsController = new ICProductsController();
            if (objProductionNormItemsInfo != null)
            {

                MMOperationsController objOperationsController = new MMOperationsController();
                List<MMOperationsInfo> operationList = objOperationsController.GetOperationsByGroupAndInOutStockCheck("Product", true);

                MMProductionNormItemHardwaresController objProductionNormItemHardwaresController = new MMProductionNormItemHardwaresController();
                List<MMProductionNormItemHardwaresInfo> ProductionNormItemHardwaresInfoList = objProductionNormItemHardwaresController.
                    GetProductionNormItemHardwaresByProductionNormItemID(objProductionNormItemsInfo.MMProductionNormItemID);

                if (ProductionNormItemHardwaresInfoList == null || ProductionNormItemHardwaresInfoList.Count == 0)
                {
                    foreach (MMOperationsInfo item in operationList)
                    {
                        if (objProductionNormItemsInfo != null)
                        {
                            MMProductionNormItemHardwaresInfo objProductionNormItemMaterialsInfo = new MMProductionNormItemHardwaresInfo();
                            objProductionNormItemMaterialsInfo.FK_ICProductID = objProductionNormItemsInfo.FK_ICProductID;
                            objProductionNormItemMaterialsInfo.MMProductionNormItemHardwareProductName = objProductionNormItemsInfo.MMProductionNormItemProductName;
                            objProductionNormItemMaterialsInfo.MMProductionNormItemHardwareProductDesc = objProductionNormItemsInfo.MMProductionNormItemProductDesc;
                            objProductionNormItemMaterialsInfo.FK_ICMeasureUnitID = objProductionNormItemsInfo.FK_ICMeasureUnitID;
                            objProductionNormItemMaterialsInfo.FK_MMOperationID = item.MMOperationID;
                            objProductionNormItemMaterialsInfo.FK_MMProductionNormItemID = objProductionNormItemsInfo.MMProductionNormItemID;
                            ProductionNormItemHardwaresInfoList.Add(objProductionNormItemMaterialsInfo);

                        }
                    }
                }
                if (ProductionNormItemHardwaresInfoList != null && ProductionNormItemHardwaresInfoList.Count > 0)
                {
                    foreach (MMProductionNormItemHardwaresInfo objProductionNormItemHardwaresInfo in ProductionNormItemHardwaresInfoList)
                    {
                        entity.ProductionNormItemHardwareDetailList.Add(objProductionNormItemHardwaresInfo);
                    }
                }
                guiProductionNormItemHardware guiForm = new guiProductionNormItemHardware(entity.ProductionNormItemHardwareDetailList);
                guiForm.objProductionNormItemsInfo = objProductionNormItemsInfo;
                guiForm.Module = this;
                if (guiForm.ShowDialog() == DialogResult.OK)
                {
                    objProductionNormItemsInfo.MMProductionNormItemQuantity = guiForm.totalQty;
                    BOSDbUtil dbUtil = new BOSDbUtil();
                    dbUtil.SetPropertyValue(objProductionNormItemsInfo, ProductionNormConst.MMProductionNormItemQuantity, objProductionNormItemsInfo.MMProductionNormItemQuantity);
                    dbUtil.SetPropertyValue(objProductionNormItemsInfo, "MMProductionNormItemHardwareAllocationQuantity", (decimal)0);
                    dbUtil.SetPropertyValue(objProductionNormItemsInfo, "MMProductionNormItemHardwareAssembleQuantity", (decimal)0);
                    entity.ProductionNormItemHardwareList.TreeListControl.RefreshDataSource();
                }
            }

        }

        public void RemoveSelectedItemFromGeneralMaterialList()
        {

            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            entity.GeneralMaterialList.RemoveSelectedRowObjectFromList();

        }

        public void UpdateBOM()
        {
            if (Toolbar.IsNullOrNoneAction())
            {
                CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
                ICProductsInfo objProductsInfo = CurrentCarcass;

                SaveProductionNorm();
                MMProductionNormsController pnController = new MMProductionNormsController();
                MMProductionNormsInfo mainobject = (MMProductionNormsInfo)entity.MainObject;
                if (mainobject.MMProductionNormID > 0)
                {
                    entity.ProductionNormItemList.SaveItemObjectsNoneReference();
                    UpdateProductionNormInfo(mainobject);
                    pnController.UpdateObject(mainobject);

                }
                BOSApp.ShowMessage("Lưu thành công.");
            }
        }

        public void AddHardware(int productID)
        {
            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(productID);
            if (objProductsInfo != null)
            {
                AddItemToHardwareItemsList(objProductsInfo);
                ResetHardwareListSortOrder();
            }
        }

        public void ResetHardwareListSortOrder()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            int sortOrder = 1;
            foreach (MMProductionNormItemsInfo item in entity.ProductionNormItemHardwareList)
            {
                item.MMProductionNormItemSortOrder = sortOrder++;
            }
            if (entity.ProductionNormItemHardwareList.TreeListControl != null)
            {
                entity.ProductionNormItemHardwareList.TreeListControl.RefreshDataSource();
            }
        }

        public MMProductionNormItemsInfo AddItemToHardwareItemsList(ICProductsInfo productObject)
        {
            if (productObject == null)
                return null;

            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            ICProductsController objProductsController = new ICProductsController();
            MMProductionNormItemsInfo objProductionNormItemsInfo = new MMProductionNormItemsInfo();
            objProductionNormItemsInfo = SetValueHardwareItemFromProduct(productObject);
            if (entity.ProductionNormItemHardwareList != null && entity.ProductionNormItemHardwareList.Count > 0)
                objProductionNormItemsInfo.MMProductionNormItemSortOrder = entity.ProductionNormItemHardwareList.Count + 1;
            else
                objProductionNormItemsInfo.MMProductionNormItemSortOrder = 1;
            if (objProductionNormItemsInfo.FK_MMOperationID == 0)
            {
                ICProductsForViewInfo material = BOSApp.CurrentProductList.Where(m => m.ICProductID == objProductionNormItemsInfo.FK_ICProductID).FirstOrDefault();
                if (material != null)
                {
                    MMOperationAndHardwareOperationTypesInfo dfOperation
                        = DefualtAllocationOperationList.Where(d => d.MMHardwareOperationType == material.ICProductType).FirstOrDefault();
                    if (dfOperation != null) objProductionNormItemsInfo.FK_MMOperationID = dfOperation.FK_MMOperationID;
                    if (objProductionNormItemsInfo.FK_MMOperationID == 0)
                    {
                        MMDefaultAllocationOperationConfigsController objDfOperationsController = new MMDefaultAllocationOperationConfigsController();
                        MMDefaultAllocationOperationConfigsInfo dfOperationsInfo = (MMDefaultAllocationOperationConfigsInfo)objDfOperationsController.GetOperationByDepartmentAndProductGroup(material.FK_ICDepartmentID, material.FK_ICProductGroupID);
                        if (dfOperationsInfo != null) objProductionNormItemsInfo.FK_MMOperationID = dfOperationsInfo.FK_MMOperationID;
                    }
                }
            }
            entity.ProductionNormItemHardwareList.Add(objProductionNormItemsInfo);
            entity.ProductionNormItemHardwareList.TreeListControl.RefreshDataSource();
            entity.ProductionNormItemHardwareList.TreeListControl.ExpandAll();
            entity.ProductionNormItemHardwareList.TreeListControl.BestFitColumns();
            return objProductionNormItemsInfo;
        }

        public MMProductionNormItemsInfo SetValueHardwareItemFromProduct(ICProductsInfo objProductsInfo)
        {
            MMProductionNormItemsInfo objProductionNormItemsInfo = new MMProductionNormItemsInfo();
            objProductionNormItemsInfo.FK_ICProductID = objProductsInfo.ICProductID;
            objProductionNormItemsInfo.FK_ICProductGroupID = objProductsInfo.FK_ICProductGroupID;
            objProductionNormItemsInfo.FK_ICDepartmentID = objProductsInfo.FK_ICDepartmentID;
            objProductionNormItemsInfo.MMProductionNormItemProductName = objProductsInfo.ICProductName;
            objProductionNormItemsInfo.MMProductionNormItemNo = objProductsInfo.ICProductNo;
            objProductionNormItemsInfo.MMProductionNormItemNeededTime = DateTime.Now;
            objProductionNormItemsInfo.FK_ICMeasureUnitID = objProductsInfo.FK_ICProductBasicUnitID;
            objProductionNormItemsInfo.MMProductionNormItemProductDesc = objProductsInfo.ICProductDesc;
            objProductionNormItemsInfo.MMProductionNormItemProductSupplierNumber = objProductsInfo.ICProductSupplierNumber;
            objProductionNormItemsInfo.MMProductionNormItemGroup = ProductType.Hardware.ToString();
            objProductionNormItemsInfo.MMProductionNormItemDepreciationRate = 1M;
            //Get unit from Products
            ICMeasureUnitsController objMeasureUnitsController = new ICMeasureUnitsController();
            ICMeasureUnitsInfo objMeasureUnitsInfo = new ICMeasureUnitsInfo();
            objMeasureUnitsInfo = (ICMeasureUnitsInfo)objMeasureUnitsController.GetObjectByID(objProductsInfo.FK_ICProductBasicUnitID);
            if (objMeasureUnitsInfo != null)
            {
                objProductionNormItemsInfo.MMProductionNormItemUnit = objMeasureUnitsInfo.ICMeasureUnitName;
                objProductionNormItemsInfo.ICMeasureUnitName = objMeasureUnitsInfo.ICMeasureUnitName;
            }

            // objProductionNormItemsInfo.MMProductionNormItemProductAttributeValue1 = objProductsInfo.ICProductSizeAndSpecifiCations;
            objProductionNormItemsInfo.MMProductionNormItemProductSizeAndPacking = objProductsInfo.ICProductSizeAndSpecifiCations;
            objProductionNormItemsInfo.MMProductionNormItemProductDesc = objProductsInfo.ICProductDesc;
            if (objProductionNormItemsInfo.SubList == null)
                objProductionNormItemsInfo.SubList = new BOSTreeList();
            return objProductionNormItemsInfo;
        }

        public void RemoveSelectedItemFromProductionNormItemHardwareList()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainObject = (MMProductionNormsInfo)entity.MainObject;
            if (mainObject.MMProductionNormHardwareStatus != Status.Approved.ToString())
            {
                if (entity.ProductionNormItemHardwareList.TreeListControl != null)
                {
                    DevExpress.XtraTreeList.Nodes.TreeListNode currentNode = entity.ProductionNormItemHardwareList.TreeListControl.GetSelectedNode();
                    if (currentNode != null)
                    {
                        if (currentNode.Level == 0)
                            entity.ProductionNormItemHardwareList.TreeListControl.Nodes.Remove(currentNode);
                        else
                            currentNode.ParentNode.Nodes.Remove(currentNode);
                    }
                    entity.ProductionNormItemHardwareList.TreeListControl.RefreshDataSource();
                    ResetHardwareListSortOrder();

                }
            }
        }

        public void AddNodeProductionNormItemHardwareList()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            if (entity.ProductionNormItemHardwareList.TreeListControl != null)
            {
                MMProductionNormItemsInfo newMMProductionNormItemsInfo = new MMProductionNormItemsInfo();
                newMMProductionNormItemsInfo.MMProductionNormItemGroup = ProductType.Hardware.ToString();
                entity.ProductionNormItemHardwareList.Add(newMMProductionNormItemsInfo);
                entity.ProductionNormItemHardwareList.TreeListControl.RefreshDataSource();
            }
        }

        public void ChangeHardwareAlternative()
        {
            if (!Toolbar.IsNullOrNoneAction())
                return;

            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            if (entity.ProductionNormItemHardwareList.Count() == 0)
                return;

            BOSList<MMProductionNormItemsInfo> hardwareItem = new BOSList<MMProductionNormItemsInfo>();
            entity.ProductionNormItemHardwareList.ConvertToList(hardwareItem);
            if (hardwareItem == null)
                return;

            using (guiChangeHardware guiForm = new guiChangeHardware(hardwareItem))
            {
                guiForm.Module = this;
                guiForm.ShowDialog();
                if (!guiForm.IsUpdated)
                    return;

                entity.InvalidateBOMHardware();
            }
        }

        public void SetProductionNormID(IBOSTreeList subList, int productionNormID)
        {
            if (subList != null)
            {
                foreach (MMProductionNormItemsInfo hw in subList)
                {
                    hw.FK_MMProductionNormID = productionNormID;
                    SetProductionNormID(hw.SubList, productionNormID);
                }
            }
        }
        public void SaveProductionNormItemHardware()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo pn = (MMProductionNormsInfo)entity.MainObject;
            SaveProductionNorm();
            if (pn.MMProductionNormID > 0)
            {
                foreach (MMProductionNormItemsInfo hw in entity.ProductionNormItemHardwareList)
                {
                    hw.FK_MMProductionNormID = pn.MMProductionNormID;
                    SetProductionNormID(hw.SubList, pn.MMProductionNormID);
                }
                entity.ProductionNormItemHardwareList.SaveItemObjectsNoneReference();
                MessageBox.Show("Lưu thành công", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                MessageBox.Show("Vui lòng tạo BOM trước", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }
        public void AddGeneralMaterial(int productID, int operationID)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            ICProductsInfo mainObject = CurrentCarcass;
            MMProductionNormsController pnController = new MMProductionNormsController();
            List<MMProductionNormsInfo> pnList = pnController.GetProductionNormListData(mainObject.ICProductID);

            if (pnList != null && pnList.Any())
            {
                MMProductionNormsInfo pn = pnList[0];
                ICProductsController objProductsController = new ICProductsController();
                ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(productID);
                if (objProductsInfo != null)
                {
                    AddItemToGeneralMaterialList(objProductsInfo, pn, operationID);
                    ResetGeneralMaterialSortOrder();
                }
            }
            else
            {
                MessageBox.Show("Vui lòng tạo BOM trước"
                               , CommonLocalizedResources.MessageBoxDefaultCaption
                               , MessageBoxButtons.OK
                               , MessageBoxIcon.Information);
            }
        }

        public MMProductionNormItemsInfo AddItemToGeneralMaterialList(ICProductsInfo productObject, MMProductionNormsInfo pn, int operationID)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            ICProductsInfo mainObject = CurrentCarcass;
            ICProductsController objProductsController = new ICProductsController();

            if (productObject != null)
            {
                MMProductionNormItemsInfo objProductionNormItemsInfo = new MMProductionNormItemsInfo();
                objProductionNormItemsInfo = SetValueGeneralMaterialItemFromProduct(productObject);
                if (entity.GeneralMaterialList != null && entity.GeneralMaterialList.Count > 0)
                    objProductionNormItemsInfo.MMProductionNormItemSortOrder = entity.GeneralMaterialList.Count + 1;
                else
                    objProductionNormItemsInfo.MMProductionNormItemSortOrder = 1;

                ICMaterialConfigsController mcController = new ICMaterialConfigsController();
                List<ICMaterialConfigsInfo> lstConfig = mcController.GetAllAliveAndActiveConfig();

                List<ICMaterialConfigsInfo> lstMatchConfig;
                objProductionNormItemsInfo.MMProductionNormItemQuantity = 0;

                lstMatchConfig = lstConfig.Where(t => t.FK_ICProductID == objProductionNormItemsInfo.FK_ICProductID).ToList();

                if (lstMatchConfig != null && lstMatchConfig.Any())
                {
                    foreach (ICMaterialConfigsInfo config in lstMatchConfig)
                    {
                        CalculateMaterialQtyByConfig(objProductionNormItemsInfo, config, mainObject, pn, entity);
                    }
                }
                objProductionNormItemsInfo.FK_MMOperationID = operationID;
                if (operationID == 0)
                {
                    ICProductsForViewInfo material = BOSApp.CurrentProductList.Where(m => m.ICProductID == objProductionNormItemsInfo.FK_ICProductID).FirstOrDefault();
                    if (material != null)
                    {
                        MMOperationAndHardwareOperationTypesInfo dfOperation = DefualtAllocationOperationList.Where(d => d.MMHardwareOperationType == material.ICProductType).FirstOrDefault();
                        if (dfOperation != null) objProductionNormItemsInfo.FK_MMOperationID = dfOperation.FK_MMOperationID;
                        if (objProductionNormItemsInfo.FK_MMOperationID == 0)
                        {
                            MMDefaultAllocationOperationConfigsController objDfOperationsController = new MMDefaultAllocationOperationConfigsController();
                            MMDefaultAllocationOperationConfigsInfo dfOperationsInfo = (MMDefaultAllocationOperationConfigsInfo)objDfOperationsController.GetOperationByDepartmentAndProductGroup(material.FK_ICDepartmentID, material.FK_ICProductGroupID);
                            if (dfOperationsInfo != null) objProductionNormItemsInfo.FK_MMOperationID = dfOperationsInfo.FK_MMOperationID;
                        }
                    }
                }
                entity.GeneralMaterialList.Add(objProductionNormItemsInfo);
                entity.GeneralMaterialList.GridControl?.RefreshDataSource();
                return objProductionNormItemsInfo;
            }
            return null;

        }

        public MMProductionNormItemsInfo SetValueGeneralMaterialItemFromProduct(ICProductsInfo objProductsInfo)
        {
            MMProductionNormItemsInfo objProductionNormItemsInfo = new MMProductionNormItemsInfo();
            objProductionNormItemsInfo.FK_ICProductID = objProductsInfo.ICProductID;
            objProductionNormItemsInfo.FK_ICProductGroupID = objProductsInfo.FK_ICProductGroupID;
            objProductionNormItemsInfo.FK_ICDepartmentID = objProductsInfo.FK_ICDepartmentID;
            objProductionNormItemsInfo.MMProductionNormItemProductName = objProductsInfo.ICProductName;
            objProductionNormItemsInfo.MMProductionNormItemNo = objProductsInfo.ICProductNo;
            objProductionNormItemsInfo.MMProductionNormItemNeededTime = DateTime.Now;
            objProductionNormItemsInfo.FK_ICMeasureUnitID = objProductsInfo.FK_ICProductBasicUnitID;
            objProductionNormItemsInfo.MMProductionNormItemProductDesc = objProductsInfo.ICProductDesc;
            objProductionNormItemsInfo.MMProductionNormItemProductSupplierNumber = objProductsInfo.ICProductSupplierNumber;
            objProductionNormItemsInfo.MMProductionNormItemGroup = ProductType.GeneralMaterial.ToString();
            objProductionNormItemsInfo.MMProductionNormItemProductSizeAndPacking = objProductsInfo.ICProductSizeAndSpecifiCations;
            //Get unit from Products
            ICMeasureUnitsController objMeasureUnitsController = new ICMeasureUnitsController();
            ICMeasureUnitsInfo objMeasureUnitsInfo = new ICMeasureUnitsInfo();
            objMeasureUnitsInfo = (ICMeasureUnitsInfo)objMeasureUnitsController.GetObjectByID(objProductsInfo.FK_ICProductBasicUnitID);
            if (objMeasureUnitsInfo != null)
            {
                objProductionNormItemsInfo.MMProductionNormItemUnit = objMeasureUnitsInfo.ICMeasureUnitName;
                objProductionNormItemsInfo.ICMeasureUnitName = objMeasureUnitsInfo.ICMeasureUnitName;
            }

            if (objProductionNormItemsInfo.SubList == null)
                objProductionNormItemsInfo.SubList = new BOSTreeList();
            return objProductionNormItemsInfo;
        }

        public void ResetGeneralMaterialSortOrder()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            int sortOrder = 1;
            foreach (MMProductionNormItemsInfo item in entity.GeneralMaterialList)
            {
                item.MMProductionNormItemSortOrder = sortOrder++;
            }
            entity.GeneralMaterialList.GridControl?.RefreshDataSource();
        }

        public void CalculateMaterialQtyByConfig(MMProductionNormItemsInfo item, ICMaterialConfigsInfo config, ICProductsInfo carcass, MMProductionNormsInfo pn, CarcassBOMEntities entity)
        {
            if (config.ICMaterialConfigType == MaterialConfigType.m3.ToString()) // tính trên khối lượng bom
            {
                //List<string> lstfinishStr = carcass.ICProductAttributeFinishing.Split(',').ToList();

                //bool isExist = false;
                //foreach (string id in lstfinishStr)
                //{
                //    if (config.FK_ICProductAttHTType.ToString() == id.Trim())
                //    {
                //        isExist = true;
                //        break;
                //    }
                //}

                //if (isExist)
                //{
                item.MMProductionNormItemQuantity += (pn.MMProductionNormBlock * config.ICMaterialConfigQty);
                //}
            }
            else if (config.ICMaterialConfigType == MaterialConfigType.Packing.ToString())
            {
                foreach (ICProductPackingDetailsInfo packing in entity.ICProductPackingDetailsList)
                {
                    if (packing.FK_ICProductAttributeSpecialityID == config.FK_ICProductAttPackingMaterialSpeciality)
                    {
                        if (config.ICMaterialConfigCalByType
                            == MaterialConfigCalByType.Circumcircle.ToString()) // chu vi 1 mặt
                        {
                            item.MMProductionNormItemQuantity +=
                                ((packing.ICProductPackingDetailLength + packing.ICProductPackingDetailWidth) * 2 * config.ICMaterialConfigQty);
                        }
                        else if (config.ICMaterialConfigCalByType
                            == MaterialConfigCalByType.Longest.ToString()) // cạnh dài nhất
                        {
                            item.MMProductionNormItemQuantity +=
                                (Math.Max(Math.Max(packing.ICProductPackingDetailLength, packing.ICProductPackingDetailWidth)
                                            , packing.ICProductPackingDetailHeight) * config.ICMaterialConfigQty);
                        }
                    }
                }
            }
            else if (config.ICMaterialConfigType == MaterialConfigType.m2.ToString())
            {
                List<string> lstfinishStr = carcass.ICProductAttributeFinishing.Split(',').ToList();

                bool isExist = false;
                foreach (string id in lstfinishStr)
                {
                    if (config.FK_ICProductAttHTType.ToString() == id.Trim())
                    {
                        isExist = true;
                        break;
                    }
                }

                if (isExist)
                {
                    item.MMProductionNormItemQuantity += (pn.TotalPaint * config.ICMaterialConfigQty);
                }
            }
        }

        public void UpdateGeneralMaterialQty()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            ICProductsInfo objProductsInfo = CurrentCarcass;
            MMProductionNormsController pnController = new MMProductionNormsController();
            List<MMProductionNormsInfo> pnList = pnController.GetProductionNormListData(objProductsInfo.ICProductID);

            if (pnList != null && pnList.Any())
            {
                MMProductionNormsInfo pn = pnList[0];

                ICMaterialConfigsController mcController = new ICMaterialConfigsController();
                List<ICMaterialConfigsInfo> lstConfig = mcController.GetAllAliveAndActiveConfig();

                List<ICMaterialConfigsInfo> lstMatchConfig;

                entity.GeneralMaterialList.ForEach(item =>
                {
                    item.MMProductionNormItemQuantity = 0;

                    lstMatchConfig = lstConfig.Where(t => t.FK_ICProductID == item.FK_ICProductID).ToList();

                    if (lstMatchConfig != null && lstMatchConfig.Any())
                    {
                        foreach (ICMaterialConfigsInfo config in lstMatchConfig)
                        {
                            CalculateMaterialQtyByConfig(item, config, objProductsInfo, pn, entity);
                        }
                    }

                });

                entity.GeneralMaterialList.GridControl?.RefreshDataSource();

            }
            else
            {
                MessageBox.Show("Vui lòng tạo BOM trước"
                                , CommonLocalizedResources.MessageBoxDefaultCaption
                                , MessageBoxButtons.OK
                                , MessageBoxIcon.Information);
            }
        }

        public void SaveGeneralMaterial()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainobject = (MMProductionNormsInfo)entity.MainObject;

            if (mainobject.MMProductionNormID > 0)
            {
                foreach (MMProductionNormItemsInfo gm in entity.GeneralMaterialList)
                {
                    gm.FK_MMProductionNormID = mainobject.MMProductionNormID;
                }
                entity.GeneralMaterialList.SaveItemObjects();
                MessageBox.Show("Lưu thành công", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                MessageBox.Show("Vui lòng tạo BOM trước", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        public bool IsViewProperties()
        {
            if (PropertiesRadioGroup != null
                && PropertiesRadioGroup.SelectedIndex == 0)
            {
                return true;
            }

            return false;
        }

        public bool IsViewComponent()
        {
            if (PackagingRadioGroup != null
                && PackagingRadioGroup.SelectedIndex == 1)
            {
                return true;
            }

            return false;
        }

        private void GetChildNodeByParentProductID(ICProductItemsInfo pi, int productID, ref List<ICProductItemsInfo> piList)
        {
            if (pi.SubList != null && pi.SubList.Any())
            {
                if (pi.FK_ICProductItemChildID == productID)
                {
                    foreach (ICProductItemsInfo item in pi.SubList)
                    {
                        piList.Add((ICProductItemsInfo)item.Clone());
                    }
                    return;
                }
                else
                {
                    foreach (ICProductItemsInfo item in pi.SubList)
                    {
                        if (piList.Count > 0)
                        {
                            break;
                        }
                        GetChildNodeByParentProductID(item, productID, ref piList);
                    }
                }
            }
        }

        private List<ICProductItemsInfo> GetChildNodeList(int productID)
        {
            List<ICProductItemsInfo> piList = new List<ICProductItemsInfo>();

            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;

            foreach (ICProductItemsInfo item in entity.ProductItemTreeList)
            {
                GetChildNodeByParentProductID(item, productID, ref piList);
            }

            return piList;
        }

        private ICProductItemsInfo FindNodeByProductID(int productID)
        {
            ICProductItemsInfo pi = new ICProductItemsInfo();
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;

            foreach (ICProductItemsInfo item in entity.ProductItemTreeList)
            {
                GetNodeByProductID(item, productID, ref pi);
            }

            return pi;
        }

        private void GetNodeByProductID(ICProductItemsInfo pi, int productID, ref ICProductItemsInfo r)
        {
            if (pi.FK_ICProductItemChildID == productID)
            {
                r = (ICProductItemsInfo)pi.Clone();
                return;
            }
            else
            {
                if (pi.SubList != null && pi.SubList.Any())
                {
                    foreach (ICProductItemsInfo item in pi.SubList)
                    {
                        if (r.FK_ICProductItemChildID != 0)
                        {
                            break;
                        }
                        GetNodeByProductID(item, productID, ref r);
                    }
                }
            }
        }



        public void ShowProductStructureForm(ICProductsInfo product)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            ICProductsInfo mainObject = CurrentCarcass;
            MMProductionNormsInfo normObject = (MMProductionNormsInfo)entity.MainObject;
            ICProductsInfo notSaveItem = entity.ProductList.FirstOrDefault(t => t.ICProductID == 0 || t.ICProductDetailID == 0);
            if (product != null && notSaveItem == null)
            {
                {
                    List<ICProductItemsInfo> childList = GetChildNodeList(product.ICProductID);
                    ICProductItemsInfo childFilter;
                    List<ICProductsInfo> semiProducts = new List<ICProductsInfo>();
                    foreach (ICProductsInfo item in entity.ProductList)
                    {
                        ICProductsInfo cItem = (ICProductsInfo)item.Clone();
                        childFilter = childList.FirstOrDefault(t => t.FK_ICProductItemChildID == item.ICProductID);
                        if (childFilter != null)
                        {
                            cItem.Selected = true;
                            cItem.ICProductItemQty = childFilter.ICProductItemQty;
                        }
                        if ((cItem.ICProductID != product.ICProductID ||
                            (product.ICProductID == cItem.ICProductID && product.ICProductID == CurrentCarcass.ICProductID
                            && normObject.MMProductionNormType == ProductionNormType.Maintenance.ToString())))
                            semiProducts.Add(cItem);
                    }
                    ICProductItemsInfo curNode = FindNodeByProductID(product.ICProductID);
                    decimal qty = 0;
                    if (curNode != null)
                        qty = curNode.ICProductItemQty;
                    if (qty == 0) qty = 1;
                    if (GuiProductStructure == null)
                        GuiProductStructure = new guiCreateProductStructure(product.ICProductID, qty, product.HasComponent, product.FK_MMProcessID, product.ICProductDesc, !SaveSemiProductButton.Enabled, semiProducts);
                    else
                        GuiProductStructure.ReloadData(product.ICProductID, qty, product.HasComponent, product.FK_MMProcessID, product.ICProductDesc, !SaveSemiProductButton.Enabled, semiProducts);

                    GuiProductStructure.Module = this;
                    if (GuiProductStructure.ShowDialog() == DialogResult.OK)
                    {
                        if (!GetUsingBOMStatus(ProductionNormItemGroup.SemiProduct.ToString())) return;
                        if (!GetBOMBlockStatus(ProductionNormItemGroup.SemiProduct.ToString())) return;
                        decimal curQty = GuiProductStructure.Qty;
                        CreateProductStructure(product.ICProductID, GuiProductStructure.SelectedList, curQty);
                        List<ICProductItemsInfo> parentList = new List<ICProductItemsInfo>();
                        if (entity.ProductItemTreeList[0].SubList != null && entity.ProductItemTreeList[0].SubList.Count() > 0)
                            foreach (ICProductItemsInfo itemSub in entity.ProductItemTreeList[0].SubList)
                            {
                                parentList.Add(itemSub);
                            }
                        int startIndex = 0;
                        if (parentList.Count() > 0)
                            GenerateProductItemOrderCode(entity.ProductItemTreeList[0].SubList, parentList, null, true, ref startIndex, true, normObject.MMProductionNormID, normObject.FK_ICProductID);
                        SaveProductItemTreeList(false);
                        ICProductItemsController piController = new ICProductItemsController();
                        if (normObject.MMProductionNormType != ProductionNormType.Maintenance.ToString())
                            piController.RemoveDuplicateNote(mainObject.MMProductionNormID);

                        //entity.InvalidateProductItemTreeList();
                        //entity.RefreshProductItemTreeListView(entity.ProductItemTreeList);
                        //entity.ProductItemList.SaveItemObjects();
                    }
                }
            }
            else
            {
                MessageBox.Show("Vui lòng lưu danh sách Cụm & Chi tiết trước!"
                                , CommonLocalizedResources.MessageBoxDefaultCaption
                                , MessageBoxButtons.OK
                                , MessageBoxIcon.Information);
            }
        }

        public void AddParentAndChildToTreeList(ICProductItemsInfo item, int parentID, List<ICProductsInfo> list, decimal parentQty, ref bool isExist)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            ICProductsInfo mainobject = CurrentCarcass;
            MMProductionNormsInfo normObject = (MMProductionNormsInfo)entity.MainObject;
            bool isExists = false;

            if (item.FK_ICProductItemChildID == parentID)
            {
                isExist = true;
                isExists = true;
                item.ICProductItemQty = parentQty;

                if (item.SubList == null)
                {

                    item.SubList = new BOSTreeList();
                    object objType = entity.ProductItemTreeList.GetType().InvokeMember("", BindingFlags.CreateInstance, null, null, null);
                    item.SubList = (BOSTreeList)objType;
                    item.SubList.InitBOSList(this.CurrentModuleEntity, "ICProductItems", "ICProductItems");

                }

                List<int> existsIDList = new List<int>();

                if (item.SubList != null && item.SubList.Any())
                {
                    ICProductsInfo fp;
                    // update & delete
                    for (int i = item.SubList.Count - 1; i >= 0; i--)
                    {
                        fp = list.FirstOrDefault(t => t.ICProductID == ((ICProductItemsInfo)item.SubList[i]).FK_ICProductItemChildID);
                        if (fp != null)
                        {
                            ((ICProductItemsInfo)item.SubList[i]).ICProductItemQty = fp.ICProductItemQty;
                            existsIDList.Add(fp.ICProductID);
                        }
                        else
                        {
                            item.SubList.RemoveAt(i);
                        }
                    }

                }

                //create
                list.ForEach(child =>
                {
                    if (!existsIDList.Contains(child.ICProductID))
                    {
                        ICProductItemsInfo productItem = new ICProductItemsInfo();
                        productItem.FK_ICProductCarcassID = mainobject.ICProductID;
                        productItem.FK_ICProductID = child.ICProductID;
                        productItem.ICProductCode = child.ICProductCode;
                        productItem.ICProductName = child.ICProductName;
                        productItem.ICProductItemQty = child.ICProductItemQty;
                        productItem.FK_ICProductItemChildID = child.ICProductID;
                        productItem.FK_ICProductItemParentID = item.FK_ICProductItemChildID;
                        productItem.ICProductItemParentID = item.ICProductItemID;
                        productItem.FK_ICProductDetailID = child.ICProductDetailID;
                        productItem.FK_MMProductionNormID = normObject.MMProductionNormID;
                        item.SubList.Add(productItem);
                    }

                });
            }


            if (!isExists)
            {
                if (item.SubList != null && item.SubList.Any())
                {
                    foreach (ICProductItemsInfo iItem in item.SubList)
                    {
                        AddParentAndChildToTreeList(iItem, parentID, list, parentQty, ref isExist);
                    }
                }
            }
        }
        public string GetCodeFromTree(ICProductItemsInfo parentObj, bool alphaOrder, int index)
        {
            string result = string.Empty;
            bool isExit = true;
            while (isExit)
            {
                if (alphaOrder && AlphaString.Count() >= index)
                    result = AlphaString[index - 1].ToString();
                else if (parentObj != null)
                    result = parentObj.ICProductItemCode + "." + (index).ToString();

                if (parentObj != null && parentObj.SubList != null && parentObj.SubList.Count > 0)
                {
                    int count = 0;
                    foreach (ICProductItemsInfo item in parentObj.SubList)
                    {
                        if (item.ICProductItemCode == result)
                            count++;
                    }
                    if (count == 0) isExit = false;
                    else index++;
                }
                else isExit = false;

            }
            return result;
        }
        public void GenerateProductItemOrderCode(IBOSTreeList treeList, List<ICProductItemsInfo> collection
                                                        , ICProductItemsInfo parentObj
                                                        , bool sortOrder
                                                        , ref int startIndex
                                                        , bool alphaOrder
                                                        , int MMProductionNormID
                                                        , int mainProductID)
        {
            int index = 1;
            string orderNo = string.Empty;
            foreach (ICProductItemsInfo itemsInfo in collection)
            {
                if (sortOrder)
                {
                    orderNo = GetCodeFromTree(parentObj, alphaOrder, index);
                    index++;
                }
                if (string.IsNullOrEmpty(itemsInfo.ICProductItemCode))
                    itemsInfo.ICProductItemCode = orderNo;
                itemsInfo.FK_ICProductCarcassID = mainProductID;
                itemsInfo.FK_MMProductionNormID = MMProductionNormID;
                if (parentObj != null)
                    itemsInfo.ICProductionItemParentCode = parentObj.ICProductItemCode;
                else
                    itemsInfo.ICProductionItemParentCode = itemsInfo.ICProductItemCode;
                if (itemsInfo.SubList != null && itemsInfo.SubList.Count > 0)
                {
                    //Make the type of sub list same as its parent
                    List<ICProductItemsInfo> subList = new List<ICProductItemsInfo>();
                    foreach (var item in itemsInfo.SubList)
                    {
                        subList.Add((ICProductItemsInfo)item);
                    }
                    this.GenerateProductItemOrderCode(itemsInfo.SubList, subList, itemsInfo, true, ref startIndex, false, MMProductionNormID, mainProductID);
                }
            }
        }
        public void CreateProductStructure(int parentID, List<ICProductsInfo> selectList, decimal parentQty)
        {
            if (selectList != null)
            {
                CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
                MMProductionNormsInfo normObject = (MMProductionNormsInfo)entity.MainObject;
                ICProductsInfo mainobject = CurrentCarcass;
                bool isExist = false;

                foreach (ICProductItemsInfo item in entity.ProductItemTreeList)
                {
                    if (item.SubList != null && item.SubList.Any())
                    {
                        AddParentAndChildToTreeList(item, parentID, selectList, parentQty, ref isExist);
                    }

                    if (!isExist)
                    {
                        if (item.SubList == null)
                        {

                            item.SubList = new BOSTreeList();
                            object objType = entity.ProductItemTreeList.GetType().InvokeMember("", BindingFlags.CreateInstance, null, null, null);
                            item.SubList = (BOSTreeList)objType;
                            item.SubList.InitBOSList(this.CurrentModuleEntity, "ICProductItems", "ICProductItems");

                        }

                        ICProductsInfo pInfo = entity.ProductList.FirstOrDefault(t => t.ICProductID == parentID);

                        ICProductItemsInfo parentNode = new ICProductItemsInfo();
                        parentNode.FK_ICProductCarcassID = mainobject.ICProductID;
                        parentNode.FK_ICProductID = parentID;
                        parentNode.ICProductCode = pInfo.ICProductCode;
                        parentNode.ICProductName = pInfo.ICProductName;
                        parentNode.ICProductItemQty = 1;
                        parentNode.FK_ICProductItemChildID = parentID;
                        parentNode.FK_ICProductItemParentID = item.FK_ICProductItemChildID;
                        parentNode.ICProductItemParentID = item.ICProductItemID;
                        parentNode.FK_MMProductionNormID = normObject.MMProductionNormID;
                        parentNode.FK_ICProductDetailID = pInfo.ICProductDetailID;
                        item.SubList.Add(parentNode);

                        parentNode.SubList = new BOSTreeList();
                        {
                            object objType = entity.ProductItemTreeList.GetType().InvokeMember("", BindingFlags.CreateInstance, null, null, null);
                            parentNode.SubList = (BOSTreeList)objType;
                            parentNode.SubList.InitBOSList(this.CurrentModuleEntity, "ICProductItems", "ICProductItems");
                        }

                        selectList.ForEach(child =>
                        {
                            ICProductItemsInfo productItem = new ICProductItemsInfo();
                            productItem.FK_ICProductCarcassID = mainobject.ICProductID;
                            productItem.FK_ICProductID = child.ICProductID;
                            productItem.ICProductCode = child.ICProductCode;
                            productItem.ICProductName = child.ICProductName;
                            productItem.ICProductItemQty = child.ICProductItemQty;
                            productItem.FK_ICProductItemChildID = child.ICProductID;
                            productItem.FK_ICProductItemParentID = item.FK_ICProductItemChildID;
                            productItem.ICProductItemParentID = item.ICProductItemID;
                            productItem.FK_ICProductDetailID = child.ICProductDetailID;
                            parentNode.SubList.Add(productItem);
                        });
                    }
                }


            }
        }

        public void ShowProcess(ICProductsInfo semiProduct, bool isParent)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainobject = (MMProductionNormsInfo)entity.MainObject;
            ICProductsInfo notSaveItem = entity.ProductList.FirstOrDefault(t => t.ICProductID == 0);
            if (semiProduct != null && notSaveItem == null)
            {
                entity.ProductInProcessList.Clear();
                entity.ProductInProcessList.Add(semiProduct);

                ICProductItemProcesssController processCtrl = new ICProductItemProcesssController();
                List<ICProductItemProcesssInfo> lstProcess = processCtrl.GetProcessByProductDetailID(mainobject.MMProductionNormID, semiProduct.ICProductDetailID);

                if (semiProduct.ProcessList != null)
                    lstProcess = lstProcess.Union(semiProduct.ProcessList).ToList();

                entity.PIProcessList.Invalidate(lstProcess);
                ImageWithName iwn = CurrentImageList.FirstOrDefault(t => t.ImgName == semiProduct.ICProductImageName);
                Image img = null;
                if (iwn != null)
                {
                    img = iwn.Img;
                }
                else
                {
                    foreach (ImageWithName item in CurrentImageList)
                    {
                        string[] nameSplit = item.ImgName.Split('.');
                        if (nameSplit != null)
                        {
                            string name = string.Empty;

                            for (int i = 0; i < nameSplit.Length - 1; i++)
                            {
                                name += nameSplit[i];
                            }

                            if (name == semiProduct.ICProductCode)
                            {
                                img = item.Img;
                                break;
                            }
                        }
                    }
                }

                bool isReadOnly = false;

                MMProductionNormsInfo pn = (MMProductionNormsInfo)entity.MainObject;

                ICProductsController pCtrl = new ICProductsController();
                ICProductsInfo p = (ICProductsInfo)pCtrl.GetObjectByID(pn.FK_ICProductID);

                if (p.ICProductCheckCarcass && mainobject.MMProductionNormCarcassProccessStatus == Status.Approved.ToString())
                    isReadOnly = true;

                string info = "Mã hàng mẫu: " + CurrentCarcass.ICProductNo
                                + " - Mã Cụm & chi tiết: " + semiProduct.ICProductNo;
                if (GuiProcess == null)
                    GuiProcess = new guiProcess(info, semiProduct.ICProductID, img, isReadOnly, CurrentCarcass.ICProductID, 0, true, semiProduct.ICProductDetailID);
                else
                    GuiProcess.ReloadData(info, semiProduct.ICProductID, img, isReadOnly, CurrentCarcass.ICProductID, 0, true, semiProduct.ICProductDetailID);

                GuiProcess.Module = this;
                GuiProcess.isParent = false;
                if (GuiProcess.ShowDialog() != DialogResult.OK)
                    return;
            }
            else
            {
                MessageBox.Show("Vui lòng lưu danh sách Cụm & Chi tiết trước!"
                                , CommonLocalizedResources.MessageBoxDefaultCaption
                                , MessageBoxButtons.OK
                                , MessageBoxIcon.Information);
            }
        }

        public void ShowProcessSemiProduct(MMProductionNormItemsInfo pnItem)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainobject = (MMProductionNormsInfo)entity.MainObject;
            if (pnItem != null && mainobject != null)
            {
                ICProductsController productController = new ICProductsController();
                ICProductsInfo semiProduct = (ICProductsInfo)productController.GetObjectByID(pnItem.FK_ICProductID);
                ICProductsInfo p = (ICProductsInfo)productController.GetObjectByID(mainobject.FK_ICProductID);

                entity.ProductInProcessList.Clear();
                entity.ProductInProcessList.Add(semiProduct);

                int productionNormCarcassID = BOSApp.UsingCarCass && !CurrentCarcass.ICProductCheckCarcass ? mainobject.FK_MMProductionNormCarcassID : mainobject.MMProductionNormID;
                ICProductItemProcesssController processCtrl = new ICProductItemProcesssController();
                List<ICProductItemProcesssInfo> lstProcess = processCtrl.GetProcessByProductionNormID(mainobject.MMProductionNormID, semiProduct.ICProductID);
                entity.PIProcessList.Invalidate(lstProcess);

                ImageWithName iwn = CurrentImageList.FirstOrDefault(t => t.ImgName == semiProduct.ICProductImageName);
                Image img = null;
                if (iwn != null)
                {
                    img = iwn.Img;
                }
                else
                {
                    foreach (ImageWithName item in CurrentImageList)
                    {
                        string[] nameSplit = item.ImgName.Split('.');
                        if (nameSplit != null)
                        {
                            string name = string.Empty;

                            for (int i = 0; i < nameSplit.Length - 1; i++)
                            {
                                name += nameSplit[i];
                            }

                            if (name == semiProduct.ICProductCode)
                            {
                                img = item.Img;
                                break;
                            }
                        }
                    }
                }
                string info = "Mã thành phẩm: " + p.ICProductNo + " - Mã Cụm & chi tiết: " + semiProduct.ICProductNo;
                bool isReadOnly = false;
                if (p.ICProductCheckCarcass && mainobject.MMProductionNormCarcassProccessStatus == Status.Approved.ToString())
                    isReadOnly = true;
                //else if (mainobject.MMProductionNormColorProccessStatus == Status.Approved.ToString())
                //    isReadOnly = true;

                if (GuiProcess == null)
                    GuiProcess = new guiProcess(info, semiProduct.ICProductID, img, isReadOnly, mainobject.FK_ICProductID, 0, true, semiProduct.ICProductDetailID);
                else
                    GuiProcess.ReloadData(info, semiProduct.ICProductID, img, isReadOnly, mainobject.FK_ICProductID, 0, true, semiProduct.ICProductDetailID);

                GuiProcess.Module = this;
                if (GuiProcess.ShowDialog() != DialogResult.OK)
                    return;
            }
        }

        public void ShowProcessMainProduct()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainobject = (MMProductionNormsInfo)entity.MainObject;
            if (mainobject == null || (mainobject != null && mainobject.MMProductionNormID == 0))
                return;

            ICProductsController productController = new ICProductsController();
            ICProductsInfo p = (ICProductsInfo)productController.GetObjectByID(mainobject.FK_ICProductID);

            entity.ProductInProcessList.Clear();
            entity.ProductInProcessList.Add(p);

            int productionNormCarcassID = BOSApp.UsingCarCass && !p.ICProductCheckCarcass ? mainobject.FK_MMProductionNormCarcassID : mainobject.MMProductionNormID;
            ICProductItemProcesssController processCtrl = new ICProductItemProcesssController();
            List<ICProductItemProcesssInfo> lstProcess = processCtrl.GetParentProcessByProductionNormID(productionNormCarcassID, p.ICProductID);
            entity.PIProcessList.Invalidate(lstProcess);
            ImageWithName iwn = CurrentImageList.FirstOrDefault(t => t.ImgName == p.ICProductImageName);
            Image img = null;
            if (iwn != null)
            {
                img = iwn.Img;
            }
            else
            {
                foreach (ImageWithName item in CurrentImageList)
                {
                    string[] nameSplit = item.ImgName.Split('.');
                    if (nameSplit != null)
                    {
                        string name = string.Empty;

                        for (int i = 0; i < nameSplit.Length - 1; i++)
                        {
                            name += nameSplit[i];
                        }

                        if (name == p.ICProductNo)
                        {
                            img = item.Img;
                            break;
                        }
                    }
                }
            }

            string info = "Mã thành phẩm: " + p.ICProductNo;
            bool isReadOnly = false;
            if (p.ICProductCheckCarcass && mainobject.MMProductionNormCarcassProccessStatus == Status.Approved.ToString())
                isReadOnly = true;

            if (GuiProcess == null)
                GuiProcess = new guiProcess(info, p.ICProductID, img, isReadOnly, mainobject.FK_ICProductID, 0, true, 0);
            else
                GuiProcess.ReloadData(info, p.ICProductID, img, isReadOnly, mainobject.FK_ICProductID, 0, true, 0);

            GuiProcess.Module = this;
            GuiProcess.isParent = true;
            if (GuiProcess.ShowDialog() != DialogResult.OK)
                return;
        }

        public void CopyProcess(ICProductsInfo carcass, int productID, int CurrentProductID, int ParentProductID, int ProducDetailID)
        {
            if (carcass == null)
                return;

            if (carcass.ICProductID == 0)
            {
                MessageBox.Show("Vui lòng chọn hàng mẫu để sao chép", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            ICProductsInfo parentInfo = BOSApp.GetProductFromCurrentProductList(CurrentProductID);
            if (parentInfo != null && productID == 0)
            {
                MessageBox.Show("Vui lòng chọn BTP để sao chép", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainobject = (MMProductionNormsInfo)entity.MainObject;
            ICProductItemProcesssController processCtrl = new ICProductItemProcesssController();
            MMProductionComplexityByOperationsController objProductionComplexityByOperationsController = new MMProductionComplexityByOperationsController();
            int productionNormCarcassID = BOSApp.UsingCarCass && !CurrentCarcass.ICProductCheckCarcass ? carcass.FK_MMProductionNormCarcassID : carcass.MMProductionNormID;

            List<ICProductItemProcesssInfo> lstProcess = processCtrl.GetProcessByProductionNormID(productionNormCarcassID, productID);
            entity.PIProcessList.Clear();

            ICProductItemProcesssInfo newP;
            lstProcess.ForEach(t =>
            {
                newP = new ICProductItemProcesssInfo();
                newP = (ICProductItemProcesssInfo)t.Clone();
                newP.ICProductItemProcessID = 0;
                newP.FK_ICProductID = CurrentProductID;
                newP.FK_MMProductionNormID = mainobject.MMProductionNormID;
                newP.FK_ICProductCarcassID = ParentProductID == 0 ? CurrentProductID : ParentProductID;
                newP.FK_ICProductDetailID = ProducDetailID;
                newP.ICProductItemProcessUnitTime = objProductionComplexityByOperationsController.GetUnitTimeByOperationAndProductionComplexityType(newP.FK_MMOperationID,
                                                            entity.ProductList.Where(o => o.ICProductID == newP.FK_ICProductID).Select(o => o.ICConfigProductionComplexityType).FirstOrDefault());
                entity.PIProcessList.Add(newP);
            });

            entity.PIProcessList.GridControl?.RefreshDataSource();
        }

        public List<MMOperationsInfo> GetProcessOperation()
        {
            List<MMOperationsInfo> operations = new List<MMOperationsInfo>();
            MMOperationsController operationCtrl = new MMOperationsController();
            List<MMOperationsInfo> lstOperation = new List<MMOperationsInfo>();
            if (BOSApp.LookupTables.ContainsKey("MMOperations"))
            {
                DataSet ds = (DataSet)BOSApp.LookupTables["MMOperations"];
                if (ds != null && ds.Tables.Count > 0)
                {
                    lstOperation = (List<MMOperationsInfo>)operationCtrl.GetListFromDataSet(ds);
                }
            }
            operations.Add(new MMOperationsInfo());
            operations.AddRange(lstOperation);

            return operations;
        }

        public void DeleteItemFromProductItemProcesssList()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            entity.PIProcessList.RemoveSelectedRowObjectFromList();
        }

        public void SaveProductProcess(int productID)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainobject = (MMProductionNormsInfo)entity.MainObject;
            entity.PIProcessList.EndCurrentEdit();
            if (entity.PIProcessList.Where(o => o.ICProductItemProcessForParentSyncCheck).Count() > 1)
            {
                BOSApp.ShowMessage("Quy trình có hơn một công đoạn sử dụng để kiểm tra đồng bộ chi tiết cha!");
                return;
            }
            List<ICProductItemProcesssInfo> orderList = entity.PIProcessList.OrderBy(t => t.ICProductItemProcessPeriod).ToList();
            int index = 1;
            foreach (ICProductItemProcesssInfo pip in orderList)
            {
                if (pip.ICProductItemProcessPeriod == 0)
                    pip.ICProductItemProcessPeriod = index;
                index++;
            }
            int countItem = entity.PIProcessList.Count();
            int countPerioditem = entity.PIProcessList.Select(o => o.ICProductItemProcessPeriod).Distinct().Count();
            if (countItem != countPerioditem)
            {
                BOSApp.ShowMessage("Thứ tự sản xuất không được trùng. Vui lòng kiểm tra lại!");
                return;
            }
            ICProductItemProcesssInfo endProcess = entity.PIProcessList.FirstOrDefault(p => p.ICProductItemProcessIsEndProcess == true);
            if (endProcess == null)
            {
                BOSApp.ShowMessage("Quy trình sản xuất chưa có công đoạn cuối. Vui lòng kiểm tra lại!");
                return;
            }
            if (entity.PIProcessList.Where(o => o.ICProductItemProcessUnitTime < 0).Count() > 0)
            {
                BOSApp.ShowMessage("Unit time (Phút) không hợp lệ, vui lòng kiểm tra lại!");
                return;
            }
            string productionComplexityType = entity.ProductInProcessList.Select(o => o.ICConfigProductionComplexityType).FirstOrDefault();
            if (entity.PIProcessList.Where(o => o.ICProductItemProcessUnitTime > 0).Count() > 0 && 
                string.IsNullOrWhiteSpace(productionComplexityType))
            {
                BOSApp.ShowMessage("Chưa có độ phức tạp sản xuất, Unit time (Phút) không hợp lệ vui lòng kiểm tra lại!");
                return;
            }    
            //if (endProcess.ICProductItemProcessInOutStockCheck == false)
            //{
            //    BOSApp.ShowMessage("Công đoạn cuối không phải là công đoạn Xuất/Nhập kho. Vui lòng kiểm tra lại!");
            //    return;
            //}
            int productionNormCarcassID = BOSApp.UsingCarCass && !CurrentCarcass.ICProductCheckCarcass ? mainobject.FK_MMProductionNormCarcassID : mainobject.MMProductionNormID;
            ICProductItemProcesssInfo filterO;
            foreach (ICProductItemProcesssInfo pip in entity.PIProcessList)
            {
                pip.FK_MMProductionNormID = productionNormCarcassID;
                filterO = orderList.FirstOrDefault(t => t.FK_MMOperationID == pip.FK_MMOperationID);
                if (filterO != null && pip.ICProductItemProcessPeriod == 0)
                {
                    pip.ICProductItemProcessPeriod = filterO.ICProductItemProcessPeriod;
                }
            }
            entity.PIProcessList.SaveItemObjects();
            entity.PIProcessList.GridControl?.RefreshDataSource();

            //ICProductsController pController = new ICProductsController();
            //entity.ProductList.ForEach(t =>
            //{
            //    if (t.ICProductID == productID && t.ICProductType == ProductType.SemiProduct.ToString())
            //    {
            //        pController.UpdateObject(t);
            //    }
            //});
            BOSApp.ShowMessage("Lưu thành công");
        }

        public void SetProductionNormItemRefID(int productionNormID, int refID, IBOSTreeList treeList)
        {
            if (treeList != null)
            {
                foreach (MMProductionNormItemsInfo item in treeList)
                {
                    item.FK_MMProductionNormItemRefID = refID;
                    item.FK_MMProductionNormID = productionNormID;
                    if (item.SubList != null && item.SubList.Any())
                    {
                        SetProductionNormItemRefID(productionNormID, refID, item.SubList);
                    }
                }
            }
        }

        public void ChooseProcess(int productID, int processID, List<MMOperationsInfo> operationList, int parentProductID, int ProducDetailID)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            ICProductsInfo mainObject = CurrentCarcass;

            entity.ProductList.ForEach(t =>
            {
                if (t.ICProductID == productID)
                {
                    t.FK_MMProcessID = processID;

                }
            });

            entity.PIProcessList.Clear();

            ICProductAttributeItemsController paiController = new ICProductAttributeItemsController();
            List<ICProductAttributeItemsInfo> lstPai = paiController.GetMMOperationsByProcessID(processID);

            if (lstPai != null
                && lstPai.Any())
            {
                MMOperationsInfo operation;
                ICProductItemProcesssInfo pip;
                foreach (ICProductAttributeItemsInfo pai in lstPai)
                {
                    pip = new ICProductItemProcesssInfo();
                    pip.FK_ICProductCarcassID = parentProductID;
                    pip.FK_ICProductID = productID;
                    pip.FK_MMOperationID = pai.FK_MMOperationID;
                    pip.FK_MMProcessID = pai.FK_MMProcessID;
                    pip.ICProductItemProcessPeriod = pai.ICProductAttributeItemPeriod;
                    pip.ICProductItemProcessIsPlan = pai.ICProductAttributeItemIsPlan;
                    pip.ICProductItemProcessSyncProductCheck = pai.ICProductAttributeItemSyncProductCheck;
                    pip.ICProductItemProcessForParentSyncCheck = pai.ICProductAttributeItemForParentSyncCheck;
                    pip.ICProductItemProcessInOutStockCheck = pai.ICProductAttributeItemInOutStockCheck;
                    pip.ICProductItemProcessIsOutSourcing = pai.ICProductAttributeItemIsOutSourcing;
                    pip.FK_MMOperationSynID = pai.FK_MMOperationSynID;
                    pip.FK_ICProductDetailID = ProducDetailID;
                    pip.ICProductItemProcessIsEndProcess = pai.ICProductAttributeItemIsEndProcess;
                    pip.ICProductItemProcessOperationNo = pai.MMOperationNo;
                    operation = operationList.FirstOrDefault(t => t.MMOperationID == pai.FK_MMOperationID);
                    if (operation != null)
                    {
                        pip.ICMachineGroup = pip.ICMachineGroup;
                        pip.ICProductItemProcessCapacity = operation.MMOperationCapacity;
                        pip.ICProductItemProcessIsBeginOperation = operation.MMOperationIsBeginOperation;
                    }
                    entity.PIProcessList.Add(pip);
                }
            }

            entity.PIProcessList.GridControl?.RefreshDataSource();
        }

        public void ChooseProcessOperation(int productID, int operationID, List<MMOperationsInfo> operationList, int ParentProductID, int ICProductDetailID)
        {
            if (operationID == 0)
            {
                MessageBox.Show("Vui lòng chọn công đoạn"
                                , CommonLocalizedResources.MessageBoxDefaultCaption
                                , MessageBoxButtons.OK
                                , MessageBoxIcon.Information);
                return;
            }

            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            ICProductsInfo mainObject = CurrentCarcass;
            MMProductionComplexityByOperationsController objProductionComplexityByOperationsController = new MMProductionComplexityByOperationsController();
            ICProductItemProcesssInfo processItem = entity.PIProcessList.FirstOrDefault(t => t.FK_MMOperationID == operationID);
            //if (processItem != null)
            //    return;
            processItem = new ICProductItemProcesssInfo();
            processItem.FK_ICProductCarcassID = ParentProductID;
            processItem.FK_ICProductID = productID;
            processItem.FK_MMOperationID = operationID;
            int maxIndex = 0;
            if (entity.PIProcessList != null
                && entity.PIProcessList.Count > 0)
            {
                maxIndex = entity.PIProcessList.Select(t => t.ICProductItemProcessPeriod).Max();
            }
            processItem.ICProductItemProcessPeriod = ++maxIndex;

            MMOperationsInfo operation = operationList.FirstOrDefault(t => t.MMOperationID == operationID);
            if (operation != null)
            {
                processItem.ICMachineGroup = operation.MMMachineGroupValue;
                processItem.ICProductItemProcessCapacity = operation.MMOperationCapacity;
                processItem.ICProductItemProcessInOutStockCheck = operation.MMOperationInOutStockCheck;
                processItem.ICProductItemProcessIsBeginOperation = operation.MMOperationIsBeginOperation;
                processItem.ICProductItemProcessIsPlan = operation.MMOperationIsPlan;
                processItem.ICProductItemProcessIsOutSourcing = operation.MMOperationIsOutSourcing;
                processItem.ICProductItemProcessSyncProductCheck = operation.MMOperationSyncProductCheck;
                processItem.ICProductItemProcessForParentSyncCheck = operation.MMOperationForParentSyncCheck;
                processItem.FK_MMOperationSynID = operation.FK_MMOperationSynID;
                processItem.FK_ICProductDetailID = ICProductDetailID;
                processItem.ICProductItemProcessOperationNo = operation.MMOperationNo;
            }
            processItem.ICProductItemProcessUnitTime = objProductionComplexityByOperationsController.GetUnitTimeByOperationAndProductionComplexityType(processItem.FK_MMOperationID,
                                                            entity.ProductList.Where(o => o.ICProductID == productID).Select(o => o.ICConfigProductionComplexityType).FirstOrDefault());
            entity.PIProcessList.Add(processItem);
            entity.PIProcessList.GridControl?.RefreshDataSource();
        }
        public void DefualtProcessOperation()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainObject = (MMProductionNormsInfo)entity.MainObject;
            if (mainObject.MMProductionNormWoodStatus != Status.Approved.ToString() && mainObject.MMProductionNormID > 0)
            {
                ICProductItemsController piController = new ICProductItemsController();
                List<ICProductItemsInfo> ProductItemCheckList = piController.GetProductItemByProductionNormID(mainObject.MMProductionNormID);
                if (ProductItemCheckList.Count() == 0)
                {
                    BOSApp.ShowMessage("Bạn chưa tạo cấu trúc định mức, vui lòng tạo cấu trúc trước!");
                    return;
                }
                if (BOSApp.ShowMessageYesNo("Việc cập nhật sẽ xoá tất cả QTSX cũ và thay bằng QTSX mặc định, bạn có chắc không?") == DialogResult.Yes)
                {
                    ICProductItemsController objProductItemsController = new ICProductItemsController();
                    objProductItemsController.GenerateDefualtProcessByNorm(mainObject.MMProductionNormID, BOSApp.CurrentUsersInfo.ADUserName);
                    entity.ProductList.ForEach(o =>
                    {
                        o.ProcessList?.Clear();
                    });
                    BOSApp.ShowMessage("Cập nhật thành công!");
                }
            }
            else
            {
                if (mainObject.MMProductionNormWoodStatus == Status.Approved.ToString())
                    BOSApp.ShowMessage("BOM này không thể thực hiện thay đổi vì đã duyệt!");
                return;
            }
        }

        public List<ICProductsInfo> GetSemiProductByCarcassID(int carcassID, int normID)
        {
            ICProductsController productController = new ICProductsController();
            List<ICProductsInfo> products = productController.GetSemiProductByParent(carcassID, normID);

            return products;
        }

        #region AttachFile
        private string DocumentFileName = string.Empty;

        private bool IsExistsImgName(ListView fld_lvImageList, string imgName)
        {
            foreach (ListViewItem item in fld_lvImageList.Items)
            {
                if (imgName == item.Text)
                {
                    return true;
                }
            }
            return false;
        }


        public List<ImageWithName> CurrentImageList;
        private ImageList CurrentControlImageList;
        private ListView CurrentControlListView;
        string CurrentImageCarcassNo;
        public void SetReferenceImageControl(ImageList imageList1, ListView fld_lvImageList)
        {
            if (CurrentImageCarcassNo != null && CurrentImageCarcassNo != CurrentCarcass.ICProductNo)
            {

                if (CurrentControlImageList == null
                        && CurrentControlListView == null)
                {
                    CurrentControlImageList = imageList1;
                    CurrentControlListView = fld_lvImageList;
                }
                CurrentImageCarcassNo = CurrentCarcass.ICProductNo;
            }
        }

        public string BrowseFile(bool isMultiSelect)
        {
            string ImageName = string.Empty;
            if (CurrentImageList == null)
            {
                CurrentImageList = new List<ImageWithName>();
            }

            OpenFileDialog openFileDialog1 = new OpenFileDialog();
            openFileDialog1.Title = "Open file";
            openFileDialog1.Filter = "Images (*.BMP;*.JPG;*.GIF;*.PNG)|*.BMP;*.JPG;*.GIF;*.PNG|" +
                                     "All files (*.*)|*.*";
            openFileDialog1.RestoreDirectory = true;
            openFileDialog1.Multiselect = isMultiSelect;
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                int index = 0;
                if (CurrentControlImageList.Images.Count > 0)
                {
                    index = CurrentControlImageList.Images.Count;
                }

                CurrentControlImageList.ColorDepth = ColorDepth.Depth32Bit;
                int count = 0;
                foreach (String file in openFileDialog1.FileNames)
                {
                    try
                    {
                        string imgName = openFileDialog1.SafeFileNames[count++];
                        //if (!IsExistsImgName(CurrentControlListView, imgName))
                        //{
                        //    Image img = Image.FromFile(file);
                        //    if (img != null)
                        //    {
                        //        CurrentControlImageList.Images.Add(img);
                        //        ImageWithName imgInfo = new ImageWithName(img, imgName, file);
                        //        CurrentImageList.Add(imgInfo);

                        //    }

                        //    ListViewItem item = new ListViewItem();
                        //    item.ImageIndex = index++;
                        //    item.Text = imgName;
                        //    CurrentControlListView.Items.Add(item);

                        //    ImageName = imgName;
                        //}

                        AddImageToListView(imgName, file);
                        ImageName = imgName;
                    }
                    catch
                    {
                        Console.WriteLine("This is not an image file");
                    }
                }



            }

            return ImageName;
        }

        public void AddImageToListView(string fileName, string filePath)
        {
            if (!IsExistsImgName(CurrentControlListView, fileName))
            {
                Image img = Image.FromFile(filePath);
                if (img != null)
                {
                    CurrentControlImageList.Images.Add(img);
                    ImageWithName imgInfo = new ImageWithName(img, fileName, filePath);
                    CurrentImageList.Add(imgInfo);

                }

                ListViewItem item = new ListViewItem();
                item.ImageIndex = CurrentControlImageList.Images.Count - 1;
                item.Text = fileName;
                CurrentControlListView.Items.Add(item);
            }
        }

        public void ShowZoomImg(string name)
        {
            ImageWithName imgInfo = CurrentImageList.FirstOrDefault(t => t.ImgName == name);
            if (imgInfo != null)
            {
                guiZoomImage zoomImage = new guiZoomImage(imgInfo.Img);
                zoomImage.ShowDialog();
            }
        }

        public void DeleteImg(int index, ImageList imageList1, ListView fld_lvImageList)
        {
            fld_lvImageList.Items.RemoveAt(index);
            fld_lvImageList.Refresh();
        }

        public void SaveImage(bool showMess)
        {
            if (CurrentImageList != null)
            {
                foreach (ImageWithName imgInfo in CurrentImageList)
                {
                    //if (IsExistsImgName(CurrentControlListView, imgInfo.ImgName))
                    //{
                    //    if (!string.IsNullOrEmpty(imgInfo.ImgPath))
                    //    {
                    //        BOSApp.UploadFileFTPImage(imgInfo.ImgPath, CurrentCarcass.ICProductNo, imgInfo.ImgName);
                    //    }
                    //}
                    //else
                    //{
                    //    BOSApp.DeleteFile(imgInfo.ImgName, CurrentCarcass.ICProductNo);
                    //}
                    UploadImageToFTPServer(imgInfo.ImgName, imgInfo.ImgPath, CurrentCarcass.ICProductNo);
                }
                if (showMess)
                {
                    MessageBox.Show("Lưu thành công", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }


        private void UploadImageToFTPServer(string fileName, string filePath, string ProductNo)
        {
            try
            {
                if (IsExistsImgName(CurrentControlListView, fileName))
                {
                    if (!string.IsNullOrEmpty(filePath))
                    {
                        BOSApp.UploadFileFTPImage(filePath, CurrentCarcass.ICProductNo, fileName);
                    }
                }
                else
                {
                    BOSApp.DeleteFile(fileName, CurrentCarcass.ICProductNo);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public void UploadImageFromPictureEditCtrl(string fileName, string filePath)
        {
            if (!string.IsNullOrEmpty(fileName) && !string.IsNullOrEmpty(filePath))
            {

                CarcassBOMEntities entity = CurrentModuleEntity as CarcassBOMEntities;
                if (entity.ProductInProcessList.Count > 0)
                {
                    ICProductsInfo product = entity.ProductInProcessList[0];
                    product.ICProductImageFile = filePath;
                    product.ICProductImageName = fileName;
                    AddImageToListView(fileName, filePath);
                    UploadImageToFTPServer(fileName, filePath, product.ICProductNo);

                    //update filename to productInfo
                    ICProductsController productController = new ICProductsController();
                    productController.UpdateObject(product);
                }
            }
        }
        #endregion
        public void getdataProductionNormItembysublist(IBOSTreeList sublist, List<MMProductionNormItemsInfo> productionNormItemList, int level, int carcassID)
        {
            ICProductItemMaterialsController objProductItemMaterialsController = new ICProductItemMaterialsController();
            foreach (MMProductionNormItemsInfo item in sublist)
            {
                if (level == 0)
                {
                    item.STT = (productionNormItemList.Where(a => a.level == 0).Count() + 1).ToString();
                }
                item.stt = productionNormItemList.Count() + 1;
                item.level = level;
                item.DetailType = DetailType.Cum;
                productionNormItemList.Add(item);
                if (item.SubList != null && item.SubList.Count > 0 && item.level == 0)
                {
                    getdataProductionNormItembysublist(item.SubList, productionNormItemList, level + 1, carcassID);
                }
                else
                {
                    int levelNL = level + 1;
                    List<ICProductItemMaterialsInfo> pdMaterialsList = objProductItemMaterialsController.GetByCarcassAndProductID(carcassID, item.FK_ICProductID);
                    foreach (ICProductItemMaterialsInfo ProductItemMaterialsInfo in pdMaterialsList)
                    {
                        MMProductionNormItemsInfo objProductionNormItemsInfo = new MMProductionNormItemsInfo();
                        objProductionNormItemsInfo.MMProductionNormItemQuantity = ProductItemMaterialsInfo.ICProductItemMaterialWoodQty;
                        objProductionNormItemsInfo.HeightNL = ProductItemMaterialsInfo.ICProductItemMaterialHeigth;
                        objProductionNormItemsInfo.LengthNL = ProductItemMaterialsInfo.ICProductItemMaterialLength;
                        objProductionNormItemsInfo.WithNL = ProductItemMaterialsInfo.ICProductItemMaterialWidth;
                        ICProductsForViewInfo objProductsInfo = BOSApp.CurrentProductList.FirstOrDefault(a => a.ICProductID == ProductItemMaterialsInfo.FK_ICProductMaterialID);
                        if (objProductsInfo != null)
                        {
                            objProductionNormItemsInfo.MMProductionNormItemNo = objProductsInfo.ICProductNo;
                            objProductionNormItemsInfo.MMProductionNormItemProductName = objProductsInfo.ICProductDesc;
                        }
                        objProductionNormItemsInfo.stt = productionNormItemList.Count() + 1;
                        objProductionNormItemsInfo.level = levelNL;
                        objProductionNormItemsInfo.DetailType = DetailType.NL;
                        productionNormItemList.Add(objProductionNormItemsInfo);
                    }
                }
                if (item.SubList != null && item.SubList.Count > 0 && item.level == 0)
                {
                    foreach (MMProductionNormItemsInfo item1 in item.SubList)
                    {
                        if (item1.SubList != null && item1.SubList.Count() > 0)
                        {
                            getdataProductionNormItembysublist1(item1, productionNormItemList, 0, carcassID);
                        }
                    }
                }
            }
        }
        public void getdataProductionNormItembysublist1(MMProductionNormItemsInfo item, List<MMProductionNormItemsInfo> productionNormItemList, int level, int carcassID)
        {
            ICProductItemMaterialsController objProductItemMaterialsController = new ICProductItemMaterialsController();
            if (item != null)
            {
                MMProductionNormItemsInfo item1 = new MMProductionNormItemsInfo();
                BOSUtil.CopyObject(item, item1);
                if (level == 0)
                {
                    item1.STT = (productionNormItemList.Where(a => a.level == 0).Count() + 1).ToString();
                }
                item1.stt = productionNormItemList.Count() + 1;
                item1.level = level;
                item1.DetailType = DetailType.Cum;
                productionNormItemList.Add(item1);
                if (item.SubList != null && item.SubList.Count > 0 && item1.level == 0)
                {
                    getdataProductionNormItembysublist(item.SubList, productionNormItemList, level + 1, carcassID);
                }
                else
                {
                    int levelNL = level + 1;
                    List<ICProductItemMaterialsInfo> pdMaterialsList = objProductItemMaterialsController.GetByCarcassAndProductID(carcassID, item.FK_ICProductID);
                    foreach (ICProductItemMaterialsInfo ProductItemMaterialsInfo in pdMaterialsList)
                    {
                        MMProductionNormItemsInfo objProductionNormItemsInfo = new MMProductionNormItemsInfo();
                        objProductionNormItemsInfo.MMProductionNormItemQuantity = ProductItemMaterialsInfo.ICProductItemMaterialWoodQty;
                        objProductionNormItemsInfo.HeightNL = ProductItemMaterialsInfo.ICProductItemMaterialHeigth;
                        objProductionNormItemsInfo.LengthNL = ProductItemMaterialsInfo.ICProductItemMaterialLength;
                        objProductionNormItemsInfo.WithNL = ProductItemMaterialsInfo.ICProductItemMaterialWidth;
                        ICProductsForViewInfo objProductsInfo = BOSApp.CurrentProductList.FirstOrDefault(a => a.ICProductID == ProductItemMaterialsInfo.FK_ICProductMaterialID);
                        if (objProductsInfo != null)
                        {
                            objProductionNormItemsInfo.MMProductionNormItemNo = objProductsInfo.ICProductNo;
                            objProductionNormItemsInfo.MMProductionNormItemProductName = objProductsInfo.ICProductDesc;
                        }
                        objProductionNormItemsInfo.stt = productionNormItemList.Count() + 1;
                        objProductionNormItemsInfo.level = levelNL;
                        objProductionNormItemsInfo.DetailType = DetailType.NL;
                        productionNormItemList.Add(objProductionNormItemsInfo);
                    }
                }
                if (item.SubList != null && item.SubList.Count > 0 && item1.level == 0)
                {
                    foreach (MMProductionNormItemsInfo item2 in item.SubList)
                    {
                        if (item2.SubList != null && item2.SubList.Count() > 0)
                        {
                            getdataProductionNormItembysublist1(item2, productionNormItemList, 0, carcassID);
                        }
                    }
                }
            }
        }

        public void ApproveBOM()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainObject = (MMProductionNormsInfo)entity.MainObject;

            if (mainObject != null
                    && mainObject.MMProductionNormID > 0)
            {
                mainObject.MMProductionNormStatus = ProductionNormStatus.Approved.ToString();
                entity.UpdateMainObject();
                entity.UpdateMainObjectBindingSource();
            }

            //InvalidateButton();
            //ValidatePaintAndPackagingControl(mainObject);
            SetControlEnable();
        }

        public void EditBOM()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainObject = (MMProductionNormsInfo)entity.MainObject;

            if (mainObject != null
                    && mainObject.MMProductionNormID > 0)
            {
                if (mainObject.MMProductionNormStatus == ProductionNormStatus.Approved.ToString())
                {
                    mainObject.MMProductionNormStatus = ProductionNormStatus.Edit.ToString();
                    entity.UpdateMainObject();
                    entity.UpdateMainObjectBindingSource();
                }
            }

            //InvalidateButton();
            //ValidatePaintAndPackagingControl(mainObject);
            SetControlEnable();
        }

        public bool IsPaintProcessNode()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormItemsInfo objPaintItemsInfo = (MMProductionNormItemsInfo)entity.ProductionNormItemPaintList.CurrentObject;
            if (objPaintItemsInfo != null && objPaintItemsInfo.MMProductionNormItemGroup != ProductType.IngredientPaint.ToString())
            {
                return true;
            }
            return false;
        }
        public bool IsPaintProcessNodePopUp()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormItemsInfo objPaintItemsInfo = (MMProductionNormItemsInfo)entity.ProductionNormItemPaintPopUpList.CurrentObject;
            if (objPaintItemsInfo != null && objPaintItemsInfo.MMProductionNormItemGroup != ProductType.IngredientPaint.ToString())
            {
                return true;
            }
            return false;
        }


        public DataTable GetAPSupplier()
        {
            APSuppliersController objSuppliersController = new APSuppliersController();
            DataSet ds = new DataSet();
            if (BOSApp.LookupTables.ContainsKey(TableName.ICStocksTableName))
                ds = BOSApp.LookupTables[TableName.ICStocksTableName] as DataSet;
            else
                ds = objSuppliersController.GetAllSuppliersForLookupControl();

            DataTable dt = new DataTable();
            if (ds != null)
                dt = ds.Tables[0];
            return dt;
        }

        public void AddPaintProcessesToPaintItemsList(int paintProcessesID, int operationID)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMPaintProcessesItemsController objPaintProcessesItemsController = new MMPaintProcessesItemsController();
            MMProductionNormsInfo objProductionNormsInfo = (MMProductionNormsInfo)entity.MainObject;
            if (paintProcessesID > 0
                && !IsExistPaintProcesses(paintProcessesID, entity.ProductionNormItemPaintList, true)
                )
            {

                List<MMPaintProcessesItemsInfo> paintProcessItemList = objPaintProcessesItemsController.GetItemForProductionNorm(paintProcessesID);

                if (paintProcessItemList != null && paintProcessItemList.Count > 0)
                {
                    List<MMPaintProcessesItemsInfo> stepList = paintProcessItemList.Where(i => i.MMPaintProcessesItemParentID == 0).ToList();
                    List<MMPaintProcessesItemsInfo> paintList = paintProcessItemList.Where(i => i.MMPaintProcessesItemParentID > 0).ToList();
                    AddPaintProcesses(stepList, paintList, operationID, entity.ProductionNormItemPaintList, true);

                    entity.ProductionNormItemPaintList.TreeListControl.RefreshDataSource();
                    entity.ProductionNormItemPaintList.TreeListControl.BestFitColumns();
                    entity.ProductionNormItemPaintList.TreeListControl.ExpandAll();
                }

            }
        }

        public void AddPaintProcessesToPaintItemPopUpsList(int paintProcessesID, int operationID)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMPaintProcessesItemsController objPaintProcessesItemsController = new MMPaintProcessesItemsController();
            MMProductionNormsInfo objProductionNormsInfo = (MMProductionNormsInfo)entity.MainObject;
            if (paintProcessesID > 0 && !IsExistPaintProcesses(paintProcessesID, entity.ProductionNormItemPaintPopUpList, false))
            {

                List<MMPaintProcessesItemsInfo> paintProcessItemList = objPaintProcessesItemsController.GetItemForProductionNorm(paintProcessesID);

                if (paintProcessItemList != null && paintProcessItemList.Count > 0)
                {
                    List<MMPaintProcessesItemsInfo> stepList = paintProcessItemList.Where(i => i.MMPaintProcessesItemParentID == 0).ToList();
                    List<MMPaintProcessesItemsInfo> paintList = paintProcessItemList.Where(i => i.MMPaintProcessesItemParentID > 0).ToList();
                    AddPaintProcesses(stepList, paintList, operationID, entity.ProductionNormItemPaintPopUpList, false);

                    entity.ProductionNormItemPaintPopUpList.TreeListControl.RefreshDataSource();
                    entity.ProductionNormItemPaintPopUpList.TreeListControl.BestFitColumns();
                    entity.ProductionNormItemPaintPopUpList.TreeListControl.ExpandAll();
                }

            }
        }

        public void AddPaintProcesses(List<MMPaintProcessesItemsInfo> stepList
                        , List<MMPaintProcessesItemsInfo> paintList
                        , int operationID
                        , IBOSTreeList treeList
                        , bool isMakeTotalNode)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo objProductionNormsInfo = (MMProductionNormsInfo)entity.MainObject;

            MMProductionNormItemsInfo totalNode = null;

            if (isMakeTotalNode)
            {
                foreach (MMProductionNormItemsInfo item in treeList)
                {
                    if (item.FK_MMProductionNormItemRefID == 0)
                    {
                        totalNode = item;
                    }
                }

                if (totalNode == null)
                {
                    totalNode = new MMProductionNormItemsInfo();
                    totalNode.SubList = new BOSTreeList();
                    totalNode.FK_MMProductionNormItemRefID = 0;
                    totalNode.MMProductionNormItemProductName = objProductionNormsInfo.MMProductionNormName;
                    treeList.Add(totalNode);
                }

            }

            MMProductionNormItemsInfo groupItem = new MMProductionNormItemsInfo();
            groupItem.SubList = new BOSTreeList();
            MMProductionNormItemsInfo productionNormItemStep;
            MMProductionNormItemsInfo productionNormItem;
            List<MMPaintProcessesItemsInfo> paintItemList;
            foreach (MMPaintProcessesItemsInfo step in stepList)
            {
                if (string.IsNullOrEmpty(groupItem.MMProductionNormItemProductName))
                {
                    groupItem.MMProductionNormItemProductName = step.MMPaintProcessesNo + " : " + step.MMPaintProcessesDesc;
                }

                productionNormItemStep = new MMProductionNormItemsInfo();
                productionNormItemStep.FK_MMOperationID = operationID;
                productionNormItemStep.FK_MMPaintProcessesID = step.FK_MMPaintProcessesID;
                productionNormItemStep.FK_MMPaintProcessesItemID = step.MMPaintProcessesItemID;
                productionNormItemStep.MMProductionNormItemProductName = step.MMPaintProcessesItemGroupName;
                productionNormItemStep.MMProductionNormItemPaintPerOne = step.MMPaintProcessesItemProductQty;
                productionNormItemStep.MMProductionNormItemProductDesc = step.MMPaintProcessesNo + " : " + step.MMPaintProcessesDesc;
                productionNormItemStep.MMProductionNormItemGroup = ProductType.IngredientPaint.ToString();
                productionNormItemStep.MMProductionNormItemPaintExecuteMethod = step.MMPaintProcessesItemExecuteMethod;
                productionNormItemStep.SubList = new BOSTreeList();
                paintItemList = paintList.Where(i => i.MMPaintProcessesItemParentID == step.MMPaintProcessesItemID).ToList();
                if (paintItemList != null && paintItemList.Count > 0)
                {
                    foreach (MMPaintProcessesItemsInfo item in paintItemList)
                    {
                        productionNormItem = new MMProductionNormItemsInfo();
                        productionNormItem.FK_MMOperationID = operationID;
                        if (operationID == 0)
                        {
                            ICProductsForViewInfo material = BOSApp.CurrentProductList.Where(m => m.ICProductID == item.FK_ICProductID).FirstOrDefault();
                            if (material != null)
                            {
                                MMOperationAndHardwareOperationTypesInfo dfOperation = DefualtAllocationOperationList.Where(d => d.MMHardwareOperationType == material.ICProductType).FirstOrDefault();
                                if (dfOperation != null) productionNormItem.FK_MMOperationID = dfOperation.FK_MMOperationID;
                                if (productionNormItem.FK_MMOperationID == 0)
                                {
                                    MMDefaultAllocationOperationConfigsController objDfOperationsController = new MMDefaultAllocationOperationConfigsController();
                                    MMDefaultAllocationOperationConfigsInfo dfOperationsInfo = (MMDefaultAllocationOperationConfigsInfo)objDfOperationsController.GetOperationByDepartmentAndProductGroup(material.FK_ICDepartmentID, material.FK_ICProductGroupID);
                                    if (dfOperationsInfo != null) productionNormItem.FK_MMOperationID = dfOperationsInfo.FK_MMOperationID;
                                }
                            }
                        }
                        SetProductionNormItemInfoFromPaintProcessesesItem(productionNormItem, item);
                        
                        List<MMPaintProcessesItemsInfo> paintItemChildList = paintList.Where(i => i.MMPaintProcessesItemParentID == item.MMPaintProcessesItemID).ToList();
                        if (paintItemChildList.Count() > 0)
                        {
                            productionNormItem.FK_MMPaintProcessesID = item.FK_MMPaintProcessesID;
                            productionNormItem.FK_MMPaintProcessesItemID = item.MMPaintProcessesItemID;
                            productionNormItem.MMProductionNormItemProductName = item.MMPaintProcessesItemGroupName;
                            productionNormItem.MMProductionNormItemPaintPerOne = item.MMPaintProcessesItemProductQty;
                            productionNormItem.MMProductionNormItemProductDesc = item.MMPaintProcessesNo + " : " + item.MMPaintProcessesDesc;
                            productionNormItem.MMProductionNormItemGroup = ProductType.IngredientPaint.ToString();
                            productionNormItem.MMProductionNormItemPaintExecuteMethod = item.MMPaintProcessesItemExecuteMethod;

                            productionNormItem.SubList = new BOSTreeList();
                            foreach (MMPaintProcessesItemsInfo itemC in paintItemChildList)
                            {
                                MMProductionNormItemsInfo productionNormItemChild = new MMProductionNormItemsInfo();
                                productionNormItemChild.FK_MMOperationID = operationID;
                                if (operationID == 0)
                                {
                                    ICProductsForViewInfo material = BOSApp.CurrentProductList.Where(m => m.ICProductID == itemC.FK_ICProductID).FirstOrDefault();
                                    if (material != null)
                                    {
                                        MMOperationAndHardwareOperationTypesInfo dfOperation = DefualtAllocationOperationList.Where(d => d.MMHardwareOperationType == material.ICProductType).FirstOrDefault();
                                        if (dfOperation != null) productionNormItemChild.FK_MMOperationID = dfOperation.FK_MMOperationID;
                                        if (productionNormItem.FK_MMOperationID == 0)
                                        {
                                            MMDefaultAllocationOperationConfigsController objDfOperationsController = new MMDefaultAllocationOperationConfigsController();
                                            MMDefaultAllocationOperationConfigsInfo dfOperationsInfo = (MMDefaultAllocationOperationConfigsInfo)objDfOperationsController.GetOperationByDepartmentAndProductGroup(material.FK_ICDepartmentID, material.FK_ICProductGroupID);
                                            if (dfOperationsInfo != null) productionNormItemChild.FK_MMOperationID = dfOperationsInfo.FK_MMOperationID;
                                        }
                                    }
                                }
                                SetProductionNormItemInfoFromPaintProcessesesItem(productionNormItemChild, itemC);
                                productionNormItem.SubList.Add(productionNormItemChild);
                            }
                        }
                        productionNormItemStep.SubList.Add(productionNormItem);
                    }
                }

                groupItem.SubList.Add(productionNormItemStep);
            }
            if (isMakeTotalNode)
            {
                totalNode.SubList.Add(groupItem);
            }
            else
            {
                treeList.Add(groupItem);
            }
        }

        public void SetProductionNormItemInfoFromPaintProcessesesItem(MMProductionNormItemsInfo item, MMPaintProcessesItemsInfo paintItem)
        {
            item.MMProductionNormItemGroup = ProductType.IngredientPaint.ToString();
            item.MMProductionNormItemProductDesc = paintItem.MMPaintProcessesItemDesc;
            item.MMProductionNormItemProductName = paintItem.MMPaintProcessesItemName;
            item.FK_MMPaintProcessesID = paintItem.FK_MMPaintProcessesID;
            item.FK_MMPaintProcessesItemID = paintItem.MMPaintProcessesItemID;
            item.FK_ICProductID = paintItem.FK_ICProductID;
            item.FK_ICProductGroupID = paintItem.FK_ICProductGroupID;
            item.FK_ICDepartmentID = paintItem.FK_ICDepartmentID;
            item.MMProductionNormItemNo = paintItem.MMPaintProcessesItemNo;
            item.MMProductionNormItemProductSupplierNumber = paintItem.ICProductSupplierNumber;
            item.MMProductionNormItemPaintMixRatio = paintItem.MMPaintProcessesItemMixRatio;
            item.MMProductionNormItemUnit = paintItem.ICMeasureUnitName;
            item.FK_ICMeasureUnitID = paintItem.FK_ICMeasureUnitID;
            item.FK_APSupplierID = paintItem.FK_APSupplierID;
            item.MMProductionNormItemProductSupplierName = paintItem.APSupplierName;
            item.MMProductionNormItemPaintExecuteMethod = paintItem.MMPaintProcessesItemExecuteMethod;

            item.MMProductionNormItemPaintPerOne = paintItem.MMPaintProcessesItemProductQty;

        }

        public bool IsExistPaintProcesses(int paintProcessesID, IBOSTreeList treeList, bool isTotalNode)
        {
            bool isExist = false;
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            if (isTotalNode)
            {
                MMProductionNormItemsInfo totalNode = null;

                foreach (MMProductionNormItemsInfo pnItem in treeList)
                {
                    if (pnItem.FK_MMProductionNormItemRefID == 0)
                    {
                        totalNode = pnItem;
                        break;
                    }
                }

                if (totalNode != null && totalNode.SubList != null && totalNode.SubList.Any())
                {

                    foreach (MMProductionNormItemsInfo pnItem in totalNode.SubList)
                    {
                        if (pnItem.SubList != null && pnItem.SubList.Count > 0)
                        {
                            foreach (MMProductionNormItemsInfo item in pnItem.SubList)
                            {
                                if (item.FK_MMPaintProcessesID == paintProcessesID)
                                {
                                    isExist = true;
                                    MessageBox.Show("Quy trình sơn : " + item.MMProductionNormItemProductDesc + " đã tồn tại!"
                                                    , CommonLocalizedResources.MessageBoxDefaultCaption
                                                    , MessageBoxButtons.OK
                                                    , MessageBoxIcon.Information);

                                }
                                break;
                            }
                            if (isExist)
                            {
                                break;
                            }
                        }
                    }
                }
            }
            else
            {
                foreach (MMProductionNormItemsInfo pnItem in treeList)
                {
                    if (pnItem.SubList != null && pnItem.SubList.Count > 0)
                    {
                        foreach (MMProductionNormItemsInfo item in pnItem.SubList)
                        {
                            if (item.FK_MMPaintProcessesID == paintProcessesID)
                            {
                                isExist = true;
                                MessageBox.Show("Quy trình sơn : " + item.MMProductionNormItemProductDesc + " đã tồn tại!"
                                                , CommonLocalizedResources.MessageBoxDefaultCaption
                                                , MessageBoxButtons.OK
                                                , MessageBoxIcon.Information);

                            }
                            break;
                        }
                        if (isExist)
                        {
                            break;
                        }
                    }
                }
            }
            return isExist;
        }

        public void AddPaintProcessesToPaintItemsList(int productID, decimal qty, int supplierid)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo objProductionNormsInfo = (MMProductionNormsInfo)entity.MainObject;
            ICProductsController objProductsController = new ICProductsController();
            APSuppliersController objSuppliersController = new APSuppliersController();
            MMProductionNormItemsInfo objProductionNormItemsInfo = new MMProductionNormItemsInfo();
            ICProductsInfo productObject = new ICProductsInfo();
            if (productID > 0)
            {
                productObject = (ICProductsInfo)objProductsController.GetObjectByID(productID);
                if (productObject != null)
                {

                    objProductionNormItemsInfo = SetValuePaintItemFromProduct(productObject);
                    objProductionNormItemsInfo.MMProductionNormItemGroup = ProductType.IngredientPaint.ToString();
                    UpdateValuePaintItems(objProductionNormItemsInfo);
                    objProductionNormItemsInfo.MMProductionNormItemProductDesc = productObject.ICProductDesc;
                    if (qty > 0)
                    {
                        if (objProductionNormsInfo.MMProductionNormTotalPaint > 0)
                        {
                            objProductionNormItemsInfo.MMProductionNormItemQuantity = qty * objProductionNormsInfo.MMProductionNormTotalPaint;
                        }
                        else
                        {
                            objProductionNormItemsInfo.MMProductionNormItemQuantity = qty;
                        }
                        objProductionNormItemsInfo.MMProductionNormItemQuantity = Math.Round(objProductionNormItemsInfo.MMProductionNormItemQuantity, 6, MidpointRounding.AwayFromZero);
                    }
                }
                if (supplierid > 0)
                {
                    APSuppliersInfo objSuppliersInfo = (APSuppliersInfo)objSuppliersController.GetObjectByID(supplierid);
                    if (objSuppliersInfo != null)
                    {
                        objProductionNormItemsInfo.MMProductionNormItemProductSupplierName = objSuppliersInfo.APSupplierName;
                        objProductionNormItemsInfo.FK_APSupplierID = objSuppliersInfo.APSupplierID;
                    }
                }
                entity.ProductionNormItemPaintList.Add(objProductionNormItemsInfo);
            }
            CalculateProductionNormItemPaint();
        }

        public void CalculateProductionNormItemPaint()
        {
            #region Controller
            ICProductsController objProductsController = new ICProductsController();

            //Công diện tích sơn
            MMFormulaConfigurationsController objFormulasController = new MMFormulaConfigurationsController();
            #endregion
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo objProductionNormsInfo = (MMProductionNormsInfo)entity.MainObject;
            if (entity.ProductionNormItemPaintList != null && entity.ProductionNormItemPaintList.Count > 0)
            {

                foreach (MMProductionNormItemsInfo item in entity.ProductionNormItemPaintList)
                {

                    #region Số lượng
                    item.MMProductionNormItemTotalQuantity = item.MMProductionNormItemQuantity;
                    item.MMProductionNormItemTotalQuantity = Math.Round(item.MMProductionNormItemTotalQuantity, 4, MidpointRounding.AwayFromZero);
                    #endregion

                    if (item.SubList != null && item.SubList.Count > 0)
                    {
                        foreach (MMProductionNormItemsInfo subItem in entity.ProductionNormItemPaintList)
                        {
                            decimal surFaceSub = CalSurFace(subItem);
                            decimal longEdgeSub = CalLongEdge(subItem);
                            decimal shortEdgeSub = CalShortEdge(subItem);

                            #region Số lượng
                            subItem.MMProductionNormItemTotalQuantity = subItem.MMProductionNormItemQuantity;
                            subItem.MMProductionNormItemTotalQuantity = Math.Round(subItem.MMProductionNormItemTotalQuantity, 4, MidpointRounding.AwayFromZero);
                            #endregion
                        }
                    }
                }
            }
        }

        public void CalculateProductionNormItemPaintPopUp()
        {
            #region Controller
            ICProductsController objProductsController = new ICProductsController();

            //Công diện tích sơn
            MMFormulaConfigurationsController objFormulasController = new MMFormulaConfigurationsController();
            #endregion
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo objProductionNormsInfo = (MMProductionNormsInfo)entity.MainObject;
            if (entity.ProductionNormItemPaintPopUpList != null && entity.ProductionNormItemPaintPopUpList.Count > 0)
            {

                foreach (MMProductionNormItemsInfo item in entity.ProductionNormItemPaintPopUpList)
                {

                    #region Số lượng
                    item.MMProductionNormItemTotalQuantity = item.MMProductionNormItemQuantity;
                    item.MMProductionNormItemTotalQuantity = Math.Round(item.MMProductionNormItemTotalQuantity, 4, MidpointRounding.AwayFromZero);
                    #endregion

                    if (item.SubList != null && item.SubList.Count > 0)
                    {
                        foreach (MMProductionNormItemsInfo subItem in entity.ProductionNormItemPaintPopUpList)
                        {
                            decimal surFaceSub = CalSurFace(subItem);
                            decimal longEdgeSub = CalLongEdge(subItem);
                            decimal shortEdgeSub = CalShortEdge(subItem);

                            #region Số lượng
                            subItem.MMProductionNormItemTotalQuantity = subItem.MMProductionNormItemQuantity;
                            subItem.MMProductionNormItemTotalQuantity = Math.Round(subItem.MMProductionNormItemTotalQuantity, 4, MidpointRounding.AwayFromZero);
                            #endregion
                        }
                    }
                }
            }
        }

        public MMProductionNormItemsInfo UpdateValuePaintItems(MMProductionNormItemsInfo objPaintItemsInfo)
        {
            int productQuantity = 1;
            objPaintItemsInfo.MMProductionNormItemTotalQuantity = objPaintItemsInfo.MMProductionNormItemQuantity * productQuantity;
            objPaintItemsInfo.MMProductionNormItemTotalQuantity = Math.Round(objPaintItemsInfo.MMProductionNormItemTotalQuantity, 4, MidpointRounding.AwayFromZero);
            return objPaintItemsInfo;
        }

        public MMProductionNormItemsInfo SetValuePaintItemFromProduct(ICProductsInfo objProductsInfo)
        {
            MMProductionNormItemsInfo objPaintItemsInfo = new MMProductionNormItemsInfo();
            MMProductionNormItemsInfo objToGetPaintItemsInfo = new MMProductionNormItemsInfo();
            APSuppliersController objSuppliersController = new APSuppliersController();
            APSuppliersInfo objSuppliersInfo = new APSuppliersInfo();
            objPaintItemsInfo.MMProductionNormItemProductDesc = objProductsInfo.ICProductDesc;
            objPaintItemsInfo.FK_ICProductID = objProductsInfo.ICProductID;
            objPaintItemsInfo.FK_ICProductGroupID = objProductsInfo.FK_ICProductGroupID;
            objPaintItemsInfo.FK_ICDepartmentID = objProductsInfo.FK_ICDepartmentID;
            objPaintItemsInfo.MMProductionNormItemProductName = objProductsInfo.ICProductName;
            objPaintItemsInfo.MMProductionNormItemNo = objProductsInfo.ICProductNo;
            objPaintItemsInfo.MMProductionNormItemProductSupplierNumber = objProductsInfo.ICProductSupplierNumber;
            objPaintItemsInfo.MMProductionNormItemProductSupplierNumber = objProductsInfo.ICProductSupplierNumber;
            objPaintItemsInfo.MMProductionNormItemNeededTime = DateTime.Now;

            //Get unit from Products
            ICMeasureUnitsController objMeasureUnitsController = new ICMeasureUnitsController();
            ICMeasureUnitsInfo objMeasureUnitsInfo = new ICMeasureUnitsInfo();
            objMeasureUnitsInfo = (ICMeasureUnitsInfo)objMeasureUnitsController.GetObjectByID(objProductsInfo.FK_ICProductBasicUnitID);
            if (objMeasureUnitsInfo != null)
            {
                objPaintItemsInfo.MMProductionNormItemUnit = objMeasureUnitsInfo.ICMeasureUnitName;
                objPaintItemsInfo.FK_ICMeasureUnitID = objMeasureUnitsInfo.ICMeasureUnitID;
            }

            if (objPaintItemsInfo.SubList == null)
                objPaintItemsInfo.SubList = new BOSTreeList();
            return objPaintItemsInfo;
        }

        public void AddPaint(int productID, int operationID)
        {
            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = BOSApp.GetProductFromCurrentProductList(productID);
            if (objProductsInfo != null)
            {
                AddItemToPaintItemsList(objProductsInfo, operationID);
            }
        }

        public void AddItemToPaintItemsList(ICProductsInfo productObject, int operationID)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            ICProductsController objProductsController = new ICProductsController();

            if (productObject != null)
            {
                MMProductionNormItemsInfo objProductionNormItemsInfo = new MMProductionNormItemsInfo();
                objProductionNormItemsInfo = SetValuePaintItemFromProduct(productObject);
                objProductionNormItemsInfo.MMProductionNormItemGroup = ProductType.IngredientPaint.ToString();
                objProductionNormItemsInfo.MMProductionNormItemPaintMixRatio = "100";
                objProductionNormItemsInfo.FK_MMOperationID = operationID;
                UpdateValuePaintItems(objProductionNormItemsInfo);
                if (objProductionNormItemsInfo.FK_MMOperationID == 0)
                {
                    ICProductsForViewInfo material = BOSApp.CurrentProductList.Where(m => m.ICProductID == objProductionNormItemsInfo.FK_ICProductID).FirstOrDefault();
                    if (material != null)
                    {
                        MMOperationAndHardwareOperationTypesInfo dfOperation
                            = DefualtAllocationOperationList.Where(d => d.MMHardwareOperationType == material.ICProductType).FirstOrDefault();
                        if (dfOperation != null) objProductionNormItemsInfo.FK_MMOperationID = dfOperation.FK_MMOperationID;
                        if (objProductionNormItemsInfo.FK_MMOperationID == 0)
                        {
                            MMDefaultAllocationOperationConfigsController objDfOperationsController = new MMDefaultAllocationOperationConfigsController();
                            MMDefaultAllocationOperationConfigsInfo dfOperationsInfo = (MMDefaultAllocationOperationConfigsInfo)objDfOperationsController.GetOperationByDepartmentAndProductGroup(material.FK_ICDepartmentID, material.FK_ICProductGroupID);
                            if (dfOperationsInfo != null) objProductionNormItemsInfo.FK_MMOperationID = dfOperationsInfo.FK_MMOperationID;
                        }
                    }
                }
                entity.ProductionNormItemPaintList.Add(objProductionNormItemsInfo);
                entity.ProductionNormItemPaintList.TreeListControl.RefreshDataSource();
                entity.ProductionNormItemPaintList.TreeListControl.BestFitColumns();
                entity.ProductionNormItemPaintList.TreeListControl.ExpandAll();
            }


        }

        public void AddItemToPaintItemPopUpsList(ICProductsInfo productObject, int operationID)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            ICProductsController objProductsController = new ICProductsController();

            if (productObject != null)
            {
                MMProductionNormItemsInfo objProductionNormItemsInfo = new MMProductionNormItemsInfo();
                objProductionNormItemsInfo = SetValuePaintItemFromProduct(productObject);
                objProductionNormItemsInfo.MMProductionNormItemGroup = ProductType.IngredientPaint.ToString();
                objProductionNormItemsInfo.FK_MMOperationID = operationID;
                UpdateValuePaintItems(objProductionNormItemsInfo);
                entity.ProductionNormItemPaintPopUpList.Add(objProductionNormItemsInfo);
                entity.ProductionNormItemPaintPopUpList.TreeListControl.RefreshDataSource();
                entity.ProductionNormItemPaintPopUpList.TreeListControl.BestFitColumns();
                entity.ProductionNormItemPaintPopUpList.TreeListControl.ExpandAll();
            }


        }

        public void ChangeItemPaint()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormItemsInfo objPaintItemsInfo = (MMProductionNormItemsInfo)entity.ProductionNormItemPaintList.CurrentObject;
            if (objPaintItemsInfo != null
                && objPaintItemsInfo.MMProductionNormItemGroup != ProductType.IngredientPaint.ToString())
            {
                SetPaintQty(objPaintItemsInfo, objPaintItemsInfo.MMProductionNormItemPaint);
                entity.ProductionNormItemPaintList.TreeListControl.RefreshDataSource();
                entity.ProductionNormItemPaintList.TreeListControl.BestFitColumns();
                entity.ProductionNormItemPaintList.TreeListControl.ExpandAll();
            }
        }

        public void SetPaintQty(MMProductionNormItemsInfo objPaintItemsInfo, decimal newPaint)
        {
            objPaintItemsInfo.MMProductionNormItemPaint = newPaint;
            objPaintItemsInfo.MMProductionNormItemTotalQuantity = objPaintItemsInfo.MMProductionNormItemPaint * objPaintItemsInfo.MMProductionNormItemPaintPerOne;
            objPaintItemsInfo.MMProductionNormItemQuantity = objPaintItemsInfo.MMProductionNormItemPaint * objPaintItemsInfo.MMProductionNormItemPaintPerOne;
            objPaintItemsInfo.MMProductionNormItemTotalQuantity = Math.Round(objPaintItemsInfo.MMProductionNormItemTotalQuantity, 4, MidpointRounding.AwayFromZero);
            objPaintItemsInfo.MMProductionNormItemQuantity = Math.Round(objPaintItemsInfo.MMProductionNormItemQuantity, 6, MidpointRounding.AwayFromZero);
            if (objPaintItemsInfo.SubList != null && objPaintItemsInfo.SubList.Count > 0)
            {
                foreach (MMProductionNormItemsInfo item in objPaintItemsInfo.SubList)
                {
                    SetPaintQty(item, newPaint);
                }
            }
        }

        public void ChangeItemFromPaintItemsList()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormItemsInfo objPaintItemsInfo = (MMProductionNormItemsInfo)entity.ProductionNormItemPaintList.CurrentObject;
            if (objPaintItemsInfo != null)
            {
                UpdateValuePaintItems(objPaintItemsInfo);
                CalculateProductionNormItemPaint();
            }


        }

        public void ChangeItemFromPaintItemPopUpsList()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormItemsInfo objPaintItemsInfo = (MMProductionNormItemsInfo)entity.ProductionNormItemPaintPopUpList.CurrentObject;
            if (objPaintItemsInfo != null)
            {
                UpdateValuePaintItems(objPaintItemsInfo);
                CalculateProductionNormItemPaintPopUp();
            }


        }

        public void RemoveSelectedItemFromProductionNormItemPaintPopUpList()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            if (entity.ProductionNormItemPaintPopUpList.TreeListControl != null)
            {
                DevExpress.XtraTreeList.Nodes.TreeListNode currentNode = entity.ProductionNormItemPaintPopUpList.TreeListControl.GetSelectedNode();
                if (currentNode != null)
                {
                    if (currentNode.Level == 0)
                        entity.ProductionNormItemPaintPopUpList.TreeListControl.Nodes.Remove(currentNode);
                    else
                        currentNode.ParentNode.Nodes.Remove(currentNode);
                }
                entity.ProductionNormItemPaintPopUpList.TreeListControl.RefreshDataSource();
                CalculateProductionNormItemPaintPopUp();

            }

        }

        public void RemoveSelectedItemFromProductionNormItemPaintList()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainObject = (MMProductionNormsInfo)entity.MainObject;
            if (mainObject.MMProductionNormPaintStatus != Status.Approved.ToString())
            {
                if (entity.ProductionNormItemPaintList.TreeListControl != null)
                {
                    DevExpress.XtraTreeList.Nodes.TreeListNode currentNode = entity.ProductionNormItemPaintList.TreeListControl.GetSelectedNode();
                    if (currentNode != null)
                    {
                        if (currentNode.Level == 0)
                            entity.ProductionNormItemPaintList.TreeListControl.Nodes.Remove(currentNode);
                        else
                            currentNode.ParentNode.Nodes.Remove(currentNode);
                    }
                    entity.ProductionNormItemPaintList.TreeListControl.RefreshDataSource();
                    CalculateProductionNormItemPaint();

                }
            }

        }

        public void SaveProductionNorm(MMProductionNormsInfo pn)
        {
            MMProductionNormsController pnController = new MMProductionNormsController();
            if (pn.MMProductionNormNo == NewNo)
            {
                pn.MMProductionNormNo = GetProductionNormNo(0, pn);
                pn.MMProductionNormOriginNo = pn.MMProductionNormNo;
            }

            if (pn.MMProductionNormID > 0)
            {
                pnController.UpdateObject(pn);
            }
            else
            {
                pnController.CreateObject(pn);
            }

        }

        public void SavePaint()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainobject = (MMProductionNormsInfo)entity.MainObject;

            if (mainobject == null)
                return;

            SaveProductionNorm(mainobject);
            RemoveAbstractNote(entity.ProductionNormItemPaintList);
            RemoveAbstractNote(entity.ProductionNormItemPaintList);
            foreach (MMProductionNormItemsInfo item in entity.ProductionNormItemPaintList)
            {
                item.FK_MMProductionNormID = mainobject.MMProductionNormID;
                SetProductionNormID(item.SubList, mainobject.MMProductionNormID);
            }
            entity.ProductionNormItemPaintList.SaveItemObjectsNoneReference();
            MessageBox.Show("Lưu thành công", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            entity.InvalidatePaint();
        }

        public void SavePackaging()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo pn = (MMProductionNormsInfo)entity.MainObject;
            SaveProductionNorm();
            if (pn.MMProductionNormID > 0)
            {
                foreach (MMProductionNormItemsInfo hw in entity.ProductionNormItemPackagingList)
                {
                    hw.FK_MMProductionNormID = pn.MMProductionNormID;
                    hw.MMProductionNormItemGroup = ProductType.IngredientPackaging.ToString();
                    SetProductionNormID(hw.SubList, pn.MMProductionNormID);
                }
                entity.ProductionNormItemPackagingList.SaveItemObjectsNoneReference();
                MessageBox.Show("Lưu thành công", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                MessageBox.Show("Vui lòng tạo BOM trước", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        public void RemoveAbstractNote(BOSTreeList treeList)
        {
            int count = treeList.Count;
            for (int index = count - 1; index >= 0; index--)
            {
                MMProductionNormItemsInfo item = treeList[index] as MMProductionNormItemsInfo;
                if (item != null && item.SubList != null && item.SubList.Count > 0)
                {
                    foreach (MMProductionNormItemsInfo subItem in item.SubList)
                    {
                        treeList.Add(subItem);
                    }
                    treeList.RemoveAt(index);
                }

            }
        }

        public void SaveProductPackagingDetail(MMProductionNormsInfo MainObject)
        {
            try
            {
                ICProductPackingDetailsController objProductPackingDetailsController = new ICProductPackingDetailsController();
                objProductPackingDetailsController.InsertDetialByProductionNormID(MainObject.MMProductionNormID, BOSApp.CurrentUsersInfo.ADUserName);
            }
            catch (Exception)
            {
                //BOSApp.ShowMessage("Lổi xãy ra khi lưu danh sách thùng Carton cho mã hàng liên quan:" + ex.Message.ToString());
            }
        }


        public void CalculateProductionNormItemPackaging(string editColumnName, MMProductionNormItemsInfo productionNormItem)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;

            if (editColumnName == "MMProductionNormItemProductInsideDimensionHeight"
                || editColumnName == "MMProductionNormItemProductInsideDimensionWidth"
                || editColumnName == "MMProductionNormItemProductInsideDimensionLength"
                || editColumnName == "FK_ICProdAttPackingMaterialSpecialityID")
            {

                if (productionNormItem != null)
                {

                    MMOverallInsideDimensionConfigsController objOverallInsideDimensionConfigsController = new MMOverallInsideDimensionConfigsController();
                    List<MMOverallInsideDimensionConfigsInfo> overallInsideDimensionConfigsList = new List<MMOverallInsideDimensionConfigsInfo>();
                    MMOverallInsideDimensionConfigsInfo objOverallInsideDimensionConfigsInfo = new MMOverallInsideDimensionConfigsInfo();


                    productionNormItem.MMProductionNormItemProductOverallDimensionHeight = 0;
                    productionNormItem.MMProductionNormItemProductOverallDimensionWidth = 0;
                    productionNormItem.MMProductionNormItemProductOverallDimensionLength = 0;
                    if (productionNormItem.FK_ICProdAttPackingMaterialSpecialityID > 0)
                    {
                        #region Height
                        overallInsideDimensionConfigsList
                            = objOverallInsideDimensionConfigsController.GetConfigByAttributeIDAndType(productionNormItem.FK_ICProdAttPackingMaterialSpecialityID, OverallInsideDimensionConfigType.Height.ToString(), productionNormItem.FK_ICProductGroupID);
                        objOverallInsideDimensionConfigsInfo = overallInsideDimensionConfigsList.FirstOrDefault();
                        if (objOverallInsideDimensionConfigsInfo != null)
                        {
                            productionNormItem.MMProductionNormItemProductOverallDimensionHeight = CalculateOverallDimension(objOverallInsideDimensionConfigsInfo,
                                                                                                               productionNormItem.MMProductionNormItemProductInsideDimensionHeight);
                        }
                        else
                            productionNormItem.MMProductionNormItemProductOverallDimensionHeight = 0;
                        #endregion
                        #region Width
                        overallInsideDimensionConfigsList
                            = objOverallInsideDimensionConfigsController.GetConfigByAttributeIDAndType(productionNormItem.FK_ICProdAttPackingMaterialSpecialityID, OverallInsideDimensionConfigType.Width.ToString(), productionNormItem.FK_ICProductGroupID);
                        objOverallInsideDimensionConfigsInfo = overallInsideDimensionConfigsList.FirstOrDefault();
                        if (objOverallInsideDimensionConfigsInfo != null)
                        {
                            productionNormItem.MMProductionNormItemProductOverallDimensionWidth = CalculateOverallDimension(objOverallInsideDimensionConfigsInfo,
                                                                                                               productionNormItem.MMProductionNormItemProductInsideDimensionWidth);
                        }
                        else
                            productionNormItem.MMProductionNormItemProductOverallDimensionWidth = 0;
                        #endregion
                        #region Length
                        overallInsideDimensionConfigsList
                            = objOverallInsideDimensionConfigsController.GetConfigByAttributeIDAndType(productionNormItem.FK_ICProdAttPackingMaterialSpecialityID, OverallInsideDimensionConfigType.Length.ToString(), productionNormItem.FK_ICProductGroupID);
                        objOverallInsideDimensionConfigsInfo = overallInsideDimensionConfigsList.FirstOrDefault();
                        if (objOverallInsideDimensionConfigsInfo != null)
                        {
                            productionNormItem.MMProductionNormItemProductOverallDimensionLength = CalculateOverallDimension(objOverallInsideDimensionConfigsInfo,
                                                                                                               productionNormItem.MMProductionNormItemProductInsideDimensionLength);
                        }
                        else
                            productionNormItem.MMProductionNormItemProductOverallDimensionLength = 0;
                        #endregion
                    }
                }

            }
        }

        public string GetOverallDimension(MMProductionNormItemsInfo item)
        {
            string result = string.Empty;
            result += (int)item.MMProductionNormItemProductOverallDimensionLength + "x";
            result += (int)item.MMProductionNormItemProductOverallDimensionWidth + "x";
            result += (int)item.MMProductionNormItemProductOverallDimensionHeight;
            return result;
        }
        public string GetInsideDimension(MMProductionNormItemsInfo item)
        {
            string result = string.Empty;
            result += (int)item.MMProductionNormItemProductInsideDimensionLength + "x";
            result += (int)item.MMProductionNormItemProductInsideDimensionWidth + "x";
            result += (int)item.MMProductionNormItemProductInsideDimensionHeight;
            return result;
        }

        public decimal CalculateOverallDimension(MMOverallInsideDimensionConfigsInfo objOverallInsideDimensionConfigsInfo, decimal insideDimension)
        {
            decimal overallDimension = 0;
            if (insideDimension > 0)
            {
                int value = objOverallInsideDimensionConfigsInfo.MMOverallInsideDimensionConfigOperationValue;
                if (objOverallInsideDimensionConfigsInfo.MMOverallInsideDimensionConfigOperationType == OperationType.Plus.ToString())
                {
                    overallDimension = insideDimension + value;
                }
                else if (objOverallInsideDimensionConfigsInfo.MMOverallInsideDimensionConfigOperationType == OperationType.Minus.ToString())
                {
                    overallDimension = insideDimension - value;
                }
                else if (objOverallInsideDimensionConfigsInfo.MMOverallInsideDimensionConfigOperationType == OperationType.Multi.ToString())
                {
                    overallDimension = insideDimension * value;
                }
                else if (objOverallInsideDimensionConfigsInfo.MMOverallInsideDimensionConfigOperationType == OperationType.Split.ToString())
                {
                    if (value != 0)
                    {
                        overallDimension = insideDimension / value;
                    }
                }
            }
            return overallDimension;
        }

        public MMProductionNormItemsInfo SetValuePackagingItemFromNormProduct(ICPackagingNormItemsInfo objProductsInfo, string ProductName, MMProductionNormItemsInfo objPackagingItemsInfo)
        {
            objPackagingItemsInfo.FK_ICProductID = objProductsInfo.FK_ICProductID;
            objPackagingItemsInfo.MMProductionNormItemProductName = objProductsInfo.ICPackagingNormItemProductName;
            objPackagingItemsInfo.MMProductionNormItemNo = objProductsInfo.ICPackagingNormItemNo;
            objPackagingItemsInfo.MMProductionNormItemProductDesc = objProductsInfo.ICPackagingNormItemProductDesc.Trim();
            objPackagingItemsInfo.MMProductionNormItemProductSupplierNumber = objProductsInfo.ICProductSupplierNumber;
            objPackagingItemsInfo.MMProductionNormItemPackagingNW = objProductsInfo.ICPackagingNormItemPackagingNW;
            objPackagingItemsInfo.MMProductionNormItemPackagingGW = objProductsInfo.ICPackagingNormItemPackagingGW;
            objPackagingItemsInfo.MMProductionNormItemProductSizeAndPacking = objProductsInfo.ICPackagingNormItemProductSizeAndPacking;
            objPackagingItemsInfo.MMProductionNormItemComment = objProductsInfo.ICPackagingNormItemComment;
            objPackagingItemsInfo.MMProductionNormItemProductInsideDimensionLength = objProductsInfo.ICPackagingNormItemProductInsideDimensionLength;
            objPackagingItemsInfo.MMProductionNormItemProductInsideDimensionWidth = objProductsInfo.ICPackagingNormItemProductInsideDimensionWidth;
            objPackagingItemsInfo.MMProductionNormItemProductInsideDimensionHeight = objProductsInfo.ICPackagingNormItemProductInsideDimensionHeight;
            objPackagingItemsInfo.MMProductionNormItemProductOverallDimensionLength = objProductsInfo.ICPackagingNormItemProductOverallDimensionLength;
            objPackagingItemsInfo.MMProductionNormItemProductOverallDimensionWidth = objProductsInfo.ICPackagingNormItemProductOverallDimensionWidth;
            objPackagingItemsInfo.MMProductionNormItemProductOverallDimensionHeight = objProductsInfo.ICPackagingNormItemProductOverallDimensionHeight;
            objPackagingItemsInfo.FK_ICProdAttPackingMaterialSpecialityID = objProductsInfo.FK_ICProdAttPackingMaterialSpecialityID;
            objPackagingItemsInfo.FK_ICProdAttPackingMaterialSizeID = objProductsInfo.FK_ICProdAttPackingMaterialSizeID;
            objPackagingItemsInfo.FK_ICProdAttPackingMaterialWeightPerVolumeID = objProductsInfo.FK_ICProdAttPackingMaterialWeightPerVolumeID;
            objPackagingItemsInfo.MMProductionNormItemNeededTime = DateTime.Now;
            objPackagingItemsInfo.MMProductionNormItemParentOrderName = ProductName;
            objPackagingItemsInfo.FK_ICProductGroupID = objProductsInfo.FK_ICProductGroupID;
            objPackagingItemsInfo.FK_ICDepartmentID = objProductsInfo.FK_ICDepartmentID;
            objPackagingItemsInfo.MMProductionNormItemUnit = objProductsInfo.ICMeasureUnitName;
            objPackagingItemsInfo.FK_ICMeasureUnitID = objProductsInfo.FK_ICMeasureUnitID;
            if (objPackagingItemsInfo.SubList == null)
                objPackagingItemsInfo.SubList = new BOSTreeList();
            return objPackagingItemsInfo;
        }



        public MMProductionNormItemsInfo SetValuePackagingItemFromProduct(ICProductsInfo objProductsInfo, string ProductName)
        {
            MMProductionNormItemsInfo objPackagingItemsInfo = new MMProductionNormItemsInfo();
            MMProductionNormItemsInfo objToGetPackagingItemsInfo = new MMProductionNormItemsInfo();
            string heightOrThick = string.Empty;
            objPackagingItemsInfo.FK_ICProductID = objProductsInfo.ICProductID;
            objPackagingItemsInfo.MMProductionNormItemProductName = objProductsInfo.ICProductName;
            objPackagingItemsInfo.MMProductionNormItemNo = objProductsInfo.ICProductNo;
            objPackagingItemsInfo.MMProductionNormItemProductDesc = objProductsInfo.ICProductDesc.Trim();
            objPackagingItemsInfo.MMProductionNormItemProductSupplierNumber = objProductsInfo.ICProductSupplierNumber;
            objPackagingItemsInfo.MMProductionNormItemProductLength = objProductsInfo.ICProductLength;
            objPackagingItemsInfo.MMProductionNormItemProductWidth = objProductsInfo.ICProductWidth;
            objPackagingItemsInfo.MMProductionNormItemPackagingNW = objProductsInfo.ICProductNetWeight;
            objPackagingItemsInfo.MMProductionNormItemPackagingGW = objProductsInfo.ICProductGrossWeight;
            objPackagingItemsInfo.MMProductionNormItemProductInsideDimensionLength = objProductsInfo.ICProductInsideDimensionLength;
            objPackagingItemsInfo.MMProductionNormItemProductInsideDimensionWidth = objProductsInfo.ICProductInsideDimensionWidth;
            objPackagingItemsInfo.MMProductionNormItemProductInsideDimensionHeight = objProductsInfo.ICProductInsideDimensionHeight;
            objPackagingItemsInfo.MMProductionNormItemProductOverallDimensionLength = objProductsInfo.ICProductOverallDimensionLength;
            objPackagingItemsInfo.MMProductionNormItemProductOverallDimensionWidth = objProductsInfo.ICProductOverallDimensionWidth;
            objPackagingItemsInfo.MMProductionNormItemProductOverallDimensionHeight = objProductsInfo.ICProductOverallDimensionHeight;
            objPackagingItemsInfo.FK_ICProdAttPackingMaterialSpecialityID = objProductsInfo.FK_ICProdAttPackingMaterialSpecialityID;
            objPackagingItemsInfo.FK_ICProdAttPackingMaterialSizeID = objProductsInfo.FK_ICProdAttPackingMaterialSizeID;
            objPackagingItemsInfo.MMProductionNormItemNeededTime = DateTime.Now;
            objPackagingItemsInfo.MMProductionNormItemParentOrderName = ProductName;
            objPackagingItemsInfo.FK_ICProductGroupID = objProductsInfo.FK_ICProductGroupID;
            objPackagingItemsInfo.FK_ICDepartmentID = objProductsInfo.FK_ICDepartmentID;
            if (objProductsInfo.ICProductHeight != 0)
                objPackagingItemsInfo.MMProductionNormItemProductHeight = objProductsInfo.ICProductHeight;

            //Get unit from Products
            ICMeasureUnitsController objMeasureUnitsController = new ICMeasureUnitsController();
            ICMeasureUnitsInfo objMeasureUnitsInfo = new ICMeasureUnitsInfo();
            objMeasureUnitsInfo = (ICMeasureUnitsInfo)objMeasureUnitsController.GetObjectByID(objProductsInfo.FK_ICProductBasicUnitID);
            if (objMeasureUnitsInfo != null)
            {
                objPackagingItemsInfo.MMProductionNormItemUnit = objMeasureUnitsInfo.ICMeasureUnitName;
                objPackagingItemsInfo.FK_ICMeasureUnitID = objMeasureUnitsInfo.ICMeasureUnitID;
            }

            objPackagingItemsInfo.MMProductionNormItemProductDesc = objProductsInfo.ICProductDesc.Trim();
            //  objPackagingItemsInfo.MMProductionNormItemPackagingGW = objProductsInfo.ICProductGW.ToString();
            // objPackagingItemsInfo.MMProductionNormItemPackagingNW = objProductsInfo.ICProductNW.ToString();
            objPackagingItemsInfo.MMProductionNormItemProductSizeAndPacking = objProductsInfo.ICProductSizeAndSpecifiCations;
            //   objPackagingItemsInfo.MMProductionNormItemProductAttributeValue3 = objProductsInfo.ICProductOverallDimension;
            //objPackagingItemsInfo.MMProductionNormItemProductAttributeValue6 = objProductsInfo.ICProductInsideDimension;

            if (objPackagingItemsInfo.SubList == null)
                objPackagingItemsInfo.SubList = new BOSTreeList();
            return objPackagingItemsInfo;
        }

        public void SetDefaultPackagingDescription()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;

            if (entity.ProductionNormItemList != null && entity.ProductionNormItemPackagingList.Count > 0)
            {
                ICProductAttributesController objDepartmentAttributeValuesController = new ICProductAttributesController();
                foreach (MMProductionNormItemsInfo item in entity.ProductionNormItemPackagingList)
                {
                    item.MMProductionNormItemProductDesc = string.Empty;
                    if (!string.IsNullOrEmpty(item.MMProductionNormItemProductName))
                    {
                        item.MMProductionNormItemProductDesc += item.MMProductionNormItemProductName.Trim();
                    }
                    if (!(item.MMProductionNormItemProductInsideDimensionWidth == 0
                        && item.MMProductionNormItemProductInsideDimensionLength == 0
                        && item.MMProductionNormItemProductInsideDimensionHeight == 0))
                    {
                        if (!string.IsNullOrEmpty(item.MMProductionNormItemProductDesc))
                        {
                            item.MMProductionNormItemProductDesc += ", ";
                        }
                        item.MMProductionNormItemProductDesc += item.MMProductionNormItemProductInsideDimensionLength.ToString("n0").Trim()
                            + "x" + item.MMProductionNormItemProductInsideDimensionWidth.ToString("n0").Trim()
                            + "x" + item.MMProductionNormItemProductInsideDimensionHeight.ToString("n0").Trim();
                    }
                    if (!(item.MMProductionNormItemProductOverallDimensionWidth == 0
                        && item.MMProductionNormItemProductOverallDimensionLength == 0
                        && item.MMProductionNormItemProductOverallDimensionHeight == 0))
                    {
                        if (!string.IsNullOrEmpty(item.MMProductionNormItemProductDesc))
                        {
                            item.MMProductionNormItemProductDesc += ", ";
                        }
                        item.MMProductionNormItemProductDesc += item.MMProductionNormItemProductOverallDimensionLength.ToString("n0").Trim()
                            + "x" + item.MMProductionNormItemProductOverallDimensionWidth.ToString("n0").Trim()
                            + "x" + item.MMProductionNormItemProductOverallDimensionHeight.ToString("n0").Trim();
                    }
                    if (!string.IsNullOrEmpty(item.MMProductionNormItemProductSizeAndPacking))
                    {
                        if (!string.IsNullOrEmpty(item.MMProductionNormItemProductDesc))
                        {
                            item.MMProductionNormItemProductDesc += ", ";
                        }
                        item.MMProductionNormItemProductDesc += item.MMProductionNormItemProductSizeAndPacking.Trim();
                    }
                    if (item.FK_ICProdAttPackingMaterialSpecialityID > 0)
                    {
                        ICProductAttributesInfo objAttribute = (ICProductAttributesInfo)objDepartmentAttributeValuesController.GetObjectByID(item.FK_ICProdAttPackingMaterialSpecialityID);
                        if (objAttribute != null)
                        {
                            if (!string.IsNullOrEmpty(item.MMProductionNormItemProductDesc))
                            {
                                item.MMProductionNormItemProductDesc += ", ";
                            }
                            item.MMProductionNormItemProductDesc += objAttribute.ICProductAttributeValue.Trim();
                        }
                    }
                    if (item.FK_ICProdAttPackingMaterialWeightPerVolumeID > 0)
                    {
                        ICProductAttributesInfo objAttribute = (ICProductAttributesInfo)objDepartmentAttributeValuesController.GetObjectByID(item.FK_ICProdAttPackingMaterialWeightPerVolumeID);
                        if (objAttribute != null)
                        {
                            if (!string.IsNullOrEmpty(item.MMProductionNormItemProductDesc))
                            {
                                item.MMProductionNormItemProductDesc += ", ";
                            }
                            item.MMProductionNormItemProductDesc += objAttribute.ICProductAttributeValue.Trim();
                        }
                    }
                    if (item.FK_ICProdAttPackingMaterialSizeID > 0)
                    {

                        ICProductAttributesInfo objAttribute = (ICProductAttributesInfo)objDepartmentAttributeValuesController.GetObjectByID(item.FK_ICProdAttPackingMaterialSizeID);
                        if (objAttribute != null)
                        {
                            if (!string.IsNullOrEmpty(item.MMProductionNormItemProductDesc))
                            {
                                item.MMProductionNormItemProductDesc += ", ";
                            }
                            item.MMProductionNormItemProductDesc += objAttribute.ICProductAttributeValue.Trim();
                        }
                    }
                    if (!string.IsNullOrEmpty(item.MMProductionNormItemComment))
                    {
                        if (!string.IsNullOrEmpty(item.MMProductionNormItemProductDesc))
                        {
                            item.MMProductionNormItemProductDesc += ", ";
                        }
                        item.MMProductionNormItemProductDesc += item.MMProductionNormItemComment.Trim();
                    }
                    if (item.SubList != null)
                    {
                        foreach (MMProductionNormItemsInfo subItem in item.SubList)
                        {
                            subItem.MMProductionNormItemProductDesc = string.Empty;
                            if (!string.IsNullOrEmpty(subItem.MMProductionNormItemProductName))
                            {
                                subItem.MMProductionNormItemProductDesc += subItem.MMProductionNormItemProductName.Trim();
                            }
                            if (!(subItem.MMProductionNormItemProductInsideDimensionWidth == 0
                                && subItem.MMProductionNormItemProductInsideDimensionLength == 0
                                && subItem.MMProductionNormItemProductInsideDimensionHeight == 0))
                            {
                                if (!string.IsNullOrEmpty(subItem.MMProductionNormItemProductDesc))
                                {
                                    subItem.MMProductionNormItemProductDesc += ", ";
                                }
                                subItem.MMProductionNormItemProductDesc += subItem.MMProductionNormItemProductInsideDimensionLength.ToString("n0").Trim()
                                    + "x" + subItem.MMProductionNormItemProductInsideDimensionWidth.ToString("n0").Trim()
                                    + "x" + subItem.MMProductionNormItemProductInsideDimensionHeight.ToString("n0").Trim();
                            }
                            if (!(subItem.MMProductionNormItemProductOverallDimensionWidth == 0
                                && subItem.MMProductionNormItemProductOverallDimensionLength == 0
                                && subItem.MMProductionNormItemProductOverallDimensionHeight == 0))
                            {
                                if (!string.IsNullOrEmpty(subItem.MMProductionNormItemProductDesc))
                                {
                                    subItem.MMProductionNormItemProductDesc += ", ";
                                }
                                subItem.MMProductionNormItemProductDesc += subItem.MMProductionNormItemProductOverallDimensionLength.ToString("n0").Trim()
                                    + "x" + subItem.MMProductionNormItemProductOverallDimensionWidth.ToString("n0").Trim()
                                    + "x" + subItem.MMProductionNormItemProductOverallDimensionHeight.ToString("n0").Trim();
                            }
                            if (!string.IsNullOrEmpty(subItem.MMProductionNormItemProductSizeAndPacking))
                            {
                                if (!string.IsNullOrEmpty(subItem.MMProductionNormItemProductDesc))
                                {
                                    subItem.MMProductionNormItemProductDesc += ", ";
                                }
                                subItem.MMProductionNormItemProductDesc += subItem.MMProductionNormItemProductSizeAndPacking.Trim();
                            }
                            if (subItem.FK_ICProdAttPackingMaterialSpecialityID > 0)
                            {
                                ICProductAttributesInfo objAttribute = (ICProductAttributesInfo)objDepartmentAttributeValuesController.GetObjectByID(subItem.FK_ICProdAttPackingMaterialSpecialityID);
                                if (objAttribute != null)
                                {
                                    if (!string.IsNullOrEmpty(subItem.MMProductionNormItemProductDesc))
                                    {
                                        subItem.MMProductionNormItemProductDesc += ", ";
                                    }
                                    subItem.MMProductionNormItemProductDesc += objAttribute.ICProductAttributeValue.Trim();
                                }
                            }
                            if (subItem.FK_ICProdAttPackingMaterialWeightPerVolumeID > 0)
                            {
                                ICProductAttributesInfo objAttribute = (ICProductAttributesInfo)objDepartmentAttributeValuesController.GetObjectByID(subItem.FK_ICProdAttPackingMaterialWeightPerVolumeID);
                                if (objAttribute != null)
                                {
                                    if (!string.IsNullOrEmpty(subItem.MMProductionNormItemProductDesc))
                                    {
                                        subItem.MMProductionNormItemProductDesc += ", ";
                                    }
                                    subItem.MMProductionNormItemProductDesc += objAttribute.ICProductAttributeValue.Trim();
                                }
                            }
                            if (subItem.FK_ICProdAttPackingMaterialSizeID > 0)
                            {

                                ICProductAttributesInfo objAttribute = (ICProductAttributesInfo)objDepartmentAttributeValuesController.GetObjectByID(subItem.FK_ICProdAttPackingMaterialSizeID);
                                if (objAttribute != null)
                                {
                                    if (!string.IsNullOrEmpty(subItem.MMProductionNormItemProductDesc))
                                    {
                                        subItem.MMProductionNormItemProductDesc += ", ";
                                    }
                                    subItem.MMProductionNormItemProductDesc += objAttribute.ICProductAttributeValue.Trim();
                                }
                            }
                            if (!string.IsNullOrEmpty(subItem.MMProductionNormItemComment))
                            {
                                if (!string.IsNullOrEmpty(subItem.MMProductionNormItemProductDesc))
                                {
                                    subItem.MMProductionNormItemProductDesc += ", ";
                                }
                                subItem.MMProductionNormItemProductDesc += subItem.MMProductionNormItemComment.Trim();
                            }
                        }
                    }
                }
                //entity.ProductionNormItemPackagingList.TreeListControl.RefreshDataSource();
                //entity.ProductionNormItemPackagingList.TreeListControl.ExpandAll();
                //entity.ProductionNormItemPackagingList.TreeListControl.BestFitColumns();
            }
        }

        public void RemoveSelectedItemFromProductionNormItemPackagingList(MMProductionNormItemsInfo item)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;

            //int abstractID = item.AbstractID;
            //int productionNormItemID = item.MMProductionNormItemID;

            //entity.ProductionNormItemPackagingList.RemoveSelectedRowObjectFromList();

            //for (int i = entity.ProductionNormItemPackagingList.Count - 1; i >= 0; i--)
            //{
            //    if (productionNormItemID > 0)
            //    {
            //        if (entity.ProductionNormItemPackagingList[i].FK_MMProductionNormItemRefID == productionNormItemID)
            //        {
            //            entity.ProductionNormItemPackagingList.RemoveAt(i);
            //        }
            //    }
            //    else
            //    {
            //        if (abstractID > 0)
            //        {
            //            if (entity.ProductionNormItemPackagingList[i].AbstractParentID == abstractID)
            //            {
            //                entity.ProductionNormItemPackagingList.RemoveAt(i);
            //            }
            //        }
            //    }
            //}

            entity.ProductionNormItemPackagingList.GridControl?.RefreshDataSource();
        }

        public void SetMarketDimensionForMaterial(MMProductionNormItemsInfo item)
        {
            MMPackingMaterialMarketDimensionsController pmmdController
                = new MMPackingMaterialMarketDimensionsController();

            List<MMPackingMaterialMarketDimensionsInfo> pmmdList
                = pmmdController.GetAllAliveMarketDimension();

            MMPackingMaterialMarketDimensionsInfo pmmd = pmmdList.FirstOrDefault(t => t.FK_ICProdAttPackingMaterialWeightPerVolumeID
                                                                        == item.FK_ICProdAttPackingMaterialWeightPerVolumeID);

            if (pmmd != null)
            {
                item.MMProductionNormItemProductMarketHeight = pmmd.MMPackingMaterialMarketDimensionProductHeight;
                item.MMProductionNormItemProductMarketLength = pmmd.MMPackingMaterialMarketDimensionProductLength;
                item.MMProductionNormItemProductMarketWidth = pmmd.MMPackingMaterialMarketDimensionProductWidth;
            }

        }

        public void AddItemToIngredientPackaging(int productID)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            ICProductsController objProductsController = new ICProductsController();
            MMProductionNormItemsInfo objProductionNormItemsInfo = new MMProductionNormItemsInfo();
            ICProductsInfo product = BOSApp.GetProductFromCurrentProductList(productID);
            int maxID = 0;
            int parentIndex = 0;
            if (entity.ProductionNormItemPackagingList?.Any() ?? false)
            {
                var itemList = entity.ProductionNormItemPackagingList.ToList().Select(o => (MMProductionNormItemsInfo)o).ToList();
                maxID = itemList.Select(o => o.MMProductionNormItemSortOrder).DefaultIfEmpty().Max() + 1;
                parentIndex = itemList.Count();
            }
            MMProductionNormItemsInfo item = new MMProductionNormItemsInfo();
            item.MMProductionNormItemGroup = ProductType.IngredientPackaging.ToString();
            item.FK_ICProductID = product.ICProductID;
            item.FK_ICProductGroupID = product.FK_ICProductGroupID;
            item.MMProductionNormItemNo = product.ICProductNo;
            item.MMProductionNormItemProductDesc = product.ICProductDesc;
            item.MMProductionNormItemProductName = product.ICProductName;
            item.MMProductionNormItemProductSizeAndPacking = product.ICProductSizeAndSpecifiCations;
            item.MMProductionNormItemProductSupplierNumber = product.ICProductSupplierNumber;
            item.MMProductionNormItemProductInsideDimensionLength = product.ICProductInsideDimensionLength;
            item.MMProductionNormItemProductInsideDimensionWidth = product.ICProductInsideDimensionWidth;
            item.MMProductionNormItemProductInsideDimensionHeight = product.ICProductInsideDimensionHeight;
            item.MMProductionNormItemProductOverallDimensionLength = product.ICProductOverallDimensionLength;
            item.MMProductionNormItemProductOverallDimensionWidth = product.ICProductOverallDimensionWidth;
            item.MMProductionNormItemProductOverallDimensionHeight = product.ICProductOverallDimensionHeight;
            item.FK_ICProdAttPackingMaterialSpecialityID = product.FK_ICProdAttPackingMaterialSpecialityID;
            item.FK_ICProdAttPackingMaterialSizeID = product.FK_ICProdAttPackingMaterialSizeID;
            item.FK_ICProdAttPackingMaterialWeightPerVolumeID = product.FK_ICProdAttPackingMaterialWeightPerVolumeID;
            item.MMProductionNormItemPackagingNW = product.ICProductNetWeight;
            item.MMProductionNormItemPackagingGW = product.ICProductGrossWeight;
            item.MMProductionNormItemUnit = product.ICMeasureUnitName;
            item.FK_ICMeasureUnitID = product.FK_ICProductBasicUnitID;
            item.AbstractID = ++maxID;
            item.MMProductionNormItemSortOrder = ++parentIndex;
            item.MMProductionNormItemSortOrderString = parentIndex.ToString();
            int parentAbstractID = item.AbstractID;
            if (item.FK_MMOperationID == 0)
            {
                ICProductsForViewInfo material = BOSApp.CurrentProductList.Where(m => m.ICProductID == item.FK_ICProductID).FirstOrDefault();
                if (material != null)
                {
                    MMOperationAndHardwareOperationTypesInfo dfOperation
                        = DefualtAllocationOperationList.Where(d => d.MMHardwareOperationType == material.ICProductType).FirstOrDefault();
                    if (dfOperation != null) item.FK_MMOperationID = dfOperation.FK_MMOperationID;
                    if (objProductionNormItemsInfo.FK_MMOperationID == 0)
                    {
                        MMDefaultAllocationOperationConfigsController objDfOperationsController = new MMDefaultAllocationOperationConfigsController();
                        MMDefaultAllocationOperationConfigsInfo dfOperationsInfo = (MMDefaultAllocationOperationConfigsInfo)objDfOperationsController.GetOperationByDepartmentAndProductGroup(material.FK_ICDepartmentID, material.FK_ICProductGroupID);
                        if (dfOperationsInfo != null) item.FK_MMOperationID = dfOperationsInfo.FK_MMOperationID;
                    }
                }
            }
            ICPackagingNormItemsController normCtrl = new ICPackagingNormItemsController();
            List<ICPackagingNormItemsInfo> normList = normCtrl.GetItemByParentProductID(productID);
            int childIndex = 0;
            var itemChirld = new MMProductionNormItemsInfo();
            foreach (ICPackagingNormItemsInfo norm in normList)
            {
                childIndex++;
                itemChirld = new MMProductionNormItemsInfo();
                itemChirld.MMProductionNormItemGroup = ProductType.IngredientPackaging.ToString();
                itemChirld.FK_ICProductID = norm.FK_ICProductID;
                itemChirld.MMProductionNormItemNo = norm.ICPackagingNormItemNo;
                itemChirld.MMProductionNormItemProductDesc = norm.ICPackagingNormItemProductDesc;
                itemChirld.MMProductionNormItemProductName = norm.ICPackagingNormItemProductName;
                itemChirld.FK_ICProdAttPackingMaterialSpecialityID = norm.FK_ICProdAttPackingMaterialSpecialityID;
                itemChirld.FK_ICProdAttPackingMaterialSizeID = norm.FK_ICProdAttPackingMaterialSizeID;
                itemChirld.FK_ICProdAttPackingMaterialWeightPerVolumeID = norm.FK_ICProdAttPackingMaterialWeightPerVolumeID;
                itemChirld.MMProductionNormItemProductSizeAndPacking = norm.ICPackagingNormItemProductSizeAndPacking;
                itemChirld.MMProductionNormItemProductInsideDimensionLength = norm.ICPackagingNormItemProductInsideDimensionLength;
                itemChirld.MMProductionNormItemProductInsideDimensionWidth = norm.ICPackagingNormItemProductInsideDimensionWidth;
                itemChirld.MMProductionNormItemProductInsideDimensionHeight = norm.ICPackagingNormItemProductInsideDimensionHeight;
                itemChirld.MMProductionNormItemProductOverallDimensionLength = norm.ICPackagingNormItemProductOverallDimensionLength;
                itemChirld.MMProductionNormItemProductOverallDimensionWidth = norm.ICPackagingNormItemProductOverallDimensionWidth;
                itemChirld.MMProductionNormItemProductOverallDimensionHeight = norm.ICPackagingNormItemProductOverallDimensionHeight;
                itemChirld.MMProductionNormItemPackagingNW = norm.ICPackagingNormItemPackagingNW;
                itemChirld.MMProductionNormItemPackagingGW = norm.ICPackagingNormItemPackagingGW;
                //Số lượng được định nghĩa cho 1 package PLDG
                //itemChirld.MMProductionNormItemTotalQuantity = norm.ICPackagingNormItemTotalQuantity;
                itemChirld.MMProductionNormItemQtyPerOne = norm.ICPackagingNormItemProductQty;
                itemChirld.FK_ICPackagingNormItemID = norm.ICPackagingNormItemID;
                itemChirld.MMProductionNormItemUnit = product.ICMeasureUnitName;
                itemChirld.ICMeasureUnitName = product.ICMeasureUnitName;
                itemChirld.FK_ICMeasureUnitID = norm.FK_ICMeasureUnitID;
                itemChirld.AbstractID = ++maxID;
                itemChirld.AbstractParentID = parentAbstractID;
                itemChirld.MMProductionNormItemSortOrder = childIndex;
                itemChirld.MMProductionNormItemSortOrderString = string.Format("{0}.{1}", parentIndex.ToString(), childIndex.ToString());
                if (item.FK_MMOperationID == 0)
                {
                    ICProductsForViewInfo packItem = BOSApp.CurrentProductList.Where(m => m.ICProductID == itemChirld.FK_ICProductID).FirstOrDefault();
                    if (packItem != null)
                    {
                        MMOperationAndHardwareOperationTypesInfo dfOperation
                            = DefualtAllocationOperationList.Where(d => d.MMHardwareOperationType == packItem.ICProductType).FirstOrDefault();
                        if (dfOperation != null) itemChirld.FK_MMOperationID = dfOperation.FK_MMOperationID;
                        if (objProductionNormItemsInfo.FK_MMOperationID == 0)
                        {
                            MMDefaultAllocationOperationConfigsController objDfOperationsController = new MMDefaultAllocationOperationConfigsController();
                            MMDefaultAllocationOperationConfigsInfo dfOperationsInfo = (MMDefaultAllocationOperationConfigsInfo)objDfOperationsController.GetOperationByDepartmentAndProductGroup(packItem.FK_ICDepartmentID, packItem.FK_ICProductGroupID);
                            if (dfOperationsInfo != null) itemChirld.FK_MMOperationID = dfOperationsInfo.FK_MMOperationID;
                        }
                    }
                }
                if (item.SubList == null)
                {
                    item.SubList = new BOSTreeList();
                    {
                        object objType = entity.ProductionNormItemPackagingList.GetType().InvokeMember("", BindingFlags.CreateInstance, null, null, null);
                        item.SubList = (BOSTreeList)objType;
                        item.SubList.InitBOSList(this.CurrentModuleEntity, "MMProductionNormItems", "MMProductionNormItems");
                    }
                }
                item.SubList.Add(itemChirld);
            }
            entity.ProductionNormItemPackagingList.Add(item);
            entity.ProductionNormItemPackagingList.TreeListControl.RefreshDataSource();
        }

        public void ChoosePackaging(MMProductionNormItemsInfo item)
        {
            if (item.MMProductionNormItemDiffFactor == 0)
            {
                item.MMProductionNormItemDiffFactor = 10; // default
            }
            ICProductsController productController = new ICProductsController();
            List<ICProductsInfo> productList = productController.GetProductMaterialForPackaging(item.FK_ICProdAttPackingMaterialSpecialityID
                                                                                                , item.FK_ICProdAttPackingMaterialSizeID
                                                                                                , item.FK_ICProdAttPackingMaterialWeightPerVolumeID
                                                                                                , item.MMProductionNormItemProductInsideDimensionLength
                                                                                                , item.MMProductionNormItemProductInsideDimensionWidth
                                                                                                , item.MMProductionNormItemProductInsideDimensionHeight);
            ICProductsInfo product = null;
            if (productList.Count == 1)
            {
                product = productList.FirstOrDefault();
                item.FK_ICProductID = product.ICProductID;
                item.MMProductionNormItemNo = product.ICProductNo;
                item.MMProductionNormItemProductDesc = product.ICProductDesc;
                item.MMProductionNormItemProductName = product.ICProductName;
                item.MMProductionNormItemProductSizeAndPacking = product.ICProductSizeAndSpecifiCations;
                item.MMProductionNormItemProductSupplierNumber = product.ICProductSupplierNumber;
                item.MMProductionNormItemProductLength = product.ICProductLength;
                item.MMProductionNormItemProductWidth = product.ICProductWidth;
                item.MMProductionNormItemPackagingNW = product.ICProductNetWeight;
                item.MMProductionNormItemPackagingGW = product.ICProductGrossWeight;
                item.MMProductionNormItemUnit = product.ICMeasureUnitName;
                item.FK_ICMeasureUnitID = product.FK_ICProductBasicUnitID;
            }
            else
            {



                guiChoosePackaging guiChoose = new guiChoosePackaging(item);
                guiChoose.Module = this;
                if (guiChoose.ShowDialog() == DialogResult.OK)
                {
                    product = guiChoose.Product;
                    item.FK_ICProductID = product.ICProductID;
                    item.FK_ICProductGroupID = product.FK_ICProductGroupID;
                    item.MMProductionNormItemNo = product.ICProductNo;
                    item.MMProductionNormItemDiffFactor = guiChoose.Factor;
                    item.FK_ICMeasureUnitID = product.FK_ICProductBasicUnitID;
                    if (string.IsNullOrEmpty(item.MMProductionNormItemProductDesc))
                    {
                        item.MMProductionNormItemProductDesc = product.ICProductDesc;
                    }

                    if (string.IsNullOrEmpty(item.MMProductionNormItemProductName))
                    {
                        item.MMProductionNormItemProductName = product.ICProductName;
                    }
                    //if (PackagingGridControl != null)
                    //{
                    //    ICProductsInfo matchProduct = PackagingGridControl.packagingList.FirstOrDefault(t => t.ICProductID == product.ICProductID);
                    //    if (matchProduct == null)
                    //    {
                    //        PackagingGridControl.packagingList.Add(product);
                    //    }
                    //}
                }
            }

        }

        public void SetProductForMaterial(string fieldName, MMProductionNormItemsInfo item)
        {
            if (fieldName == "FK_ICProdAttPackingMaterialSizeID"
                || fieldName == "FK_ICProdAttPackingMaterialWeightPerVolumeID")
            {

                ChoosePackaging(item);

            }
        }

        public void SetOperationForMaterial(MMProductionNormItemsInfo item)
        {
            if (item.FK_MMOperationID == 0)
            {
                if (OperationPackagingLookupEdit.EditValue != null)
                {
                    int operationID = 0;
                    int.TryParse(OperationPackagingLookupEdit.EditValue.ToString(), out operationID);

                    item.FK_MMOperationID = operationID;
                }
            }
        }

        public void SetPaintOperation(int operationID, IBOSTreeList treelist)
        {
            foreach (MMProductionNormItemsInfo item in treelist)
            {
                item.FK_MMOperationID = operationID;

                if (item.SubList != null && item.SubList.Any())
                {
                    SetPaintOperation(operationID, item.SubList);
                }
            }
        }

        public void SetPackagingOperation(int operationID, List<MMProductionNormItemsInfo> list)
        {
            foreach (MMProductionNormItemsInfo item in list)
            {
                item.FK_MMOperationID = operationID;
            }
        }


        public void ChangePaintOperation(int operationID)
        {
            if (BOSApp.ShowMessageYesNo("Bạn có thay đổi công đoạn cho các chi tiết sơn?") == DialogResult.Yes)
            {
                CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
                SetPaintOperation(operationID, entity.ProductionNormItemPaintList);

                entity.RefreshProductItemTreeListView(entity.ProductionNormItemPaintList);
            }
        }

        public void ChangePackagingOperation(int operationID)
        {
            if (BOSApp.ShowMessageYesNo("Bạn có thay đổi công đoạn cho các chi tiết PLĐG?") == DialogResult.Yes)
            {
                CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
                var list = new List<MMProductionNormItemsInfo>();
                entity.ProductionNormItemPackagingList.ConvertToList(list);
                SetPackagingOperation(operationID, list);
                entity.ProductionNormItemPackagingList.TreeListControl.RefreshDataSource();
            }
        }

        public void ChangeGeneralMaterialOperation(int operationID)
        {
            if (BOSApp.ShowMessageYesNo("Bạn có thay đổi công đoạn cho các chi tiết PLĐG?") == DialogResult.Yes)
            {
                CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
                SetPackagingOperation(operationID, entity.GeneralMaterialList);
                entity.GeneralMaterialList.GridControl?.RefreshDataSource();
            }
        }

        public Image GetCopiedProductImage(int carcassID, int productID)
        {

            if (carcassID == 0)
            {
                return null;
            }

            if (productID == 0)
            {
                return null;
            }
            ICProductsInfo carcass = BOSApp.GetProductFromCurrentProductList(carcassID);
            ICProductsInfo product = BOSApp.GetProductFromCurrentProductList(productID);
            if (carcass != null && product != null)
            {
                List<Image> images = new List<Image>();
                BOSApp.GetASpecificFileInFtpDirectory(carcass.ICProductNo, product.ICProductCode, images);
                if (images != null && images.Count > 0)
                {
                    return images[0];
                }

            }

            return null;
        }

        public bool IsHaveUnSaveNode(IBOSTreeList treeList)
        {
            foreach (MMProductionNormItemsInfo item in treeList)
            {
                if (item.MMProductionNormItemID == 0)
                {
                    return true;
                }
                else
                {
                    if (item.SubList != null && item.SubList.Any())
                    {
                        if (IsHaveUnSaveNode(item.SubList))
                        {
                            return true;
                        }
                    }
                }
            }

            return false;
        }

        public bool IsHaveUnSaveList(BOSList<MMProductionNormItemsInfo> lst)
        {
            MMProductionNormItemsInfo item = lst.FirstOrDefault(t => t.MMProductionNormItemID == 0);

            return (item != null);
        }

        public string GetCurrentTypeStatus(string type, MMProductionNormsInfo mainObject)
        {
            string status = string.Empty;


            switch (type)
            {
                case "CarcassProccessStatus":
                    status = mainObject.MMProductionNormCarcassProccessStatus;
                    break;
                case "ColorProccessStatus":
                    status = mainObject.MMProductionNormColorProccessStatus;
                    break;
                case "GeneralMaterialStatus":
                    status = mainObject.MMProductionNormGeneralMaterialStatus;
                    break;
                case "HardwareStatus":
                    status = mainObject.MMProductionNormHardwareStatus;
                    break;
                case "PackingMaterialStatus":
                    status = mainObject.MMProductionNormPackingMaterialStatus;
                    break;
                case "PaintStatus":
                    status = mainObject.MMProductionNormPaintStatus;
                    break;
                case "WoodStatus":
                    status = mainObject.MMProductionNormWoodStatus;
                    break;
                default:
                    break;
            }

            return status;
        }
        public bool GetUsingBOMStatus(string type)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainObject = (MMProductionNormsInfo)entity.MainObject;
            bool result = true;
            MMBatchProductsController bpCtrl = new MMBatchProductsController();
            List<MMBatchProductsInfo> BatchProductList = bpCtrl.GetBatchProductUsingProductionNormByType(mainObject.MMProductionNormID, type);
            if (BatchProductList.Count() > 0)
            {
                result = false;
                string mess = string.Join(";", BatchProductList.Select(b => b.MMBatchProductNo).Distinct().ToArray());
                BOSApp.ShowMessage("Định mức đã được sử dụng, bạn không thể thay đổi!" + Environment.NewLine + mess);
            }
            return result;
        }
        public bool GetBOMBlockStatus(string type)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainObject = (MMProductionNormsInfo)entity.MainObject;
            bool result = true;
            if (type == ProductionNormItemGroup.SemiProduct.ToString()
                && mainObject.MMProductionNormWoodStatus == Status.Approved.ToString())
                result = false;
            else if (type == ProductionNormItemGroup.Hardware.ToString()
                && mainObject.MMProductionNormHardwareStatus == Status.Approved.ToString())
                result = false;
            else if (type == ProductionNormItemGroup.IngredientPaint.ToString()
                && mainObject.MMProductionNormPaintStatus == Status.Approved.ToString())
                result = false;
            else if (type == ProductionNormItemGroup.IngredientPackaging.ToString()
                && mainObject.MMProductionNormPackingMaterialStatus == Status.Approved.ToString())
                result = false;
            else if (type == ProductionNormItemGroup.GeneralMaterial.ToString()
                && mainObject.MMProductionNormGeneralMaterialStatus == Status.Approved.ToString())
                result = false;
            if (!result)
            {
                BOSApp.ShowMessage("Định mức đã được duyệt, vui lòng chuyển sang trạng thái chỉnh sửa!");
            }
            return result;
        }
        public void CancelBOM()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainObject = (MMProductionNormsInfo)entity.MainObject;
            if (mainObject.MMProductionNormID > 0)
            {
                if (BOSApp.ShowMessageYesNo("Bạn chắc chắn muốn ngưng sử dụng bảng định mức này?") == DialogResult.No) return;

                if (mainObject.MMProductionNormStatus != Status.Canceled.ToString())
                {
                    mainObject.MMProductionNormStatus = Status.Canceled.ToString();
                    entity.UpdateMainObject();
                }
            }
        }

        public void UnCancelBOM()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainObject = (MMProductionNormsInfo)entity.MainObject;
            if (mainObject.MMProductionNormID > 0 && mainObject.MMProductionNormStatus == Status.Canceled.ToString())
            {
                if (BOSApp.ShowMessageYesNo("Bạn chắc chắn muốn mở sử dụng bảng định mức này?") != DialogResult.Yes)
                    return;

                mainObject.MMProductionNormStatus = mainObject.MMProductionNormWoodStatus == Status.Approved.ToString() ? Status.Approved.ToString() : Status.New.ToString();
                entity.UpdateMainObject();
            }
        }

        public void ApprovedAllBOM()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainObject = (MMProductionNormsInfo)entity.MainObject;
            if (mainObject.MMProductionNormID > 0 && mainObject.MMProductionNormStatus != Status.Canceled.ToString())
            {
                MMProductionNormsController pnController = new MMProductionNormsController();

                if (!CheckExitDefualtParent() || !CheckOperationMaterial(ProductionNormStatusType.WoodStatus.ToString())) return;
                if (entity.ProductionNormItemHardwareList.Count() > 0)
                {
                    if (IsHaveUnSaveNode(entity.ProductionNormItemHardwareList))
                    {
                        BOSApp.ShowMessage("Vui lòng lưu Định mức Hardware trước!");
                        return;
                    }
                    if (!CheckOperationMaterial(ProductionNormStatusType.HardwareStatus.ToString())) return;
                }
                if (entity.GeneralMaterialList.Count > 0)
                {
                    if (IsHaveUnSaveList(entity.GeneralMaterialList))
                    {
                        BOSApp.ShowMessage("Vui lòng lưu Định mức Vật tư khác trước!");
                        return;
                    }
                    if (!CheckOperationMaterial(ProductionNormStatusType.GeneralMaterialStatus.ToString())) return;
                }
                if (entity.ProductionNormItemPackagingList.Count > 0)
                {
                    if (IsHaveUnSaveNode(entity.ProductionNormItemPackagingList))
                    {
                        BOSApp.ShowMessage("Vui lòng lưu Định mức PLĐG trước!");
                        return;
                    }
                    if (!CheckOperationMaterial(ProductionNormStatusType.PackingMaterialStatus.ToString())) return;
                }
                if (entity.ProductionNormItemPaintList.Count > 0)
                {
                    if (!CheckOperationMaterial(ProductionNormStatusType.PaintStatus.ToString())) return;
                }

                if (entity.ProductionNormItemList.Count > 0)
                {
                    List<MMProductionNormItemsInfo> semiProductList = new List<MMProductionNormItemsInfo>();
                    entity.ProductionNormItemList.ConvertToList(semiProductList);
                    if (semiProductList.Where(o => o.MMProductionNormItemQuantity == 0).Count() > 0)
                    {
                        BOSApp.ShowMessage("Số lượng định mức cho BTP không được bằng 0. Vui lòng kiểm tra lại!");
                        return;
                    }
                }
                if (mainObject.MMProductionNormID == 0)
                    return;

                if (CheckInValidProductItemCode())
                    return;

                pnController.ApprovedAllBOM(BOSApp.CurrentUsersInfo.ADUserName, mainObject.MMProductionNormID);

                entity.InvalidateMainObject(mainObject.MMProductionNormID);

                BOSApp.ShowMessage("Đã duyệt xong!");
            }
            else if (mainObject.MMProductionNormStatus != Status.Closed.ToString())
            {
                BOSApp.ShowMessage("Vui lòng lưu định mức trước!");
            }
            else if (mainObject.MMProductionNormStatus == Status.Closed.ToString())
            {
                BOSApp.ShowMessage("Định mức đã ngưng sử dụng!");
            }
        }

        public bool CheckExitDefualtParent()
        {
            bool result = true;
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainobject = (MMProductionNormsInfo)entity.MainObject;
            ICProductsInfo product = CurrentCarcass;
            if (entity.ProductionNormItemList.Any())
            {
                List<MMProductionNormItemsInfo> parentList = new List<MMProductionNormItemsInfo>();
                entity.ProductionNormItemList.ConvertToList(parentList);
                if (parentList.Count() > 0 && parentList.Where(p => p.FK_ICProductID == mainobject.FK_ICProductID).Count() == 0)
                {
                    ICProductsInfo iCProductsInfo = BOSApp.GetProductFromCurrentProductList(mainobject.FK_ICProductID);
                    BOSApp.ShowMessage("Chưa tạo định mức BTP cho sản phẩm cần SX: " + (iCProductsInfo != null ? iCProductsInfo.ICProductName : string.Empty));
                    result = false;
                }
                if (parentList.Count() > 0)
                {
                    ICProductItemProcesssController processCtrl = new ICProductItemProcesssController();
                    List<ICProductItemProcesssInfo> lstProcess = processCtrl.GetParentProcessByProductionNormID(mainobject.MMProductionNormID, mainobject.FK_ICProductID);
                    if (lstProcess.Count() == 0)
                    {
                        if (BOSApp.ShowMessageYesNo("Bảng định mức chưa có QTSX thành phẩm, bạn chắc chắn muốn duyệt định mức?") == DialogResult.No)
                            result = false;
                    }
                }
            }
            return result;
        }

        public void ChangeProductionNormStatus(string type, string status)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainObject = (MMProductionNormsInfo)entity.MainObject;

            if (mainObject.MMProductionNormStatus == Status.Canceled.ToString())
            {
                BOSApp.ShowMessage("BOM ở trạng thái không thể duyệt. Vui lòng kiểm tra lại!");
                return;
            }
            if (type == "HardwareStatus")
            {
                if (IsHaveUnSaveNode(entity.ProductionNormItemHardwareList))
                {
                    BOSApp.ShowMessage("Vui lòng lưu Định mức Hardware trước!");
                    return;
                }
                if (status == Status.Approved.ToString() && !CheckOperationMaterial(ProductionNormStatusType.HardwareStatus.ToString())) return;
            }
            else if (type == "GeneralMaterialStatus" && entity.GeneralMaterialList.Count() > 0)
            {
                if (IsHaveUnSaveList(entity.GeneralMaterialList))
                {
                    BOSApp.ShowMessage("Vui lòng lưu Định mức Vật tư khác trước!");
                    return;
                }
                if (status == Status.Approved.ToString() && !CheckOperationMaterial(ProductionNormStatusType.GeneralMaterialStatus.ToString())) return;
            }
            else if (status == Status.Approved.ToString() && type == ProductionNormStatusType.WoodStatus.ToString() && (!CheckExitDefualtParent()
                || !CheckOperationMaterial(ProductionNormStatusType.WoodStatus.ToString()))) return;
            else if (status == Status.Approved.ToString() && type == ProductionNormStatusType.PaintStatus.ToString()
                && !CheckOperationMaterial(ProductionNormStatusType.PaintStatus.ToString())) return;
            else if (status == Status.Approved.ToString() && type == ProductionNormStatusType.PackingMaterialStatus.ToString())
            {
                if (entity.ProductionNormItemPackagingList.Count > 0)
                {
                    if (IsHaveUnSaveNode(entity.ProductionNormItemPackagingList))
                    {
                        BOSApp.ShowMessage("Vui lòng lưu Định mức PLĐG trước!");
                        return;
                    }
                    if (status == Status.Approved.ToString() && !CheckOperationMaterial(ProductionNormStatusType.PackingMaterialStatus.ToString())) return;
                }
            }



            if (status == Status.Approved.ToString() && (type == ProductionNormStatusType.HardwareStatus.ToString() || type == ProductionNormStatusType.GeneralMaterialStatus.ToString() || type == ProductionNormStatusType.PackingMaterialStatus.ToString() || type == ProductionNormStatusType.PaintStatus.ToString()))
            {
                if (mainObject.MMProductionNormWoodStatus != Status.Approved.ToString())
                {
                    BOSApp.ShowMessage("Vui lòng duyệt BTP trước khi duyệt các thành phần nguyên liệu khác!");
                    return;
                }
            }

            if (status == Status.Approved.ToString() && type == ProductionNormStatusType.WoodStatus.ToString())
            {
                List<MMProductionNormItemsInfo> semiProductList = new List<MMProductionNormItemsInfo>();
                entity.ProductionNormItemList.ConvertToList(semiProductList);
                if (semiProductList.Where(o => o.MMProductionNormItemQuantity == 0).Count() > 0)
                {
                    BOSApp.ShowMessage("Số lượng định mức cho BTP không được bằng 0. Vui lòng kiểm tra lại!");
                    return;
                }
            }
            if (status != Status.Edit.ToString() && CheckInValidProductItemCode())
                return;

            bool isComplete = true;
            if (isComplete)
            {
                if (mainObject.MMProductionNormID == 0)
                    return;

                if (mainObject.MMProductionNormStatus != Status.Approved.ToString())
                {
                    mainObject.MMProductionNormStatus = Status.Approved.ToString();
                    entity.UpdateMainObject();
                }

                BOSDbUtil dbUtil = new BOSDbUtil();

                string oldStatus = string.Empty;
                string columnName = "MMProductionNorm" + type;

                oldStatus = dbUtil.GetPropertyStringValue(mainObject, columnName);
                dbUtil.SetPropertyValue(mainObject, columnName, status);

                MMProductionNormsController pnController = new MMProductionNormsController();
                pnController.UpdateBOMStatus(type, oldStatus, status, BOSApp.CurrentUsersInfo.ADUserName, mainObject.MMProductionNormID);
            }

        }

        public bool IsCarcassProduct()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainObject = (MMProductionNormsInfo)entity.MainObject;
            if (!BOSApp.UsingCarCass)
            {
                return true;
            }

            ICProductsController pCtrl = new ICProductsController();
            ICProductsInfo p = BOSApp.GetProductFromCurrentProductList(mainObject.FK_ICProductID);

            if (p != null)
            {
                return p.ICProductCheckCarcass;
            }

            return false;
        }

        public MMProductionNormsInfo GetMainObject()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainObject = (MMProductionNormsInfo)entity.MainObject;

            return mainObject;
        }

        public int GetCarcassProductionNormID()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            if (entity.ProductionNormItemList != null && entity.ProductionNormItemList.Any())
            {
                MMProductionNormItemsInfo item = (MMProductionNormItemsInfo)entity.ProductionNormItemList.FirstOrDefault();
                if (item != null)
                {
                    return item.FK_MMProductionNormID;
                }
            }

            return 0;
        }

        public void RefreshHavePaintList()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            entity.InvalidateHavePaintList(entity.ProductionNormItemList, true);
        }



        public void ShowGuiPackingComponent(MMProductionNormItemsInfo item)
        {
            if (item.MMProductionNormItemID == 0)
            {
                BOSApp.ShowMessage("Vui lòng lưu PLĐG trước!");
                return;
            }

            guiPackagingComponent packingGui = new guiPackagingComponent(item);
            packingGui.Module = this;
            if (packingGui.ShowDialog() == DialogResult.OK)
            {

            }
        }

        public void SavePackingInfo(ICProductPackagesInfo package)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;

            MMProductionNormItemPackingsController packingCtrl = new MMProductionNormItemPackingsController();
            foreach (MMProductionNormItemPackingsInfo item in entity.ProductionNormItemPackingList)
            {
                if (item.Selected && package != null && package.ICProductPackageID > 0)
                {
                    item.FK_ICProductPackageID = package.ICProductPackageID;
                    packingCtrl.CreateObject(item);
                }
            }

        }

        public void SavePackingComponentInfo(MMProductionNormItemsInfo parent)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;

            MMProductionNormItemsController itemCtrl = new MMProductionNormItemsController();

            Dictionary<int, List<string>> dicUpdate = new Dictionary<int, List<string>>();

            foreach (MMProductionNormItemsInfo pni in entity.PackagingNormItemList)
            {
                if (pni.Selected)
                {
                    if (!dicUpdate.Keys.Contains(parent.MMProductionNormItemID))
                    {
                        dicUpdate.Add(parent.MMProductionNormItemID, new List<string>());
                    }

                    dicUpdate[parent.MMProductionNormItemID].Add(pni.MMProductionNormItemID.ToString());
                }
                else
                {
                    if (pni.FK_MMProductionNormItemRefID == parent.MMProductionNormItemID)
                    {
                        if (!dicUpdate.Keys.Contains(0))
                        {
                            dicUpdate.Add(0, new List<string>());
                        }
                        dicUpdate[0].Add(pni.MMProductionNormItemID.ToString());
                    }
                }
            }

            foreach (int key in dicUpdate.Keys)
            {
                string idStr = string.Join(",", dicUpdate[key].ToArray());
                itemCtrl.UpdateProductionNormItemRefID(idStr, key);
            }

            /// create template
            ICPackagingNormItemsController normCtrl = new ICPackagingNormItemsController();
            normCtrl.InsertPackagingComponent(parent.MMProductionNormItemID, parent.FK_ICProductID, BOSApp.CurrentUsersInfo.ADUserName);

            entity.InvalidatePackaging();
        }

        public void SaveCarcassDepreciationRate()
        {
            decimal rate = 0;

            if (DepreciationRateTextBox != null)
            {
                decimal.TryParse(DepreciationRateTextBox.Text, out rate);
            }
            ICProductsForViewInfo p = BOSApp.CurrentProductList.FirstOrDefault(t => t.ICProductID == CurrentCarcass.ICProductID);
            if (p != null)
            {
                p.ICProductDepreciationRate = rate;

            }
            CurrentCarcass.ICProductDepreciationRate = rate;


            ICProductsController pCtrl = new ICProductsController();
            ICProductsInfo product = (ICProductsInfo)pCtrl.GetObjectByID(CurrentCarcass.ICProductID);
            if (product != null)
            {
                product.ICProductDepreciationRate = rate;
                pCtrl.UpdateObject(product);
            }
        }

        public void RemoveProductFromStructure(int productID, IBOSTreeList treeList)
        {
            if (treeList != null && treeList.Any())
            {
                for (int i = treeList.Count - 1; i >= 0; i--)
                {
                    if (((ICProductItemsInfo)treeList[i]).FK_ICProductItemChildID == productID
                            || ((ICProductItemsInfo)treeList[i]).FK_ICProductItemParentID == productID)
                    {
                        treeList.RemoveAt(i);
                    }
                    else
                    {
                        RemoveProductFromStructure(productID, treeList[i].SubList);
                    }
                }
            }
        }
        public void DeleteSemiProducts()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo pn = (MMProductionNormsInfo)entity.MainObject;
            if (entity.ProductList.CurrentIndex >= 0)
            {
                ICProductsInfo product = entity.ProductList[entity.ProductList.CurrentIndex];
                if (product != null && (product.ICProductID == 0 || product.FK_MMProductionNormID == 0))
                {
                    entity.ProductList.RemoveSelectedRowObjectFromList();
                }
                else
                {
                    ICProductsController pCtrl = new ICProductsController();
                    ICProductsInfo checkProduct = pCtrl.CheckExitBOMSemiProduct(product.ICProductID, pn.MMProductionNormID);
                    if (checkProduct != null)
                    {
                        bool canDelete = true;
                        if (checkProduct.IsHaveBOMWoodNotNew > 0)
                        {
                            BOSApp.ShowMessage("Không thể xóa do BTP đã sử dụng ở Định mức BTP, vui lòng xoá chi tiết trong Định mức BTP!");
                            canDelete = false;
                        }
                        else if (checkProduct.IsHaveBOMPaintNotNew > 0)
                        {
                            BOSApp.ShowMessage("Không thể xóa do BTP đã sử dụng ở Định mức Sơn, vui lòng xoá chi tiết trong Định mức Sơn!");
                            canDelete = false;
                        }

                        if (canDelete)
                        {
                            entity.ProductList.RemoveSelectedRowObjectFromList();

                            if (checkProduct.IsHaveStructure > 0)
                            {
                                RemoveProductFromStructure(product.ICProductID, entity.ProductItemTreeList);
                                entity.RefreshProductItemTreeListView(entity.ProductItemTreeList);
                            }
                        }
                    }
                }
                if (product.ICProductID > 0)
                {
                    if (entity.ProductList.OriginalList != null && entity.ProductList.OriginalList.Count > 0)
                    {
                        ICProductsInfo productExit = entity.ProductList.OriginalList.Where(o => o.ICProductID == product.ICProductID).FirstOrDefault();
                        int index = entity.ProductList.OriginalList.IndexOf(productExit);
                        if (index >= 0)
                        {
                            entity.ProductList.OriginalList.RemoveAt(index);
                        }
                    }
                }
            }
        }

        public void ShowBatchProductByProduct(int productID)
        {
            MMBatchProductItemsController MController = new MMBatchProductItemsController();
            List<MMBatchProductItemsInfo> MList = MController.GetListItemByproductID(productID);
            if (MList == null || MList.Count == 0)
                return;
            guiFind<MMBatchProductItemsInfo> gui = new guiFind<MMBatchProductItemsInfo>(TableName.MMBatchProductItemsTableName, MList, this);
            gui.ColumnArr = new string[] { "MMBatchProductNo", "MMBatchProductItemProductQty", "MMProductionNormApproveLogDate" };
            gui.ShowDialog();
        }
        guiPicture guiProductPicture = null;
        public void ShowPictureByProduct(ICProductsInfo product)
        {

            Image image = GetSampleImageByProduct(product);
            if (image == null)
            {
                if (guiProductPicture != null)
                    guiProductPicture.Close();
                return;
            }
            Form form = Application.OpenForms["guiPicture"];
            if (form == null)
            {
                guiProductPicture = new guiPicture();
                guiProductPicture.Module = this;
                guiProductPicture.Show();
                guiProductPicture.SetImage(image);
            }
            else
            {
                guiProductPicture.SetImage(image);
            }
        }
        List<ImageWithName> CurrentImageListForShow = new List<ImageWithName>();
        public Image GetSampleImageByProduct(ICProductsInfo product)
        {
            if (CurrentImageListForShow.Count == 0)
            {
                List<Image> imgList = new List<Image>();
                List<string> fileName = BOSApp.GetFilesInFtpDirectory("SampleItemImage", string.Empty, imgList);
                if (fileName != null)
                {
                    ImageWithName imgWN;
                    for (int i = 0; i < fileName.Count; i++)
                    {
                        imgWN = new ImageWithName(imgList[i], fileName[i], string.Empty);
                        CurrentImageListForShow.Add(imgWN);
                    }
                }
            }
            ImageWithName iwn = CurrentImageListForShow.FirstOrDefault(t => t.ImgName.Contains(product.ICProductNo));
            Image img = null;
            if (iwn != null)
            {
                img = iwn.Img;
            }
            else
            {
                foreach (ImageWithName item in CurrentImageListForShow)
                {
                    string[] nameSplit = item.ImgName.Split('.');
                    if (nameSplit != null)
                    {
                        string name = string.Empty;

                        for (int i = 0; i < nameSplit.Length - 1; i++)
                        {
                            name += nameSplit[i];
                        }

                        if (name == product.ICProductNo)
                        {
                            img = item.Img;
                            break;
                        }
                    }
                }
            }
            return img;

        }

        public bool ValidateProductInfo(ICProductsInfo product)
        {
            bool isValid = true;
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            if (product != null)
            {
                //if (BOSApp.IsUsedCheckProductCode)
                //{
                //    if (string.IsNullOrEmpty(product.ICProductCode.Trim()))
                //    {
                //        MessageBox.Show("Mã code không được để trống");
                //        isValid = false;
                //    }
                //    else
                //    {
                //        int count = entity.ProductList.Where(item => item.ICProductCode == product.ICProductCode).Count();
                //        if (count > 1)
                //        {
                //            MessageBox.Show("Mã code không được trùng nhau");
                //            isValid = false;
                //        }
                //    }
                //}

                if (!product.HasComponent)
                {
                    bool isUnSpecifications = false;
                    if (product.FK_ICProductAttributeWoodTypeID > 0)
                    {
                        DataRow row = BOSApp.GetObjectFromCatche("ICProductAttributes", "ICProductAttributeID", product.FK_ICProductAttributeWoodTypeID);
                        if (row != null)
                        {
                            ICProductAttributesInfo obj = (ICProductAttributesInfo)(new ICProductAttributesController()).GetObjectFromDataRow(row);
                            if (obj != null) isUnSpecifications = obj.ICProductAttributeUnSpecifications;
                        }
                    }
                    if (isUnSpecifications && (
                        product.ICProductHeight == 0 ||
                        product.ICProductWidth == 0 ||
                        product.ICProductLength == 0))
                    {
                        MessageBox.Show("Quy cách BTP không được để trống");
                        isValid = false;
                    }
                }
            }
            return isValid;
        }
        public bool ValidateProductCode(ICProductsInfo product)
        {
            bool isValid = true;
            if (!string.IsNullOrEmpty(product.ICProductCode))
            {
                CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
                int count = entity.ProductList.Where(item => item.ICProductCode == product.ICProductCode).Count();
                if (count > 1)
                {
                    MessageBox.Show("Mã code không được trùng nhau");
                    isValid = false;
                }
            }
            return isValid;
        }
        public List<MMProductionNormItemsInfo> GetSemiProductDataSource()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            List<MMProductionNormItemsInfo> semiProductList = new List<MMProductionNormItemsInfo>();
            List<MMProductionNormItemsInfo> dataSourceList = new List<MMProductionNormItemsInfo>();
            entity.ProductionNormItemList.ConvertToList(semiProductList);
            dataSourceList = semiProductList.Where(o => o.MMProductionNormItemID > 0).Select(o => (MMProductionNormItemsInfo)o.Clone()).ToList();
            dataSourceList.Insert(0, new MMProductionNormItemsInfo());
            return dataSourceList;
        }

        public string GetSemiProductDisplayDisplayText(int productionNormItemID)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            List<MMProductionNormItemsInfo> semiProductList = new List<MMProductionNormItemsInfo>();
            entity.ProductionNormItemList.ConvertToList(semiProductList);
            string displayNo = semiProductList.Where(o => o.MMProductionNormItemID == productionNormItemID && productionNormItemID > 0).Select(o => o.MMProductionNormItemNo).FirstOrDefault();
            return displayNo;
        }

        public string GetSemiProductDisplayDisplayNameText(int productionNormItemID)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            List<MMProductionNormItemsInfo> semiProductList = new List<MMProductionNormItemsInfo>();
            entity.ProductionNormItemList.ConvertToList(semiProductList);
            string displayNo = semiProductList.Where(o => o.MMProductionNormItemID == productionNormItemID && productionNormItemID > 0).Select(o => o.MMProductionNormItemProductName).FirstOrDefault();
            return displayNo;
        }

        public void ShowDetailPain()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            List<MMProductionNormItemsInfo> productionNormItems = entity.ProductionNormItemHavePaintList.ToList();
            List<MMProductionNormItemsInfo> itemPaintList = new List<MMProductionNormItemsInfo>();
            entity.ProductionNormItemPaintList.ConvertToList(itemPaintList);
            List<MMProductionNormItemsInfo> itemPaints = itemPaintList.Where(o => o.FK_ICProductID > 0)
                                                                      .Select(o => (MMProductionNormItemsInfo)o.Clone())
                                                                      .ToList();
            decimal totalAreaPaint = productionNormItems.Select(o => o.MMProductionNormItemPaintA + o.MMProductionNormItemPaintB + o.MMProductionNormItemPaintC)
                                                        .Sum();

            List<MMProductionNormItemPaintDetailsInfo> itemPaintDetailList = new List<MMProductionNormItemPaintDetailsInfo>();
            MMProductionNormItemPaintDetailsInfo itemPaintDetailsInfo = new MMProductionNormItemPaintDetailsInfo();
            productionNormItems.ForEach(o =>
            {
                itemPaints.ForEach(paint =>
                {
                    itemPaintDetailsInfo = new MMProductionNormItemPaintDetailsInfo();
                    itemPaintDetailsInfo.MMProductionNormItemPaintDetailProductNo = o.MMProductionNormItemNo;
                    itemPaintDetailsInfo.MMProductionNormItemPaintDetailProductName = o.MMProductionNormItemProductName;
                    itemPaintDetailsInfo.MMProductionNormItemPaintDetailHeight = o.MMProductionNormItemProductHeight;
                    itemPaintDetailsInfo.MMProductionNormItemPaintDetailWidth = o.MMProductionNormItemProductWidth;
                    itemPaintDetailsInfo.MMProductionNormItemPaintDetailLength = o.MMProductionNormItemProductLength;
                    itemPaintDetailsInfo.FK_ICProductID = paint.FK_ICProductID;
                    itemPaintDetailsInfo.MMProductionNormItemPaintDetailNo = paint.MMProductionNormItemNo;
                    itemPaintDetailsInfo.MMProductionNormItemPaintDetailName = paint.MMProductionNormItemProductName;
                    itemPaintDetailsInfo.MMProductionNormItemPaintDetailArea = o.MMProductionNormItemPaintA + o.MMProductionNormItemPaintB + o.MMProductionNormItemPaintC;
                    itemPaintDetailsInfo.MMProductionNormItemPaintDetailQty = 0;
                    if (totalAreaPaint != 0)
                    {
                        itemPaintDetailsInfo.MMProductionNormItemPaintDetailQty = paint.MMProductionNormItemPaint * paint.MMProductionNormItemQuantity / totalAreaPaint;
                    }
                    Math.Round(itemPaintDetailsInfo.MMProductionNormItemPaintDetailQty, 4, MidpointRounding.AwayFromZero);
                    itemPaintDetailList.Add(itemPaintDetailsInfo);
                });
            });
            guiShowDetailPaint guiFind = new guiShowDetailPaint(itemPaintDetailList.Where(o => o.MMProductionNormItemPaintDetailQty > 0).ToList());
            guiFind.Module = this;
            guiFind.ShowDialog();
        }

        public List<MMPaintProcessessInfo> GetPainProcessByProduct()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo pn = (MMProductionNormsInfo)entity.MainObject;
            MMPaintProcessessController control = new MMPaintProcessessController();
            List<MMPaintProcessessInfo> ProcessList = new List<MMPaintProcessessInfo>();
            if (pn.FK_ICProductID > 0)
            {
                ICProductsInfo product = BOSApp.GetProductFromCurrentProductList(pn.FK_ICProductID);
                if (BOSApp.LookupTables.ContainsKey("MMPaintProcessess"))
                {
                    DataSet ds = (DataSet)BOSApp.LookupTables["MMPaintProcessess"];
                    if (ds != null && ds.Tables[0].Rows.Count > 0)
                    {
                        if (ds.Tables.Count > 0)
                        {
                            foreach (DataRow row in ds.Tables[0].Rows)
                            {
                                MMPaintProcessessInfo objPaintProcessessInfo = (MMPaintProcessessInfo)control.GetObjectFromDataRow(row);
                                ProcessList.Add(objPaintProcessessInfo);
                            }
                            return ProcessList;
                        }
                    }
                }
            }
            return null;
        }
        public class ImageWithName
        {
            public Image Img { get; set; }
            public string ImgName { get; set; }
            public string ImgPath { get; set; }

            public ImageWithName(Image img, string imgName, string imgPath)
            {
                Img = img;
                ImgName = imgName;
                ImgPath = imgPath;
            }
        }

        public void GenerateOrderCode(IBOSTreeList treeList, List<MMProductionNormItemsInfo> collection, MMProductionNormItemsInfo parentObj, bool sortOrder, ref int startIndex, bool alphaOrder)
        {
            int index = 1;
            string orderNo = string.Empty;

            foreach (MMProductionNormItemsInfo itemsInfo in collection)
            {
                if (sortOrder)
                {
                    if (alphaOrder && AlphaString.Count() >= index)
                    {
                        orderNo = AlphaString[index - 1].ToString();
                    }
                    else
                    {
                        if (parentObj != null)
                            orderNo = parentObj.MMProductionNormItemParentOrderName + "." + (index).ToString();
                    }
                    index++;
                }

                itemsInfo.MMProductionNormItemParentOrderName = orderNo;
                itemsInfo.MMProductionNormItemSortOrderString = orderNo;

                if (itemsInfo.SubList != null && itemsInfo.SubList.Count > 0)
                {
                    //Make the type of sub list same as its parent
                    List<MMProductionNormItemsInfo> subList = new List<MMProductionNormItemsInfo>();
                    foreach (var item in itemsInfo.SubList)
                    {
                        subList.Add((MMProductionNormItemsInfo)item);
                    }
                    this.GenerateOrderCode(itemsInfo.SubList, subList, itemsInfo, true, ref startIndex, false);
                }
            }
        }

        public void ShowPictureByProductLink(ICProductsInfo product)
        {
            guiViewPicture guiViewProductPicture = null;
            guiViewProductPicture = new guiViewPicture();
            guiViewProductPicture.Module = this;
            if (guiViewProductPicture.SetImage(product.ICProductImageFile))
                guiViewProductPicture.Show();
        }

        public void ReadPDFByProductLink(string url)
        {
            try
            {
                ProcessStartInfo sInfo = new ProcessStartInfo(url);
                Process.Start(sInfo);
            }
            catch
            {
                BOSApp.ShowMessage("Link Hình ảnh/PDF hoặc định dạng Hình ảnh/PDF không hợp lệ!" + Environment.NewLine + "Vui lòng kiểm tra lại!");
            }
        }

        #region PackageNo

        public List<ICProductPackagesInfo> PackageList { get; set; }
        public List<MMProductionNormItemPackingsInfo> PackSelectList { get; set; }
        ICProductPackagesGridControl fld_dgcICProductPackages;
        MMProductionNormItemPackingsGridControl fld_dgcMMProductionNormItemPackings;

        public void ShowGuiPacking(MMProductionNormItemsInfo item)
        {
            if (item != null && item.MMProductionNormItemID == 0)
            {
                BOSApp.ShowMessage("Vui lòng lưu PLĐG trước!");
                return;
            }
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo pn = (MMProductionNormsInfo)entity.MainObject;
            List<ICProductPackagesInfo> listData = new List<ICProductPackagesInfo>();
            if (pn.FK_ICProductID > 0)
            {
                ICProductPackagesController controler = new ICProductPackagesController();
                listData = controler.GetPackageDataBySomeCriteria(string.Empty, pn.FK_ICProductID, null
                                                                , string.Empty, string.Empty, string.Empty
                                                                , null, null, string.Empty);
            }
            guiPacking packingGui = new guiPacking(item);
            packingGui.Module = this;
            PackageList = listData;
            packingGui.ShowDialog();
        }

        public void ShowPackageNo(bool refreshPack)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo pn = (MMProductionNormsInfo)entity.MainObject;
            fld_dgcICProductPackages = (ICProductPackagesGridControl)Controls["fld_dgcICProductPackages"];
            if (fld_dgcICProductPackages == null) return;
            fld_dgcMMProductionNormItemPackings = (MMProductionNormItemPackingsGridControl)Controls["fld_dgcMMProductionNormItemPackings"];
            entity.ProductionNormItemPackingList.GridControl = fld_dgcMMProductionNormItemPackings;
            fld_lblLength = (BOSLabel)Controls["fld_lblLength"];
            fld_lblWidth = (BOSLabel)Controls["fld_lblWidth"];
            fld_lblHeigth = (BOSLabel)Controls["fld_lblHeigth"];
            fld_lblVolumn = (BOSLabel)Controls["fld_lblVolumn"];
            PackSelectList = new List<MMProductionNormItemPackingsInfo>();
            MMProductionNormItemPackingsController packingCtrl = new MMProductionNormItemPackingsController();
            if (pn.FK_ICProductID > 0)
            {
                int carcassPNID = GetCarcassProductionNormID();
                if (refreshPack)
                {
                    ICProductPackagesController controler = new ICProductPackagesController();
                    PackageList = controler.GetPackageDataBySomeCriteria(string.Empty, pn.FK_ICProductID, null
                                                                    , string.Empty, string.Empty, string.Empty
                                                                    , null, null, string.Empty);
                }
                PackSelectList = packingCtrl.GetForDefinePacking(null, carcassPNID, null);
                if (PackSelectList.Count() > 0 && fld_dgcICProductPackages != null)
                    PackageList = PackageList.Where(p => p.FK_MMProductionNormID == pn.MMProductionNormID).ToList();
                else
                    PackageList = new List<ICProductPackagesInfo>();
                fld_dgcICProductPackages.InvalidateDataSource(PackageList);
                fld_dgcICProductPackages.RefreshDataSource();

                List<MMProductionNormItemPackingsInfo> packingList = new List<MMProductionNormItemPackingsInfo>();
                if (entity.ProductionNormItemList != null && entity.ProductionNormItemList.Count > 0)
                {
                    ICProductPackagesInfo package = GetSelectedPackNo();
                    List<MMProductionNormItemsInfo> productionNormItemList = new List<MMProductionNormItemsInfo>();
                    entity.ProductionNormItemList.ConvertToList(productionNormItemList);
                    foreach (MMProductionNormItemsInfo item in productionNormItemList)
                    {
                        if (item.MMProductionNormItemID > 0)
                        {
                            MMProductionNormItemPackingsInfo obj = new MMProductionNormItemPackingsInfo();
                            obj.FK_MMProductionNormItemSemiProductID = item.MMProductionNormItemID;
                            obj.FK_MMProductionNormID = item.FK_MMProductionNormID;
                            obj.MMProductionNormItemNo = item.MMProductionNormItemNo;
                            obj.MMProductionNormItemProductName = item.MMProductionNormItemProductName;
                            obj.MMProductionNormItemQuantity = item.MMProductionNormItemQuantity;
                            obj.MMProductionNormItemPackingQuantity = item.MMProductionNormItemQuantity;
                            obj.MMProductionNormItemProductHeight = item.MMProductionNormItemProductHeight;
                            obj.MMProductionNormItemProductWidth = item.MMProductionNormItemProductWidth;
                            obj.MMProductionNormItemProductLength = item.MMProductionNormItemProductLength;
                            obj.MMProductionNormItemSortOrderString = item.MMProductionNormItemSortOrderString;
                            if (PackSelectList != null && package != null)
                            {
                                MMProductionNormItemPackingsInfo exitSelect = PackSelectList.Where(o => o.FK_MMProductionNormItemSemiProductID == item.MMProductionNormItemID
                                                                                                && o.FK_ICProductPackageID == package.ICProductPackageID).FirstOrDefault();
                                if (exitSelect != null && exitSelect.FK_MMProductionNormItemSemiProductID > 0)
                                {
                                    obj.Selected = true;
                                    obj.MMProductionNormItemPackingQuantity = exitSelect.MMProductionNormItemPackingQuantity;
                                }
                            }
                            packingList.Add(obj);
                        }
                    }

                    entity.ProductionNormItemPackingList.Invalidate(packingList);
                    entity.ProductionNormItemPackingList.GridControl?.RefreshDataSource();
                }
            }
        }
        public ICProductPackagesInfo AddNewPackageItem(ICProductPackagesInfo item, List<ICProductPackagesInfo> PackageList)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo pn = (MMProductionNormsInfo)entity.MainObject;
            if (pn.FK_ICProductID > 0)
            {
                ICProductsInfo product = BOSApp.GetProductFromCurrentProductList(pn.FK_ICProductID);
                if (product != null)
                {
                    if (item == null) item = new ICProductPackagesInfo();
                    item.FK_ICProductID = pn.FK_ICProductID;
                    item.ICProductPackageBarcodeNo = string.Empty;
                    item.ICProductPackageNo = string.Empty;
                    item.ICProductPackageName = string.Empty;
                    item.ICProductPackageSerialNo = string.Empty;
                    item.ICProductPackageSupplierSerialNo = string.Empty;
                    item.ICProductPackageStatus = "New";
                    item.FK_APSupplierID = 0;
                    item.Selected = false;
                    item.FK_ICProductAttributeID = 0;
                    item.ICProductPackageVolumn = 0;
                    item.ICProductPackageHeight = 0;
                    item.ICProductPackageWidth = 0;
                    item.ICProductPackageLength = 0;
                    item.ICProductPackageQty = 1;
                    item.ICProductPackageProductQty = 1;
                    item.ICProductPackageNo = GenaralPackageNo(product, item, PackageList);
                    item.ICProductPackageBarcodeNo = GenaralPackageBarcode(item);
                }
            }
            return item;
        }
        public string GenaralPackageBarcode(ICProductPackagesInfo product)
        {
            if (!string.IsNullOrEmpty(product.ICProductPackageBarcodeNo))
                return product.ICProductPackageBarcodeNo;
            else if (!string.IsNullOrEmpty(product.ICProductPackageSupplierSerialNo))
                return product.ICProductPackageSupplierSerialNo;
            else
                return product.ICProductPackageNo;
        }

        public string GenaralPackageNo(ICProductsInfo product, ICProductPackagesInfo item, List<ICProductPackagesInfo> PackageList)
        {
            string packageNo = string.Empty;
            if (!string.IsNullOrEmpty(product.ICProductNo))
                packageNo = "K." + product.ICProductNo;
            else
                packageNo = product.ICProductNo;

            if (item.FK_ICProductAttributeID > 0)
            {
                DataRow row = BOSApp.GetObjectFromCatche("ICProductAttributes", "ICProductAttributeID", item.FK_ICProductAttributeID);
                ICProductAttributesInfo obj = null;
                if (row != null)
                {
                    obj = (ICProductAttributesInfo)(new ICProductAttributesController()).GetObjectFromDataRow(row);
                    if (obj != null)
                    {
                        packageNo = string.IsNullOrEmpty(packageNo) ? obj.ICProductAttributeNo : packageNo + "." + obj.ICProductAttributeNo;
                    }

                }
            }
            int count = 1;
            if (PackageList != null && PackageList.Count > 0) count = PackageList.Count + 1;
            string tempNo = string.Empty;
            if (count > 0)
                tempNo = string.IsNullOrEmpty(packageNo) ? count.ToString().PadLeft(2, '0') : packageNo + "." + count.ToString().PadLeft(2, '0');
            ICProductPackagesInfo checkExit = PackageList != null ? PackageList.Where(o => o.ICProductPackageNo == tempNo).FirstOrDefault() : null;
            if (checkExit != null)
            {
                count += 1;
            }
            packageNo = string.IsNullOrEmpty(packageNo) ? count.ToString().PadLeft(2, '0') : packageNo + "." + count.ToString().PadLeft(2, '0');

            return packageNo;
        }
        public List<ICProductPackagesInfo> GetPackageNoDataSource()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo pn = (MMProductionNormsInfo)entity.MainObject;
            List<ICProductPackagesInfo> listData = (new ICProductPackagesController()).GetPackageDataBySomeCriteria(
                                                                                                string.Empty,
                                                                                                pn.FK_ICProductID,
                                                                                                null,
                                                                                                string.Empty,
                                                                                                string.Empty,
                                                                                                string.Empty,
                                                                                                null,
                                                                                                null,
                                                                                                string.Empty);
            return listData;
        }

        public ICProductPackagesInfo GetSelectedPackNo()
        {
            ICProductPackagesInfo result = null;
            if (PackageList != null && PackageList.Count > 0)
                result = PackageList.Where(o => o.Selected).FirstOrDefault();
            return result;
        }
        public void GenaralPackageNo(ICProductPackagesInfo item)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo pn = (MMProductionNormsInfo)entity.MainObject;
            if (pn != null)
            {
                if (pn.FK_ICProductID > 0)
                {
                    ICProductsInfo product = BOSApp.GetProductFromCurrentProductList(pn.FK_ICProductID);
                    if (product != null)
                    {
                        item.FK_ICProductID = pn.FK_ICProductID;
                        item.ICProductPackageNo = GenaralPackageNo(product, item, PackageList != null ? PackageList.Where(o => o.ICProductPackageNo != item.ICProductPackageNo).ToList() : null);
                        item.ICProductPackageBarcodeNo = GenaralPackageBarcode(item);
                    }
                }
            }
        }
        public decimal CalculateVolumnSelectedItem(MMProductionNormItemPackingsInfo item)
        {
            decimal volumn = 0;
            decimal maxLength = 0;
            decimal maxWidth = 0;
            decimal maxHeigth = 0;
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            List<MMProductionNormItemPackingsInfo> selectList = entity.ProductionNormItemPackingList.Where(o => o.Selected).ToList();
            if (selectList != null && selectList.Count > 0)
            {
                maxLength = selectList.Max(o => o.MMProductionNormItemProductLength);
                maxWidth = selectList.Max(o => o.MMProductionNormItemProductWidth);
                maxHeigth = selectList.Sum(o => o.MMProductionNormItemProductHeight);
            }
            volumn = (maxLength * maxWidth * maxHeigth) / (decimal)Math.Pow(10, 9);
            fld_lblLength.Text = maxLength.ToString("N2");
            fld_lblWidth.Text = maxWidth.ToString("N2");
            fld_lblHeigth.Text = maxHeigth.ToString("N2");
            fld_lblVolumn.Text = volumn.ToString("N4");

            return volumn;
        }
        public void ChangePackageNo(MMProductionNormItemPackingsInfo item, bool value)
        {
            decimal volumn = 0;
            decimal maxLength = 0;
            decimal maxWidth = 0;
            decimal maxHeigth = 0;
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            List<MMProductionNormItemPackingsInfo> selectList = entity.ProductionNormItemPackingList.Where(o => o.Selected).ToList();
            if (selectList != null && selectList.Count > 0)
            {
                maxLength = selectList.Max(o => o.MMProductionNormItemProductLength);
                maxWidth = selectList.Max(o => o.MMProductionNormItemProductWidth);
                maxHeigth = selectList.Sum(o => o.MMProductionNormItemProductHeight);
            }
            volumn = (maxLength * maxWidth * maxHeigth) / (decimal)Math.Pow(10, 9);
            fld_lblLength.Text = maxLength.ToString("N2");
            fld_lblWidth.Text = maxWidth.ToString("N2");
            fld_lblHeigth.Text = maxHeigth.ToString("N2");
            fld_lblVolumn.Text = volumn.ToString("N4");

            PackageList.ForEach(o =>
            {
                if (o.Selected)
                {
                    o.ICProductPackageVolumn = volumn;
                    o.ICProductPackageLength = maxLength;
                    o.ICProductPackageWidth = maxWidth;
                    o.ICProductPackageHeight = maxHeigth;
                    if (item != null && value)
                    {
                        item.ICProductPackageNo = o.ICProductPackageNo;
                        item.FK_ICProductPackageID = o.ICProductPackageID;
                    }
                    else
                    {
                        item.ICProductPackageNo = string.Empty;
                        item.FK_ICProductPackageID = 0;
                    }
                }
            });
        }
        public void ReFreshPackNormItemDetail(ICProductPackagesInfo item, bool value)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;

            entity.ProductionNormItemPackingList.ForEach(o =>
            {

                MMProductionNormItemPackingsInfo exitPack = PackSelectList.Where(p => p.FK_ICProductPackageID == item.ICProductPackageID
                && p.FK_MMProductionNormItemSemiProductID == o.FK_MMProductionNormItemSemiProductID).FirstOrDefault();
                o.FK_ICProductPackageID = 0;
                o.ICProductPackageNo = string.Empty;
                if (exitPack != null && exitPack.FK_ICProductPackageID > 0)
                {
                    o.Selected = value;
                    if (value)
                    {
                        o.MMProductionNormItemPackingQuantity = exitPack.MMProductionNormItemPackingQuantity;
                    }
                    else
                        o.MMProductionNormItemPackingQuantity = o.MMProductionNormItemQuantity;
                }
                else
                {
                    if (value)
                    {
                        o.Selected = !value;
                    }
                }
                o.IsError = false;
                o.MMProductionNormItemPackQuantity = 0;
            });
            entity.ProductionNormItemPackingList.GridControl?.RefreshDataSource();
        }
        public void DeleteProductPackge(ICProductPackagesInfo item)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            if (item.ICProductPackageID > 0)
                (new ICProductPackagesController()).DeleteProductPackage(item.ICProductPackageID, BOSApp.CurrentUsersInfo.ADUserName);
            entity.ProductionNormItemPackingList.ForEach(o =>
            {
                if (o.FK_ICProductPackageID == item.ICProductPackageID)
                {
                    o.FK_ICProductPackageID = 0;
                    o.ICProductPackageNo = string.Empty;
                    o.MMProductionNormItemPackingID = 0;
                }
            });
            if (item.ICProductPackageID > 0)
                PackageList.RemoveAll(o => o.ICProductPackageID == item.ICProductPackageID);
            else
                PackageList.Remove(item);

            fld_dgcICProductPackages?.RefreshDataSource();
            entity.ProductionNormItemPackingList.GridControl?.RefreshDataSource();
        }
        public List<MMProductionNormItemPackingsInfo> ConvertPackToDetailSemiProduct(List<MMProductionNormItemPackingsInfo> PackItemList, bool getUpdatePack)
        {
            List<MMProductionNormItemPackingsInfo> result = new List<MMProductionNormItemPackingsInfo>();
            PackItemList.ForEach(p =>
            {
                List<MMProductionNormItemPackingsInfo> convertList = GetPackDetailFromNormList(p, getUpdatePack);
                if (convertList != null)
                    result.AddRange(convertList);
            });
            return result;
        }
        List<MMProductionNormItemsInfo> AllChildNote = new List<MMProductionNormItemsInfo>();
        bool addByParent;
        int addParentID;
        public List<MMProductionNormItemPackingsInfo> GetPackDetailFromNormList(MMProductionNormItemPackingsInfo from, bool getUpdatePack)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            List<MMProductionNormItemPackingsInfo> packingList = new List<MMProductionNormItemPackingsInfo>();
            ICProductPackagesInfo package = GetSelectedPackNo();
            AllChildNote = new List<MMProductionNormItemsInfo>();
            addByParent = false;
            addParentID = 0;
            foreach (MMProductionNormItemsInfo item in entity.ProductionNormItemList)
            {
                if (item.MMProductionNormItemID > 0 && (item.SubList == null || item.SubList.Count() == 0))
                {
                    if (item.MMProductionNormItemID == from.FK_MMProductionNormItemSemiProductID)
                        AllChildNote.Add(item);
                }
                else
                {
                    if (item.MMProductionNormItemID == from.FK_MMProductionNormItemSemiProductID)
                    {
                        addByParent = true;
                        addParentID = item.MMProductionNormItemParentID;
                    }
                    GetAllPackChildNote(item, from);

                }

            }
            if (AllChildNote.Count() > 0)
            {
                AllChildNote.ForEach(o =>
                {
                    MMProductionNormItemPackingsInfo obj = ToListPackDetailItem(from, o, getUpdatePack);
                    packingList.Add(obj);
                });
                BOSDisposeUtility.DisposeAll(AllChildNote, 0, GCCollectionMode.Forced);
            }
            return packingList;
        }

        public void GetAllPackChildNote(MMProductionNormItemsInfo fromNote, MMProductionNormItemPackingsInfo from)
        {
            if ((fromNote.SubList == null || fromNote.SubList.Count() == 0) && (fromNote.MMProductionNormItemID == from.FK_MMProductionNormItemSemiProductID || addByParent))
            {
                AllChildNote.Add(fromNote);
            }
            else if (fromNote.SubList != null)
            {
                if (fromNote.MMProductionNormItemID == from.FK_MMProductionNormItemSemiProductID)
                {
                    addParentID = fromNote.MMProductionNormItemParentID;
                    addByParent = true;
                }
                foreach (MMProductionNormItemsInfo note in fromNote.SubList)
                {
                    if (addParentID == note.MMProductionNormItemParentID && note.MMProductionNormItemID != from.FK_MMProductionNormItemSemiProductID)
                        addByParent = false;
                    GetAllPackChildNote(note, from);
                }
            }
        }

        public MMProductionNormItemPackingsInfo ToListPackDetailItem(MMProductionNormItemPackingsInfo from, MMProductionNormItemsInfo item, bool getUpdatePack)
        {
            MMProductionNormItemPackingsInfo obj = new MMProductionNormItemPackingsInfo();
            obj.FK_MMProductionNormItemSemiProductID = item.MMProductionNormItemID;
            obj.FK_MMProductionNormID = item.FK_MMProductionNormID;
            obj.MMProductionNormItemNo = item.MMProductionNormItemNo;
            obj.MMProductionNormItemProductName = item.MMProductionNormItemProductName;
            obj.MMProductionNormItemQuantity = item.MMProductionNormItemQuantity;
            obj.MMProductionNormItemPackingQuantity = item.MMProductionNormItemQuantity;
            if (from.FK_MMProductionNormItemSemiProductID == item.MMProductionNormItemID)
                obj.MMProductionNormItemPackingQuantity = from.MMProductionNormItemPackingQuantity;
            obj.MMProductionNormItemProductHeight = item.MMProductionNormItemProductHeight;
            obj.MMProductionNormItemProductWidth = item.MMProductionNormItemProductWidth;
            obj.MMProductionNormItemProductLength = item.MMProductionNormItemProductLength;
            if (getUpdatePack)
            {
                obj.FK_ICProductPackageID = from.FK_ICProductPackageID;
                obj.MMProductionNormItemPackingQuantity = obj.MMProductionNormItemPackingQuantity * (from.MMProductionNormItemPackingQuantity == 0 ? 1 : from.MMProductionNormItemPackingQuantity);
            }
            return obj;

        }
        List<MMProductionNormItemPackingsInfo> PackageListConvert;
        public bool CheckQtySamePackType(MMProductionNormItemPackingsInfo item)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            ICProductPackagesInfo package = null;
            ICProductPackagesController pacCtrl = new ICProductPackagesController();
            bool isError = false;
            bool isError1 = false;
            bool result = true;
            package = GetSelectedPackNo();
            string mess = string.Empty;

            PackageListConvert = ConvertPackToDetailSemiProduct(PackSelectList, true);
            entity.ProductionNormItemPackingList.ForEach(ite =>
            {
                if ((ite.Selected && item == null) || (item != null && ite.FK_MMProductionNormItemSemiProductID == item.FK_MMProductionNormItemSemiProductID))
                {
                    //Cho phép tạo nhiều loại kiện => Tổng SL kiện > SL định mức
                    #region Check Total packed <> MMProductionNormItemQuantity
                    List<ICProductPackagesInfo> samePackType = PackageList.Where(p => p.FK_ICProductAttributeID == package.FK_ICProductAttributeID).Distinct().ToList();
                    if (samePackType.Count() > 1)
                    {
                        List<MMProductionNormItemPackingsInfo> listItem = new List<MMProductionNormItemPackingsInfo>();
                        listItem.Add(ite);
                        List<MMProductionNormItemPackingsInfo> ojbConvert = ConvertPackToDetailSemiProduct(listItem, false);
                        ojbConvert.ForEach(o =>
                        {
                            List<MMProductionNormItemPackingsInfo> exitPack = PackageListConvert.Where(p => p.FK_MMProductionNormItemSemiProductID == o.FK_MMProductionNormItemSemiProductID
                                                                                                && samePackType.Any(k => k.ICProductPackageID == p.FK_ICProductPackageID)).ToList();
                            if (exitPack != null && exitPack.Where(e => e.FK_ICProductPackageID != o.FK_ICProductPackageID)
                                                        .Sum(s => s.MMProductionNormItemPackingQuantity) + o.MMProductionNormItemPackingQuantity > o.MMProductionNormItemQuantity)
                            {
                                ite.IsError = true;
                                isError1 = true;
                                mess += Environment.NewLine + "Mã:" + o.MMProductionNormItemNo + ". Kiện:  "
                                        + string.Join(",", samePackType.Where(s => s.ICProductPackageID != o.FK_ICProductPackageID).Select(s => s.ICProductPackageNo).Distinct().ToArray()) + ". SL: ";
                                if (samePackType != null)
                                    mess = mess + (Math.Round(exitPack.Where(e => e.FK_ICProductPackageID != o.FK_ICProductPackageID).Sum(s => s.MMProductionNormItemPackingQuantity), 6));
                            }
                        });
                    }

                    #endregion
                    if (ite.MMProductionNormItemPackQuantity > ite.MMProductionNormItemQuantity)
                    {
                        ite.IsError = true;
                        isError = true;
                    }
                }

            });
            BOSDisposeUtility.DisposeAll(PackageListConvert, 0, GCCollectionMode.Forced);
            if (isError1)
            {
                BOSApp.ShowMessage("Tổng chi tiết trong các kiện cùng loại lớn hơn số lượng định mức." + mess);
                entity.ProductionNormItemPackingList.GridControl?.RefreshDataSource();
                return false;
            }
            if (isError)
            {
                BOSApp.ShowMessage("Số lượng đóng kiện lớn hơn SL định mức");
                entity.ProductionNormItemPackingList.GridControl?.RefreshDataSource();
                return false;
            }
            return result;
        }
        public bool SavePackageNo()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            ICProductPackagesInfo package = null;
            ICProductPackagesController pacCtrl = new ICProductPackagesController();
            bool isError = false;
            package = GetSelectedPackNo();
            string mess = string.Empty;
            if (package != null && package.ICProductPackageID > 0)
            {
                if (package.ICProductPackageStatus == "Approved")
                {
                    BOSApp.ShowMessage("Kiện đã sử dụng, bạn không thể thay đổi!");
                    return false;
                }

                if (!CheckQtySamePackType(null))
                {
                    return false;
                }

                mess = string.Empty;
                foreach (ICProductPackagesInfo pPack in PackageList)
                {
                    if (pPack.Selected)
                    {
                        if (string.IsNullOrEmpty(pPack.ICProductPackageNo))
                        {
                            pPack.IsError = true;
                            isError = true;
                            mess += Environment.NewLine + "Mã kiện không thể trống";
                        }
                        if (string.IsNullOrEmpty(pPack.ICProductPackageBarcodeNo))
                        {
                            pPack.IsError = true;
                            isError = true;
                            mess += Environment.NewLine + "Mã vạch không thể trống!";
                        }
                        package = pPack;
                    }
                }

                if (isError) return false;
                if (package != null && package.ICProductPackageID > 0)
                {
                    package.ICProductPackageQty = 1;
                    (new ICProductPackagesController()).UpdateObject(package);
                    (new ICProductPackagesController()).DeleteProductPackageBOMDetail(package.ICProductPackageID, BOSApp.CurrentUsersInfo.ADUserName);
                    SavePackingInfo(package);
                    (new ICProductPackagesController()).SaveDetailByPackageNormItem(package.ICProductPackageID.ToString(), BOSApp.CurrentUsersInfo.ADUserName);
                }
                int carcassPNID = GetCarcassProductionNormID();
                BOSApp.ShowMessage("Lưu thành công");
                ShowPackageNo(false);
            }
            else
            {
                BOSApp.ShowMessage("Bạn chưa chọn kiện");
                return false;
            }

            return true;
        }
        public bool SavePackage(ICProductPackagesInfo obj)
        {
            string mess = string.Empty;
            if (string.IsNullOrEmpty(obj.ICProductPackageNo))
            {
                if (BOSApp.ShowMessageYesNo("Mã kiện không thể trống, bạn có muốn hệ thống phát sinh mã kiện không?") == DialogResult.Yes)
                {
                    GenaralPackageNo(obj);
                    obj.ICProductPackageBarcodeNo = obj.ICProductPackageNo;
                }
                if (string.IsNullOrEmpty(obj.ICProductPackageNo)) return false;
            }

            if (string.IsNullOrEmpty(obj.ICProductPackageNo))
            {
                mess = "Mã kiện không thể trống!";
                BOSApp.ShowMessage(mess);
                return false;
            }
            List<ICProductPackagesInfo> multiExits = PackageList.Where(o => o.ICProductPackageNo == obj.ICProductPackageNo).ToList();
            if (multiExits != null && multiExits.Count > 1)
            {
                PackageList.ForEach(o =>
                {
                    if (o.ICProductPackageNo == obj.ICProductPackageNo) o.IsError = true;
                    else o.IsError = false;
                });
                mess = "Mã kiện Đã tồn tại trong danh sách!";
                BOSApp.ShowMessage(mess);
                return false;
            }
            if (string.IsNullOrEmpty(obj.ICProductPackageBarcodeNo))
            {
                mess = "Mã vạch không thể trống!";
                BOSApp.ShowMessage(mess);
                return false;
            }

            if (obj.FK_ICProductAttributeID == 0)
            {
                mess = "Kiện không có quy cách, bạn có muốn tiếp tục không!";
                if (BOSApp.ShowMessageYesNo(mess) == DialogResult.No)
                    return false;
            }
            ICProductPackagesInfo exitPackage = (ICProductPackagesInfo)(new ICProductPackagesController()).GetObjectByNo(obj.ICProductPackageNo);
            if (exitPackage != null && exitPackage.ICProductPackageID != obj.ICProductPackageID)
            {
                ICProductsInfo product = BOSApp.GetProductFromCurrentProductList(exitPackage.FK_ICProductID);
                mess = "Đã tồn tại mã kiện trong hệ thống!"
                    + Environment.NewLine + "Mã kiện:" + exitPackage.ICProductPackageNo
                    + (product != null ? (Environment.NewLine + "Sản phẩm:" + product.ICProductNo) : "");
                BOSApp.ShowMessage(mess);
                return false;
            }
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo pn = (MMProductionNormsInfo)entity.MainObject;
            if (pn.MMProductionNormID > 0) obj.FK_MMProductionNormID = pn.MMProductionNormID;

            if (obj.ICProductPackageID == 0)
            {
                (new ICProductPackagesController()).CreateObject(obj);
            }
            else
                (new ICProductPackagesController()).UpdateObject(obj);

            BOSApp.ShowMessage("Lưu thành công");
            return true;
        }

        public bool CopyBOMVersion(ICProductsInfo item)
        {
            if (item.MMProductionNormID == 0)
            {
                MessageBox.Show("Sản phẩm chưa có Bảng định mức. Vui lòng kiểm tra lại!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }

            DialogResult rs = MessageBox.Show("Bạn có chắc chắn muốn tạo bản sao cho Bảng định mức này không?", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (rs != DialogResult.Yes)
                return false;

            MMProductionNormsController objProductionNormsController = new MMProductionNormsController();
            try
            {
                BOSProgressBar.Start("Đang tạo bản sao");
                objProductionNormsController.CopyBOMVersion(item.ICProductID, item.MMProductionNormID, BOSApp.CurrentUsersInfo.ADUserName, BOSApp.CurrentUsersInfo.FK_HREmployeeID, BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            }
            catch (Exception ex)
            {
                return false;
            }
            finally
            {
                BOSProgressBar.Close();
            }
            return true;
        }
        public bool CopyBOM(ICProductsInfo item)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo pn = (MMProductionNormsInfo)entity.MainObject;
            if (item.MMProductionNormID == 0)
            {
                MessageBox.Show("Sản phẩm chọn để sao chép chưa có Bảng định mức. Vui lòng kiểm tra lại!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }

            DialogResult rs = MessageBox.Show("Thao tác này sẽ xoá tất cả dữ liệu của bảng định mức này thay bằng dữ liệu sao chép. Bạn có chắc chắn muốn sao chép bảng định mức này không?"
                , CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (rs != DialogResult.Yes)
                return false;
            MMProductionNormsController objProductionNormsController = new MMProductionNormsController();
            if (pn.MMProductionNormID == 0)
            {
                pn.MMProductionNormNo = GetProductionNormNo(0, pn);
                objProductionNormsController.CreateObject(pn);
                CurrentCarcass.MMProductionNormID = pn.MMProductionNormID;
                CurrentCarcass.MMProductionNormNo = pn.MMProductionNormNo;
            }
            try
            {
                BOSProgressBar.Start("Đang sao chép...");
                objProductionNormsController.CopyBOM(item.ICProductID, item.MMProductionNormID, pn.MMProductionNormID, BOSApp.CurrentUsersInfo.ADUserName, BOSApp.CurrentUsersInfo.FK_HREmployeeID, BOSApp.CurrentCompanyInfo.FK_BRBranchID);
                entity.InvalidateMainObject(pn.MMProductionNormID);
                InvalidCarcassSemiProductGrid();
                entity.InvalidateBOM();
                entity.InvalidateBOMHardware();
                entity.InvalidateBOMGeneralMaterial();
                //entity.InvalidateProductItemTreeList();
                InvalidateProductPackingDetail();
                InvalidateCarcassLookupEdit();
                entity.InvalidatePaint();
                entity.InvalidatePackaging();
            }
            catch (Exception)
            {
                return false;
            }
            finally
            {
                BOSProgressBar.Close();
            }
            return true;
        }

        public void RemoveProductItemSelected()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            entity.ProductItemTreeList.RemoveSelectedRowObjectFromList();
        }
        public bool IsValidBOM(ICProductsInfo item)
        {
            ICProductsController objProductsController = new ICProductsController();
            return objProductsController.IsHasBOM(item.ICProductID);
        }

        public bool ImportProductionNorm(ICProductsForViewIMES itemView, ICProductsInfo item, bool isValidate = true)
        {
            if (isValidate && IsValidBOM(item))
            {
                MessageBox.Show("Thành phẩm đã tồn tại Bảng định mức(BOM). Vui lòng kiểm tra lại!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }
            string filePath = string.Empty;
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Filter = MESLocalizedResources.DialogFilter;
            if (dialog.ShowDialog() == DialogResult.Cancel)
                return false;

            filePath = dialog.FileName;
            string extension = Path.GetExtension(filePath);
            string connectionString = @"Provider=Microsoft.Jet.OLEDB.4.0;Data Source='" + filePath + "';Extended Properties=\"Excel 8.0;HDR=YES;\"";
            if (extension.Equals(".xlsx"))
            {
                connectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source='" + filePath + "';Extended Properties=\"Excel 12.0;HDR=YES;\"";
            }
            BOSProgressBar.Start("Đang khởi tạo dữ liệu");
            DataSet ds = GetDataFromExcel(filePath, connectionString);
            DataTable dt = ds.Tables["MappingConfig$"];
            if (dt == null)
            {
                BOSProgressBar.Close();
                MessageBox.Show("File đã chọn không đúng mẫu. Vui lòng kiểm tra lại", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }
            List<IPMappingsInfo> mappingList = new List<IPMappingsInfo>();
            IPMappingsInfo objMappingsInfo = new IPMappingsInfo();
            foreach (DataRow row in dt.Rows)
            {
                objMappingsInfo = (IPMappingsInfo)SqlDatabaseHelper.GetObjectFromDataRow(row, objMappingsInfo.GetType());
                if (objMappingsInfo != null)
                    mappingList.Add(objMappingsInfo);
            }
            if (mappingList.Count() == 0)
            {
                BOSProgressBar.Close();
                MessageBox.Show("Cấu hình file không đúng. Vui lòng kiểm tra lại!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }
            string tableName = string.Empty;
            AAColumnAliasController objColumnAliasController = new AAColumnAliasController();
            List<AAColumnAliasInfo> aliasImportsList = BOSApp.LstColumnAlias.Where(o => o.AATableName == "IPProductionItems" || o.AATableName == "IPProductItemMaterials" || o.AATableName == "IPProductItemProcess")
                                                                            .ToList();
            List<IPProductionItemsInfo> productionItemList = new List<IPProductionItemsInfo>();
            List<IPProductItemMaterialsInfo> materialList = new List<IPProductItemMaterialsInfo>();
            List<IPProductItemProcessInfo> processList = new List<IPProductItemProcessInfo>();
            mappingList.ForEach(o =>
            {
                tableName = o.SheetName + "$";
                dt = ds.Tables[tableName];
                if (dt == null)
                {
                    tableName = @"'" + tableName + "'";
                    dt = ds.Tables[tableName];
                }
                if (dt == null)
                    return;

                if (o.Group == ProductionNormItemGroup.Material.ToString())
                    MappingToProductItemMaterial(o.Group, dt, materialList, aliasImportsList.Where(al => al.AATableName == "IPProductItemMaterials").ToList());
                else if (o.Group == "Process")
                    MappingToItemProcess(dt, processList, aliasImportsList.Where(al => al.AATableName == "IPProductItemProcess").ToList());
                else
                    MappingToProductionItem(o.Group, dt, productionItemList, aliasImportsList.Where(al => al.AATableName == "IPProductionItems").ToList());
            });
            BOSProgressBar.Close();
            guiImportBOM guiFind = new guiImportBOM(item, mappingList, productionItemList, materialList, processList);
            guiFind.Module = this;
            DialogResult rs = guiFind.ShowDialog();
            if (rs != DialogResult.OK)
                return false;

            MMProductionNormsInfo objProductionNormsInfo = SaveBOMFromImport(item, guiFind.SemiProductsList, guiFind.MaterialsList, guiFind.HardwardProductsList, guiFind.IngredientPackagingsList, guiFind.IngredientPaintsList, guiFind.GeneralMaterialsList, guiFind.ProcessList);
            if (objProductionNormsInfo == null)
                return false;

            itemView.MMProductionNormID = objProductionNormsInfo.MMProductionNormID;
            itemView.MMProductionNormNo = objProductionNormsInfo.MMProductionNormNo;
            itemView.MMProductionNormDesc = objProductionNormsInfo.MMProductionNormDesc;
            itemView.MMProductionNormStatus = objProductionNormsInfo.MMProductionNormStatus;
            return true;
        }

        public void MappingToProductionItem(string groupName, DataTable dt, List<IPProductionItemsInfo> semiProductList, List<AAColumnAliasInfo> aliasImportsList)
        {
            IPProductionItemsInfo objProductionItemsInfo = new IPProductionItemsInfo();
            foreach (DataRow row in dt.Rows)
            {
                objProductionItemsInfo = (IPProductionItemsInfo)GetObjectFromDataRow(row, objProductionItemsInfo.GetType(), aliasImportsList);
                if (objProductionItemsInfo != null && !string.IsNullOrWhiteSpace(objProductionItemsInfo.IPProductionItemCode))
                {
                    objProductionItemsInfo.IPProductionItemGroup = groupName;
                    semiProductList.Add(objProductionItemsInfo);
                }
            }
        }

        public void MappingToItemProcess(DataTable dt, List<IPProductItemProcessInfo> processList, List<AAColumnAliasInfo> aliasImportsList)
        {
            IPProductItemProcessInfo objProductItemProcessInfo = new IPProductItemProcessInfo();
            foreach (DataRow row in dt.Rows)
            {
                objProductItemProcessInfo = (IPProductItemProcessInfo)GetObjectFromDataRow(row, objProductItemProcessInfo.GetType(), aliasImportsList);
                if (objProductItemProcessInfo != null && !string.IsNullOrWhiteSpace(objProductItemProcessInfo.IPProductItemProcessCode))
                    processList.Add(objProductItemProcessInfo);
            }
        }

        public void MappingToProductItemMaterial(string groupName, DataTable dt, List<IPProductItemMaterialsInfo> materialList, List<AAColumnAliasInfo> aliasImportsList)
        {
            IPProductItemMaterialsInfo objProductionItemsInfo = new IPProductItemMaterialsInfo();
            foreach (DataRow row in dt.Rows)
            {
                objProductionItemsInfo = (IPProductItemMaterialsInfo)GetObjectFromDataRow(row, objProductionItemsInfo.GetType(), aliasImportsList);
                if (objProductionItemsInfo != null && !string.IsNullOrWhiteSpace(objProductionItemsInfo.IPProductionItemCode))
                    materialList.Add(objProductionItemsInfo);
            }
        }

        public object GetObjectFromDataRow(DataRow row, Type type, List<AAColumnAliasInfo> aliasList)
        {
            object obj = type.InvokeMember("", System.Reflection.BindingFlags.CreateInstance, null, null, null);
            string columnName = string.Empty;
            AAColumnAliasInfo objColumnAliasInfo = new AAColumnAliasInfo();
            decimal decimalValue = 0;
            bool isConverter = false;
            foreach (DataColumn column in row.Table.Columns)
            {
                isConverter = false;
                object objValue = row[column];
                objColumnAliasInfo = aliasList.Where(o => o.AAColumnAliasCaption.ToLower() == column.ColumnName.ToLower()).FirstOrDefault();
                if (objColumnAliasInfo == null)
                    continue;

                PropertyInfo property = obj.GetType().GetProperty(objColumnAliasInfo.AAColumnAliasName);
                if (property != null)
                    property.SetValue(obj, ToPropertyDataType(column.DataType, property.PropertyType, objValue), null);
            }
            return obj;
        }

        public object ToPropertyDataType(Type fromType, Type toType, object objValue)
        {
            if (toType.Equals(typeof(string)) || toType.Equals(typeof(String)))
            {
                return objValue == null ? string.Empty : objValue.ToString().Trim();
            }
            if (objValue == null)
                return objValue;

            if (fromType.Equals(toType))
                return objValue;

            if (toType.Equals(typeof(decimal)) || toType.Equals(typeof(Decimal)))
            {
                decimal value = 0;
                Decimal.TryParse(objValue.ToString(), out value);
                return Math.Round(value, 6, MidpointRounding.AwayFromZero);
            }
            if (toType.Equals(typeof(int)))
            {
                decimal value = 0;
                Decimal.TryParse(objValue.ToString(), out value);
                return (int)value;
            }
            if (toType.Equals(typeof(bool)) || toType.Equals(typeof(Boolean)))
            {
                return !string.IsNullOrWhiteSpace(objValue.ToString());
            }
            return objValue;
        }

        public DataSet GetDataFromExcel(string filePath, string connectionString)
        {
            DataSet ds = new DataSet();
            try
            {
                List<string> sheetNames = new List<string>();
                System.Data.OleDb.OleDbDataAdapter command;

                string commandTemplate = "SELECT * FROM [{0}]";
                string commandRun = string.Empty;
                using (OleDbConnection cn = new OleDbConnection(connectionString))
                {
                    cn.Open();
                    DataTable dt = cn.GetSchema("Tables");
                    foreach (DataRow dr in dt.Rows)
                    {
                        sheetNames.Add(dr["TABLE_NAME"].ToString());
                    }
                    sheetNames.ForEach(o =>
                    {
                        commandRun = string.Format(commandTemplate, o);
                        command = new System.Data.OleDb.OleDbDataAdapter(commandRun, cn);
                        command.TableMappings.Add("Table", o);
                        command.Fill(ds);
                    });
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
            return ds;
        }

        public MMProductionNormsInfo SaveBOMFromImport(ICProductsInfo item,
                                      List<IPProductionItemsInfo> semiProductsList,
                                      List<IPProductItemMaterialsInfo> materialsList,
                                      List<IPProductionItemsInfo> hardwardProductsList,
                                      List<IPProductionItemsInfo> ingredientPackagingsList,
                                      List<IPProductionItemsInfo> ingredientPaintsList,
                                      List<IPProductionItemsInfo> generalMaterialsList,
                                      List<IPProductItemProcessInfo> processList)
        {
            BOSProgressBar.Start("Đang lưu dữ liệu");
            bool isSaveSucess = true;
            MMProductionNormsController objProductionNormsController = new MMProductionNormsController();
            MMProductionNormsInfo objProductionNormsInfo = CreateProductionNorm(item, out isSaveSucess, true);
            if (!isSaveSucess)
            {
                MessageBox.Show("Có lỗi xảy ra khi tạo Bảng định mức(BOM).", BaseLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                BOSProgressBar.Close();
                return null;
            }
            objProductionNormsController.CreateObject(objProductionNormsInfo);
            List<ICProductItemMaterialsInfo> materialAfterConvertList = new List<ICProductItemMaterialsInfo>();
            ConvertIPToICProductItemMaterialsInfo(materialsList, materialAfterConvertList);

            List<ICProductsInfo> productList = SaveSemiProductsList(item, objProductionNormsInfo, semiProductsList, materialAfterConvertList, out isSaveSucess);
            if (!isSaveSucess)
            {
                MessageBox.Show("Có lỗi xảy ra khi lưu bán thành phẩm.", BaseLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                BOSProgressBar.Close();
                return null;
            }
            ICProductItemsController objProductItemsController = new ICProductItemsController();
            List<ICProductItemsInfo> productStructure = objProductItemsController.GetProductItemByProductionNormID(objProductionNormsInfo.MMProductionNormID);

            SaveMaterialsList(objProductionNormsInfo, productList, semiProductsList, materialAfterConvertList, productStructure);
            SaveProcessList(objProductionNormsInfo, productList, processList, productStructure);
            MMProductionNormItemsController pnisController = new MMProductionNormItemsController();
            List<MMProductionNormItemsInfo> pniSemiProductsList = pnisController.GetItemForGroupByID(objProductionNormsInfo.MMProductionNormID, ProductionNormItemGroup.SemiProduct.ToString());
            SaveProductionNormItem(objProductionNormsInfo, productList, pniSemiProductsList, hardwardProductsList, ProductionNormItemGroup.Hardware.ToString());
            SaveProductionNormItem(objProductionNormsInfo, productList, pniSemiProductsList, ingredientPaintsList, ProductionNormItemGroup.IngredientPaint.ToString());
            SaveProductionNormItem(objProductionNormsInfo, productList, pniSemiProductsList, ingredientPackagingsList, ProductionNormItemGroup.IngredientPackaging.ToString());
            SaveProductionNormItem(objProductionNormsInfo, productList, pniSemiProductsList, generalMaterialsList, ProductionNormItemGroup.GeneralMaterial.ToString());
            BOSProgressBar.Close();
            return objProductionNormsInfo;
        }

        public List<ICProductsInfo> SaveSemiProductsList(ICProductsInfo carcass, MMProductionNormsInfo objProductionNormsInfo, List<IPProductionItemsInfo> semiProductsList, List<ICProductItemMaterialsInfo> materialList, out bool isSuccess)
        {
            List<ICProductsInfo> semiList = new List<ICProductsInfo>();

            ICProductsController objProductsController = new ICProductsController();

            ICMeasureUnitsController objMeasureUnitsController = new ICMeasureUnitsController();
            List<ICMeasureUnitsInfo> measureUnitsList = objMeasureUnitsController.GetAllAliveMeasureUnit();
            ICMeasureUnitsInfo objMeasureUnitsInfo = new ICMeasureUnitsInfo();

            ICPriceCalculationMethodsController objPriceCalculationMethodsController = new ICPriceCalculationMethodsController();
            ICPriceCalculationMethodsInfo objPriceCalculationMethodsInfo = objPriceCalculationMethodsController.GetPriceCalculationMethodDefault();
            if (objPriceCalculationMethodsInfo == null)
                objPriceCalculationMethodsInfo = new ICPriceCalculationMethodsInfo();

            int index = 0;
            semiProductsList.ForEach(o =>
            {
                index++;
                ICProductsForViewInfo source = BOSApp.CurrentProductList.Where(p => p.ICProductNo == o.ICProductNo).FirstOrDefault();
                ICProductsInfo objProductsInfo = new ICProductsInfo();
                ICProductItemMaterialsInfo objProductItemMaterialsInfo = new ICProductItemMaterialsInfo();
                int materialWoodTypeListCount
                    = materialList
                    .Where(p => p.IPProductionItemParentCode == o.IPProductionItemCode)
                    .Select(p => p.FK_ICProductAttributeWoodTypeID)
                    .Distinct()
                    .Count();
                if (materialWoodTypeListCount == 1)
                    objProductItemMaterialsInfo = materialList.FirstOrDefault(p => p.IPProductionItemParentCode == o.IPProductionItemCode);
                if (source != null && !string.IsNullOrWhiteSpace(source.ICProductNo) && source.ICProductID > 0)
                {
                    BOSUtil.CopyViewObject(source, objProductsInfo);
                    objProductsInfo.IPProductionItemCode = o.IPProductionItemCode;
                    objProductsInfo.IPProductionItemParentCode = o.IPProductionItemParentCode;
                    objProductsInfo.ICProductItemQty = o.IPProductionItemProductQty;
                    objProductsInfo.ICProductComment = o.IPProductionItemComment;
                    objProductsInfo.FK_ICProductCarcassID = objProductionNormsInfo.FK_ICProductID;
                    objProductsInfo.ICProductOrderID = index;
                    objProductsInfo.FK_ICProductAttributeWoodTypeID
                        = objProductsInfo.FK_ICProductAttributeWoodTypeID == 0
                        ? objProductItemMaterialsInfo.FK_ICProductAttributeWoodTypeID
                        : objProductsInfo.FK_ICProductAttributeWoodTypeID;
                    objProductsInfo.ICProductCode
                        = string.IsNullOrWhiteSpace(source.ICProductCode)
                        ? o.IPProductionItemProductCode
                        : source.ICProductCode;
                    semiList.Add(objProductsInfo);
                    return;
                }
                objProductsInfo = ToSemiProductsInfo(o);
                objMeasureUnitsInfo = measureUnitsList.Where(u => u.ICMeasureUnitName == o.ICMeasureUnitName).FirstOrDefault();
                objProductsInfo.FK_ICProductBasicUnitID = objMeasureUnitsInfo == null ? 0 : objMeasureUnitsInfo.ICMeasureUnitID;
                objProductsInfo.FK_ICProductPurchaseUnitID = objProductsInfo.FK_ICProductBasicUnitID;
                objProductsInfo.FK_ICPriceCalculationMethodID = objPriceCalculationMethodsInfo.ICPriceCalculationMethodID;
                objProductsInfo.FK_ICProductCarcassID = objProductionNormsInfo.FK_ICProductID;
                objProductsInfo.IPProductionItemCode = o.IPProductionItemCode;
                objProductsInfo.IPProductionItemParentCode = o.IPProductionItemParentCode;
                objProductsInfo.ICProductItemQty = o.IPProductionItemProductQty;
                objProductsInfo.ICProductDepreciationRate = o.ICProductDepreciationRate;
                objProductsInfo.ICProductComment = o.IPProductionItemComment;
                objProductsInfo.ICProductJoinery = o.IPProductJoinery;
                objProductsInfo.FK_ICProductAttributeSemiProductSpecialityID = o.FK_ICProductAttributeSemiProductSpecialityID;
                objProductsInfo.ICProductOrderID = index;
                objProductsInfo.FK_ICProductAttributeWoodTypeID = objProductItemMaterialsInfo.FK_ICProductAttributeWoodTypeID;
                objProductsInfo.FK_ICProductAttributeColorID = o.FK_ICProductAttributeColorID;
                objProductsInfo.ICProductAttributeColorText = o.ICProductAttributeColorText;
                objProductsInfo.ICProductColorAttribute = o.ICProductAttributeOtherColorID;
                objProductsInfo.ICProductColorPaintA = o.ICProductColorPaintA;
                objProductsInfo.ICProductColorPaintB = o.ICProductColorPaintB;
                objProductsInfo.ICProductColorPaintC = o.ICProductColorPaintC;
                objProductsInfo.ICProductPaintProcessA = o.ICProductPaintProcessA;
                objProductsInfo.ICProductPaintProcessB = o.ICProductPaintProcessB;
                objProductsInfo.ICProductPaintProcessC = o.ICProductPaintProcessC;
                semiList.Add(objProductsInfo);
            });
            isSuccess = false;
            GenerateProductNo(semiList, out isSuccess);
            if (!isSuccess)
                return null;

            bool isUpdateDataSource = false;
            SaveSemiProduct(objProductionNormsInfo, carcass, semiList, out isUpdateDataSource, null,false);
            if (isUpdateDataSource)
            {
                BOSApp.InvalidateProductList();
            }
            semiList.ForEach(s =>
            {
                if (s.MaterialList != null)
                {
                    foreach (var item in s.MaterialList)
                    {
                        item.FK_ICProductDetailID = s.ICProductDetailID;
                    }

                }
                if (s.ProcessList != null)
                {
                    foreach (var item in s.ProcessList)
                    {
                        item.FK_ICProductDetailID = s.ICProductDetailID;
                    }
                }
            });
            CreateProductStructure(objProductionNormsInfo, semiList, semiProductsList, 0, null);
            MMProductionNormItemsController pnisController = new MMProductionNormItemsController();
            pnisController.CreateProductionNormItemSemiProduct(objProductionNormsInfo.MMProductionNormID);
            return semiList;
        }

        public ICProductsInfo ToSemiProductsInfo(IPProductionItemsInfo item)
        {
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            objProductsInfo.ICProductName = item.ICProductName;
            objProductsInfo.ICProductDesc = string.IsNullOrWhiteSpace(item.ICProductDesc) ? item.ICProductName : item.ICProductDesc;
            objProductsInfo.ICProductLength = item.ICProductLength;
            objProductsInfo.ICProductWidth = item.ICProductWidth;
            objProductsInfo.ICProductHeight = item.ICProductHeight;
            objProductsInfo.ICProductType = ProductType.SemiProduct.ToString();
            objProductsInfo.FK_ICDepartmentID = DepartmentID.SemiProduct;
            objProductsInfo.FK_ICProductGroupID = item.FK_ICProductGroupID;
            objProductsInfo.ICProductHavePaint = item.IPProductionItemHasPaint;
            objProductsInfo.ICProductQuantitative = item.ICProductQuantitative;
            objProductsInfo.ICProductDiameter = item.ICProductDiameter;
            objProductsInfo.ICProductDepth = item.ICProductDepth;
            objProductsInfo.FK_MMFormulaIDPaintA = item.FK_MMFormulaPaintAID;
            objProductsInfo.FK_MMFormulaIDPaintB = item.FK_MMFormulaPaintBID;
            objProductsInfo.FK_MMFormulaIDPaintC = item.FK_MMFormulaPaintCID;
            objProductsInfo.FK_MMFormulaIDPaintC = item.FK_MMFormulaPaintCID;
            objProductsInfo.ICProductCode = item.IPProductionItemProductCode;
            return objProductsInfo;
        }

        public void GenerateProductNo(List<ICProductsInfo> productList, out bool isSuccess)
        {
            MMProductionNormsInfo mainobject = (MMProductionNormsInfo)CurrentModuleEntity.MainObject;
            int currentStart = 0;
            isSuccess = true;
            GEGenerateProductNoConfigsController objGenerateProductNoConfigsController = new GEGenerateProductNoConfigsController();
            if (productList.Count() == 0)
                return;

            ICProductsInfo defualt = productList.Where(o => o.ICProductID != mainobject.FK_ICProductID && o.ICProductType == ProductType.SemiProduct.ToString()).FirstOrDefault();
            int department = defualt != null ? defualt.FK_ICDepartmentID : DepartmentID.SemiProduct;
            GEGenerateProductNoConfigsInfo objGenerateProductNoConfigsInfo = objGenerateProductNoConfigsController.GetProductNoByDepartmentID(department, BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            if (objGenerateProductNoConfigsInfo == null)
            {
                MessageBox.Show("Vui lòng cấu hình quy tắc sinh mã Bán thành phẩm.", BaseLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                isSuccess = false;
                return;
            }
            productList.OrderBy(x => x.ICProductOrderID).ForEach(o =>
            {
                if (o.ICProductID > 0)
                    return;
                string stGenerateSemiProductNoForHappy = ADConfigValueUtility.GetConfigTextByGroupAndValue("GenerateSemiProductNoForHappy", "true");
                bool isEndemic = bool.Parse(stGenerateSemiProductNoForHappy != string.Empty ? stGenerateSemiProductNoForHappy : "false");
                if (isEndemic)
                    o.ICProductNo = GetProductNoFromConfigEndemic(o, ref currentStart, objGenerateProductNoConfigsInfo, productList);
                else
                    o.ICProductNo = GetProductNoFromConfig(o, ref currentStart, objGenerateProductNoConfigsInfo);
            });
            if (productList.Where(o => string.IsNullOrEmpty(o.ICProductNo) && o.ICProductID == 0).Count() > 0)
            {
                BOSApp.ShowMessage("Không thể sinh mã cho BTP vui lòng kiểm tra lại.");
                isSuccess = false;
                return;
            }
        }

        public void SaveSemiProduct(MMProductionNormsInfo objProductionNormsInfo
            , ICProductsInfo carcass
            , List<ICProductsInfo> productList
            , out bool isUpdateDataSource
            , List<ICProductsInfo> productBackupList
            , bool isUpdatepaint)
        {
            bool tempUpdate = false;
            ICProductsController objProductsController = new ICProductsController();
            List<ICProductDetailsInfo> DeleteItem = new List<ICProductDetailsInfo>();
            if (!isUpdatepaint)
            {
                if (productBackupList != null && productBackupList.Count > 0)
                {
                    List<ICProductsInfo> checkList = productList.Where(x => x.ICProductDetailID > 0).ToList();
                    foreach (ICProductsInfo item in productBackupList.Where(x => x.ICProductDetailID > 0))
                    {
                        int count = 0;
                        if (checkList != null)
                            count = checkList.Where(x => x.ICProductDetailID == item.ICProductDetailID).ToList().Count();
                        if (count == 0)
                        {
                            ICProductDetailsInfo delete = new ICProductDetailsInfo();
                            delete.Id = item.ICProductDetailID;
                            delete.FK_ICProductID = item.ICProductID;
                            delete.FK_ICProductParentID = item.FK_ICProductCarcassID;
                            delete.FK_MMProductionNormID = item.FK_MMProductionNormID;
                            DeleteItem.Add(delete);
                        }
                    }
                }
            }

            ICProductTypeAccountConfigsController ctacsController = new ICProductTypeAccountConfigsController();
            ICProductTypeAccountConfigsInfo ctac = (ICProductTypeAccountConfigsInfo)ctacsController.GetObjectByName(ADConfigValueUtility.GetConfigTextByGroupAndValue("ProductType", ProductType.SemiProduct.ToString()));

            List<ICProductDetailsInfo> modifyItems = new List<ICProductDetailsInfo>();
            productList.ForEach(o =>
            {
                if (!isUpdatepaint)
                {
                    o.VituralID = Guid.NewGuid();
                    if (o.ICProductID == 0)
                    {
                        if (ctac != null)
                        {
                            o.FK_ICProductTypeAccountConfigID = ctac.ICProductTypeAccountConfigID;
                            o.FK_ACAccountCostPriceID = ctac.FK_ACAccountCostPriceID;
                            o.FK_ACAccountDiscountID = ctac.FK_ACAccountDiscountID;
                            o.FK_ACAccountID = ctac.FK_ACAccountID;
                            o.FK_ACAccountRevenueID = ctac.FK_ACAccountRevenueID;
                            o.FK_ACAccountRevenueInternalID = ctac.FK_ACAccountRevenueInternalID;
                            o.FK_ACAccountSaleReturnID = ctac.FK_ACAccountSaleReturnID;
                        }
                        o.AACreatedDate = BOSApp.GetCurrentServerDate();
                        o.AACreatedUser = BOSApp.CurrentUser;
                        objProductsController.CreateObject(o);
                        tempUpdate = true;
                    }
                    else
                    {
                        o.AAUpdatedDate = BOSApp.GetCurrentServerDate();
                        o.AAUpdatedUser = BOSApp.CurrentUser;
                        if (o.ICProductType != ProductType.Product.ToString())
                            objProductsController.UpdateObject(o);
                        tempUpdate = true;
                    }
                }
                ICProductDetailsInfo update = new ICProductDetailsInfo();
                ToProductDetail(o, update);
                update.FK_MMProductionNormID = objProductionNormsInfo.MMProductionNormID;
                update.ProductVirtualID = o.VituralID;
                modifyItems.Add(update);
            });
            if (!isUpdatepaint)
                modifyItems.InsertOrUpdateObject();
            else {
                SaveItemWithDataTableType.UpdateColumnItem<ICProductDetailsInfo>(modifyItems, "ICProductDetailID", "ICProductDetails", objProductionNormsInfo.MMProductionNormID, BOSApp.CurrentUsersInfo.ADUserName, "ICProductDetails_UpdatePaint");
            }
            ICProductsInfo productsInfo;
            modifyItems.ForEach(pd =>
            {
                productsInfo = productList.Where(o => o.VituralID == pd.ProductVirtualID).FirstOrDefault();
                if (productsInfo != null)
                    productsInfo.ICProductDetailID = pd.Id;
            });
            if (DeleteItem != null && DeleteItem.Count > 0)
                SaveItemWithDataTableType.DeleteItem<ICProductDetailsInfo>(DeleteItem, "ICProductDetails", BOSApp.CurrentUsersInfo.ADUserName);

            isUpdateDataSource = tempUpdate;

        }
        public ICProductDetailsInfo ToProductDetail(ICProductsInfo from, ICProductDetailsInfo to)
        {
            BOSUtil.CopyObject(from, to);
            to.FK_ICProductParentID = from.FK_ICProductCarcassID;
            to.FK_ICProductID = from.ICProductID;
            to.Id = from.ICProductDetailID;
            to.ICProductDetailOldID = from.ICProductDetailID;
            to.FK_MMProductionNormID = from.FK_MMProductionNormID;
            to.ICProductDetailProductNo = from.ICProductNo;
            to.ICProductDetailProductName = from.ICProductName;
            to.ICProductDetailProductDesc = from.ICProductDesc;
            to.ICProductHeight = from.ICProductHeight;
            to.ICProductWidth = from.ICProductWidth;
            to.ICProductLength = from.ICProductLength;
            to.ICProductBlock = from.ICProductBlock;
            to.ICProductQuantitative = from.ICProductQuantitative;
            to.ICProductDepth = from.ICProductDepth;
            to.ICProductDepreciationRate = from.ICProductDepreciationRate;
            to.ICProductDepreciationQty = from.ICProductDepreciationQty;
            to.ICProductDetailTolenrance = 0;//from.ICProductPlusTolerance;
            to.ICProductDetailSerial = from.ICProductDetailSerial;
            to.FK_ICProductAttributeQualityID = from.FK_ICProductAttributeQualityID;
            to.FK_ICProductAttributeSemiProductSpecialityID = from.FK_ICProductAttributeSemiProductSpecialityID;
            to.FK_ICProductAttributeWoodTypeID = from.FK_ICProductAttributeWoodTypeID;
            to.FK_MMFormulaIDPaintA = from.FK_MMFormulaIDPaintA;
            to.FK_MMFormulaIDPaintB = from.FK_MMFormulaIDPaintB;
            to.FK_MMFormulaIDPaintC = from.FK_MMFormulaIDPaintC;
            to.ICProductHavePaint = from.ICProductHavePaint;
            to.HasComponent = from.HasComponent;
            to.FK_MMProcessID = from.FK_MMProcessID;
            to.ICProductJoinery = from.ICProductJoinery;
            to.ICProductComment = from.ICProductComment;
            to.ICProductDiameter = from.ICProductDiameter;
            to.ICProductIsReUse = from.ICProductIsReUse;
            to.ICProductSizeAndSpecifiCations = from.ICProductSizeAndSpecifiCations;
            to.ICProductDetailCode01Combo = from.IPProductionItemCode;
            to.ICProductDetailCode02Combo = from.ICProductCode;
            to.ICProductDetailCode03Combo = from.ICProductOrderID > 0 ? from.ICProductOrderID.ToString() : "0";
            to.FK_ICProductGroupID = from.FK_ICProductGroupID;
            to.ICProductDetailCode04Combo = from.FK_ICProductAttributeColorID.ToString();
            to.ICProductDetailCode05Combo = from.FK_ICProductBasicUnitID.ToString();
            to.ICProductDetailCode06Combo = from.ICProductAttributeColorText;
            to.ICProductDetailCode07Combo = from.ICProductColorAttribute;
            to.ICProductDetailCode08Combo = from.ICProductColorPaintA;
            to.ICProductDetailCode09Combo = from.ICProductColorPaintB;
            to.ICProductDetailCode10Combo = from.ICProductColorPaintC;
            to.ICProductDetailCode11Combo = from.ICProductPaintProcessA;
            to.ICProductDetailCode12Combo = from.ICProductPaintProcessB;
            to.ICProductDetailCode13Combo = from.ICProductPaintProcessC;
            to.ICProductDetailCode14Combo = from.ICProductPaintProcessDefault;
            to.ICConfigProductionComplexityType = from.ICConfigProductionComplexityType;
            return to;
        }

        public void CreateProductStructure(MMProductionNormsInfo objProductionNormsInfo, List<ICProductsInfo> productList, List<IPProductionItemsInfo> semiProductsList, int parentID, ICProductsInfo objParentProductsInfo)
        {
            string parentCode = objParentProductsInfo == null ? string.Empty : objParentProductsInfo.IPProductionItemCode;
            ICProductItemsController objProductItemsController = new ICProductItemsController();
            List<ICProductItemsInfo> productStructure = ToProductItemList(
                                                productList,
                                                semiProductsList.Where(o => (string.IsNullOrWhiteSpace(o.IPProductionItemParentCode) && string.IsNullOrWhiteSpace(parentCode))
                                                                            || o.IPProductionItemParentCode == parentCode).ToList()
                                                , parentID, parentCode, objProductionNormsInfo.MMProductionNormID);
            if (productStructure == null)
                return;
            int productItemID = 0;
            ICProductsInfo childProductsInfo = new ICProductsInfo();
            productStructure.ForEach(o =>
            {
                if (string.IsNullOrWhiteSpace(o.IPProductItemParentCode))
                    o.ICProductionItemParentCode = o.IPProductionItemCode;
                productItemID = objProductItemsController.CreateObject(o);
                childProductsInfo = productList.Where(p => p.IPProductionItemCode == o.IPProductionItemCode).FirstOrDefault();
                if (childProductsInfo == null)
                    return;

                childProductsInfo.ICProductItemID = productItemID;
                CreateProductStructure(objProductionNormsInfo, productList, semiProductsList, o.ICProductItemID, childProductsInfo);
            });
        }

        public List<ICProductItemsInfo> ToProductItemList(List<ICProductsInfo> productList, List<IPProductionItemsInfo> semiProductsList, int parentID, string parentCode, int productionNormID)
        {
            if (semiProductsList.Count() == 0)
                return null;

            ICProductsInfo child;
            ICProductsInfo parent = productList.Where(o => o.IPProductionItemParentCode == parentCode).FirstOrDefault();
            List<ICProductItemsInfo> productStructure = new List<ICProductItemsInfo>();
            ICProductItemsInfo objProductItemsInfo = new ICProductItemsInfo();
            semiProductsList.ForEach(o =>
            {
                child = productList.Where(p => (string.IsNullOrWhiteSpace(p.IPProductionItemCode) && string.IsNullOrWhiteSpace(o.IPProductionItemCode)) || p.IPProductionItemCode == o.IPProductionItemCode).FirstOrDefault();
                if (child == null)
                    return;

                objProductItemsInfo = new ICProductItemsInfo();
                objProductItemsInfo.FK_ICProductItemChildID = child.ICProductID;
                objProductItemsInfo.FK_ICProductItemParentID = parent == null ? 0 : parent.ICProductID;
                objProductItemsInfo.ICProductItemQty = o.IPProductionItemProductQty;
                objProductItemsInfo.FK_MMProductionNormID = productionNormID;
                objProductItemsInfo.ICProductItemParentID = parentID;
                objProductItemsInfo.IPProductionItemCode = o.IPProductionItemCode;
                objProductItemsInfo.ICProductItemCode = o.IPProductionItemCode;
                objProductItemsInfo.IPProductItemParentCode = parentCode;
                objProductItemsInfo.ICProductionItemParentCode = parentCode;
                objProductItemsInfo.FK_ICProductDetailID = child.ICProductDetailID;
                productStructure.Add(objProductItemsInfo);
            });
            return productStructure;
        }

        public void SaveProcessList(MMProductionNormsInfo objProductionNormsInfo, List<ICProductsInfo> productList, List<IPProductItemProcessInfo> processList, List<ICProductItemsInfo> productStructure)
        {
            List<IPProductItemProcessInfo> productProcessList = processList.Where(o => string.IsNullOrWhiteSpace(o.IPProductionItemParentCode)).ToList();

            List<ICProductItemProcesssInfo> processCreateList = new List<ICProductItemProcesssInfo>();
            ICProductItemProcesssInfo objProductItemProcesssInfo = new ICProductItemProcesssInfo();
            IPProductItemProcessInfo itemProcessInfo = new IPProductItemProcessInfo();
            ICProductsInfo parentProductsInfo = new ICProductsInfo();

            List<ICProductItemProcesssInfo> childList = new List<ICProductItemProcesssInfo>();

            productProcessList.ForEach(o =>
            {
                childList = new List<ICProductItemProcesssInfo>();
                childList = ToProductItemProcess(o, objProductionNormsInfo.FK_ICProductID, productStructure);
                processCreateList.AddRange(childList);
            });

            processList.ForEach(o =>
            {
                if (string.IsNullOrWhiteSpace(o.IPProductionItemParentCode))
                    return;

                parentProductsInfo = productList.Where(p => p.IPProductionItemCode == o.IPProductionItemParentCode).FirstOrDefault();
                if (parentProductsInfo == null)
                    return;

                childList = new List<ICProductItemProcesssInfo>();
                childList = ToProductItemProcess(o, parentProductsInfo.ICProductID, productStructure, objProductionNormsInfo.FK_ICProductID);
                processCreateList.AddRange(childList);
            });

            ICProductItemProcesssController objProductItemProcesssController = new ICProductItemProcesssController();
            processCreateList.ForEach(o =>
            {
                o.FK_MMProductionNormID = objProductionNormsInfo.MMProductionNormID;
                objProductItemProcesssController.CreateObject(o);
            });
        }

        public List<ICProductItemProcesssInfo> ToProductItemProcess(IPProductItemProcessInfo item, int productID, List<ICProductItemsInfo> productStructure, int productCarcassID = 0)
        {
            ICProductAttributeItemsController objProductAttributeItemsController = new ICProductAttributeItemsController();
            List<ICProductAttributeItemsInfo> processItemList = objProductAttributeItemsController.GetMMOperationsByProcessID(item.FK_MMProcessID);
            ICProductItemProcesssInfo objProductItemProcesssInfo = new ICProductItemProcesssInfo();
            List<ICProductItemProcesssInfo> itemProcessList = new List<ICProductItemProcesssInfo>();
            ICProductItemsInfo strucItemsInfo = FindProductItemByProductID(productID, productStructure);
            processItemList.ForEach(o =>
            {
                objProductItemProcesssInfo = new ICProductItemProcesssInfo();
                objProductItemProcesssInfo = ToProductItemProcess(o);
                objProductItemProcesssInfo.FK_ICProductID = productID;
                objProductItemProcesssInfo.FK_ICProductDetailID = strucItemsInfo == null ? 0 : strucItemsInfo.FK_ICProductDetailID;
                objProductItemProcesssInfo.FK_ICProductCarcassID = productCarcassID;
                itemProcessList.Add(objProductItemProcesssInfo);
            });
            if (string.IsNullOrWhiteSpace(item.MMProcessNo) && !string.IsNullOrWhiteSpace(item.MMOperationNo))
            {
                objProductItemProcesssInfo = new ICProductItemProcesssInfo();
                objProductItemProcesssInfo.FK_MMOperationID = item.FK_MMOperationID;
                objProductItemProcesssInfo.FK_MMOperationSynID = item.FK_MMOperationSynID;
                objProductItemProcesssInfo.FK_ICProductID = productID;
                objProductItemProcesssInfo.FK_ICProductCarcassID = productCarcassID;
                objProductItemProcesssInfo.FK_ICProductDetailID = strucItemsInfo == null ? 0 : strucItemsInfo.FK_ICProductDetailID;
                objProductItemProcesssInfo.ICProductItemProcessPeriod = item.ICProductItemProcessPeriod;
                objProductItemProcesssInfo.ICProductItemProcessInOutStockCheck = item.ICProductItemProcessInOutStockCheck;
                objProductItemProcesssInfo.ICProductItemProcessForParentSyncCheck = item.ICProductItemProcessForParentSyncCheck;
                objProductItemProcesssInfo.ICProductItemProcessSyncProductCheck = item.ICProductItemProcessSyncProductCheck || (item.FK_MMOperationSynID > 0);
                objProductItemProcesssInfo.ICProductItemProcessIsPlan = item.ICProductItemProcessIsPlan || (item.FK_MMOperationSynID > 0) || item.ICProductItemProcessSyncProductCheck || item.ICProductItemProcessForParentSyncCheck;
                objProductItemProcesssInfo.ICProductItemProcessIsEndProcess = item.ICProductItemProcessIsEndProcess;
                itemProcessList.Add(objProductItemProcesssInfo);
            }
            return itemProcessList;
        }
        public ICProductItemProcesssInfo ToProductItemProcess(ICProductAttributeItemsInfo item)
        {
            return new ICProductItemProcesssInfo()
            {
                FK_MMOperationID = item.FK_MMOperationID,
                FK_MMOperationSynID = item.FK_MMOperationSynID,
                FK_MMProcessID = item.FK_MMProcessID,
                ICProductItemProcessPeriod = item.ICProductAttributeItemPeriod,
                ICProductItemProcessInOutStockCheck = item.ICProductAttributeItemInOutStockCheck,
                ICProductItemProcessIsPlan = item.ICProductAttributeItemIsPlan,
                ICProductItemProcessForParentSyncCheck = item.ICProductAttributeItemForParentSyncCheck,
                ICProductItemProcessSyncProductCheck = item.ICProductAttributeItemSyncProductCheck,
                ICProductItemProcessIsEndProcess = item.ICProductAttributeItemIsEndProcess,
            };
        }

        public bool SaveMaterialsList(MMProductionNormsInfo objProductionNormsInfo, List<ICProductsInfo> productList, List<IPProductionItemsInfo> semiProductsList, List<ICProductItemMaterialsInfo> materialsList, List<ICProductItemsInfo> productStructure)
        {
            if (materialsList.Count() == 0)
                return true;

            ICProductsForViewInfo objProductsInfo = new ICProductsForViewInfo();
            ICProductsInfo parentProductsInfo = new ICProductsInfo();

            ICProductItemMaterialsController objProductItemMaterialsController = new ICProductItemMaterialsController();

            ICProductItemsInfo strucItemsInfo = new ICProductItemsInfo();
            materialsList.ForEach(item =>
            {
                objProductsInfo = BOSApp.CurrentProductList.Where(o => o.ICProductNo == item.ICProductNo).FirstOrDefault();
                if (objProductsInfo == null)
                    return;

                if (string.IsNullOrWhiteSpace(item.IPProductionItemParentCode))
                    return;

                parentProductsInfo = productList.Where(o => o.IPProductionItemCode == item.IPProductionItemParentCode).FirstOrDefault();
                if (parentProductsInfo == null)
                    return;

                strucItemsInfo = FindProductItemByProductID(parentProductsInfo.ICProductID, productStructure);

                item.FK_ICProductID = parentProductsInfo.ICProductID;
                item.FK_MMProductionNormID = objProductionNormsInfo.MMProductionNormID;
                item.FK_ICProductDetailID = strucItemsInfo == null ? 0 : strucItemsInfo.FK_ICProductDetailID;
                ICProductsInfo iCProductsInfo = new ICProductsInfo();
                BOSUtil.CopyViewObject(objProductsInfo, iCProductsInfo);
                ChangeIngredient(item, parentProductsInfo, false, materialsList.Where(o => o.IPProductionItemParentCode == parentProductsInfo.IPProductionItemCode).ToList());
            });
            MMCalMaterialConfigsController objCalMaterialConfigsController = new MMCalMaterialConfigsController();
            List<MMCalMaterialConfigsInfo> calMaterialConfigList = objCalMaterialConfigsController.GetAllConfig();
            productList.ForEach(p =>
            {
                CalculateDepreciation(p, materialsList.Where(o => o.IPProductionItemParentCode == p.IPProductionItemCode).ToList(), calMaterialConfigList, productStructure);
            });
            materialsList.ForEach(o =>
            {
                objProductItemMaterialsController.CreateObject(o);
            });
            return false;
        }

        //public void CalculateDepreciation(ICProductsInfo product, List<ICProductsInfo> productsList, List<ICProductItemMaterialsInfo> materialsList, List<ICProductItemsInfo> productStructure)
        //{
        //    if (!product.HasComponent) // không có thành phần => tự tính => phân bổ tỉ lệ cho nguyên liệu
        //    {
        //        decimal qty = product.ICProductItemQty;
        //        decimal block = GetBlockByDemension(product.ICProductLength, product.ICProductWidth, product.ICProductHeight);
        //        product.ICProductDepreciationQty = block * product.ICProductDepreciationRate * qty;
        //        decimal sumKLTinh = 0;
        //        foreach (ICProductItemMaterialsInfo material in materialsList)
        //        {
        //            ICProductsInfo objPro = BOSApp.GetProductFromCurrentProductList(material.FK_ICProductMaterialID);
        //            if (objPro != null && objPro.ICProductType == ProductType.Lumber.ToString())
        //            {
        //                sumKLTinh += material.ICProductItemMaterialWoodQty * GetBlockByDemension(material.ICProductItemMaterialLength, material.ICProductItemMaterialWidth, material.ICProductItemMaterialHeigth);
        //            }
        //        }
        //        foreach (ICProductItemMaterialsInfo item in materialsList)
        //        {
        //            ICProductsInfo objPro = BOSApp.GetProductFromCurrentProductList(item.FK_ICProductMaterialID);
        //            if (objPro != null && objPro.ICProductType == ProductType.Lumber.ToString())
        //            {
        //                item.ICProductItemMaterialDepreciationQty = 0;
        //                item.ICProductItemMaterialDepreciationRate = 0;
        //                if (sumKLTinh > 0)
        //                {
        //                    item.KLTinh = item.ICProductItemMaterialWoodQty * GetBlockByDemension(item.ICProductItemMaterialLength
        //                                                                                   , item.ICProductItemMaterialWidth
        //                                                                                   , item.ICProductItemMaterialHeigth);
        //                    if (item.KLTinh > 0)
        //                    {
        //                        item.ICProductItemMaterialDepreciationQty = item.KLTinh * product.ICProductDepreciationQty / sumKLTinh;
        //                        item.ICProductItemMaterialDepreciationRate = item.ICProductItemMaterialDepreciationQty / item.KLTinh;
        //                    }
        //                }
        //                if (item.ICProductItemMaterialDepreciationRate == 0)
        //                    item.ICProductItemMaterialDepreciationRate = product.ICProductDepreciationRate > 0 ? product.ICProductDepreciationRate : 1;

        //            }
        //            else
        //            {
        //                if (item.ICProductItemMaterialDepreciationRate == 0 && product.ICProductDepreciationRate > 0)
        //                    item.ICProductItemMaterialDepreciationRate = product.ICProductDepreciationRate;

        //                if (item.ICProductItemMaterialDepreciationRate == 0)
        //                    item.ICProductItemMaterialDepreciationRate = product.ICProductDepreciationRate > 0 ? product.ICProductDepreciationRate : 1;

        //                item.ICProductItemMaterialDepreciationQty = item.ICProductItemMaterialDepreciationRate * item.ICProductItemMaterialWoodQty;
        //            }
        //        }
        //    }
        //    else
        //    {
        //        // có thành phần = sum kl tiêu hao của thành phần và nguyên liệu
        //        decimal sumComponentDepreciationQty = 0;
        //        decimal sumMaterialDepreciationQty = 0;
        //        decimal sumComponentBlock = 0;
        //        ICProductItemsInfo item = FindProductItemByProductID(product.ICProductID, productStructure);
        //        if (item == null)
        //            item = new ICProductItemsInfo();

        //        sumComponentDepreciationQty += productsList.Where(o => o.ICProductID == item.FK_ICProductItemChildID).Sum(o => o.ICProductDepreciationQty);
        //        sumComponentBlock += productsList.Where(o => o.ICProductID == item.FK_ICProductItemChildID).Sum(o => GetBlockByDemension(o.ICProductLength, o.ICProductWidth, o.ICProductHeight) * o.ICProductItemQty);

        //        MMExchangeRateConfigsController ercCtrl = new MMExchangeRateConfigsController();
        //        MMExchangeRateConfigsInfo erc = new MMExchangeRateConfigsInfo();
        //        if (materialsList != null && materialsList.Any())
        //        {
        //            foreach (ICProductItemMaterialsInfo materialsInfo in materialsList)
        //            {
        //                ICProductsInfo objPro = BOSApp.GetProductFromCurrentProductList(materialsInfo.FK_ICProductMaterialID);
        //                if (objPro != null && objPro.ICProductType == ProductType.Lumber.ToString())
        //                {
        //                    materialsInfo.ICProductItemMaterialDepreciationRate = product.ICProductDepreciationRate;
        //                    materialsInfo.ICProductItemMaterialDepreciationQty = materialsInfo.ICProductItemMaterialDepreciationRate
        //                                                                * materialsInfo.ICProductItemMaterialWoodQty
        //                                                                * GetBlockByDemension(materialsInfo.ICProductItemMaterialLength
        //                                                                                       , materialsInfo.ICProductItemMaterialWidth
        //                                                                                       , materialsInfo.ICProductItemMaterialHeigth);
        //                    if (materialsInfo.ICProductItemMaterialDepreciationRate == 0)
        //                        materialsInfo.ICProductItemMaterialDepreciationRate = product.ICProductDepreciationRate > 0 ? product.ICProductDepreciationRate : 1;

        //                    sumMaterialDepreciationQty += materialsInfo.ICProductItemMaterialDepreciationQty;
        //                }
        //                else if (objPro != null && objPro.ICProductType == ProductType.Steel.ToString())
        //                {
        //                    materialsInfo.ICProductItemMaterialWoodQty = GetProductSteelQty(product, materialsInfo);
        //                    if (materialsInfo.ICProductItemMaterialDepreciationRate == 0)
        //                        materialsInfo.ICProductItemMaterialDepreciationRate = product.ICProductDepreciationRate > 0 ? product.ICProductDepreciationRate : 1;

        //                    materialsInfo.ICProductItemMaterialDepreciationQty = materialsInfo.ICProductItemMaterialWoodQty * materialsInfo.ICProductItemMaterialDepreciationRate;
        //                }
        //                else
        //                {
        //                    if (materialsInfo.ICProductItemMaterialDepreciationRate == 0)
        //                        materialsInfo.ICProductItemMaterialDepreciationRate = product.ICProductDepreciationRate > 0 ? product.ICProductDepreciationRate : 1;
        //                    materialsInfo.ICProductItemMaterialDepreciationQty = materialsInfo.ICProductItemMaterialWoodQty * materialsInfo.ICProductItemMaterialDepreciationRate;
        //                }
        //            }
        //        }
        //        if (sumComponentBlock > 0 && BOSApp.UsingCarCass)
        //        {
        //            product.ICProductDepreciationQty = sumComponentDepreciationQty + sumMaterialDepreciationQty;
        //            product.ICProductDepreciationRate = 0;
        //            if (product.ICProductDepreciationQty > 0)
        //            {
        //                product.ICProductDepreciationRate = 0;
        //                product.ICProductDepreciationRate = product.ICProductDepreciationQty / sumComponentBlock;
        //            }
        //        }
        //    }
        //}

        public void SaveProductionNormItem(MMProductionNormsInfo objProductionNormsInfo, List<ICProductsInfo> productList, List<MMProductionNormItemsInfo> pniSemiProductsList, List<IPProductionItemsInfo> pniSourcesList, string group)
        {

            ICProductsForViewInfo objProductsInfo = new ICProductsForViewInfo();
            ICProductsInfo parentProductsInfo = new ICProductsInfo();

            ICMeasureUnitsController objMeasureUnitsController = new ICMeasureUnitsController();
            List<ICMeasureUnitsInfo> measureUnitList = objMeasureUnitsController.GetAllAliveMeasureUnit();
            ICMeasureUnitsInfo objMeasureUnitsInfo = new ICMeasureUnitsInfo();

            MMProductionNormItemsController pnisController = new MMProductionNormItemsController();
            List<MMProductionNormItemsInfo> pnisList = new List<MMProductionNormItemsInfo>();
            MMProductionNormItemsInfo objProductionNormItemsInfo = new MMProductionNormItemsInfo();
            MMProductionNormItemsInfo objChildInfo = new MMProductionNormItemsInfo();
            MMProductionNormItemsInfo parentSemiProductsInfo = new MMProductionNormItemsInfo();

            int productionNormItemID = 0;
            int sortOrder = 1;
            pniSourcesList.ForEach(item =>
            {
                if (!string.IsNullOrWhiteSpace(item.IPProductionItemPaintProcessNo) && group == ProductionNormItemGroup.IngredientPaint.ToString())
                {
                    MMPaintProcessesItemsController objPaintProcessController = new MMPaintProcessesItemsController();
                    List<MMPaintProcessesItemsInfo> paintProcessItemList = objPaintProcessController.GetItemForProductionNorm(item.FK_MMPaintProcessID);

                    paintProcessItemList.Where(o => o.FK_ICProductID == 0).All(proc =>
                    {
                        objProductionNormItemsInfo = new MMProductionNormItemsInfo();
                        if (proc.FK_ICProductID == 0)
                        {
                            objProductionNormItemsInfo.FK_MMOperationID = item.FK_MMOperationID;
                            objProductionNormItemsInfo.FK_MMPaintProcessesID = proc.FK_MMPaintProcessesID;
                            objProductionNormItemsInfo.FK_MMPaintProcessesItemID = proc.MMPaintProcessesItemID;
                            objProductionNormItemsInfo.MMProductionNormItemProductName = proc.MMPaintProcessesItemGroupName;
                            objProductionNormItemsInfo.MMProductionNormItemPaintPerOne = proc.MMPaintProcessesItemProductQty;
                            objProductionNormItemsInfo.MMProductionNormItemProductDesc = proc.MMPaintProcessesNo + " : " + proc.MMPaintProcessesDesc;
                            objProductionNormItemsInfo.MMProductionNormItemGroup = ProductType.IngredientPaint.ToString();
                            objProductionNormItemsInfo.FK_MMProductionNormID = objProductionNormsInfo.MMProductionNormID;
                            objProductionNormItemsInfo.AACreatedDate = BOSApp.GetCurrentServerDate();
                            objProductionNormItemsInfo.SubList = new BOSTreeList();
                            // tính m2 theo màu
                            //if (proc.FK_ICProductAttributeColorID > 0)
                            //{
                            //    objProductionNormItemsInfo.MMProductionNormItemPaint = pniSourcesList
                            //            .Where(s => s.FK_ICProductAttributeColorID == proc.FK_ICProductAttributeColorID
                            //                        && s.IPProductionItemHasPaint
                            //            ).Sum(s => s.IPProductionItemPaint); // chưa có m2 phải tính lại theo CT sơn A + B + C
                            //}
                            pnisController.CreateObject(objProductionNormItemsInfo);

                            List<MMPaintProcessesItemsInfo> childStep = paintProcessItemList.Where(p => p.MMPaintProcessesItemParentID == proc.MMPaintProcessesItemID).ToList();
                            if (childStep.Count() > 0)
                            {
                                foreach (MMPaintProcessesItemsInfo paint in childStep)
                                {
                                    objChildInfo = new MMProductionNormItemsInfo();
                                    SetProductionNormItemInfoFromPaintProcessesesItem(objChildInfo, paint);
                                    objChildInfo.FK_MMOperationID = item.FK_MMOperationID;
                                    objChildInfo.MMProductionNormItemPaint = item.IPProductionItemPaint;
                                    objChildInfo.MMProductionNormItemParentID = objProductionNormItemsInfo.MMProductionNormItemID;
                                    objChildInfo.MMProductionNormItemQuantity = item.IPProductionItemProductQty * objChildInfo.MMProductionNormItemPaintPerOne;
                                    objChildInfo.MMProductionNormItemQuantity = Math.Round(objChildInfo.MMProductionNormItemQuantity, 6, MidpointRounding.AwayFromZero);
                                    objChildInfo.FK_MMProductionNormID = objProductionNormsInfo.MMProductionNormID;
                                    objChildInfo.AACreatedDate = BOSApp.GetCurrentServerDate();
                                    pnisController.CreateObject(objChildInfo);
                                }

                            }
                        }
                        return true;
                    });
                }
                else
                {
                    objProductsInfo = BOSApp.CurrentProductList.Where(o => o.ICProductNo == item.ICProductNo).FirstOrDefault();
                    if (objProductsInfo == null && group != ProductionNormItemGroup.IngredientPackaging.ToString())
                        return;
                    else if (objProductsInfo == null)
                        objProductsInfo = new ICProductsForViewInfo();

                    parentProductsInfo = productList.Where(o => o.IPProductionItemCode == item.IPProductionItemParentCode).FirstOrDefault();
                    if (parentProductsInfo == null)
                        parentProductsInfo = new ICProductsInfo();

                    parentSemiProductsInfo = pniSemiProductsList.Where(o => o.FK_ICProductID == parentProductsInfo.ICProductID && o.FK_ICProductItemID == parentProductsInfo.ICProductItemID).FirstOrDefault();
                    int maxID = 0;
                    if (pnisList.Any())
                    {
                        maxID = pnisList.Max(t => t.AbstractID);
                    }
                    productionNormItemID = pniSemiProductsList.Where(o => o.FK_ICProductID == parentProductsInfo.ICProductID).Select(o => o.MMProductionNormItemID).FirstOrDefault();
                    objMeasureUnitsInfo = measureUnitList.Where(o => o.ICMeasureUnitName == item.ICMeasureUnitName).FirstOrDefault();
                    objProductionNormItemsInfo = new MMProductionNormItemsInfo();
                    BOSUtil.CopyObject(objProductsInfo, objProductionNormItemsInfo);
                    objProductionNormItemsInfo.FK_ICProductID = objProductsInfo.ICProductID;
                    objProductionNormItemsInfo.MMProductionNormItemNo = objProductsInfo.ICProductNo;
                    objProductionNormItemsInfo.MMProductionNormItemProductDesc = objProductsInfo.ICProductDesc;
                    objProductionNormItemsInfo.MMProductionNormItemProductName = objProductsInfo.ICProductName;
                    objProductionNormItemsInfo.FK_ICDepartmentID = objProductsInfo.FK_ICDepartmentID;
                    objProductionNormItemsInfo.MMProductionNormItemNeededTime = BOSApp.GetCurrentServerDate();
                    objProductionNormItemsInfo.MMProductionNormItemGroup = group;
                    objProductionNormItemsInfo.MMProductionNormItemProductSizeAndPacking = objProductsInfo.ICProductSizeAndSpecifiCations;
                    objProductionNormItemsInfo.MMProductionNormItemProductSupplierNumber = objProductsInfo.ICProductSupplierNumber;
                    objProductionNormItemsInfo.MMProductionNormItemProductInsideDimensionLength = objProductsInfo.ICProductInsideDimensionLength;
                    objProductionNormItemsInfo.MMProductionNormItemProductInsideDimensionWidth = objProductsInfo.ICProductInsideDimensionWidth;
                    objProductionNormItemsInfo.MMProductionNormItemProductInsideDimensionHeight = objProductsInfo.ICProductInsideDimensionHeight;
                    objProductionNormItemsInfo.MMProductionNormItemProductOverallDimensionLength = objProductsInfo.ICProductOverallDimensionLength;
                    objProductionNormItemsInfo.MMProductionNormItemProductOverallDimensionWidth = objProductsInfo.ICProductOverallDimensionWidth;
                    objProductionNormItemsInfo.MMProductionNormItemProductOverallDimensionHeight = objProductsInfo.ICProductOverallDimensionHeight;
                    objProductionNormItemsInfo.FK_ICProdAttPackingMaterialSpecialityID = objProductsInfo.FK_ICProdAttPackingMaterialSpecialityID;
                    objProductionNormItemsInfo.MMProductionNormItemPackagingNW = objProductsInfo.ICProductNetWeight;
                    objProductionNormItemsInfo.MMProductionNormItemPackagingGW = objProductsInfo.ICProductGrossWeight;
                    objProductionNormItemsInfo.MMProductionNormItemUnit = objProductsInfo.ICMeasureUnitName;
                    objProductionNormItemsInfo.FK_ICMeasureUnitID = objMeasureUnitsInfo == null ? objProductsInfo.FK_ICProductBasicUnitID : objMeasureUnitsInfo.ICMeasureUnitID;
                    objProductionNormItemsInfo.FK_MMSemiProductID = productionNormItemID;
                    objProductionNormItemsInfo.FK_MMOperationID = item.FK_MMOperationID;
                    objProductionNormItemsInfo.MMProductionNormItemSortOrder = sortOrder;
                    if (group == ProductionNormItemGroup.IngredientPaint.ToString())
                    {
                        objProductionNormItemsInfo.MMProductionNormItemPaintMixRatio = "100";
                        objProductionNormItemsInfo.MMProductionNormItemPaintPerOne = item.IPProductionItemProductQty;
                        objProductionNormItemsInfo.MMProductionNormItemPaint = item.IPProductionItemPaint;
                    }
                    objProductionNormItemsInfo.MMProductionNormItemHavePaint = item.IPProductionItemHasPaint;
                    objProductionNormItemsInfo.MMProductionNormItemQuantity = item.IPProductionItemProductQty;
                    objProductionNormItemsInfo.MMProductionNormItemComment = item.IPProductionItemComment;
                    objProductionNormItemsInfo.FK_MMProductionNormID = objProductionNormsInfo.MMProductionNormID;
                    objProductionNormItemsInfo.FK_MMSemiProductID = parentSemiProductsInfo == null ? 0 : parentSemiProductsInfo.MMProductionNormItemID;
                    objProductionNormItemsInfo.AbstractID = ++maxID;
                    int parentAbstractID = objProductionNormItemsInfo.AbstractID;
                    pnisList.Add(objProductionNormItemsInfo);
                    sortOrder++;
                }
            });
            pnisList.ForEach(o =>
            {
                pnisController.CreateObject(o);
            });
        }
        public void SaveProductionNormItemIngredientPackaging(MMProductionNormsInfo objProductionNormsInfo, List<ICProductsInfo> productList, List<MMProductionNormItemsInfo> pniSemiProductsList, List<IPProductionItemsInfo> pniSourcesList)
        {

            ICProductsForViewInfo objProductsInfo = new ICProductsForViewInfo();
            ICProductsInfo parentProductsInfo = new ICProductsInfo();

            ICMeasureUnitsController objMeasureUnitsController = new ICMeasureUnitsController();
            List<ICMeasureUnitsInfo> measureUnitList = objMeasureUnitsController.GetAllAliveMeasureUnit();
            ICMeasureUnitsInfo objMeasureUnitsInfo = new ICMeasureUnitsInfo();

            MMProductionNormItemsController pnisController = new MMProductionNormItemsController();
            List<MMProductionNormItemsInfo> pnisList = new List<MMProductionNormItemsInfo>();
            MMProductionNormItemsInfo objProductionNormItemsInfo = new MMProductionNormItemsInfo();
            MMProductionNormItemsInfo parentSemiProductsInfo = new MMProductionNormItemsInfo();

            int productionNormItemID = 0;
            int sortOrder = 1;
            pniSourcesList.ForEach(item =>
            {
                objProductsInfo = BOSApp.CurrentProductList.Where(o => o.ICProductNo == objProductsInfo.ICProductNo).FirstOrDefault();
                if (objProductsInfo == null)
                    objProductsInfo = new ICProductsForViewInfo();

                parentProductsInfo = productList.Where(o => o.IPProductionItemCode == objProductsInfo.IPProductionItemParentCode).FirstOrDefault();
                if (parentProductsInfo == null)
                    parentProductsInfo = new ICProductsInfo();

                parentSemiProductsInfo = pniSemiProductsList.Where(o => o.FK_ICProductID == parentProductsInfo.ICProductID && o.FK_ICProductItemID == parentProductsInfo.ICProductItemID).FirstOrDefault();
                int maxID = 0;
                if (pnisList.Any())
                {
                    maxID = pnisList.Max(t => t.AbstractID);
                }
                productionNormItemID = pniSemiProductsList.Where(o => o.FK_ICProductID == parentProductsInfo.ICProductID).Select(o => o.MMProductionNormItemID).FirstOrDefault();
                objMeasureUnitsInfo = measureUnitList.Where(o => o.ICMeasureUnitName == objProductsInfo.ICMeasureUnitName).FirstOrDefault();

                objProductionNormItemsInfo = new MMProductionNormItemsInfo();
                BOSUtil.CopyObject(objProductsInfo, objProductionNormItemsInfo);
                objProductionNormItemsInfo.MMProductionNormItemGroup = ProductType.IngredientPackaging.ToString();
                objProductionNormItemsInfo.FK_ICProductID = objProductsInfo.ICProductID;
                objProductionNormItemsInfo.FK_MMOperationID = item.FK_MMOperationID;
                objProductionNormItemsInfo.MMProductionNormItemNo = objProductsInfo.ICProductNo;
                objProductionNormItemsInfo.MMProductionNormItemProductDesc = objProductsInfo.ICProductDesc;
                objProductionNormItemsInfo.MMProductionNormItemProductName = objProductsInfo.ICProductName;
                objProductionNormItemsInfo.MMProductionNormItemProductSizeAndPacking = objProductsInfo.ICProductSizeAndSpecifiCations;
                objProductionNormItemsInfo.MMProductionNormItemProductSupplierNumber = objProductsInfo.ICProductSupplierNumber;
                objProductionNormItemsInfo.MMProductionNormItemProductInsideDimensionLength = objProductsInfo.ICProductInsideDimensionLength;
                objProductionNormItemsInfo.MMProductionNormItemProductInsideDimensionWidth = objProductsInfo.ICProductInsideDimensionWidth;
                objProductionNormItemsInfo.MMProductionNormItemProductInsideDimensionHeight = objProductsInfo.ICProductInsideDimensionHeight;
                objProductionNormItemsInfo.MMProductionNormItemProductOverallDimensionLength = objProductsInfo.ICProductOverallDimensionLength;
                objProductionNormItemsInfo.MMProductionNormItemProductOverallDimensionWidth = objProductsInfo.ICProductOverallDimensionWidth;
                objProductionNormItemsInfo.MMProductionNormItemProductOverallDimensionHeight = objProductsInfo.ICProductOverallDimensionHeight;
                objProductionNormItemsInfo.FK_ICProdAttPackingMaterialSpecialityID = objProductsInfo.FK_ICProdAttPackingMaterialSpecialityID;
                objProductionNormItemsInfo.MMProductionNormItemPackagingNW = objProductsInfo.ICProductNetWeight;
                objProductionNormItemsInfo.MMProductionNormItemPackagingGW = objProductsInfo.ICProductGrossWeight;
                objProductionNormItemsInfo.MMProductionNormItemUnit = objProductsInfo.ICMeasureUnitName;
                objProductionNormItemsInfo.FK_ICMeasureUnitID = objProductsInfo.FK_ICProductBasicUnitID;
                objProductionNormItemsInfo.FK_MMSemiProductID = parentSemiProductsInfo == null ? 0 : parentSemiProductsInfo.MMProductionNormItemID;
                objProductionNormItemsInfo.AbstractID = ++maxID;
                int parentAbstractID = objProductionNormItemsInfo.AbstractID;
                pnisList.Add(objProductionNormItemsInfo);
                sortOrder++;
            });
            pnisList.ForEach(o =>
            {
                pnisController.CreateObject(o);
            });
        }

        public void ChangeIngredient(ICProductItemMaterialsInfo item, ICProductsInfo parent, bool isChangeProduct = false, List<ICProductItemMaterialsInfo> materialList = null)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            ICProductsInfo materialProductsInfo = BOSApp.GetProductFromCurrentProductList(item.FK_ICProductMaterialID);
            if (materialProductsInfo == null || parent == null)
                return;

            if (materialList == null)
            {
                materialList = parent.MaterialList.ToList();
            }

            if (isChangeProduct)
            {
                item.ICProductItemMaterialLength = materialProductsInfo.ICProductLength;
                item.ICProductItemMaterialWidth = materialProductsInfo.ICProductWidth;
                item.ICProductItemMaterialHeigth = materialProductsInfo.ICProductHeight;
                item.FK_ICMeasureUnitID = materialProductsInfo.FK_ICProductBasicUnitID;
                item.FK_ICProductAttributeWoodTypeID = materialProductsInfo.FK_ICProductAttributeWoodTypeID;
                item.ICProductItemMaterialDepreciationRate = parent.ICProductDepreciationRate;
            }
            MMCalMaterialConfigsController objCalMaterialConfigsController = new MMCalMaterialConfigsController();
            List<MMCalMaterialConfigsInfo> calMaterialConfigList = objCalMaterialConfigsController.GetAllConfig();

            CalSpecificationItem(item, materialProductsInfo, parent);
            decimal sumKLTinh = 0;
            foreach (ICProductItemMaterialsInfo material in materialList)
            {
                ICProductsInfo objPro = BOSApp.GetProductFromCurrentProductList(material.FK_ICProductMaterialID);
                if (objPro != null && objPro.ICProductType == ProductType.Lumber.ToString())
                {
                    sumKLTinh += material.ICProductItemMaterialWoodQty * GetBlockByDemension(material.ICProductItemMaterialLength, material.ICProductItemMaterialWidth, material.ICProductItemMaterialHeigth);
                }
            }
            CalDepreciationItem(item, materialProductsInfo, parent, calMaterialConfigList, sumKLTinh);
            int materialCount = parent.MaterialList.Select(p => p.FK_ICProductAttributeWoodTypeID).Distinct().Count();
            parent.FK_ICProductAttributeWoodTypeID = materialCount == 1 ? materialProductsInfo.FK_ICProductAttributeWoodTypeID : 0;
        }

        public void CalSpecificationItem(ICProductItemMaterialsInfo item, ICProductsInfo materialProductsInfo, ICProductsInfo parent)
        {
            MMExchangeRateConfigsController objExchangeRateConfigsController = new MMExchangeRateConfigsController();
            MMExchangeRateConfigsInfo objExchangeRateConfigsInfo;
            if (materialProductsInfo.ICProductType == ProductAttributeGroup.AddMaterial.ToString())
            {
                objExchangeRateConfigsInfo = objExchangeRateConfigsController.GetExchangeRateConfigByProductGroupIDAndProductAttributeIDAndThick(0, materialProductsInfo.FK_ICProductAttributeWoodTypeID, parent.ICProductHeight);
                if (objExchangeRateConfigsInfo == null)
                    return;

                item.ICProductItemMaterialWidth = objExchangeRateConfigsInfo.MMExchangeRateConfigWidthValue;
                item.ICProductItemMaterialLength = 0;
                item.ICProductItemMaterialHeigth = 0;
                return;
            }
            objExchangeRateConfigsInfo = objExchangeRateConfigsController.GetByWoodTypeAndSpeciality(materialProductsInfo.FK_ICProductAttributeWoodTypeID, parent.FK_ICProductAttributeSemiProductSpecialityID);
            if (objExchangeRateConfigsInfo == null)
                return;

            item.ICProductItemMaterialLength = parent.ICProductLength + objExchangeRateConfigsInfo.MMExchangeRateConfigLengthBonus;
            item.ICProductItemMaterialWidth = parent.ICProductWidth + objExchangeRateConfigsInfo.MMExchangeRateConfigWidthBonus;
            item.ICProductItemMaterialIsGrain = materialProductsInfo.ICProductIsGrain;
        }

        public void CalDepreciationItem(ICProductItemMaterialsInfo item, ICProductsInfo materialProductsInfo, ICProductsInfo parent, List<MMCalMaterialConfigsInfo> calMaterialConfigList, decimal sumM3DepreciationQty)
        {
            decimal productQty = 1m;
            //ICProductItemsInfo finditem = FindProductItemByProductID(parent.ICProductID, productStructuresList);
            //if (finditem != null && finditem.FK_ICProductID > 0)
            //{
            //    productQty = finditem.ICProductItemQty;
            //}
            MMCalMaterialConfigsInfo objCalMaterialConfigsInfo = GetCalMaterialConfigs(calMaterialConfigList, materialProductsInfo);
            string strExpressionCalQty = objCalMaterialConfigsInfo.MMCalMaterialConfigQuantityExpression;
            string strExpressionDepreciationRate = objCalMaterialConfigsInfo.MMCalMaterialConfigConsumableExpression;
            string strExpressionDepreciationQty = objCalMaterialConfigsInfo.MMCalMaterialConfigDepreciationQtyExpression;

            decimal materialQty = item.ICProductItemMaterialWoodQty;
            decimal depreciationRate = item.ICProductItemMaterialDepreciationRate;
            decimal depreciationQty = 0;

            dynamic calParamater = new ExpandoObject();
            calParamater.DaiBTP = parent.ICProductLength;
            calParamater.RongBTP = parent.ICProductWidth;
            calParamater.DayBTP = parent.ICProductHeight;
            calParamater.TieuHaoBTP = parent.ICProductDepreciationRate;

            calParamater.DaiNL = item.ICProductItemMaterialLength;
            calParamater.RongNL = item.ICProductItemMaterialWidth;
            calParamater.DayNL = item.ICProductItemMaterialHeigth;
            calParamater.HaoHutNL = materialProductsInfo.ICProductConsumable;
            calParamater.TongM3NL = sumM3DepreciationQty;
            if (strExpressionCalQty == "CTChiVien")
            {
                MMFormulaConfigurationsInfo objFormulaConfigurationsInfo;
                MMConsumableConfigsInfo objConsumableConfigsInfo;
                objFormulaConfigurationsInfo = (new MMFormulaConfigurationsController()).GetFormulaConfigByFormulaID(item.FK_MMFormulaID);
                if (objFormulaConfigurationsInfo != null)
                {

                    materialQty = parent.ICProductHeight * objFormulaConfigurationsInfo.MMFormulaConfigurationTopQty +
                               parent.ICProductLength * objFormulaConfigurationsInfo.MMFormulaConfigurationLongEdgeQty +
                               parent.ICProductWidth * objFormulaConfigurationsInfo.MMFormulaConfigurationShortEdgeQty;
                    materialQty = productQty * (materialQty / 1000);
                    objConsumableConfigsInfo = (new MMConsumableConfigsController()).GetConsumableConfigsByProductAttributeID(materialProductsInfo.FK_ICProductAttributeWoodTypeID).FirstOrDefault();
                    if (objConsumableConfigsInfo != null && objConsumableConfigsInfo.MMConsumableConfigValue > 0)
                    {
                        item.ICProductItemMaterialDepreciationRate = objConsumableConfigsInfo.MMConsumableConfigValue;
                        materialQty = materialQty * objConsumableConfigsInfo.MMConsumableConfigValue;
                    }
                }
            }
            else if (!string.IsNullOrWhiteSpace(strExpressionCalQty))
            {
                try
                {

                    materialQty = Eval.Execute<decimal>(strExpressionCalQty, calParamater);
                }
                catch (Exception e)
                {
                    MessageBox.Show(e.Message, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            if (!string.IsNullOrWhiteSpace(strExpressionDepreciationRate))
            {
                try
                {
                    depreciationRate = Eval.Execute<decimal>(strExpressionDepreciationRate, calParamater);
                }
                catch (Exception e)
                {
                    MessageBox.Show(e.Message, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            depreciationRate = Math.Round(depreciationRate, RoundingNumber.FormatN4, MidpointRounding.AwayFromZero);
            item.ICProductItemMaterialWoodQty = productQty * materialQty;
            item.ICProductItemMaterialDepreciationRate = depreciationRate == 0 ? 1m : depreciationRate;

            calParamater.SLNL = item.ICProductItemMaterialWoodQty;
            calParamater.TieuHaoNL = item.ICProductItemMaterialDepreciationRate;

            //Rem code cho lâm việt chạy tạm thời.
            depreciationQty = item.ICProductItemMaterialDepreciationQty;
            //depreciationQty = item.ICProductItemMaterialWoodQty * item.ICProductItemMaterialDepreciationRate;
            if (!string.IsNullOrWhiteSpace(strExpressionDepreciationQty))
            {
                try
                {
                    depreciationQty = Eval.Execute<decimal>(strExpressionDepreciationQty, calParamater);
                    item.ICProductItemMaterialDepreciationQty = depreciationQty;
                }
                catch (Exception e)
                {
                    MessageBox.Show(e.Message, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            item.ICProductItemMaterialDepreciationQty = depreciationQty;
        }

        public MMCalMaterialConfigsInfo GetCalMaterialConfigs(List<MMCalMaterialConfigsInfo> calMaterialConfigList, ICProductsInfo materialProductsInfo)
        {
            if (materialProductsInfo.FK_ICProductGroupID == 0 && string.IsNullOrWhiteSpace(materialProductsInfo.ICProductType) && materialProductsInfo.FK_ICProductAttributeWoodTypeID == 0)
                return new MMCalMaterialConfigsInfo();

            MMCalMaterialConfigsInfo objCalMaterialConfigsInfo = calMaterialConfigList.Where(o => materialProductsInfo.ICProductType == o.MMProductType
                                                                                                  && materialProductsInfo.FK_ICProductAttributeWoodTypeID == o.FK_ICProductAttributeID)
                                                                                      .FirstOrDefault();
            if (objCalMaterialConfigsInfo == null)
                objCalMaterialConfigsInfo = calMaterialConfigList.Where(o => materialProductsInfo.ICProductType == o.MMProductType
                                                                             && o.FK_ICProductAttributeID == 0)
                                                                 .FirstOrDefault();

            if (objCalMaterialConfigsInfo == null)
                objCalMaterialConfigsInfo = calMaterialConfigList.Where(o => string.IsNullOrWhiteSpace(o.MMProductType)
                                                                             && materialProductsInfo.FK_ICProductAttributeWoodTypeID == o.FK_ICProductAttributeID)
                                                                 .FirstOrDefault();

            return objCalMaterialConfigsInfo == null ? new MMCalMaterialConfigsInfo() : objCalMaterialConfigsInfo;
        }

        public void CalculateDepreciation(ICProductsInfo product, List<MMCalMaterialConfigsInfo> calMaterialConfigList, List<ICProductItemsInfo> productStructuresList)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            decimal productQty = 1m;
            ICProductItemsInfo productStructuresInfo = FindProductItemByProductID(product.ICProductID, entity.ProductItemTreeList);
            if (productStructuresInfo != null)
            {
                productQty = productStructuresInfo.ICProductItemQty;
            }

            decimal sumComponentDepreciationQty = 0;
            decimal sumMaterialDepreciationQty = 0;
            decimal sumComponentBlock = 0;
            if (product.HasComponent)
            {
                ICProductsInfo filterItem;
                if (productStructuresInfo != null && productStructuresInfo.SubList != null && productStructuresInfo.SubList.Any())
                {
                    productStructuresList.ForEach(o =>
                    {
                        filterItem = entity.ProductList.FirstOrDefault(t => t.ICProductID == o.FK_ICProductItemChildID);
                        if (filterItem != null)
                        {
                            sumComponentDepreciationQty += filterItem.ICProductDepreciationQty;
                            sumComponentBlock += (GetBlockByDemension(filterItem.ICProductLength, filterItem.ICProductWidth, filterItem.ICProductHeight) * o.ICProductItemQty);
                        }
                    });
                }
            }
            decimal sumKLTinh = 0;
            foreach (ICProductItemMaterialsInfo material in product.MaterialList)
            {
                ICProductsInfo objPro = BOSApp.GetProductFromCurrentProductList(material.FK_ICProductMaterialID);
                if (objPro != null && objPro.ICProductType == ProductType.Lumber.ToString())
                {
                    sumKLTinh += material.ICProductItemMaterialWoodQty * GetBlockByDemension(material.ICProductItemMaterialLength, material.ICProductItemMaterialWidth, material.ICProductItemMaterialHeigth);
                }
            }
            product.MaterialList.ForEach(material =>
            {
                ICProductsInfo materialProductsInfo = BOSApp.GetProductFromCurrentProductList(material.FK_ICProductMaterialID);
                if (materialProductsInfo == null || product == null)
                    return;

                //CalSpecificationItem(material, materialProductsInfo, product, productStructuresList);
                CalDepreciationItem(material, materialProductsInfo, product, calMaterialConfigList, sumKLTinh);
            });

            if (sumComponentBlock > 0 && BOSApp.UsingCarCass)
            {
                product.ICProductDepreciationQty = sumComponentDepreciationQty + sumMaterialDepreciationQty;
                product.ICProductDepreciationRate = 0;
                if (product.ICProductDepreciationQty > 0)
                {
                    product.ICProductDepreciationRate = 0;
                    product.ICProductDepreciationRate = product.ICProductDepreciationQty / sumComponentBlock;
                }
            }
        }

        public void CalculateDepreciation(ICProductsInfo product, List<ICProductItemMaterialsInfo> materialList, List<MMCalMaterialConfigsInfo> calMaterialConfigList, List<ICProductItemsInfo> productStructuresList)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            decimal productQty = 1m;
            ICProductItemsInfo productStructuresInfo = FindProductItemByProductID(product.ICProductID, productStructuresList);
            if (productStructuresInfo != null)
            {
                productQty = productStructuresInfo.ICProductItemQty;
            }

            decimal sumComponentDepreciationQty = 0;
            decimal sumMaterialDepreciationQty = 0;
            decimal sumComponentBlock = 0;
            if (product.HasComponent)
            {
                ICProductsInfo filterItem;
                if (productStructuresInfo != null && productStructuresInfo.SubList != null && productStructuresInfo.SubList.Any())
                {
                    productStructuresList.ForEach(o =>
                    {
                        filterItem = entity.ProductList.FirstOrDefault(t => t.ICProductID == o.FK_ICProductItemChildID);
                        if (filterItem != null)
                        {
                            sumComponentDepreciationQty += filterItem.ICProductDepreciationQty;
                            sumComponentBlock += (GetBlockByDemension(filterItem.ICProductLength, filterItem.ICProductWidth, filterItem.ICProductHeight) * o.ICProductItemQty);
                        }
                    });
                }
            }
            decimal sumKLTinh = 0;
            foreach (ICProductItemMaterialsInfo material in materialList)
            {
                ICProductsInfo objPro = BOSApp.GetProductFromCurrentProductList(material.FK_ICProductMaterialID);
                if (objPro != null && objPro.ICProductType == ProductType.Lumber.ToString())
                {
                    sumKLTinh += material.ICProductItemMaterialWoodQty * GetBlockByDemension(material.ICProductItemMaterialLength, material.ICProductItemMaterialWidth, material.ICProductItemMaterialHeigth);
                }
            }
            materialList.ForEach(material =>
            {
                ICProductsInfo materialProductsInfo = BOSApp.GetProductFromCurrentProductList(material.FK_ICProductMaterialID);
                if (materialProductsInfo == null || product == null)
                    return;

                //CalSpecificationItem(material, materialProductsInfo, product, productStructuresList);
                CalDepreciationItem(material, materialProductsInfo, product, calMaterialConfigList, sumKLTinh);
            });

            if (sumComponentBlock > 0 && BOSApp.UsingCarCass)
            {
                product.ICProductDepreciationQty = sumComponentDepreciationQty + sumMaterialDepreciationQty;
                product.ICProductDepreciationRate = 0;
                if (product.ICProductDepreciationQty > 0)
                {
                    product.ICProductDepreciationRate = 0;
                    product.ICProductDepreciationRate = product.ICProductDepreciationQty / sumComponentBlock;
                }
            }
        }

        public ICProductItemsInfo FindProductItemByProductID(int productID, List<ICProductItemsInfo> productItemTreeList)
        {
            return productItemTreeList.Where(o => o.FK_ICProductItemChildID == productID).FirstOrDefault();
        }

        public void ExportTemplateBOM()
        {
            try
            {
                System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
                string filePath = System.Windows.Forms.Application.StartupPath + @"\Template\BOM.xlsx";
                object misValue = System.Reflection.Missing.Value;
                Excel.Application excelApp = new Excel.Application();
                Excel.Workbook excelWorkBook = excelApp.Workbooks.Open(filePath, 0, true, 5, string.Empty, string.Empty, true, Excel.XlPlatform.xlWindows, "\t", false, false, 0, true, 1, 0);
                Excel.Worksheet excelWorkSheet = (Excel.Worksheet)excelWorkBook.ActiveSheet;
                SaveFileDialog saveDialog = new SaveFileDialog();
                saveDialog.Filter = @"Excel Files| *.xls; *.xlsx;";
                saveDialog.FilterIndex = 2;
                saveDialog.FileName = @"BOM.xlsx";
                if (saveDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    string fullFileName = saveDialog.FileName;
                    excelWorkBook.SaveAs(fullFileName);
                    excelWorkBook.Saved = true;

                    excelWorkBook.Close(true, misValue, misValue);
                    excelApp.Quit();
                    ReleaseObject(excelWorkSheet);
                    ReleaseObject(excelWorkBook);
                    ReleaseObject(excelApp);
                }
                BOSProgressBar.Close();
            }
            catch (Exception ex)
            {
                BOSProgressBar.Close();
                MessageBox.Show(ex.ToString(), MESLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        private void ReleaseObject(object obj)
        {
            try
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(obj);
                obj = null;
            }
            catch (Exception ex)
            {
                obj = null;
                MessageBox.Show(ex.ToString());
            }
            finally
            {
                GC.Collect();
            }
        }

        public override void Close()
        {
            base.Close();
            if (GuiProductStructure != null)
                GuiProductStructure.Dispose();
            if (GuiProcess != null)
                GuiProcess.Dispose();
        }

        public void SaveSemiProductImage()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo mainobject = (MMProductionNormsInfo)entity.MainObject;
            ICProductsController objProductsController = new ICProductsController();
            foreach (ICProductsInfo item in entity.ProductList)
            {
                if (item.ICProductID > 0)
                {
                    objProductsController.UpdateProductImageByID(item.ICProductID, item.ICProductImageFile);
                }
            }
        }

        public void ConvertIPToICProductItemMaterialsInfo(List<IPProductItemMaterialsInfo> fromInfoList, List<ICProductItemMaterialsInfo> toInfoList)
        {
            ICProductsForViewInfo objProductsInfo = new ICProductsForViewInfo();

            ICProductItemMaterialsInfo objProductItemMaterialsInfo = new ICProductItemMaterialsInfo();

            ICMeasureUnitsController objMeasureUnitsController = new ICMeasureUnitsController();
            List<ICMeasureUnitsInfo> measureUnitList = objMeasureUnitsController.GetAllAliveMeasureUnit();
            ICMeasureUnitsInfo objMeasureUnitsInfo = new ICMeasureUnitsInfo();

            fromInfoList.ForEach(item =>
            {
                objProductsInfo = BOSApp.CurrentProductList.Where(o => o.ICProductNo == item.ICProductNo).FirstOrDefault();
                if (objProductsInfo == null)
                    return;

                objMeasureUnitsInfo = measureUnitList.Where(o => o.ICMeasureUnitName == item.ICMeasureUnitName).FirstOrDefault();
                objProductItemMaterialsInfo = new ICProductItemMaterialsInfo();
                BOSUtil.CopyObject(objProductsInfo, objProductItemMaterialsInfo);
                objProductItemMaterialsInfo.FK_ICProductMaterialID = objProductsInfo.ICProductID;
                objProductItemMaterialsInfo.FK_MMOperationID = item.FK_MMOperationID;
                objProductItemMaterialsInfo.FK_MMFormulaID = item.FK_MMFormulaID;
                objProductItemMaterialsInfo.ICProductItemMaterialHeigth = objProductsInfo.ICProductHeight;
                objProductItemMaterialsInfo.ICProductItemMaterialWidth = objProductsInfo.ICProductWidth;
                objProductItemMaterialsInfo.ICProductItemMaterialLength = objProductsInfo.ICProductLength;
                if (item.ICProductHeight > 0 || item.ICProductWidth > 0 || item.ICProductLength > 0)
                {
                    objProductItemMaterialsInfo.ICProductItemMaterialHeigth = item.ICProductHeight;
                    objProductItemMaterialsInfo.ICProductItemMaterialWidth = item.ICProductWidth;
                    objProductItemMaterialsInfo.ICProductItemMaterialLength = item.ICProductLength;
                }
                objProductItemMaterialsInfo.FK_ICMeasureUnitID = objMeasureUnitsInfo == null ? objProductsInfo.FK_ICProductBasicUnitID : objMeasureUnitsInfo.ICMeasureUnitID;
                objProductItemMaterialsInfo.ICProductItemMaterialWoodQty = item.ICProductItemMaterialQty;
                objProductItemMaterialsInfo.ICProductItemMaterialDepreciationRate = item.ICProductItemMaterialDepreciationRate;
                objProductItemMaterialsInfo.IPProductionItemParentCode = item.IPProductionItemParentCode;
                objProductItemMaterialsInfo.FK_ICProductAttributeWoodTypeID = objProductsInfo.FK_ICProductAttributeWoodTypeID;
                toInfoList.Add(objProductItemMaterialsInfo);
            });
        }

        public void PrintByType(string printType, bool IsM2 = false)
        {
            PrintProductionNorm(printType, string.Empty, IsM2);
        }

        public string GetProductioNormConfigText(ADConfigValuesInfo objConfigValuesInfo)
        {
            string configText = string.Empty;
            if (objConfigValuesInfo.ADConfigKeyValue == MMProductionNormStatus.New.ToString())
                configText = ProductionNormLocalizeResources.MMProductionNormStatusNew;
            if (objConfigValuesInfo.ADConfigKeyValue == MMProductionNormStatus.Validated.ToString())
                configText = ProductionNormLocalizeResources.MMProductionNormStatusUnValidated;
            if (objConfigValuesInfo.ADConfigKeyValue == MMProductionNormStatus.Approved.ToString())
                configText = ProductionNormLocalizeResources.MMProductionNormStatusApproved;
            if (objConfigValuesInfo.ADConfigKeyValue == MMProductionNormStatus.UnApproved.ToString())
                configText = ProductionNormLocalizeResources.MMProductionNormStatusUnApproved;
            if (objConfigValuesInfo.ADConfigKeyValue == MMProductionNormStatus.Edit.ToString())
                configText = ProductionNormLocalizeResources.MMProductionNormStatusEdit;

            return configText;
        }

        public List<MMProductionNormItemsInfo> GetListFromProductionNormItemTreeList(BOSTreeList ProductionNormItemList)
        {
            List<MMProductionNormItemsInfo> productionNormItemsList = new List<MMProductionNormItemsInfo>();
            ProductionNormItemList.ConvertToList(productionNormItemsList);
            return productionNormItemsList;
        }

        public List<MMProductionNormItemsInfo> GetListFromProductionNormItemTreeList(BOSList<MMProductionNormItemsInfo> ProductionNormItemList)
        {
            List<MMProductionNormItemsInfo> productionNormItemsList = new List<MMProductionNormItemsInfo>();
            foreach (MMProductionNormItemsInfo item in ProductionNormItemList)
            {
                productionNormItemsList.Add(item);
                if (item.MMProductionNormItemIsComponent && item.SubList != null)
                {
                    item.MMProductionNormItemParentOrderName = item.MMProductionNormItemProductName;
                    foreach (MMProductionNormItemsInfo itemChild in item.SubList)
                    {
                        productionNormItemsList.Add(itemChild);
                    }
                }
            }
            return productionNormItemsList;
        }

        public void PrintProductionNorm(string printType, string productType, bool isM2)
        {
            //if ((Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0))
            {
                CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
                MMProductionNormsInfo objProductionNormsInfo = (MMProductionNormsInfo)entity.MainObject;
                List<MMProductionNormsInfo> productionNormList = new List<MMProductionNormsInfo>();
                //MMProductionNormsInfo objProductionNormsInfo = (MMProductionNormsInfo)entity.MainObject;
                //MMProductionNormsController productionNormController = new MMProductionNormsController();
                //MMProductionNormsInfo objProductionNormsInfo = productionNormController.GetObjectByID(Toolbar.CurrentObjectID) as MMProductionNormsInfo;
                //init report display data
                ICProductsController objProductsController = new ICProductsController();
                ICProductsInfo objProductsInfo = new ICProductsInfo();
                objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(objProductionNormsInfo.FK_ICProductID);
                if (objProductsInfo != null)
                {
                    //ICProductNo
                    objProductionNormsInfo.MMProductionNormProductNo = objProductsInfo.ICProductNo;
                    //ICProductName
                    objProductionNormsInfo.MMProductionNormICProductName = objProductsInfo.ICProductName;

                    objProductionNormsInfo.MMProductionNormDepreciationRate = objProductsInfo.ICProductDepreciationRate;
                    ADConfigValuesController objConfigValuesController = new ADConfigValuesController();
                    ADConfigValuesInfo objConfigValuesInfo = (ADConfigValuesInfo)objConfigValuesController.GetObjectByGroupAndValue(ProductionNormConst.ProductionNormComponentStatus, objProductionNormsInfo.MMProductionNormPackingMaterialStatus);
                    //set ProductionNorm component status
                    if (objConfigValuesInfo != null)
                    {
                        objProductionNormsInfo.MMProductionNormPackingMaterialStatus = GetProductioNormConfigText(objConfigValuesInfo);
                        objProductionNormsInfo.MMProductionNormPackingMaterialStatusValue = GetProductioNormConfigText(objConfigValuesInfo);
                    }
                    objConfigValuesInfo = (ADConfigValuesInfo)objConfigValuesController.GetObjectByGroupAndValue(ProductionNormConst.ProductionNormStatus, objProductionNormsInfo.MMProductionNormWoodStatus);
                    //set ProductionNorm status
                    if (objConfigValuesInfo != null)
                    {
                        objProductionNormsInfo.MMProductionNormWoodStatus = GetProductioNormConfigText(objConfigValuesInfo);
                        objProductionNormsInfo.MMProductionNormWoodStatusText = GetProductioNormConfigText(objConfigValuesInfo);
                    }
                    // Set Product Picture
                    objProductionNormsInfo.ICProductImageFile = objProductsInfo.ICProductImageFile.Replace("/view?usp=sharing", "").Replace("https://drive.google.com/file/d/", "https://drive.google.com/uc?id=");
                    HREmployeesController objEmployeesController = new HREmployeesController();
                    HREmployeesInfo objEmployeesInfo = new HREmployeesInfo();
                    //set Create User
                    objEmployeesInfo = (HREmployeesInfo)objEmployeesController.GetObjectByID(objProductionNormsInfo.FK_HREmployeeID);
                    if (objEmployeesInfo != null)
                    {
                        objProductionNormsInfo.MMProductionNormCreateUserName = objEmployeesInfo.HREmployeeName;
                    }
                    if (productType == ProductType.SemiProduct.ToString())
                    {
                        //set validate user
                        objEmployeesInfo = (HREmployeesInfo)objEmployeesController.GetObjectByID(objProductionNormsInfo.FK_HREmployeeWoodValidate);
                        if (objEmployeesInfo != null)
                        {
                            objProductionNormsInfo.MMProductionNormValidateUserName = objEmployeesInfo.HREmployeeName;
                        }
                        //set approve user
                        objEmployeesInfo = (HREmployeesInfo)objEmployeesController.GetObjectByID(objProductionNormsInfo.FK_HREmployeeWoodApprove);
                        if (objEmployeesInfo != null)
                        {
                            objProductionNormsInfo.MMProductionNormApproveUserName = objEmployeesInfo.HREmployeeName;
                        }
                    }
                    else if (productType == ProductType.Hardware.ToString())
                    {
                        //set validate user
                        objEmployeesInfo = (HREmployeesInfo)objEmployeesController.GetObjectByID(objProductionNormsInfo.FK_HREmployeeHardwareValidate);
                        if (objEmployeesInfo != null)
                            objProductionNormsInfo.MMProductionNormValidateUserName = objEmployeesInfo.HREmployeeName;
                        //set Approve user
                        objEmployeesInfo = (HREmployeesInfo)objEmployeesController.GetObjectByID(objProductionNormsInfo.FK_HREmployeeHardwareApprove);
                        if (objEmployeesInfo != null)
                            objProductionNormsInfo.MMProductionNormApproveUserName = objEmployeesInfo.HREmployeeName;
                    }
                    else if (productType == ProductType.IngredientPackaging.ToString())
                    {
                        //set validate user
                        objEmployeesInfo = (HREmployeesInfo)objEmployeesController.GetObjectByID(objProductionNormsInfo.FK_HREmployeePackingMaterialValidate);
                        if (objEmployeesInfo != null)
                            objProductionNormsInfo.MMProductionNormValidateUserName = objEmployeesInfo.HREmployeeName;
                        //set Approve user
                        objEmployeesInfo = (HREmployeesInfo)objEmployeesController.GetObjectByID(objProductionNormsInfo.FK_HREmployeePackingMaterialApprove);
                        if (objEmployeesInfo != null)
                            objProductionNormsInfo.MMProductionNormApproveUserName = objEmployeesInfo.HREmployeeName;
                    }
                    else if (productType == ProductType.IngredientPaint.ToString())
                    {
                        //set validate user
                        objEmployeesInfo = (HREmployeesInfo)objEmployeesController.GetObjectByID(objProductionNormsInfo.FK_HREmployeePaintValidate);
                        if (objEmployeesInfo != null)
                            objProductionNormsInfo.MMProductionNormValidateUserName = objEmployeesInfo.HREmployeeName;
                        //set Approve user
                        objEmployeesInfo = (HREmployeesInfo)objEmployeesController.GetObjectByID(objProductionNormsInfo.FK_HREmployeePaintApprove);
                        if (objEmployeesInfo != null)
                            objProductionNormsInfo.MMProductionNormApproveUserName = objEmployeesInfo.HREmployeeName;
                    }
                    else
                    {

                    }
                }

                List<MMProductionNormItemsInfo> productionNormItemList = new List<MMProductionNormItemsInfo>();
                List<MMProductionNormItemsInfo> productionNormItemDataSource = new List<MMProductionNormItemsInfo>();
                List<MMProductionNormItemsInfo> productionNormItemHardwareDataSource = new List<MMProductionNormItemsInfo>();
                List<MMProductionNormItemsInfo> productionNormItemPackagingDataSource = new List<MMProductionNormItemsInfo>();
                List<MMProductionNormItemsInfo> productionNormItemPaintDataSource = new List<MMProductionNormItemsInfo>();
                List<MMProductionNormItemsInfo> productionNormItemGeneralMaterialDataSource = new List<MMProductionNormItemsInfo>();
                productionNormItemList = GetListFromProductionNormItemTreeList(entity.ProductionNormItemList);
                productionNormItemHardwareDataSource = GetListFromProductionNormItemTreeList(entity.ProductionNormItemHardwareList);
                productionNormItemPackagingDataSource = GetListFromProductionNormItemTreeList(entity.ProductionNormItemPackagingList);
                productionNormItemGeneralMaterialDataSource = GetListFromProductionNormItemTreeList(entity.GeneralMaterialList);
                //productionNormItemPaintDataSource = GetListFromProductionNormItemTreeList(entity.ProductionNormItemPaintList);
                MMProductionNormItemsController itemController = new MMProductionNormItemsController();
                productionNormItemPaintDataSource = itemController.GetPaintForPrint(objProductionNormsInfo.MMProductionNormID);
                if (productionNormItemList != null)
                    productionNormItemList = productionNormItemList.Select(o => (MMProductionNormItemsInfo)o.Clone()).OrderBy(p => p.MMProductionNormItemParentOrderName).ToList();
                //decimal lenghtBTP = 0;
                //productionNormItemList.ForEach(o =>
                //{
                //    lenghtBTP = 0;
                //    Decimal.TryParse(o.MMProductionNormItemProductJoinery, out lenghtBTP);
                //    o.MMProductionNormItemProductLength += lenghtBTP;
                //});
                if (productionNormItemPackagingDataSource != null)
                {
                    ICProductAttributesController objDepartmentAttributeValuesController = new ICProductAttributesController();
                    MMOperationsController objOperationsController = new MMOperationsController();
                    foreach (MMProductionNormItemsInfo item in productionNormItemPackagingDataSource)
                    {
                        //MMProductionNormItemsInfo objProductionNormItemsInfo = new MMProductionNormItemsInfo();
                        if (!(item.MMProductionNormItemProductOverallDimensionWidth == 0
                           && item.MMProductionNormItemProductOverallDimensionLength == 0
                           && item.MMProductionNormItemProductOverallDimensionHeight == 0))
                        {
                            item.MMProductionNormItemProductOverallDimension = Math.Round(item.MMProductionNormItemProductOverallDimensionLength, 0) + "x"
                                + Math.Round(item.MMProductionNormItemProductOverallDimensionWidth, 0) + "x"
                                + Math.Round(item.MMProductionNormItemProductOverallDimensionHeight, 0);
                        }
                        if (!(item.MMProductionNormItemProductInsideDimensionWidth == 0
                            && item.MMProductionNormItemProductInsideDimensionLength == 0
                            && item.MMProductionNormItemProductInsideDimensionHeight == 0))
                        {
                            item.MMProductionNormItemProductInsideDimension = Math.Round(item.MMProductionNormItemProductInsideDimensionLength, 0) + "x"
                            + Math.Round(item.MMProductionNormItemProductInsideDimensionWidth, 0) + "x"
                            + Math.Round(item.MMProductionNormItemProductInsideDimensionHeight, 0);
                        }

                        #region Description
                        item.MMBatchProductProductionNormItemProductDesc = string.Empty;
                        if (!string.IsNullOrEmpty(item.MMProductionNormItemProductName))
                        {

                            item.MMBatchProductProductionNormItemProductDesc += item.MMProductionNormItemProductName;
                        }
                        if (!(item.MMProductionNormItemProductInsideDimensionWidth == 0
                            && item.MMProductionNormItemProductInsideDimensionLength == 0
                            && item.MMProductionNormItemProductInsideDimensionHeight == 0))
                        {
                            if (!string.IsNullOrEmpty(item.MMBatchProductProductionNormItemProductDesc))
                            {
                                item.MMBatchProductProductionNormItemProductDesc += ", ";
                            }
                            item.MMBatchProductProductionNormItemProductDesc += item.MMProductionNormItemProductInsideDimensionLength + "x"
                            + item.MMProductionNormItemProductInsideDimensionWidth + "x"
                            + item.MMProductionNormItemProductInsideDimensionHeight;
                        }
                        if (!(item.MMProductionNormItemProductOverallDimensionWidth == 0
                            && item.MMProductionNormItemProductOverallDimensionLength == 0
                            && item.MMProductionNormItemProductOverallDimensionHeight == 0))
                        {
                            if (!string.IsNullOrEmpty(item.MMBatchProductProductionNormItemProductDesc))
                            {
                                item.MMBatchProductProductionNormItemProductDesc += ", ";
                            }
                            item.MMBatchProductProductionNormItemProductDesc += item.MMProductionNormItemProductOverallDimensionLength + "x"
                                + item.MMProductionNormItemProductOverallDimensionWidth + "x"
                                + item.MMProductionNormItemProductOverallDimensionHeight;
                        }

                        if (item.MMProductionNormItemProductSizeAndPacking != null)
                        {
                            if (!string.IsNullOrEmpty(item.MMBatchProductProductionNormItemProductDesc))
                            {
                                item.MMBatchProductProductionNormItemProductDesc += ", ";
                            }
                            item.MMBatchProductProductionNormItemProductDesc += item.MMProductionNormItemProductSizeAndPacking;
                        }
                        if (item.FK_ICProdAttPackingMaterialSpecialityID > 0)
                        {
                            ICProductAttributesInfo objAttribute = (ICProductAttributesInfo)objDepartmentAttributeValuesController.GetObjectByID(item.FK_ICProdAttPackingMaterialSpecialityID);
                            if (objAttribute != null)
                            {
                                if (!string.IsNullOrEmpty(item.MMBatchProductProductionNormItemProductDesc))
                                {
                                    item.MMBatchProductProductionNormItemProductDesc += ", ";
                                }
                                item.MMBatchProductProductionNormItemProductDesc += objAttribute.ICProductAttributeValue;
                            }
                        }
                        if (item.FK_ICProdAttPackingMaterialWeightPerVolumeID > 0)
                        {
                            ICProductAttributesInfo objAttribute = (ICProductAttributesInfo)objDepartmentAttributeValuesController.GetObjectByID(item.FK_ICProdAttPackingMaterialWeightPerVolumeID);
                            if (objAttribute != null)
                            {
                                if (!string.IsNullOrEmpty(item.MMBatchProductProductionNormItemProductDesc))
                                {
                                    item.MMBatchProductProductionNormItemProductDesc += ", ";
                                }
                                item.MMBatchProductProductionNormItemProductDesc += objAttribute.ICProductAttributeValue;
                            }
                        }
                        if (item.FK_ICProdAttPackingMaterialSizeID > 0)
                        {
                            ICProductAttributesInfo objAttribute = (ICProductAttributesInfo)objDepartmentAttributeValuesController.GetObjectByID(item.FK_ICProdAttPackingMaterialSizeID);
                            if (objAttribute != null)
                            {
                                if (!string.IsNullOrEmpty(item.MMBatchProductProductionNormItemProductDesc))
                                {
                                    item.MMBatchProductProductionNormItemProductDesc += ", ";
                                }
                                item.MMBatchProductProductionNormItemProductDesc += objAttribute.ICProductAttributeValue;
                            }
                        }
                        #endregion
                        if (item.FK_MMOperationID > 0)
                        {
                            MMOperationsInfo objOperationsInfo = (MMOperationsInfo)objOperationsController.GetObjectByID(item.FK_MMOperationID);
                            item.MMOperationName = objOperationsInfo != null ? objOperationsInfo.MMOperationName : string.Empty;
                        }
                    }
                }
                if (productionNormItemGeneralMaterialDataSource != null)
                {
                    List<MMProductionNormItemsInfo> semiProductList = new List<MMProductionNormItemsInfo>();
                    List<MMProductionNormItemsInfo> dataSourceList = new List<MMProductionNormItemsInfo>();
                    MMOperationsController objOperationsController = new MMOperationsController();
                    entity.ProductionNormItemList.ConvertToList(semiProductList);
                    dataSourceList = semiProductList.Where(o => o.MMProductionNormItemID > 0).Select(o => (MMProductionNormItemsInfo)o.Clone()).ToList();
                    foreach (MMProductionNormItemsInfo item in productionNormItemGeneralMaterialDataSource)
                    {
                        if (item.FK_MMSemiProductID > 0)
                        {
                            MMProductionNormItemsInfo semiProductsInfo = dataSourceList.Where(o => o.MMProductionNormItemID == item.FK_MMSemiProductID).FirstOrDefault();
                            item.ICSemiProductName = semiProductsInfo == null ? string.Empty : semiProductsInfo.MMProductionNormItemNo;
                        }
                        if (item.FK_MMOperationID > 0)
                        {
                            MMOperationsInfo objOperationsInfo = (MMOperationsInfo)objOperationsController.GetObjectByID(item.FK_MMOperationID);
                            item.MMOperationName = objOperationsInfo != null ? objOperationsInfo.MMOperationName : string.Empty;
                        }
                    }

                }
                if (productionNormItemHardwareDataSource != null)
                {
                    List<MMProductionNormItemsInfo> semiProductList = new List<MMProductionNormItemsInfo>();
                    List<MMProductionNormItemsInfo> dataSourceList = new List<MMProductionNormItemsInfo>();
                    MMOperationsController objOperationsController = new MMOperationsController();
                    entity.ProductionNormItemList.ConvertToList(semiProductList);
                    dataSourceList = semiProductList.Where(o => o.MMProductionNormItemID > 0).Select(o => (MMProductionNormItemsInfo)o.Clone()).ToList();
                    foreach (MMProductionNormItemsInfo item in productionNormItemHardwareDataSource)
                    {
                        if (item.FK_MMSemiProductID > 0)
                        {
                            MMProductionNormItemsInfo semiProductsInfo = dataSourceList.Where(o => o.MMProductionNormItemID == item.FK_MMSemiProductID).FirstOrDefault();
                            item.ICSemiProductName = semiProductsInfo == null ? string.Empty : semiProductsInfo.MMProductionNormItemNo;
                        }
                        if (item.FK_MMOperationID > 0)
                        {
                            MMOperationsInfo objOperationsInfo = (MMOperationsInfo)objOperationsController.GetObjectByID(item.FK_MMOperationID);
                            item.MMOperationName = objOperationsInfo != null ? objOperationsInfo.MMOperationName : string.Empty;
                        }
                    }

                }
                if (productionNormItemPaintDataSource != null)
                {
                    ACObjectsController objObjectsController = new ACObjectsController();
                    MMOperationsController objOperationsController = new MMOperationsController();
                    foreach (MMProductionNormItemsInfo item in productionNormItemPaintDataSource)
                    {
                        if (item.FK_APSupplierID > 0)
                        {
                            ACObjectsInfo objObjectsInfo = (ACObjectsInfo)objObjectsController.GetObjectByIDAndType(item.FK_APSupplierID, ObjectType.Supplier.ToString());
                            item.APSupplierName = objObjectsInfo == null ? string.Empty : objObjectsInfo.ACObjectName;
                        }
                        if (item.FK_MMOperationID > 0)
                        {
                            MMOperationsInfo objOperationsInfo = (MMOperationsInfo)objOperationsController.GetObjectByID(item.FK_MMOperationID);
                            item.MMOperationName = objOperationsInfo != null ? objOperationsInfo.MMOperationName : string.Empty;
                        }
                    }
                }
                //get total item Qty        
                decimal productionNormItemTotalQty = GetSumProductionNormItemQty();
                //TNDLoc [ADD][06/01/2015][Set Attribute],START
                ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
                MMOperationsController objOperationController = new MMOperationsController();
                MMProcesssController objProcesssController = new MMProcesssController();
                List<ICProductAttributesInfo> lstProductAttributesInfo = objProductAttributesController.GetProductAttributesByProductAttributeGroup(ProductAttributeGroup.WoodType.ToString());
                List<ICProductAttributesInfo> lstqualityAttributesInfo = objProductAttributesController.GetProductAttributesByProductAttributeGroup(ProductAttributeGroup.Quality.ToString());
                List<ICProductAttributesInfo> lstColorAttributesInfo = objProductAttributesController.GetProductAttributesByProductAttributeGroup(ProductAttributeGroup.COLOR.ToString());
                List<MMProductionNormItemsInfo> productionNormItemMaterialDataSource = new List<MMProductionNormItemsInfo>();
                List<ICProductItemMaterialsInfo> lstproductionNormItemMaterialDataSource = new List<ICProductItemMaterialsInfo>();
                ICProductItemMaterialsController objMaterialsController = new ICProductItemMaterialsController();
                ICProductAttributesInfo objAttributesInfo = new ICProductAttributesInfo();
                MMProductionNormItemsInfo itemMaterial = new MMProductionNormItemsInfo();
                ICProductGroupsController objProductGroupsController = new ICProductGroupsController();

                foreach (MMProductionNormItemsInfo item in productionNormItemList)
                {
                    objAttributesInfo = (ICProductAttributesInfo)objProductAttributesController.GetObjectByID(item.FK_ICProductAttributeSpecialityID);
                    if (objAttributesInfo != null)
                    {
                        item.AttributeName = objAttributesInfo.ICProductAttributeValue;
                    }
                    if (item.FK_ICProductAttributeWoodTypeID > 0 && lstProductAttributesInfo != null && lstProductAttributesInfo.Where(o => o.ICProductAttributeID == item.FK_ICProductAttributeWoodTypeID).FirstOrDefault() != null)
                    {
                        item.ICProductAttributeWoodTypeName = lstProductAttributesInfo.Where(o => o.ICProductAttributeID == item.FK_ICProductAttributeWoodTypeID).FirstOrDefault().ICProductAttributeValue;
                    }
                    if (item.FK_ICProductAttributeQualityID > 0 && lstqualityAttributesInfo != null)
                    {
                        item.QualityAttribute = lstqualityAttributesInfo.Where(o => o.ICProductAttributeID == item.FK_ICProductAttributeQualityID).FirstOrDefault().ICProductAttributeValue;
                    }
                    if (!string.IsNullOrWhiteSpace(item.MMProductionNormItemProductAttribute))
                    {
                        int FK_ICProductAttributeColorID = int.Parse(item.MMProductionNormItemProductAttribute);
                        if (FK_ICProductAttributeColorID > 0 && lstColorAttributesInfo != null)
                        {
                            item.MMProductionNormItemProductAttribute = lstColorAttributesInfo.Where(o => o.ICProductAttributeID == FK_ICProductAttributeColorID).FirstOrDefault().ICProductAttributeValue;
                        }
                    }
                    //int FK_ICProductAttributeColorID = 0;
                    //if (int.Parse(item.MMProductionNormItemProductAttribute) > 0)
                    //{
                    //    item.MMProductionNormItemProductAttribute = lstColorAttributesInfo.Where(o => o.)
                    //}    
                    ICProductItemMaterialsInfo objMaterialsInfo = (ICProductItemMaterialsInfo)objMaterialsController.GetMaterialByProductionNormID(item.FK_MMProductionNormID, item.FK_ICProductID).FirstOrDefault();
                    item.PhachSuDung = objMaterialsInfo != null ? objMaterialsInfo.ICProductItemMaterialHeigth : 0;
                    ICProductItemProcesssController processCtrl = new ICProductItemProcesssController();
                    List<ICProductItemProcesssInfo> lstProcess = processCtrl.GetProcessByProductionNormID(item.FK_MMProductionNormID, item.FK_ICProductID);
                    ICProductItemProcesssInfo productItemProcess = lstProcess.Where(x => x.FK_ICProductID == item.FK_ICProductID).FirstOrDefault();
                    if (productItemProcess != null)
                    {
                        item.FK_MMProductItemProcessProcessID = productItemProcess.FK_MMProcessID;
                        MMProcesssInfo objProcesssInfo = (MMProcesssInfo)objProcesssController.GetObjectByID(item.FK_MMProductItemProcessProcessID);
                        item.MMProductItemProcessProcessName = objProcesssInfo != null ? objProcesssInfo.MMProcessName : string.Empty;
                    }
                    if (item.FK_ICProductGroupID > 0)
                    {
                        ICProductGroupsInfo objProductGroupsInfo = (ICProductGroupsInfo)objProductGroupsController.GetObjectByID(itemMaterial.FK_ICProductGroupID);
                        item.ICProductGroupName = objProductGroupsInfo != null ? objProductGroupsInfo.ICProductGroupName : string.Empty;
                    }
                    ICProductsInfo itemProduct = entity.ProductList.Where(x => x.ICProductID == item.FK_ICProductID).FirstOrDefault();
                    item.ICProductType = itemProduct != null ? itemProduct.ICProductType : string.Empty;
                    if (itemProduct != null && itemProduct.MaterialList != null && itemProduct.MaterialList.Count > 0)
                    {
                        itemProduct.MaterialList.ForEach(o =>
                        {
                            itemMaterial = (MMProductionNormItemsInfo)item.Clone();
                            itemMaterial.MMProductionNormItemProductPreprocessingLength = o.ICProductItemMaterialLength;
                            itemMaterial.MMProductionNormItemProductPreprocessingWidth = o.ICProductItemMaterialWidth;
                            itemMaterial.MMProductionNormItemProductPreprocessingHeigth = o.ICProductItemMaterialHeigth;
                            itemMaterial.MMProductionNormItemProductMaterialWoodQty = o.ICProductItemMaterialWoodQty;
                            itemMaterial.MMProductionNormItemProductMaterialDepreciationQty = o.ICProductItemMaterialDepreciationQty;
                            itemMaterial.FK_MMOperationMaterialID = o.FK_MMOperationID;
                            if (itemMaterial.FK_MMOperationMaterialID > 0)
                            {
                                MMOperationsInfo objOperationsInfo = (MMOperationsInfo)objOperationController.GetObjectByID(itemMaterial.FK_MMOperationMaterialID);
                                itemMaterial.MMOperationMaterialName = objOperationsInfo != null ? objOperationsInfo.MMOperationName : string.Empty;
                            }
                            ICProductsForViewInfo materialInfo = BOSApp.CurrentProductList.Where(p => p.ICProductID == o.FK_ICProductMaterialID).FirstOrDefault();
                            if (materialInfo != null)
                            {
                                itemMaterial.MMProductionNormItemMaterialNo = materialInfo.ICProductNo;
                                itemMaterial.MMProductionNormItemMaterialName = materialInfo.ICProductName;
                            }
                            productionNormItemMaterialDataSource.Add(itemMaterial);
                        });
                    }
                    else
                    {
                        productionNormItemMaterialDataSource.Add(item);
                    } 
                }
                    //TNDLoc [ADD][06/01/2015][Set Attribute],END

                    productionNormItemHardwareDataSource.ForEach(o => o.MMProductionNormItemDepreciationRate = Math.Round(o.MMProductionNormItemDepreciationRate, 2));
                productionNormItemPackagingDataSource.ForEach(o => o.MMProductionNormItemQuantity = Math.Round(o.MMProductionNormItemQuantity, 4));

                if (objProductionNormsInfo != null)
                {
                    //set ProductionNorm type
                    ADConfigValuesController objConfigValuesController = new ADConfigValuesController();
                    ADConfigValuesInfo objConfigValuesInfo = (ADConfigValuesInfo)objConfigValuesController.GetObjectByGroupAndValue(ProductionNormConst.ProductionNormType, objProductionNormsInfo.MMProductionNormType);
                    if (objConfigValuesInfo != null)
                    {
                        objProductionNormsInfo.MMProductionNormType = objConfigValuesInfo.ADConfigText;
                    }

                    //Signature infomation
                    MMProductionNormsInfo signatureProductionNorm = (new MMProductionNormsController()).GetSignatureProductionNormByID(objProductionNormsInfo.MMProductionNormID);
                    objProductionNormsInfo.MMProductionNormCreateUserName = signatureProductionNorm.MMProductionNormCreateUserName;
                    objProductionNormsInfo.MMProductionNormApproveUserName = signatureProductionNorm.MMProductionNormApproveUserName;

                    productionNormList.Add(objProductionNormsInfo);
                }

                if (printType == ProductionNormPrintType.All.ToString())
                {
                    if (!isM2)
                    {
                        RPProductionNorm report = new RPProductionNorm(productionNormItemTotalQty);
                        //report.bsSemiProduct.DataSource = productionNormItemList.OrderBy(o => o.DetailOrderID);
                        report.bsSemiProduct.DataSource = productionNormItemMaterialDataSource.OrderBy(o => o.DetailOrderID);
                        report.bsHardware.DataSource = productionNormItemHardwareDataSource.OrderBy(o => o.MMOperationName);
                        report.bsIngredientPaint.DataSource = productionNormItemPaintDataSource;
                        report.bsIngredientPacking.DataSource = productionNormItemPackagingDataSource;
                        report.bsGeneralMaterial.DataSource = productionNormItemGeneralMaterialDataSource;

                        report.bsProductionNorm.DataSource = productionNormList;
                        //enable report detail
                        // EnableReportDetail(report,productType);
                        report.ProductionNormItemPaintA = GetSumProductionNormItemPaintA();
                        report.ProductionNormItemPaintB = GetSumProductionNormItemPaintB();
                        report.ProductionNormItemWoodBlocks = GetSumProductionNormItemBlocks();
                        report.ProductionNormItemPaintTotalWoodConsumable = GetSumProductionNormItemWoodConsumable();

                        if (BOSApp.CurrentCompanyInfo != null)
                        {
                            XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_TenCongTy"];
                            if (label != null)
                            {
                                label.Text = BOSApp.CurrentCompanyInfo.CSCompanyDesc;
                            }
                            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_DiaChi"];
                            if (label != null)
                            {
                                label.Text = string.Format("Địa chỉ " + BOSApp.CurrentCompanyInfo.CSCompanyAddressLine1);
                            }
                            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_InfoCongTy"];
                            if (label != null)
                            {
                                label.Text = string.Format("ĐT: {0} | Email: {1} | Website: {2}", BOSApp.CurrentCompanyInfo.CSCompanyPhone
                                                            , BOSApp.CurrentCompanyInfo.CSCompanyEmail, BOSApp.CurrentCompanyInfo.CSCompanyWebsite);
                            }
                        }

                        guiReportPreview viewer = new guiReportPreview(report);
                        viewer.Show();
                    }
                    else
                    {
                        RPProductionNormM2 report = new RPProductionNormM2(productionNormItemTotalQty);
                        //report.bsSemiProduct.DataSource = productionNormItemList.OrderBy(o => o.DetailOrderID);
                        report.bsSemiProduct.DataSource = productionNormItemMaterialDataSource.OrderBy(o => o.DetailOrderID);
                        report.bsHardware.DataSource = productionNormItemHardwareDataSource.OrderBy(o => o.MMOperationName);
                        report.bsIngredientPaint.DataSource = productionNormItemPaintDataSource;
                        report.bsIngredientPacking.DataSource = productionNormItemPackagingDataSource;
                        report.bsGeneralMaterial.DataSource = productionNormItemGeneralMaterialDataSource;

                        report.bsProductionNorm.DataSource = productionNormList;
                        //enable report detail
                        // EnableReportDetail(report,productType);
                        report.ProductionNormItemPaintA = GetSumProductionNormItemPaintA();
                        report.ProductionNormItemPaintB = GetSumProductionNormItemPaintB();
                        report.ProductionNormItemWoodBlocks = GetSumProductionNormItemBlocks();
                        report.ProductionNormItemPaintTotalWoodConsumable = GetSumProductionNormItemWoodConsumable();

                        if (BOSApp.CurrentCompanyInfo != null)
                        {
                            XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_TenCongTy"];
                            if (label != null)
                            {
                                label.Text = BOSApp.CurrentCompanyInfo.CSCompanyDesc;
                            }
                            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_DiaChi"];
                            if (label != null)
                            {
                                label.Text = string.Format("Địa chỉ " + BOSApp.CurrentCompanyInfo.CSCompanyAddressLine1);
                            }
                            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_InfoCongTy"];
                            if (label != null)
                            {
                                label.Text = string.Format("ĐT: {0} | Email: {1} | Website: {2}", BOSApp.CurrentCompanyInfo.CSCompanyPhone
                                                            , BOSApp.CurrentCompanyInfo.CSCompanyEmail, BOSApp.CurrentCompanyInfo.CSCompanyWebsite);
                            }
                        }

                        guiReportPreview viewer = new guiReportPreview(report);
                        viewer.Show();
                    }
                }
                string stisHappy = ADConfigValueUtility.GetConfigTextByGroupAndValue("IsPrintProductionNormHappy", "true");
                bool isHappy = bool.Parse(stisHappy != string.Empty ? stisHappy : "false");
                if (printType == ProductionNormPrintType.SemiProduct.ToString())
                {
                    foreach (MMProductionNormsInfo item in productionNormList)
                    {
                        HREmployeesController objEmployeesController = new HREmployeesController();
                        HREmployeesInfo objEmployees = (HREmployeesInfo)objEmployeesController.GetObjectByID(item.FK_HREmployeeWoodApprove);
                        item.MMProductionNormApproveUserName = objEmployees != null ? objEmployees.HREmployeeName : string.Empty;
                    }
                    if (!isHappy)
                    {
                        if (!isM2)
                        {
                            RPProductionNormSemiProduct report = new RPProductionNormSemiProduct(productionNormItemTotalQty);
                            //report.bsSemiProduct.DataSource = productionNormItemList.OrderBy(o => o.DetailOrderID);
                            report.bsSemiProduct.DataSource = productionNormItemMaterialDataSource.OrderBy(o => o.DetailOrderID);
                            report.bsHardware.DataSource = productionNormItemHardwareDataSource;
                            report.bsIngredientPaint.DataSource = productionNormItemPaintDataSource;
                            report.bsIngredientPacking.DataSource = productionNormItemPackagingDataSource;
                            report.bsGeneralMaterial.DataSource = productionNormItemGeneralMaterialDataSource;

                            report.bsProductionNorm.DataSource = productionNormList;
                            //enable report detail
                            // EnableReportDetail(report,productType);
                            report.ProductionNormItemPaintA = GetSumProductionNormItemPaintA();
                            report.ProductionNormItemPaintB = GetSumProductionNormItemPaintB();
                            report.ProductionNormItemWoodBlocks = GetSumProductionNormItemBlocks();
                            report.ProductionNormItemPaintTotalWoodConsumable = GetSumProductionNormItemWoodConsumable();

                            if (BOSApp.CurrentCompanyInfo != null)
                            {
                                XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_TenCongTy"];
                                if (label != null)
                                {
                                    label.Text = BOSApp.CurrentCompanyInfo.CSCompanyDesc;
                                }
                                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_DiaChi"];
                                if (label != null)
                                {
                                    label.Text = string.Format("Địa chỉ " + BOSApp.CurrentCompanyInfo.CSCompanyAddressLine1);
                                }
                                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_InfoCongTy"];
                                if (label != null)
                                {
                                    label.Text = string.Format("ĐT: {0} | Email: {1} | Website: {2}", BOSApp.CurrentCompanyInfo.CSCompanyPhone
                                                                , BOSApp.CurrentCompanyInfo.CSCompanyEmail, BOSApp.CurrentCompanyInfo.CSCompanyWebsite);
                                }
                            }
                            guiReportPreview viewer = new guiReportPreview(report);
                            viewer.Show();
                        }
                        else
                        {
                            RPProductionNormSemiProductM2 report = new RPProductionNormSemiProductM2(productionNormItemTotalQty);
                            //report.bsSemiProduct.DataSource = productionNormItemList.OrderBy(o => o.DetailOrderID);
                            report.bsSemiProduct.DataSource = productionNormItemMaterialDataSource.OrderBy(o => o.DetailOrderID);
                            report.bsHardware.DataSource = productionNormItemHardwareDataSource;
                            report.bsIngredientPaint.DataSource = productionNormItemPaintDataSource;
                            report.bsIngredientPacking.DataSource = productionNormItemPackagingDataSource;
                            report.bsGeneralMaterial.DataSource = productionNormItemGeneralMaterialDataSource;

                            report.bsProductionNorm.DataSource = productionNormList;
                            //enable report detail
                            // EnableReportDetail(report,productType);
                            report.ProductionNormItemPaintA = GetSumProductionNormItemPaintA();
                            report.ProductionNormItemPaintB = GetSumProductionNormItemPaintB();
                            report.ProductionNormItemWoodBlocks = GetSumProductionNormItemBlocks();
                            report.ProductionNormItemPaintTotalWoodConsumable = GetSumProductionNormItemWoodConsumable();

                            if (BOSApp.CurrentCompanyInfo != null)
                            {
                                XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_TenCongTy"];
                                if (label != null)
                                {
                                    label.Text = BOSApp.CurrentCompanyInfo.CSCompanyDesc;
                                }
                                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_DiaChi"];
                                if (label != null)
                                {
                                    label.Text = string.Format("Địa chỉ " + BOSApp.CurrentCompanyInfo.CSCompanyAddressLine1);
                                }
                                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_InfoCongTy"];
                                if (label != null)
                                {
                                    label.Text = string.Format("ĐT: {0} | Email: {1} | Website: {2}", BOSApp.CurrentCompanyInfo.CSCompanyPhone
                                                                , BOSApp.CurrentCompanyInfo.CSCompanyEmail, BOSApp.CurrentCompanyInfo.CSCompanyWebsite);
                                }
                            }
                            guiReportPreview viewer = new guiReportPreview(report);
                            viewer.Show();
                        }
                    }
                    else
                    {
                        if (!isM2)
                        {
                            RPProductionNormSemiProductHP report = new RPProductionNormSemiProductHP(productionNormItemTotalQty);
                            //report.bsSemiProduct.DataSource = productionNormItemList.OrderBy(o => o.DetailOrderID);
                            report.bsSemiProduct.DataSource = productionNormItemMaterialDataSource.OrderBy(o => o.DetailOrderID);
                            report.bsHardware.DataSource = productionNormItemHardwareDataSource;
                            report.bsIngredientPaint.DataSource = productionNormItemPaintDataSource;
                            report.bsIngredientPacking.DataSource = productionNormItemPackagingDataSource;
                            report.bsGeneralMaterial.DataSource = productionNormItemGeneralMaterialDataSource;

                            report.bsProductionNorm.DataSource = productionNormList;
                            //enable report detail
                            // EnableReportDetail(report,productType);
                            report.ProductionNormItemPaintA = GetSumProductionNormItemPaintA();
                            report.ProductionNormItemPaintB = GetSumProductionNormItemPaintB();
                            report.ProductionNormItemWoodBlocks = GetSumProductionNormItemBlocks();
                            report.ProductionNormItemPaintTotalWoodConsumable = GetSumProductionNormItemWoodConsumable();

                            if (BOSApp.CurrentCompanyInfo != null)
                            {
                                XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_TenCongTy"];
                                if (label != null)
                                {
                                    label.Text = BOSApp.CurrentCompanyInfo.CSCompanyDesc;
                                }
                                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_DiaChi"];
                                if (label != null)
                                {
                                    label.Text = string.Format("Địa chỉ " + BOSApp.CurrentCompanyInfo.CSCompanyAddressLine1);
                                }
                                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_InfoCongTy"];
                                if (label != null)
                                {
                                    label.Text = string.Format("ĐT: {0} | Email: {1} | Website: {2}", BOSApp.CurrentCompanyInfo.CSCompanyPhone
                                                                , BOSApp.CurrentCompanyInfo.CSCompanyEmail, BOSApp.CurrentCompanyInfo.CSCompanyWebsite);
                                }
                            }
                            guiReportPreview viewer = new guiReportPreview(report);
                            viewer.Show();
                        }
                        else
                        {
                            RPProductionNormSemiProductM2HP report = new RPProductionNormSemiProductM2HP(productionNormItemTotalQty);
                            //report.bsSemiProduct.DataSource = productionNormItemList.OrderBy(o => o.DetailOrderID);
                            report.bsSemiProduct.DataSource = productionNormItemMaterialDataSource.OrderBy(o => o.DetailOrderID);
                            report.bsHardware.DataSource = productionNormItemHardwareDataSource;
                            report.bsIngredientPaint.DataSource = productionNormItemPaintDataSource;
                            report.bsIngredientPacking.DataSource = productionNormItemPackagingDataSource;
                            report.bsGeneralMaterial.DataSource = productionNormItemGeneralMaterialDataSource;

                            report.bsProductionNorm.DataSource = productionNormList;
                            //enable report detail
                            // EnableReportDetail(report,productType);
                            report.ProductionNormItemPaintA = GetSumProductionNormItemPaintA();
                            report.ProductionNormItemPaintB = GetSumProductionNormItemPaintB();
                            report.ProductionNormItemWoodBlocks = GetSumProductionNormItemBlocks();
                            report.ProductionNormItemPaintTotalWoodConsumable = GetSumProductionNormItemWoodConsumable();

                            if (BOSApp.CurrentCompanyInfo != null)
                            {
                                XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_TenCongTy"];
                                if (label != null)
                                {
                                    label.Text = BOSApp.CurrentCompanyInfo.CSCompanyDesc;
                                }
                                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_DiaChi"];
                                if (label != null)
                                {
                                    label.Text = string.Format("Địa chỉ " + BOSApp.CurrentCompanyInfo.CSCompanyAddressLine1);
                                }
                                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_InfoCongTy"];
                                if (label != null)
                                {
                                    label.Text = string.Format("ĐT: {0} | Email: {1} | Website: {2}", BOSApp.CurrentCompanyInfo.CSCompanyPhone
                                                                , BOSApp.CurrentCompanyInfo.CSCompanyEmail, BOSApp.CurrentCompanyInfo.CSCompanyWebsite);
                                }
                            }
                            XRLabel label1 = (XRLabel)report.Bands[BandKind.GroupFooter].Controls["xrWoodArica"];
                            if (label1 != null)
                            {
                                //label1.Text = productionNormItemMaterialDataSource.Where(o => o.ICProductAttributeWoodTypeName == "Acacia F1").Sum(o => o.MMProductionNormItemWoodBlocks).ToString("#,0.#####");
                            }
                            label1 = (XRLabel)report.Bands[BandKind.GroupFooter].Controls["xrEucalyptus"];
                            if (label1 != null)
                            {
                                //label1.Text = productionNormItemMaterialDataSource.Where(o => o.ICProductAttributeWoodTypeName == "Eucalyptus Karrigun").Sum(o => o.MMProductionNormItemWoodBlocks).ToString("#,0.#####");
                            }
                            label1 = (XRLabel)report.Bands[BandKind.GroupFooter].Controls["xrWoodMDF12"];
                            if (label1 != null)
                            {
                                //label1.Text = productionNormItemMaterialDataSource.Where(o => o.ICProductGroupName.Contains("MDF")).Sum(o => o.MMProductionNormItemWoodBlocks).ToString("#,0.#####");
                            }
                            label1 = (XRLabel)report.Bands[BandKind.GroupFooter].Controls["xrWoodMDF14"];
                            if (label1 != null)
                            {
                                //label1.Text = productionNormItemMaterialDataSource.Where(o => o.ICProductGroupName.Contains("MDF") || o.ICProductType == ProductType.ArtificialBoard.ToString()).Sum(o => o.MMProductionNormItemWoodBlocks).ToString("#,0.#####");
                            }
                            label1 = (XRLabel)report.Bands[BandKind.GroupFooter].Controls["xrWoodMDF16"];
                            if (label1 != null)
                            {
                                //label1.Text = productionNormItemMaterialDataSource.Where(o => o.ICProductGroupName.Contains("MDF") || o.ICProductType == ProductType.ArtificialBoard.ToString()).Sum(o => o.MMProductionNormItemWoodBlocks).ToString("#,0.#####");
                            }
                            report.AddDynamicColumn();
                            guiReportPreview viewer = new guiReportPreview(report);
                            viewer.Show();
                        }
                    }    
                }

                if (printType == ProductionNormPrintType.Hardware.ToString())
                {
                    foreach (MMProductionNormsInfo item in productionNormList)
                    {
                        HREmployeesController objEmployeesController = new HREmployeesController();
                        HREmployeesInfo objEmployees = (HREmployeesInfo)objEmployeesController.GetObjectByID(item.FK_HREmployeeHardwareApprove);
                        item.MMProductionNormApproveUserName = objEmployees != null ? objEmployees.HREmployeeName : string.Empty;
                    }
                    if (!isHappy)
                    {
                        RPProductionNormHardware report = new RPProductionNormHardware(productionNormItemTotalQty);
                        //report.bsSemiProduct.DataSource = productionNormItemList;
                        report.bsSemiProduct.DataSource = productionNormItemMaterialDataSource.OrderBy(o => o.DetailOrderID);
                        report.bsHardware.DataSource = productionNormItemHardwareDataSource.OrderBy(o => o.MMOperationName);
                        report.bsIngredientPaint.DataSource = productionNormItemPaintDataSource;
                        report.bsIngredientPacking.DataSource = productionNormItemPackagingDataSource;
                        report.bsGeneralMaterial.DataSource = productionNormItemGeneralMaterialDataSource;

                        report.bsProductionNorm.DataSource = productionNormList;
                        //enable report detail
                        // EnableReportDetail(report,productType);
                        report.ProductionNormItemPaintA = GetSumProductionNormItemPaintA();
                        report.ProductionNormItemPaintB = GetSumProductionNormItemPaintB();
                        report.ProductionNormItemWoodBlocks = GetSumProductionNormItemBlocks();
                        report.ProductionNormItemPaintTotalWoodConsumable = GetSumProductionNormItemWoodConsumable();

                        if (BOSApp.CurrentCompanyInfo != null)
                        {
                            XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_TenCongTy"];
                            if (label != null)
                            {
                                label.Text = BOSApp.CurrentCompanyInfo.CSCompanyDesc;
                            }
                            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_DiaChi"];
                            if (label != null)
                            {
                                label.Text = string.Format("Địa chỉ " + BOSApp.CurrentCompanyInfo.CSCompanyAddressLine1);
                            }
                            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_InfoCongTy"];
                            if (label != null)
                            {
                                label.Text = string.Format("ĐT: {0} | Email: {1} | Website: {2}", BOSApp.CurrentCompanyInfo.CSCompanyPhone
                                                            , BOSApp.CurrentCompanyInfo.CSCompanyEmail, BOSApp.CurrentCompanyInfo.CSCompanyWebsite);
                            }
                        }
                        guiReportPreview viewer = new guiReportPreview(report);
                        viewer.Show();
                    }
                    else
                    {
                        RPProductionNormHardwareHP report = new RPProductionNormHardwareHP(productionNormItemTotalQty);
                        //report.bsSemiProduct.DataSource = productionNormItemList;
                        report.bsSemiProduct.DataSource = productionNormItemMaterialDataSource.OrderBy(o => o.DetailOrderID);
                        report.bsHardware.DataSource = productionNormItemHardwareDataSource.OrderBy(o => o.MMOperationName);
                        report.bsIngredientPaint.DataSource = productionNormItemPaintDataSource;
                        report.bsIngredientPacking.DataSource = productionNormItemPackagingDataSource;
                        report.bsGeneralMaterial.DataSource = productionNormItemGeneralMaterialDataSource;

                        report.bsProductionNorm.DataSource = productionNormList;
                        //enable report detail
                        // EnableReportDetail(report,productType);
                        report.ProductionNormItemPaintA = GetSumProductionNormItemPaintA();
                        report.ProductionNormItemPaintB = GetSumProductionNormItemPaintB();
                        report.ProductionNormItemWoodBlocks = GetSumProductionNormItemBlocks();
                        report.ProductionNormItemPaintTotalWoodConsumable = GetSumProductionNormItemWoodConsumable();

                        if (BOSApp.CurrentCompanyInfo != null)
                        {
                            XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_TenCongTy"];
                            if (label != null)
                            {
                                label.Text = BOSApp.CurrentCompanyInfo.CSCompanyDesc;
                            }
                            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_DiaChi"];
                            if (label != null)
                            {
                                label.Text = string.Format("Địa chỉ " + BOSApp.CurrentCompanyInfo.CSCompanyAddressLine1);
                            }
                            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_InfoCongTy"];
                            if (label != null)
                            {
                                label.Text = string.Format("ĐT: {0} | Email: {1} | Website: {2}", BOSApp.CurrentCompanyInfo.CSCompanyPhone
                                                            , BOSApp.CurrentCompanyInfo.CSCompanyEmail, BOSApp.CurrentCompanyInfo.CSCompanyWebsite);
                            }
                        }
                        guiReportPreview viewer = new guiReportPreview(report);
                        viewer.Show();
                    }    
                }

                if (printType == ProductionNormPrintType.IngredientPaint.ToString())
                {
                    foreach (MMProductionNormsInfo item in productionNormList)
                    {
                        HREmployeesController objEmployeesController = new HREmployeesController();
                        HREmployeesInfo objEmployees = (HREmployeesInfo)objEmployeesController.GetObjectByID(item.FK_HREmployeePaintApprove);
                        item.MMProductionNormApproveUserName = objEmployees != null ? objEmployees.HREmployeeName : string.Empty;
                    }
                    if (!isHappy)
                    {
                        RPProductionNormIngredientPaint report = new RPProductionNormIngredientPaint(productionNormItemTotalQty);
                        //report.bsSemiProduct.DataSource = productionNormItemList;
                        report.bsSemiProduct.DataSource = productionNormItemMaterialDataSource.OrderBy(o => o.DetailOrderID);
                        report.bsHardware.DataSource = productionNormItemHardwareDataSource;
                        report.bsIngredientPaint.DataSource = productionNormItemPaintDataSource;
                        report.bsIngredientPacking.DataSource = productionNormItemPackagingDataSource;
                        report.bsGeneralMaterial.DataSource = productionNormItemGeneralMaterialDataSource;

                        report.bsProductionNorm.DataSource = productionNormList;
                        //enable report detail
                        // EnableReportDetail(report,productType);
                        report.ProductionNormItemPaintA = GetSumProductionNormItemPaintA();
                        report.ProductionNormItemPaintB = GetSumProductionNormItemPaintB();
                        report.ProductionNormItemWoodBlocks = GetSumProductionNormItemBlocks();
                        report.ProductionNormItemPaintTotalWoodConsumable = GetSumProductionNormItemWoodConsumable();

                        if (BOSApp.CurrentCompanyInfo != null)
                        {
                            XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_TenCongTy"];
                            if (label != null)
                            {
                                label.Text = BOSApp.CurrentCompanyInfo.CSCompanyDesc;
                            }
                            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_DiaChi"];
                            if (label != null)
                            {
                                label.Text = string.Format("Địa chỉ " + BOSApp.CurrentCompanyInfo.CSCompanyAddressLine1);
                            }
                            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_InfoCongTy"];
                            if (label != null)
                            {
                                label.Text = string.Format("ĐT: {0} | Email: {1} | Website: {2}", BOSApp.CurrentCompanyInfo.CSCompanyPhone
                                                            , BOSApp.CurrentCompanyInfo.CSCompanyEmail, BOSApp.CurrentCompanyInfo.CSCompanyWebsite);
                            }
                        }
                        guiReportPreview viewer = new guiReportPreview(report);
                        viewer.Show();
                    }
                    else
                    {
                        RPProductionNormIngredientPaintHP report = new RPProductionNormIngredientPaintHP(productionNormItemTotalQty);
                        //report.bsSemiProduct.DataSource = productionNormItemList;
                        report.bsSemiProduct.DataSource = productionNormItemMaterialDataSource.OrderBy(o => o.DetailOrderID);
                        report.bsHardware.DataSource = productionNormItemHardwareDataSource;
                        report.bsIngredientPaint.DataSource = productionNormItemPaintDataSource;
                        report.bsIngredientPacking.DataSource = productionNormItemPackagingDataSource;
                        report.bsGeneralMaterial.DataSource = productionNormItemGeneralMaterialDataSource;

                        report.bsProductionNorm.DataSource = productionNormList;
                        //enable report detail
                        // EnableReportDetail(report,productType);
                        report.ProductionNormItemPaintA = GetSumProductionNormItemPaintA();
                        report.ProductionNormItemPaintB = GetSumProductionNormItemPaintB();
                        report.ProductionNormItemWoodBlocks = GetSumProductionNormItemBlocks();
                        report.ProductionNormItemPaintTotalWoodConsumable = GetSumProductionNormItemWoodConsumable();

                        if (BOSApp.CurrentCompanyInfo != null)
                        {
                            XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_TenCongTy"];
                            if (label != null)
                            {
                                label.Text = BOSApp.CurrentCompanyInfo.CSCompanyDesc;
                            }
                            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_DiaChi"];
                            if (label != null)
                            {
                                label.Text = string.Format("Địa chỉ " + BOSApp.CurrentCompanyInfo.CSCompanyAddressLine1);
                            }
                            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_InfoCongTy"];
                            if (label != null)
                            {
                                label.Text = string.Format("ĐT: {0} | Email: {1} | Website: {2}", BOSApp.CurrentCompanyInfo.CSCompanyPhone
                                                            , BOSApp.CurrentCompanyInfo.CSCompanyEmail, BOSApp.CurrentCompanyInfo.CSCompanyWebsite);
                            }
                        }
                        guiReportPreview viewer = new guiReportPreview(report);
                        viewer.Show();
                    }    
                }

                if (printType == ProductionNormPrintType.IngredientPackaging.ToString())
                {
                    if (!isHappy)
                    {
                        RPProductionNormIngredientPackaging report = new RPProductionNormIngredientPackaging(productionNormItemTotalQty);
                        //report.bsSemiProduct.DataSource = productionNormItemList;
                        report.bsSemiProduct.DataSource = productionNormItemMaterialDataSource.OrderBy(o => o.DetailOrderID);
                        report.bsHardware.DataSource = productionNormItemHardwareDataSource;
                        report.bsIngredientPaint.DataSource = productionNormItemPaintDataSource;
                        report.bsIngredientPacking.DataSource = productionNormItemPackagingDataSource;
                        report.bsGeneralMaterial.DataSource = productionNormItemGeneralMaterialDataSource;

                        foreach (MMProductionNormsInfo item in productionNormList)
                        {
                            HREmployeesController objEmployeesController = new HREmployeesController();
                            HREmployeesInfo objEmployees = (HREmployeesInfo)objEmployeesController.GetObjectByID(item.FK_HREmployeePackingMaterialApprove);
                            item.MMProductionNormApproveUserName = objEmployees != null ? objEmployees.HREmployeeName : string.Empty;
                        }
                        report.bsProductionNorm.DataSource = productionNormList;
                        //enable report detail
                        // EnableReportDetail(report,productType);
                        report.ProductionNormItemPaintA = GetSumProductionNormItemPaintA();
                        report.ProductionNormItemPaintB = GetSumProductionNormItemPaintB();
                        report.ProductionNormItemWoodBlocks = GetSumProductionNormItemBlocks();
                        report.ProductionNormItemPaintTotalWoodConsumable = GetSumProductionNormItemWoodConsumable();


                        if (BOSApp.CurrentCompanyInfo != null)
                        {
                            XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_TenCongTy"];
                            if (label != null)
                            {
                                label.Text = BOSApp.CurrentCompanyInfo.CSCompanyDesc;
                            }
                            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_DiaChi"];
                            if (label != null)
                            {
                                label.Text = string.Format("Địa chỉ " + BOSApp.CurrentCompanyInfo.CSCompanyAddressLine1);
                            }
                            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_InfoCongTy"];
                            if (label != null)
                            {
                                label.Text = string.Format("ĐT: {0} | Email: {1} | Website: {2}", BOSApp.CurrentCompanyInfo.CSCompanyPhone
                                                            , BOSApp.CurrentCompanyInfo.CSCompanyEmail, BOSApp.CurrentCompanyInfo.CSCompanyWebsite);
                            }
                        }
                        guiReportPreview viewer = new guiReportPreview(report);
                        viewer.Show();
                    }
                    else
                    {
                        RPProductionNormIngredientPackagingHP report = new RPProductionNormIngredientPackagingHP(productionNormItemTotalQty);
                        //report.bsSemiProduct.DataSource = productionNormItemList;
                        report.bsSemiProduct.DataSource = productionNormItemMaterialDataSource.OrderBy(o => o.DetailOrderID);
                        report.bsHardware.DataSource = productionNormItemHardwareDataSource;
                        report.bsIngredientPaint.DataSource = productionNormItemPaintDataSource;
                        report.bsIngredientPacking.DataSource = productionNormItemPackagingDataSource;
                        report.bsGeneralMaterial.DataSource = productionNormItemGeneralMaterialDataSource;

                        foreach (MMProductionNormsInfo item in productionNormList)
                        {
                            HREmployeesController objEmployeesController = new HREmployeesController();
                            HREmployeesInfo objEmployees = (HREmployeesInfo)objEmployeesController.GetObjectByID(item.FK_HREmployeePackingMaterialApprove);
                            item.MMProductionNormApproveUserName = objEmployees != null ? objEmployees.HREmployeeName : string.Empty;
                        }
                        report.bsProductionNorm.DataSource = productionNormList;
                        //enable report detail
                        // EnableReportDetail(report,productType);
                        report.ProductionNormItemPaintA = GetSumProductionNormItemPaintA();
                        report.ProductionNormItemPaintB = GetSumProductionNormItemPaintB();
                        report.ProductionNormItemWoodBlocks = GetSumProductionNormItemBlocks();
                        report.ProductionNormItemPaintTotalWoodConsumable = GetSumProductionNormItemWoodConsumable();


                        if (BOSApp.CurrentCompanyInfo != null)
                        {
                            XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_TenCongTy"];
                            if (label != null)
                            {
                                label.Text = BOSApp.CurrentCompanyInfo.CSCompanyDesc;
                            }
                            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_DiaChi"];
                            if (label != null)
                            {
                                label.Text = string.Format("Địa chỉ " + BOSApp.CurrentCompanyInfo.CSCompanyAddressLine1);
                            }
                            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_InfoCongTy"];
                            if (label != null)
                            {
                                label.Text = string.Format("ĐT: {0} | Email: {1} | Website: {2}", BOSApp.CurrentCompanyInfo.CSCompanyPhone
                                                            , BOSApp.CurrentCompanyInfo.CSCompanyEmail, BOSApp.CurrentCompanyInfo.CSCompanyWebsite);
                            }
                        }
                        guiReportPreview viewer = new guiReportPreview(report);
                        viewer.Show();
                    }    
                }

                if (printType == ProductionNormPrintType.GeneralMaterial.ToString())
                {
                    if (!isHappy)
                    {
                        RPProductionNormGeneralMaterial report = new RPProductionNormGeneralMaterial(productionNormItemTotalQty);
                        //report.bsSemiProduct.DataSource = productionNormItemList;
                        report.bsSemiProduct.DataSource = productionNormItemMaterialDataSource.OrderBy(o => o.DetailOrderID);
                        report.bsHardware.DataSource = productionNormItemHardwareDataSource;
                        report.bsIngredientPaint.DataSource = productionNormItemPaintDataSource;
                        report.bsIngredientPacking.DataSource = productionNormItemPackagingDataSource;
                        report.bsGeneralMaterial.DataSource = productionNormItemGeneralMaterialDataSource;

                        foreach (MMProductionNormsInfo item in productionNormList)
                        {
                            HREmployeesController objEmployeesController = new HREmployeesController();
                            HREmployeesInfo objEmployees = (HREmployeesInfo)objEmployeesController.GetObjectByID(item.FK_HREmployeeGeneralMaterialApproved);
                            item.MMProductionNormApproveUserName = objEmployees != null ? objEmployees.HREmployeeName : string.Empty;
                        }
                        report.bsProductionNorm.DataSource = productionNormList;
                        //enable report detail
                        // EnableReportDetail(report,productType);
                        report.ProductionNormItemPaintA = GetSumProductionNormItemPaintA();
                        report.ProductionNormItemPaintB = GetSumProductionNormItemPaintB();
                        report.ProductionNormItemWoodBlocks = GetSumProductionNormItemBlocks();
                        report.ProductionNormItemPaintTotalWoodConsumable = GetSumProductionNormItemWoodConsumable();

                        if (BOSApp.CurrentCompanyInfo != null)
                        {
                            XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_TenCongTy"];
                            if (label != null)
                            {
                                label.Text = BOSApp.CurrentCompanyInfo.CSCompanyDesc;
                            }
                            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_DiaChi"];
                            if (label != null)
                            {
                                label.Text = string.Format("Địa chỉ " + BOSApp.CurrentCompanyInfo.CSCompanyAddressLine1);
                            }
                            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_InfoCongTy"];
                            if (label != null)
                            {
                                label.Text = string.Format("ĐT: {0} | Email: {1} | Website: {2}", BOSApp.CurrentCompanyInfo.CSCompanyPhone
                                                            , BOSApp.CurrentCompanyInfo.CSCompanyEmail, BOSApp.CurrentCompanyInfo.CSCompanyWebsite);
                            }
                        }

                        guiReportPreview viewer = new guiReportPreview(report);
                        viewer.Show();
                    }
                    else
                    {
                        RPProductionNormGeneralMaterialHP report = new RPProductionNormGeneralMaterialHP(productionNormItemTotalQty);
                        //report.bsSemiProduct.DataSource = productionNormItemList;
                        report.bsSemiProduct.DataSource = productionNormItemMaterialDataSource.OrderBy(o => o.DetailOrderID);
                        report.bsHardware.DataSource = productionNormItemHardwareDataSource;
                        report.bsIngredientPaint.DataSource = productionNormItemPaintDataSource;
                        report.bsIngredientPacking.DataSource = productionNormItemPackagingDataSource;
                        report.bsGeneralMaterial.DataSource = productionNormItemGeneralMaterialDataSource;

                        foreach (MMProductionNormsInfo item in productionNormList)
                        {
                            HREmployeesController objEmployeesController = new HREmployeesController();
                            HREmployeesInfo objEmployees = (HREmployeesInfo)objEmployeesController.GetObjectByID(item.FK_HREmployeeGeneralMaterialApproved);
                            item.MMProductionNormApproveUserName = objEmployees != null ? objEmployees.HREmployeeName : string.Empty;
                        }
                        report.bsProductionNorm.DataSource = productionNormList;
                        //enable report detail
                        // EnableReportDetail(report,productType);
                        report.ProductionNormItemPaintA = GetSumProductionNormItemPaintA();
                        report.ProductionNormItemPaintB = GetSumProductionNormItemPaintB();
                        report.ProductionNormItemWoodBlocks = GetSumProductionNormItemBlocks();
                        report.ProductionNormItemPaintTotalWoodConsumable = GetSumProductionNormItemWoodConsumable();

                        if (BOSApp.CurrentCompanyInfo != null)
                        {
                            XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_TenCongTy"];
                            if (label != null)
                            {
                                label.Text = BOSApp.CurrentCompanyInfo.CSCompanyDesc;
                            }
                            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_DiaChi"];
                            if (label != null)
                            {
                                label.Text = string.Format("Địa chỉ " + BOSApp.CurrentCompanyInfo.CSCompanyAddressLine1);
                            }
                            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_InfoCongTy"];
                            if (label != null)
                            {
                                label.Text = string.Format("ĐT: {0} | Email: {1} | Website: {2}", BOSApp.CurrentCompanyInfo.CSCompanyPhone
                                                            , BOSApp.CurrentCompanyInfo.CSCompanyEmail, BOSApp.CurrentCompanyInfo.CSCompanyWebsite);
                            }
                        }
                        guiReportPreview viewer = new guiReportPreview(report);
                        viewer.Show();
                    }    
                }
                if (printType == ProductionNormPrintType.Material.ToString())
                {
                    RPProductionNormMaterial report = new RPProductionNormMaterial(productionNormItemTotalQty);
                    //report.bsSemiProduct.DataSource = productionNormItemList;
                    report.bsSemiProduct.DataSource = productionNormItemMaterialDataSource.Where(o => !string.IsNullOrWhiteSpace(o.MMProductionNormItemMaterialNo)).OrderBy(o => o.DetailOrderID);
                    report.bsHardware.DataSource = productionNormItemHardwareDataSource;
                    report.bsIngredientPaint.DataSource = productionNormItemPaintDataSource;
                    report.bsIngredientPacking.DataSource = productionNormItemPackagingDataSource;
                    report.bsGeneralMaterial.DataSource = productionNormItemGeneralMaterialDataSource;

                    foreach (MMProductionNormsInfo item in productionNormList)
                    {
                        HREmployeesController objEmployeesController = new HREmployeesController();
                        HREmployeesInfo objEmployees = (HREmployeesInfo)objEmployeesController.GetObjectByID(item.FK_HREmployeeGeneralMaterialApproved);
                        item.MMProductionNormApproveUserName = objEmployees != null ? objEmployees.HREmployeeName : string.Empty;
                    }
                    report.bsProductionNorm.DataSource = productionNormList;
                    //enable report detail
                    // EnableReportDetail(report,productType);
                    report.ProductionNormItemPaintA = GetSumProductionNormItemPaintA();
                    report.ProductionNormItemPaintB = GetSumProductionNormItemPaintB();
                    report.ProductionNormItemWoodBlocks = GetSumProductionNormItemBlocks();
                    report.ProductionNormItemPaintTotalWoodConsumable = GetSumProductionNormItemWoodConsumable();

                    if (BOSApp.CurrentCompanyInfo != null)
                    {
                        XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_TenCongTy"];
                        if (label != null)
                        {
                            label.Text = BOSApp.CurrentCompanyInfo.CSCompanyDesc;
                        }
                        label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_DiaChi"];
                        if (label != null)
                        {
                            label.Text = string.Format("Địa chỉ " + BOSApp.CurrentCompanyInfo.CSCompanyAddressLine1);
                        }
                        label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_InfoCongTy"];
                        if (label != null)
                        {
                            label.Text = string.Format("ĐT: {0} | Email: {1} | Website: {2}", BOSApp.CurrentCompanyInfo.CSCompanyPhone
                                                        , BOSApp.CurrentCompanyInfo.CSCompanyEmail, BOSApp.CurrentCompanyInfo.CSCompanyWebsite);
                        }
                    }

                    guiReportPreview viewer = new guiReportPreview(report);
                    viewer.Show();
                }

                //ActionCancel();
            }
        }

        public bool CheckInValidProductItemCode()
        {
            MMProductionNormsInfo mainobject = (MMProductionNormsInfo)CurrentModuleEntity.MainObject;
            MMProductionNormsController objPnisController = new MMProductionNormsController();
            string messagesError = objPnisController.CheckValidProductItemCode(mainobject.MMProductionNormID);
            if (string.IsNullOrWhiteSpace(messagesError))
                return false;

            MessageBox.Show(messagesError, BaseLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            return true;
        }
        #endregion

        #region Profile
        public void InvalidateProfileManagement()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo objProductionNormsInfo = (MMProductionNormsInfo)entity.MainObject;
            if (objProductionNormsInfo.MMProductionNormID > 0)
            {
                entity.ProfileManagementItemList.Invalidate(
                   (new MMProfileManagementItemsController()).GetProfileByNormID(objProductionNormsInfo.MMProductionNormID));
            }
        }
        public void SaveProfile()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo objProductionNormsInfo = (MMProductionNormsInfo)entity.MainObject;
            if (objProductionNormsInfo.MMProductionNormID > 0)
            {
                entity.ProfileManagementItemList.SaveItemObjects();
            }
        }
        public void RemoveProfileItemList()
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            MMProductionNormsInfo objProductionNormsInfo = (MMProductionNormsInfo)entity.MainObject;
            if (objProductionNormsInfo.MMProductionNormID > 0)
            {
                entity.ProfileManagementItemList.RemoveSelectedRowObjectFromList();
            }
        }
        #endregion

        public void ChangeWoodType(int woodTypeID)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            ICProductAttributesInfo objProductAttributesInfo = (ICProductAttributesInfo)(new ICProductAttributesController()).GetObjectByID(woodTypeID);
            if (entity.ProductList.Count > 0 && objProductAttributesInfo != null)
            {
                if (MessageBox.Show(string.Format("Bạn có muốn cập nhật Nguyên liệu {0} cho tất cả cụm và chi tiết?", objProductAttributesInfo.ICProductAttributeValue)
                                    , CommonLocalizedResources.MessageBoxDefaultCaption
                                    , MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    foreach (ICProductsInfo item in entity.ProductList)
                    {
                        item.FK_ICProductAttributeWoodTypeID = woodTypeID;
                    }
                    entity.ProductList.GridControl?.RefreshDataSource();
                }
            }
        }

        public void ChangeMeasureUnit(int measureUnitID)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            ICMeasureUnitsInfo objMeasureUnitsInfo = (ICMeasureUnitsInfo)(new ICMeasureUnitsController()).GetObjectByID(measureUnitID);
            if (entity.ProductList.Count > 0 && objMeasureUnitsInfo != null)
            {
                if (MessageBox.Show(string.Format("Bạn có muốn cập nhật Đơn vị tính {0} cho tất cả cụm và chi tiết?", objMeasureUnitsInfo.ICMeasureUnitName)
                                    , CommonLocalizedResources.MessageBoxDefaultCaption
                                    , MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    foreach (ICProductsInfo item in entity.ProductList)
                    {
                        item.FK_ICProductBasicUnitID = measureUnitID;
                    }
                    entity.ProductList.GridControl?.RefreshDataSource();
                }
            }
        }
        public List<ADConfigValuesInfo> GetConfigProductionComplexityType()
        {
            ADConfigValuesController objConfigValuesController = new ADConfigValuesController();
            DataSet ds = objConfigValuesController.GetADConfigValuesByGroup(ConfigValueGroup.ConfigProductionComplexityType.ToString());
            List<ADConfigValuesInfo> listConfigValues = new List<ADConfigValuesInfo>();
            if (ds != null && ds.Tables.Count > 0)
            {
                listConfigValues = (List<ADConfigValuesInfo>)objConfigValuesController.GetListFromDataSet(ds);
            }
            return listConfigValues;
        }
        public void ChangeConfigProductionComplexityType(string config)
        {
            CarcassBOMEntities entity = (CarcassBOMEntities)CurrentModuleEntity;
            string configText = BOSApp.GetDisplayTextFromConfigValue(ConfigValueGroup.ConfigProductionComplexityType.ToString(), config);
            if (MessageBox.Show(string.Format("Bạn có muốn cập nhật độ phức tạp sản xuất {0} cho tất cả cụm và chi tiết?", configText)
                                   , CommonLocalizedResources.MessageBoxDefaultCaption
                                   , MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                foreach (ICProductsInfo item in entity.ProductList)
                {
                    item.ICConfigProductionComplexityType = config;
                }
                entity.ProductList.GridControl?.RefreshDataSource();
            }
        }

        /// <summary>
        /// show form compare product unit cost by supplier and from date to date
        /// </summary>
        public string ShowSelectPaintProcessesData()
        {
            string rerult = string.Empty;
            List<MMPaintProcessessInfo> paintList = GetPaintProcessessDatasource(string.Empty);
            guiChooseColor<MMPaintProcessessInfo> gui = new guiChooseColor<MMPaintProcessessInfo>("MMPaintProcessess", paintList, this);
            gui.ColumnArr = new string[] { "MMPaintProcessesNo", "MMPaintProcessesPaintName" };
            gui.Module = this;
            gui.ShowDialog();
            if (gui.DialogResult == DialogResult.OK)
            {
                List<MMPaintProcessessInfo> selectedList = (List<MMPaintProcessessInfo>)gui.SelectedObjects;
                rerult = string.Join(",", selectedList.Select(o => o.MMPaintProcessesID.ToString()));
            }
            return rerult;
        }
        public string ShowSelectColorData()
        {
            string rerult = string.Empty;
            List<ICProductsForViewInfo> paintList = GetProductCorlorDatasource(ProductType.IngredientPaint.ToString());
            guiChooseColor<ICProductsForViewInfo> gui = new guiChooseColor<ICProductsForViewInfo>("ICProducts", paintList, this);
            gui.ColumnArr = new string[] { "ICProductNo", "ICProductName", "ICProductNoOfOldSys", "ICProductDesc" };
            gui.Module = this;
            gui.ShowDialog();
            if (gui.DialogResult == DialogResult.OK)
            {
                List<ICProductsForViewInfo> selectedList = (List<ICProductsForViewInfo>)gui.SelectedObjects;
                rerult = string.Join(",", selectedList.Select(o => o.ICProductID.ToString()));
            }
            return rerult;
        }
        public List<MMPaintProcessessInfo> GetPaintProcessessDatasource(string type)
        {
            List<MMPaintProcessessInfo> paintList = new List<MMPaintProcessessInfo>();
            MMPaintProcessessController objMMPaintProcessessController = new MMPaintProcessessController();
            paintList = objMMPaintProcessessController.GetPaintProcessesByType(string.Empty);
            return paintList;
        }
        public List<ICProductsForViewInfo> GetProductCorlorDatasource(string type)
        {
            List<ICProductsForViewInfo> paintList = new List<ICProductsForViewInfo>();
            ICProductsController objICProductsController = new ICProductsController();
            paintList = BOSApp.CurrentProductList.Where(p => p.ICProductType == type).ToList();
            return paintList;
        }
    }
}









