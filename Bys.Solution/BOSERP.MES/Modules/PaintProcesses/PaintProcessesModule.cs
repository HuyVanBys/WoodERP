using BOSCommon;
using BOSCommon.Constants;
using BOSLib;
using BOSReport;
using DevExpress.XtraReports.UI;
using Localization;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows.Forms;
//using BOSERP.Modules.PaintProcesses.Localization;

namespace BOSERP.Modules.PaintProcesses
{
    #region PaintProcessesModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:PaintProcessesModule
    //Created Date:Wednesday, November 04, 2015
    //-----------------------------------------------------------

    public class PaintProcessesModule : BaseModuleERP
    {
        #region Constants
        public const string PaintProcessesItemTreeListControlName = "fld_trlMMPaintProcessesItems";
        public const bool isActionDuplicate = false;
        #endregion

        #region Property
        /// <summary>
        /// Define product group button edit
        /// </summary>
        //private BOSButtonEdit ProductGroupsButtonEdit;
        PaintProcessesItemsTreeListControl PaintProcessesItemTreeListControl;
        #endregion

        public PaintProcessesModule()
        {
            Name = "PaintProcesses";
            CurrentModuleEntity = new PaintProcessesEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();
            PaintProcessesItemTreeListControl = (PaintProcessesItemsTreeListControl)Controls[PaintProcessesItemTreeListControlName];
        }

        public decimal GetSumPaintProcessesItemQty()
        {
            decimal result = 0;
            PaintProcessesEntities entity = (PaintProcessesEntities)CurrentModuleEntity;
            foreach (MMPaintProcessesItemsInfo item in entity.PaintProcessesItemList)
            {
                if (item.FK_ICProductID != 0)
                {
                    result += item.MMPaintProcessesItemProductQty;
                }
                if (item.SubList != null && item.SubList.Count > 0)
                {
                    foreach (MMPaintProcessesItemsInfo itemChild in item.SubList)
                    {
                        result += itemChild.MMPaintProcessesItemProductQty;
                    }
                }
            }
            return result;
        }

        public decimal GetSumPaintProcessesItemAmount()
        {
            decimal result = 0;
            PaintProcessesEntities entity = (PaintProcessesEntities)CurrentModuleEntity;
            foreach (MMPaintProcessesItemsInfo item in entity.PaintProcessesItemList)
            {
                if (item.FK_ICProductID != 0)
                {
                    result += item.MMPaintProcessesItemTotalCost;
                }
                if (item.SubList != null && item.SubList.Count > 0)
                {
                    foreach (MMPaintProcessesItemsInfo itemChild in item.SubList)
                    {
                        result += itemChild.MMPaintProcessesItemTotalCost;
                    }
                }
            }
            return Math.Round(result, 4);
        }
        public void AddItemToPaintProcesesItemList(int productID, int groupID)
        {
            ICProductsController objProductsController = new ICProductsController();
            PaintProcessesEntities entity = (PaintProcessesEntities)CurrentModuleEntity;
            MMPaintProcessesItemsInfo objPaintProcessesItemsInfo = new MMPaintProcessesItemsInfo();
            if (objPaintProcessesItemsInfo.SubList == null)
                objPaintProcessesItemsInfo.SubList = new BOSTreeList();
            if (productID > 0)
            {
                //Issue get product unit cost of purchase receipt
                ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
                ICReceiptItemsInfo objReceiptItemsInfo = objReceiptItemsController.GetUnitCostByProductID(productID);
                if (objReceiptItemsInfo != null)
                {
                    objPaintProcessesItemsInfo.MMPaintProcessesItemProductUnitCost = objReceiptItemsInfo.ICReceiptItemProductUnitCost;
                }

                ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(productID);
                if (objProductsInfo != null)
                {
                    objPaintProcessesItemsInfo.MMPaintProcessesItemParentID = groupID;
                    objPaintProcessesItemsInfo.FK_ICProductID = productID;
                    objPaintProcessesItemsInfo.MMPaintProcessesItemNo = objProductsInfo.ICProductNo;
                    objPaintProcessesItemsInfo.MMPaintProcessesItemDesc = objProductsInfo.ICProductDesc;
                    objPaintProcessesItemsInfo.MMPaintProcessesItemName = objProductsInfo.ICProductName;
                    objPaintProcessesItemsInfo.FK_ICMeasureUnitID = objProductsInfo.FK_ICProductBasicUnitID;
                    objPaintProcessesItemsInfo.MMPaintProcessesItemProductUnitCost = objProductsInfo.ICProductSupplierPrice;
                }
            }
            foreach (MMPaintProcessesItemsInfo item in entity.PaintProcessesItemList)
            {
                if (productID > 0)
                {
                    if (groupID > 0)
                    {
                        if (item.MMPaintProcessesItemID == groupID)
                        {
                            if (item.SubList == null)
                                item.SubList = new BOSTreeList();

                            item.SubList.Add(objPaintProcessesItemsInfo);
                        }
                    }
                }
            }
            if (productID > 0 && groupID == 0)
            {
                entity.PaintProcessesItemList.Add(objPaintProcessesItemsInfo);
            }

            entity.PaintProcessesItemList.TreeListControl.RefreshDataSource();
            entity.PaintProcessesItemList.TreeListControl.ForceInitialize();
            entity.PaintProcessesItemList.TreeListControl.OptionsBehavior.CanCloneNodesOnDrop = false;
            entity.PaintProcessesItemList.TreeListControl.OptionsBehavior.AutoChangeParent = false;
            entity.PaintProcessesItemList.TreeListControl.ExpandAll();
            entity.PaintProcessesItemList.TreeListControl.BestFitColumns();
        }

        public DataTable GetMeasureUnit()
        {
            ICMeasureUnitsController objMeasureUnitsController = new ICMeasureUnitsController();
            DataSet ds = objMeasureUnitsController.GetAllObjects();
            DataTable dt = new DataTable();
            if (ds != null)
                dt = ds.Tables[0];
            return dt;
        }
        public override void ActionNew()
        {
            base.ActionNew();
            MMPaintProcessessInfo objPaintProcessessInfo = (MMPaintProcessessInfo)((PaintProcessesEntities)CurrentModuleEntity).MainObject;
            objPaintProcessessInfo.MMPaintProcessesStatus = Status.New.ToString();
        }

        public override void ActionCancel()
        {
            PaintProcessesEntities entity = (PaintProcessesEntities)CurrentModuleEntity;
            MMPaintProcessessInfo objPaintProcessessInfo = (MMPaintProcessessInfo)((PaintProcessesEntities)CurrentModuleEntity).MainObject;
            MMPaintProcessesItemsController objPaintProcessesItemsController = new MMPaintProcessesItemsController();
            foreach (MMPaintProcessesItemsInfo item in entity.PaintProcessesItemList)
            {
                if (item.MMPaintProcessesItemName.Equals(PaintProcessesLocalizedResources.TempNameMessage))
                {
                    item.MMPaintProcessesItemName = item.MMPaintProcessesItemGroupName;
                    if (item.SubList == null || item.SubList.Count == 0)
                    {
                        if (item.MMPaintProcessesItemGroupName == string.Empty)
                        {
                            if (item.MMPaintProcessesItemID > 0 && objPaintProcessessInfo.MMPaintProcessesID > 0)
                                objPaintProcessesItemsController.DeleteObject(item.MMPaintProcessesItemID);
                        }
                    }
                }
                if (objPaintProcessessInfo.MMPaintProcessesID == 0 && item.MMPaintProcessesItemID > 0)
                    objPaintProcessesItemsController.DeleteObject(item.MMPaintProcessesItemID);
            }
            base.ActionCancel();
            if (Toolbar.CurrentObjectID > 0)
                Invalidate(Toolbar.CurrentObjectID);
        }

        public override int ActionSave()
        {
            PaintProcessesEntities entity = (PaintProcessesEntities)CurrentModuleEntity;
            MMPaintProcessessInfo objPaintProcessessInfo = (MMPaintProcessessInfo)((PaintProcessesEntities)CurrentModuleEntity).MainObject;
            MMPaintProcessesItemsController objPaintProcessesItemsController = new MMPaintProcessesItemsController();
            int objectID = base.ActionSave();
            if (objectID > 0)
            {
                foreach (MMPaintProcessesItemsInfo item in entity.PaintProcessesItemList)
                {
                    if (item.MMPaintProcessesItemName.Equals(PaintProcessesLocalizedResources.TempNameMessage))
                    {
                        item.MMPaintProcessesItemName = item.MMPaintProcessesItemGroupName;
                        if (item.SubList == null || item.SubList.Count == 0)
                        {
                            if (item.MMPaintProcessesItemGroupName == string.Empty)
                            {
                                if (item.MMPaintProcessesItemID > 0)
                                    objPaintProcessesItemsController.DeleteObject(item.MMPaintProcessesItemID);
                            }
                        }
                    }
                }
            }
            Invalidate(objectID);
            return objectID;
        }

        public void ShowCategoryTree()
        {
            if (IsEditable())
            {
                ActionEdit();
            }

            PaintProcessesEntities entity = (PaintProcessesEntities)CurrentModuleEntity;
            MMPaintProcessessInfo objPaintProcessessInfo = (MMPaintProcessessInfo)entity.MainObject;
            int departmentID = BOSCommon.Constants.DepartmentID.PaintProduct;

            if (objPaintProcessessInfo.FK_ICProductAttributeColorID > 0)
            {
                DataRow row = BOSApp.GetObjectFromCatche("ICProductAttributes", "ICProductAttributeID", objPaintProcessessInfo.FK_ICProductAttributeColorID);
                ICProductAttributesInfo objColor = new ICProductAttributesInfo();
                if (row != null)
                {
                    objColor = (ICProductAttributesInfo)(new ICProductAttributesController()).GetObjectFromDataRow(row);
                    if (objColor != null && objColor.FK_ICProductGroupID > 0)
                    {
                        objPaintProcessessInfo.FK_ICProductGroupID = objColor.FK_ICProductGroupID;
                    }
                }

            }
            ICProductGroupsController objProductGroupsController = new ICProductGroupsController();
            guiProductGroupTree guiProductGroupTree = new guiProductGroupTree(departmentID, objPaintProcessessInfo.FK_ICProductGroupID, ProductType.IngredientPaint.ToString());
            guiProductGroupTree.Module = this;
            if (guiProductGroupTree.ShowDialog() == DialogResult.OK)
            {
                ICProductGroupsInfo objProductGroupsInfo = (ICProductGroupsInfo)guiProductGroupTree.TreeList.GetSelectedObject();
                if (objProductGroupsInfo != null)
                {

                    objPaintProcessessInfo.FK_ICProductGroupID = objProductGroupsInfo.ICProductGroupID;
                    objPaintProcessessInfo.MMPaintProcessesProductGroupName = guiProductGroupTree.GetSelectedProductGroupName();
                }
                else
                {
                    objPaintProcessessInfo.FK_ICProductGroupID = 0;
                    objPaintProcessessInfo.MMPaintProcessesProductGroupName = string.Empty;
                }
                entity.UpdateMainObjectBindingSource();
            }
        }

        public List<MMPaintProcessesItemsInfo> InvalidatePaintProcessesGroupLookUp()
        {
            PaintProcessesEntities entity = (PaintProcessesEntities)CurrentModuleEntity;
            MMPaintProcessesItemsInfo objPaintProcessesItemsInfo = new MMPaintProcessesItemsInfo();
            List<MMPaintProcessesItemsInfo> PaintProcessesGroupList = new List<MMPaintProcessesItemsInfo>();
            PaintProcessesGroupList.Add(objPaintProcessesItemsInfo);
            foreach (MMPaintProcessesItemsInfo item in entity.PaintProcessesItemList)
            {
                if (item.FK_ICProductID == 0 && item.MMPaintProcessesItemID > 0)
                {
                    PaintProcessesGroupList.Add(item);
                }
            }
            return PaintProcessesGroupList;
        }

        public void AddNewGroup()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                PaintProcessesEntities entity = (PaintProcessesEntities)CurrentModuleEntity;
                MMPaintProcessesItemsController objPaintProcessesItemsController = new MMPaintProcessesItemsController();
                MMPaintProcessesItemsInfo objPaintProcessesItemsInfo = new MMPaintProcessesItemsInfo();
                objPaintProcessesItemsInfo.MMPaintProcessesItemName = PaintProcessesLocalizedResources.TempNameMessage;
                objPaintProcessesItemsInfo.MMPaintProcessesItemNo = " ";
                objPaintProcessesItemsController.CreateObject(objPaintProcessesItemsInfo);
                if (objPaintProcessesItemsInfo.MMPaintProcessesItemID > 0)
                {
                    objPaintProcessesItemsInfo.SubList = new BOSTreeList();
                    entity.PaintProcessesItemList.Add(objPaintProcessesItemsInfo);
                }

                entity.PaintProcessesItemList.TreeListControl.RefreshDataSource();
                entity.PaintProcessesItemList.TreeListControl.ExpandAll();
                entity.PaintProcessesItemList.TreeListControl.BestFitColumns();
            }
        }

        /// <summary>
        /// Show category tree for searching
        /// </summary>        
        public void ShowCategoryTreeForSearch()
        {
            MMPaintProcessessInfo objPaintProcessessInfo = (MMPaintProcessessInfo)CurrentModuleEntity.SearchObject;
            int departmentID = BOSCommon.Constants.DepartmentID.PaintProduct;

            guiProductGroupTree guiProductGroupTree = new guiProductGroupTree(departmentID, objPaintProcessessInfo.FK_ICProductGroupID);
            guiProductGroupTree.Module = this;
            if (guiProductGroupTree.ShowDialog() == DialogResult.OK)
            {
                ICProductGroupsInfo objProductGroupsInfo = (ICProductGroupsInfo)guiProductGroupTree.TreeList.GetSelectedObject();
                if (objProductGroupsInfo != null)
                {
                    objPaintProcessessInfo.FK_ICProductGroupID = objProductGroupsInfo.ICProductGroupID;
                    objPaintProcessessInfo.ICProductGroupName = guiProductGroupTree.GetSelectedProductGroupName();
                }
                else
                {
                    objPaintProcessessInfo.FK_ICProductGroupID = 0;
                    objPaintProcessessInfo.ICProductGroupName = string.Empty;
                }
                CurrentModuleEntity.UpdateSearchObjectBindingSource();
            }
        }

        /// <summary>
        /// Remove selected item from product component grid control
        /// </summary>

        public void RemoveSelectedItemFromPaintProcessesItem()
        {
            PaintProcessesEntities entity = (PaintProcessesEntities)CurrentModuleEntity;
            DevExpress.XtraTreeList.Nodes.TreeListNode currentNode = PaintProcessesItemTreeListControl.GetSelectedNode();
            if (currentNode != null)
            {
                if (currentNode.Level == 0)
                    PaintProcessesItemTreeListControl.Nodes.Remove(currentNode);
                else
                    currentNode.ParentNode.Nodes.Remove(currentNode);
            }
        }

        public override void Invalidate(int iObjectID)
        {
            base.Invalidate(iObjectID);
            PaintProcessesEntities entity = (PaintProcessesEntities)CurrentModuleEntity;

            MMPaintProcessesItemsController objPaintProcessesItemsController = new MMPaintProcessesItemsController();
            DataSet ds = new DataSet();
            ds = objPaintProcessesItemsController.GetParentOjects(iObjectID);
            entity.PaintProcessesItemList.Invalidate(ds);
            entity.PaintProcessesItemList.TreeListControl.RefreshDataSource();
            entity.PaintProcessesItemList.TreeListControl.ExpandAll();
            entity.PaintProcessesItemList.TreeListControl.BestFitColumns();
        }
        public void ChangeItemFromPaintProcessesItemsList(MMPaintProcessesItemsInfo objPaintProcessesItemsInfo)
        {
            PaintProcessesEntities entity = (PaintProcessesEntities)CurrentModuleEntity;

            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            if (objPaintProcessesItemsInfo.FK_ICProductID > 0)
            {
                objProductsInfo = (ICProductsInfo)objProductsController.GetProductByID(objPaintProcessesItemsInfo.FK_ICProductID);
                if (objProductsInfo != null)
                {
                    objPaintProcessesItemsInfo.MMPaintProcessesItemDesc = objProductsInfo.ICProductDesc;
                    objPaintProcessesItemsInfo.MMPaintProcessesItemName = objProductsInfo.ICProductName;
                    objPaintProcessesItemsInfo.MMPaintProcessesItemNo = objProductsInfo.ICProductNo;
                    objPaintProcessesItemsInfo.FK_ICMeasureUnitID = objProductsInfo.FK_ICProductBasicUnitID;
                    if (objPaintProcessesItemsInfo.MMPaintProcessesItemProductUnitCost == 0)
                        objPaintProcessesItemsInfo.MMPaintProcessesItemProductUnitCost = objProductsInfo.ICProductPrice01;
                    //set product price
                    objPaintProcessesItemsInfo.MMPaintProcessesItemTotalCost = objPaintProcessesItemsInfo.MMPaintProcessesItemProductQty
                        * objPaintProcessesItemsInfo.MMPaintProcessesItemProductUnitCost;
                }

                entity.PaintProcessesItemList.TreeListControl.RefreshDataSource();

                UpdateTotalAmount();
            }
        }

        public string UpdatePaintProcessesColor(int productAttributeID)
        {
            string result = string.Empty;
            PaintProcessesEntities entity = (PaintProcessesEntities)CurrentModuleEntity;
            ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
            if (productAttributeID > 0)
            {
                ICProductAttributesInfo objProductAttributesInfo = (ICProductAttributesInfo)objProductAttributesController.GetObjectByID(productAttributeID);
                if (objProductAttributesInfo != null)
                {
                    MMPaintProcessessInfo objPaintProcessessInfo = (MMPaintProcessessInfo)CurrentModuleEntity.MainObject;
                    objPaintProcessessInfo.MMPaintProcessesPaintName = objProductAttributesInfo.ICProductAttributeValue;
                    objPaintProcessessInfo.FK_ICProductGroupID = objProductAttributesInfo.FK_ICProductGroupID;
                    objPaintProcessessInfo.FK_ICProductAttributeHTID = objProductAttributesInfo.FK_ICProductAttributeHTType;
                    result = BOSApp.GetDisplayTextFromCatche("ICProductGroups", "ICProductGroupID", objProductAttributesInfo.FK_ICProductGroupID, "ICProductGroupName");
                    entity.UpdateMainObjectBindingSource();
                }
            }
            return result;
        }
        /// <summary>
        /// Update total amounts of the sale order
        /// </summary>
        public void UpdateTotalAmount()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                PaintProcessesEntities entity = (PaintProcessesEntities)CurrentModuleEntity;

                entity.UpdateTotalAmount();
            }
        }

        public void SetDefaultDesc()
        {
            ICProductGroupsController objProductGroupsController = new ICProductGroupsController();
            MMPaintProcessessInfo objPaintProcessessInfo = (MMPaintProcessessInfo)CurrentModuleEntity.MainObject;
            objPaintProcessessInfo.MMPaintProcessesDesc = objPaintProcessessInfo.MMPaintProcessesName.Trim();
            if (objPaintProcessessInfo.FK_ICProductAttributeColorID > 0)
            {
                if (objPaintProcessessInfo.MMPaintProcessesPaintNo != string.Empty)
                    objPaintProcessessInfo.MMPaintProcessesDesc += string.Format(string.IsNullOrEmpty(objPaintProcessessInfo.MMPaintProcessesDesc) ? "{0}" : ", {0}", objPaintProcessessInfo.MMPaintProcessesPaintNo.Trim());
                if (objPaintProcessessInfo.MMPaintProcessesPaintName != string.Empty)
                    objPaintProcessessInfo.MMPaintProcessesDesc += string.Format(string.IsNullOrEmpty(objPaintProcessessInfo.MMPaintProcessesDesc) ? "{0}" : ", {0}", objPaintProcessessInfo.MMPaintProcessesPaintName.Trim());
            }
            if (objPaintProcessessInfo.FK_ICProductGroupID > 0)
            {
                ICProductGroupsInfo objProductGroupsInfo = (ICProductGroupsInfo)objProductGroupsController.GetObjectByID(objPaintProcessessInfo.FK_ICProductGroupID);
                if (objProductGroupsInfo != null)
                {
                    objPaintProcessessInfo.MMPaintProcessesDesc += string.Format(string.IsNullOrEmpty(objPaintProcessessInfo.MMPaintProcessesDesc) ? "{0}" : ", {0}", objProductGroupsInfo.ICProductGroupName.Trim());
                }
            }
            CurrentModuleEntity.UpdateMainObjectBindingSource();
        }

        #region Check Exist PaintProcesses

        /// <summary>
        ///  Check exist product
        /// </summary>
        public bool CheckExistPaintProcesses()
        {
            bool isExist = false;
            List<MMPaintProcessessInfo> paintProcessessList = new List<MMPaintProcessessInfo>();
            PaintProcessesEntities entity = (PaintProcessesEntities)CurrentModuleEntity;
            MMPaintProcessessInfo objPaintProcessessInfo = (MMPaintProcessessInfo)entity.MainObject;
            MMPaintProcessessController objPaintProcessessController = new MMPaintProcessessController();
            paintProcessessList = objPaintProcessessController.GetPaintProcessesByProoductAttributeID(objPaintProcessessInfo.FK_ICProductAttributeColorID);
            if (Toolbar.IsNewAction())
            {
                if (paintProcessessList != null && paintProcessessList.Count > 0)
                {
                    paintProcessessList = GetListByProp(paintProcessessList, objPaintProcessessInfo);
                    if (paintProcessessList != null && paintProcessessList.Count > 0)
                    {
                        MessageBox.Show(string.Format("Qui trình đã tồn tại trong hệ thống. Mã " + paintProcessessList[0].MMPaintProcessesNo + ": " + paintProcessessList[0].MMPaintProcessesDesc),
                                     MESLocalizedResources.MessageBoxDefaultCaption,
                                     MessageBoxButtons.OK, MessageBoxIcon.Information);

                        isExist = true;
                    }
                }
            }
            return isExist;
        }

        public List<MMPaintProcessessInfo> GetListByProp(List<MMPaintProcessessInfo> paintProcessessList, MMPaintProcessessInfo objPaintProcessessInfo)
        {
            List<MMPaintProcessessInfo> checkList = new List<MMPaintProcessessInfo>();
            object oldValue;
            object newValue;

            object oldProductGroupValue;
            object newProductGroupValue;

            foreach (MMPaintProcessessInfo item in paintProcessessList)
            {
                BOSDbUtil bosDbUtil = new BOSDbUtil();

                newValue = bosDbUtil.GetPropertyValue(objPaintProcessessInfo, "FK_ICProductAttributeColorID");
                oldValue = bosDbUtil.GetPropertyValue(item, "FK_ICProductAttributeColorID");
                if (oldValue != null && newValue != null && oldValue.Equals(newValue))
                {
                    oldProductGroupValue = bosDbUtil.GetPropertyValue(objPaintProcessessInfo, "FK_ICProductGroupID");
                    newProductGroupValue = bosDbUtil.GetPropertyValue(item, "FK_ICProductGroupID");
                    if (oldProductGroupValue != null && newProductGroupValue != null && oldProductGroupValue.Equals(newProductGroupValue))
                    {
                        checkList.Add(item);
                    }
                }
            }
            return checkList;
        }
        #endregion

        #region Product component
        #endregion

        public override void ActionPrint()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                PaintProcesses.PaintProcessesModule.PrintShipment(Toolbar.CurrentObjectID);
            }
        }
        public static void PrintShipment(int paintProcessesID)
        {
            RPPaintProcesses report = new RPPaintProcesses();
            InitPaintProcessesReport(report, paintProcessesID);
            guiReportPreview viewer = new guiReportPreview(report);
            viewer.Show();
        }
        private static void InitPaintProcessesReport(XtraReport report, int paintProcessesID)
        {
            BRBranchsController objBranchsController = new BRBranchsController();
            BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            if (objBranchsInfo != null)
            {
                XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchAddressLine3"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactAddressLine3;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchPhone"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactPhone;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchFax"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactFax;
                }
            }
            MMPaintProcessesItemsController objPaintProcessesItemsController = new MMPaintProcessesItemsController();

            List<MMPaintProcessesItemsInfo> List = objPaintProcessesItemsController.GetPaintProcessesItemForPrint(paintProcessesID);
            List<MMPaintProcessesItemsInfo> ListParent = List.Where(p => p.MMPaintProcessesItemParentID == 0).ToList();
            List<MMPaintProcessesItemsInfo> FinalList = new List<MMPaintProcessesItemsInfo>();
            foreach (MMPaintProcessesItemsInfo parent in ListParent)
            {
                FinalList.Add(parent);
                //item.listitem = new List<MMPaintProcessesItemsInfo>();
                List<MMPaintProcessesItemsInfo> itemList = List.Where(x => x.MMPaintProcessesItemParentID == parent.MMPaintProcessesItemID).ToList();
                foreach (MMPaintProcessesItemsInfo item in itemList)
                {
                    FinalList.Add(item);
                    //item.listitem.Add(parent);
                }
            }
            report.DataSource = FinalList;

        }

        protected override DataSet GetSearchData(ref string searchQuery)
        {
            MMPaintProcessessController objPaintProcessessController = new MMPaintProcessessController();
            MMPaintProcessessInfo searchObject = (MMPaintProcessessInfo)CurrentModuleEntity.SearchObject;
            DataSet ds = objPaintProcessessController.GetPaintProcessesList(searchObject.MMPaintProcessesNo,
                                                                            searchObject.MMPaintProcessesName,
                                                                            searchObject.FK_ICProductAttributeColorID,
                                                                            searchObject.MMPaintProcessesProductGroupName);

            return ds;
        }

        public override void ActionDuplicate()
        {
            base.ActionDuplicate();
            MMPaintProcessessInfo objPaintProcessessInfo = (MMPaintProcessessInfo)((PaintProcessesEntities)CurrentModuleEntity).MainObject;
            objPaintProcessessInfo.MMPaintProcessesStatus = Status.New.ToString();
            InvalidateToolbar();
        }

        public override void InvalidateToolbar()
        {
            base.InvalidateToolbar();
            MMPaintProcessessInfo mainObject = (MMPaintProcessessInfo)CurrentModuleEntity.MainObject;
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, false);
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, false);
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonCancelComplete, false);
            if (mainObject.MMPaintProcessesID > 0)
            {
                if (mainObject.MMPaintProcessesStatus == PaintProcessesStatus.New.ToString())
                {
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, true);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, true);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonCancelComplete, false);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, true);
                }
                else if (mainObject.MMPaintProcessesStatus == PaintProcessesStatus.Approve.ToString())
                {
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonCancelComplete, true);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, false);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, true);
                }    
                if (Toolbar.IsEditAction())
                {
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, true);
                }
            }
        }

        public void AllocationProductQty(MMPaintProcessesItemsInfo objPaintProcessesItemsInfo)
        {
            PaintProcessesEntities entity = (PaintProcessesEntities)CurrentModuleEntity;
            MMPaintProcessessInfo mainObject = (MMPaintProcessessInfo)entity.MainObject;
            MMPaintProcessesItemsController objPaintProcessesItemsController = new MMPaintProcessesItemsController();
            decimal sumMixRatio = 0;

            if (objPaintProcessesItemsInfo.SubList == null)
                return;

            foreach (MMPaintProcessesItemsInfo item in objPaintProcessesItemsInfo.SubList)
            {
                sumMixRatio += decimal.Parse(item.MMPaintProcessesItemMixRatio == "" ? "0" : item.MMPaintProcessesItemMixRatio);
            }
            foreach (MMPaintProcessesItemsInfo item in objPaintProcessesItemsInfo.SubList)
            {
                item.MMPaintProcessesItemProductQty = objPaintProcessesItemsInfo.MMPaintProcessesItemProductQty * decimal.Parse(item.MMPaintProcessesItemMixRatio == "" ? "0" : item.MMPaintProcessesItemMixRatio) / (sumMixRatio == 0 ? 1 : sumMixRatio);
                item.MMPaintProcessesItemProductQty = Math.Round(item.MMPaintProcessesItemProductQty, RoundingNumber.FormatN4, MidpointRounding.AwayFromZero);
                ChangeItemFromPaintProcessesItemsList(item);
            }
            try
            {
                entity.PaintProcessesItemList.TreeListControl?.RefreshDataSource();
                entity.PaintProcessesItemList.TreeListControl?.ForceInitialize();
                entity.PaintProcessesItemList.TreeListControl?.ExpandAll();
            }
            catch (Exception e) { }
        }
        public void AllocationProductQtyMixRatio(MMPaintProcessesItemsInfo objPaintProcessesItemsInfo)
        {
            PaintProcessesEntities entity = (PaintProcessesEntities)CurrentModuleEntity;
            MMPaintProcessessInfo mainObject = (MMPaintProcessessInfo)entity.MainObject;
            MMPaintProcessesItemsController objPaintProcessesItemsController = new MMPaintProcessesItemsController();
            decimal sumMixRatio = 0;
            MMPaintProcessesItemsInfo objParentPaintProcessesItemsInfo = new MMPaintProcessesItemsInfo();
            foreach (MMPaintProcessesItemsInfo item in entity.PaintProcessesItemList)
            {
                if (item.MMPaintProcessesItemID == objPaintProcessesItemsInfo.MMPaintProcessesItemParentID)
                    objParentPaintProcessesItemsInfo = item;
            }
            if (objParentPaintProcessesItemsInfo.SubList == null)
                return;
            foreach (MMPaintProcessesItemsInfo item in objParentPaintProcessesItemsInfo.SubList)
            {
                sumMixRatio += decimal.Parse(item.MMPaintProcessesItemMixRatio == "" ? "0" : item.MMPaintProcessesItemMixRatio);
            }
            foreach (MMPaintProcessesItemsInfo item in objParentPaintProcessesItemsInfo.SubList)
            {
                item.MMPaintProcessesItemProductQty = objParentPaintProcessesItemsInfo.MMPaintProcessesItemProductQty * decimal.Parse(item.MMPaintProcessesItemMixRatio == "" ? "0" : item.MMPaintProcessesItemMixRatio) / (sumMixRatio == 0 ? 1 : sumMixRatio);
                item.MMPaintProcessesItemProductQty = Math.Round(item.MMPaintProcessesItemProductQty, RoundingNumber.FormatN4, MidpointRounding.AwayFromZero);
                ChangeItemFromPaintProcessesItemsList(item);
            }
            try
            {
                entity.PaintProcessesItemList.TreeListControl?.RefreshDataSource();
                entity.PaintProcessesItemList.TreeListControl?.ForceInitialize();
                entity.PaintProcessesItemList.TreeListControl?.ExpandAll();
            }
            catch (Exception e) { }
        }
        public override bool ActionComplete()
        {
            PaintProcessesEntities entity = (PaintProcessesEntities)CurrentModuleEntity;
            MMPaintProcessessInfo mainObject = (MMPaintProcessessInfo)entity.MainObject;
            entity.SetPropertyChangeEventLock(false);
            mainObject.MMPaintProcessesStatus = PaintProcessesStatus.Approve.ToString();
            entity.UpdateMainObject();
            entity.SetPropertyChangeEventLock(true);
            InvalidateToolbar();
            return base.ActionComplete();
        }
        #region Mở - Xóa chứng từ
        public override bool ActionCancelComplete()
        {
            PaintProcessesEntities entity = (PaintProcessesEntities)CurrentModuleEntity;
            MMPaintProcessessInfo mainObject = (MMPaintProcessessInfo)entity.MainObject;
            entity.SetPropertyChangeEventLock(false);
            mainObject.MMPaintProcessesStatus = PaintProcessesStatus.New.ToString();
            entity.UpdateMainObject();
            entity.SetPropertyChangeEventLock(true);
            InvalidateToolbar();
            return base.ActionCancelComplete();
        }
        public override void ActionDelete()
        {
            MMPaintProcessessInfo mainObject = (MMPaintProcessessInfo)CurrentModuleEntity.MainObject.Clone();
            if (mainObject.MMPaintProcessesID > 0)
            {
                base.ActionDelete();
            }
        }
        #endregion
    }
    #endregion
}