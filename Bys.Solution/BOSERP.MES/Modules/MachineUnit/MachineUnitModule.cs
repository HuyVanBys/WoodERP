using BOSComponent;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows;
using System.Windows.Forms;

namespace BOSERP.Modules.MachineUnit
{
    #region MachineUnitModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:OperationModule
    //Created Date:Tuesday, November 03, 2015
    //-----------------------------------------------------------

    public class MachineUnitModule : BaseModuleERP
    {
        #region Constant for Oparetion
        public const string MMMachineUnitTreeListControl = "fld_trlMMMachineUnits";

        public const string MUOperationGridControl = "fld_dgcMMMachineUnitOperations";
        public const string MMLineLookupEditControlName = "fld_lkeFK_MMLineID";
        public const string MMWorkShopLookupEditControlName = "fld_lkeFK_MMWorkShopID";

        #endregion
        BOSLookupEdit MMLineLookupEditControl;
        BOSLookupEdit MMWorkShopLookupEditControl;

        public MachineUnitModule()
        {
            Name = "MachineUnit";
            CurrentModuleEntity = new MachineUnitEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();

            MMLineLookupEditControl = (BOSLookupEdit)Controls[MMLineLookupEditControlName];
            MMWorkShopLookupEditControl = (BOSLookupEdit)Controls[MMWorkShopLookupEditControlName];
            RefreshLineLookupEditDataSource();
            RefreshWorkShopLookupEditDataSource();
        }

        public override int ActionSave()
        {
            MachineUnitEntities entity = (MachineUnitEntities)CurrentModuleEntity;
            MMMachineUnitsInfo mainObject = (MMMachineUnitsInfo)entity.MainObject;
            if (mainObject.MMMachineUnitCapacity > 24 || mainObject.MMMachineUnitCapacity < 0)
            {
                BOSApp.ShowMessage("Số giờ không được lớn hơn 24 và không được bé hơn 0");
                return 0;
            }
            int result = base.ActionSave();
            return result;
        }
        public override string GenerateSearchQuery(string strTableName)
        {
            string condition = base.GenerateSearchQuery(strTableName);
            return condition;
        }

        public void RemoveSelectMachineItem()
        {
            MachineUnitEntities entity = (MachineUnitEntities)CurrentModuleEntity;
            entity.MachineUnitItemList.RemoveSelectedRowObjectFromList();
        }
        public void RemoveSelectOperation()
        {
            MachineUnitEntities entity = (MachineUnitEntities)CurrentModuleEntity;
            entity.MachineUnitOperationList.RemoveSelectedRowObjectFromList();
        }
        public bool CheckExitAsesstInMachineUnit(MMMachineUnitItemsInfo item)
        {
            bool result = true;
            MachineUnitEntities entity = (MachineUnitEntities)CurrentModuleEntity;
            MMMachineUnitsInfo objMachineUnitsInfo = (MMMachineUnitsInfo)entity.MainObject;
            MMMachineUnitItemsController ctrol = new MMMachineUnitItemsController();
            List<MMMachineUnitItemsInfo> assetUnitItemList = ctrol.GetAssetUnitItem(objMachineUnitsInfo.MMMachineUnitID, item.FK_ACAssetID);
            if (entity.MachineUnitItemList.Where(o => o.FK_ACAssetID == item.FK_ACAssetID).ToList() != null
                && entity.MachineUnitItemList.Where(o => o.FK_ACAssetID == item.FK_ACAssetID).ToList().Count > 1)
            {
                BOSApp.ShowMessage("Máy móc đã được chọn.");
                return false;
            }
            if (assetUnitItemList != null && assetUnitItemList.Count > 0)
            {
                string mess = string.Join(",", assetUnitItemList.Select(o => o.MMMachineUnitNo).Distinct().ToArray());
                BOSApp.ShowMessage("Máy móc này đã được sử dụng tại: " + mess);
                result = false;
            }
            return result;
        }
        public void GetDataOperation()
        {
            bool isView = false;
            if (Toolbar.IsNullOrNoneAction())
                isView = true;
            MachineUnitEntities entity = (MachineUnitEntities)CurrentModuleEntity;
            MMMachineUnitsInfo mainObject = (MMMachineUnitsInfo)entity.MainObject;
            MMOperationsController objOperationsController = new MMOperationsController();
            List<MMOperationsInfo> listItem = objOperationsController.GetAliveOperationAndSortOrder();
            List<MMMachineUnitOperationsInfo> selectedItem = entity.MachineUnitOperationList.Where(o => o.FK_MMOperationID > 0).ToList();
            List<MMOperationsInfo> listSelectItem = new List<MMOperationsInfo>();
            if (selectedItem != null && selectedItem.Count > 0)
            {
                selectedItem.ForEach(o =>
                {
                    listItem.ForEach(op => { if (op.MMOperationID == o.FK_MMOperationID) { listSelectItem.Add((MMOperationsInfo)op.Clone()); } }
                        );
                });
            }
            guiChooseOperation guiOperation = new guiChooseOperation();
            guiOperation.OperationItemDataList = listItem;
            guiOperation.OperationDataSelected = listSelectItem;
            guiOperation.Module = this;
            guiOperation.ShowDialog();
            if (guiOperation.DialogResult == DialogResult.OK)
            {
                if (!isView)
                {
                    List<MMOperationsInfo> listSelectedItem = guiOperation.ResultList;
                    if (listSelectedItem != null && listSelectedItem.Count > 0)
                    {
                        listSelectedItem.OrderBy(s => s.MMOperationPeriodOrder).ToList().ForEach(p =>
                        {
                            if (!selectedItem.Any(s => s.FK_MMOperationID == p.MMOperationID))
                            {
                                MMMachineUnitOperationsInfo obj = new MMMachineUnitOperationsInfo();
                                obj.FK_MMOperationID = p.MMOperationID;
                                obj.MMMachineUnitOperationNo = p.MMOperationNo;
                                obj.MMMachineUnitOperationName = p.MMOperationName;
                                obj.FK_MMMachineUnitID = mainObject.MMMachineUnitID;
                                entity.MachineUnitOperationList.Add(obj);
                            }
                        });
                        selectedItem.ForEach(s =>
                        {
                            if (!listSelectedItem.Any(p => s.FK_MMOperationID == p.MMOperationID))
                            {
                                int index = entity.MachineUnitOperationList.IndexOf(s);
                                if (index >= 0)
                                    entity.MachineUnitOperationList.RemoveAt(index);
                            }
                        });
                    }
                    entity.MachineUnitOperationList.GridControl?.RefreshDataSource();
                }
            }
        }

        public override void Invalidate(int iObjectID)
        {
            base.Invalidate(iObjectID);
            RefreshLineLookupEditDataSource();
            RefreshWorkShopLookupEditDataSource();
        }

        public void RefreshLineLookupEditDataSource()
        {
            MMLinesController objLinesController = new MMLinesController();
            MMLineLookupEditControl.Properties.DataSource = objLinesController.GetAllAliveAndActiveLine();
        }

        public void RefreshWorkShopLookupEditDataSource()
        {
            MMWorkShopsController objWorkShopsController = new MMWorkShopsController();
            MMWorkShopLookupEditControl.Properties.DataSource = objWorkShopsController.GetAllWorkShops();
        }

        public MMMachineUnitsInfo GetMainObject()
        {
            MachineUnitEntities entity = (MachineUnitEntities)CurrentModuleEntity;
            MMMachineUnitsInfo mainObject = (MMMachineUnitsInfo)entity.MainObject;
            return mainObject;
        }
        public void ChangeCapacity(BOSTextBox tbe)
        {
            MachineUnitEntities entity = (MachineUnitEntities)CurrentModuleEntity;
            MMMachineUnitsInfo mainObject = (MMMachineUnitsInfo)entity.MainObject;
            decimal capacity = Convert.ToDecimal(tbe.EditValue);
            if (capacity > 24 || capacity < 0)
            {
                BOSApp.ShowMessage("Số giờ không được lớn hơn 24 và không được bé hơn 0");
                mainObject.MMMachineUnitCapacity = Convert.ToDecimal(tbe.OldEditValue);
            }
        }
    }
    #endregion
}