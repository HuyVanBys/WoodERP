using BOSCommon;
using BOSComponent;
using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;

namespace BOSERP.Modules.ProductionCostCalculation
{
    #region ProductionCostCalculationModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class: ProductionCostCalculationModule
    //Created Date:Friday, March 21, 2008
    //-----------------------------------------------------------

    public class ProductionCostCalculationModule : BaseTransactionModule
    {
        #region Constants
        public const string OperationLookupControlName = "fld_lkeFK_MMOperationID";
        #endregion

        #region Variables
        public BOSLookupEdit OperationLookupEdit;
        #endregion Variables

        #region Public properties
        #endregion

        public ProductionCostCalculationModule()
        {
            Name = "ProductionCostCalculation";
            CurrentModuleEntity = new ProductionCostCalculationEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();
            OperationLookupEdit = (BOSLookupEdit)Controls[OperationLookupControlName];
            GetDataOperation();
        }
        public void InvalidateFocusModuleObjects(string type)
        {
            ProductionCostCalculationEntities entity = (ProductionCostCalculationEntities)CurrentModuleEntity;
            entity.InvalidateFocusModuleObjects(type);
        }
        public void GetDataOperation()
        {
            MMOperationsController objOperationsController = new MMOperationsController();
            List<MMOperationsInfo> OperationList = new List<MMOperationsInfo>();
            MMOperationsInfo objOperationsInfo = new MMOperationsInfo();
            OperationList.Add(objOperationsInfo);
            OperationList.AddRange(objOperationsController.GetAllOperationByParentIDAndalculationCheck(0, true));
            OperationLookupEdit.Properties.Columns.Clear();
            OperationLookupEdit.Properties.Columns.Add(new DevExpress.XtraEditors.Controls.LookUpColumnInfo("MMOperationName", "Tên công đoạn"));
            if (OperationList != null)
            {
                OperationLookupEdit.BOSDataSource = "";
                OperationLookupEdit.BOSDataMember = "";
                OperationLookupEdit.Properties.DataSource = OperationList;
                OperationLookupEdit.Properties.DisplayMember = "MMOperationName";
                OperationLookupEdit.Properties.ValueMember = "MMOperationID";
            }
        }

        public void Calculate()
        {
            if (Toolbar.IsNullOrNoneAction())
                return;

            ProductionCostCalculationEntities entity = (ProductionCostCalculationEntities)CurrentModuleEntity;
            MMProductionCostCalculationsInfo mainObject = (MMProductionCostCalculationsInfo)entity.MainObject;

            if (mainObject.FK_MMProductionCostFormulaID <= 0)
            {
                BOSApp.ShowMessage("Vui lòng chọn công thức tính giá thành!");
                return;
            }

            if (mainObject.FK_MMOperationID <= 0)
            {
                BOSApp.ShowMessage("Vui lòng chọn công đoạn!");
                return;
            }

            BOSProgressBar.Start("Đang tính giá thành");

            //Yếu tố chi phí
            BOSProgressBar.Start("Tải dữ liệu:Yếu tố chi phí");
            MMProductionCostCalculationDetailCostsController controller = new MMProductionCostCalculationDetailCostsController();
            List<MMProductionCostCalculationDetailCostsInfo> costs = controller.GetDetailByFormulaIDForProductionCostAndProgressStatistic(mainObject.FK_MMProductionCostFormulaID, mainObject.FK_MMOperationID, mainObject.MMProductionCostCalculationFromDate, mainObject.MMProductionCostCalculationToDate);
            entity.MMProductionCostCalculationDetailCostsList.Clear();
            entity.MMProductionCostCalculationDetailCostsList.AddRange(costs);
            entity.MMProductionCostCalculationDetailCostsList.GridControl?.RefreshDataSource();
            //Số lượng sản xuất
            BOSProgressBar.Start("Tải dữ liệu:Số lượng sản xuất");
            MMProductionCostCalculationItemsController itemController = new MMProductionCostCalculationItemsController();
            //List<MMProductionCostCalculationItemsInfo> items = itemController.GetItemForProductionCost(mainObject.MMProductionCostCalculationFromDate, mainObject.MMProductionCostCalculationToDate, mainObject.FK_MMProductionCostFormulaID);
            List<MMProductionCostCalculationItemsInfo> items = itemController.GetItemForProductionCostByOperationID(mainObject.MMProductionCostCalculationFromDate, mainObject.MMProductionCostCalculationToDate, mainObject.FK_MMProductionCostFormulaID, mainObject.FK_MMOperationID);
            if (items.Sum(o => o.MMProductionCostCalculationItemQty) <= 0)
            {
                BOSApp.ShowMessage("Không có chi tiết số lượng sản xuất để tính giá thành, Vui lòng kiểm tra lại!");
                BOSProgressBar.Close();
                return;
            }

            //Get Total manufacturing Block, Acreage, qty
            //Hardcade for tesing

            MMProductionCostCalculationItemsInfo totalObj = itemController.GetItemTotalQty(mainObject.MMProductionCostCalculationFromDate, mainObject.MMProductionCostCalculationToDate, mainObject.FK_MMProductionCostFormulaID, 0);

            if (totalObj != null)
            {
                mainObject.MMProductionCostCalculationTotalBlock = totalObj.MMProductionCostCalculationItemTotalM3Qty;
                mainObject.MMProductionCostCalculationTotalAcreage = totalObj.MMProductionCostCalculationItemTotalM2Qty;
                mainObject.MMProductionCostCalculationTotalQty = totalObj.MMProductionCostCalculationItemQty;
                mainObject.MMProductionCostCalculationTotalQtyByFactor = totalObj.MMProductionCostCalculationItemFactor;
            }

            totalObj = itemController.GetItemTotalQty(mainObject.MMProductionCostCalculationFromDate, mainObject.MMProductionCostCalculationToDate, mainObject.FK_MMProductionCostFormulaID, mainObject.FK_MMOperationID);
            if (totalObj != null)
            {
                mainObject.MMProductionCostCalculationOperationBlock = totalObj.MMProductionCostCalculationItemTotalM3Qty;
                mainObject.MMProductionCostCalculationOperationAcreage = totalObj.MMProductionCostCalculationItemTotalM2Qty;
                mainObject.MMProductionCostCalculationOperationQty = totalObj.MMProductionCostCalculationItemQty;
                mainObject.MMProductionCostCalculationOperationQtyByFactor = totalObj.MMProductionCostCalculationItemFactor;
            }

            entity.ProductionCostCalculationItemsList.Clear();
            entity.ProductionCostCalculationItemsList.AddRange(items);
            entity.ProductionCostCalculationItemsList.GridControl?.RefreshDataSource();
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            //Phân bổ theo yếu tố chi phí
            BOSProgressBar.Start("Phân bổ theo yếu tố chi phí");
            List<MMProductionCostCalculationAllocationsInfo> allocations = GetDataForAllocationOld(mainObject, items, costs);
            entity.ProductionCostCalculationAllocationsList.Clear();
            entity.ProductionCostCalculationAllocationsList.AddRange(allocations);
            entity.ProductionCostCalculationAllocationsList.GridControl?.RefreshDataSource();
            stopwatch.Stop();

            //Phân bổ theo yếu tố chi phí khác
            BOSProgressBar.Start("Phân bổ theo yếu tố chi phí khác");
            List<MMProductionCostCalculationAllocationsInfo> allocationOthers = GetDataForAllocationOtherOld(mainObject, items, costs, allocations);
            entity.ProductionCostCalculationAllocationOthersList.Clear();
            entity.ProductionCostCalculationAllocationOthersList.AddRange(allocationOthers);
            entity.ProductionCostCalculationAllocationOthersList.GridControl?.RefreshDataSource();

            Stopwatch stopwatch1 = new Stopwatch();
            stopwatch1.Start();
            //Giá thành sản xuất
            BOSProgressBar.Start("Tính giá thành sản xuất");
            //List<MMProductionCostCalculationPricesInfo> prices = GetDataForCalculationPriceOld(items, allocations, allocationOthers);
            List<MMProductionCostCalculationPricesInfo> prices = GetDataForCalculationPriceOldVer2(items, allocations, allocationOthers);
            entity.ProductionCostCalculationPricesList.Clear();
            entity.ProductionCostCalculationPricesList.AddRange(prices);
            entity.ProductionCostCalculationPricesList.GridControl?.RefreshDataSource();
            stopwatch1.Stop();
            BOSProgressBar.Close();
        }

        #region Tính giá thành theo thành phẩm

        private List<MMProductionCostCalculationItemsInfo> GetDirectCostFactorKeyList(List<MMProductionCostCalculationItemsInfo> items, MMProductionCostFormulaDetailsInfo productionCostFactor)
        {
            if (items != null && productionCostFactor != null)
            {
                if (productionCostFactor.FK_MMProductionCostFactorID == 86)
                {

                }
                var collection = items
                .Where(o =>
                        ((productionCostFactor.MMProductionCostFormulaDetailOperationCollectType == ProductionCostAllocationType.Tructiep.ToString()
                                        && productionCostFactor.FK_MMOperationID > 0 && productionCostFactor.FK_MMOperationID == o.FK_MMOperationID)
                        || productionCostFactor.MMProductionCostFormulaDetailOperationCollectType != ProductionCostAllocationType.Tructiep.ToString()
                        || productionCostFactor.FK_MMOperationID == 0)
                    &&
                        ((productionCostFactor.MMProductionCostFormulaDetailDepartmentCollectType == ProductionCostAllocationType.Tructiep.ToString()
                                    && productionCostFactor.FK_MMWorkShopID > 0 && productionCostFactor.FK_MMWorkShopID == o.FK_MMWorkShopID)
                        || productionCostFactor.MMProductionCostFormulaDetailDepartmentCollectType != ProductionCostAllocationType.Tructiep.ToString()
                        || productionCostFactor.FK_MMWorkShopID == 0)
                )
                .Select(item => new MMProductionCostCalculationItemsInfo()
                {
                    FK_MMProductionCostFactorID = item.FK_MMProductionCostFactorID,
                    FK_ARSaleOrderID = productionCostFactor.MMProductionCostFormulaDetailSaleOrderCollectType == ProductionCostAllocationType.Tructiep.ToString() ? item.FK_ARSaleOrderID : 0,
                    FK_ICProductGroupID = productionCostFactor.MMProductionCostFormulaDetailProductGroupCollectType == ProductionCostAllocationType.Tructiep.ToString() ? item.FK_ICProductGroupID : 0,
                    //FK_ICProductID = productionCostFactor.MMProductionCostFormulaDetailProductCollectType == ProductionCostAllocationType.Tructiep.ToString() ? item.FK_ICProductID : 0,
                    FK_ICProductForBatchID = (productionCostFactor.MMProductionCostFormulaDetailProductCollectType == ProductionCostAllocationType.Tructiep.ToString()
                    || productionCostFactor.MMProductionCostInProgressCalType == ProductionCostInProgressCalType.Theodinhmuc.ToString()) ? item.FK_ICProductForBatchID : 0,
                    FK_ICProductID = productionCostFactor.MMProductionCostInProgressCalType == ProductionCostInProgressCalType.Theodinhmuc.ToString() ? item.FK_ICProductID : 0,
                    FK_MMBatchProductID = productionCostFactor.MMProductionCostFormulaDetailBatchProductCollectType == ProductionCostAllocationType.Tructiep.ToString() ? item.FK_MMBatchProductID : 0,
                    FK_MMOperationID = productionCostFactor.MMProductionCostFormulaDetailOperationCollectType == ProductionCostAllocationType.Tructiep.ToString() ? item.FK_MMOperationID : 0,
                    FK_PMProjectID = productionCostFactor.MMProductionCostFormulaDetailProjectCollectType == ProductionCostAllocationType.Tructiep.ToString() ? item.FK_PMProjectID : 0,
                    //FK_HRDepartmentID = productionCostFactor.MMProductionCostFormulaDetailDepartmentCollectType == ProductionCostAllocationType.Tructiep.ToString() ? item.FK_HRDepartmentID : 0
                    FK_MMWorkShopID = productionCostFactor.MMProductionCostFormulaDetailDepartmentCollectType == ProductionCostAllocationType.Tructiep.ToString() ? item.FK_MMWorkShopID : 0,
                    MMProductionCostCalculationItemQty = item.MMProductionCostCalculationItemQty,
                    FK_MMBatchProductItemID = productionCostFactor.MMProductionCostFormulaDetailProductCollectType == ProductionCostAllocationType.Tructiep.ToString() ? item.FK_MMBatchProductItemID: 0,
                    MMProductionCostCalculationItemTotalM2Qty = item.MMProductionCostCalculationItemTotalM2Qty,
                    MMProductionCostCalculationItemTotalM3Qty = item.MMProductionCostCalculationItemTotalM3Qty,
                    MMProductionCostCalculationItemFactor = item.MMProductionCostCalculationItemFactor

                });

                if (collection != null && collection.Any())
                {

                    var a = (from m in collection
                             group m by new
                             {
                                 m.FK_ARSaleOrderID,
                                 m.FK_ICProductGroupID,
                                 m.FK_ICProductID,
                                 m.FK_ICProductForBatchID,
                                 m.FK_MMBatchProductID,
                                 m.FK_MMOperationID,
                                 m.FK_MMWorkShopID,
                                 m.FK_PMProjectID,
                                 m.FK_MMBatchProductItemID
                             } into g
                             select new MMProductionCostCalculationItemsInfo
                             {
                                 FK_ARSaleOrderID = g.Key.FK_ARSaleOrderID,
                                 FK_ICProductGroupID = g.Key.FK_ICProductGroupID,
                                 FK_ICProductID = g.Key.FK_ICProductID,
                                 FK_ICProductForBatchID = g.Key.FK_ICProductForBatchID,
                                 FK_MMBatchProductID = g.Key.FK_MMBatchProductID,
                                 FK_MMOperationID = g.Key.FK_MMOperationID,
                                 FK_MMWorkShopID = g.Key.FK_MMWorkShopID,
                                 FK_PMProjectID = g.Key.FK_PMProjectID,
                                 FK_MMBatchProductItemID = g.Key.FK_MMBatchProductItemID,
                                 MMProductionCostCalculationItemQty = g.Sum(x => x.MMProductionCostCalculationItemQty),
                                 MMProductionCostCalculationItemTotalM2Qty = g.Sum(x => x.MMProductionCostCalculationItemTotalM2Qty),
                                 MMProductionCostCalculationItemTotalM3Qty = g.Sum(x => x.MMProductionCostCalculationItemTotalM3Qty),
                                 MMProductionCostCalculationItemFactor = g.Sum(x => x.MMProductionCostCalculationItemFactor),
                                 ProductLevel = g.FirstOrDefault().ProductLevel,
                                 MMProductionCostCalculationItemID = g.FirstOrDefault().MMProductionCostCalculationItemID,
                                 FK_MMProductionCostCalculationID = g.FirstOrDefault().FK_MMProductionCostCalculationID,
                                 FK_MMProductionCostFactorID = g.FirstOrDefault().FK_MMProductionCostFactorID,
                                 
                             }).ToList();
                    Stopwatch stopwatch = new Stopwatch();
                    stopwatch.Start();
                    //foreach (MMProductionCostCalculationItemsInfo item in a)
                    //{
                    //    var foundItem = collection.FirstOrDefault(key => (item.FK_ARSaleOrderID == key.FK_ARSaleOrderID)
                    //                             //&& (item.FK_HRDepartmentID == key.FK_HRDepartmentID)
                    //                             && (item.FK_ICProductGroupID == key.FK_ICProductGroupID)
                    //                             && (item.FK_ICProductID == key.FK_ICProductID)
                    //                             && (item.FK_ICProductForBatchID == key.FK_ICProductForBatchID)
                    //                             && (item.FK_MMBatchProductID == key.FK_MMBatchProductID)
                    //                             && (item.FK_MMOperationID == key.FK_MMOperationID)
                    //                             && (item.FK_MMWorkShopID == key.FK_MMWorkShopID)
                    //                             && (item.FK_PMProjectID == key.FK_PMProjectID));
                    //    if (foundItem != null)
                    //    {
                    //        item.ProductLevel = foundItem.ProductLevel;
                    //        foundItem.MMProductionCostCalculationItemQty = item.MMProductionCostCalculationItemQty;
                    //        foundItem.MMProductionCostCalculationItemTotalM2Qty = item.MMProductionCostCalculationItemTotalM2Qty;
                    //        foundItem.MMProductionCostCalculationItemTotalM3Qty = item.MMProductionCostCalculationItemTotalM3Qty;
                    //        foundItem.MMProductionCostCalculationItemFactor = item.MMProductionCostCalculationItemFactor;
                    //        result.Add(foundItem);
                    //    }
                    //}
                    stopwatch.Stop();
                    return a;
                    //foreach (MMProductionCostCalculationItemsInfo item in result)
                    //{
                    //	var collection1 = collection.Where(key => (item.FK_ARSaleOrderID == key.FK_ARSaleOrderID)
                    //							 && (item.FK_ICProductGroupID == key.FK_ICProductGroupID)
                    //							 && (item.FK_ICProductID == key.FK_ICProductID)
                    //							 && (item.FK_ICProductForBatchID == key.FK_ICProductForBatchID)
                    //							 && (item.FK_MMBatchProductID == key.FK_MMBatchProductID)
                    //							 && (item.FK_MMOperationID == key.FK_MMOperationID)
                    //							 && (item.FK_MMWorkShopID == key.FK_MMWorkShopID)
                    //							 && (item.FK_PMProjectID == key.FK_PMProjectID)).ToList();
                    //	if (collection1 != null && collection1.Any())
                    //	{
                    //		item.MMProductionCostCalculationItemQty = collection1.Sum(c => c.MMProductionCostCalculationItemQty);
                    //		item.MMProductionCostCalculationItemTotalM2Qty = collection1.Sum(c => c.MMProductionCostCalculationItemTotalM2Qty);
                    //		item.MMProductionCostCalculationItemTotalM3Qty = collection1.Sum(c => c.MMProductionCostCalculationItemTotalM3Qty);
                    //		item.MMProductionCostCalculationItemFactor = collection1.Sum(c => c.MMProductionCostCalculationItemFactor);

                    //	}
                    //}
                }
            }

            return new List<MMProductionCostCalculationItemsInfo>();
        }


        private List<MMProductionCostCalculationItemsInfo> GetProductionCostItemsByProductionCostFactorID(List<MMProductionCostCalculationItemsInfo> items, MMProductionCostFormulaDetailsInfo productionCostFactor)
        {
            List<MMProductionCostCalculationItemsInfo> result = null;

            if (items != null && productionCostFactor != null)
            {
                result = items.Where(item => item.FK_MMProductionCostFactorID == productionCostFactor.FK_MMProductionCostFactorID
                                        ).ToList();
                if (result == null || result.Count == 0)
                {
                    result = items.Where(item => item.FK_MMProductionCostFactorID == 0
                                        && (productionCostFactor.MMProductionCostFormulaDetailBatchProductCollectType != ProductionCostCollectType.Tructiep.ToString()
                                            || item.FK_MMBatchProductID > 0)
                                        && (productionCostFactor.MMProductionCostFormulaDetailDepartmentCollectType != ProductionCostCollectType.Tructiep.ToString()
                                            //|| item.FK_MMWorkShopID == productionCostFactor.FK_MMWorkShopID
                                            || item.FK_MMWorkShopID > 0)
                                        && (productionCostFactor.MMProductionCostFormulaDetailOperationCollectType != ProductionCostCollectType.Tructiep.ToString()
                                            //|| item.FK_MMOperationID == productionCostFactor.FK_MMOperationID
                                            || item.FK_MMOperationID > 0)
                                        //&& (productionCostFactor.MMProductionCostFormulaDetailProductCollectType != ProductionCostCollectType.Tructiep.ToString()
                                        //	|| item.FK_ICProductID > 0)	
                                        && (productionCostFactor.MMProductionCostFormulaDetailProductCollectType != ProductionCostCollectType.Tructiep.ToString()
                                            || item.FK_ICProductForBatchID > 0)
                                        && (productionCostFactor.MMProductionCostFormulaDetailProductGroupCollectType != ProductionCostCollectType.Tructiep.ToString()
                                            || item.FK_ICProductGroupID > 0)
                                        && (productionCostFactor.MMProductionCostFormulaDetailProjectCollectType != ProductionCostCollectType.Tructiep.ToString()
                                            || item.FK_PMProjectID > 0)
                                        && (productionCostFactor.MMProductionCostFormulaDetailSaleOrderCollectType != ProductionCostCollectType.Tructiep.ToString()
                                            || item.FK_ARSaleOrderID > 0)
                                            ).ToList();
                }
                else
                {
                    int counter = result.Count(item => item.MMProductionCostCalculationItemReceiptQty > 0);
                    if (counter == 0)
                    {
                        if (result != null)
                            result = new List<MMProductionCostCalculationItemsInfo>();

                        result.AddRange(items.Where(item => item.FK_MMProductionCostFactorID == 0));

                    }
                }
            }

            return result;
        }

        private List<MMProductionCostCalculationItemsInfo> GetCalculationItemsByKey(List<MMProductionCostCalculationItemsInfo> items,
                                                                                    MMProductionCostCalculationItemsInfo key)
        {
            List<MMProductionCostCalculationItemsInfo> result = null;

            if (items != null && key != null)
            {
                if (key.FK_ARSaleOrderID == 0
                    //&& key.FK_HRDepartmentID == 0
                    && key.FK_ICProductGroupID == 0
                    && key.FK_ICProductID == 0
                    && key.FK_ICProductForBatchID == 0
                    && key.FK_MMBatchProductID == 0
                    && key.FK_MMOperationID == 0
                    && key.FK_MMWorkShopID == 0
                    && key.FK_PMProjectID == 0)
                {
                    result = items;
                }
                else
                {
                    result = items.Where(item => item.FK_MMProductionCostFactorID == key.FK_MMProductionCostFactorID
                                            && (key.FK_ARSaleOrderID == 0 || item.FK_ARSaleOrderID == key.FK_ARSaleOrderID)
                                            //&& (key.FK_HRDepartmentID == 0 || item.FK_HRDepartmentID == key.FK_HRDepartmentID)
                                            && (key.FK_ICProductGroupID == 0 || item.FK_ICProductGroupID == key.FK_ICProductGroupID)
                                            && (key.FK_ICProductID == 0 || item.FK_ICProductID == key.FK_ICProductID)
                                            && (key.FK_ICProductForBatchID == 0 || item.FK_ICProductForBatchID == key.FK_ICProductForBatchID)
                                            && (key.FK_MMBatchProductItemID == 0 || item.FK_MMBatchProductItemID == key.FK_MMBatchProductItemID)
                                            && (key.FK_MMBatchProductID == 0 || item.FK_MMBatchProductID == key.FK_MMBatchProductID)
                                            && (key.FK_MMOperationID == 0 || item.FK_MMOperationID == key.FK_MMOperationID)
                                            && (key.FK_MMWorkShopID == 0 || item.FK_MMWorkShopID == key.FK_MMWorkShopID)
                                            && (key.FK_PMProjectID == 0 || item.FK_PMProjectID == key.FK_PMProjectID)).ToList();
                }
            }

            return result;
        }


        private void GetCostsByKey(List<MMProductionCostCalculationDetailCostsInfo> detailCosts,
                                            MMProductionCostCalculationItemsInfo key,
                                            List<MMBatchProductProductionNormItemsInfo> batchProductStructure,
                                            List<MMProductionCostCalculationDetailCostsInfo> costs)
        {
            if (key != null && detailCosts != null && costs != null)
            {
                var foundItems = detailCosts.Where(item => item.FK_ICProductID == key.FK_ICProductID && key.FK_MMBatchProductID == item.FK_MMBatchProductID).ToList();
                decimal totalQty = 0;
                if (foundItems != null && foundItems.Any())
                {
                    totalQty = foundItems.Sum(item => item.MMProductionCostCalculationDetailCostQty - item.MMProductionCostCalculationDetailCostUsedQty);

                    var foundAllocationCost = costs.FirstOrDefault(item => item.FK_ICProductID == key.FK_ICProductID && key.FK_MMBatchProductID == item.FK_MMBatchProductID);
                    decimal allocationQty = 0;
                    if (foundAllocationCost != null)
                    {
                        allocationQty = foundAllocationCost.MMProductionCostCalculationDetailCostQty;
                    }

                    decimal takenQty = Math.Min(key.MMProductionCostCalculationItemQty, totalQty - allocationQty);
                    decimal needToAllocatedQty = takenQty;
                    if (needToAllocatedQty != 0)
                    {
                        if (foundAllocationCost == null)
                        {
                            foundAllocationCost = new MMProductionCostCalculationDetailCostsInfo();
                            BOSUtil.CopyObject(foundItems.FirstOrDefault(), foundAllocationCost);
                            foundAllocationCost.MMProductionCostCalculationDetailCostQty = 0;
                            foundAllocationCost.MMProductionCostCalculationDetailCostUnitCost = 0;
                            foundAllocationCost.MMProductionCostCalculationDetailCostValue = 0;

                            costs.Add(foundAllocationCost);
                        }

                        if (foundItems != null && foundItems.Any())
                        {
                            decimal totalShipmentQty = foundItems.Where(item => item.FK_ICProductID == foundAllocationCost.FK_ICProductID).Sum(o => o.MMProductionCostCalculationDetailCostQty);
                            decimal unitCost = 0;
                            if (totalShipmentQty >= takenQty && takenQty > 0)
                            {
                                unitCost = foundItems.Where(item => item.FK_ICProductID == foundAllocationCost.FK_ICProductID).Sum(o => o.MMProductionCostCalculationDetailCostValue) / takenQty;
                            }
                            foreach (MMProductionCostCalculationDetailCostsInfo item in foundItems)
                            {
                                decimal neededQty = Math.Min(needToAllocatedQty, item.MMProductionCostCalculationDetailCostQty - item.MMProductionCostCalculationDetailCostUsedQty);
                                foundAllocationCost.MMProductionCostCalculationDetailCostQty += neededQty;
                                foundAllocationCost.MMProductionCostCalculationDetailCostValue += neededQty * (unitCost > 0 ? unitCost : item.MMProductionCostCalculationDetailCostUnitCost);
                                item.MMProductionCostCalculationDetailCostUsedQty += neededQty;
                                needToAllocatedQty -= neededQty;
                                if (needToAllocatedQty == 0)
                                    break;
                            }
                        }
                    }

                    if (takenQty == 0 || needToAllocatedQty > 0)
                    {
                        takenQty = needToAllocatedQty > 0 ? needToAllocatedQty : key.MMProductionCostCalculationItemQty;
                        var children = GetChildren(key.FK_MMBatchProductID, key.FK_ICProductID, key.FK_MMBatchProductItemID, batchProductStructure);
                        if (children != null && children.Any())
                        {
                            foreach (MMBatchProductProductionNormItemsInfo item in children)
                            {
                                MMProductionCostCalculationItemsInfo newKey = new MMProductionCostCalculationItemsInfo();
                                BOSUtil.CopyObject(key, newKey);
                                newKey.FK_ICProductID = item.FK_ICProductID;
                                newKey.FK_MMBatchProductID = item.FK_MMBatchProductID;
                                newKey.FK_MMBatchProductItemID = item.FK_MMBatchProductItemID;
                                newKey.MMProductionCostCalculationItemQty = takenQty * item.MMBatchProductProductionNormItemQuantityPerOne;
                                GetCostsByKey(detailCosts, newKey, batchProductStructure, costs);
                            }
                        }
                    }
                }
                else
                {
                    var children = GetChildren(key.FK_MMBatchProductID, key.FK_ICProductID, key.FK_MMBatchProductItemID, batchProductStructure);
                    if (children != null && children.Any())
                    {
                        foreach (MMBatchProductProductionNormItemsInfo item in children)
                        {
                            MMProductionCostCalculationItemsInfo newKey = new MMProductionCostCalculationItemsInfo();
                            BOSUtil.CopyObject(key, newKey);
                            newKey.FK_ICProductID = item.FK_ICProductID;
                            newKey.FK_MMBatchProductID = item.FK_MMBatchProductID;
                            newKey.FK_MMBatchProductItemID = item.FK_MMBatchProductItemID;
                            newKey.MMProductionCostCalculationItemQty = key.MMProductionCostCalculationItemQty * item.MMBatchProductProductionNormItemQuantityPerOne;
                            GetCostsByKey(detailCosts, newKey, batchProductStructure, costs);
                        }
                    }
                }

            }
        }



        private List<MMBatchProductProductionNormItemsInfo> GetBatchProductionNormItemNode(int batchProductID, int productID, int batchProductItemID, List<MMBatchProductProductionNormItemsInfo> batchProductStructure)
        {
            List<MMBatchProductProductionNormItemsInfo> result = null;
            if (batchProductStructure != null)
            {
                result = batchProductStructure.Where(item => item.FK_MMBatchProductID == batchProductID
                                                                    && item.FK_ICProductID == productID
                                                                    && (batchProductItemID == 0 || (batchProductItemID > 0 && item.FK_MMBatchProductItemID == batchProductItemID))
                                                                    ).ToList();
            }
            return result;
        }

        private List<MMBatchProductProductionNormItemsInfo> GetChildren(int batchProductID, int productID, int batchProductItemID, List<MMBatchProductProductionNormItemsInfo> batchProductStructure)
        {
            List<MMBatchProductProductionNormItemsInfo> result = null;

            if (batchProductStructure != null)
            {
                var foundItem = GetBatchProductionNormItemNode(batchProductID, productID, batchProductItemID, batchProductStructure);
                if (foundItem != null)
                {
                    result = batchProductStructure.Where(item => foundItem.Any(o => o.MMBatchProductProductionNormItemID == item.MMBatchProductProductionNormItemParentID)).ToList();
                }
            }
            return result;
        }


        private decimal GetProductionCostDetailCostsByKey(List<MMProductionCostCalculationDetailCostsInfo> detailCosts, MMProductionCostCalculationItemsInfo key,
                                                            MMProductionCostFormulaDetailsInfo formula, List<MMBatchProductProductionNormItemsInfo> batchProductStructures, bool convertToChildren)
        {
            decimal result = 0;

            if (detailCosts != null && detailCosts.Count() > 0 && key != null && formula != null)
            {
                if (formula.MMProductionCostFactorGroupNo == ProductionNormCostFactorGroup.NVL.ToString())
                {
                    int productID = detailCosts.Where(p => p.FK_ICProductID > 0).Select(s => s.FK_ICProductID).FirstOrDefault();
                    if (productID == 0) convertToChildren = false;
                    else
                    {
                        ICProductsInfo objProduct = BOSApp.GetProductFromCurrentProductList(productID);
                        if (objProduct != null && (objProduct.ICProductType == ProductType.SemiProduct.ToString() || objProduct.ICProductType == ProductType.Product.ToString()))
                            convertToChildren = true;
                        else convertToChildren = false;
                    }
                    var collection = detailCosts.Where(item => item.FK_MMProductionCostFactorID == formula.FK_MMProductionCostFactorID
                                                    && (key.FK_ARSaleOrderID == 0 || item.FK_ARSaleOrderID == key.FK_ARSaleOrderID)
                                                    //&& (key.FK_HRDepartmentID == 0 || item.FK_HRDepartmentID == key.FK_HRDepartmentID)
                                                    //&& (key.FK_ICProductGroupID == 0 || item.FK_ICProductGroupID == key.FK_ICProductGroupID)
                                                    && (formula.MMProductionCostInProgressCalType != ProductionCostInProgressCalType.Theodinhmuc.ToString() ||
                                                        (convertToChildren == true || item.FK_ICProductID == key.FK_ICProductID))
                                                    && (key.FK_ICProductForBatchID == 0 || item.FK_ICProductForBatchID == key.FK_ICProductForBatchID)
                                                    && (key.FK_MMBatchProductID == 0 || item.FK_MMBatchProductID == key.FK_MMBatchProductID)
                                                    && (key.FK_MMOperationID == 0 || item.FK_MMOperationID == key.FK_MMOperationID)
                                                    && (key.FK_MMWorkShopID == 0 || item.FK_MMWorkShopID == key.FK_MMWorkShopID)
                                                    && (key.FK_PMProjectID == 0 || item.FK_PMProjectID == key.FK_PMProjectID)
                                                    && (key.FK_MMBatchProductItemID == 0 || item.FK_MMBatchProductItemID == key.FK_MMBatchProductItemID || item.FK_MMBatchProductItemID == 0)
                                                    && (formula.MMProductionCostInProgressCalType != ProductionCostInProgressCalType.Theodinhmuc.ToString() ||
                                                        (item.MMProductionCostCalculationDetailCostQty - item.MMProductionCostCalculationDetailCostUsedQty > 0))).ToList();
                    if (collection.Count() > 0)
                    {
                        //[NTUThao] tách ra cách sum chi phí do hiện tại các chi phí chung chưa ghi nhận dc theo các yếu tố
                        if (formula.MMProductionCostInProgressCalType == ProductionCostInProgressCalType.Theodinhmuc.ToString())
                        {
                            if (convertToChildren)
                            {

                                if (collection != null && collection.Any())
                                {
                                    List<MMProductionCostCalculationDetailCostsInfo> costs = new List<MMProductionCostCalculationDetailCostsInfo>();
                                    GetCostsByKey(collection.ToList(), key, batchProductStructures, costs);

                                    result = costs.Sum(item => item.MMProductionCostCalculationDetailCostValue);

                                }
                                else // Chi phí trực tiếp đã dc phân bổ hết => Lấy chi phí của CT con nếu có:
                                {

                                }

                            }
                            else
                            {
                                result = collection.Sum(item => item.MMProductionCostCalculationDetailCostValue);
                            }
                        }
                        else
                        {
                            result = collection.Sum(item => item.MMProductionCostCalculationDetailCostValue);
                        }
                    }
                }
                else
                {
                    result = detailCosts.Where(item => item.FK_MMProductionCostFactorID == formula.FK_MMProductionCostFactorID)
                                              .Sum(item => item.MMProductionCostCalculationDetailCostValue);
                }
            }
            return result;
        }
        private decimal GetOtherProductionCostDetailCostsByKey(List<MMProductionCostCalculationDetailCostsInfo> detailCosts, MMProductionCostCalculationItemsInfo key,
                                                            MMProductionCostFormulaDetailsInfo formula, List<MMBatchProductProductionNormItemsInfo> batchProductStructures, bool convertToChildren)
        {
            decimal result = 0;

            if (detailCosts != null && key != null && formula != null)
            {
                if (formula.MMProductionCostFactorGroupNo == ProductionNormCostFactorGroup.NVL.ToString())
                {
                    convertToChildren = false;
                    var collection = detailCosts.Where(item => item.FK_MMProductionCostFactorID == formula.FK_MMProductionCostFactorID
                                                    && (key.FK_ARSaleOrderID == 0 || item.FK_ARSaleOrderID == key.FK_ARSaleOrderID)
                                                    //&& (key.FK_HRDepartmentID == 0 || item.FK_HRDepartmentID == key.FK_HRDepartmentID)
                                                    //&& (key.FK_ICProductGroupID == 0 || item.FK_ICProductGroupID == key.FK_ICProductGroupID)
                                                    && (formula.MMProductionCostInProgressCalType == ProductionCostInProgressCalType.Theodinhmuc.ToString()
                                                    && (item.ICTransactionModuleName == "MaterialShipment" || item.ICTransactionModuleName == "" || item.ICTransactionModuleName == "BatchShipmentDryLumber")
                                                    )
                                                    && (key.FK_ICProductForBatchID == 0 || item.FK_ICProductForBatchID == key.FK_ICProductForBatchID)
                                                    && (key.FK_MMBatchProductID == 0 || item.FK_MMBatchProductID == key.FK_MMBatchProductID)
                                                    && (key.FK_MMOperationID == 0 || item.FK_MMOperationID == key.FK_MMOperationID)
                                                    && (key.FK_MMWorkShopID == 0 || item.FK_MMWorkShopID == key.FK_MMWorkShopID)
                                                    && (key.FK_PMProjectID == 0 || item.FK_PMProjectID == key.FK_PMProjectID)
                                                    && (item.MMProductionCostCalculationDetailCostQty - item.MMProductionCostCalculationDetailCostUsedQty > 0)).ToList();
                    if (collection.Count() > 0)
                    {
                        //[NTUThao] tách ra cách sum chi phí do hiện tại các chi phí chung chưa ghi nhận dc theo các yếu tố
                        if (formula.MMProductionCostInProgressCalType == ProductionCostInProgressCalType.Theodinhmuc.ToString())
                        {
                            if (convertToChildren)
                            {

                                if (collection != null && collection.Any())
                                {
                                    List<MMProductionCostCalculationDetailCostsInfo> costs = new List<MMProductionCostCalculationDetailCostsInfo>();
                                    GetCostsByKey(collection.ToList(), key, batchProductStructures, costs);
                                    result = costs.Sum(item => item.MMProductionCostCalculationDetailCostValue);
                                }

                            }
                            else
                            {
                                result = collection.Sum(item => item.MMProductionCostCalculationDetailCostValue);
                            }
                        }
                        else
                        {
                            result = collection.Sum(item => item.MMProductionCostCalculationDetailCostValue);
                        }
                    }
                }
                else
                {
                    result = detailCosts.Where(item => item.FK_MMProductionCostFactorID == formula.FK_MMProductionCostFactorID)
                                              .Sum(item => item.MMProductionCostCalculationDetailCostValue);
                }
            }
            return result;
        }


        private decimal CalculateAverageUnitCost(MMProductionCostFormulaDetailsInfo formulaDetail, List<MMProductionCostCalculationItemsInfo> calItems, decimal totalCost)
        {
            decimal result = 0;
            decimal totalQty = 0;

            if (formulaDetail != null)
            {
                ProductionCostCalculationEntities entity = (ProductionCostCalculationEntities)CurrentModuleEntity;
                MMProductionCostCalculationsInfo mainObject = (MMProductionCostCalculationsInfo)entity.MainObject;

                if ((formulaDetail.MMProductionCostFormulaDetailBatchProductCollectType != ProductionCostAllocationType.Tructiep.ToString()
                    && formulaDetail.MMProductionCostFormulaDetailDepartmentCollectType != ProductionCostAllocationType.Tructiep.ToString()
                    && formulaDetail.MMProductionCostFormulaDetailOperationCollectType != ProductionCostAllocationType.Tructiep.ToString()
                    && formulaDetail.MMProductionCostFormulaDetailProductCollectType != ProductionCostAllocationType.Tructiep.ToString()
                    && formulaDetail.MMProductionCostFormulaDetailProductGroupCollectType != ProductionCostAllocationType.Tructiep.ToString()
                    && formulaDetail.MMProductionCostFormulaDetailProjectCollectType != ProductionCostAllocationType.Tructiep.ToString()
                    && formulaDetail.MMProductionCostFormulaDetailSaleOrderCollectType != ProductionCostAllocationType.Tructiep.ToString())
                )
                {
                    if (formulaDetail.MMProductionCostAllocationType == ProductionCostAllocationType.PhanbotheoM3.ToString())
                        totalQty = mainObject.MMProductionCostCalculationTotalBlock;
                    else if (formulaDetail.MMProductionCostAllocationType == ProductionCostAllocationType.PhanbotheoM2.ToString())
                        totalQty = mainObject.MMProductionCostCalculationTotalAcreage;
                    else //if (formulaDetail.MMProductionCostAllocationType == ProductionCostAllocationType.PhanbotheoSLSX.ToString())
                        totalQty = mainObject.MMProductionCostCalculationTotalQty;
                    //Phân bổ theo yếu tố đã nhân hệ số
                    //totalQty = mainObject.MMProductionCostCalculationTotalQtyByFactor;
                }
                else
                {
                    if (formulaDetail.MMProductionCostAllocationType == ProductionCostAllocationType.PhanbotheoM3.ToString())
                        totalQty = calItems.Sum(item => item.MMProductionCostCalculationItemTotalM3Qty);
                    else if (formulaDetail.MMProductionCostAllocationType == ProductionCostAllocationType.PhanbotheoM2.ToString())
                        totalQty = calItems.Sum(item => item.MMProductionCostCalculationItemTotalM2Qty);
                    else //if (formulaDetail.MMProductionCostAllocationType == ProductionCostAllocationType.PhanbotheoSLSX.ToString())
                        totalQty = calItems.Sum(item => item.MMProductionCostCalculationItemQty);
                    //Phân bổ theo yếu tố đã nhân hệ số
                    //totalQty = mainObject.MMProductionCostCalculationOperationQtyByFactor;
                }
                if (formulaDetail.MMProductionCostInProgressCalType == ProductionCostInProgressCalType.Theodinhmuc.ToString() && totalQty == 0 && calItems.Count() == 1)
                {
                    totalQty = calItems.Sum(item => item.MMProductionCostCalculationItemQty);
                }

                if (totalQty != 0)
                    result = totalCost / totalQty;
            }

            return result;
        }

        private List<MMProductionCostCalculationAllocationsInfo> AllocateProductionCost(List<MMProductionCostCalculationItemsInfo> calItems, MMProductionCostFormulaDetailsInfo formulaDetail, decimal averageUnitCost, int factorID)
        {
            List<MMProductionCostCalculationAllocationsInfo> result = null;
            decimal factor = 0;
            if (calItems != null && calItems.Count != 0)
            {
                result = new List<MMProductionCostCalculationAllocationsInfo>();
                foreach (MMProductionCostCalculationItemsInfo item in calItems)
                {
                    MMProductionCostCalculationAllocationsInfo allocationItem = new MMProductionCostCalculationAllocationsInfo();
                    BOSUtil.CopyObject(item, allocationItem);
                    allocationItem.FK_MMProductionCostFactorID = factorID;

                    if (formulaDetail.MMProductionCostAllocationType == ProductionCostAllocationType.PhanbotheoM3.ToString())
                        factor = item.MMProductionCostCalculationItemTotalM3Qty;
                    else if (formulaDetail.MMProductionCostAllocationType == ProductionCostAllocationType.PhanbotheoM2.ToString())
                        factor = item.MMProductionCostCalculationItemTotalM2Qty;
                    else //if (formulaDetail.MMProductionCostAllocationType == ProductionCostAllocationType.PhanbotheoSLSX.ToString())
                        factor = item.MMProductionCostCalculationItemQty;
                    ////Phân bổ theo yếu tố đã nhân hệ số
                    //factor = item.MMProductionCostCalculationItemFactor;
                    if (formulaDetail.MMProductionCostInProgressCalType == ProductionCostInProgressCalType.Theodinhmuc.ToString()
                        && factor == 0 && calItems.Count() == 1 && calItems[0].FK_ICProductID == calItems[0].FK_ICProductForBatchID
                        && formulaDetail.MMProductionCostAllocationType == ProductionCostAllocationType.PhanbotheoM3.ToString())
                    {
                        factor = item.MMProductionCostCalculationItemQty;
                    }
                    allocationItem.MMProductionCostCalculationAllocationAmount = Math.Round(averageUnitCost * (item.MMProductionCostCalculationItemUsePercent / 100)
                                                                                                //* item.MMProductionCostCalculationItemFactor;
                                                                                                * factor, 6);

                    if ((item.MMProductionCostCalculationItemOpeningQty + item.MMProductionCostCalculationItemQty) > 0)
                        allocationItem.MMProductionCostCalculationAllocationCostAmount = Math.Round((allocationItem.MMProductionCostCalculationAllocationOpeningAmount + allocationItem.MMProductionCostCalculationAllocationAmount)
                                                                                        / (item.MMProductionCostCalculationItemOpeningQty + item.MMProductionCostCalculationItemQty)
                                                                                        * item.MMProductionCostCalculationItemReceiptQty, 6);

                    allocationItem.MMProductionCostCalculationAllocationEndAmount = Math.Round(allocationItem.MMProductionCostCalculationAllocationOpeningAmount
                                                                                    + allocationItem.MMProductionCostCalculationAllocationAmount
                                                                                    - allocationItem.MMProductionCostCalculationAllocationCostAmount, 6); // not sure

                    //not sure
                    //if (allocationItem.MMProductionCostCalculationAllocationEndAmount > 0)
                    result.Add(allocationItem);
                }
                decimal totalm3V = calItems.Where(s => s.FK_ICProductID == 40277).Sum(s => s.MMProductionCostCalculationItemTotalM3Qty);
                decimal totalQty = calItems.Where(s => s.FK_ICProductID == 40277).Sum(s => s.MMProductionCostCalculationItemReceiptQty);
            }

            return result;
        }

        //Lấy danh sách các cấp chi tiết lệnh sản xuất theo khoảng
        public List<MMBatchProductProductionNormItemsInfo> GetBatchProductProductionNormItemChild(List<MMProductionCostCalculationItemsInfo> ReceiptSemiProductList)
        {
            MMBatchProductProductionNormItemsController objBatchProductProductionNormItemsController = new MMBatchProductProductionNormItemsController();
            List<MMBatchProductProductionNormItemsInfo> NormItemParentList = new List<MMBatchProductProductionNormItemsInfo>();
            List<string> batchProductIDList = new List<string>();
            List<MMBatchProductProductionNormItemsInfo> parentList;
            batchProductIDList = ReceiptSemiProductList.Select(x => x.FK_MMBatchProductID.ToString()).Distinct().ToList();
            if (batchProductIDList != null && batchProductIDList.Count > 0)
            {
                //chia lấy dư
                decimal khoang = 50;
                decimal dem = Math.Round((batchProductIDList.Count() / khoang), 5, MidpointRounding.AwayFromZero);
                int count = (int)dem;
                decimal du = dem - count;
                if (du > 0)
                {
                    count++;
                }
                int start = 0;
                for (int i = 0; i <= count - 1; i++)
                {
                    string stringjoin = string.Empty;
                    for (int j = 0; j <= (khoang - 1); j++)
                    {
                        if (start > batchProductIDList.Count() - 1)
                        {
                            break;
                        }
                        if (j == 0)
                        {
                            stringjoin = batchProductIDList[start];
                        }
                        else
                        {
                            stringjoin += ',' + batchProductIDList[start];
                        }
                        start++;
                    }
                    if (!string.IsNullOrEmpty(stringjoin))
                    {
                        //NTUThao change the way to get batchProductStructure
                        //parentList = objBatchProductProductionNormItemsController.GetListNormItemParentID(stringjoin);
                        parentList = objBatchProductProductionNormItemsController.BatchProductProductionNormItemByBatchProductIDList(stringjoin, ProductType.SemiProduct.ToString());
                        if (parentList != null && parentList.Count > 0)
                        {
                            NormItemParentList.AddRange(parentList);
                        }
                    }
                }
            }
            return NormItemParentList;
        }

        private List<MMProductionCostFormulaDetailsInfo> GetDifferentFomulaList(MMProductionCostFormulaDetailsInfo formula, List<MMProductionCostFormulaDetailsInfo> collection)
        {
            List<MMProductionCostFormulaDetailsInfo> result = null;

            if (formula != null && collection != null)
            {
                result = collection.Where(item => item.FK_ACDebitAccountID == formula.FK_ACDebitAccountID
                                        && item.FK_ACCreditAccountID == formula.FK_ACCreditAccountID
                                        && item.MMProductionCostFormulaDetailID != formula.MMProductionCostFormulaDetailID
                                        //&& (
                                        //	(item.MMProductionCostFormulaDetailBatchProductCollectType == formula.MMProductionCostFormulaDetailBatchProductCollectType
                                        //	|| item.MMProductionCostFormulaDetailBatchProductCollectType == ProductionCostCollectType.Tructiep.ToString())
                                        //	&&
                                        //	(item.MMProductionCostFormulaDetailDepartmentCollectType == formula.MMProductionCostFormulaDetailDepartmentCollectType
                                        //	|| item.MMProductionCostFormulaDetailDepartmentCollectType == ProductionCostCollectType.Tructiep.ToString())
                                        //	&&
                                        //	(item.MMProductionCostFormulaDetailOperationCollectType == formula.MMProductionCostFormulaDetailOperationCollectType
                                        //	|| item.MMProductionCostFormulaDetailOperationCollectType == ProductionCostCollectType.Tructiep.ToString())
                                        //	&&
                                        //	(item.MMProductionCostFormulaDetailProductCollectType == formula.MMProductionCostFormulaDetailProductCollectType
                                        //	|| item.MMProductionCostFormulaDetailProductCollectType == ProductionCostCollectType.Tructiep.ToString())
                                        //	&&
                                        //	(item.MMProductionCostFormulaDetailProductGroupCollectType == formula.MMProductionCostFormulaDetailProductGroupCollectType
                                        //	|| item.MMProductionCostFormulaDetailProductGroupCollectType == ProductionCostCollectType.Tructiep.ToString())
                                        //	&&
                                        //	(item.MMProductionCostFormulaDetailProjectCollectType == formula.MMProductionCostFormulaDetailProjectCollectType
                                        //	|| item.MMProductionCostFormulaDetailProjectCollectType == ProductionCostCollectType.Tructiep.ToString())
                                        //	)
                                        //	&&
                                        //	(item.MMProductionCostFormulaDetailSaleOrderCollectType == formula.MMProductionCostFormulaDetailSaleOrderCollectType
                                        //	|| item.MMProductionCostFormulaDetailSaleOrderCollectType == ProductionCostCollectType.Tructiep.ToString())
                                        ).ToList();
            }

            return result;
        }


        private List<MMProductionCostCalculationDetailCostsInfo> GetCostsByFomulaList(List<MMProductionCostCalculationDetailCostsInfo> costs, List<MMProductionCostFormulaDetailsInfo> formulaList)
        {
            List<MMProductionCostCalculationDetailCostsInfo> result = null;
            if (costs != null && formulaList != null)
            {
                result = new List<MMProductionCostCalculationDetailCostsInfo>();
                foreach (MMProductionCostFormulaDetailsInfo detail in formulaList)
                {
                    var foundCosts = GetCostsByFormula(costs, detail);
                    if (foundCosts != null && foundCosts.Any())
                        result.AddRange(foundCosts);
                }
            }
            return result;
        }

        private List<MMProductionCostCalculationDetailCostsInfo> GetCostsByFormula(List<MMProductionCostCalculationDetailCostsInfo> costs, MMProductionCostFormulaDetailsInfo formula)
        {
            List<MMProductionCostCalculationDetailCostsInfo> result = null;

            if (costs != null && formula != null)
            {
                result = costs.Where(item => item.FK_MMProductionCostFactorID == formula.FK_MMProductionCostFactorID).ToList();
                result = result.Where(item =>
                                    (
                                            //(item.MMBatchProductCollectType == formula.MMProductionCostFormulaDetailBatchProductCollectType
                                            //|| item.MMBatchProductCollectType == ProductionCostCollectType.Tructiep.ToString())
                                            //&&
                                            //(item.MMDepartmentCollectType == formula.MMProductionCostFormulaDetailDepartmentCollectType
                                            //|| item.MMDepartmentCollectType == ProductionCostCollectType.Tructiep.ToString())
                                            //&&
                                            //(item.MMOperationCollectType == formula.MMProductionCostFormulaDetailOperationCollectType
                                            //|| item.MMOperationCollectType == ProductionCostCollectType.Tructiep.ToString())
                                            //&&
                                            //(item.MMProductCollectType == formula.MMProductionCostFormulaDetailProductCollectType
                                            //|| item.MMProductCollectType == ProductionCostCollectType.Tructiep.ToString())
                                            //&&
                                            //(item.MMProductGroupCollectType == formula.MMProductionCostFormulaDetailProductGroupCollectType
                                            //|| item.MMProductGroupCollectType == ProductionCostCollectType.Tructiep.ToString())
                                            //&&
                                            //(item.MMProjectCollectType == formula.MMProductionCostFormulaDetailProjectCollectType
                                            //|| item.MMProjectCollectType == ProductionCostCollectType.Tructiep.ToString())
                                            //)
                                            //&&
                                            //(item.MMSaleOrderCollectType == formula.MMProductionCostFormulaDetailSaleOrderCollectType
                                            //|| item.MMSaleOrderCollectType == ProductionCostCollectType.Tructiep.ToString())
                                            (item.MMBatchProductCollectType == formula.MMProductionCostFormulaDetailBatchProductCollectType
                                            //|| item.MMBatchProductCollectType == ProductionCostCollectType.Tructiep.ToString()
                                            )
                                            &&
                                            (item.MMDepartmentCollectType == formula.MMProductionCostFormulaDetailDepartmentCollectType
                                            //|| item.MMDepartmentCollectType == ProductionCostCollectType.Tructiep.ToString()
                                            )
                                            &&
                                            (item.MMOperationCollectType == formula.MMProductionCostFormulaDetailOperationCollectType
                                            //|| item.MMOperationCollectType == ProductionCostCollectType.Tructiep.ToString()
                                            )
                                            &&
                                            (item.MMProductCollectType == formula.MMProductionCostFormulaDetailProductCollectType
                                            //|| item.MMProductCollectType == ProductionCostCollectType.Tructiep.ToString()
                                            )
                                            &&
                                            (item.MMProductGroupCollectType == formula.MMProductionCostFormulaDetailProductGroupCollectType
                                            //|| item.MMProductGroupCollectType == ProductionCostCollectType.Tructiep.ToString()
                                            )
                                            &&
                                            (item.MMProjectCollectType == formula.MMProductionCostFormulaDetailProjectCollectType
                                            //|| item.MMProjectCollectType == ProductionCostCollectType.Tructiep.ToString()
                                            )
                                            )
                                            &&
                                            (item.MMSaleOrderCollectType == formula.MMProductionCostFormulaDetailSaleOrderCollectType
                                            //|| item.MMSaleOrderCollectType == ProductionCostCollectType.Tructiep.ToString()
                                            )

                                        ).ToList();
            }
            return result;
        }

        private List<MMProductionCostCalculationItemsInfo> GetCalculatedItemsByCostList(List<MMProductionCostCalculationItemsInfo> items, List<MMProductionCostCalculationDetailCostsInfo> costs)
        {
            List<MMProductionCostCalculationItemsInfo> result = null;

            if (costs != null && items != null)
            {
                result = new List<MMProductionCostCalculationItemsInfo>();
                foreach (MMProductionCostCalculationDetailCostsInfo cost in costs)
                {
                    var foundItems = GetCalculatedItemsByCost(items, cost);
                    if (foundItems != null && foundItems.Any())
                    {
                        result.AddRange(foundItems);
                    }
                }
            }

            return result;
        }

        private List<MMProductionCostCalculationItemsInfo> GetCalculatedItemsByCost(List<MMProductionCostCalculationItemsInfo> items, MMProductionCostCalculationDetailCostsInfo cost)
        {
            List<MMProductionCostCalculationItemsInfo> result = null;

            if (items != null && cost != null)
            {
                result = items.Where(item =>
                                    //(cost.FK_ARSaleOrderID == 0 || cost.FK_ARSaleOrderID == item.FK_ARSaleOrderID)
                                    //&& (cost.FK_ICProductGroupID == 0 || cost.FK_ICProductGroupID == item.FK_ICProductGroupID)
                                    //&& (cost.FK_ICProductID == 0 || cost.FK_ICProductID == item.FK_ICProductID)
                                    //&& (cost.FK_MMBatchProductID == 0 || cost.FK_MMBatchProductID == item.FK_MMBatchProductID)
                                    //&& (cost.FK_MMOperationID == 0 || cost.FK_MMOperationID == item.FK_MMOperationID)
                                    //&& (cost.FK_MMWorkShopID == 0 || cost.FK_MMWorkShopID == item.FK_MMWorkShopID)
                                    //&& (cost.FK_PMProjectID == 0 || cost.FK_PMProjectID == item.FK_PMProjectID)
                                    (cost.FK_ARSaleOrderID == 0 || cost.FK_ARSaleOrderID == item.FK_ARSaleOrderID)
                                    && (cost.FK_ICProductGroupID == 0 || cost.FK_ICProductGroupID == item.FK_ICProductGroupID)
                                    && (cost.FK_ICProductID == 0 || cost.FK_ICProductID == item.FK_ICProductID)
                                    && (cost.FK_ICProductForBatchID == 0 || cost.FK_ICProductForBatchID == item.FK_ICProductForBatchID)
                                    && (cost.FK_MMBatchProductID == 0 || cost.FK_MMBatchProductID == item.FK_MMBatchProductID)
                                    && (cost.FK_MMOperationID == 0 || cost.FK_MMOperationID == item.FK_MMOperationID)
                                    && (cost.FK_MMWorkShopID == 0 || cost.FK_MMWorkShopID == item.FK_MMWorkShopID)
                                    && (cost.FK_PMProjectID == 0 || cost.FK_PMProjectID == item.FK_PMProjectID)
                                    ).ToList();
            }
            return result;
        }

        private List<MMProductionCostCalculationItemsInfo> GetAllocationItemsByFormula(List<MMProductionCostFormulaDetailsInfo> otherFormulas,
                                                                                //MMProductionCostFormulaDetailsInfo formula,
                                                                                List<MMProductionCostCalculationItemsInfo> items,
                                                                                List<MMProductionCostCalculationDetailCostsInfo> costs)
        {
            List<MMProductionCostCalculationItemsInfo> result = items;

            if (items != null && otherFormulas != null && costs != null)
            {
                //var otherFormulas = GetDifferentFomulaList(formula, formulaList);
                if (otherFormulas != null && otherFormulas.Any())
                {
                    var otherCosts = GetCostsByFomulaList(costs, otherFormulas);
                    if (otherCosts != null && otherCosts.Any())
                    {
                        var otherItems = GetCalculatedItemsByCostList(items, otherCosts);
                        if (otherItems != null && otherItems.Any())
                        {
                            result = items.Where(item => !otherItems.Any(other => other.FK_ARSaleOrderID == item.FK_ARSaleOrderID
                                                                            && other.FK_ICProductGroupID == item.FK_ICProductGroupID
                                                                            && other.FK_ICProductID == item.FK_ICProductID
                                                                            && other.FK_ICProductForBatchID == item.FK_ICProductForBatchID
                                                                            && other.FK_MMBatchProductID == item.FK_MMBatchProductID
                                                                            && other.FK_MMOperationID == item.FK_MMOperationID
                                                                            && other.FK_MMWorkShopID == item.FK_MMWorkShopID
                                                                            && other.FK_PMProjectID == item.FK_PMProjectID)).ToList();
                        }
                    }
                }
            }

            return result;
        }

        private List<MMProductionCostCalculationDetailCostsInfo> GetAllocationCostsByFormula(List<MMProductionCostFormulaDetailsInfo> otherFormulas,
                                                                                //MMProductionCostFormulaDetailsInfo formula, 
                                                                                //List<MMProductionCostCalculationItemsInfo> items,
                                                                                List<MMProductionCostCalculationDetailCostsInfo> costs)
        {
            List<MMProductionCostCalculationDetailCostsInfo> result = costs;

            if (otherFormulas != null && costs != null)
            {
                //var otherFormulas = GetDifferentFomulaList(formula, formulaList);
                if (otherFormulas != null && otherFormulas.Any())
                {
                    var otherCosts = GetCostsByFomulaList(costs, otherFormulas);
                    if (otherCosts != null && otherCosts.Any())
                    {
                        result = costs.Where(item => !otherCosts.Any(other => other.FK_ARSaleOrderID == item.FK_ARSaleOrderID
                                                                            && other.FK_ICProductGroupID == item.FK_ICProductGroupID
                                                                            && other.FK_ICProductID == item.FK_ICProductID
                                                                            && other.FK_ICProductForBatchID == item.FK_ICProductForBatchID
                                                                            && other.FK_MMBatchProductID == item.FK_MMBatchProductID
                                                                            && other.FK_MMOperationID == item.FK_MMOperationID
                                                                            && other.FK_MMWorkShopID == item.FK_MMWorkShopID
                                                                            && other.FK_PMProjectID == item.FK_PMProjectID)).ToList();
                    }
                }
            }

            return result;
        }

        private List<MMProductionCostCalculationItemsInfo> GetAllocationItemsByFormula(List<MMProductionCostCalculationItemsInfo> items, List<MMProductionCostCalculationDetailCostsInfo> costs, MMProductionCostFormulaDetailsInfo formula)
        {
            List<MMProductionCostCalculationItemsInfo> result = null;

            var foundCosts = GetCostsByFormula(costs, formula);
            if (foundCosts != null && foundCosts.Any())
            {
                result = GetCalculatedItemsByCostList(items, foundCosts);
            }

            return result;
        }

        // Phân bổ theo yếu tố chi phí (công thức theo thành phẩm)
        public List<MMProductionCostCalculationAllocationsInfo> GetDataForAllocationOld(MMProductionCostCalculationsInfo mainObject,
                        List<MMProductionCostCalculationItemsInfo> items, List<MMProductionCostCalculationDetailCostsInfo> costs)
        {
            MMProductionCostFormulaDetailsController formulaController = new MMProductionCostFormulaDetailsController();
            List<MMProductionCostFormulaDetailsInfo> formulaDetail = formulaController.GetDetailByFormulaIDAndAllocationType(mainObject.FK_MMProductionCostFormulaID, false, mainObject.FK_MMOperationID);
            List<MMProductionCostCalculationItemsInfo> calItemsByFactor;
            List<MMProductionCostCalculationItemsInfo> calItemKeys = null;
            List<MMProductionCostCalculationItemsInfo> allCalItemsByKey;
            List<MMProductionCostCalculationItemsInfo> calItemsByKey;
            List<MMProductionCostCalculationItemsInfo> calItemsSpTheoLenh;
            List<MMProductionCostCalculationAllocationsInfo> result = new List<MMProductionCostCalculationAllocationsInfo>();
            List<MMProductionCostCalculationAllocationsInfo> allocationItems;
            List<MMBatchProductProductionNormItemsInfo> batchProductStructures = null;
            MMOperationsController operationController = new MMOperationsController();
            List<MMProductionCostCalculationDetailCostsInfo> formularCosts = new List<MMProductionCostCalculationDetailCostsInfo>();
            decimal totalCost;
            decimal materialCost;
            decimal averageUnitCost;
            bool convertToChildren = false;
            MMOperationsInfo operation = operationController.GetObjectByID(mainObject.FK_MMOperationID) as MMOperationsInfo;

            foreach (MMProductionCostFormulaDetailsInfo detail in formulaDetail)
            {
                string messFormula = BOSApp.GetDisplayTextFromCatche("MMProductionCostFactors", "MMProductionCostFactorID", detail.FK_MMProductionCostFactorID, "MMProductionCostFactorName");

                BOSProgressBar.Start("Đang phân bổ: " + messFormula);
                formularCosts = costs.Where(item => item.FK_MMProductionCostFactorID == detail.FK_MMProductionCostFactorID).ToList();
                if (detail.FK_MMProductionCostFactorID == 8)
                {
                }
                if (formularCosts.Count() == 0) continue;
                convertToChildren = false;
                if (detail.MMProductionCostInProgressCalType == ProductionCostInProgressCalType.Theodinhmuc.ToString())
                {
                    if (operation != null && (operation.MMOperationType == OperationType.RapChiTiet.ToString()
                                                || operation.MMOperationType == OperationType.RapCum.ToString()
                                                || operation.MMOperationType == OperationType.RapTPTuChiTiet.ToString()
                                                || operation.MMOperationType == OperationType.Cum.ToString())
                        )
                    {
                        convertToChildren = true;
                    }
                    if (items != null && batchProductStructures == null)
                    {
                        batchProductStructures = GetBatchProductProductionNormItemChild(items);
                    }
                }
                calItemsByFactor = GetProductionCostItemsByProductionCostFactorID(items, detail);
                List<MMProductionCostFormulaDetailsInfo> otherForumlas = GetDifferentFomulaList(detail, formulaDetail);
                if (otherForumlas != null && otherForumlas.Any())
                {
                    var foundItems = GetAllocationItemsByFormula(otherForumlas, calItemsByFactor, costs);
                    if (foundItems == null || !foundItems.Any())
                    {
                        foundItems = GetAllocationItemsByFormula(calItemsByFactor, costs, detail);
                    }
                    calItemsByFactor = foundItems;
                }
                if (calItemsByFactor != null && calItemsByFactor.Any())
                {
                    Stopwatch stopwatch = new Stopwatch();
                    stopwatch.Start();
                    calItemKeys = GetDirectCostFactorKeyList(calItemsByFactor, detail);
                    if (calItemKeys != null && batchProductStructures != null && batchProductStructures.Any()) // Reset Order by struct
                    {
                        calItemKeys.ForEach(k =>
                        {
                            MMBatchProductProductionNormItemsInfo found = batchProductStructures.Where(s => s.FK_ICProductForBatchID == k.FK_ICProductForBatchID
                            && s.FK_ICProductID == k.FK_ICProductID
                            && s.FK_MMBatchProductID == k.FK_MMBatchProductID
                            && s.FK_MMBatchProductItemID == k.FK_MMBatchProductItemID
                            ).FirstOrDefault();
                            if (found != null) k.ProductLevel = found.ProductLevel;
                        });
                        calItemKeys = calItemKeys.OrderByDescending(k => k.ProductLevel).ToList();
                    }
                    //stopwatch.Stop();
                    //Stopwatch stopwatch1 = new Stopwatch();
                    //stopwatch1.Start();
                    int count = 0;
                    int totalCount = calItemKeys.Count();

                    foreach (MMProductionCostCalculationItemsInfo key in calItemKeys)
                    {
                        count++;
                        decimal pct = (count * 100) / totalCount;
                        BOSProgressBar.SetDescription(messFormula + ": " + Math.Round(pct) + " % ");
                        //stopwatch.Stop();
                        //Stopwatch watch2 = new Stopwatch();
                        //Stopwatch watch3 = new Stopwatch();
                        //Stopwatch watch4 = new Stopwatch();
                        //Stopwatch watch5 = new Stopwatch();
                        //watch2.Start();
                        List<MMProductionCostCalculationItemsInfo> calItemKeysByFactor = new List<MMProductionCostCalculationItemsInfo>();
                        if (detail.MMProductionCostInProgressCalType == ProductionCostInProgressCalType.Theodinhmuc.ToString())
                            calItemKeysByFactor = calItemsByFactor.Where(o => o.FK_MMBatchProductID == key.FK_MMBatchProductID
                            && o.FK_ICProductForBatchID == key.FK_ICProductForBatchID).ToList();
                        else calItemKeysByFactor = calItemsByFactor;

                        if (detail.FK_MMProductionCostFactorID == 23 && key.FK_MMBatchProductID == 239 && key.FK_ICProductForBatchID == 32733)
                        {

                        }
                        //    allCalItemsByKey = GetCalculationItemsByKey(calItemKeysByFactor, key);
                        //if (allCalItemsByKey != null)
                        {
                            List<MMProductionCostCalculationDetailCostsInfo> costItem = new List<MMProductionCostCalculationDetailCostsInfo>();

                            if (detail.MMProductionCostFactorGroupNo == ProductionNormCostFactorGroup.NVL.ToString()
                                && detail.MMProductionCostInProgressCalType == ProductionCostInProgressCalType.Theodinhmuc.ToString())
                            {
                                costItem = formularCosts.Where(c => c.FK_MMBatchProductID == key.FK_MMBatchProductID
                                && c.FK_ICProductForBatchID == key.FK_ICProductForBatchID).ToList();
                            }
                            else costItem = formularCosts;
                            List<MMBatchProductProductionNormItemsInfo> itemStruct = new List<MMBatchProductProductionNormItemsInfo>();
                            if (batchProductStructures != null)
                                itemStruct = batchProductStructures.Where(s => s.FK_MMBatchProductID == key.FK_MMBatchProductID
                                && s.FK_ICProductForBatchID == key.FK_ICProductForBatchID).ToList();

                            //totalCost = GetProductionCostDetailCostsByKey(costs, key, detail, batchProductStructures, convertToChildren);
                            if (otherForumlas != null && otherForumlas.Any())
                            {
                                List<MMProductionCostCalculationDetailCostsInfo> allocationCosts = GetAllocationCostsByFormula(otherForumlas, costItem);
                                totalCost = GetProductionCostDetailCostsByKey(allocationCosts, key, detail, itemStruct, convertToChildren);
                            }
                            else
                            {

                                totalCost = GetProductionCostDetailCostsByKey(costItem, key, detail, itemStruct, convertToChildren);

                            }
                            //watch2.Stop();


                            //watch3.Start();
                            #region Chi phí vật tư trực tiếp / lệnh
                            materialCost = GetOtherProductionCostDetailCostsByKey(costItem, key, detail, itemStruct, convertToChildren);
                            calItemsSpTheoLenh = calItemKeysByFactor.Where(s => s.FK_MMBatchProductID == key.FK_MMBatchProductID
                                                                                && s.FK_ICProductForBatchID == key.FK_ICProductForBatchID
                                                                                && s.FK_PMProjectID == key.FK_PMProjectID
                                                                                && s.FK_ARSaleOrderID == key.FK_ARSaleOrderID
                                                                                && s.FK_MMOperationID == key.FK_MMOperationID
                                                                                && s.FK_MMWorkShopID == key.FK_MMWorkShopID
                                                                    ).ToList();
                            #endregion
                            //watch3.Stop();


                            //watch4.Start();
                            if (totalCost != 0 || materialCost > 0)
                            {
                                //calculate error items
                                allCalItemsByKey = GetCalculationItemsByKey(calItemKeysByFactor, key);
                                if (allCalItemsByKey.Count() > 0)
                                {
                                    calItemsByKey = allCalItemsByKey.Where(item => item.MMProductionCostCalculationItemUsePercent < 100).ToList();
                                    if (calItemsByKey != null && calItemsByKey.Any())
                                    {
                                        if (materialCost > 0 && detail.MMProductionCostInProgressCalType == ProductionCostInProgressCalType.Theodinhmuc.ToString())
                                            averageUnitCost = CalculateAverageUnitCost(detail, calItemKeysByFactor, materialCost);
                                        else
                                            averageUnitCost = CalculateAverageUnitCost(detail, allCalItemsByKey, totalCost);
                                        // đơn giá vật tư trực tiếp 1m3 theo SP/Lệnh
                                        if (materialCost > 0 && detail.MMProductionCostInProgressCalType == ProductionCostInProgressCalType.Theodinhmuc.ToString())
                                        {
                                            averageUnitCost = averageUnitCost + CalculateAverageUnitCost(detail, calItemsSpTheoLenh, materialCost);
                                        }
                                        allocationItems = AllocateProductionCost(calItemsByKey, detail, averageUnitCost, detail.FK_MMProductionCostFactorID);
                                        if (allocationItems != null)
                                        {
                                            result.AddRange(allocationItems);
                                            totalCost = totalCost - allocationItems.Sum(item => item.MMProductionCostCalculationAllocationAmount);
                                        }
                                    }
                                    //calculate valid items
                                    calItemsByKey = allCalItemsByKey.Where(item => item.MMProductionCostCalculationItemUsePercent == 100).ToList();
                                    if (calItemsByKey != null && calItemsByKey.Any())
                                    {
                                        if (materialCost > 0 && detail.MMProductionCostInProgressCalType == ProductionCostInProgressCalType.Theodinhmuc.ToString())
                                            averageUnitCost = CalculateAverageUnitCost(detail, calItemKeysByFactor, materialCost);
                                        else
                                            averageUnitCost = CalculateAverageUnitCost(detail, calItemsByKey, totalCost);
                                        // đơn giá vật tư trực tiếp 1m3 theo SP/Lệnh
                                        if (materialCost > 0 && detail.MMProductionCostInProgressCalType == ProductionCostInProgressCalType.Theodinhmuc.ToString())
                                            averageUnitCost = averageUnitCost + CalculateAverageUnitCost(detail, calItemsSpTheoLenh, materialCost);
                                        allocationItems = AllocateProductionCost(calItemsByKey, detail, averageUnitCost, detail.FK_MMProductionCostFactorID);
                                        if (allocationItems != null)
                                        {
                                            result.AddRange(allocationItems);
                                        }
                                    }
                                }
                            }
                            //watch3.Stop();

                            //watch5.Start();
                            #region Get cost from child
                            if (itemStruct == null) continue;
                            var children = GetChildren(key.FK_MMBatchProductID, key.FK_ICProductID, key.FK_MMBatchProductItemID, itemStruct);
                            // Tồn tại chi tiết con đã dc phân bổ chi phí.
                            if (children != null && children.Any())
                            {
                                var countExit = children.Where(c => calItemKeys.Any(k => k.FK_ICProductID == c.FK_ICProductID
                                                                                            && k.FK_MMBatchProductID == c.FK_MMBatchProductID
                                                                                            && k.FK_ICProductGroupID == c.FK_ICProductGroupID
                                                                                            && k.FK_ICProductForBatchID == c.FK_ICProductForBatchID
                                                                                            )).Count();
                                if (countExit > 0)
                                {
                                    List<MMProductionCostCalculationAllocationsInfo> childCost = result.Where(r => children.Any(k => k.FK_ICProductID == r.FK_ICProductID
                                                                                                                                && k.FK_MMBatchProductID == r.FK_MMBatchProductID
                                                                                                                                && k.FK_ICProductGroupID == r.FK_ICProductGroupID
                                                                                                                                && k.FK_ICProductForBatchID == r.FK_ICProductForBatchID)
                                    && key.FK_MMOperationID == r.FK_MMOperationID
                                    && key.FK_MMWorkShopID == r.FK_MMWorkShopID
                                    && key.FK_ARSaleOrderID == r.FK_ARSaleOrderID
                                    && r.FK_MMProductionCostFactorID == detail.FK_MMProductionCostFactorID).ToList();
                                    if (childCost != null && childCost.Any())
                                    {
                                        MMProductionCostCalculationItemsInfo keyInfo = items.Where(k => k.FK_ICProductID == key.FK_ICProductID
                                                                                                                                && k.FK_MMBatchProductID == key.FK_MMBatchProductID
                                                                                                                                && k.FK_ICProductForBatchID == key.FK_ICProductForBatchID
                                                                                                                                && k.FK_MMOperationID == key.FK_MMOperationID
                                                                                                                                && k.FK_MMWorkShopID == key.FK_MMWorkShopID
                                                                                                                                ).FirstOrDefault();
                                        MMProductionCostCalculationAllocationsInfo itemCost = new MMProductionCostCalculationAllocationsInfo();
                                        #region update info
                                        itemCost.FK_ICProductID = key.FK_ICProductID;
                                        itemCost.FK_MMBatchProductID = key.FK_MMBatchProductID;
                                        itemCost.FK_ICProductGroupID = keyInfo != null && keyInfo.FK_ICProductGroupID > 0 ? keyInfo.FK_ICProductGroupID : key.FK_ICProductGroupID;
                                        itemCost.FK_ARSaleOrderID = key.FK_ARSaleOrderID;
                                        itemCost.FK_MMWorkShopID = key.FK_MMWorkShopID;
                                        itemCost.FK_MMOperationID = key.FK_MMOperationID;
                                        itemCost.FK_ICProductForBatchID = key.FK_ICProductForBatchID;
                                        itemCost.FK_MMProductionCostFactorID = detail.FK_MMProductionCostFactorID;
                                        itemCost.MMProductionCostCalculationAllocationProductName = keyInfo != null ? keyInfo.MMProductionCostCalculationItemProductName : key.MMProductionCostCalculationItemProductName;
                                        itemCost.MMProductionCostCalculationAllocationProductDesc = keyInfo != null ? keyInfo.MMProductionCostCalculationItemProductDesc : key.MMProductionCostCalculationItemProductDesc;
                                        itemCost.MMProductionCostCalculationAllocationSerialNo = keyInfo != null ? keyInfo.MMProductionCostCalculationItemSerialNo : key.MMProductionCostCalculationItemSerialNo;
                                        itemCost.MMProductionCostCalculationAllocationOpeningAmount = childCost.Sum(c => c.MMProductionCostCalculationAllocationOpeningAmount);
                                        itemCost.MMProductionCostCalculationAllocationAmount = childCost.Sum(c => c.MMProductionCostCalculationAllocationAmount);
                                        itemCost.MMProductionCostCalculationAllocationCostAmount = childCost.Sum(c => c.MMProductionCostCalculationAllocationCostAmount);
                                        itemCost.MMProductionCostCalculationAllocationEndAmount = childCost.Sum(c => c.MMProductionCostCalculationAllocationEndAmount);
                                        #endregion
                                        //Cộng dồn chi phí nếu có
                                        #region Cộng dồn chi phí nếu có
                                        MMProductionCostCalculationAllocationsInfo itemExitCost = result.Where(r => r.FK_ICProductID == key.FK_ICProductID &&
                                                                                                   r.FK_MMBatchProductID == key.FK_MMBatchProductID &&
                                                                                                   r.FK_ICProductGroupID == key.FK_ICProductGroupID &&
                                                                                                   r.FK_ARSaleOrderID == key.FK_ARSaleOrderID &&
                                                                                                   r.FK_MMWorkShopID == key.FK_MMWorkShopID &&
                                                                                                   r.FK_MMOperationID == key.FK_MMOperationID &&
                                                                                                   r.FK_ICProductForBatchID == key.FK_ICProductForBatchID &&
                                                                                                   r.FK_MMProductionCostFactorID == detail.FK_MMProductionCostFactorID
                                                                                                   ).FirstOrDefault();

                                        #endregion
                                        if (itemExitCost != null)
                                        {
                                            itemExitCost.MMProductionCostCalculationAllocationOpeningAmount += childCost.Sum(c => c.MMProductionCostCalculationAllocationOpeningAmount);
                                            itemExitCost.MMProductionCostCalculationAllocationAmount += childCost.Sum(c => c.MMProductionCostCalculationAllocationAmount);
                                            itemExitCost.MMProductionCostCalculationAllocationCostAmount += childCost.Sum(c => c.MMProductionCostCalculationAllocationCostAmount);
                                            itemExitCost.MMProductionCostCalculationAllocationEndAmount += childCost.Sum(c => c.MMProductionCostCalculationAllocationEndAmount);
                                            itemExitCost.FK_ICProductGroupID = keyInfo != null && keyInfo.FK_ICProductGroupID > 0 ? keyInfo.FK_ICProductGroupID : key.FK_ICProductGroupID;
                                        }
                                        else
                                            result.Add(itemCost);
                                    }
                                }
                            }
                            #endregion
                            //watch5.Stop();
                        }
                        //string mess = "W2:" + watch2.Elapsed.TotalSeconds + " - " + "W3:" + watch3.Elapsed.TotalSeconds + " - " + "W4:" + watch4.Elapsed.TotalSeconds  + " - " + "W5:" + watch5.Elapsed.TotalSeconds + " - ";
                        //BOSProgressBar.Start(mess);
                    }


                    //stopwatch1.Stop();
                }

            }

            //MMProductionCostCalculationAllocationsController allocationController = new MMProductionCostCalculationAllocationsController();
            //List<MMProductionCostCalculationAllocationsInfo> allocations = allocationController.GetAllocationForProductionCost(mainObject.MMProductionCostCalculationFromDate, mainObject.MMProductionCostCalculationToDate, mainObject.FK_MMProductionCostFormulaID, false);

            //allocations.ForEach(o =>
            //{
            //    MMProductionCostCalculationItemsInfo item = items.Where(s => s.FK_MMProductionCostFactorID == o.FK_MMProductionCostFactorID
            //                                                                    && s.FK_MMBatchProductID == o.FK_MMBatchProductID
            //                                                                    && s.FK_ICProductID == o.FK_ICProductID)
            //                                                         .FirstOrDefault();
            //    MMProductionCostCalculationDetailCostsInfo detailCost = costs.Where(s => s.FK_MMProductionCostFactorID == o.FK_MMProductionCostFactorID).FirstOrDefault();
            //    decimal totalFactor = 1;
            //    decimal cost = 0;
            //    //if (item != null)
            //    //{
            //    decimal factor = item != null ? item.MMProductionCostCalculationItemFactor : 1;
            //    if (detailCost != null && detailCost.MMAllocationType == ProductionCostAllocationType.Tructiep.ToString() && detailCost.MMProductCollectType == ProductionCostAllocationType.Tructiep.ToString())
            //    {
            //        cost = costs.Where(s => s.FK_MMProductionCostFactorID == o.FK_MMProductionCostFactorID
            //                                          && s.FK_MMBatchProductID == o.FK_MMBatchProductID
            //                                          && s.FK_ICProductID == o.FK_ICProductID)
            //                    .Sum(s => s.MMProductionCostCalculationDetailCostValue);
            //        o.MMProductionCostCalculationAllocationAmount = cost;
            //    }
            //    else
            //    {
            //        if (detailCost != null && detailCost.MMBatchProductCollectType == ProductionCostAllocationType.Tructiep.ToString())
            //        {
            //            totalFactor = items.Where(s => s.FK_MMProductionCostFactorID == o.FK_MMProductionCostFactorID
            //                                          && s.FK_MMBatchProductID == o.FK_MMBatchProductID)
            //                           .Sum(s => s.MMProductionCostCalculationItemFactor);
            //            cost = costs.Where(s => s.FK_MMProductionCostFactorID == o.FK_MMProductionCostFactorID
            //                                              && s.FK_MMBatchProductID == o.FK_MMBatchProductID)
            //                        .Sum(s => s.MMProductionCostCalculationDetailCostValue);
            //        }
            //        else
            //        {
            //            totalFactor = items.Where(s => s.FK_MMProductionCostFactorID == o.FK_MMProductionCostFactorID)
            //                           .Sum(s => s.MMProductionCostCalculationItemFactor);
            //            cost = costs.Where(s => s.FK_MMProductionCostFactorID == o.FK_MMProductionCostFactorID)
            //                       .Sum(s => s.MMProductionCostCalculationDetailCostValue);
            //        }
            //        o.MMProductionCostCalculationAllocationAmount = (cost / (totalFactor == 0 ? 1 : totalFactor)) * factor;
            //    }
            //    if (item != null && (item.MMProductionCostCalculationItemOpeningQty + item.MMProductionCostCalculationItemQty) != 0)
            //        //Giá trị dở dang
            //        o.MMProductionCostCalculationAllocationCostAmount = (o.MMProductionCostCalculationAllocationAmount + o.MMProductionCostCalculationAllocationOpeningAmount)
            //                                                            * item.MMProductionCostCalculationItemReceiptQty
            //                                                            / (item.MMProductionCostCalculationItemOpeningQty + item.MMProductionCostCalculationItemQty);
            //    o.MMProductionCostCalculationAllocationEndAmount = o.MMProductionCostCalculationAllocationAmount + o.MMProductionCostCalculationAllocationOpeningAmount - o.MMProductionCostCalculationAllocationCostAmount;
            //    //}
            //});
            //allocations = allocations.Where(s => (s.MMProductionCostCalculationAllocationOpeningAmount
            //                                        + s.MMProductionCostCalculationAllocationAmount
            //                                        + s.MMProductionCostCalculationAllocationCostAmount
            //                                        + s.MMProductionCostCalculationAllocationEndAmount) > 0).ToList();

            //return allocations;
            return result;
        }

        // Phân bổ theo yếu tố chi phí khác (công thức theo thành phẩm)
        public List<MMProductionCostCalculationAllocationsInfo> GetDataForAllocationOtherOld(MMProductionCostCalculationsInfo mainObject, List<MMProductionCostCalculationItemsInfo> items, List<MMProductionCostCalculationDetailCostsInfo> costs, List<MMProductionCostCalculationAllocationsInfo> allocations)
        {
            MMProductionCostCalculationAllocationsController allocationController = new MMProductionCostCalculationAllocationsController();
            List<MMProductionCostCalculationAllocationsInfo> allocationOthers = allocationController.GetAllocationForProductionCost(mainObject.MMProductionCostCalculationFromDate, mainObject.MMProductionCostCalculationToDate, mainObject.FK_MMProductionCostFormulaID, true);
            allocationOthers.ForEach(o =>
            {
                MMProductionCostCalculationItemsInfo item = items.Where(s => s.FK_MMProductionCostFactorID == o.FK_MMProductionCostFactorID
                                                                                && s.FK_MMBatchProductID == o.FK_MMBatchProductID
                                                                                && s.FK_ICProductID == o.FK_ICProductID)
                                                                     .FirstOrDefault();

                MMProductionCostCalculationAllocationsInfo allocation = allocations.Where(s => s.FK_MMProductionCostFactorID == o.FK_MMRefProductionCostFactorID
                                                                                && s.FK_MMBatchProductID == o.FK_MMBatchProductID
                                                                                && s.FK_ICProductID == o.FK_ICProductID)
                                                                     .FirstOrDefault();
                if (allocation != null)
                {
                    decimal cost = costs.Where(s => s.FK_MMProductionCostFactorID == o.FK_MMProductionCostFactorID)
                                    .Sum(s => s.MMProductionCostCalculationDetailCostValue);
                    decimal totalAmount = allocations.Where(s => s.FK_MMProductionCostFactorID == o.FK_MMRefProductionCostFactorID)
                                           .Sum(s => s.MMProductionCostCalculationAllocationAmount);
                    o.MMProductionCostCalculationAllocationAmount = (cost / (totalAmount == 0 ? 1 : totalAmount)) * allocation.MMProductionCostCalculationAllocationAmount;
                    if (item != null)
                    {
                        o.MMProductionCostCalculationAllocationCostAmount = (o.MMProductionCostCalculationAllocationAmount + o.MMProductionCostCalculationAllocationOpeningAmount) * item.MMProductionCostCalculationItemReceiptQty / (item.MMProductionCostCalculationItemEndQty + item.MMProductionCostCalculationItemReceiptQty);
                    }
                    o.MMProductionCostCalculationAllocationEndAmount = o.MMProductionCostCalculationAllocationAmount + o.MMProductionCostCalculationAllocationOpeningAmount - o.MMProductionCostCalculationAllocationCostAmount;
                }
            });
            allocationOthers = allocationOthers.Where(s => (s.MMProductionCostCalculationAllocationOpeningAmount
                                                    + s.MMProductionCostCalculationAllocationAmount
                                                    + s.MMProductionCostCalculationAllocationCostAmount
                                                    + s.MMProductionCostCalculationAllocationEndAmount) > 0).ToList();
            return allocationOthers;
        }

        // Giá thành sản xuất(công thức theo thành phẩm)
        public List<MMProductionCostCalculationPricesInfo> GetDataForCalculationPriceOld(List<MMProductionCostCalculationItemsInfo> items,
                                                                                            List<MMProductionCostCalculationAllocationsInfo> allocations,
                                                                                            List<MMProductionCostCalculationAllocationsInfo> allocationOthers)
        {
            List<MMProductionCostCalculationAllocationsInfo> allCost = allocations.Concat(allocationOthers).ToList();
            var a = (from m in items
                     group m by new
                     {
                         m.FK_MMProductionCostCalculationID,
                         m.FK_MMOperationID,
                         m.FK_MMBatchProductID,
                         m.FK_ICProductGroupID,
                         m.FK_ICProductID,
                         m.FK_ICProductForBatchID,
                         m.FK_PMProjectID,
                         m.FK_ARSaleOrderID,
                         m.FK_MMWorkShopID,
                         m.MMProductionCostCalculationItemSerialNo,
                         m.MMProductionCostCalculationItemProductName,
                         m.MMProductionCostCalculationItemProductDesc
                     } into g
                     select new MMProductionCostCalculationPricesInfo
                     {
                         FK_MMProductionCostCalculationID = g.Key.FK_MMProductionCostCalculationID,
                         FK_MMBatchProductID = g.Key.FK_MMBatchProductID,
                         FK_ICProductGroupID = g.Key.FK_ICProductGroupID,
                         FK_ICProductID = g.Key.FK_ICProductID,
                         FK_ICProductForBatchID = g.Key.FK_ICProductForBatchID,
                         FK_PMProjectID = g.Key.FK_PMProjectID,
                         FK_ARSaleOrderID = g.Key.FK_ARSaleOrderID,
                         FK_MMOperationID = g.FirstOrDefault().FK_MMOperationID,
                         FK_MMWorkShopID = g.FirstOrDefault().FK_MMWorkShopID,
                         MMProductionCostCalculationPriceSerialNo = g.FirstOrDefault().MMProductionCostCalculationItemSerialNo,
                         MMProductionCostCalculationPriceProductName = g.FirstOrDefault().MMProductionCostCalculationItemProductName,
                         MMProductionCostCalculationPriceProductDesc = g.FirstOrDefault().MMProductionCostCalculationItemProductDesc,
                         MMProductionCostCalculationPriceReceiptQty = g.Sum(i => i.MMProductionCostCalculationItemReceiptQty)//,
                                                                                                                             ////MMProductionCostCalculationTotalCost = allCost.Where(s => s.FK_MMBatchProductID == g.Key.FK_MMBatchProductID
                                                                                                                             ////                           && s.FK_ICProductID == g.Key.FK_ICProductID
                                                                                                                             ////                           && s.FK_ICProductForBatchID == g.Key.FK_ICProductForBatchID
                                                                                                                             ////                           && (s.FK_ICProductGroupID == 0 || s.FK_ICProductGroupID == g.Key.FK_ICProductGroupID)
                                                                                                                             ////                           && s.FK_PMProjectID == g.Key.FK_PMProjectID
                                                                                                                             ////                           && s.FK_ARSaleOrderID == g.Key.FK_ARSaleOrderID
                                                                                                                             ////                           && s.FK_MMOperationID == g.Key.FK_MMOperationID
                                                                                                                             ////                           && s.FK_MMWorkShopID == g.Key.FK_MMWorkShopID
                                                                                                                             ////                           && s.MMProductionCostCalculationAllocationSerialNo == g.Key.MMProductionCostCalculationItemSerialNo
                                                                                                                             ////                           ).Sum(s => s.MMProductionCostCalculationAllocationCostAmount)
                     }).ToList();
            //int count = 0;
            //int totalCount = a.Count();
            //string mess = "Tính giá thành sản xuất";
            Parallel.ForEach(a, (price) =>
            {
                string mess = BOSApp.GetDisplayTextFromCatche("MMBatchProducts", "MMBatchProductID", price.FK_MMBatchProductID, "MMBatchProductNo");
                BOSProgressBar.Start(mess);
                var detailCost = (from m in allCost
                                  where m.FK_MMBatchProductID == price.FK_MMBatchProductID &&
                                      m.FK_ICProductID == price.FK_ICProductID &&
                                      m.FK_ICProductForBatchID == price.FK_ICProductForBatchID &&
                                      (m.FK_ICProductGroupID == 0 || m.FK_ICProductGroupID == price.FK_ICProductGroupID) &&
                                      m.FK_PMProjectID == price.FK_PMProjectID &&
                                      m.FK_ARSaleOrderID == price.FK_ARSaleOrderID &&
                                      m.FK_MMOperationID == price.FK_MMOperationID &&
                                      m.FK_MMWorkShopID == price.FK_MMWorkShopID &&
                                      m.MMProductionCostCalculationAllocationSerialNo == price.MMProductionCostCalculationPriceSerialNo
                                  select m.MMProductionCostCalculationAllocationCostAmount);
                price.MMProductionCostCalculationTotalCost = detailCost != null && detailCost.Count() > 0 ? detailCost.Sum() : 0;
                price.MMProductionCostCalculationUnitCost = price.MMProductionCostCalculationPriceReceiptQty != 0
                   ? price.MMProductionCostCalculationTotalCost / price.MMProductionCostCalculationPriceReceiptQty
                   : 0;
            });
            //foreach (MMProductionCostCalculationPricesInfo price in a)
            //{
            //    count++;
            //    decimal pct = (count * 100) / totalCount;
            //    BOSProgressBar.Start(mess + ": " + Math.Round(pct) + " % ");
            //    var detailCost = (from m in allCost
            //                                where m.FK_MMBatchProductID == price.FK_MMBatchProductID &&
            //                                    m.FK_ICProductID == price.FK_ICProductID &&
            //                                    m.FK_ICProductForBatchID == price.FK_ICProductForBatchID &&
            //                                    (m.FK_ICProductGroupID == 0 || m.FK_ICProductGroupID == price.FK_ICProductGroupID) &&
            //                                    m.FK_PMProjectID == price.FK_PMProjectID &&
            //                                    m.FK_ARSaleOrderID == price.FK_ARSaleOrderID &&
            //                                    m.FK_MMOperationID == price.FK_MMOperationID &&
            //                                    m.FK_MMWorkShopID == price.FK_MMWorkShopID &&
            //                                    m.MMProductionCostCalculationAllocationSerialNo == price.MMProductionCostCalculationPriceSerialNo
            //                                select m.MMProductionCostCalculationAllocationCostAmount);
            //    price.MMProductionCostCalculationTotalCost = detailCost!= null && detailCost.Count() > 0 ? detailCost.Sum() : 0;
            //    price.MMProductionCostCalculationUnitCost = price.MMProductionCostCalculationPriceReceiptQty != 0
            //       ? price.MMProductionCostCalculationTotalCost / price.MMProductionCostCalculationPriceReceiptQty
            //       : 0;
            //}
            return a.Where(o => o.MMProductionCostCalculationUnitCost > 0).ToList();
        }
        #endregion

        public void UpdateReffObjects()
        {
            BOSProgressBar.Start("Hệ thống đang cập nhật chứng từ !");
            try
            {
                ProductionCostCalculationEntities entity = (ProductionCostCalculationEntities)CurrentModuleEntity;
                MMProductionCostCalculationsInfo mainObject = (MMProductionCostCalculationsInfo)entity.MainObject;
                MMProductionCostCalculationsController controller = new MMProductionCostCalculationsController();
                controller.UpdateReffReceipts(mainObject.MMProductionCostCalculationID);
                controller.UpdateReffShipments(mainObject.MMProductionCostCalculationID);
                controller.UpdateReffInProgressStatistics(mainObject.MMProductionCostCalculationID);
                (new ICTransactionsController()).PostProductionCostCalculation(mainObject.MMProductionCostCalculationID);
                //           ICTransactionsController objTransactionsController = new ICTransactionsController();
                //           List<ICTransactionsInfo> transactions = objTransactionsController.GetTransactionProductionCostCalculation(mainObject.MMProductionCostCalculationID);
                //           transactions.ForEach(o =>
                //           {
                //GLHelper.PostedTransactions(o.ICTransactionModuleName, o.ICTransactionReferenceID, ModulePostingType.Stock, ModulePostingType.Accounting);
                //           });
                mainObject.MMProductionCostCalculationStatus = "Updated";
                entity.SaveMainObject();
            }
            catch (Exception ex)
            {
                BOSProgressBar.Close();
            }
            BOSProgressBar.Close();
        }
        public override bool ActionCancelComplete()
        {
            ProductionCostCalculationEntities entity = (ProductionCostCalculationEntities)CurrentModuleEntity;
            MMProductionCostCalculationsInfo mainObject = (MMProductionCostCalculationsInfo)CurrentModuleEntity.MainObject;
            if (mainObject.MMProductionCostCalculationStatus == SaleOrderStatus.Complete.ToString()
                || mainObject.MMProductionCostCalculationStatus == "Updated")
            {
                mainObject.MMProductionCostCalculationStatus = SaleOrderStatus.New.ToString();
                entity.SaveMainObject();
            }
            base.ActionCancelComplete();
            InvalidateToolbar();
            return true;
        }
        public override void InvalidateToolbar()
        {
            MMProductionCostCalculationsInfo mainObject = (MMProductionCostCalculationsInfo)CurrentModuleEntity.MainObject;
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, true);
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, false);
            ParentScreen.SetEnableOfToolbarButton("UpdateReffObjects", false);
            ParentScreen.SetEnableOfToolbarButton("CancelComplete", false);
            if (mainObject.MMProductionCostCalculationID > 0 && mainObject.MMProductionCostCalculationStatus == "New")
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, true);
            if (mainObject.MMProductionCostCalculationStatus == "Complete")
            {
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, false);
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
                ParentScreen.SetEnableOfToolbarButton("UpdateReffObjects", true);
                ParentScreen.SetEnableOfToolbarButton("CancelComplete", true);
            }
            else if (mainObject.MMProductionCostCalculationStatus == "Updated")
            {
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, false);
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
                ParentScreen.SetEnableOfToolbarButton("UpdateReffObjects", false);
                ParentScreen.SetEnableOfToolbarButton("CancelComplete", true);
            }

            base.InvalidateToolbar();
        }

        public override int ActionSave()
        {
            int result = 0;
            BOSProgressBar.Start("Đang thực hiện lưu giá thành !");
            try
            {
                result = base.ActionSave();

            }
            catch (Exception ex)
            {
                BOSProgressBar.Close();
            }

            BOSProgressBar.Close();

            return result;
        }

        public override void ModuleAfterSaved(int iObjectID)
        {
            ProductionCostCalculationEntities entity = (ProductionCostCalculationEntities)CurrentModuleEntity;
            (new MMProductionCostCalculationsController()).DeleteReference(iObjectID, BOSApp.CurrentUsersInfo.ADUserName);
            entity.MMProductionCostCalculationDetailCostsList.SaveItemTypeObjects();
            entity.ProductionCostCalculationItemsList.SaveItemTypeObjects();
            entity.ProductionCostCalculationAllocationsList.SaveItemTypeObjects();
            entity.ProductionCostCalculationAllocationOthersList.SaveItemTypeObjects();
            entity.ProductionCostCalculationPricesList.SaveItemTypeObjects();
            base.ModuleAfterSaved(iObjectID);
        }

        public List<MMProductionCostCalculationPricesInfo> GetDataForCalculationPriceOldVer2(List<MMProductionCostCalculationItemsInfo> items,
                                                                                            List<MMProductionCostCalculationAllocationsInfo> allocations,
                                                                                            List<MMProductionCostCalculationAllocationsInfo> allocationOthers)
        {

            STToolbarsController rController = new STToolbarsController();
            List<string> colList = rController.UserDefinedTableTypeColumnName("Type_MMProductionCostCalculationItems");
            DataTable itemTable = CollectionExtensions.AsDataTable<MMProductionCostCalculationItemsInfo>(items, colList);

            List<MMProductionCostCalculationAllocationsInfo> allCost = allocations.Concat(allocationOthers).ToList();

            colList = rController.UserDefinedTableTypeColumnName("Type_MMProductionCostCalculationAllocations");
            DataTable allocationTable = CollectionExtensions.AsDataTable<MMProductionCostCalculationAllocationsInfo>(allCost, colList);

            MMProductionCostCalculationPricesController pccpsController = new MMProductionCostCalculationPricesController();

            var cmd = new SqlCommand();
            cmd.CommandText = "MMProductionCostCalculationPrices_GetDataForCalculationPriceOld";
            cmd.CommandType = CommandType.StoredProcedure;

            var param = new SqlParameter();
            param.ParameterName = "@MMProductionCostCalculationItems";
            param.SqlDbType = SqlDbType.Structured;
            cmd.Parameters.Add(param);
            cmd.Parameters["@MMProductionCostCalculationItems"].Value = itemTable;

            var param2 = new SqlParameter();
            param2.ParameterName = "@MMProductionCostCalculationAllocations";
            param2.SqlDbType = SqlDbType.Structured;
            cmd.Parameters.Add(param2);
            cmd.Parameters["@MMProductionCostCalculationAllocations"].Value = allocationTable;

            cmd.CommandTimeout = 9999;

            DataSet ds = SqlDatabaseHelper.RunStoredProcedure(cmd);
            List<MMProductionCostCalculationPricesInfo> result = (List<MMProductionCostCalculationPricesInfo>)pccpsController.GetListFromDataSet(ds);

            return result;
        }
    }
    #endregion
}

