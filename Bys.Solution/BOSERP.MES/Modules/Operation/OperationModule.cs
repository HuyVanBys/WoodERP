using BOSCommon.Constants;
using BOSLib;
using Localization;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows.Forms;

namespace BOSERP.Modules.Operation
{
    #region OperationModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:OperationModule
    //Created Date:Tuesday, November 03, 2015
    //-----------------------------------------------------------

    public class OperationModule : BaseModuleERP
    {
        #region Constant for Oparetion
        public const string OparetionsTreeListControl = "fld_trlMMOperations";

        public const string LineOperationGridControl = "fld_dgcMMLineOperations";
        #endregion   

        public OperationModule()
        {
            Name = ModuleName.Operation;
            CurrentModuleEntity = new OperationEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();
            GetCurrentModuleDataViewPermission();

        }

        public void GetCurrentModuleDataViewPermission()
        {
            CurrentModuleDataViewPermissionList = BOSApp.CurrentADDataViewPermissionList.Where(i => i.STModuleName == Name && i.ADDataViewPermissionType == ADDataViewPermissionType.Module).ToList();

            List<int> branchIDList = new List<int>();
            foreach (ADDataViewPermissionsInfo dataViewPermissionsInfo in CurrentModuleDataViewPermissionList)
            {
                branchIDList.Add(dataViewPermissionsInfo.FK_BRBranchID);
            }

            if (branchIDList.Count == 0)
            {
                BranchList = new List<BRBranchsInfo>();
            }
            else
            {
                BRBranchsController objBranchsController = new BRBranchsController();
                List<BRBranchsInfo> branchList = objBranchsController.GetAllBranches();

                BranchList = branchList.Where(i => branchIDList.IndexOf(i.BRBranchID) > -1).ToList();
            }
        }

        protected override DataSet GetSearchData(ref string searchQuery)
        {
            MMOperationsInfo searchObject = (MMOperationsInfo)CurrentModuleEntity.SearchObject;
            MMOperationsController objOperationsController = new MMOperationsController();
            DataSet ds = new DataSet();
            if (searchObject.FK_BRBranchID == 0)
            {
                if (BranchList.Count == 0)
                {
                    ds = objOperationsController.GetDataSetByID(-1);
                }
                else
                {

                    ds = objOperationsController.GetDataSetOfBranchList(searchObject.MMOperationNo
                                                                        , searchObject.MMOperationName
                                                                        , searchObject.MMOperationGroup
                                                                        , searchObject.MMOperationType
                                                                        , BranchList);
                }
            }
            else
            {
                ds = objOperationsController.GetDataSetOfBranch(searchObject.MMOperationNo
                                                                , searchObject.MMOperationName
                                                                , searchObject.MMOperationGroup
                                                                , searchObject.MMOperationType
                                                                , searchObject.FK_BRBranchID);
            }
            return ds;
        }

        public override int ActionSave()
        {
            OperationEntities entity = (OperationEntities)CurrentModuleEntity;
            MMOperationsInfo objOperationsInfo = (MMOperationsInfo)entity.MainObject;
            entity.ProductionComplexityByOperationsList.EndCurrentEdit();
            if ((objOperationsInfo.MMOperationInOutStockCheck || objOperationsInfo.MMOperationCostCalculationCheck) &&
                (objOperationsInfo.FK_ACAccountID == 0 || objOperationsInfo.FK_ACIngrogressAccountID == 0))
            {
                MessageBox.Show("Vui lòng chọn TK dở dang/ TK BTP/TP vì có xuất nhập kho và tính giá thành!", MESLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return 0;
            }

            //if (string.IsNullOrEmpty(objOperationsInfo.MMOperationGroup))
            //{
            //    MessageBox.Show("Vui lòng chọn nhóm công đoạn!", MESLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            //    return 0;
            //}
            if ((objOperationsInfo.MMOperationInOutStockCheck) &&
                (objOperationsInfo.MMOperationAcronym.Trim() == string.Empty))
            {
                MessageBox.Show("Công đoạn có nhập kho, Serie prefix không thể trống!", MESLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return 0;
            }
            if (objOperationsInfo.MMOperationSyncProductCheck && objOperationsInfo.FK_MMOperationSynID == 0 && objOperationsInfo.MMOperationType != "ChiTietTuPhach")
            {
                MessageBox.Show("Công đoạn có kiểm tra đồng bộ.! Vui lòng xác định công đoạn có thể sử dụng SL để kiểm tra!", MESLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return 0;
            }
            if (objOperationsInfo.MMOperationSyncProductCheck && objOperationsInfo.FK_MMOperationSynID > 0)
            {
                MMOperationsInfo objOperationSynCheck = (MMOperationsInfo)(new MMOperationsController()).GetObjectByID(objOperationsInfo.FK_MMOperationSynID);
                if (objOperationSynCheck != null && !objOperationSynCheck.MMOperationIsPlan)
                {
                    MessageBox.Show("Công đoạn sử dụng để kiểm tra đồng bộ phải là CĐ có KHSXCT!", MESLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return 0;
                }
                else if (objOperationSynCheck == null)
                {
                    MessageBox.Show("Công đoạn sử dụng để kiểm tra đồng bộ không tìm thấy!", MESLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return 0;
                }
            }
            if (entity.ProductionComplexityByOperationsList != null && entity.ProductionComplexityByOperationsList.Count > 0 && entity.ProductionComplexityByOperationsList.Exists(o => o.MMUnitTime < 0))
            {
                MessageBox.Show("Unit Time không được nhập số âm.! Vui lòng kiểm tra lại!", MESLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return 0;
            }
            if (entity.ProductionComplexityByOperationsList != null && entity.ProductionComplexityByOperationsList.Count > 0 && entity.ProductionComplexityByOperationsList.Exists(o => string.IsNullOrEmpty(o.MMConfigProductionComplexityType)))
            {
                MessageBox.Show("Độ phức tạp sản xuất không được để trống.! Vui lòng kiểm tra lại!", MESLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return 0;
            }
            foreach (MMProductionComplexityByOperationsInfo item in entity.ProductionComplexityByOperationsList)
            {
                if (entity.ProductionComplexityByOperationsList.Where(x => x.MMConfigProductionComplexityType == item.MMConfigProductionComplexityType).Count() > 1)
                {
                    MessageBox.Show("Độ phức tạp sản xuất không thể chọn trùng.! Vui lòng kiểm tra lại!", MESLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return 0;
                }
            }    
            
            int result = base.ActionSave();
            if (result > 0 && objOperationsInfo.MMOperationParentID > 0 && objOperationsInfo.MMOperationIsPlan)
            {
                //Update  MMOperationIsPlan parent
                (new MMOperationsController()).UpdateOperationIsPlanByID(objOperationsInfo.MMOperationParentID, objOperationsInfo.MMOperationIsPlan, BOSApp.CurrentUsersInfo.ADUserName);
            }
            return result;
        }
        public void ChangeOutStockCheck(bool check)
        {
            if (Toolbar.IsNullOrNoneAction()) return;
            OperationEntities entity = (OperationEntities)CurrentModuleEntity;
            MMOperationsInfo objOperationsInfo = (MMOperationsInfo)entity.MainObject;

            if (check)
                objOperationsInfo.MMOperationCapacity = false;
            else
                objOperationsInfo.MMOperationCapacity = true;
            entity.UpdateMainObjectBindingSource();
        }

        public override string GenerateSearchQuery(string strTableName)
        {
            string condition = base.GenerateSearchQuery(strTableName);
            condition += BOSUtil.NewLine + BOSUtil.Tab + "Order by MMoperationOrder" + BOSUtil.NewLine;
            return condition;
        }
        #region Print Barcode
        /// <summary>
        /// Print barcode item on focus
        /// </summary>
        /// <param name="objICProductsInfo"></param>
        public void PrintBarcode()
        {
            //check grid select row  and print barcode selected
            OperationEntities entity = (OperationEntities)CurrentModuleEntity;
            MMOperationsInfo objOperationsInfo = (MMOperationsInfo)entity.MainObject;
            if (objOperationsInfo != null && objOperationsInfo.MMOperationID > 0)
            {
                List<MMOperationsInfo> ToPrint = new List<MMOperationsInfo>();
                objOperationsInfo.MMOperationBarCodeImage = BOSERP.Utilities.Code128Rendering.MakeBarcodeLargeImage(objOperationsInfo.MMOperationID.ToString().PadLeft(2, '0'), 2, false);
                ToPrint.Add(objOperationsInfo);
                BOSReport.RPBarcodeOperation report = new BOSReport.RPBarcodeOperation(ToPrint);

                guiReportPreview reviewer = new guiReportPreview(report);
                reviewer.Show();
            }
        }
        #endregion

        public void RemoveSelectMachineGroup()
        {
            OperationEntities entity = (OperationEntities)CurrentModuleEntity;
            entity.OperationMachineGroupsList.RemoveSelectedRowObjectFromList();
        }

        public void RemoveSelectProductionComplexityByOperation()
        {
            OperationEntities entity = (OperationEntities)CurrentModuleEntity;
            entity.ProductionComplexityByOperationsList.RemoveSelectedRowObjectFromList();
        }
    }
    #endregion
}