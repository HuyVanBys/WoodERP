using BOSCommon;
using BOSCommon.Constants;
using BOSComponent;
using BOSLib;
using DevExpress.XtraGrid.Views.Grid;
using Localization;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows.Forms;
using BOSReport;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.Repository;
using DevExpress.XtraGrid;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid.Views.BandedGrid;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraReports.UI;
using DevExpress.XtraTab;
using System.IO;
using DevExpress.XtraRichEdit;

namespace BOSERP.Modules.ProductionPlanning
{
    #region ProductionPlanning
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ProductionPlanning
    //Created Date:Saturday, May 31, 2008
    //-----------------------------------------------------------

    public class ProductionPlanningModule : BaseTransactionModule
    {
        #region Constants
        public const string ProductionPlanningItemGridControlName = "fld_dgcARProductionPlanningItems";
        public const string SearchBranchLookupEditControlName = "fld_lkeFK_BRBranchID";
        public const string ProductPercificControlName = "fld_btnXemVatTu";
        public const string ToolbarButtonEditAfterCompleting = "EditAfterCompleting";
        public const string CloseButtonControlName = "fld_btnClosePlaning";
        public const string stProductionPlanningDescRichEdit = "fld_recARProductionPlanningDesc";
        public const string SaleOrderNameControlName = "fld_txtARProductionPlanningSaleOrderName";
        public const string ProductPictureControlName = "fld_pteARProductionPlanningItemProductPicture";
        #endregion

        #region Variable
        #endregion

        #region Public properties
        public BOSLookupEdit SearchBranchLookupEditControl;
        public BOSLookupEdit ProductLookupEditControl;
        public BOSGridControl GridControl;
        public BOSButton ButtonProductPercific;
        public BOSButton CloseButton;
        public List<ADDataViewPermissionsInfo> CurrentModuleDataViewPermissionList;
        public List<BRBranchsInfo> BranchList;
        public bool IsEditAfterCompleting = false;
        public BOSRichEditControl ProductionPlanningDescEditControl;
        public BOSTextBox SaleOrderNameControl;
        public BOSPictureEdit ProductPictureControl;
        #endregion

        public ProductionPlanningModule()
        {
            Name = ModuleName.ProductionPlanning;
            CurrentModuleEntity = new ProductionPlanningEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();

            GetCurrentModuleDataViewPermission();
            SearchBranchLookupEditControl = (BOSLookupEdit)Controls[SearchBranchLookupEditControlName];
            ButtonProductPercific = (BOSButton)Controls[ProductPercificControlName];
            GridControl = (BOSGridControl)Controls[ProductionPlanningItemGridControlName];
            CloseButton = (BOSButton)Controls[CloseButtonControlName];
            ProductionPlanningDescEditControl = (BOSRichEditControl)Controls[stProductionPlanningDescRichEdit];
            SaleOrderNameControl = (BOSTextBox)Controls[SaleOrderNameControlName];
            ProductPictureControl = (BOSPictureEdit)Controls[ProductPictureControlName];
        }

        protected override DataSet GetSearchData(ref string searchQuery)
        {
            ARProductionPlanningsInfo searchObject = (ARProductionPlanningsInfo)CurrentModuleEntity.SearchObject;
            ARProductionPlanningsController objProductionPlanningsController = new ARProductionPlanningsController();
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = new ACObjectsInfo();
            if (!string.IsNullOrEmpty(searchObject.ACObjectAccessKey))
            {
                objObjectsInfo = (ACObjectsInfo)objObjectsController.GetObjectByAccessKey(searchObject.ACObjectAccessKey);
                objObjectsInfo = objObjectsController.GetObjectByIDAndType(objObjectsInfo.ACObjectID, objObjectsInfo.ACObjectType);
            }
            DataSet ds = new DataSet();
            if (searchObject.FK_BRBranchID == 0)
            {
                if (BranchList.Count == 0)
                {
                    ds = objProductionPlanningsController.GetDataSetByID(-1);
                }
                else
                {
                    ds = objProductionPlanningsController.GetDataSetOfBranchList(searchObject.ARProductionPlanningNo
                                                                                , searchObject.FK_MMWorkShopID
                                                                                , searchObject.FK_HREmployeeID
                                                                                , searchObject.ARProductionPlanningStatus
                                                                                , searchObject.ProductionPlanningFromDate
                                                                                , searchObject.ProductionPlanningToDate
                                                                                , objObjectsInfo.ACObjectID
                                                                                , objObjectsInfo.ACObjectType
                                                                                , searchObject.FK_ICProductID
                                                                                , BranchList);
                }
            }
            else
            {
                ds = objProductionPlanningsController.GetDataSetOfBranch(searchObject.ARProductionPlanningNo
                                                                         , searchObject.FK_MMWorkShopID
                                                                         , searchObject.FK_HREmployeeID
                                                                         , searchObject.ARProductionPlanningStatus
                                                                         , searchObject.ProductionPlanningFromDate
                                                                         , searchObject.ProductionPlanningToDate
                                                                         , objObjectsInfo.ACObjectID
                                                                         , objObjectsInfo.ACObjectType
                                                                         , searchObject.FK_ICProductID
                                                                         , searchObject.FK_BRBranchID);
            }
            return ds;
        }


        public override void Invalidate(int iObjectID)
        {
            base.Invalidate(iObjectID);
            ProductionPlanningEntities entity = (ProductionPlanningEntities)CurrentModuleEntity;
            ARProductionPlanningsInfo mainObject = (ARProductionPlanningsInfo)CurrentModuleEntity.MainObject;
            InvalidateShowProductSpecific();
            EnableControls();
            if (ProductionPlanningDescEditControl != null)
            {
                ProductionPlanningDescEditControl.OpenXmlBytes = (mainObject.ARProductionPlanningDesc != null && mainObject.ARProductionPlanningDesc.Length > 0) ? mainObject.ARProductionPlanningDesc : null;
            }
            bool createSaleOrder = entity.ProductionPlanningItemList.Where(o => o.FK_ARSaleOrderID > 0).Count() > 0;
            if (SaleOrderNameControl != null)
            {
                SaleOrderNameControl.ReadOnly = createSaleOrder;
            }    
        }

        public void EnableControls()
        {
            if (CloseButton == null)
                return;

            ARProductionPlanningsInfo mainObject = (ARProductionPlanningsInfo)CurrentModuleEntity.MainObject;
            CloseButton.Enabled = false;
            if (mainObject.ARProductionPlanningID > 0 && Toolbar.IsNullOrNoneAction())
                CloseButton.Enabled = true;
        }

        public void InvalidateShowProductSpecific()
        {
            ProductionPlanningEntities entity = (ProductionPlanningEntities)CurrentModuleEntity;
            ARProductionPlanningsInfo mainObject = (ARProductionPlanningsInfo)CurrentModuleEntity.MainObject;
            if (mainObject.ARProductionPlanningStatus == "Complete")
                ButtonProductPercific.Enabled = true;
            else
                ButtonProductPercific.Enabled = false;
        }
        public void GetCurrentModuleDataViewPermission()
        {
            CurrentModuleDataViewPermissionList = BOSApp.CurrentADDataViewPermissionList.Where(i => i.STModuleName == Name && i.ADDataViewPermissionType == ADDataViewPermissionType.Module).ToList();

            List<int> branchIDList = new List<int>();
            foreach (ADDataViewPermissionsInfo dataViewPermissionsInfo in CurrentModuleDataViewPermissionList)
            {
                branchIDList.Add(dataViewPermissionsInfo.FK_BRBranchID);
            }

            if (branchIDList.Count == 0)
            {
                BranchList = new List<BRBranchsInfo>();
            }
            else
            {
                BRBranchsController objBranchsController = new BRBranchsController();
                List<BRBranchsInfo> branchList = objBranchsController.GetAllBranches();

                BranchList = branchList.Where(i => branchIDList.IndexOf(i.BRBranchID) > -1).ToList();
            }
        }


        public override void InvalidateToolbar()
        {
            base.InvalidateToolbar();
            ARProductionPlanningsInfo receipt = (ARProductionPlanningsInfo)CurrentModuleEntity.MainObject;
            ParentScreen.SetEnableOfToolbarButton(ToolbarButtonEditAfterCompleting, false);
            ParentScreen.SetEnableOfToolbarButton(ProductionPlanningConst.CompleteProductionPlanning, false);
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonCancelComplete, false);
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, false);
            if (receipt.ARProductionPlanningID > 0)
            {
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, true);
                ParentScreen.SetEnableOfToolbarButton(ProductionPlanningConst.CompleteProductionPlanning, true);
                ParentScreen.SetEnableOfToolbarButton("Closed", true);
            }
            if (receipt.ARProductionPlanningStatus == ProductionPlanningStatus.Complete.ToString())
            {
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
                ParentScreen.SetEnableOfToolbarButton(ProductionPlanningConst.CompleteProductionPlanning, false);
                ParentScreen.SetEnableOfToolbarButton(ToolbarButtonEditAfterCompleting, true);
                ParentScreen.SetEnableOfToolbarButton("Closed", true);
            }
            if (receipt.ARProductionPlanningStatus == "Closed")
            {
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
                ParentScreen.SetEnableOfToolbarButton(ProductionPlanningConst.CompleteProductionPlanning, false);
                ParentScreen.SetEnableOfToolbarButton(ToolbarButtonEditAfterCompleting, false);
                ParentScreen.SetEnableOfToolbarButton("Closed", false);
            }
            if(!Toolbar.IsNullOrNoneAction())
            {
                ParentScreen.SetEnableOfToolbarButton(ProductionPlanningConst.CompleteProductionPlanning, false);
            }
            if (receipt.ARProductionPlanningStatus == ProductionPlanningStatus.Complete.ToString())
            {
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonCancelComplete, true);
            }
            if (Toolbar.IsEditAction())
            {
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, true);
            }
            EnableControls();
        }

        /// <summary>
        /// Delete an item from the item list
        /// </summary>
        public void DeleteItemFromProductionPlanningItemList()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                ProductionPlanningEntities entity = (ProductionPlanningEntities)CurrentModuleEntity;
                entity.ProductionPlanningItemList.RemoveSelectedRowObjectFromList();
            }

        }

        public void ActionNewFromProductionPlanning()
        {
            ActionNew();
            ProductionPlanningEntities entity = (ProductionPlanningEntities)CurrentModuleEntity;
            ARProductionPlanningsInfo objProductionPlanningsInfo = (ARProductionPlanningsInfo)CurrentModuleEntity.MainObject;
            MMProductionNormsController objProductionNormsController = new MMProductionNormsController();
            ARSaleOrderItemsController objSaleOrderItemsController = new ARSaleOrderItemsController();

            List<ARProductionPlanningsInfo> ListProductionPlanning = new List<ARProductionPlanningsInfo>();
            ARProductionPlanningItemsInfo objSaleOrderItemsInfo = new ARProductionPlanningItemsInfo();
            ARSaleOrdersInfo objSaleOrdersInfo = new ARSaleOrdersInfo();
            ICProductsController objProductsController = new ICProductsController();
            ARProductionPlanningsController objProductionPlanningsController = new ARProductionPlanningsController();
            ARProductionPlanningItemsController objProductionPlanningItemsController = new ARProductionPlanningItemsController();
            ListProductionPlanning = objProductionPlanningsController.GetProductionPlanningByStatus(ProductionPlanningStatus.Complete.ToString());

            if (ListProductionPlanning != null && ListProductionPlanning.Count > 0)
            {
                guiFind<ARProductionPlanningsInfo> guiFind = new guiFind<ARProductionPlanningsInfo>(TableName.ARProductionPlanningsTableName,
                                                                                                   ListProductionPlanning,
                                                                                                   this,
                                                                                                   false,
                                                                                                   true);
                guiFind.ShowDialog();
                if (guiFind.DialogResult == DialogResult.OK)
                {
                    BOSUtil.CopyObject(guiFind.SelectedObjects[0], objProductionPlanningsInfo);
                    objProductionPlanningsInfo.ARProductionPlanningID = 0;
                    objProductionPlanningsInfo.ARProductionPlanningNo = ProductionPlanningEntities.cstNewObjectText;
                    objProductionPlanningsInfo.FK_HREmployeeID = BOSApp.CurrentUsersInfo.FK_HREmployeeID;
                    objProductionPlanningsInfo.ARProductionPlanningStatus = ProductionPlanningStatus.New.ToString();

                    DisplayLabelText(objProductionPlanningsInfo);

                    List<ARProductionPlanningItemsInfo> ListProductionPlanningItem = objProductionPlanningItemsController.GetProductionPlanningItemRemainByParent(guiFind.SelectedObjects[0].ARProductionPlanningID);
                    if (ListProductionPlanningItem != null && ListProductionPlanningItem.Count > 0)
                    {
                        int count = ListProductionPlanningItem.Count();
                        foreach (ARProductionPlanningItemsInfo item in ListProductionPlanningItem)
                        {

                            ARProductionPlanningItemsInfo objProductionPlanningItemsInfo = new ARProductionPlanningItemsInfo();
                            BOSUtil.CopyObject(item, objProductionPlanningItemsInfo);
                            objProductionPlanningItemsInfo.ARProductionPlanningItemID = 0;
                            if (item.FK_ICProductID > 0)
                            {
                                ICProductsInfo objProductsInfo = new ICProductsInfo();
                                //To get block per one
                                List<MMProductionNormsInfo> ProductionNormList = objProductionNormsController.GetProductionNormByProductID(item.FK_ICProductID);
                                objProductionPlanningItemsInfo.FK_ICProductID = item.FK_ICProductID;
                                // For reset attribute of product
                                objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);
                                if (objProductsInfo != null)
                                {
                                    objProductionPlanningItemsInfo.ARProductionPlanningItemHeight = objProductsInfo.ICProductHeight;
                                    objProductionPlanningItemsInfo.ARProductionPlanningItemWidth = objProductsInfo.ICProductWidth;
                                    objProductionPlanningItemsInfo.ARProductionPlanningItemLength = objProductsInfo.ICProductLength;
                                    objProductionPlanningItemsInfo.ARProductionPlanningItemProductNo = objProductsInfo.ICProductNoOfOldSys;
                                    objProductionPlanningItemsInfo.ARProductionPlanningItemProductRemark = objProductsInfo.ICProductProductionComment;
                                    objProductionPlanningItemsInfo.ARProductionPlanningItemWoodQty = objProductsInfo.ICProductBlock * item.ARProductionPlanningItemProductQty;
                                    if (ProductionNormList != null && ProductionNormList.Count > 0 && objProductionPlanningItemsInfo.ARProductionPlanningItemWoodQty == 0)
                                    {
                                        objProductionPlanningItemsInfo.ARProductionPlanningItemWoodQty = Math.Round(ProductionNormList[0].MMProductionNormBlockPerOne * item.ARProductionPlanningItemProductQty, 4);
                                    }
                                    decimal UnitVolume = Math.Round((objProductionPlanningItemsInfo.ARProductionPlanningItemHeight * objProductionPlanningItemsInfo.ARProductionPlanningItemWidth * objProductionPlanningItemsInfo.ARProductionPlanningItemLength) / (decimal)Math.Pow(10, 9), 4);
                                    objProductionPlanningItemsInfo.ARProductionPlanningItemProductCBM = UnitVolume * objProductionPlanningItemsInfo.ARProductionPlanningItemProductQty;
                                }

                            }
                            entity.SetProductPriceByProductUnitPrice(objProductionPlanningItemsInfo);
                            if (!entity.ProductionPlanningItemList.Exists(x => x.FK_ARSaleOrderItemID == objProductionPlanningItemsInfo.FK_ARSaleOrderItemID))
                                entity.ProductionPlanningItemList.Add(objProductionPlanningItemsInfo);

                        }
                        entity.ProductionPlanningItemList.GridControl?.RefreshDataSource();
                        objProductionPlanningsInfo.ARProductionPlanningCBM = entity.ProductionPlanningItemList.Sum(x => x.ARProductionPlanningItemProductCBM);
                        objProductionPlanningsInfo.ARProductionPlanningTotalAmount = entity.ProductionPlanningItemList.Sum(x => x.ARProductionPlanningItemTotalAmount);
                    }
                }
                else
                    ActionCancel();
            }
        }

        public override void ActionNew()
        {
            OnOffBtnChosePI(false);
            base.ActionNew();

            ARProductionPlanningsInfo mainobject = (ARProductionPlanningsInfo)CurrentModuleEntity.MainObject;
            mainobject.ARProductionPlanningSources = ProductionPlanningSources.Process.ToString();
            CurrentModuleEntity.UpdateMainObjectBindingSource();
            if (ProductionPlanningDescEditControl != null)
            {
                ProductionPlanningDescEditControl.Text = String.Empty;
            }
        }
        // Tạo mới từ đơn bán hàng
        public void ActionNewFromSaleOrder()
        {
            ActionNew();
            IsEditAfterCompleting = false;
            if (SaleOrderNameControl != null)
                SaleOrderNameControl.ReadOnly = true;
            OnOffBtnChosePI(true);
        }

        public void ActionNewFromNormal()
        {
            ActionNew();
            if (SaleOrderNameControl != null)
                SaleOrderNameControl.ReadOnly = false;
        }

        public void AddItemToProductionPlanning()
        {
            ProductionPlanningEntities entity = (ProductionPlanningEntities)CurrentModuleEntity;
            ARProductionPlanningsInfo mainobject = (ARProductionPlanningsInfo)CurrentModuleEntity.MainObject;

            ARProductionPlanningItemsInfo moduleobject = (ARProductionPlanningItemsInfo)entity.ModuleObjects[TableName.ARProductionPlanningItemsTablename];
            if (moduleobject == null)
                return;

            ARProductionPlanningItemsInfo item = new ARProductionPlanningItemsInfo();
            ICProductsForViewInfo objProductsInfo = BOSApp.CurrentProductList.Where(o => o.ICProductID == moduleobject.FK_ICProductID).FirstOrDefault();
            if (objProductsInfo == null)
                objProductsInfo = new ICProductsForViewInfo();
            if (objProductsInfo.HasComponent)
            {
                ICProductComponentsController objProductComponentsController = new ICProductComponentsController();
                List<ICProductComponentsInfo> listComponents = objProductComponentsController.GetProductComponentListByProductID(objProductsInfo.ICProductID);
                foreach (ICProductComponentsInfo objProductComponentsInfo in listComponents)
                {
                    item = new ARProductionPlanningItemsInfo();
                    item.FK_ICProductID = objProductComponentsInfo.FK_ICProductComponentChildID;
                    objProductsInfo = BOSApp.CurrentProductList.Where(o => o.ICProductID == item.FK_ICProductID).FirstOrDefault();
                    BOSUtil.CopyObject(objProductsInfo, item);
                    item.ARProductionPlanningItemProductQty = 1;
                    item.FK_ICProductID = objProductsInfo.ICProductID;
                    item.FK_ICMeasureUnitID = objProductsInfo.FK_ICProductBasicUnitID;
                    item.ARProductionPlanningItemProductNo = objProductsInfo.ICProductNo;
                    item.ARProductionPlanningItemProductName = objProductsInfo.ICProductName;
                    item.ARProductionPlanningItemProductDesc = objProductsInfo.ICProductDesc;
                    item.ARProductionPlanningItemHeight = objProductsInfo.ICProductHeight;
                    item.ARProductionPlanningItemWidth = objProductsInfo.ICProductWidth;
                    item.ARProductionPlanningItemLength = objProductsInfo.ICProductLength;
                    item.ARProductionPlanningItemProductRemark = objProductsInfo.ICProductProductionComment;
                    item.ARProductionPlanningItemProductCustomerNumber = objProductsInfo.ICProductCustomerNumber;
                    item.ARProductionPlanningItemDeliveryDate = mainobject.ARProductionPlanningToDate;
                    item.ARProductionPlanningItemOSSDeliveryDate = mainobject.ARProductionPlanningToDate;
                    item.ARProductionPlanningItemSources = mainobject.ARProductionPlanningSources;
                    item.ARProductionPlanningItemSaleOrderName = mainobject.ARProductionPlanningSaleOrderName;
                    entity.ProductionPlanningItemList.Add(item);
                }
            }
            else
            {
                BOSUtil.CopyObject(objProductsInfo, item);
                item.ARProductionPlanningItemProductQty = 1;
                item.FK_ICProductID = objProductsInfo.ICProductID;
                item.FK_ICMeasureUnitID = objProductsInfo.FK_ICProductBasicUnitID;
                item.ARProductionPlanningItemProductNo = objProductsInfo.ICProductNo;
                item.ARProductionPlanningItemProductName = objProductsInfo.ICProductName;
                item.ARProductionPlanningItemProductDesc = objProductsInfo.ICProductDesc;
                item.ARProductionPlanningItemHeight = objProductsInfo.ICProductHeight;
                item.ARProductionPlanningItemWidth = objProductsInfo.ICProductWidth;
                item.ARProductionPlanningItemLength = objProductsInfo.ICProductLength;
                item.ARProductionPlanningItemProductRemark = objProductsInfo.ICProductProductionComment;
                item.ARProductionPlanningItemProductCustomerNumber = objProductsInfo.ICProductCustomerNumber;
                item.ARProductionPlanningItemDeliveryDate = mainobject.ARProductionPlanningToDate;
                item.ARProductionPlanningItemOSSDeliveryDate = mainobject.ARProductionPlanningToDate;
                item.ARProductionPlanningItemSources = mainobject.ARProductionPlanningSources;
                item.ARProductionPlanningItemSaleOrderName = mainobject.ARProductionPlanningSaleOrderName;
                entity.ProductionPlanningItemList.Add(item);
            }
            entity.ProductionPlanningItemList.GridControl?.RefreshDataSource();
        }

        public void OnOffBtnChosePI(bool isEnable)
        {
            BOSButton btnChosePi = (BOSButton)GetControlByName("fld_btnChosePi");
            if (btnChosePi != null)
                btnChosePi.Enabled = isEnable;
        }

        public void ActionEditAfterCompleting()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                IsEditAfterCompleting = true;
                base.ActionEdit();
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonSave, true);
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, false);
            }
        }

        public void ActionClosed()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                ProductionPlanningEntities entity = (ProductionPlanningEntities)CurrentModuleEntity;
                ARProductionPlanningsInfo objProductionPlanningsInfo = (ARProductionPlanningsInfo)CurrentModuleEntity.MainObject;
                ARProductionPlanningsController objProductionPlanningsController = new ARProductionPlanningsController();
                if (MessageBox.Show("Bạn có chắc chắn muốn đóng Kế hoạch sản xuất?",
                    CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    objProductionPlanningsInfo.ARProductionPlanningStatus = "Closed";
                    objProductionPlanningsController.UpdateObject(objProductionPlanningsInfo);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonSave, false);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, false);
                    ParentScreen.SetEnableOfToolbarButton(ToolbarButtonEditAfterCompleting, false);
                    ParentScreen.SetEnableOfToolbarButton("Closed", false);
                    entity.UpdateMainObjectBindingSource();
                }
            }
        }

        public bool ValidateLoadContQty(ARProductionPlanningItemsInfo PlanItem, bool isDelete)
        {
            bool result = true;
            ProductionPlanningEntities entity = (ProductionPlanningEntities)CurrentModuleEntity;
            ARContainerLoaderItemsController objContainerLoaderItemsController = new ARContainerLoaderItemsController();

            string strListID = string.Join(",", entity.ProductionPlanningItemList.Where(p => p.ARProductionPlanningItemID > 0)
                                                .Select(x => x.ARProductionPlanningItemID.ToString()).Distinct().ToArray());
            List<ARContainerLoaderItemsInfo> listContLoaded = new List<ARContainerLoaderItemsInfo>();
            if (strListID != null)
            {
                listContLoaded = objContainerLoaderItemsController.GetContainerLoaderItemsByListPlanning(strListID);
            }
            if (listContLoaded != null && listContLoaded.Count > 0)
            {
                string mess = string.Empty;
                foreach (ARProductionPlanningItemsInfo item in entity.ProductionPlanningItemList)
                {
                    if ((item.ARProductionPlanningItemID > 0 && PlanItem == null)
                        || (item.ARProductionPlanningItemID > 0 && PlanItem != null && item.ARProductionPlanningItemID == PlanItem.ARProductionPlanningItemID))
                    {
                        decimal loadContQty = listContLoaded.Where(l => l.FK_ARProductionPlanningItemID == item.ARProductionPlanningItemID).Sum(l => l.ARContainerLoaderItemProductQty - l.ARContainerLoaderItemCanceledQty);


                        if ((!isDelete && item.ARProductionPlanningItemProductBasicQty < loadContQty) || (isDelete && loadContQty > 0))
                        {
                            item.IsError = true;
                            mess += Environment.NewLine + item.ARProductionPlanningItemProductNo + ": SL load hàng = " + loadContQty
                                 + Environment.NewLine + string.Join(",", listContLoaded.Where(l => l.FK_ARProductionPlanningItemID == item.ARProductionPlanningItemID)
                                .Select(l => l.ARContainerLoaderNo).Distinct().ToArray());
                            result = false;
                        }

                    }
                }
                if (mess != string.Empty)
                {
                    MessageBox.Show((isDelete ? "Không thể xóa chi tiết đã load hàng " : "Số lượng thay đổi nhỏ hơn SL đã load hàng ")
                         + mess
                         , CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            return result;
        }

        public bool ValidateBatchProductQty(ARProductionPlanningItemsInfo PlanItem, bool isDelete)
        {
            bool result = true;
            ProductionPlanningEntities entity = (ProductionPlanningEntities)CurrentModuleEntity;
            MMBatchProductItemsController objBatchProductItemsController = new MMBatchProductItemsController();

            string strListID = string.Join(",", entity.ProductionPlanningItemList.Where(p => p.ARProductionPlanningItemID > 0)
                                                .Select(x => x.ARProductionPlanningItemID.ToString()).Distinct().ToArray());
            List<MMBatchProductItemsInfo> listContLoaded = new List<MMBatchProductItemsInfo>();
            if (strListID != null)
            {
                listContLoaded = objBatchProductItemsController.GetBatchProductItemsByListPlanning(strListID);
            }
            if (listContLoaded != null && listContLoaded.Count > 0)
            {
                string mess = string.Empty;
                foreach (ARProductionPlanningItemsInfo item in entity.ProductionPlanningItemList)
                {
                    if ((item.ARProductionPlanningItemID > 0 && PlanItem == null)
                        || (item.ARProductionPlanningItemID > 0 && PlanItem != null && item.ARProductionPlanningItemID == PlanItem.ARProductionPlanningItemID))
                    {
                        decimal loadContQty = listContLoaded.Where(l => l.FK_ARProductionPlanningItemID == item.ARProductionPlanningItemID).Sum(l => l.MMBatchProductItemProductQty);


                        if ((!isDelete && item.ARProductionPlanningItemProductQty < loadContQty) || (isDelete && loadContQty > 0))
                        {
                            item.IsError = true;
                            mess += Environment.NewLine + string.Join(",", listContLoaded.Where(l => l.FK_ARProductionPlanningItemID == item.ARProductionPlanningItemID)
                                .Select(l => l.MMBatchProductNo).Distinct().ToArray());
                            result = false;
                        }
                    }
                }
                if (mess != string.Empty)
                {
                    MessageBox.Show((isDelete ? "Không thể xóa chi tiết đã làm SL lệnh SX " : "Số lượng thay đổi nhỏ hơn SL lệnh SX ") + mess
                         , CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            return result;
        }

        public void UpdatePlanningName()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                ProductionPlanningEntities entity = (ProductionPlanningEntities)CurrentModuleEntity;
                ARProductionPlanningsInfo objProductionPlanningsInfo = (ARProductionPlanningsInfo)CurrentModuleEntity.MainObject;
                objProductionPlanningsInfo.ARProductionPlanningName = entity.DefinePlanningName(objProductionPlanningsInfo.ARProductionPlanningFromDate, objProductionPlanningsInfo.ARProductionPlanningToDate);
                entity.UpdateMainObjectBindingSource();
            }
        }

        public void ShownSaleOrder()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                // ActionNew();
                ProductionPlanningEntities entity = (ProductionPlanningEntities)CurrentModuleEntity;
                ARProductionPlanningsInfo objProductionPlanningsInfo = (ARProductionPlanningsInfo)CurrentModuleEntity.MainObject;
                MMProductionNormsController objProductionNormsController = new MMProductionNormsController();
                ARSaleOrderItemsController objSaleOrderItemsController = new ARSaleOrderItemsController();
                List<ARSaleOrderItemsInfo> ListSaleOrderItem = new List<ARSaleOrderItemsInfo>();
                ARSaleOrderItemsInfo objSaleOrderItemsInfo = new ARSaleOrderItemsInfo();
                ARSaleOrdersInfo objSaleOrdersInfo = new ARSaleOrdersInfo();
                ICProductsController objProductsController = new ICProductsController();
                ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
                ListSaleOrderItem = objSaleOrderItemsController.GetListItemForProductionPlanning(objProductionPlanningsInfo.ARProductionPlanningFromDate.Date
                                                                                                , objProductionPlanningsInfo.ARProductionPlanningToDate.Date
                                                                                                , BOSApp.CurrentUsersInfo.ADUserID
                                                                                                , ModuleName.SaleOrder
                                                                                                , ADDataViewPermissionType.Module
                                                                                                , BOSApp.CurrentCompanyInfo.FK_BRBranchID);
                IsEditAfterCompleting = false;
                if (ListSaleOrderItem != null && ListSaleOrderItem.Count > 0)
                {

                    using (guiChooseARSaleOrderItem guiFind = new guiChooseARSaleOrderItem(ListSaleOrderItem))
                    {
                        guiFind.Module = this;
                        guiFind.ShowDialog();
                        if (guiFind.DialogResult == DialogResult.OK)
                        {
                            var table = ADConfigValueUtility.ConfigValues.Tables["OSSDeliveryDate"];

                            List<ARSaleOrderItemsInfo> selectedARSaleOrderItems = guiFind.SelectedObjects;
                            if (selectedARSaleOrderItems != null && selectedARSaleOrderItems.Count > 0)
                            {
                                List<MMProductionNormsInfo> ProductionNormList = new List<MMProductionNormsInfo>();
                                List<string> listProID = selectedARSaleOrderItems.Where(p => p.FK_ICProductID > 0).Select(o => o.FK_ICProductID.ToString()).Distinct().ToList();
                                if (listProID != null)
                                    ProductionNormList = objProductionNormsController.GetProductionNormByListID(string.Join(",", listProID.ToArray()));

                                foreach (ARSaleOrderItemsInfo item in selectedARSaleOrderItems)
                                {
                                    ARProductionPlanningItemsInfo objProductionPlanningItemsInfo = new ARProductionPlanningItemsInfo();
                                    BOSUtil.CopyObject(item, objProductionPlanningItemsInfo);
                                    objProductionPlanningItemsInfo.ARProductionPlanningItemProductQty = item.ARSaleOrderItemRemainedQty;
                                    objProductionPlanningItemsInfo.ARProductionPlanningItemProductBasicQty = item.ARSaleOrderItemRemainedQty;
                                    objProductionPlanningItemsInfo.ARProductionPlanningItemProductQtyOld = item.ARSaleOrderItemProductQty;
                                    objProductionPlanningItemsInfo.ARProductionPlanningItemProductDesc = item.ARSaleOrderItemProductDesc;
                                    objProductionPlanningItemsInfo.ARProductionPlanningItemProductName = item.ARSaleOrderItemProductName;
                                    objProductionPlanningItemsInfo.FK_ICDepartmentID = item.FK_ICDepartmentID;
                                    objProductionPlanningItemsInfo.FK_ICMeasureUnitID = item.FK_ICMeasureUnitID;
                                    objProductionPlanningItemsInfo.FK_ICProductGroupID = item.FK_ICProductGroupID;
                                    objProductionPlanningItemsInfo.FK_ARSaleOrderID = item.FK_ARSaleOrderID;
                                    objProductionPlanningItemsInfo.FK_ARCustomerID = item.FK_ARCustomerID;
                                    objProductionPlanningItemsInfo.FK_ACObjectID = item.FK_ACObjectID;
                                    objProductionPlanningItemsInfo.ARObjectType = item.ARObjectType;
                                    objProductionPlanningItemsInfo.FK_PMProjectID = item.FK_PMProjectID;
                                    objProductionPlanningItemsInfo.FK_ARSaleOrderItemID = item.ARSaleOrderItemID;
                                    objProductionPlanningItemsInfo.ARProductionPlanningItemProductionPriority = item.ARSaleOrderItemProductionPriority;
                                    objProductionPlanningItemsInfo.ARProductionPlanningItemStatus = ProductionPlanningItemStatus.New.ToString();
                                    objProductionPlanningItemsInfo.ARProductionPlanningItemOSSDeliveryDate = item.ARSaleOrderItemDeliveryDate;
                                    objProductionPlanningItemsInfo.ARProductionPlanningItemPONo = item.ARSaleOrderItemPONo;
                                    objProductionPlanningItemsInfo.ARProductionPlanningItemSaleOrderName = item.ARSaleOrderName;
                                    if (table != null)
                                    {
                                        var result = table.Rows.Cast<DataRow>().Select(x => x["Value"]).FirstOrDefault();
                                        if (result != null)
                                        {
                                            if (!bool.Parse(result.ToString()))
                                                objProductionPlanningItemsInfo.ARProductionPlanningItemOSSDeliveryDate = GetServerDate();
                                        }
                                    }
                                    objProductionPlanningItemsInfo.ARProductionPlanningItemSaleOrderNo = item.ARSaleOrderNo;
                                    objProductionPlanningItemsInfo.ARProductionPlanningItemSources = !string.IsNullOrEmpty(objProductionPlanningsInfo.ARProductionPlanningSources) ? objProductionPlanningsInfo.ARProductionPlanningSources : ProductionPlanningItemSources.Process.ToString();
                                    if (item.FK_ICProductID > 0)
                                    {
                                        objProductionPlanningItemsInfo.FK_ICProductID = item.FK_ICProductID;
                                        // For reset attribute of product
                                        ICProductsInfo objProductsInfo = BOSApp.GetProductFromCurrentProductList(item.FK_ICProductID);
                                        if (objProductsInfo != null)
                                        {
                                            objProductionPlanningItemsInfo.ARProductionPlanningItemHeight = objProductsInfo.ICProductHeight;
                                            objProductionPlanningItemsInfo.ARProductionPlanningItemWidth = objProductsInfo.ICProductWidth;
                                            objProductionPlanningItemsInfo.ARProductionPlanningItemLength = objProductsInfo.ICProductLength;
                                            objProductionPlanningItemsInfo.ARProductionPlanningItemProductNo = objProductsInfo.ICProductNoOfOldSys;
                                            objProductionPlanningItemsInfo.ARProductionPlanningItemProductRemark = objProductsInfo.ICProductProductionComment;
                                            objProductionPlanningItemsInfo.ARProductionPlanningItemWoodQty = objProductsInfo.ICProductBlock * item.ARSaleOrderItemProductQty;
                                            if (ProductionNormList != null && ProductionNormList.Count > 0 && objProductionPlanningItemsInfo.ARProductionPlanningItemWoodQty == 0)
                                            {
                                                //To get block per one
                                                MMProductionNormsInfo NormList = ProductionNormList.Where(o => o.FK_ICProductID == item.FK_ICProductID).FirstOrDefault();
                                                if (NormList != null)
                                                    objProductionPlanningItemsInfo.ARProductionPlanningItemWoodQty = Math.Round(ProductionNormList[0].MMProductionNormBlock * item.ARSaleOrderItemProductQty, 4);
                                            }
                                            decimal UnitVolume = Math.Round((objProductionPlanningItemsInfo.ARProductionPlanningItemHeight * objProductionPlanningItemsInfo.ARProductionPlanningItemWidth
                                                * objProductionPlanningItemsInfo.ARProductionPlanningItemLength) / (decimal)Math.Pow(10, 9), 4);
                                            objProductionPlanningItemsInfo.ARProductionPlanningItemProductCBM = UnitVolume * objProductionPlanningItemsInfo.ARProductionPlanningItemProductBasicQty;
                                        }

                                    }
                                    entity.SetProductPriceByProductUnitPrice(objProductionPlanningItemsInfo);
                                    if (!entity.ProductionPlanningItemList.Exists(x => x.FK_ARSaleOrderItemID == objProductionPlanningItemsInfo.FK_ARSaleOrderItemID && x.FK_ICProductID == objProductionPlanningItemsInfo.FK_ICProductID))
                                        entity.ProductionPlanningItemList.Add(objProductionPlanningItemsInfo);

                                }
                                entity.ProductionPlanningItemList.GridControl?.RefreshDataSource();
                                objProductionPlanningsInfo.ARProductionPlanningType = selectedARSaleOrderItems.FirstOrDefault()?.ARSaleOrderType;
                                objProductionPlanningsInfo.ARProductionPlanningCBM = entity.ProductionPlanningItemList.Sum(x => x.ARProductionPlanningItemProductCBM);
                                objProductionPlanningsInfo.ARProductionPlanningTotalAmount = entity.ProductionPlanningItemList.Sum(x => x.ARProductionPlanningItemTotalAmount);
                                //Tổng khối tinh
                                objProductionPlanningsInfo.ARProductionPlanningContQty = entity.ProductionPlanningItemList.Sum(x => x.ARProductionPlanningItemWoodQty);
                                //Tổng số cont
                                objProductionPlanningsInfo.ARProductionPlanningTotalBlock = entity.ProductionPlanningItemList.Sum(x => x.ARProductionPlanningItemLoadContNumber);

                                objSaleOrderItemsInfo = selectedARSaleOrderItems.FirstOrDefault(p => !string.IsNullOrWhiteSpace(p.ARSaleOrderType));
                                objProductionPlanningsInfo.ARProductionPlanningType = objSaleOrderItemsInfo != null ? objSaleOrderItemsInfo.ARSaleOrderType : objProductionPlanningsInfo.ARProductionPlanningType;
                                objSaleOrderItemsInfo = selectedARSaleOrderItems.FirstOrDefault(p => p.FK_SaleOrderProductAttributeTTMTID != 0);
                                objProductionPlanningsInfo.FK_ICProductAttributeTTMTID = objSaleOrderItemsInfo != null ? objSaleOrderItemsInfo.FK_SaleOrderProductAttributeTTMTID : objProductionPlanningsInfo.FK_ICProductAttributeTTMTID;
                                objSaleOrderItemsInfo = selectedARSaleOrderItems.FirstOrDefault(p => !string.IsNullOrWhiteSpace(p.ARSaleOrderSaleType));
                                objProductionPlanningsInfo.ARProductionPlanningSaleType = objSaleOrderItemsInfo != null ? objSaleOrderItemsInfo.ARSaleOrderSaleType : objProductionPlanningsInfo.ARProductionPlanningSaleType;
                                objProductionPlanningsInfo.ARProductionPlanningSaleOrderName = string.Join(", ", selectedARSaleOrderItems.Where(p => !string.IsNullOrWhiteSpace(p.ARSaleOrderName)).Select(p => p.ARSaleOrderName).Distinct().ToArray());
                                DisplayLabelText(objProductionPlanningsInfo);
                                ChangeSaleType();
                            }
                        }
                    }
                }
                else
                {
                    MessageBox.Show(ProductionPlanningLocalizedResources.ThereAreNoSalesOrdersWithinThisDeliveryPeriod
                                    , CommonLocalizedResources.MessageBoxDefaultCaption
                                    , MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }

        public override int ActionSave()
        {
            ProductionPlanningEntities entity = (ProductionPlanningEntities)CurrentModuleEntity;
            ARProductionPlanningsInfo objProductionPlanningsInfo = (ARProductionPlanningsInfo)CurrentModuleEntity.MainObject;
            entity.ProductionPlanningItemList.EndCurrentEdit();
            if (!CheckValidate())
            {
                return 0;
            }
            if (ProductionPlanningDescEditControl != null)
            {
                objProductionPlanningsInfo.ARProductionPlanningDesc = ProductionPlanningDescEditControl.OpenXmlBytes;
            }
            //if (!ValidadteProductPlainningQty())
            //{
            //    return 0;
            //}
            if (IsEditAfterCompleting)
            {
                if (!ValidateLoadContQty(null, false)) return 0;
                if (!ValidateBatchProductQty(null, false)) return 0;
            }
            string errorMessageStr = string.Empty;
            entity.ProductionPlanningItemList
                .Where(o => o.FK_ARSaleOrderItemID != 0)
                ?.ToList()
                .ForEach(p =>
                {
                    ARSaleOrderItemsInfo objSaleOrderItemsInfo = (new ARSaleOrderItemsController()).GetObjectForCheckValidQuantyInProductionPlanning(p.FK_ARSaleOrderItemID, p.ARProductionPlanningItemID, p.FK_ICProductID);
                    if (objSaleOrderItemsInfo != null
                        && p.ARProductionPlanningItemProductBasicQty > objSaleOrderItemsInfo.ARSaleOrderItemProductQty)
                    {
                        errorMessageStr += Environment.NewLine + string.Format("- {0} {1}: SL ĐBH đã kế hoạch tối đa {2}"
                        , p.ARProductionPlanningItemProductNo
                        , p.ARProductionPlanningItemProductName
                        , objSaleOrderItemsInfo.ARSaleOrderItemProductQty.ToString("n2"));
                    }
                });
            if (!string.IsNullOrEmpty(errorMessageStr))
            {
                MessageBox.Show("Các sản phẩm sau đây có SL ĐBH đã kế hoạch vượt quá SL ĐBH:" + errorMessageStr
                    , CommonLocalizedResources.MessageBoxDefaultCaption
                    , MessageBoxButtons.OK
                    , MessageBoxIcon.Warning);
                return 0;
            }
            int ProductionPlanningID = base.ActionSave();
            IsEditAfterCompleting = false;
            return ProductionPlanningID;
        }

        public bool CheckValidate()
        {
            bool result = true;
            ProductionPlanningEntities entity = (ProductionPlanningEntities)CurrentModuleEntity;
            ARProductionPlanningsInfo objProductionPlanningsInfo = (ARProductionPlanningsInfo)CurrentModuleEntity.MainObject;
            if (string.IsNullOrEmpty(objProductionPlanningsInfo.ARProductionPlanningName.Trim()))
            {
                MessageBox.Show(ProductionPlanningLocalizedResources.ARProductionPlanningNameIsNullOrEmpty, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                result = false;
            }
            //else if (objProductionPlanningsInfo.FK_MMWorkShopID == 0)
            //{
            //    MessageBox.Show(ProductionPlanningLocalizedResources.MMWorkShopIDIsNullOrEmpty, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            //    result = false;
            //}

            else if (entity.ProductionPlanningItemList.Any(o => string.IsNullOrWhiteSpace(o.ARProductionPlanningItemSources)))
            {
                MessageBox.Show(ProductionPlanningLocalizedResources.CheckSource, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                result = false;
            }
            return result;
        }
        public bool ValidadteProductPlainningQty()
        {
            bool result = true;
            ARSaleOrderItemsController objSaleOrderItemsController = new ARSaleOrderItemsController();
            ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
            ICProductsController objProductsController = new ICProductsController();
            ProductionPlanningEntities entity = (ProductionPlanningEntities)CurrentModuleEntity;
            ARProductionPlanningsInfo objProductionPlanningsInfo = (ARProductionPlanningsInfo)CurrentModuleEntity.MainObject;
            string mess = "Tổng số lượng lớn hơn số lượng còn lại của đơn bán hàng";
            List<ARSaleOrderItemsInfo> SaleOrderItemList = new List<ARSaleOrderItemsInfo>();
            string strListID = string.Join(",", entity.ProductionPlanningItemList.Where(p => p.FK_ARSaleOrderItemID > 0)
                                                .Select(x => x.FK_ARSaleOrderItemID.ToString()).Distinct().ToArray());
            if (strListID != null && strListID != string.Empty)
            {
                SaleOrderItemList = objSaleOrderItemsController.GetRemainQtyBySOItemListAndProductionPlanningID(objProductionPlanningsInfo.ARProductionPlanningID, strListID);
            }
            foreach (ARProductionPlanningItemsInfo item in entity.ProductionPlanningItemList)
            {
                decimal Qty = entity.ProductionPlanningItemList.Where(x => x.FK_ARSaleOrderItemID == item.FK_ARSaleOrderItemID).Sum(y => y.ARProductionPlanningItemProductBasicQty);
                decimal remainQty = item.ARProductionPlanningItemProductBasicQty;

                List<ARSaleOrderItemsInfo> soCheckItemList = SaleOrderItemList.Where(o => o.ARSaleOrderItemID == item.FK_ARSaleOrderItemID).ToList();
                if (soCheckItemList != null && soCheckItemList.Count > 0)
                {
                    remainQty = soCheckItemList.Sum(x => x.ARSaleOrderItemProductQty
                                                       - x.ARSaleOrderItemCanceledQty
                                                       - x.ARProductionPlanningItemProductBasicQty
                                               );
                }
                if (Qty > remainQty)
                {
                    item.IsError = true;
                    result = false;

                }
            }
            if (!result)
                MessageBox.Show(mess, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            return result;
        }

        public bool ValidadteProductPlainningQty(ARProductionPlanningItemsInfo item)
        {
            bool result = true;
            ARSaleOrderItemsController objSaleOrderItemsController = new ARSaleOrderItemsController();
            ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
            ICProductsController objProductsController = new ICProductsController();
            ProductionPlanningEntities entity = (ProductionPlanningEntities)CurrentModuleEntity;
            decimal Qty = entity.ProductionPlanningItemList.Where(x => x.FK_ARSaleOrderItemID == item.FK_ARSaleOrderItemID && x.FK_ICProductID == item.FK_ICProductID).Sum(y => y.ARProductionPlanningItemProductBasicQty);
            decimal remainQty = item.ARProductionPlanningItemProductBasicQty;
            string mess = string.Empty;
            List<ARSaleOrderItemsInfo> SaleOrderItemList = objSaleOrderItemsController.GetRemainQtyBySOItemListAndProductionPlanningID(item.FK_ARProductionPlanningID, item.FK_ARSaleOrderItemID.ToString());
            if (SaleOrderItemList != null && SaleOrderItemList.Count > 0)
            {
                remainQty = SaleOrderItemList.Where(o => o.FK_ICProductID == item.FK_ICProductID).Sum(x => x.ARSaleOrderItemProductQty
                                                                                                    - x.ARSaleOrderItemCanceledQty
                                                                                                    - x.ARProductionPlanningItemProductBasicQty);
            }
            if (Qty > remainQty)
            {
                result = false;
                entity.ProductionPlanningItemList.ForEach(o =>
                {
                    if (o.FK_ARSaleOrderItemID > 0 && o.FK_ARSaleOrderItemID == item.FK_ARSaleOrderItemID)
                    {
                        o.IsError = true;
                        mess = o.ARProductionPlanningItemProductNo + " Số lượng lớn hơn số lượng còn lại:"
                        + Environment.NewLine + "SL PI: " + SaleOrderItemList.Where(o1 => o1.FK_ICProductID == item.FK_ICProductID).Sum(x => x.ARSaleOrderItemProductQty)
                        + Environment.NewLine + "SL đã hủy: " + SaleOrderItemList.Where(o1 => o1.FK_ICProductID == item.FK_ICProductID).Sum(x => x.ARSaleOrderItemCanceledQty)
                        + Environment.NewLine + "SL đã KHGH: " + SaleOrderItemList.Where(o1 => o1.FK_ICProductID == item.FK_ICProductID).Sum(x => x.ARProductionPlanningItemProductBasicQty);

                    }
                });

            }
            if (mess != string.Empty)
            {
                MessageBox.Show(mess, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            return result;
        }
        public void ApproveProductionPlanning()
        {
            if (Toolbar.IsNullOrNoneAction())
            {
                ProductionPlanningEntities entity = (ProductionPlanningEntities)CurrentModuleEntity;
                entity.SetPropertyChangeEventLock(false);
                ARProductionPlanningsInfo objProductionPlanningsInfo = (ARProductionPlanningsInfo)CurrentModuleEntity.MainObject;
                ARProductionPlanningsController objProductionPlanningsController = new ARProductionPlanningsController();
                objProductionPlanningsInfo.ARProductionPlanningStatus = ProductionPlanningStatus.Complete.ToString();
                objProductionPlanningsInfo.ARProductionPlanningApprovedDate = GetServerDate();
                objProductionPlanningsInfo.FK_HREmployeeApprovedID = BOSApp.CurrentUsersInfo.FK_HREmployeeID;
                objProductionPlanningsController.UpdateObject(objProductionPlanningsInfo);
                entity.SetPropertyChangeEventLock(true);
                InvalidateToolbar();
            }
        }
        public void AddNewProductionPlanningItem(ARProductionPlanningItemsInfo objProductionPlanningItemsInfo, int index)
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                ProductionPlanningEntities entity = (ProductionPlanningEntities)CurrentModuleEntity;
                ARProductionPlanningsInfo mainObject = (ARProductionPlanningsInfo)CurrentModuleEntity.MainObject;
                objProductionPlanningItemsInfo.ARProductionPlanningItemID = 0;
                objProductionPlanningItemsInfo.ARProductionPlanningItemProposedQty = 0;
                objProductionPlanningItemsInfo.ARProductionPlanningItemShippedQty = 0;
                objProductionPlanningItemsInfo.ARProductionPlanningItemProductQty = 0;
                objProductionPlanningItemsInfo.ARProductionPlanningItemProductPakagingQty = 0;
                objProductionPlanningItemsInfo.ARProductionPlanningItemQuantityOfBox = 0;
                objProductionPlanningItemsInfo.ARProductionPlanningItemWoodQty = 0;
                objProductionPlanningItemsInfo.ARProductionPlanningItemProductSerial = string.Empty;
                objProductionPlanningItemsInfo.ARProductionPlanningItemStatus = "New";
                objProductionPlanningItemsInfo.ARProductionPlanningItemSources = mainObject.ARProductionPlanningSources;
                entity.ProductionPlanningItemList.Insert(index + 1, objProductionPlanningItemsInfo);
                entity.ProductionPlanningItemList.GridControl?.RefreshDataSource();
            }
        }
        public void ChangeQtyFromProductionPlanningItemList(ARProductionPlanningItemsInfo item)
        {
            ProductionPlanningEntities entity = (ProductionPlanningEntities)CurrentModuleEntity;
            ARProductionPlanningsInfo objProductionPlanningsInfo = (ARProductionPlanningsInfo)CurrentModuleEntity.MainObject;
            MMProductionNormsController objProductionNormsController = new MMProductionNormsController();
            ICProductsController objProductsController = new ICProductsController();
            ARProductionPlanningItemsController objProductionPlanningItemsController = new ARProductionPlanningItemsController();
            ICProductsInfo objProductsInfo = BOSApp.GetProductFromCurrentProductList(item.FK_ICProductID);
            if (objProductsInfo != null)
            {
                item.ARProductionPlanningItemHeight = objProductsInfo.ICProductHeight;
                item.ARProductionPlanningItemWidth = objProductsInfo.ICProductWidth;
                item.ARProductionPlanningItemLength = objProductsInfo.ICProductLength;
                item.ARProductionPlanningItemProductNo = objProductsInfo.ICProductNoOfOldSys;
                if (string.IsNullOrWhiteSpace(item.ARProductionPlanningItemProductRemark))
                    item.ARProductionPlanningItemProductRemark = objProductsInfo.ICProductProductionComment;
                item.ARProductionPlanningItemWoodQty = objProductsInfo.ICProductBlock * item.ARProductionPlanningItemProductQty;
                if (item.ARProductionPlanningItemWoodQty == 0)
                {
                    List<MMProductionNormsInfo> ProductionNormList = objProductionNormsController.GetProductionNormByProductID(item.FK_ICProductID);
                    if (ProductionNormList != null && ProductionNormList.Count > 0)
                    {
                        item.ARProductionPlanningItemWoodQty = Math.Round(ProductionNormList[0].MMProductionNormBlock * item.ARProductionPlanningItemProductBasicQty, 4);
                    }
                }
                decimal UnitVolume = Math.Round((item.ARProductionPlanningItemHeight * item.ARProductionPlanningItemWidth * item.ARProductionPlanningItemLength)
                    / (decimal)Math.Pow(10, 9), 4);
                item.ARProductionPlanningItemProductCBM = UnitVolume * item.ARProductionPlanningItemProductQty;
            }


            if (item.ARProductionPlanningItemProductUnitCost == 0)
                item.ARProductionPlanningItemProductUnitCost = item.ARProductionPlanningItemProductUnitPrice;
            entity.SetProductCostByProductUnitCost(item);
            objProductionPlanningsInfo.ARProductionPlanningCBM = entity.ProductionPlanningItemList.Sum(x => x.ARProductionPlanningItemProductCBM);
            objProductionPlanningsInfo.ARProductionPlanningTotalAmount = entity.ProductionPlanningItemList.Sum(x => x.ARProductionPlanningItemTotalAmount);
            //Tổng khối tinh
            objProductionPlanningsInfo.ARProductionPlanningContQty = entity.ProductionPlanningItemList.Sum(x => x.ARProductionPlanningItemWoodQty);
            //Tổng số cont
            objProductionPlanningsInfo.ARProductionPlanningTotalBlock = entity.ProductionPlanningItemList.Sum(x => x.ARProductionPlanningItemLoadContNumber);
        }

        public void ShowProductSpecific()
        {
            if (Toolbar.IsNullOrNoneAction())
            {
                guiMMProductionNormItems gui = new guiMMProductionNormItems();
                gui.Module = this;
                gui.ShowDialog();
            }
        }
        public void InitProductPictureImage(int productID)
        {
            if (productID > 0 && ProductPictureControl != null)
            {
                ProductPictureControl.Image = BOSApp.GetProductPictureImageByProductID(productID);
                ProductPictureControl.Properties.SizeMode = DevExpress.XtraEditors.Controls.PictureSizeMode.Zoom;
            }
        }

        public void CloseProductionPlanningItems()
        {
            if (!Toolbar.IsNullOrNoneAction())
                return;

            ProductionPlanningEntities entity = (ProductionPlanningEntities)CurrentModuleEntity;
            ARProductionPlanningsInfo mainobject = (ARProductionPlanningsInfo)CurrentModuleEntity.MainObject;

            DialogResult rs = MessageBox.Show("Bạn có muốn đóng kế hoạch cho các sản phẩm đã chọn không?", BaseLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (rs != DialogResult.Yes)
                return;

            if (entity.ProductionPlanningItemList.GridControl == null)
                return;

            ARProductionPlanningItemsController objProductionPlanningItemsController = new ARProductionPlanningItemsController();
            List<ARProductionPlanningItemsInfo> remainList = objProductionPlanningItemsController.GetItemForClosePlanByProductionPlanningID(mainobject.ARProductionPlanningID);
            ARProductionPlanningItemsInfo checkItemsInfo = new ARProductionPlanningItemsInfo();
            decimal producedQty = 0;
            if (entity.ProductionPlanningItemList.GridControl.MainView != null)
            {
                GridView gridView = (GridView)entity.ProductionPlanningItemList.GridControl.MainView;
                int[] rowSelected = gridView.GetSelectedRows();
                foreach (int i in rowSelected)
                {
                    ARProductionPlanningItemsInfo item = (ARProductionPlanningItemsInfo)gridView.GetRow(i);
                    if (item == null || i < 0)
                        continue;

                    checkItemsInfo = remainList.Where(o => o.ARProductionPlanningItemID == item.ARProductionPlanningItemID).FirstOrDefault();
                    producedQty = checkItemsInfo == null ? 0 : checkItemsInfo.ARProductionPlanningItemProducedQty;
                    if (producedQty > 0)
                    {
                        if (producedQty <= item.ARProductionPlanningItemProductQty)
                        {
                            item.ARProductionPlanningItemProductQty = producedQty;
                            item.ARProductionPlanningItemProductBasicQty = producedQty;
                        }
                        item.ARProductionPlanningItemStatus = ProductionPlanningItemStatus.Close.ToString();
                    }
                    else
                    {
                        item.ARProductionPlanningItemStatus = ProductionPlanningItemStatus.Canceled.ToString();
                        item.ARProductionPlanningItemProductQty = 0;
                    }
                    objProductionPlanningItemsController.UpdateObject(item);
                }
                gridView.ClearSelection();
            }
            entity.ProductionPlanningItemList.GridControl?.RefreshDataSource();
        }

        public override void ActionPrint()
        {
            if ((Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0))
            {
                RP_ProductionPlanning report = new RP_ProductionPlanning();
                InitInvoiceReport(report);
                guiReportPreview reviewer = new guiReportPreview(report, BOSCommon.Constants.Report.DevInvoiceItemReportPath, false);
                reviewer.Show();
            }
        }

        public void InitInvoiceReport(XtraReport report)
        {
            ProductionPlanningEntities entity = (ProductionPlanningEntities)CurrentModuleEntity;
            ARProductionPlanningsInfo mainobject = (ARProductionPlanningsInfo)CurrentModuleEntity.MainObject;
            ARProductionPlanningsController objProductionPlanningsController = new ARProductionPlanningsController();
            ARProductionPlanningItemsController objProductionPlanningItemsController = new ARProductionPlanningItemsController();
            ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
            List<ARProductionPlanningItemsInfo> productionPlanningItemList = objProductionPlanningItemsController.GetProductionPlanningItemListByProductionPlanningID(mainobject.ARProductionPlanningID);
            XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xrlblDate"];
            if (label != null)
            {
                label.Text = "Ngày " + mainobject.ARProductionPlanningDate.ToString("dd")
                             + " tháng " + mainobject.ARProductionPlanningDate.ToString("MM")
                             + " năm " + mainobject.ARProductionPlanningDate.ToString("yyyy");
            }
            if (BOSApp.CurrentCompanyInfo != null)
            {
                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblCSCompanyName"];
                if (label != null)
                {
                    label.Text = BOSApp.CurrentCompanyInfo.CSCompanyDesc;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblCSCompanyAddressLine3"];
                if (label != null)
                {
                    label.Text = BOSApp.CurrentCompanyInfo.CSCompanyAddressLine1;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblCSCompanyInfo"];
                if (label != null)
                {
                    label.Text = string.Format("ĐT: {0} | Email: {1} | Website: {2}", BOSApp.CurrentCompanyInfo.CSCompanyPhone
                    , BOSApp.CurrentCompanyInfo.CSCompanyEmail, BOSApp.CurrentCompanyInfo.CSCompanyWebsite);

                }
            }
            //productionPlanningItemList = new List<MMBatchProductItemsInfo>(productionPlanningItemList.OrderBy(p => p.MMBatchProductItemProductSerial));
            foreach (ARProductionPlanningItemsInfo item in productionPlanningItemList)
            {
                List<ICProductAttributesInfo> productAttributeList = objProductAttributesController.GetProductAttributeValueByICProductID(item.FK_ICProductID);
                foreach (ICProductAttributesInfo productAttribute in productAttributeList)
                {
                    if (string.IsNullOrEmpty(item.ICProductAttributeWoodType))
                    {
                        item.ICProductAttributeWoodType = productAttribute.ICProductAttributeValue;
                    }

                    if (!string.IsNullOrEmpty(item.ICProductAttributeWoodType) && !(item.ICProductAttributeWoodType.Contains(productAttribute.ICProductAttributeValue)))
                    {
                        item.ICProductAttributeWoodType += ", " + productAttribute.ICProductAttributeValue;
                    }
                }
                if (!string.IsNullOrEmpty(item.ICProductImageFile))
                    item.ICProductImageFile = item.ICProductImageFile.Replace("/view?usp=sharing", "").Replace("https://drive.google.com/file/d/", "https://drive.google.com/uc?id=");
            }
            report.DataSource = productionPlanningItemList;
            CSCompanysController objCompanysController = new CSCompanysController();
            BRBranchsController objBranchsController = new BRBranchsController();
            CSCompanysInfo objCompanyInfo = (CSCompanysInfo)objCompanysController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);

            if (objCompanyInfo != null)
            {
                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchAddressLine3"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactAddressLine3;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchPhone"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactPhone;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchFax"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactFax;
                }
            }
        }
        public void ChangeSaleType()
        {
            ProductionPlanningEntities entity = (ProductionPlanningEntities)CurrentModuleEntity;
            ARProductionPlanningsInfo mainObject = (ARProductionPlanningsInfo)CurrentModuleEntity.MainObject;

            byte[] RTFByte = BOSApp.GetDefaultDescConfig(this.Name, mainObject.ARProductionPlanningSaleType);
            if (ProductionPlanningDescEditControl != null)
            {
                if (RTFByte != null && RTFByte.Length > 0)
                {
                    MemoryStream RTFStream = new MemoryStream(RTFByte);
                    ProductionPlanningDescEditControl.LoadDocument(RTFStream, DocumentFormat.Rtf);
                    mainObject.ARProductionPlanningDesc = ProductionPlanningDescEditControl.OpenXmlBytes;
                }
                else
                {
                    ProductionPlanningDescEditControl.OpenXmlBytes = null;
                    mainObject.ARProductionPlanningDesc = ProductionPlanningDescEditControl.OpenXmlBytes;
                }
            }
            entity.UpdateMainObjectBindingSource();
        }
        public void ChangeSaleOrderName()
        {
            ProductionPlanningEntities entity = (ProductionPlanningEntities)CurrentModuleEntity;
            ARProductionPlanningsInfo mainObject = (ARProductionPlanningsInfo)CurrentModuleEntity.MainObject;

            entity.ProductionPlanningItemList.ForEach(o =>
            {
                o.ARProductionPlanningItemSaleOrderName = mainObject.ARProductionPlanningSaleOrderName;
            });
            entity.ProductionPlanningItemList.GridControl?.RefreshDataSource();
        }
        #region Mở - Xóa chứng từ
        public override bool ActionCancelComplete()
        {
            ProductionPlanningEntities entity = (ProductionPlanningEntities)CurrentModuleEntity;
            ARProductionPlanningsInfo mainObject = (ARProductionPlanningsInfo)CurrentModuleEntity.MainObject;
            MMBatchProductsController objBatchProductsController = new MMBatchProductsController();
            ARProductionPlanningsController objProductionPlanningsController = new ARProductionPlanningsController();
            if (mainObject.ARProductionPlanningID > 0)
            {
                List<MMBatchProductsInfo> batchProductList = objBatchProductsController.GetRelativeBatchProductByProductionPlanningID(mainObject.ARProductionPlanningID);
                if (batchProductList != null && batchProductList.Count > 0)
                {
                    MessageBox.Show(string.Format("Không thể mở chứng từ này do đã tạo lệnh sản xuất sau: -{0}", string.Join("\n-", batchProductList.Select(o => o.MMBatchProductNo).ToArray())), CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return false;
                }
                entity.SetPropertyChangeEventLock(false);
                mainObject.ARProductionPlanningStatus = ProductionPlanningStatus.New.ToString();
                mainObject.ARProductionPlanningApprovedDate = DateTime.MaxValue;
                mainObject.FK_HREmployeeApprovedID = 0;
                entity.UpdateMainObject();
                objProductionPlanningsController.UpdateReferenceSaleOrder(mainObject.ARProductionPlanningID, string.Empty);
                entity.SetPropertyChangeEventLock(true);
                base.ActionCancelComplete();
                InvalidateToolbar();
            }
            return true;
        }
        public override void ActionDelete()
        {
            ProductionPlanningEntities entity = (ProductionPlanningEntities)CurrentModuleEntity;
            ARProductionPlanningsInfo mainObject = (ARProductionPlanningsInfo)CurrentModuleEntity.MainObject.Clone();
            if (mainObject.ARProductionPlanningID > 0)
                base.ActionDelete();
        }
        #endregion
    }
    #endregion
}