using BOSCommon;
using BOSCommon.Constants;
using BOSCommon.Extensions.Helper;
using BOSComponent;
using BOSERP.Modules.Invoice;
using BOSERP.Utilities;
using BOSLib;
using BOSReport;
using DevExpress.XtraEditors;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraReports.UI;
using DevExpress.XtraRichEdit;
using DevExpress.XtraTab;
using Localization;
using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Text;
using System.Transactions;
using System.Windows.Forms;
using System.Threading;
using System.Windows.Forms;
using System.IO;
using System.Diagnostics;
using Microsoft.Office.Interop.Excel;
using BOSERP.Modules.SaleOrder.UI;
using System.Reflection;
using System.Data.OleDb;
using System.Threading;
namespace BOSERP.Modules.SaleOrder
{
    #region SaleOrderModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:SaleOrderModule
    //Created Date:Wednesday, March 26, 2008
    //-----------------------------------------------------------

    public class SaleOrderModule : BaseTransactionModule
    {
        #region Constant for SaleOrder
        private const string SaleOrderItemsGridControlName = "fld_dgcARSaleOrderItems";
        private const string ObjectAccessKeyLookupEditControlName = "fld_lkeACObjectAccessKey";
        private const string ToolbarButtonTakePayment = "TakePayment";
        private const string ToolbarButtonEditAfterCompleting = "EditAfterCompleting";
        private const string ToolbarButtonTransferDeposit = "TransferDeposit";
        private const string ToolbarButtonEditAfterPayment = "EditAfterPayment";
        private const string FieldGroupDeposit = "Deposit";
        private const string ButtonUpdateAcceptanceItemName = "fld_btnUpdateAcceptanceItem";
        private const string SaleOrderTemplateGridControlName = "fld_dgcARSaleOrderTemplates";
        public const string FilePathTextBoxName = "fld_txtFilePath";
        private const string FileNameTextBoxName = "fld_txtFileName";
        private const string SubFolder = "SaleOrder";
        private static bool CreateFromProposal = false;
        public static bool Printed = false;
        private const string SearchBranchLookupEditControlName = "fld_lkeFK_BRBranchID";
        private const string FK_ARCustomerID1LookupEditControlName = "fld_lkeFK_ARCustomerID1";
        private const string TabControlName = "bosTabControl1";
        private const string ButtonShowInventoryStock = "fld_btnShowInventoryStock";
        private const string SaleOrderPaymentTimeGridControlName = "fld_dgcARSaleOrderPaymentTimes";
        private const string SaleOrderExchangeRate2ControlName = "fld_txtARSaleOrderExchangeRate2";
        private const string SaleOrderGECurrencyIDControlName = "fld_lkeFK_GECurrencyID";
        public const string ARSaleOrderItemWorkMaterialsGridControlName = "fld_dgcARSaleOrderItemWorkMaterialsGridControl";
        public const string ARSaleOrderItemWorkAssetsGridControlName = "fld_dgcARSaleOrderItemWorkAssetsGridControl";
        public const string ARSaleOrderItemWorksGridControlName = "fld_dgcARSaleOrderItemWorksGridControl";
        public const string ARSaleOrderItemWorkTasksGridControlName = "fld_dgcARSaleOrderItemWorkTasksGridControl";
        private const string ARSaleOrderItemsGridControlName = "fld_dgcARSaleOrderItems";
        public const string ARSaleOrderItemCostGridControlName = "fld_dgcARSaleOrderItemCosts";
        private const string CancelDepositButtonName = "CancelDeposit";
        private const string CSCompanyBankLookupName = "fld_lkeFK_CSCompanyBankID";
        private const string ARPaymentMethodComboLookupName = "fld_lkeARPaymentMethodCombo";
        private const string GEPaymentTermLookupName = "fld_lkeFK_GEPaymentTermID";
        private const string ARSaleOrderDiscountPerCentAllItemName = "fld_txtARSaleOrderDiscountPerCentAllItem";
        private const string ARSaleOrderDiscountPerCentName = "fld_txtARSaleOrderDiscountPerCent";
        private const string ARSaleOrderDiscountFixName = "fld_txtARSaleOrderDiscountFix";
        private const string FK_ARPriceLevelIDLookupName = "fld_lkeFK_ARPriceLevelID";
        private const string ARSaleOrderCustomerCommissionPercentName = "fld_txtARSaleOrderCustomerCommissionPercent";
        private const string ARSaleOrderSOCommissionAmountName = "fld_txtARSaleOrderSOCommissionAmount";
        private const string ARSaleOrderTaxPercentName = "fld_txtARSaleOrderTaxPercent";
        private const string ARSaleOrderTaxAmountName = "fld_txtARSaleOrderTaxAmount";
        private const string ProductPicturePictureBoxName = "fld_pteARSaleOrderItemProductPicture";
        private const string DeliveryFloorNumberControlName = "fld_txtARSalesOrderDeliveryFloorNumber";
        private const string ProductLookupControlName = "fld_lkeFK_ICProductAttributeID";
        private const string ACObjectLookupControlName = "fld_lkeACObjectAccessKey";
        private const string HyperlinkChooseProspectCustomerName = "fld_lnkChooseProspectCustomer";
        private const string SellerControlName = "fld_lkeFK_ARSellerID";
        private const string SalesmanContrlName = "fld_bedARSalesman";
        private const string DiscountProgramButtonEditName = "fld_bedFK_ARDiscountProgramID";
        public const string SaleOrderItemAllocationFeesGridControlName = "fld_dgcARSaleOrderItemAllocationFeesGridControl";
        public const string SaleOrderItemOtherFeesGridControlName = "fld_dgcARSaleOrderItemOtherFeesGridControl";
        public const string stSaleOrderCommentRichEdit = "fld_recARSaleOrderComment";
        public const string stSaleOrderInternalCommentRichEdit = "fld_recARSaleOrderInternalComment";
        public const string CommissionObjectLookupEditName = "fld_lkeACCustomerObjectID";
        private const string ButtonEditOtherFeeName = "fld_btnEditOtherFees";
        private const string SaveCommision = "fld_btnSaveCommision";
        #endregion

        #region Other
        public bool IsEditAfterCompleting = false;
        public bool IsEditPrice = false;
        public bool IsSave = false;
        public string DiscountPerCentAllItem = string.Empty;
        public bool IsEditAfterPayment = false;
        public bool IsEditPaymentTime = false;
        public List<string> TabModuleList { get; set; }
        #endregion

        #region Public properties
        private BOSGridControl SaleOrderTemplateGridControl;
        public ARSaleOrdersInfo OldSaleOrder { get; set; }
        public BOSLookupEdit SearchBranchLookupEditControl;
        public BOSButton EditDepositControl;
        public BOSLookupEdit SellerControl;
        public BOSLookupEdit ObjectAccessKeyLookupEditControl;
        public BOSButtonEdit DiscountProgramButtonEdit;
        public List<ADDataViewPermissionsInfo> CurrentModuleDataViewPermissionList;
        public List<BRBranchsInfo> BranchList;
        public ARSaleOrderItemWorkMaterialsGridControl ARSaleOrderItemWorkMaterialsGridControl;
        public BOSLookupEdit ARCustomerControlName;
        public BOSTabControl Tab;
        public BOSButton InventoryStock;
        public ARSaleOrderItemsGridControl SaleOrderItemsGridControl;
        public ARSaleOrderPaymentTimesGridControl SaleOrderPaymentTimeGridControl;
        public BOSTextBox SaleOrderExchangeRate2Control;
        public BOSTextBox DeliveryFloorNumberControl;
        public BOSLookupEdit SaleOrderGECurrencyIDControl;
        public BOSLookupEdit CSCompanyBankLookupEditControl;
        public BOSLookupEdit ARPaymentMethodComboLookupEditControl;
        public BOSLookupEdit GEPaymentTermLookupEditControl;
        public BOSLookupEdit FK_ARPriceLevelIDLookupEditControl;
        public BOSTextBox ARSaleOrderDiscountPerCentEditControl;
        public BOSTextBox ARSaleOrderDiscountPerCentAllItemEditControl;
        public BOSTextBox ARSaleOrderDiscountFixEditControl;
        public BOSTextBox ARSaleOrderCustomerCommissionPercentEditControl;
        public BOSTextBox ARSaleOrderSOCommissionAmountEditControl;
        public BOSTextBox ARSaleOrderTaxPercentEditControl;
        public BOSTextBox ARSaleOrderTaxAmountEditControl;
        public BOSLookupEdit ACObjectLookupEdit;
        public HyperLinkEdit HyperLinkEditChooseProspectCustomer;
        public ButtonEdit SalesmanButtonEditControl;
        public BOSLookupEdit ARSaleOrderSaleTypeLookupEditControl;
        private BOSPictureEdit ProductPicturePictureBox;
        public ARSaleOrderItemCostGridControl ARSaleOrderItemCostGridControl;
        public ARSaleOrderItemWorkTasksGridControl ARSaleOrderItemWorkTasksGridControl;
        public ARSaleOrderItemsGridControl ARSaleOrderItemsGridControl;
        public ARSaleOrderItemWorkAssetsGridControl ARSaleOrderItemWorkAssetsGridControl;
        public ARSaleOrderItemWorksGridControl ARSaleOrderItemWorksGridControl;
        public BOSComponent.BOSRichEditControl SaleOrderCommentEditControl;
        public BOSComponent.BOSRichEditControl SaleOrderInternalCommentRichEdit;
        public BOSLookupEdit ProductLookupControl;
        public BOSLookupEdit CommissionObjectLookupControl;
        public BOSButton ButtonEditOtherFee;
        public BOSButton fld_btnSaveCommision;
        public class TempCommissionInfo
        {
            public int FK_ACObjectID { get; set; }
            public string ARObjectType { get; set; }
            public decimal ARCommissionRate { get; set; }
            public string ACObjectName { get; set; }
            public string ACObjectNo { get; set; }
        }

        public Dictionary<string, string> Operation = new Dictionary<string, string>()
            {
                {"Plus","+"},
                {"Minus","-"},
                {"Multi","*"},
                {"Split","/"},
            };
        #endregion

        #region Private properties
        private Workbook WorkBook;
        private Worksheet WorkSheet;
        private Microsoft.Office.Interop.Excel.Application App;
        #endregion

        public SaleOrderModule()
        {
            Name = ModuleName.SaleOrder;
            CurrentModuleEntity = new SaleOrderEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();

            GetCurrentModuleDataViewPermission();
            SearchBranchLookupEditControl = (BOSLookupEdit)Controls[SaleOrderModule.SearchBranchLookupEditControlName];
            if (SearchBranchLookupEditControl != null)
                SearchBranchLookupEditControl.Properties.DataSource = BranchList;
            OldSaleOrder = new ARSaleOrdersInfo();
            SaleOrderTemplateGridControl = (BOSGridControl)Controls[SaleOrderModule.SaleOrderTemplateGridControlName];
            ARCustomerControlName = (BOSLookupEdit)Controls[SaleOrderModule.FK_ARCustomerID1LookupEditControlName];
            Tab = (BOSComponent.BOSTabControl)Controls[SaleOrderModule.TabControlName];
            InventoryStock = (BOSComponent.BOSButton)Controls[SaleOrderModule.ButtonShowInventoryStock];
            ObjectAccessKeyLookupEditControl = (BOSLookupEdit)Controls[SaleOrderModule.ObjectAccessKeyLookupEditControlName];
            SaleOrderItemsGridControl = (ARSaleOrderItemsGridControl)Controls[SaleOrderItemsGridControlName];
            SaleOrderPaymentTimeGridControl = (ARSaleOrderPaymentTimesGridControl)Controls[SaleOrderPaymentTimeGridControlName];
            SaleOrderGECurrencyIDControl = (BOSLookupEdit)Controls[SaleOrderModule.SaleOrderGECurrencyIDControlName];
            SaleOrderExchangeRate2Control = (BOSTextBox)Controls[SaleOrderModule.SaleOrderExchangeRate2ControlName];
            DeliveryFloorNumberControl = (BOSTextBox)Controls[SaleOrderModule.DeliveryFloorNumberControlName];
            SellerControl = (BOSLookupEdit)Controls[SaleOrderModule.SellerControlName];
            ARSaleOrderItemWorkMaterialsGridControl = (ARSaleOrderItemWorkMaterialsGridControl)Controls[ARSaleOrderItemWorkMaterialsGridControlName];
            ARSaleOrderItemWorkAssetsGridControl = (ARSaleOrderItemWorkAssetsGridControl)Controls[ARSaleOrderItemWorkAssetsGridControlName];
            ARSaleOrderItemWorksGridControl = (ARSaleOrderItemWorksGridControl)Controls[ARSaleOrderItemWorksGridControlName];
            ARSaleOrderItemWorkTasksGridControl = (ARSaleOrderItemWorkTasksGridControl)Controls[ARSaleOrderItemWorkTasksGridControlName];
            ARSaleOrderItemCostGridControl = (ARSaleOrderItemCostGridControl)Controls[ARSaleOrderItemCostGridControlName];
            ARSaleOrderItemsGridControl = (ARSaleOrderItemsGridControl)Controls[SaleOrderModule.ARSaleOrderItemsGridControlName];
            ARPaymentMethodComboLookupEditControl = (BOSComponent.BOSLookupEdit)Controls[SaleOrderModule.ARPaymentMethodComboLookupName];
            CSCompanyBankLookupEditControl = (BOSComponent.BOSLookupEdit)Controls[SaleOrderModule.CSCompanyBankLookupName];
            GEPaymentTermLookupEditControl = (BOSComponent.BOSLookupEdit)Controls[SaleOrderModule.GEPaymentTermLookupName];
            ARSaleOrderDiscountPerCentAllItemEditControl = (BOSComponent.BOSTextBox)Controls[SaleOrderModule.ARSaleOrderDiscountPerCentAllItemName];
            ARSaleOrderDiscountPerCentEditControl = (BOSComponent.BOSTextBox)Controls[SaleOrderModule.ARSaleOrderDiscountPerCentName];
            ARSaleOrderDiscountFixEditControl = (BOSComponent.BOSTextBox)Controls[SaleOrderModule.ARSaleOrderDiscountFixName];
            FK_ARPriceLevelIDLookupEditControl = (BOSComponent.BOSLookupEdit)Controls[SaleOrderModule.FK_ARPriceLevelIDLookupName];
            ARSaleOrderCustomerCommissionPercentEditControl = (BOSComponent.BOSTextBox)Controls[SaleOrderModule.ARSaleOrderCustomerCommissionPercentName];
            ARSaleOrderSOCommissionAmountEditControl = (BOSComponent.BOSTextBox)Controls[SaleOrderModule.ARSaleOrderSOCommissionAmountName];
            ARSaleOrderTaxAmountEditControl = (BOSComponent.BOSTextBox)Controls[SaleOrderModule.ARSaleOrderTaxAmountName];
            ARSaleOrderTaxPercentEditControl = (BOSComponent.BOSTextBox)Controls[SaleOrderModule.ARSaleOrderTaxPercentName];
            ACObjectLookupEdit = (BOSLookupEdit)Controls[SaleOrderModule.ACObjectLookupControlName];
            HyperLinkEditChooseProspectCustomer = (HyperLinkEdit)Controls[HyperlinkChooseProspectCustomerName];
            SalesmanButtonEditControl = (ButtonEdit)Controls[SalesmanContrlName];
            ARSaleOrderSaleTypeLookupEditControl = (BOSLookupEdit)Controls["fld_lkeARSaleOrderSaleType"];            
            ProductPicturePictureBox = (BOSPictureEdit)Controls[ProductPicturePictureBoxName];
            DiscountProgramButtonEdit = (BOSButtonEdit)Controls[DiscountProgramButtonEditName];
            SaleOrderCommentEditControl = (BOSComponent.BOSRichEditControl)Controls[SaleOrderModule.stSaleOrderCommentRichEdit];
            SaleOrderInternalCommentRichEdit = (BOSComponent.BOSRichEditControl)Controls[SaleOrderModule.stSaleOrderInternalCommentRichEdit];
            ProductLookupControl = (BOSLookupEdit)Controls[ProductLookupControlName];
            CommissionObjectLookupControl = (BOSLookupEdit)Controls[CommissionObjectLookupEditName];
            ButtonEditOtherFee = (BOSComponent.BOSButton)Controls[SaleOrderModule.ButtonEditOtherFeeName];
            fld_btnSaveCommision = (BOSComponent.BOSButton)Controls[SaleOrderModule.SaveCommision];

            ACObjectsController objObjectsController = new ACObjectsController();
            if (CommissionObjectLookupControl != null)
            {
                CommissionObjectLookupControl.Properties.DataSource = objObjectsController.GetAllObjects().Where(o => o.ACObjectType != ObjectType.Branch.ToString());
            }    
            SetVisibleTabPage(Tab, "xtraTabPage4,xtraTabPage3,xtraTabAsset,xtraTabWorkTask", false);
            //Người giới thiệu : xtraTabPage5
            // Danh sách chi phí: xtraTabCostList
            // Danh sách công việc: xtraTabPage4
            // Danh sách vật tư: xtraTabPage3
            // Danh sách MMTB: xtraTabAsset
            // Danh sách task: xtraTabWorkTask
            // Cont: fld_tabSOItemContainers
            TabModuleList = new List<string>();
            foreach (XtraTabPage item in Tab.TabPages)
            {
                if (item.PageVisible) TabModuleList.Add(item.Name);
            }
        }

        public void SetReadOnlyControl(object control, bool isReadOnly)
        {
            (control as BOSLookupEdit).ReadOnly = isReadOnly;
        }

        public void SetVisibleTabPage(BOSTabControl tabControl, string tabPageName, bool isVisible)
        {
            if (tabControl != null)
            {
                List<string> tabPagesNames = new List<string>();
                tabPagesNames = tabPageName.Split(',').ToList();
                tabPagesNames.ForEach(o =>
                {
                    ((XtraTabPage)tabControl.TabPages?.Where(p => p.Name.Equals(o))?.FirstOrDefault()).PageVisible = isVisible;
                });
            }
        }

        public override void ActionCancel()
        {
            IsEditPrice = false;
            IsEditAfterCompleting = false;
            base.ActionCancel();
            IsEditAfterPayment = false;
            HyperLinkEditChooseProspectCustomer.Visible = true;
            LoadControls(false);
            LoadControlByEditPrice(IsEditPrice);
        }

        protected override DataSet GetSearchData(ref string searchQuery)
        {
            ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
            ARSaleOrdersInfo searchObject = (ARSaleOrdersInfo)CurrentModuleEntity.SearchObject;
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = new ACObjectsInfo();
            if (!string.IsNullOrEmpty(searchObject.ACObjectAccessKey))
            {
                objObjectsInfo = (ACObjectsInfo)objObjectsController.GetObjectByAccessKey(searchObject.ACObjectAccessKey);
                objObjectsInfo = objObjectsController.GetObjectByIDAndType(objObjectsInfo.ACObjectID, objObjectsInfo.ACObjectType);
            }
            DataSet ds;
            if (SearchBranchLookupEditControl.EditValue.ToString() == "" || SearchBranchLookupEditControl.EditValue.ToString() == "0")
            {
                if (BranchList.Count == 0)
                {
                    ds = objSaleOrdersController.GetDataSetByID(-1);
                }
                else
                {
                    ds = objSaleOrdersController.GetSaleOrderByListOfBranchIDForSemiProduct(searchObject.ARSaleOrderNo,
                                                                            searchObject.FK_HREmployeeID,
                                                                            searchObject.FK_BRBranchID,
                                                                            objObjectsInfo.ACObjectID,
                                                                            objObjectsInfo.ACObjectType,
                                                                            searchObject.FK_ARSellerID,
                                                                            SaleOrderType.SaleOrder.ToString(),
                                                                            searchObject.SaleOrderFromDate,
                                                                            searchObject.SaleOrderToDate,
                                                                            searchObject.FK_ICProductID,
                                                                            BOSApp.CurrentUsersInfo.ADUserID,
                                                                            BranchList);
                }
            }
            else
            {
                ds = objSaleOrdersController.GetSaleOrdersSemiProductBysUser(searchObject.ARSaleOrderNo,
                                                            searchObject.FK_HREmployeeID,
                                                            searchObject.FK_BRBranchID,
                                                            objObjectsInfo.ACObjectID,
                                                            objObjectsInfo.ACObjectType,
                                                            searchObject.FK_ARSellerID,
                                                            SaleOrderType.SaleOrder.ToString(),
                                                            searchObject.SaleOrderFromDate,
                                                            searchObject.SaleOrderToDate,
                                                            searchObject.FK_ICProductID,
                                                            BOSApp.CurrentUsersInfo.ADUserID
                                                            );
            }
            DataSet result = new DataSet();
            DataView dv = ds.Tables[0].DefaultView;
            dv.Sort = "ARSaleOrderID ASC";
            result.Tables.Add(dv.ToTable());
            return result;
        }

        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
        public void GetCurrentModuleDataViewPermission()
        {
            CurrentModuleDataViewPermissionList = BOSApp.CurrentADDataViewPermissionList.Where(i => i.STModuleName == Name && i.ADDataViewPermissionType == ADDataViewPermissionType.Module).ToList();

            List<int> branchIDList = new List<int>();
            foreach (ADDataViewPermissionsInfo dataViewPermissionsInfo in CurrentModuleDataViewPermissionList)
            {
                branchIDList.Add(dataViewPermissionsInfo.FK_BRBranchID);
            }

            if (branchIDList.Count == 0)
            {
                BranchList = new List<BRBranchsInfo>();
            }
            else
            {
                BRBranchsController objBranchsController = new BRBranchsController();
                List<BRBranchsInfo> branchList = objBranchsController.GetAllBranches();

                BranchList = branchList.Where(i => branchIDList.IndexOf(i.BRBranchID) > -1).ToList();
            }
        }

        public override string GenerateConditionsForSearch(Control ctrl, string strTableName, string strColumnName)
        {
            string condition = base.GenerateConditionsForSearch(ctrl, strTableName, strColumnName);
            if (strColumnName == "FK_ARSellerID")
            {
                int sellerID = Convert.ToInt32(((BOSLookupEdit)ctrl).EditValue);
                if (sellerID > 0)
                {
                    condition += string.Format("(FK_ARSellerID = {0} or FK_ARAssociatedSellerID = {0})", sellerID);
                    condition += BOSUtil.NewLine + BOSUtil.Tab + "AND" + BOSUtil.NewLine;
                }
            }
            return condition;
        }

        #region Local
        public void AddItemToSaleOrderItemsList(int productID)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainobject = (ARSaleOrdersInfo)entity.MainObject;
            ARSaleOrderItemsInfo objSaleOrderItemsInfo = (ARSaleOrderItemsInfo)entity.ModuleObjects[TableName.ARSaleOrderItemsTableName];
            objSaleOrderItemsInfo.FK_ICProductID = productID;
            objSaleOrderItemsInfo.ARSaleOrderItemVirtualID = Guid.NewGuid().ToString();
            if (objSaleOrderItemsInfo.FK_ICProductID > 0)
            {
                //entity.SetValuesAfterValidateProduct(objSaleOrderItemsInfo.FK_ICProductID, objSaleOrderItemsInfo);
                ValidateItemToSaleOrderItemsList(objSaleOrderItemsInfo);
                if (entity.ARSaleOrderItemsList.Count > 0)
                    mainobject.ARSaleOrderCBM = entity.ARSaleOrderItemsList.Sum(x => x.ARSaleOrderItemProductCBM);
                entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
                UpdateTotalAmount(entity.ARSaleOrderItemsList);
            }
            SetDefaultSaleOrderTaxPercent();
        }

        private ARSaleOrderItemsInfo ToSaleOrderItemsInfo(ICProductsInfo objProductsInfo)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainobject = (ARSaleOrdersInfo)entity.MainObject;
            ARSaleOrderItemsInfo objSaleOrderItemsInfo = new ARSaleOrderItemsInfo
            {
                FK_ICProductID = objProductsInfo.ICProductID
            };
            objSaleOrderItemsInfo.FK_ICModelID = objProductsInfo.FK_ICModelID;
            objSaleOrderItemsInfo.ARSaleOrderItemRemainedQty = objSaleOrderItemsInfo.ARSaleOrderItemProductQty;
            entity.SetValuesAfterValidateProduct(objSaleOrderItemsInfo.FK_ICProductID, objSaleOrderItemsInfo);
            entity.SetProductPriceByProductUnitPrice(objSaleOrderItemsInfo);
            objSaleOrderItemsInfo.ARSOItemComponentList = null;
            if (objProductsInfo != null)
            {
                objSaleOrderItemsInfo.ARSOItemComponentList = new BOSList<ARSOItemComponentsInfo>();
                objSaleOrderItemsInfo.ARSOItemComponentList.InitBOSList(
                                                                    entity,
                                                                    TableName.ARSaleOrderItemsTableName,
                                                                    TableName.ARSOItemComponentsTableName,
                                                                    BOSList<ARSOItemComponentsInfo>.cstRelationForeign);
                objSaleOrderItemsInfo.ARSOItemComponentList.ItemTableForeignKey = "FK_ARSaleOrderItemID";
                if (objSaleOrderItemsInfo.ARSaleOrderItemID > 0)
                {
                    ARSOItemComponentsController objSOItemComponentsController = new ARSOItemComponentsController();
                    List<ARSOItemComponentsInfo> components = objSOItemComponentsController.GetSOItemComponentListBySOItemID(objSaleOrderItemsInfo.ARSaleOrderItemID);
                    objSaleOrderItemsInfo.ARSOItemComponentList.Invalidate(components);
                }
                if (objSaleOrderItemsInfo.ARSOItemComponentList.Count == 0)
                {
                    BOSList<ARSOItemComponentsInfo> defaultComponentsList = GetDefaultComponentList(objSaleOrderItemsInfo);
                    objSaleOrderItemsInfo.ARSOItemComponentList = defaultComponentsList;
                }
                objSaleOrderItemsInfo.FK_ICPerimeterGroupID = objProductsInfo.FK_ICPerimeterGroupID;
                objSaleOrderItemsInfo.ARSaleOrderItemGrantedFrom = objProductsInfo.ICProductOriginOfProduct;
                objSaleOrderItemsInfo.ARSaleOrderItemProductNoOfOldSys = objProductsInfo.ICProductNoOfOldSys;
                objSaleOrderItemsInfo.ARSaleOrderItemProductNo = objProductsInfo.ICProductNo;
                objSaleOrderItemsInfo.ARSaleOrderItemIsDeliveryPlan = mainobject.ARSaleOrderIsDeliveryPlan;
                objSaleOrderItemsInfo.ARSaleOrderItemIsSaleOrderShipment = mainobject.ARSaleOrderIsSaleOrderShipment;
                objSaleOrderItemsInfo.ARSaleOrderItemIsAcceptance = mainobject.ARSaleOrderIsAcceptance;
                objSaleOrderItemsInfo.ARSaleOrderItemIsInvoiceAndShipment = mainobject.ARSaleOrderIsInvoiceAndShipment;
                objSaleOrderItemsInfo.ARSaleOrderItemIsVehicleAllocation = mainobject.ARSaleOrderIsVehicleAllocation;
                objSaleOrderItemsInfo.ARSaleOrderItemIsContainerLoader = mainobject.ARSaleOrderIsContainerLoader;
                objSaleOrderItemsInfo.ARSaleOrderItemPONo = mainobject.ARSaleOrderPONo;
                objSaleOrderItemsInfo.FK_ICProductAttributeTTMTID = mainobject.FK_ICProductAttributeTTMTID;
                objSaleOrderItemsInfo.ARSaleOrderItemHTID = objProductsInfo.ICProductAttributeFinishing;
                objSaleOrderItemsInfo.ARSaleOrderItemHTText = objProductsInfo.ICProductAttributeFinishingText;
                //objSaleOrderItemsInfo.ARSaleOrderItemProductCustomerNumber = objProductsInfo.ICProductCustomerNumber;
                objSaleOrderItemsInfo.ARSaleOrderItemDeliveryDate = mainobject.ARSaleOrderDeliveryDate;
                if(!string.IsNullOrWhiteSpace(mainobject.ARSaleOrderItemGrantedFrom))
                {
                    objSaleOrderItemsInfo.ARSaleOrderItemGrantedFrom = mainobject.ARSaleOrderItemGrantedFrom;
                }
                //Màu sơn
                objSaleOrderItemsInfo.ARSaleOrderItemColorID = objProductsInfo.ICProductColorAttribute;
                objSaleOrderItemsInfo.ARSaleOrderItemColorText = GetAttributeText(objProductsInfo.ICProductColorAttribute);
                //Loại gỗ
                objSaleOrderItemsInfo.ARSaleOrderItemWoodTypeID = objProductsInfo.ICProductWoodTypeAttribute;
                objSaleOrderItemsInfo.ARSaleOrderItemWoodTypeText = GetAttributeText(objProductsInfo.ICProductWoodTypeAttribute);
            }
            objSaleOrderItemsInfo.ARSaleOrderItemVirtualID = Guid.NewGuid().ToString();
            return objSaleOrderItemsInfo;
        }

        public void ChangeItemFromSaleOrderItemsList()
        {
            string type = string.Empty;
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;

            if (entity.ARSaleOrderItemsList.CurrentIndex < 0)
                return;

            type = objSaleOrdersInfo.ARSaleOrderProductType;
         
            ARSaleOrderItemsInfo objSaleOrderItemsInfo2 = (ARSaleOrderItemsInfo)entity.ARSaleOrderItemsList[entity.ARSaleOrderItemsList.CurrentIndex];
            objSaleOrderItemsInfo2.ARSaleOrderItemFormulaPriceConfigQty = CalculatorSaleOrderItemFormulaPriceConfigQty(objSaleOrderItemsInfo2);
            objSaleOrderItemsInfo2.ARSaleOrderItemRemainedQty = objSaleOrderItemsInfo2.ARSaleOrderItemProductQty - objSaleOrderItemsInfo2.ARSaleOrderItemShippedQty;
            ARCustomersController objCustomersController = new ARCustomersController();
            ARCustomersInfo objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectByID(objSaleOrdersInfo.FK_ARCustomerID);
            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(objSaleOrderItemsInfo2.FK_ICProductID);
             
            if (objProductsInfo != null
                && objSaleOrdersInfo.ARSaleOrderDocumentType == SaleOrderDocumentType.Annex.ToString()
                && objProductsInfo.ICProductTemplateType == ProductTemplateType.Design.ToString())
            {
                if (MessageBox.Show(SaleOrderLocalizedResources.ChangeProductPriceOfProductDesign, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
                    objSaleOrderItemsInfo2.ICProductUnitPrice = objSaleOrderItemsInfo2.ARSaleOrderItemProductUnitPrice;
            }
            if (type == SaleOrderProductType.IngredientPaint.ToString())
            {
                objSaleOrderItemsInfo2.ARSaleOrderItemRemainedQty = Math.Round(objSaleOrderItemsInfo2.ARSaleOrderItemRemainedQty, 4, MidpointRounding.AwayFromZero);
            }
            else
            {
                objSaleOrderItemsInfo2.ARSaleOrderItemRemainedQty = Math.Round(objSaleOrderItemsInfo2.ARSaleOrderItemRemainedQty, 3, MidpointRounding.AwayFromZero);
            }
            entity.RoundByCurrency(objSaleOrderItemsInfo2);
            entity.SetProductPriceByProductUnitPrice(objSaleOrderItemsInfo2);

            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
            int customerPaymentCount = entity.ARSaleOrderPaymentTimesList.Where(o => o.FK_ARCustomerPaymentID != 0
                                                                  || o.FK_ARExtraCustomerPaymentID != 0)
                                                                  .Count();
            decimal UnitVolume = 0;
                if (objProductsInfo.ICProductVolume > 0) UnitVolume = objProductsInfo.ICProductVolume;
                else
                    UnitVolume = Math.Round((objSaleOrderItemsInfo2.ARSaleOrderItemHeight * objSaleOrderItemsInfo2.ARSaleOrderItemWidth * objSaleOrderItemsInfo2.ARSaleOrderItemLength)
                    / (decimal)Math.Pow(10, 9), 4);
            objSaleOrderItemsInfo2.ARSaleOrderItemProductCBM = UnitVolume * objSaleOrderItemsInfo2.ARSaleOrderItemProductQty;
            objSaleOrderItemsInfo2.ARSaleOrderItemBlock = (Math.Round((objSaleOrderItemsInfo2.ARSaleOrderItemHeight * objSaleOrderItemsInfo2.ARSaleOrderItemWidth * objSaleOrderItemsInfo2.ARSaleOrderItemLength)
                    / (decimal)Math.Pow(10, 9), 4) )* objSaleOrderItemsInfo2.ARSaleOrderItemProductQty  ;
            objSaleOrdersInfo.ARSaleOrderCBM = entity.ARSaleOrderItemsList.Sum(x => x.ARSaleOrderItemProductCBM);
            objSaleOrderItemsInfo2.ARSaleOrderItemProductQtyInBox = objSaleOrderItemsInfo2.ARSaleOrderItemProductQty / (objProductsInfo.ICProductQtyInBox == 0? 1: objProductsInfo.ICProductQtyInBox);
            UpdateContQty();
            UpdateTotalAmount(entity.ARSaleOrderItemsList);
        }

        public void ChangeItemFromSaleOrderExchangeRate()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            if (!IsEditPrice)
            {
                CSCompanysInfo objCompanysInfo = BOSApp.CurrentCompanyInfo;
                ARCustomersController objCustomersController = new ARCustomersController();
                ARCustomersInfo objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectByID(mainObject.FK_ARCustomerID);
                if (entity.ARSaleOrderItemsList != null && entity.ARSaleOrderItemsList.Count > 0)
                {
                    if (mainObject.STToolbarActionName.Equals("Manual")
                        || mainObject.STToolbarActionName.Equals("NewFromOther")
                        || mainObject.STToolbarActionName.Equals("NewFromWood"))
                    {
                        if (objCompanysInfo != null && objCompanysInfo.CSSourceSellingPriceMethod == ADConfigValueUtility.cstSourceSellingPriceMethodMasterData)
                        {
                            entity.ARSaleOrderItemsList.ForEach(o =>
                            {
                                o.ARSaleOrderItemProductUnitPrice2 = mainObject.ARSaleOrderExchangeRate2 > 0 ? o.ARSaleOrderItemProductUnitPrice * mainObject.ARSaleOrderExchangeRate / mainObject.ARSaleOrderExchangeRate2 : 0;
                                entity.SetProductPriceByProductUnitPrice(o);
                            });
                        }
                        else if (objCompanysInfo != null && objCompanysInfo.CSSourceSellingPriceMethod == ADConfigValueUtility.cstSourceSellingPriceMethodPriceSheet)
                        {
                            entity.ARSaleOrderItemsList.ForEach(o =>
                            {
                                ICProductsInfo product = BOSApp.GetProductFromCurrentProductList(o.FK_ICProductID);
                                decimal sumQty = entity.ARSaleOrderItemsList.Where(p => o.FK_ICProductID == p.FK_ICProductID && o.FK_ICMeasureUnitID == p.FK_ICMeasureUnitID).Sum(p => p.ARSaleOrderItemProductQty);
                                if (product != null && product.ICProductType == ProductType.Product.ToString())
                                {
                                    o.ARSaleOrderItemProductUnitPrice = BOSApp.CalculaterProductUnitPrice(product, o.ARSaleOrderItemProductUnitPrice, sumQty, o.FK_ICMeasureUnitID, objCustomersInfo != null ? objCustomersInfo.ARCustomerID : 0, mainObject.ARSaleOrderDate, mainObject.FK_GECurrencyID);
                                    o.ICProductUnitPrice = o.ARSaleOrderItemProductUnitPrice;
                                    o.ARSaleOrderItemProductUnitPrice2 = mainObject.ARSaleOrderExchangeRate2 > 0 ? o.ARSaleOrderItemProductUnitPrice * mainObject.ARSaleOrderExchangeRate / mainObject.ARSaleOrderExchangeRate2 : 0;
                                }
                                entity.SetProductPriceByProductUnitPrice(o);
                            });
                        }
                    }
                    else
                    {
                        entity.ARSaleOrderItemsList.ForEach(o =>
                        {
                            o.ARSaleOrderItemProductUnitPrice2 = mainObject.ARSaleOrderExchangeRate2 > 0 ? o.ARSaleOrderItemProductUnitPrice * mainObject.ARSaleOrderExchangeRate / mainObject.ARSaleOrderExchangeRate2 : 0;
                            entity.SetProductPriceByProductUnitPrice(o);
                        });
                    }
                    entity.UpdateTotalAmount(entity.ARSaleOrderItemsList);
                    entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
                }
            }
        }

        public void DeleteItemFromSaleOrderItemsList()
        {
            if (!IsEditAfterCompleting)
            {
                if (!IsEditPrice)
                {
                    SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                    ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
                    if (entity.ARSaleOrderItemsList.CurrentIndex < 0) return;
                    ARSaleOrderItemsInfo objSaleOrderItemsInfo = (ARSaleOrderItemsInfo)entity.ARSaleOrderItemsList[entity.ARSaleOrderItemsList.CurrentIndex];
                    if (!IsEditAfterPayment)
                    {
                        if(objSaleOrderItemsInfo != null)
                        {
                            for (int i = 0; i < entity.SaleOrderItemAllocationFeeList.Count; i++)
                            {
                                if (entity.SaleOrderItemAllocationFeeList[i].FK_ICProductID == objSaleOrderItemsInfo.FK_ICProductID)
                                {
                                    entity.SaleOrderItemAllocationFeeList.RemoveObjectFromList(i);
                                }
                            }
                            UpdateTotalSaleOrderItemAllocationFee();
                        }
                        entity.ARSaleOrderItemsList.RemoveSelectedRowObjectFromList();
                        entity.UpdateTotalAmount(entity.ARSaleOrderItemsList);
                        GeneratePaymentTime(mainObject.FK_GEPaymentTermID);
                    }
                    else
                    {
                        if (objSaleOrderItemsInfo != null && objSaleOrderItemsInfo.ICProductUnitPrice == 0 && objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice == 0)
                        {
                            for (int i = 0; i < entity.SaleOrderItemAllocationFeeList.Count; i++)
                            {
                                if (entity.SaleOrderItemAllocationFeeList[i].FK_ICProductID == objSaleOrderItemsInfo.FK_ICProductID)
                                {
                                    entity.SaleOrderItemAllocationFeeList.RemoveObjectFromList(i);
                                }
                            }
                            UpdateTotalSaleOrderItemAllocationFee();
                            entity.ARSaleOrderItemsList.RemoveSelectedRowObjectFromList();
                            UpdateTotalAmount(entity.ARSaleOrderItemsList);
                        }
                        else
                        {
                            MessageBox.Show(SaleOrderLocalizedResources.ValidateAfterPaymentMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return;
                        }
                    }
                }
            }
        }

        public void DeleteItemFromSaleOrderItemContainersList()
        {
            if (!IsEditAfterCompleting)
            {
                if (!IsEditPrice)
                {
                    SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                    entity.SaleOrderItemContainerList.RemoveSelectedRowObjectFromList();
                    UpdateContQty();
                }
            }
        }

        public void DeleteItemFromPaymentTimeItemsList()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            entity.ARSaleOrderPaymentTimesList.RemoveSelectedRowObjectFromList();
        }

        public void UpdateContQty()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                entity.UpdateContQty();
            }
        }

        public void UpdateTotalAmount(List<ARSaleOrderItemsInfo> listItem)
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                entity.UpdateTotalAmount(listItem);
                UpdatePaymentTime();
                UpdateCommissions();
            }
        }

        #endregion
        public override void ActionNew()
        {
            base.ActionNew();
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            ADConfigValuesController objConfigValuesController = new ADConfigValuesController();
            List<ADConfigValuesInfo> ConfigValuesList = new List<ADConfigValuesInfo>();
            ADConfigValuesInfo objConfigValuesInfo = new ADConfigValuesInfo();
            //ConfigValuesList = objConfigValuesController.GetADConfigValuesByKeyGroup(ConfigValueGroup.ListOfSalesChannelType);
            //if (ConfigValuesList != null && ConfigValuesList.Count > 0)
            //{
            //    mainObject.ARListOfSalesChannelType = ConfigValuesList[0].ADConfigKeyValue;
            //}

            SaleOrderInternalCommentRichEdit.Text = String.Empty;
            SaleOrderCommentEditControl.Text = String.Empty;

            if (InventoryStock != null)
                InventoryStock.Visible = true;
            ReadonlyControl(false);
            if (HyperLinkEditChooseProspectCustomer != null)
                HyperLinkEditChooseProspectCustomer.Visible = true;
            if (ARSaleOrderSaleTypeLookupEditControl != null)
                ARSaleOrderSaleTypeLookupEditControl.ReadOnly = false;
            ChangeDataSourceDocumentTypeLookup(true);
            SetVisibleTabPage(Tab, "fld_tabSOItemContainers,xtraTabPage5", true);
            if (ARSaleOrderItemsGridControl != null)
                ARSaleOrderItemsGridControl.LoadGridViewAccordingToToolbarActionNew(string.Empty);
            //if (ProductLookupControl != null)
            //{
            //    ProductLookupControl.Properties.DataSource = LoadProductList();
            //}
            CurrentModuleEntity.UpdateMainObjectBindingSource();
            ChangeDisplayAndDataItemListGridView();
        }

        public void ActionNewFromManual()
        {
            ActionNew();
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            mainObject.STToolbarActionName = "Manual";
            mainObject.ARSaleOrderProductType = SaleOrderProductType.Product.ToString();
            ValidateDeliveryMethodByActionNew("Manual");
            ChangeDisplayAndDataItemListGridView();
            CSCompanysInfo objCompanysInfo = BOSApp.CurrentCompanyInfo;
            //if (objCompanysInfo != null && objCompanysInfo.CSSourceSellingPriceMethod == ADConfigValueUtility.cstSourceSellingPriceMethodMasterData)
            //    SaleOrderItemsGridControl.LoadGridViewSourceSellingPrice(false);
            //else
            //    SaleOrderItemsGridControl.LoadGridViewSourceSellingPrice(true);
            SaleOrderItemsGridControl.LoadGridViewSourceSellingPrice(false);
            if (ProductLookupControl != null)
            {
                ProductLookupControl.Properties.DataSource = LoadProductList();
            }
            SetDefaultMainObjectBySomeCreteria();
            if (DiscountProgramButtonEdit != null)
            {
                DiscountProgramButtonEdit.Enabled = true;
                DiscountProgramButtonEdit.Properties.ReadOnly = false;
            }
        }

        public void ActionNewFromSaleForecast()
        {
            ActionNew();
            SetVisibleTabPage(Tab, "fld_tabSOItemContainers,xtraTabPage5", true);
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;
            ARSaleForecastsController objSaleForecastsController = new ARSaleForecastsController();
            ARSaleForecastsInfo objSaleForecastsInfo = new ARSaleForecastsInfo();
            ARSaleForecastItemsController objSaleForecastItemsController = new ARSaleForecastItemsController();
            ACObjectsController objObjectsController = new ACObjectsController();
            List<ARSaleForecastItemsInfo> saleForecastItemCheckList = new List<ARSaleForecastItemsInfo>();
            List<ARSaleForecastItemsInfo> saleForecastItemList = objSaleForecastItemsController.GetSaleOrderItemsForBatchProduct();
            CSCompanysInfo objCompanysInfo = BOSApp.CurrentCompanyInfo;
            SaleOrderItemsGridControl.LoadGridViewSourceSellingPrice(false);
            if (ProductLookupControl != null)
            {
                ProductLookupControl.Properties.DataSource = LoadProductList();
            }
            ValidateDeliveryMethodByActionNew("NewFromSaleForecast");
            objSaleOrdersInfo.STToolbarActionName = "NewFromSaleForecastNew";
            objSaleOrdersInfo.ARSaleOrderProductType = SaleOrderProductType.Product.ToString();
            if (DiscountProgramButtonEdit != null)
            {
                DiscountProgramButtonEdit.Enabled = true;
                DiscountProgramButtonEdit.Properties.ReadOnly = false;
            }
            guiFind<ARSaleForecastItemsInfo> guiFind = new guiFind<ARSaleForecastItemsInfo>(TableName.ARSaleForecastItemsTableName, saleForecastItemList, this, true, true);
            guiFind.ShowDialog();

            if (guiFind.SelectedObjects.Count > 0 || Convert.ToInt32(guiFind.Tag) > 0)
            {
                //Choose first sale order as a template
                List<ARSaleForecastItemsInfo> templateSaleForecastItemList = (List<ARSaleForecastItemsInfo>)guiFind.SelectedObjects;

                if (guiFind.SelectedObjects != null && guiFind.SelectedObjects.Count > 0)
                {
                    saleForecastItemCheckList = (List<ARSaleForecastItemsInfo>)templateSaleForecastItemList.Where(x => x.FK_ARSaleForecastID != guiFind.SelectedObjects[0].FK_ARSaleForecastID).ToList();
                }
                if (saleForecastItemCheckList != null && saleForecastItemCheckList.Count > 0)
                {
                    MessageBox.Show(string.Format(SaleOrderLocalizedResources.ChooseMulltiSaleOrderMessage), CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    ActionCancel();
                    ActionNewFromSaleForecast();
                }

                else
                {
                    ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
                    objSaleForecastsInfo = (ARSaleForecastsInfo)objSaleForecastsController.GetObjectByID(guiFind.SelectedObjects[0].FK_ARSaleForecastID);
                    if (objSaleForecastsInfo != null)
                    {
                        //Copy customer info
                        objSaleOrdersInfo.FK_ARCustomerID = objSaleForecastsInfo.FK_ARCustomerID;
                        SetDefaultValuesFromCustomer();
                        if (objSaleOrdersInfo.FK_ARCustomerID > 0)
                        {
                            objSaleOrdersInfo.FK_ACObjectID = objSaleForecastsInfo.FK_ARCustomerID;
                            objSaleOrdersInfo.ARObjectType = ObjectType.Customer.ToString();
                            objSaleOrdersInfo.ACObjectAccessKey = string.Format("{0};{1}", objSaleOrdersInfo.FK_ACObjectID, objSaleOrdersInfo.ARObjectType);

                            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByAccessKey(objSaleOrdersInfo.ACObjectAccessKey);
                            objObjectsInfo = objObjectsController.GetObjectByIDAndType(objObjectsInfo.ACObjectID, objObjectsInfo.ACObjectType);

                            if (objObjectsInfo != null)
                            {
                                objSaleOrdersInfo.FK_GECurrencyID = objObjectsInfo.GECurrencyID == 0 ? BOSApp.CurrentCompanyInfo.FK_GECurrencyID : objObjectsInfo.GECurrencyID;
                                decimal dCurrencyExchangeRate = BOSApp.RealTimeExchageRateTransferByCurrencyAndDate(mainObject.FK_GECurrencyID, mainObject.ARSaleOrderDate);
                                objSaleOrdersInfo.ARSaleOrderExchangeRate = (dCurrencyExchangeRate > 0)
                                                                                   ? dCurrencyExchangeRate
                                                                                   : 1;
                            }
                            SetDefaultMainObjectBySomeCreteria();
                        }

                        if (objSaleForecastsInfo.ARSaleForecastType != string.Empty)
                            objSaleOrdersInfo.ARSaleOrderType = objSaleForecastsInfo.ARSaleForecastType;

                        objSaleOrdersInfo.ARSaleOrderDeliveryDate = objSaleForecastsInfo.ARSaleForecastDeliveryDate;
                        objSaleOrdersInfo.FK_ICProductAttributeTTMTID = objSaleForecastsInfo.FK_ICProductAttributeTTMTID;
                        objSaleOrdersInfo.ARPaymentMethodCombo = objSaleForecastsInfo.ARPaymentMethodCombo;
                        objSaleOrdersInfo.FK_GEPaymentTermID = objSaleForecastsInfo.FK_GEPaymentTermID;
                        entity.GenerateEntitiesFromSaleForecast(objSaleForecastsInfo, templateSaleForecastItemList);
                        objSaleOrdersInfo.ARSaleOrderCBM = entity.ARSaleOrderItemsList.Sum(x => x.ARSaleOrderItemProductCBM);
                        string salesmans = string.Join(" , ", entity.ARSalesmansList.Select(p => p.ARSalesmanName).ToArray());
                        SalesmanButtonEditControl.Text = salesmans;
                        //SetDefaultDesc();
                        UpdateContQty();
                        UpdateTotalAmount(entity.ARSaleOrderItemsList);
                        DisplayLabelText(objSaleOrdersInfo);

                        objSaleOrdersInfo.ARSaleOrderInvoiceAddressFax = objSaleForecastsInfo.ARSaleForecastInvoiceAddressFax;
                        objSaleOrdersInfo.ARSaleOrderInvoiceContactName = objSaleForecastsInfo.ARSaleForecastInvoiceContactName;
                        objSaleOrdersInfo.ARSaleOrderInvoiceAddressTaxCode = objSaleForecastsInfo.ARSaleForecastInvoiceAddressTaxCode;
                        objSaleOrdersInfo.ARSaleOrderInvoiceAddressTel = objSaleForecastsInfo.ARSaleForecastInvoiceAddressTel;
                        objSaleOrdersInfo.ARSaleOrderInvoiceAddressLine3 = objSaleForecastsInfo.ARSaleForecastInvoiceAddressLine3;

                        objSaleOrdersInfo.ARSaleOrderDeliveryAddressFax = objSaleForecastsInfo.ARSaleForecastDeliveryAddressFax;
                        objSaleOrdersInfo.ARSaleOrderDeliveryContactName = objSaleForecastsInfo.ARSaleForecastDeliveryContactName;
                        objSaleOrdersInfo.ARSaleOrderDeliveryAddressTaxCode = objSaleForecastsInfo.ARSaleForecastDeliveryAddressTaxCode;
                        objSaleOrdersInfo.ARSaleOrderDeliveryAddressTel = objSaleForecastsInfo.ARSaleForecastDeliveryAddressTel;
                        objSaleOrdersInfo.ARSaleOrderDeliveryAddressLine3 = objSaleForecastsInfo.ARSaleForecastDeliveryAddressLine3;
                        objSaleOrdersInfo.ARSaleOrderDeliveryDate = objSaleForecastsInfo.ARSaleForecastDeliveryDate;
                        //objSaleOrdersInfo.ARSaleOrderProductType = objSaleForecastsInfo.ARSaleForecastProductType;
                        objSaleOrdersInfo.ARSaleOrderSaleType = objSaleForecastsInfo.ARSaleForecastSaleType;
                        decimal totalQty = 0;
                        foreach (ARSaleOrderItemsInfo item in entity.ARSaleOrderItemsList)
                        {
                            totalQty += item.ARSaleOrderItemProductQty;
                        }
                        objSaleOrdersInfo.ARSaleOrderTotalProduct = totalQty;

                        entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
                        if (entity.ARSaleOrderItemsList.Count > 0)
                        {
                            entity.ARSaleOrderItemsList.GridControl.InvalidateLookupEditColumns();
                            entity.ARSaleOrderItemsList.GridViewFocusRow(0);
                        }

                        if (objSaleOrdersInfo.ARObjectType == ObjectType.Customer.ToString())
                        {
                            ARCommissionsController objCommissionsController = new ARCommissionsController();
                            DataSet ds = objCommissionsController.GetDataByCustomerID(objSaleOrdersInfo.FK_ACObjectID);
                            entity.SaleCommissionsList.Invalidate(ds);
                        }

                        GeneratePaymentTime(objSaleOrdersInfo.FK_GEPaymentTermID);
                        ReadonlyControl(true);
                    }
                }
                SetDefaultSaleOrderTaxPercent();
                ChangeSaleType();
                ChangeDisplayAndDataItemListGridView();
            }
            else
                ActionCancel();
        }

        public void ActionNewFromWood()
        {
            ActionNew();
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            mainObject.ARSaleOrderSaleType = SaleType.National.ToString();
            mainObject.STToolbarActionName = "NewFromWood";
            if (ARSaleOrderSaleTypeLookupEditControl != null)
                ARSaleOrderSaleTypeLookupEditControl.ReadOnly = true;
            ValidateDeliveryMethodByActionNew("NewFromWood");
            if (ARSaleOrderItemsGridControl != null)
                ARSaleOrderItemsGridControl.LoadGridViewAccordingToToolbarActionNew("NewFromWood");
            CSCompanysInfo objCompanysInfo = BOSApp.CurrentCompanyInfo;
            //if (objCompanysInfo != null && objCompanysInfo.CSSourceSellingPriceMethod == ADConfigValueUtility.cstSourceSellingPriceMethodMasterData)
            //    SaleOrderItemsGridControl.LoadGridViewSourceSellingPrice(false);
            //else
            //    SaleOrderItemsGridControl.LoadGridViewSourceSellingPrice(true);
            SaleOrderItemsGridControl.LoadGridViewSourceSellingPrice(true);
            SaleOrderItemsGridControl.ShowMessage = true;
            CurrentModuleEntity.UpdateMainObjectBindingSource();
            //SetDefaultMainObjectBySomeCreteria();
            ChangeSaleType();
            ChangeDisplayAndDataItemListGridView();
        }

        public void ActionNewFromOther()
        {
            ActionNew();
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            mainObject.ARSaleOrderSaleType = SaleType.National.ToString();
            mainObject.STToolbarActionName = "NewFromOther";
            //if (ARSaleOrderSaleTypeLookupEditControl != null)
            //    ARSaleOrderSaleTypeLookupEditControl.ReadOnly = true;
            ValidateDeliveryMethodByActionNew("NewFromOther");
            CSCompanysInfo objCompanysInfo = BOSApp.CurrentCompanyInfo;
            //if (objCompanysInfo != null && objCompanysInfo.CSSourceSellingPriceMethod == ADConfigValueUtility.cstSourceSellingPriceMethodMasterData)
            //    SaleOrderItemsGridControl.LoadGridViewSourceSellingPrice(false);
            //else
            //    SaleOrderItemsGridControl.LoadGridViewSourceSellingPrice(true);
            SaleOrderItemsGridControl.LoadGridViewSourceSellingPrice(true);
            //SetDefaultMainObjectBySomeCreteria();
            ChangeSaleType();
            CurrentModuleEntity.UpdateMainObjectBindingSource();
        }

        private void ValidateDeliveryMethodByActionNew(string actionNew)
        {
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            ARDeliveryMethodsController objDeliveryMethodsController = new ARDeliveryMethodsController();
            ARDeliveryMethodsInfo objDeliveryMethodsInfo = objDeliveryMethodsController.GetDeliveryMethodBySOCreateFromType(actionNew);
            if (objDeliveryMethodsInfo != null)
            {
                mainObject.FK_ARDeliveryMethodID = objDeliveryMethodsInfo.ARDeliveryMethodID;
                mainObject.ARSaleOrderIsDeliveryPlan = objDeliveryMethodsInfo.ARDeliveryMethodIsDeliveryPlan;
                mainObject.ARSaleOrderIsSaleOrderShipment = objDeliveryMethodsInfo.ARDeliveryMethodIsSaleOrderShipment;
                mainObject.ARSaleOrderIsInvoiceAndShipment = objDeliveryMethodsInfo.ARDeliveryMethodIsInvoiceAndShipment;
                mainObject.ARSaleOrderIsVehicleAllocation = objDeliveryMethodsInfo.ARDeliveryMethodIsVehicleAllocation;
                mainObject.ARSaleOrderIsAcceptance = objDeliveryMethodsInfo.ARDeliveryMethodIsAcceptance;
                mainObject.ARSaleOrderIsContainerLoader = objDeliveryMethodsInfo.ARDeliveryMethodIsContainerLoader;
            }
        }

        public override void ActionEdit()
        {
            InventoryStock.Visible = true;
            base.ActionEdit();
        }

        private void SetDefaultDesc()
        {
            ARSaleOrdersInfo saleOrder = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            ARCustomersController objCustomersController = new ARCustomersController();
            ARCustomersInfo customer = (ARCustomersInfo)objCustomersController.GetObjectByID(saleOrder.FK_ARCustomerID);
            if (customer != null)
            {
                saleOrder.ARSaleOrderDesc = customer.ARCustomerName;
            }
        }
        private ARSaleOrderItemWorksInfo ToSaleOrderItemWorksInfo(ARProposalItemWorksInfo objProposalItemWorksInfo)
        {

            return new ARSaleOrderItemWorksInfo()
            {
                FK_ICProductID = objProposalItemWorksInfo.FK_ICProductID,
                FK_ICDepartmentID = objProposalItemWorksInfo.FK_ICDepartmentID,
                FK_ICProductGroupID = objProposalItemWorksInfo.FK_ICProductGroupID,
                FK_ICMeasureUnitID = objProposalItemWorksInfo.FK_ICMeasureUnitID,
                ARSaleOrderItemWorkProductNo = objProposalItemWorksInfo.ARProposalItemWorkProductNo,
                ARSaleOrderItemWorkProductName = objProposalItemWorksInfo.ARProposalItemWorkProductName,
                ARSaleOrderItemWorkProductDesc = objProposalItemWorksInfo.ARProposalItemWorkProductDesc,
                ARSaleOrderItemWorkProductQty = objProposalItemWorksInfo.ARProposalItemWorkProductQty,
                ARSaleOrderItemWorkProductChargeCheck = objProposalItemWorksInfo.ARProposalItemWorkProductChargeCheck,
                ARSaleOrderItemWorkProductUnitPrice = objProposalItemWorksInfo.ARProposalItemWorkProductUnitPrice,
                ARSaleOrderItemWorkProductType = objProposalItemWorksInfo.ARProposalItemWorkProductType,
                ARSaleOrderItemWorkDiscountPerCent = objProposalItemWorksInfo.ARProposalItemWorkDiscountPerCent,
                ARSaleOrderItemWorkDiscountAmount = objProposalItemWorksInfo.ARProposalItemWorkDiscountAmount,
                ARSaleOrderItemWorkTotalAmount = objProposalItemWorksInfo.ARProposalItemWorkTotalAmount,
                ARSaleOrderItemWorkSubTotalAmount = objProposalItemWorksInfo.ARProposalItemWorkProductUnitPrice * objProposalItemWorksInfo.ARProposalItemWorkProductQty,
                ARSaleOrderItemWorkIsCost = objProposalItemWorksInfo.ARProposalItemWorkProductChargeCheck,
                ARSaleOrderItemWorkComment = objProposalItemWorksInfo.ARProposalItemWorkComment,
            };
        }

        private void ChangeDataSourceDocumentTypeLookup(bool isDefault)
        {
            ADConfigValuesController objConfigValuesController = new ADConfigValuesController();
            List<ADConfigValuesInfo> configList = new List<ADConfigValuesInfo>();
            DataSet ds = objConfigValuesController.GetADConfigValuesByGroup("SaleOrderDocumentType");

            if (ds != null && ds.Tables.Count > 0)
            {
                if (!isDefault)
                {
                    foreach (DataRow row in ds.Tables[0].Rows)
                    {
                        ADConfigValuesInfo configValues = (ADConfigValuesInfo)objConfigValuesController.GetObjectFromDataRow(row);
                        if (configValues.ADConfigKeyValue == SaleOrderDocumentType.Contract.ToString()
                            || configValues.ADConfigKeyValue == SaleOrderDocumentType.SaleOrder.ToString())
                        {
                            configList.Add(configValues);
                        }
                    }
                }
                else
                {
                    foreach (DataRow row in ds.Tables[0].Rows)
                    {
                        ADConfigValuesInfo configValues = (ADConfigValuesInfo)objConfigValuesController.GetObjectFromDataRow(row);
                        configList.Add(configValues);
                    }
                }
            }
        }

        public void ActionNewFromProposal()
        {
            CreateFromProposal = true;
            ActionNew();
            HyperLinkEditChooseProspectCustomer.Visible = false;
            ObjectAccessKeyLookupEditControl.Properties.ReadOnly = true;
            SetVisibleTabPage(Tab, "fld_tabSOItemContainers,xtraTabPage5", true);
            ChangeDataSourceDocumentTypeLookup(false);
            if (DiscountProgramButtonEdit != null)
            {
                DiscountProgramButtonEdit.Enabled = false;
                DiscountProgramButtonEdit.Properties.ReadOnly = true;
            }
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;

            ARProposalItemsController objProposalItemsController = new ARProposalItemsController();
            List<ARProposalItemsInfo> proposalList = objProposalItemsController.GetProposalsForOrderingBysUser(BOSApp.CurrentUsersInfo.ADUserID);

            ValidateDeliveryMethodByActionNew("FromNewProposal");
            objSaleOrdersInfo.STToolbarActionName = "NewFromProposal";
            objSaleOrdersInfo.ARSaleOrderProductType = SaleOrderProductType.Product.ToString();
            SaleOrderItemsGridControl.LoadGridViewSourceSellingPrice(false);
            
            //guiFind<ARProposalItemsInfo> guiFind = new guiFind<ARProposalItemsInfo>(TableName.ARProposalItemsTableName, proposalList, this, true, true);
            //guiFind.ShowDialog();
            guiChooseProposals guiFind = new guiChooseProposals(proposalList);
            guiFind.Module = this;
            if (guiFind.ShowDialog() != DialogResult.OK)
            {
                ActionCancel();
                return;
            }
            List<ARProposalItemsInfo> results = guiFind.SelectedObjects;
            if (results.Count == 0)
            {
                ActionCancel();
                return;
            }

            entity.ARReferenceProposalItems.Clear();
            entity.ARSaleOrderItemWorkList.Clear();
            entity.ARSaleOrderItemCostList.Clear();
            entity.ARSaleOrderItemWorkTaskList.Clear();
            entity.ARSaleOrderItemWorkAssetList.Clear();
            entity.ARSaleOrderItemWorkMaterialList.Clear();
            entity.ARSaleOrderItemWorkTaskList.Clear();
            ARProposalsController objProposalsController = new ARProposalsController();
            ARProposalsInfo objProposalsInfo = (ARProposalsInfo)objProposalsController.GetObjectByID(results.FirstOrDefault(o => o.FK_ARProposalID > 0).FK_ARProposalID);
            if (objProposalsInfo != null)
            {
                ACObjectsController objObjectsController = new ACObjectsController();
                ACObjectsInfo objObjectsInfo = (ACObjectsInfo)objObjectsController.GetObjectByIDAndType(objProposalsInfo.FK_ACObjectID, objProposalsInfo.ARObjectType);
                if (objObjectsInfo != null)
                {
                    if (IsActiveCheck(objObjectsInfo))
                    {
                        MessageBox.Show(PurchaseOrderLocalizedResources.IsActiveLockedError, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                    if (IsPurchaseCheck(objObjectsInfo))
                    {
                        MessageBox.Show(PurchaseOrderLocalizedResources.IsBuyingLockedErrorMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                }
                objSaleOrdersInfo.ARSaleOrderDocumentType = SaleOrderDocumentType.Contract.ToString();
                objSaleOrdersInfo.FK_ARCustomerID = objProposalsInfo.FK_ARCustomerID;
                objSaleOrdersInfo.FK_ACObjectID = objProposalsInfo.FK_ACObjectID;
                objSaleOrdersInfo.ARObjectType = objProposalsInfo.ARObjectType;
                SetDefaultInvoiceAndDeliveryFromObject(objObjectsInfo);
                SetDefaultMainObjectBySomeCreteria();
                objSaleOrdersInfo.ACObjectAccessKey = objProposalsInfo.FK_ACObjectID + ";" + objProposalsInfo.ARObjectType;
                objSaleOrdersInfo.FK_ARPriceLevelID = objProposalsInfo.FK_ARPriceLevelID;
                objSaleOrdersInfo.ARPaymentMethodCombo = objProposalsInfo.ARPaymentMethodCombo;
                objSaleOrdersInfo.ARSaleOrderDeliveryDate = objProposalsInfo.ARProposalDeliveryDate;
                objSaleOrdersInfo.ARSaleOrderDeliveryActualDate = objProposalsInfo.ARProposalDeliveryDate;
                objSaleOrdersInfo.ARSaleOrderComment = objProposalsInfo.ARProposalDesc;
                objSaleOrdersInfo.ACObjectReferenceNo = objProposalsInfo.ARProposalNo;
                objSaleOrdersInfo.ARSaleOrderReference = objProposalsInfo.ARProposalNo;
                objSaleOrdersInfo.FK_GEPaymentTermID = objProposalsInfo.FK_GEPaymentTermID;
                objSaleOrdersInfo.ARSaleOrderSaleAgreement = objProposalsInfo.PMProjectNo;
                objSaleOrdersInfo.ARSaleOrderDesc = objProposalsInfo.ARProposalName;
                objSaleOrdersInfo.FK_AROpportunityID = objProposalsInfo.FK_AROpportunityID;
                objSaleOrdersInfo.FK_ACCostCenterID = objProposalsInfo.FK_ACCostCenterID;
                objSaleOrdersInfo.FK_PMTemplateID = objProposalsInfo.FK_PMTemplateID;
                objSaleOrdersInfo.FK_PMProjectID = objProposalsInfo.FK_PMProjectID;
                objSaleOrdersInfo.FK_ARSaleContractID = objProposalsInfo.FK_ARSaleContractID;
                objSaleOrdersInfo.ARSaleOrderSaleType = string.IsNullOrWhiteSpace(objProposalsInfo.ARProposalSaleType) ? objSaleOrdersInfo.ARSaleOrderSaleType : objProposalsInfo.ARProposalSaleType;
                objSaleOrdersInfo.FK_GECurrencyID = objProposalsInfo.FK_GECurrencyID;
                objSaleOrdersInfo.FK_GECurrencyID2 = objProposalsInfo.FK_GECurrencyID2;
                CSCompanyBanksController objCompanyBanksController = new CSCompanyBanksController();
                List<CSCompanyBanksInfo> listCompanyBank = (List<CSCompanyBanksInfo>)objCompanyBanksController.GetListCompanyBanksBySaleType(objSaleOrdersInfo.ARSaleOrderSaleType);
                if (listCompanyBank != null && listCompanyBank.Count > 0)
                {
                    objSaleOrdersInfo.FK_CSCompanyBankID = objProposalsInfo.FK_CSCompanyBankID > 0 ? objProposalsInfo.FK_CSCompanyBankID : listCompanyBank.Select(o => o.CSCompanyBankID).FirstOrDefault();
                }
                objSaleOrdersInfo.ARSaleOrderExchangeRate = objProposalsInfo.ARProposalExchangeRate;
                objSaleOrdersInfo.ARSaleOrderExchangeRate2 = objProposalsInfo.ARProposalExchangeRate2;
                objSaleOrdersInfo.ARSaleOrderProject = objProposalsInfo.ARProposalProject;
                objSaleOrdersInfo.FK_GECurrencyID = objProposalsInfo.FK_GECurrencyID;
                //entity.GenerateEntityFromProposal(objProposalsInfo);
                objSaleOrdersInfo.ARSaleOrderDeliveryDate = objProposalsInfo.ARProposalDeliveryDate;
                objSaleOrdersInfo.ARPaymentMethodCombo = objProposalsInfo.ARPaymentMethodCombo;
                objSaleOrdersInfo.FK_GEPaymentTermID = objProposalsInfo.FK_GEPaymentTermID;
                objSaleOrdersInfo.ARShippingType = objProposalsInfo.ARShippingType;
                objSaleOrdersInfo.FK_GETerminalID = objProposalsInfo.FK_GETerminalID;
                objSaleOrdersInfo.ARSaleOrderPortOFDischarge = objProposalsInfo.ARProposalPortOFDischarge;
            }
            foreach (ARProposalItemsInfo item in results)
            {
                if (item != null)
                {
                    ARSaleOrderItemsInfo objSaleOrderItemsInfo = entity.GenerateSaleOrderItemFromProposalItem(item);
                    entity.ARSaleOrderItemsList.Add(objSaleOrderItemsInfo);
                    entity.ARReferenceProposalItems.Add(item.ARProposalItemID, item);

                    CurrentModuleEntity.UpdateMainObjectBindingSource();
                    DisplayLabelText(objSaleOrdersInfo);
                    entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
                    entity.ARSaleOrderItemWorkList.GridControl?.RefreshDataSource();
                    entity.ARSaleOrderItemWorkTaskList.GridControl?.RefreshDataSource();
                    entity.ARSaleOrderItemWorkMaterialList.GridControl?.RefreshDataSource();
                    entity.ARSaleOrderItemWorkAssetList.GridControl?.RefreshDataSource();
                    if (entity.ARSaleOrderItemsList.Count > 0)
                    {
                        entity.ARSaleOrderItemsList.GridControl.InvalidateLookupEditColumns();
                        entity.ARSaleOrderItemsList.GridViewFocusRow(0);
                    }
                }
                objSaleOrdersInfo.ARSaleOrderCBM = entity.ARSaleOrderItemsList.Sum(x => x.ARSaleOrderItemProductCBM);
                ARCommissionsController objCommissionsController = new ARCommissionsController();
                DataSet ds = objCommissionsController.GetDataByCustomerID(objSaleOrdersInfo.FK_ARCustomerID);
                entity.SaleCommissionsList.Invalidate(ds);
                CreateFromProposal = false;
                GeneratePaymentTime(objSaleOrdersInfo.FK_GEPaymentTermID);
            }
            SetDefaultSaleOrderTaxPercent();
            ChangeSaleType();
            ChangeDisplayAndDataItemListGridView();
        }

        public override int ActionSave()
        {
            int saleOrderID = 0;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;            
            if(Controls[SaleOrderItemsGridControlName] != null)
            {
                Controls[SaleOrderItemsGridControlName].Focus();
            }    
            entity.ARSaleOrderItemsList.EndCurrentEdit();
            entity.SaleCommissionsList.EndCurrentEdit();
            entity.ARSaleOrderPaymentTimesList.EndCurrentEdit();
            entity.SaleOrderItemContainerList.EndCurrentEdit();
            entity.SaleOrderItemOtherFeeList.EndCurrentEdit();
            entity.SaleOrderItemAllocationFeeList.EndCurrentEdit();

            for (int i = 0; i < entity.SaleOrderItemAllocationFeeList.Count; i++)
            {
                if (entity.SaleOrderItemAllocationFeeList[i].FK_ICProductID <= 0)
                {
                    entity.SaleOrderItemAllocationFeeList.RemoveAt(i);
                    i--;
                    entity.SaleOrderItemAllocationFeeList.GridControl?.RefreshDataSource();
                }
                else if (entity.SaleOrderItemAllocationFeeList[i].ARSaleOrderItemAllocationFeeFeePercent < 0)
                {
                    entity.SaleOrderItemAllocationFeeList[i].ARSaleOrderItemAllocationFeeFeePercent = 0M;
                    entity.SaleOrderItemAllocationFeeList[i].ARSaleOrderItemAllocationFeeFeeAmount = 0M;
                    entity.SaleOrderItemAllocationFeeList.GridControl?.RefreshDataSource();
                }
            }
            UpdateSaleOrderItemProductUnitPriceByOtherFee();
            entity.UpdateContQty();
            UpdateTotalAmount(entity.ARSaleOrderItemsList);
            foreach (ARSaleOrderPaymentTimesInfo paymentTime in entity.ARSaleOrderPaymentTimesList)
            {
                paymentTime.ARSaleOrderPaymentTimeBalanceDue = paymentTime.ARSaleOrderPaymentTimeAmount - paymentTime.ARSaleOrderPaymentTimeDepositBalance;
            }

            objSaleOrdersInfo.ARSaleOrderTotalProduct = entity.ARSaleOrderItemsList.Sum(o1 => o1.ARSaleOrderItemProductQty);

            ARCustomersInfo objCustomersInfo1 = objSaleOrdersInfo.CustomersInfo == null ? null : objSaleOrdersInfo.CustomersInfo.Clone() as ARCustomersInfo;
            ARSaleForecastItemsController objSaleForecastItemsController = new ARSaleForecastItemsController();
            ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();

            if (!ValidateDeliveryMethod())
                return 0;

            if (!CheckAvailableSaleDocumentDate())
                return 0;

            #region check null field
            if (objSaleOrdersInfo.FK_ACObjectID == 0 && string.IsNullOrEmpty(objSaleOrdersInfo.ARSaleOrderProspectCustomer))
            {
                MessageBox.Show(SaleOrderLocalizedResources.ObjectIDIsNullMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return 0;
            }

            if (String.IsNullOrEmpty(objSaleOrdersInfo.ARSaleOrderDeliveryAddressLine3))
            {
                MessageBox.Show(SaleOrderLocalizedResources.UpdateReceiptAddressRequireMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return 0;
            }
            if (String.IsNullOrEmpty(objSaleOrdersInfo.ARSaleOrderDeliveryContactName) &&
                MessageBox.Show(SaleOrderLocalizedResources.UpdateReceiptNameRequireMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.No)
            {
                return 0;
            }
            if (String.IsNullOrEmpty(objSaleOrdersInfo.ARSaleOrderDeliveryAddressTel)
                && MessageBox.Show(SaleOrderLocalizedResources.UpdateReceiptTelRequireMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.No)
            {
                return 0;
            }

            //if ((objSaleOrdersInfo.FK_GECurrencyID != GECurrencyID.VND) && objSaleOrdersInfo.ARSaleOrderExchangeRate == 1)
            //{
            //    MessageBox.Show(SaleOrderLocalizedResources.CurrencyConfligErrorMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //    return 0;
            //}
            if (objSaleOrdersInfo.FK_GECurrencyID == 0)
            {
                MessageBox.Show(SaleOrderLocalizedResources.CurrencyErrorMessages, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return 0;
            }

            if (string.IsNullOrWhiteSpace(objSaleOrdersInfo.ARSaleOrderSaleType))
            {
                MessageBox.Show(SaleOrderLocalizedResources.SaleStypeIsNull, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return 0;
            }
            if (string.IsNullOrWhiteSpace(objSaleOrdersInfo.ARShippingType))
            {
                MessageBox.Show(SaleOrderLocalizedResources.ShippingTypeIsNull, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return 0;
            }
            if (string.IsNullOrWhiteSpace(objSaleOrdersInfo.ARSaleOrderProductType))
            {
                MessageBox.Show(SaleOrderLocalizedResources.ARSaleOrderProductTypeIsNull, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return 0;
            }
            //if ((objSaleOrdersInfo.ARSaleOrderProductType == SaleOrderProductType.Roundwood.ToString()
            //    || objSaleOrdersInfo.ARSaleOrderProductType == SaleOrderProductType.FreshLumber.ToString()
            //    || objSaleOrdersInfo.ARSaleOrderProductType == SaleOrderProductType.DryLumber.ToString()
            //    || objSaleOrdersInfo.ARSaleOrderProductType == SaleOrderProductType.SemiProduct.ToString()
            //    || objSaleOrdersInfo.ARSaleOrderProductType == SaleOrderProductType.Product.ToString()) 
            //    && objSaleOrdersInfo.ARSaleOrderSaleType != SaleType.National.ToString()
            //    && objSaleOrdersInfo.FK_ICProductAttributeTTMTID <= 0)
            //{
            //    MessageBox.Show(SaleOrderLocalizedResources.ChooseTTMT, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //    return 0;
            //}

            //ARInvoiceRequestsController objInvoiceRequestsController = new ARInvoiceRequestsController();
            //ARInvoiceRequestsInfo objInvoiceRequestsInfo = new ARInvoiceRequestsInfo();
            //if (objSaleOrdersInfo.FK_ARInvoiceRequestID > 0)
            //{
            //    if (BOSApp.LookupTables.Contains("ARInvoiceRequests"))
            //    {
            //        DataRow row = BOSApp.GetObjectFromCatche("ARInvoiceRequests", "ARInvoiceRequestID", objSaleOrdersInfo.FK_ARInvoiceRequestID);
            //        if (row != null) objInvoiceRequestsInfo = (ARInvoiceRequestsInfo)objInvoiceRequestsController.GetObjectFromDataRow(row);
            //    }
            //    if (objInvoiceRequestsInfo == null || objInvoiceRequestsInfo.ARInvoiceRequestID == 0)
            //        objInvoiceRequestsInfo = (ARInvoiceRequestsInfo)objInvoiceRequestsController.GetObjectByID(objSaleOrdersInfo.FK_ARInvoiceRequestID);
            //}
            ARCustomersController objCustomersController = new ARCustomersController();
            ARCustomersInfo objCustomersInfo = new ARCustomersInfo();
            DataRow rowc = BOSApp.GetObjectFromCatche("ARCustomers", "ARCustomerID", objSaleOrdersInfo.FK_ACObjectID);
            if (rowc != null) objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectFromDataRow(rowc);
            else objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectByID(objSaleOrdersInfo.FK_ACObjectID);
            if (objCustomersInfo != null
                && objSaleOrdersInfo.ARObjectType == ObjectType.Customer.ToString()
                && string.IsNullOrWhiteSpace(objSaleOrdersInfo.ARSaleOrderTaxNumber)
                && objCustomersInfo.ARCustomerTypeCombo == CustomerType.Company.ToString())
            {
                MessageBox.Show(SaleOrderLocalizedResources.TaxNumberOrInvoiceRequestCannotNull, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return 0;
            }
            #endregion

            if (entity.SaleCommissionsList.Count() > 0 && entity.SaleCommissionsList.Sum(o1 => o1.ARCommissionPercent) != 100)
            {
                MessageBox.Show("Tổng % giới thiệu/giảm trừ không bằng 100%!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return 0;
            }
            if (entity.SaleCommissionsList.Sum(o1 => o1.ARCommissionAmount) != objSaleOrdersInfo.ARSaleOrderSOCommissionAmount)
            {
                MessageBox.Show("Tổng tiền giới thiệu/giảm trừ không bằng tiền giới thiệu/giảm trừ ở thông tin chung!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return 0;
            }
            if (entity.SaleOrderItemContainerList.Where(o => o.FK_GEContainerID == 0).ToList().Count > 0)
            {
                MessageBox.Show("Vui lòng nhập tên Cont trước khi lưu!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return 0;
            }
            if (entity.ARSaleOrderItemsList.Where(o => String.IsNullOrEmpty(o.ARSaleOrderItemGrantedFrom)).ToList().Count > 0)
            {
                MessageBox.Show("Vui lòng chọn Cấp từ cho Danh sách sản phẩm trước khi lưu!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return 0;
            }
            List<int> errorMessages = new List<int>();
            ICPriceCalculationMethodsController objPriceCalculationMethodsController = new ICPriceCalculationMethodsController();
            ICPriceCalculationMethodsInfo objPriceCalculationMethodsInfo = new ICPriceCalculationMethodsInfo();
            bool isSpecific = false;

            ICProductsController objProductsController = new ICProductsController();
            string messages = string.Empty;
            if (errorMessages.Count() > 0)
            {
                messages = objProductsController.GetProductNoByRef(string.Join(",", errorMessages.Select(o => o.ToString()).ToArray()));
                MessageBox.Show(string.Format(SaleOrderLocalizedResources.ProductSerialIsRequierMessages, messages), CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return 0;
            }

            if (IsSave == true)
            {
                return 0;
            }

            //if (!CheckGecurrencies())
            //{
            //    return 0;
            //}
            decimal saleOrderPaymentTimeBalanceDue = entity.ARSaleOrderPaymentTimesList.Sum(s => s.ARSaleOrderPaymentTimeBalanceDue);
            if (Math.Round(objSaleOrdersInfo.ARSaleOrderTotalAmount, 2, MidpointRounding.AwayFromZero) < Math.Round(saleOrderPaymentTimeBalanceDue, 2, MidpointRounding.AwayFromZero))
            {
                MessageBox.Show(SaleOrderLocalizedResources.InvalidPaymentTimeAmount, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return 0;
            }

            #region check other fee
            decimal checkFee = entity.SaleOrderItemOtherFeeList.Sum(o => o.ARSaleOrderItemOtherFeeTotalPrice) - entity.SaleOrderItemAllocationFeeList.Sum(o => o.ARSaleOrderItemAllocationFeeFeeAmount);
            if(checkFee != 0)
            {
                MessageBox.Show("Chi phí cộng thêm phân bổ chưa đúng" + Environment.NewLine + "Vui lòng kiểm tra lại!"
                                , CommonLocalizedResources.MessageBoxDefaultCaption
                                , MessageBoxButtons.OK, MessageBoxIcon.Error);
                return 0;
            }
            checkFee = entity.SaleOrderItemAllocationFeeList.Sum(o => o.ARSaleOrderItemAllocationFeeFeePercent);
            if (entity.SaleOrderItemAllocationFeeList.Count > 0 && checkFee != 100)
            {
                MessageBox.Show("Phần trăm phân bổ Chi phí cộng thêm chưa đúng" + Environment.NewLine + "Vui lòng kiểm tra lại!"
                                , CommonLocalizedResources.MessageBoxDefaultCaption
                                , MessageBoxButtons.OK, MessageBoxIcon.Error);
                return 0;
            }

            #endregion
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByAccessKey(objSaleOrdersInfo.ACObjectAccessKey);
            objObjectsInfo = objObjectsController.GetObjectByIDAndType(objObjectsInfo.ACObjectID, objObjectsInfo.ACObjectType);

            if (objObjectsInfo != null)
            {
                if (IsActiveCheck(objObjectsInfo))
                {
                    MessageBox.Show(PurchaseOrderLocalizedResources.IsActiveLockedError, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return 0;
                }

                if (IsPurchaseCheck(objObjectsInfo))
                {
                    MessageBox.Show(PurchaseOrderLocalizedResources.IsBuyingLockedErrorMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return 0;
                }
            }
            if (SaleOrderCommentEditControl != null)
                objSaleOrdersInfo.ARSaleOrderComment = SaleOrderCommentEditControl.OpenXmlBytes;
            if (SaleOrderInternalCommentRichEdit != null)
                objSaleOrdersInfo.ARSaleOrderInternalComment = SaleOrderInternalCommentRichEdit.OpenXmlBytes;
            if (IsEditAfterCompleting)
            {
                ARProposalItemsController objProposalItemsController = new ARProposalItemsController();
                List<ARProposalItemsInfo> proposalItemList = new List<ARProposalItemsInfo>();
                ARSaleOrderItemsInfo objSaleOrderItemsInfo = new ARSaleOrderItemsInfo();
                int[] proposalIDList = entity.ARSaleOrderItemsList.Select(o => o.FK_ARProposalID).Where(o => o != 0).Distinct().ToArray();
                if (proposalIDList.Length > 0)
                {
                    List<ARProposalItemsInfo> proposalItem = new List<ARProposalItemsInfo>();
                    proposalIDList.ToList().ForEach(o =>
                    {
                        proposalItem = objProposalItemsController.GetProposalItemsByProposalID(o);
                        if (proposalItem.Count() > 0)
                            proposalItemList.AddRange(proposalItem);
                    });
                    List<string> messagesErrors = new List<string>();
                    proposalItemList.ForEach(o =>
                    {
                        objSaleOrderItemsInfo = (ARSaleOrderItemsInfo)entity.ARSaleOrderItemsList.Where(o1 => o1.FK_ARProposalItemID == o.ARProposalItemID).FirstOrDefault();
                        if (objSaleOrderItemsInfo != null && o.ARProposalItemProductQty < objSaleOrderItemsInfo.ARSaleOrderItemProductQty)
                        {
                            messagesErrors.Add(o.ARProposalItemProductNo);
                        }
                    });
                    if (messagesErrors.Count > 0)
                    {
                        MessageBox.Show("Sản phẩm " + string.Join(",", messagesErrors.ToArray()) + " có số lượng lớn hơn số lượng trong báo giá !!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return saleOrderID;
                    }
                }
                List<ARSaleOrderItemsInfo> saleOrderInventoryList = entity.ARSaleOrderItemsList.Where(o => o.ARSaleOrderItemGrantedFrom == SaleOrderItemGrantedFrom.Inventory.ToString())
                                                                                               .Select(o => o.Clone() as ARSaleOrderItemsInfo)
                                                                                               .ToList();
                BOSItemsEntityList<ARSaleOrderItemsInfo> saleOrderCheckedList = new BOSItemsEntityList<ARSaleOrderItemsInfo>();
                saleOrderCheckedList.InitBOSList(entity,
                                                 TableName.ARSaleOrdersTableName,
                                                 TableName.ARSaleOrderItemsTableName,
                                                 BOSItemsEntityList<ARSaleOrderItemsInfo>.cstRelationForeign);

                ARSaleOrderItemsController objSaleOrderItemsController = new ARSaleOrderItemsController();
                ARSaleOrderItemsInfo item = new ARSaleOrderItemsInfo();
                saleOrderInventoryList.ForEach(o =>
                {
                    if (o.ARSaleOrderItemID > 0)
                        item = (ARSaleOrderItemsInfo)objSaleOrderItemsController.GetObjectByID(o.ARSaleOrderItemID);
                    if (item == null)
                        return;

                    if (item.ARSaleOrderItemProductQty >= o.ARSaleOrderItemProductQty && o.ARSaleOrderItemGrantedFrom == item.ARSaleOrderItemGrantedFrom)
                        return;

                    if (o.ARSaleOrderItemGrantedFrom != SaleOrderItemGrantedFrom.Inventory.ToString())
                        return;

                    o.ARSaleOrderItemProductQty = o.ARSaleOrderItemProductQty - item.ARSaleOrderItemProductQty;
                    saleOrderCheckedList.Add(o.Clone() as ARSaleOrderItemsInfo);
                });

                if (saleOrderCheckedList.Count() > 0 && saleOrderCheckedList.IsInvalidInventory(TransactionUtil.cstInventoryShipment))
                {
                    return 0;
                }

                objSaleOrdersInfo.ARSaleOrderStatus = SaleOrderStatus.EditAfterComplete.ToString();
                entity.UpdateMainObjectBindingSource();
            }

            {
                if (!CustomerCanBuy(objCustomersInfo))
                {
                    return 0;
                }
                //if (!CheckProductUnitPrice())
                //{
                //    return 0;
                //}

                saleOrderID = base.ActionSave();
                if (saleOrderID > 0)
                {
                    entity.InvalidateItemComponents();
                    if (IsEditAfterCompleting)
                    {
                        ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, true);
                        ActionComplete();
                        IsEditAfterCompleting = false;
                    }
                    SaveSaleOrderFile();
                    SavePaymentTimeTemplateList();
                    InvalidateToolbar();
                }
            }
            if (IsEditPrice)
            {
                GLHelper.PostedTransactions(this.Name, objSaleOrdersInfo.ARSaleOrderID, ModulePostingType.SaleOrder, ModulePostingType.Allocation, ModulePostingType.InvoiceTrans);
            }
            IsEditAfterPayment = false;
            IsEditPrice = false;
            LoadControls(false);

            objSaleOrdersController.UpdateCRMTypeAndOpportunity(objSaleOrdersInfo.ARSaleOrderID);
            entity.SetPropertyChangeEventLock(false);
            if (objCustomersInfo1 != null) CreateCustomer(objCustomersInfo1);
            entity.UpdateMainObjectBindingSource();
            entity.SetPropertyChangeEventLock(true);
            return saleOrderID;
            LoadControlByEditPrice(IsEditPrice);
        }

        public void SaveSaleOrderFile()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            List<ARSaleOrderTemplatesInfo> SaleOrderTemplatesList = entity.SaleOrderTemplatesList.ToList();

            ARSaleOrderTemplatesController objSaleOrderTemplatesController = new ARSaleOrderTemplatesController();
            ARSaleOrderTemplatesInfo objSaleOrderTemplatesInfo = new ARSaleOrderTemplatesInfo();
            entity.SetPropertyChangeEventLock(true);
            string value = string.Empty;
            SaleOrderTemplatesList.ForEach(o =>
            {
                if (!string.IsNullOrEmpty(o.ARSaleOrderTemplateFileGUID))
                    return;

                entity.SaleOrderTemplateURLDic.TryGetValue(o.ARSaleOrderTemplateID, out value);
                if (string.IsNullOrEmpty(value))
                    return;

                o.ARSaleOrderTemplateFileGUID = ApiClientHelper.UpdateFile(value);
                objSaleOrderTemplatesController.UpdateObject(o);
            });
            entity.SaleOrderTemplateURLDic.Clear();
            entity.SetPropertyChangeEventLock(false);
            entity.UpdateMainObjectBindingSource();
            entity.SaleOrderTemplatesList.GridControl?.RefreshDataSource();
        }

        public void SavePaymentTimeTemplateList()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrderPaymentTimeTemplatesController controller = new ARSaleOrderPaymentTimeTemplatesController();
            entity.PaymentTimeTemplateList.ForEach(o =>
            {
                if (!string.IsNullOrEmpty(o.ARSaleOrderPaymentTimeTemplateFileGUID))
                    return;

                o.ARSaleOrderPaymentTimeTemplateFileGUID = ApiClientHelper.UpdateFile(o.FullPathFile);
                controller.UpdateObject(o);
            });
            entity.PaymentTimeTemplateList = new List<ARSaleOrderPaymentTimeTemplatesInfo>();
        }

        public bool CheckGecurrencies()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;
            if (objSaleOrdersInfo.ARSaleOrderSaleType == SaleType.International.ToString()
                && objSaleOrdersInfo.FK_GECurrencyID == GECurrencyID.VND)
            {
                MessageBox.Show("Vui lòng chọn loại tiền tệ", CommonLocalizedResources.MessageBoxDefaultCaption,
                                                                MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }
            if (objSaleOrdersInfo.ARSaleOrderSaleType == SaleType.National.ToString()
                && (objSaleOrdersInfo.FK_GECurrencyID != GECurrencyID.VND || objSaleOrdersInfo.ARSaleOrderExchangeRate != 1))
            {
                MessageBox.Show("Vui lòng chọn lại loại tiền tệ và tỷ giá", CommonLocalizedResources.MessageBoxDefaultCaption,
                                                                MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }
            return true;
        }

        public bool CheckProductUnitPrice()
        {
            if (!IsEditAfterPayment)
            {
                SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                ICProductsController objProductsController = new ICProductsController();
                List<ICProductsInfo> productIsPromotionList = objProductsController.GetAllProductIsPromotion();
                foreach (ARSaleOrderItemsInfo objSaleOrderItemsInfo in entity.ARSaleOrderItemsList)
                {
                    if (objSaleOrderItemsInfo.ICProductUnitPrice != null && objSaleOrderItemsInfo.ICProductUnitPrice == 0
                                                          && productIsPromotionList.Where(p => p.ICProductID == objSaleOrderItemsInfo.FK_ICProductID).Count() == 0)
                    {
                        if (MessageBox.Show(string.Format(SaleOrderLocalizedResources.NonProductUnitPrice, objSaleOrderItemsInfo.ARSaleOrderItemProductName),
                                            CommonLocalizedResources.MessageBoxDefaultCaption,
                                            MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.No)
                        {
                            return false;
                        }
                    }
                }
            }
            return true;
        }

        public override bool ActionComplete()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;

            ICTransactionsController objTransactionsController = new ICTransactionsController();
            ICTransactionsInfo objTransactionsInfo = new ICTransactionsInfo();
            int userGroupID = BOSApp.CurrentUserGroupInfo.ADUserGroupID;
            List<string> errorMessageList = new List<string>();
            //if (!IsEditAfterCompleting)
            //{
                //BOSItemsEntityList<ARSaleOrderItemsInfo> saleOrderCheckedList = new BOSItemsEntityList<ARSaleOrderItemsInfo>();
                //saleOrderCheckedList.InitBOSList(entity,
                //                                 TableName.ARSaleOrdersTableName,
                //                                 TableName.ARSaleOrderItemsTableName,
                //                                 BOSItemsEntityList<ARSaleOrderItemsInfo>.cstRelationForeign);

                //ICPriceCalculationMethodsController objPriceCalculationMethodsController = new ICPriceCalculationMethodsController();
                //ICPriceCalculationMethodsInfo objPriceCalculationMethodsInfo = new ICPriceCalculationMethodsInfo();

                //entity.ARSaleOrderItemsList.ForEach(o =>
                //{
                //    if (o.ARSaleOrderItemGrantedFrom != SaleOrderItemGrantedFrom.Inventory.ToString())
                //        return;

                //    saleOrderCheckedList.Add(o.Clone() as ARSaleOrderItemsInfo);
                //});
                //if (saleOrderCheckedList.IsInvalidInventory(TransactionUtil.cstInventoryShipment))
                //{
                //    return false;
                //}
            //}
            bool isCompleted = base.ActionComplete();
            if (isCompleted)
            {
                ////////////////Move out transaction////////////////
                (new ARSaleOrdersController()).UpdateCustomerStatus(objSaleOrdersInfo.ARSaleOrderID, CustomerStatus.Ordered.ToString());

                //Update reference sale order
                if (!string.IsNullOrEmpty(objSaleOrdersInfo.ARSaleOrderReference))
                    entity.UpdateReferenceSaleForecastItems();
                //Update ARProposalItems
                entity.UpdateARProposalItemsBySaleOrderItem();

                GLHelper.PostedTransactions(this.Name, objSaleOrdersInfo.ARSaleOrderID, ModulePostingType.SaleOrder, ModulePostingType.Allocation, ModulePostingType.InvoiceTrans);
                ////////////////Move out transaction////////////////

                entity.ComponentSaleOrderItemList.BackupList.Clear();
                entity.ComponentSaleOrderItemList.ForEach(o => entity.ComponentSaleOrderItemList.BackupList.Add((ARSaleOrderItemsInfo)o.Clone()));

                if (objSaleOrdersInfo.ARSaleOrderStatus == SaleOrderStatus.Approved.ToString() ||
                    objSaleOrdersInfo.ARSaleOrderStatus == SaleOrderStatus.Confirmed.ToString() ||
                    objSaleOrdersInfo.ARSaleOrderStatus == SaleOrderStatus.Incomplete.ToString())
                {
                    EnableFieldGroupControls(SaleOrderModule.FieldGroupDeposit, true);
                }
                objSaleOrdersInfo.FK_HREmployeeCompletedID = BOSApp.CurrentUsersInfo.FK_HREmployeeID;
                entity.UpdateMainObject();
            }
            return isCompleted;
        }

        public bool IsInvalidInventoryStockQty(List<ARSaleOrderItemsInfo> inventorySaleOrderList)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            if (inventorySaleOrderList.Count() == 0)
                return false;

            BOSItemsEntityList<ARSaleOrderItemsInfo> mergedItems = new BOSItemsEntityList<ARSaleOrderItemsInfo>();
            mergedItems.InitBOSList(entity, TableName.ARSaleOrdersTableName, TableName.ARSaleOrderItemsTableName);
            mergedItems.Invalidate(inventorySaleOrderList);
            return mergedItems.IsInvalidInventoryStockQty();
        }

        public bool CheckInventoryStockQty(ARSaleOrderItemsInfo objSaleOrderItemsInfo, ICInventoryStocksInfo objInventoryStocksInfo)
        {
            if (objInventoryStocksInfo == null)
                return false;
            if (objSaleOrderItemsInfo.ARSaleOrderItemProductQty - objSaleOrderItemsInfo.ARSaleOrderItemCanceledQty > objInventoryStocksInfo.ICInventoryStockQuantity - objInventoryStocksInfo.ICInventoryStockSaleOrderQuantity)
                return false;
            return true;
        }

        public override int SaveObjectHistory(string strUserAction, int iObjectID)
        {
            int objectHistoryID = base.SaveObjectHistory(strUserAction, iObjectID);
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;
            if (Toolbar.IsEditAction())
            {
                if (IsEditAfterCompleting)
                {
                    entity.SaveHistoryDetails(objectHistoryID, OldSaleOrder, objSaleOrdersInfo);
                }
                OldSaleOrder = (ARSaleOrdersInfo)objSaleOrdersInfo.Clone();
            }

            return objectHistoryID;
        }

        public void BrowseFile()
        {
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Title = "Save file as...";
            dialog.Filter = "Text files (*.txt)|*.txt|All files (*.*)|*.*";
            //dialog.Filter = "Text files (*.txt;*.doc;*.docx;*.xls;*.xlsx;*.pdf)|*.txt;*.doc;*.docx;*.xls;*.xlsx;*.pdf";
            dialog.RestoreDirectory = true;
            if (dialog.ShowDialog() == DialogResult.OK)
            {
                BOSTextBox filePathTextBox = (BOSTextBox)Controls[SaleOrderModule.FilePathTextBoxName];
                filePathTextBox.Text = dialog.FileName;
                //DocumentFileName = dialog.SafeFileName;
            }
        }

        public void InvalidateTemplateGridControl()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            entity.SaleOrderTemplatesList.Invalidate(objSaleOrdersInfo.ARSaleOrderID);
            foreach (ARSaleOrderTemplatesInfo objSaleOrderTemplatesInfo in entity.SaleOrderTemplatesList)
            {
                BaseTransactionModule objBaseTransactionModule = new BaseTransactionModule();
                HREmployeesInfo objEmployeesInfo = (HREmployeesInfo)objBaseTransactionModule.GetEmployeeByUsername(objSaleOrderTemplatesInfo.AACreatedUser);
                string SaleOrderID = objSaleOrderTemplatesInfo.FK_ARSaleOrderID.ToString();
                objSaleOrderTemplatesInfo.ARSaleOrderTemplateName = objSaleOrderTemplatesInfo.ARSaleOrderTemplateName.Replace(SaleOrderID + "_", "");
                objSaleOrderTemplatesInfo.UserCreatedFullname = objEmployeesInfo.HREmployeeName;
            }
            SaleOrderTemplateGridControl?.RefreshDataSource();
        }

        public void ActionEditAfterCompleting()
        {
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            if (objSaleOrdersInfo.ARSaleOrderID > 0)
            {
                if (entity.ARSaleOrderPaymentTimesList.Sum(o => o.ARSaleOrderPaymentTimeDepositBalance) > 0)
                {
                    MessageBox.Show(SaleOrderLocalizedResources.ValidateAfterCompleteMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                ARProductionPlanningItemsController objProposalsController = new ARProductionPlanningItemsController();
                ARProductionPlanningItemsInfo objProposalsInfo = (ARProductionPlanningItemsInfo)objProposalsController.GetFirstObjectByForeignColumn("FK_ARSaleOrderID", objSaleOrdersInfo.ARSaleOrderID);
                if (objProposalsInfo != null)
                {
                    MessageBox.Show(SaleOrderLocalizedResources.NotExistsMMProposals, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                ARDeliveryPlansController objARDeliveryPlansController = new ARDeliveryPlansController();
                List<ARDeliveryPlansInfo> listPlan = objARDeliveryPlansController.GetDeliveryPlansBySaleOrder(objSaleOrdersInfo.ARSaleOrderID);
                if (listPlan.Count() > 0)
                {
                    MessageBox.Show(SaleOrderLocalizedResources.CancelCompleteExistsDeliveryPlan
                        + Environment.NewLine
                        + string.Join(",", listPlan.Select(o => o.ARDeliveryPlanNo).Distinct().ToArray())
                        , CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return ;
                }

                ICShipmentsController objICShipmentsController = new ICShipmentsController();
                List<ICShipmentsInfo> listshipmentSaleOrder = objICShipmentsController.GetShipmentListBySaleOrder(objSaleOrdersInfo.ARSaleOrderID);
                if (listPlan.Count() > 0)
                {
                    MessageBox.Show(SaleOrderLocalizedResources.CancelCompleteExistsShipment
                        + Environment.NewLine
                        + string.Join(",", listshipmentSaleOrder.Select(o => o.ICShipmentNo).Distinct().ToArray())
                        , CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return ;
                }

                ARInvoicesController objARInvoicesController = new ARInvoicesController();
                List<ARInvoicesInfo> listInvoice = objARInvoicesController.GetInvoiceListBySaleOrder(objSaleOrdersInfo.ARSaleOrderID);
                if (listPlan.Count() > 0)
                {
                    MessageBox.Show(SaleOrderLocalizedResources.CancelCompleteExistsInvoice
                        + Environment.NewLine
                        + string.Join(",", listInvoice.Select(o => o.ARInvoiceNo).Distinct().ToArray())
                        , CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return ;
                }
            }
            entity.CancelCompleteTransaction();
            (new ARSaleOrdersController()).RollBackSOQtySaleForcastOrProposal(objSaleOrdersInfo.ARSaleOrderID, BOSApp.CurrentUsersInfo.ADUserName);
            GLHelper.UnPostedTransactions(this.Name, objSaleOrdersInfo.ARSaleOrderID, ModulePostingType.SaleOrder, ModulePostingType.Allocation, ModulePostingType.InvoiceTrans);
            InvalidateToolbar();
        }

        public override void Invalidate(int iObjectID)
        {
            base.Invalidate(iObjectID);

            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrderItemsGridControl.LoadGridView(objSaleOrdersInfo.ARSaleOrderType);
            EnableFieldGroupControls(SaleOrderModule.FieldGroupDeposit, false);
            if (!IsTransactionLocked())
            {
                if (objSaleOrdersInfo.ARSaleOrderStatus == SaleOrderStatus.Confirmed.ToString() ||
                objSaleOrdersInfo.ARSaleOrderStatus == SaleOrderStatus.Incomplete.ToString())
                {
                    EnableFieldGroupControls(SaleOrderModule.FieldGroupDeposit, true);
                }
            }
            ARInvoicesController objARInvoicesController = new ARInvoicesController();
            List<ARInvoicesInfo> listInvoice = objARInvoicesController.GetInvoiceListBySaleOrder(objSaleOrdersInfo.ARSaleOrderID);
            if (listInvoice.Count() > 0) fld_btnSaveCommision.Visible = false; else fld_btnSaveCommision.Visible = true;
            OldSaleOrder = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject.Clone();
            

            string salesmans = string.Join(" , ", entity.ARSalesmansList.Select(p => p.ARSalesmanName).ToArray());
            if(SalesmanButtonEditControl != null)
            SalesmanButtonEditControl.Text = salesmans;

            if (SaleOrderCommentEditControl != null)
            {
                SaleOrderCommentEditControl.OpenXmlBytes = (objSaleOrdersInfo.ARSaleOrderComment != null && objSaleOrdersInfo.ARSaleOrderComment.Length > 0) ?
                    objSaleOrdersInfo.ARSaleOrderComment : null;
                if (string.IsNullOrWhiteSpace(SaleOrderCommentEditControl.Text))
                {
                    byte[] RTFByte = BOSApp.GetDefaultDescConfig(this.Name, objSaleOrdersInfo.ARSaleOrderSaleType);
                    if (SaleOrderCommentEditControl != null)
                    {
                        if (RTFByte != null && RTFByte.Length > 0)
                        {
                            MemoryStream RTFStream = new MemoryStream(RTFByte);
                            SaleOrderCommentEditControl.LoadDocument(RTFStream, DocumentFormat.Rtf);
                        }
                        else
                        {
                            SaleOrderCommentEditControl.OpenXmlBytes = null;
                        }
                    }
                }    
            }    
            if (SaleOrderInternalCommentRichEdit != null)
            {
                SaleOrderInternalCommentRichEdit.OpenXmlBytes = (objSaleOrdersInfo.ARSaleOrderInternalComment != null && objSaleOrdersInfo.ARSaleOrderInternalComment.Length > 0)
                    ? objSaleOrdersInfo.ARSaleOrderInternalComment : null;
            }
            if (objSaleOrdersInfo.STToolbarActionName.Equals("NewFromWood"))
                //|| objSaleOrdersInfo.STToolbarActionName.Equals("NewFromOther"))
            {
                ARSaleOrderSaleTypeLookupEditControl.ReadOnly = true;
                SetVisibleTabPage(Tab, "fld_tabSOItemContainers,xtraTabPage5", false);
            }
            else
            {
                if (objSaleOrdersInfo.STToolbarActionName.Equals("Manual"))
                    SetVisibleTabPage(Tab, "fld_tabSOItemContainers,xtraTabPage5", true);
                ARSaleOrderSaleTypeLookupEditControl.ReadOnly = false;
                SetVisibleTabPage(Tab, "fld_tabSOItemContainers,xtraTabPage5", true);
            }

            if(DiscountProgramButtonEdit != null)
            {
                if (objSaleOrdersInfo.STToolbarActionName == "NewFromProposal")
                {
                    DiscountProgramButtonEdit.Enabled = false;
                    DiscountProgramButtonEdit.Properties.ReadOnly = true;
                }
                else
                {
                    DiscountProgramButtonEdit.Enabled = true;
                    DiscountProgramButtonEdit.Properties.ReadOnly = false;
                }    
            }

            if (entity.ARSaleOrderItemsList.GridControl != null)
            {
                bool isWoodType = BOSApp.IsWoodTypeDocument(objSaleOrdersInfo.ARSaleOrderProductType, entity.ARSaleOrderItemsList.FirstOrDefault());
                ChangeDisplayColumnByWoodType(entity.ARSaleOrderItemsList.GridControl, isWoodType);
            }
            if (ProductLookupControl != null)
            {
                ProductLookupControl.Properties.DataSource = LoadProductList();
            }
            LoadControlByEditPrice(IsEditPrice);
            SaleOrderItemsGridControl.ShowMessage = true;
            IsEditPaymentTime = false;
            ARDiscountProgramsController objDiscountProgramsController = new ARDiscountProgramsController();
            ARDiscountProgramsInfo objDiscountProgramsInfo = (ARDiscountProgramsInfo)objDiscountProgramsController.GetObjectByID(objSaleOrdersInfo.FK_ARDiscountProgramID);
            if (objDiscountProgramsInfo != null)
                objSaleOrdersInfo.ARDiscountProgramName = objDiscountProgramsInfo.ARDiscountProgramName;
            objSaleOrdersInfo.ARSaleOrderItemGrantedFrom = entity.ARSaleOrderItemsList.Select(o => o.ARSaleOrderItemGrantedFrom).FirstOrDefault();
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
            entity.UpdateMainObjectBindingSource();
        }

        public override void InvalidateToolbar()
        {
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            ParentScreen.SetEnableOfToolbarButton("PrintRP_SaleOrderExport", false);
            ParentScreen.SetEnableOfToolbarButton("PrintRP_SaleOrderExportDraft", false);
            ParentScreen.SetEnableOfToolbarButton(SaleOrderModule.ToolbarButtonEditAfterCompleting, false);
            ParentScreen.SetEnableOfToolbarButton(SaleOrderModule.ToolbarButtonTakePayment, false);
            ParentScreen.SetEnableOfToolbarButton(CancelDepositButtonName, false);
            if(ButtonEditOtherFee != null)
            {
                ButtonEditOtherFee.Enabled = false;
            }
            
            if (objSaleOrdersInfo.ARSaleOrderID > 0)
            {
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, true);
                ParentScreen.SetEnableOfToolbarButton(SaleOrderModule.ToolbarButtonEditAfterPayment, false);
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, true);
                ParentScreen.SetEnableOfToolbarButton("Closed", false);
                ParentScreen.SetEnableOfToolbarButton("CancelComplete", false);
                if (objSaleOrdersInfo.ARSaleOrderStatus == SaleOrderStatus.Confirmed.ToString() ||
                    objSaleOrdersInfo.ARSaleOrderStatus == SaleOrderStatus.Canceled.ToString() ||
                    objSaleOrdersInfo.ARSaleOrderStatus == SaleOrderStatus.Incomplete.ToString() ||
                    objSaleOrdersInfo.ARSaleOrderStatus == SaleOrderStatus.Shipped.ToString())
                {
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, false);
                    ParentScreen.SetEnableOfToolbarButton(SaleOrderModule.ToolbarButtonEditAfterPayment, true);
                    InventoryStock.Visible = false;
                    ParentScreen.SetEnableOfToolbarButton("Closed", true);
                }
               
                ParentScreen.SetEnableOfToolbarButton(SaleOrderModule.ToolbarButtonTransferDeposit, false);
                
                if (objSaleOrdersInfo.ARSaleOrderStatus == SaleOrderStatus.Confirmed.ToString() ||
                    objSaleOrdersInfo.ARSaleOrderStatus == SaleOrderStatus.Incomplete.ToString())
                {
                    ParentScreen.SetEnableOfToolbarButton(SaleOrderModule.ToolbarButtonTakePayment, true);
                    ParentScreen.SetEnableOfToolbarButton(SaleOrderModule.ToolbarButtonTransferDeposit, true);
                    ParentScreen.SetEnableOfToolbarButton(SaleOrderModule.ToolbarButtonEditAfterCompleting, true);
                    ParentScreen.SetEnableOfToolbarButton(SaleOrderModule.ToolbarButtonEditAfterPayment, true);
                }

                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonTransfer, false);
                if (objSaleOrdersInfo.ARSaleOrderStatus == SaleOrderStatus.Confirmed.ToString() &&
                    !objSaleOrdersInfo.IsTransferred)
                {
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonTransfer, true);
                    ParentScreen.SetEnableOfToolbarButton("CancelComplete", true);
                }

                if (objSaleOrdersInfo.ARSaleOrderStatus == SaleOrderStatus.Complete.ToString())
                {
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, false);
                    ParentScreen.SetEnableOfToolbarButton(SaleOrderModule.ToolbarButtonEditAfterCompleting, true);
                    ParentScreen.SetEnableOfToolbarButton(SaleOrderModule.ToolbarButtonEditAfterPayment, true);
                    ParentScreen.SetEnableOfToolbarButton("Closed", true);
                }

                if (objSaleOrdersInfo.ARSaleOrderStatus == SaleOrderStatus.New.ToString())
                {
                    ParentScreen.SetEnableOfToolbarButton("PrintRP_SaleOrderExportDraft", true);
                }
                else
                {
                    ParentScreen.SetEnableOfToolbarButton("PrintRP_SaleOrderExport", true);
                }    

                ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
                // Chưa làm DNSX
                bool check = objSaleOrdersController.CheckInvalidateToolbarAfterCompleting(objSaleOrdersInfo.ARSaleOrderID);
                if (!check)
                {
                    ParentScreen.SetEnableOfToolbarButton(SaleOrderModule.ToolbarButtonEditAfterCompleting, false);
                }
                //TNDLoc [ADD][07/11/2015][Sale Payment Process],START
                SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                bool isCanceled = false;
                
                foreach (ARSaleOrderPaymentTimesInfo item in entity.ARSaleOrderPaymentTimesList)
                {
                    if (item.ARSaleOrderPaymentTimePaymentType == SaleOrderPaymentTimePaymentType.Deposit.ToString() &&
                       (item.ARSaleOrderPaymentTimeStatus == SaleOrderPaymentTimeStatus.Canceled.ToString() || item.ARSaleOrderPaymentTimeStatus == SaleOrderPaymentTimeStatus.Paid.ToString()))
                    {
                        isCanceled = true;
                        break;
                    }
                }
                if (!isCanceled)
                {
                    ParentScreen.SetEnableOfToolbarButton(CancelDepositButtonName, true);
                }
                //TNDLoc [ADD][07/11/2015][Sale Payment Process],END

                //TKChinh [Add] [07/07/2016] Issue Edit Price
                ARInvoiceItemsController objInvoiceItemsController = new ARInvoiceItemsController();
                int count = 0;
                count = objInvoiceItemsController.GetCountInvoiceBySaleOrderID(objSaleOrdersInfo.ARSaleOrderID);
                if (count == 0)
                {
                    if (objSaleOrdersInfo.ARSaleOrderStatus == SaleOrderStatus.Confirmed.ToString())
                    {
                        ParentScreen.SetEnableOfToolbarButton("EditPrice", true);
                    }
                    else
                    {
                        ParentScreen.SetEnableOfToolbarButton("EditPrice", false);
                    }
                }
                else
                {
                    ParentScreen.SetEnableOfToolbarButton("EditPrice", false);
                }

                if (Toolbar.IsEditAction() || Toolbar.IsNewAction())
                {
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, false);
                }

                if(Toolbar.IsNullOrNoneAction()
                    && ButtonEditOtherFee != null
                    && objSaleOrdersInfo.ARSaleOrderStatus != SaleOrderStatus.New.ToString()
                    && objSaleOrdersInfo.ARSaleOrderStatus != SaleOrderStatus.Canceled.ToString()
                    && objSaleOrdersInfo.ARSaleOrderStatus != SaleOrderStatus.Shipped.ToString())
                {
                    ButtonEditOtherFee.Enabled = true;
                }    

                if (objSaleOrdersInfo.ARSaleOrderStatus == SaleOrderStatus.Closed.ToString())
                {
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
                    ParentScreen.SetEnableOfToolbarButton(SaleOrderModule.ToolbarButtonEditAfterPayment, false);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, false);
                    ParentScreen.SetEnableOfToolbarButton(SaleOrderModule.ToolbarButtonEditAfterCompleting, false);
                    ParentScreen.SetEnableOfToolbarButton(SaleOrderModule.ToolbarButtonTakePayment, false);
                    ParentScreen.SetEnableOfToolbarButton(SaleOrderModule.ToolbarButtonTransferDeposit, false);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonTransfer, false);
                    ParentScreen.SetEnableOfToolbarButton("Closed", false);
                }
            }
            base.InvalidateToolbar();
        }
        public override bool ActionCancelComplete()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            if (objSaleOrdersInfo.ARSaleOrderID > 0)
            {
                if (entity.ARSaleOrderPaymentTimesList.Sum(o => o.ARSaleOrderPaymentTimeDepositBalance) > 0)
                {
                    MessageBox.Show(SaleOrderLocalizedResources.CancelCompleteDepositMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return false;
                }

                ARProductionPlanningItemsController objProposalsController = new ARProductionPlanningItemsController();
                ARProductionPlanningItemsInfo objProposalsInfo = (ARProductionPlanningItemsInfo)objProposalsController.GetFirstObjectByForeignColumn("FK_ARSaleOrderID", objSaleOrdersInfo.ARSaleOrderID);
                if (objProposalsInfo != null)
                {
                    MessageBox.Show(SaleOrderLocalizedResources.CancelCompleteExistsMMProposals, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return false;
                }

                ARContainerLoadersController objARContainerLoadersController = new ARContainerLoadersController();
                List<ARContainerLoadersInfo> listLoad = objARContainerLoadersController.GetContainerLoadersBySaleOrder(objSaleOrdersInfo.ARSaleOrderID);
                if (listLoad.Count() > 0)
                {
                    MessageBox.Show(SaleOrderLocalizedResources.CancelCompleteExistsLoadCont
                        + Environment.NewLine
                        + string.Join(",", listLoad.Select(o => o.ARContainerLoaderNo).Distinct().ToArray())
                        , CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return false;
                }

                ARDeliveryPlansController objARDeliveryPlansController = new ARDeliveryPlansController();
                List<ARDeliveryPlansInfo> listPlan = objARDeliveryPlansController.GetDeliveryPlansBySaleOrder(objSaleOrdersInfo.ARSaleOrderID);
                if (listPlan.Count() > 0)
                {
                    MessageBox.Show(SaleOrderLocalizedResources.CancelCompleteExistsDeliveryPlan
                        + Environment.NewLine
                        + string.Join(",", listPlan.Select(o => o.ARDeliveryPlanNo).Distinct().ToArray())
                        , CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return false;
                }

                ICShipmentsController objICShipmentsController = new ICShipmentsController();
                List<ICShipmentsInfo> listshipmentSaleOrder = objICShipmentsController.GetShipmentListBySaleOrder(objSaleOrdersInfo.ARSaleOrderID);
                if (listPlan.Count() > 0)
                {
                    MessageBox.Show(SaleOrderLocalizedResources.CancelCompleteExistsShipment
                        + Environment.NewLine
                        + string.Join(",", listshipmentSaleOrder.Select(o => o.ICShipmentNo).Distinct().ToArray())
                        , CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return false;
                }

                ARInvoicesController objARInvoicesController = new ARInvoicesController();
                List<ARInvoicesInfo> listInvoice = objARInvoicesController.GetInvoiceListBySaleOrder(objSaleOrdersInfo.ARSaleOrderID);
                if (listInvoice.Count() > 0)
                {
                    MessageBox.Show(SaleOrderLocalizedResources.CancelCompleteExistsInvoice
                        + Environment.NewLine
                        + string.Join(",", listInvoice.Select(o => o.ARInvoiceNo).Distinct().ToArray())
                        , CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return false;
                }
            }

            base.ActionCancelComplete();

            (new ARSaleOrdersController()).RollBackSOQtySaleForcastOrProposal(objSaleOrdersInfo.ARSaleOrderID, BOSApp.CurrentUsersInfo.ADUserName);
            GLHelper.UnPostedTransactions(this.Name, objSaleOrdersInfo.ARSaleOrderID, ModulePostingType.SaleOrder, ModulePostingType.Allocation, ModulePostingType.InvoiceTrans);
            InvalidateToolbar();
            return true;
        }
        public override void ActionPrint()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                if (entity.DocumentPaymentList.Count == 0)
                {
                    if (MessageBox.Show(SaleOrderLocalizedResources.ConfirmDepositBeforePrintingMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    {
                        return;
                    }
                }

                PrintDialog printDialog = new PrintDialog();
                ADReportsController objReportsController = new ADReportsController();
                ADReportsInfo objReportsInfo = (ADReportsInfo)objReportsController.GetObjectByNo(typeof(RPSaleOrder).Name);
                short numCopies = 1;
                if (objReportsInfo != null)
                {
                    numCopies = objReportsInfo.ADReportCopies;
                }
                printDialog.PrinterSettings.Copies = numCopies;
                DialogResult result = printDialog.ShowDialog();
                if (result == DialogResult.OK)
                {
                    string[] copies = new string[] { SaleOrderLocalizedResources.Copy1, SaleOrderLocalizedResources.Copy2 };
                    for (int i = 0; i < printDialog.PrinterSettings.Copies; i++)
                    {
                        string copy = copies[i % copies.Length];
                        RPSaleOrder report = new RPSaleOrder();
                        InitSaleOrderReport(report);
                        XRLabel copyLabel = (XRLabel)report.Bands[BandKind.PageHeader].Controls["xr_lblCopy"];
                        if (copyLabel != null)
                            copyLabel.Text = copy;
                        XtraReportHelper.PrintToPrinter(report, printDialog.PrinterSettings.PrinterName);
                    }
                }
            }
        }

        public void PreviewSaleOrderReport()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                RPSaleOrderViewer report = new RPSaleOrderViewer();
                InitSaleOrderReport(report);
                guiReportPreview reviewer = new guiReportPreview(report, BOSCommon.Constants.Report.DevSaleOrderItemReportViewerPath, false);
                reviewer.Show();
            }
        }

        private void InitSaleOrderReport(XtraReport report)
        {
            BRBranchsController objBranchsController = new BRBranchsController();
            BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            if (objBranchsInfo != null)
            {
                XRLabel label = (XRLabel)report.Bands[BandKind.PageHeader].Controls["xr_lblBRBranchAddressLine3"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactAddressLine3;
                }

                label = (XRLabel)report.Bands[BandKind.PageHeader].Controls["xr_lblBRBranchPhone"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactPhone;
                }

                label = (XRLabel)report.Bands[BandKind.PageHeader].Controls["xr_lblBRBranchFax"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactFax;
                }
            }

            ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
            ADReportsController objReportsController = new ADReportsController();
            ARSaleOrderPaymentTimesController objSaleOrderPaymentTimesController = new ARSaleOrderPaymentTimesController();
            DataSet ds = objReportsController.GetSaleOrderItemBySaleOrderID(Toolbar.CurrentObjectID);
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)objSaleOrdersController.GetSaleOrderByID(Toolbar.CurrentObjectID);
            if (ds.Tables.Count > 0)
            {
                ARSaleOrderItemsController objSaleOrderItemsController = new ARSaleOrderItemsController();
                if (objSaleOrdersInfo != null)
                {
                    objSaleOrdersInfo.ARSaleOrderSubTotalAmount = 0;
                }
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleOrderItemsInfo objSaleOrderItemsInfo = (ARSaleOrderItemsInfo)objSaleOrderItemsController.GetObjectFromDataRow(row);
                    objSaleOrderItemsInfo.ARSaleOrderItemComment = string.Empty;
                    if (objSaleOrderItemsInfo.ARSaleOrderItemProductDiscount > 0)
                    {
                        objSaleOrderItemsInfo.ARSaleOrderItemComment += string.Format(" {0}: {1}%;",
                                                                                    SaleOrderLocalizedResources.Discount,
                                                                                    BOSUtil.GetNumberDisplayFormat(
                                                                                                        objSaleOrderItemsInfo.ARSaleOrderItemProductDiscount,
                                                                                                        FormatGroupAttribute.cstFormatGroupPercent));
                    }
                    if (objSaleOrderItemsInfo.ARSaleOrderItemProductTaxPercent > 0)
                    {
                        objSaleOrderItemsInfo.ARSaleOrderItemComment += string.Format(" {0}: {1}%;",
                                                                                    SaleOrderLocalizedResources.VAT,
                                                                                    BOSUtil.GetNumberDisplayFormat(
                                                                                                        objSaleOrderItemsInfo.ARSaleOrderItemProductTaxPercent,
                                                                                                        FormatGroupAttribute.cstFormatGroupPercent));
                    }
                    row["ARSaleOrderItemComment"] = objSaleOrderItemsInfo.ARSaleOrderItemComment;

                    if (objSaleOrderItemsInfo.FK_ICProductID > 0)
                    {
                        objSaleOrderItemsInfo.ARSaleOrderItemProductDesc += string.Format(" {0} / {1}", objSaleOrderItemsInfo.ARSaleOrderItemProductSerialNo, objSaleOrderItemsInfo.ARSaleOrderItemProductSupplierNo);
                    }
                    row["ARSaleOrderItemProductDesc"] = objSaleOrderItemsInfo.ARSaleOrderItemProductDesc;
                    if (objSaleOrderItemsInfo.ARSaleOrderDeliveryDate.Year == DateTime.MaxValue.Year)
                        row["ARSaleOrderDeliveryDate"] = DBNull.Value;

                    //Issue tru so luong huy, tinh lai tien cho PI
                    objSaleOrderItemsInfo.ARSaleOrderItemProductQty = objSaleOrderItemsInfo.ARSaleOrderItemProductQty - objSaleOrderItemsInfo.ARSaleOrderItemCanceledQty;
                    objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount = objSaleOrderItemsInfo.ARSaleOrderItemProductQty * objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice;
                    objSaleOrderItemsInfo.ARSaleOrderItemTaxAmount = objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount * objSaleOrderItemsInfo.ARSaleOrderItemProductTaxPercent / 100;
                    objSaleOrderItemsInfo.ARSaleOrderItemDiscountAmount = objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount * objSaleOrderItemsInfo.ARSaleOrderItemProductDiscount / 100;
                    objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount = objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount + objSaleOrderItemsInfo.ARSaleOrderItemTaxAmount - objSaleOrderItemsInfo.ARSaleOrderItemDiscountAmount;
                    objSaleOrderItemsInfo.ARSaleOrderItemPrice = objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount;

                    if (objSaleOrdersInfo != null)
                    {
                        objSaleOrdersInfo.ARSaleOrderSubTotalAmount += objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount;
                    }
                }
                List<ARSaleOrderPaymentTimesInfo> saleOrderPaymentTimes = objSaleOrderPaymentTimesController.GetItemsBySaleOrderID(objSaleOrdersInfo.ARSaleOrderID);
                if (saleOrderPaymentTimes != null && saleOrderPaymentTimes.Count > 0)
                {
                    saleOrderPaymentTimes.ForEach(s =>
                        objSaleOrdersInfo.ARSaleOrderSubTotalAmount -= s.ARSaleOrderPaymentTimeDepositBalance);
                }
                objSaleOrdersInfo.ARSaleOrderSubTotalAmount += objSaleOrdersInfo.ARSaleOrderTotalCost;
                if (objSaleOrdersInfo != null)
                {
                    objSaleOrdersInfo.ARSaleOrderDiscountFix = objSaleOrdersInfo.ARSaleOrderSubTotalAmount * objSaleOrdersInfo.ARSaleOrderDiscountPerCent / 100;
                    objSaleOrdersInfo.ARSaleOrderTaxAmount = objSaleOrdersInfo.ARSaleOrderSubTotalAmount * objSaleOrdersInfo.ARSaleOrderTaxPercent / 100;
                    objSaleOrdersInfo.ARSaleOrderTotalAmount = objSaleOrdersInfo.ARSaleOrderSubTotalAmount + objSaleOrdersInfo.ARSaleOrderTaxAmount - objSaleOrdersInfo.ARSaleOrderDiscountFix;
                }
            }
            report.DataSource = ds;
            report.DataMember = BOSCommon.Constants.Report.DevSaleOrderItemReportViewerName;

            if (objSaleOrdersInfo != null)
            {
                if (objSaleOrdersInfo.ARSaleOrderBalanceDue != 0)
                {
                    XRLabel amountWord = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblAmountWord"];
                    if (amountWord != null)
                        amountWord.Text = ConvertAmountToWord.ReadAmount(objSaleOrdersInfo.ARSaleOrderBalanceDue.ToString(), objSaleOrdersInfo.FK_GECurrencyID);
                }

                if (objSaleOrdersInfo.ARSaleOrderDiscountFix == 0)
                {
                    XRPanel discountPanel = (XRPanel)report.Bands[BandKind.ReportFooter].Controls["xr_pnlDiscount"];
                    if (discountPanel != null)
                    {
                        discountPanel.Visible = false;
                    }
                }

                if (objSaleOrdersInfo.ARSaleOrderTaxAmount == 0)
                {
                    XRPanel taxPanel = (XRPanel)report.Bands[BandKind.ReportFooter].Controls["xr_pnlVAT"];
                    if (taxPanel != null)
                    {
                        taxPanel.Visible = false;
                    }
                }

                XRLabel customerNameLabel = (XRLabel)report.Bands[BandKind.PageHeader].Controls["xr_lblCustomerName"];
                if (customerNameLabel != null)
                {
                    if (objSaleOrdersInfo.ARCustomerTypeCombo == CustomerType.Company.ToString())
                    {
                        customerNameLabel.Text = objSaleOrdersInfo.ARCustomerName;
                    }
                }

                XRLabel customerAddressLabel = (XRLabel)report.Bands[BandKind.PageHeader].Controls["xr_lblCustomerAddress"];
                if (customerAddressLabel != null)
                {
                    if (objSaleOrdersInfo.ARCustomerTypeCombo == CustomerType.Personal.ToString())
                    {
                        customerAddressLabel.Text = objSaleOrdersInfo.ARCustomerContactAddressLine3;
                    }
                    else if (objSaleOrdersInfo.ARCustomerTypeCombo == CustomerType.Company.ToString())
                    {
                        customerAddressLabel.Text = objSaleOrdersInfo.ARCustomerInvoiceAddressLine3;
                    }
                }

                XRLabel saleOrderContactLabel = (XRLabel)report.Bands[BandKind.PageHeader].Controls["xr_lblSOContactInfo"];
                if (saleOrderContactLabel != null)
                {
                    if (saleOrderContactLabel != null)
                    {
                        saleOrderContactLabel.Text = string.Format("{0} {1} {2}",
                                                                    objSaleOrdersInfo.ARSaleOrderSOContactName,
                                                                    objSaleOrdersInfo.ARSaleOrderSOContactPhone,
                                                                    objSaleOrdersInfo.ARSaleOrderSOContactCellPhone);
                    }
                }
            }
        }

        public void ChangePriceLevel(int priceLevelID)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            mainObject.FK_ARPriceLevelID = priceLevelID;
            if (!Toolbar.IsNullOrNoneAction())
            {
                if (entity.ARSaleOrderItemsList.Count > 0)
                {
                    if (MessageBox.Show(SaleOrderLocalizedResources.ConfirmUpdatePriceLevelToListedItemsMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        ICProductPricesController objProductPricesController = new ICProductPricesController();
                        ICProductPricesInfo objProductPricesInfo;
                        ARPriceLevelsController objPriceLevelsController = new ARPriceLevelsController();
                        ARPriceLevelsInfo objPriceLevelsInfo;
                        foreach (ARSaleOrderItemsInfo infoItem in entity.ARSaleOrderItemsList)
                        {
                            decimal factor = GeneralHelper.CalculateProductMeasureUnitFactor(infoItem.FK_ICProductID, infoItem.FK_ICMeasureUnitBeforeChangeID, infoItem.FK_ICMeasureUnitID);
                            ICProductsInfo objProductsInfo = (ICProductsInfo)(new ICProductsController()).GetObjectByID(infoItem.FK_ICProductID);
                            objPriceLevelsInfo = (ARPriceLevelsInfo)objPriceLevelsController.GetObjectByID(((ARSaleOrdersInfo)entity.MainObject).FK_ARPriceLevelID);
                            if (objPriceLevelsInfo != null)
                            {
                                infoItem.ICProductUnitPrice = objProductsInfo.ICProductPrice01 * (1 - objPriceLevelsInfo.ARPriceLevelMarkDown / 100) / factor;
                                infoItem.ARSaleOrderItemProductUnitPrice2 = infoItem.ICProductUnitPrice;
                                UpdatePriceForSaleType(infoItem);
                                BOSApp.RoundByCurrency(infoItem, mainObject.FK_GECurrencyID);
                            }
                            entity.SetProductPriceByProductUnitPrice(infoItem);
                        }
                        entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
                        UpdateTotalAmount(entity.ARSaleOrderItemsList);
                    }
                }
            }
        }

        public void ChangeItemUnitPriceBelongPriceLevel(ARSaleOrderItemsInfo infoItem)
        {
            if (Toolbar.IsNullOrNoneAction())
                return;

            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            ARPriceLevelsController objPriceLevelsController = new ARPriceLevelsController();
            ARPriceLevelsInfo objPriceLevelsInfo;
            ICProductsInfo objProductsInfo = (ICProductsInfo)(new ICProductsController()).GetObjectByID(infoItem.FK_ICProductID);
            objPriceLevelsInfo = (ARPriceLevelsInfo)objPriceLevelsController.GetObjectByID(((ARSaleOrdersInfo)entity.MainObject).FK_ARPriceLevelID);
            if (objPriceLevelsInfo != null)
            {
                infoItem.ICProductUnitPrice = objProductsInfo.ICProductPrice01 * (1 - objPriceLevelsInfo.ARPriceLevelMarkDown / 100);
            }
            //UpdatePriceForSaleType(infoItem);
        }

        public void ChangeDiscountPercent()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            UpdateTotalAmount(entity.ARSaleOrderItemsList);
        }

        public void ChangeDiscountAmount()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrderInfo = (ARSaleOrdersInfo)entity.MainObject;
            if (objSaleOrderInfo.ARSaleOrderSubTotalAmount > 0)
                objSaleOrderInfo.ARSaleOrderDiscountPerCent = objSaleOrderInfo.ARSaleOrderDiscountFix / objSaleOrderInfo.ARSaleOrderSubTotalAmount * 100;
            UpdateTotalAmount(entity.ARSaleOrderItemsList);
        }

        public void ChangeTaxPercent()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            UpdateTotalAmount(entity.ARSaleOrderItemsList);
        }

        public void ChangeTaxAmount()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrderInfo = (ARSaleOrdersInfo)entity.MainObject;
            if (objSaleOrderInfo.ARSaleOrderSubTotalAmount - objSaleOrderInfo.ARSaleOrderDiscountFix > 0)
            {
                objSaleOrderInfo.ARSaleOrderTaxPercent = objSaleOrderInfo.ARSaleOrderTaxAmount / (objSaleOrderInfo.ARSaleOrderSubTotalAmount - objSaleOrderInfo.ARSaleOrderDiscountFix + objSaleOrderInfo.ARSaleOrderTotalCost) * 100;
                BOSApp.RoundByCurrency(objSaleOrderInfo, objSaleOrderInfo.FK_GECurrencyID);
            }
            UpdateTotalAmount(entity.ARSaleOrderItemsList);
        }

        public void ChangeDeposit()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            UpdateTotalAmount(entity.ARSaleOrderItemsList);
        }


        public void ChangeShippingFee()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            UpdateTotalAmount(entity.ARSaleOrderItemsList);
        }

        public void ChangeAssociatedSeller(int sellerID)
        {
            ARSaleOrdersInfo saleOrder = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            saleOrder.FK_ARAssociatedSellerID = sellerID;
            if (!Toolbar.IsNullOrNoneAction())
            {
                if (saleOrder.ARSaleOrderMainSellerCommissionPercent == 100)
                {
                    ADConfigValuesController objConfigValuesController = new ADConfigValuesController();
                    object value = objConfigValuesController.GetValueByConfigKey(ConfigValueKey.MainSellerCommissionPercent);
                    saleOrder.ARSaleOrderMainSellerCommissionPercent = Convert.ToDecimal(value);
                    value = objConfigValuesController.GetValueByConfigKey(ConfigValueKey.AssSellerCommissionPercent);
                    saleOrder.ARSaleOrderAssSellerCommissionPercent = Convert.ToDecimal(value);
                }
                ARSaleOrdersInfo oldSaleOrder = (ARSaleOrdersInfo)saleOrder.Clone();
                guiCommission guiCommission = new guiCommission();
                guiCommission.Module = this;
                if (guiCommission.ShowDialog() == DialogResult.OK)
                {

                }
                else
                {
                    saleOrder.ARSaleOrderMainSellerCommissionPercent = oldSaleOrder.ARSaleOrderMainSellerCommissionPercent;
                    saleOrder.ARSaleOrderAssSellerCommissionPercent = oldSaleOrder.ARSaleOrderAssSellerCommissionPercent;
                }
            }
        }

        public void ShowShippingInfo()
        {
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject.Clone();
            guiShippingInfo guiShipping = new guiShippingInfo();
            guiShipping.Module = this;
            if (guiShipping.ShowDialog() == DialogResult.OK)
            {
                DisplayLabelText(CurrentModuleEntity.MainObject);
            }
            else
                CurrentModuleEntity.MainObject = objSaleOrdersInfo;
        }

        public void ShowPaymentInfo()
        {
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            guiPaymentTerm guiPayment = new guiPaymentTerm();
            guiPayment.Module = this;
            if (guiPayment.ShowDialog() == DialogResult.OK)
            {
                objSaleOrdersInfo.ARSaleOrderPaymentTerm = guiPayment.Tag.ToString();
                CurrentModuleEntity.UpdateMainObjectBindingSource();
            }
        }

        public void TakePayment()
        {
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                if (ObjectIsEditingByOtherUser(this.Name, Toolbar.CurrentObjectID))
                {
                    return;
                }

                if (objSaleOrdersInfo.ARSaleOrderStatus == SaleOrderStatus.New.ToString())
                {
                    DialogResult dlgResult = MessageBox.Show(SaleOrderLocalizedResources.SaleOrderMustBeCompletedBeforeTakingDepositMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return;
                }

                ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
                if (objSaleOrdersInfo.ARSaleOrderBalanceDue > 0)
                {
                    guiTakeDeposit guiTakeDeposit = new guiTakeDeposit(objSaleOrdersInfo);
                    guiTakeDeposit.Module = this;
                    if (guiTakeDeposit.ShowDialog() == DialogResult.OK)
                    {
                        decimal paymentAmount = guiTakeDeposit.CustomerPayment.ARCustomerPaymentTotalAmount;
                        DateTime paymentDate = guiTakeDeposit.CustomerPayment.ARCustomerPaymentDate;
                        string paymentDesc = guiTakeDeposit.CustomerPayment.ARCustomerPaymentDesc;
                        int bankID = guiTakeDeposit.CustomerPayment.FK_CSCompanyBankID;
                        string bankAccount = guiTakeDeposit.CustomerPayment.ARCustomerPaymentBankAccount;
                        if (paymentAmount > 0)
                        {
                            guiPaymentDetails guiPaymentDetails = new guiPaymentDetails(this, objSaleOrdersInfo.FK_ARCustomerID, paymentAmount);
                            if (guiPaymentDetails.ShowDialog() == DialogResult.OK)
                            {
                                CurrentModuleEntity.SetPropertyChangeEventLock(false);
                                SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                                entity.ARCustomerPaymentDetailsList = guiPaymentDetails.PaymentDetailList;
                                int customerPaymentID = entity.TakePayment(paymentDate, paymentDesc, bankID, bankAccount, paymentAmount);
                                entity.UpdateMainObjectBindingSource();

                                ARDocumentPaymentsController objDocumentPaymentsController = new ARDocumentPaymentsController();
                                List<ARDocumentPaymentsInfo> payments = objDocumentPaymentsController.GetDocumentPaymentsBySaleOrderNo(objSaleOrdersInfo.ARSaleOrderNo);
                                entity.DocumentPaymentList.AddObjectToList();
                                entity.DocumentPaymentList.Invalidate(payments);
                                if (guiPaymentDetails.IsPrinted)
                                {
                                    PrintDeposit();
                                }
                                CurrentModuleEntity.SetPropertyChangeEventLock(true);

                            }
                        }
                    }
                }
            }
        }

        private string GetPaymentDetailDesc(List<ARCustomerPaymentDetailsInfo> paymentDetails)
        {
            string desc = string.Empty;
            foreach (ARCustomerPaymentDetailsInfo objCustomerPaymentDetailsInfo in paymentDetails)
            {
                if (objCustomerPaymentDetailsInfo.ARCustomerPaymentDetailAmount > 0)
                {
                    desc += string.Format("{0} {1}: {2} ({3}: {4})",
                                        objCustomerPaymentDetailsInfo.ARPaymentMethodDisplayText,
                                        objCustomerPaymentDetailsInfo.GECurrencyName,
                                        BOSUtil.GetNumberDisplayFormat(objCustomerPaymentDetailsInfo.ARCustomerPaymentDetailAmount, FormatGroupAttribute.cstFormatGroupPriceByCurrency),
                                        SaleOrderLocalizedResources.ExchangeRate,
                                        BOSUtil.GetNumberDisplayFormat(objCustomerPaymentDetailsInfo.ARCustomerPaymentDetailExchangeRate, FormatGroupAttribute.cstFormatGroupExchangeRate)) + Environment.NewLine;
                }
            }
            return desc;
        }

        public void UpdatePayment()
        {
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                if (ObjectIsEditingByOtherUser(this.Name, Toolbar.CurrentObjectID))
                {
                    return;
                }

                SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                ARDocumentPaymentsInfo objDocumentPaymentsInfo = (ARDocumentPaymentsInfo)entity.ModuleObjects[TableName.ARDocumentPaymentsTableName];
                if (objDocumentPaymentsInfo.ARDocumentPaymentID > 0)
                {
                    ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
                    ARCustomerPaymentsController objCustomerPaymentsController = new ARCustomerPaymentsController();
                    ARCustomerPaymentsInfo objCustomerPaymentsInfo = (ARCustomerPaymentsInfo)objCustomerPaymentsController.GetObjectByID(objDocumentPaymentsInfo.FK_ARCustomerPaymentID);
                    if (objCustomerPaymentsInfo != null)
                    {
                        guiTakeDeposit guiTakeDeposit = new guiTakeDeposit((ARSaleOrdersInfo)objSaleOrdersInfo.Clone(), objCustomerPaymentsInfo);
                        guiTakeDeposit.Module = this;
                        if (guiTakeDeposit.ShowDialog() == DialogResult.OK)
                        {
                            decimal paymentAmount = guiTakeDeposit.CustomerPayment.ARCustomerPaymentTotalAmount;
                            if (paymentAmount > 0)
                            {
                                guiPaymentDetails guiPaymentDetails = new guiPaymentDetails(this,
                                                                                            objCustomerPaymentsInfo.ARCustomerPaymentID,
                                                                                            objSaleOrdersInfo.FK_ARCustomerID,
                                                                                            paymentAmount);
                                if (guiPaymentDetails.ShowDialog() == DialogResult.OK)
                                {
                                    CurrentModuleEntity.SetPropertyChangeEventLock(false);

                                    //Rollback the deposit and balance due by the changed payment
                                    objSaleOrdersInfo.ARSaleOrderDepositBalance -= objDocumentPaymentsInfo.ARDocumentPaymentAmount;
                                    objSaleOrdersInfo.ARSaleOrderBalanceDue += objDocumentPaymentsInfo.ARDocumentPaymentAmount;

                                    //Update payment
                                    entity.ARCustomerPaymentDetailsList = guiPaymentDetails.PaymentDetailList;
                                    entity.UpdatePayment(objCustomerPaymentsInfo, objDocumentPaymentsInfo);
                                    objDocumentPaymentsInfo.AROpenDocumentBalanceDue = objDocumentPaymentsInfo.ARDocumentPaymentAmount - objDocumentPaymentsInfo.TransferedDepositAmount;
                                    entity.UpdateMainObjectBindingSource();
                                    entity.DocumentPaymentList.ChangeObjectFromList();
                                    MessageBox.Show(SaleOrderLocalizedResources.UpdateSuccessfullMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    CurrentModuleEntity.SetPropertyChangeEventLock(true);

                                    if (guiPaymentDetails.IsPrinted)
                                    {
                                        PrintDeposit();
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public void InvoiceSaleOrder()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
                if (objSaleOrdersInfo.ARSaleOrderStatus == SaleOrderStatus.Shipped.ToString())
                {
                    MessageBox.Show("This sale order has been shipped.", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                InvoiceModule invoiceModule = (InvoiceModule)BOSApp.ShowModule(ModuleName.Invoice);
                if (invoiceModule != null)
                {
                    InvoiceEntities invoiceEntity = (InvoiceEntities)invoiceModule.CurrentModuleEntity;
                    invoiceModule.ActionNew();

                    //Copy customer info                    
                    ARInvoicesInfo objInvoicesInfo = (ARInvoicesInfo)invoiceEntity.MainObject;
                    objInvoicesInfo.FK_ARCustomerID = objSaleOrdersInfo.FK_ARCustomerID;
                    objInvoicesInfo.FK_ACObjectID = objSaleOrdersInfo.FK_ACObjectID;
                    invoiceModule.SetDefaultValuesFromCustomer();

                    //Generate entity from the sale order                    

                    invoiceEntity.GenerateEntitiesFromSaleOrder(objSaleOrdersInfo);
                    invoiceEntity.UpdateMainObjectBindingSource();
                    invoiceModule.DisplayLabelText(invoiceEntity.MainObject);

                    invoiceEntity.InvoiceItemsList.GridControl?.RefreshDataSource();
                    if (invoiceEntity.InvoiceItemsList.Count > 0)
                    {
                        invoiceEntity.InvoiceItemsList.GridControl.InvalidateLookupEditColumns();
                        invoiceEntity.InvoiceItemsList.GridViewFocusRow(0);
                    }
                }
            }
        }


        public void DeletePayment()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                if (ObjectIsEditingByOtherUser(this.Name, Toolbar.CurrentObjectID))
                {
                    return;
                }

                SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                if (entity.DocumentPaymentList.CurrentIndex >= 0)
                {
                    DialogResult dialogResult = MessageBox.Show(SaleOrderLocalizedResources.QuestionDeleteMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (dialogResult == DialogResult.Yes)
                    {
                        ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
                        ARDocumentPaymentsInfo objDocumentPaymentsInfo = (ARDocumentPaymentsInfo)entity.ModuleObjects[TableName.ARDocumentPaymentsTableName];
                        if (objDocumentPaymentsInfo.ARDocumentPaymentID > 0)
                        {
                            //Delete payment
                            CurrentModuleEntity.SetPropertyChangeEventLock(false);
                            entity.DeletePayment(objDocumentPaymentsInfo);
                            entity.UpdateMainObjectBindingSource();
                            entity.DocumentPaymentList.RemoveSelectedRowObjectFromList();
                            MessageBox.Show(SaleOrderLocalizedResources.DeleteSuccessfullMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            CurrentModuleEntity.SetPropertyChangeEventLock(true);
                        }
                    }
                }
            }
        }

        public bool CustomerCanBuy(ARCustomersInfo objCustomersInfo)
        {
            //ARCustomersInfo objCustomersInfo = new ARCustomersInfo();
            //ARCustomersController objCustomersController = new ARCustomersController();
            //objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectByID(customerID);
            if (objCustomersInfo != null && objCustomersInfo.IsBuyingLocked)
            {
                MessageBox.Show(SaleOrderLocalizedResources.CannotBuyProductErrorMessage, CommonLocalizedResources.MessageBoxDefaultCaption,
                                                                MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }
            return true;
        }

        public void ViewDiffPrice()
        {
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            objSaleOrdersInfo.ARSaleOrderTotalDiffPrice = CalculateTotalDiffPrice();
            ARSaleOrdersInfo oldSaleOrder = (ARSaleOrdersInfo)objSaleOrdersInfo.Clone();
            guiDiffPrice guiDiffPrice = new guiDiffPrice();
            guiDiffPrice.Module = this;
            if (guiDiffPrice.ShowDialog() == DialogResult.Cancel)
            {
                objSaleOrdersInfo.ARSaleOrderSODiffPricePercent = oldSaleOrder.ARSaleOrderSODiffPricePercent;
                objSaleOrdersInfo.ARSaleOrderSODiffPriceAmount = oldSaleOrder.ARSaleOrderSODiffPriceAmount;
            }
        }

        private decimal CalculateTotalDiffPrice()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;

            decimal originalSubTotalAmount = 0;
            foreach (ARSaleOrderItemsInfo item in entity.ARSaleOrderItemsList)
            {
                entity.RoundByCurrency(item);
                decimal originalItemNetAmount = item.ARSaleOrderItemProductQty * item.ICProductUnitPrice;
                decimal originalItemDiscountAmount = originalItemNetAmount * item.ARSaleOrderItemProductDiscount / 100;
                decimal originalItemTotalAmount = originalItemNetAmount - originalItemDiscountAmount;
                originalSubTotalAmount += originalItemTotalAmount;
                entity.RoundByCurrency(item);
            }
            decimal originalDiscountAmount = originalSubTotalAmount * objSaleOrdersInfo.ARSaleOrderDiscountPerCent / 100;
            decimal originalTotalAmount = originalSubTotalAmount - originalDiscountAmount;

            //Calculate current amounts
            decimal subTotalAmount = 0;
            foreach (ARSaleOrderItemsInfo item in entity.ARSaleOrderItemsList)
            {
                entity.RoundByCurrency(item);
                decimal itemNetAmount = item.ARSaleOrderItemProductQty * item.ARSaleOrderItemProductUnitPrice;
                decimal itemDiscountAmount = itemNetAmount * item.ARSaleOrderItemProductDiscount / 100;
                decimal itemTotalAmount = itemNetAmount - itemDiscountAmount;
                subTotalAmount += itemTotalAmount;
                entity.RoundByCurrency(item);
            }
            decimal discountAmount = subTotalAmount * objSaleOrdersInfo.ARSaleOrderDiscountPerCent / 100;
            decimal totalAmount = subTotalAmount - discountAmount;

            return totalAmount - originalTotalAmount;
        }

        /// <summary>
        /// Show sale order item component form
        /// </summary>
        public void ShowItemComponent()
        {
            if (IsEditable())
            {
                ActionEdit();
            }

            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            if (entity.ARSaleOrderItemsList.CurrentIndex >= 0)
            {
                ARSaleOrderItemsInfo objSaleOrderItemsInfo = entity.ARSaleOrderItemsList[entity.ARSaleOrderItemsList.CurrentIndex];
                if (objSaleOrderItemsInfo.ARSOItemComponentList == null || objSaleOrderItemsInfo.ARSOItemComponentList.Count == 0)
                {
                    MessageBox.Show(SaleOrderLocalizedResources.ComponentIsNull, CommonLocalizedResources.MessageBoxDefaultCaption,
                                                                MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                guiItemComponent<ARSOItemComponentsInfo> guiItemComponent = new guiItemComponent<ARSOItemComponentsInfo>(objSaleOrderItemsInfo.ARSOItemComponentList);
                guiItemComponent.Module = this;
                if (guiItemComponent.ShowDialog() == DialogResult.OK)
                {
                    objSaleOrderItemsInfo.ARSOItemComponentList.Clear();
                    if (guiItemComponent.ItemComponentList.Count > 0)
                    {
                        foreach (ICProductComponentsInfo objProductComponentsInfo in guiItemComponent.ItemComponentList)
                        {
                            ARSOItemComponentsInfo objSOItemComponentsInfo = new ARSOItemComponentsInfo();
                            objSOItemComponentsInfo.ARSOItemComponentID = objProductComponentsInfo.ItemComponentID;
                            objSOItemComponentsInfo.FK_ICProductID = objProductComponentsInfo.FK_ICProductComponentChildID;
                            objSOItemComponentsInfo.ICProductSupplierNo = objProductComponentsInfo.ICProductSupplierNo;
                            objSOItemComponentsInfo.ICProductDesc = objProductComponentsInfo.ICProductDesc;
                            objSOItemComponentsInfo.FK_ICStockID = objProductComponentsInfo.FK_ICStockID;
                            objSOItemComponentsInfo.FK_ICProductSerieID = objProductComponentsInfo.FK_ICProductSerieID;
                            objSOItemComponentsInfo.ARSOItemComponentQty = objProductComponentsInfo.ICProductComponentQty;
                            ARSOItemComponentsInfo existingComponent = objSaleOrderItemsInfo.ARSOItemComponentList.OriginalList.Where(c => c.ARSOItemComponentID
                                                                                                                == objSOItemComponentsInfo.ARSOItemComponentID).FirstOrDefault();
                            if (existingComponent != null)
                            {
                                objSOItemComponentsInfo.ARSOItemComponentShippedQty = existingComponent.ARSOItemComponentShippedQty;
                            }
                            objSaleOrderItemsInfo.ARSOItemComponentList.Add(objSOItemComponentsInfo);
                        }
                    }
                }
            }
        }

        public BOSList<ARSOItemComponentsInfo> GetDefaultComponentList(ARSaleOrderItemsInfo objSaleOrderItemsInfo)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            BOSList<ARSOItemComponentsInfo> itemComponentsList = new BOSList<ARSOItemComponentsInfo>();
            itemComponentsList.InitBOSList(
                                        entity,
                                        TableName.ARSaleOrderItemsTableName,
                                        TableName.ARSOItemComponentsTableName,
                                        BOSList<ARSOItemComponentsInfo>.cstRelationForeign);
            itemComponentsList.ItemTableForeignKey = "FK_ARSaleOrderItemID";
            ICProductComponentsController objProductComponentsController = new ICProductComponentsController();
            List<ICProductComponentsInfo> components = objProductComponentsController.GetProductComponentListByProductID(objSaleOrderItemsInfo.FK_ICProductID);
            foreach (ICProductComponentsInfo objProductComponentsInfo in components)
            {
                ARSOItemComponentsInfo objSOItemComponentsInfo = new ARSOItemComponentsInfo();
                objSOItemComponentsInfo.FK_ICProductID = objProductComponentsInfo.FK_ICProductComponentChildID;
                objSOItemComponentsInfo.ARSOItemComponentQty = objProductComponentsInfo.ICProductComponentQty * objSaleOrderItemsInfo.ARSaleOrderItemProductQty;
                objSOItemComponentsInfo.ICProductComponentQty = objProductComponentsInfo.ICProductComponentQty;
                objSOItemComponentsInfo.ICProductDesc = objProductComponentsInfo.ICProductDesc;
                objSOItemComponentsInfo.ICProductSupplierNo = objProductComponentsInfo.ICProductSupplierNo;
                objSOItemComponentsInfo.FK_ICStockID = objSaleOrderItemsInfo.FK_ICStockID;
                objSOItemComponentsInfo.FK_ICProductSerieID = objSaleOrderItemsInfo.FK_ICProductSerieID;
                itemComponentsList.Add(objSOItemComponentsInfo);
            }
            return itemComponentsList;
        }


        public void ChangeComponentItemQty()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            if (entity.ARSaleOrderItemsList.CurrentIndex >= 0)
            {
                ARSaleOrderItemsInfo objSaleOrderItemsInfo = entity.ARSaleOrderItemsList[entity.ARSaleOrderItemsList.CurrentIndex];
                if (objSaleOrderItemsInfo.ARSOItemComponentList != null)
                {
                    objSaleOrderItemsInfo.ARSOItemComponentList.Clear();
                    BOSList<ARSOItemComponentsInfo> defaultComponents = GetDefaultComponentList(objSaleOrderItemsInfo);                    
                    foreach (ARSOItemComponentsInfo objSOItemComponentsInfo in defaultComponents)
                    {
                        objSOItemComponentsInfo.ARSOItemComponentQty = objSaleOrderItemsInfo.ARSaleOrderItemProductQty * objSOItemComponentsInfo.ICProductComponentQty;
                        objSaleOrderItemsInfo.ARSOItemComponentList.Add(objSOItemComponentsInfo);
                    }
                }
            }
        }

        public void ChangeStock()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            if (entity.ARSaleOrderItemsList.CurrentIndex >= 0)
            {
                ARSaleOrderItemsInfo objSaleOrderItemsInfo = entity.ARSaleOrderItemsList[entity.ARSaleOrderItemsList.CurrentIndex];
                if (objSaleOrderItemsInfo == null)
                    return;
                objSaleOrderItemsInfo.FK_ICProductSerieID = 0;
                objSaleOrderItemsInfo.ARSaleOrderItemProductSerialNo = string.Empty;
                objSaleOrderItemsInfo.ARSaleOrderItemLotNo = string.Empty;
                entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
            }
        }

        public void ChangeCommissionPercent()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;
            //Calculate customer comission
            decimal subTotalAmount = 0;
            foreach (ARSaleOrderItemsInfo objSaleOrderItemsInfo in entity.ARSaleOrderItemsList)
            {
                subTotalAmount += objSaleOrderItemsInfo.ARSaleOrderItemPrice - objSaleOrderItemsInfo.ARSaleOrderItemDiscountAmount;
            }
            decimal totalAmount = subTotalAmount - objSaleOrdersInfo.ARSaleOrderDiscountFix;
            objSaleOrdersInfo.ARSaleOrderSOCommissionAmount = objSaleOrdersInfo.ARSaleOrderSOCommissionPercent * totalAmount / 100;
            BOSApp.RoundByCurrency(objSaleOrdersInfo, objSaleOrdersInfo.FK_GECurrencyID);
            UpdateCommissions();
            entity.UpdateMainObjectBindingSource();
        }
        public void SaveCommissions()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;
            ARInvoicesController objARInvoicesController = new ARInvoicesController();
            List<ARInvoicesInfo> listInvoice = objARInvoicesController.GetInvoiceListBySaleOrder(objSaleOrdersInfo.ARSaleOrderID);
            if (Toolbar.IsNullOrNoneAction() && objSaleOrdersInfo.ARSaleOrderID > 0 
                && objSaleOrdersInfo.ARSaleOrderBatchStatus != "New" && !string.IsNullOrEmpty(objSaleOrdersInfo.ARSaleOrderBatchStatus)
                 && listInvoice.Count() == 0)
            {
                if (BOSApp.ShowMessageYesNo("Bạn có muốn lưu chi phí thay đổi không?") == DialogResult.Yes)
                {
                    entity.SaleCommissionsList.SaveItemObjects();
                    (new ARSaleOrdersController()).UpdateCommisSion(objSaleOrdersInfo.ARSaleOrderID, objSaleOrdersInfo.ARSaleOrderSOCommissionPercent, objSaleOrdersInfo.ARSaleOrderSOCommissionAmount, BOSApp.CurrentUsersInfo.ADUserName);
                }
            }
        }
        public void ChangeCommissionAmount()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;
            //Calculate customer comission
            decimal subTotalAmount = 0;
            foreach (ARSaleOrderItemsInfo objSaleOrderItemsInfo in entity.ARSaleOrderItemsList)
            {
                subTotalAmount += objSaleOrderItemsInfo.ARSaleOrderItemPrice - objSaleOrderItemsInfo.ARSaleOrderItemDiscountAmount;
            }
            decimal totalAmount = subTotalAmount - objSaleOrdersInfo.ARSaleOrderDiscountFix;
            objSaleOrdersInfo.ARSaleOrderSOCommissionPercent = objSaleOrdersInfo.ARSaleOrderSOCommissionAmount / totalAmount * 100;
            BOSApp.RoundByCurrency(objSaleOrdersInfo, objSaleOrdersInfo.FK_GECurrencyID);
            UpdateCommissions();
            entity.UpdateMainObjectBindingSource();
            SaveCommissions();
        }

        public void ChangeDiffPricePercent()
        {
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            decimal totalDiffPrice = CalculateTotalDiffPrice();
            objSaleOrdersInfo.ARSaleOrderSODiffPriceAmount = totalDiffPrice * objSaleOrdersInfo.ARSaleOrderSODiffPricePercent / 100;
            BOSApp.RoundByCurrency(objSaleOrdersInfo, objSaleOrdersInfo.FK_GECurrencyID);
            CurrentModuleEntity.UpdateMainObjectBindingSource();
        }

        public void ChangeDiffPriceAmount()
        {
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            decimal totalDiffPrice = CalculateTotalDiffPrice();
            if (totalDiffPrice > 0)
            {
                objSaleOrdersInfo.ARSaleOrderSODiffPricePercent = objSaleOrdersInfo.ARSaleOrderSODiffPriceAmount / totalDiffPrice * 100;
                BOSApp.RoundByCurrency(objSaleOrdersInfo, objSaleOrdersInfo.FK_GECurrencyID);
                CurrentModuleEntity.UpdateMainObjectBindingSource();
            }
        }

        public void TransferDeposit()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                if (ObjectIsEditingByOtherUser(this.Name, Toolbar.CurrentObjectID))
                {
                    return;
                }

                ARCustomerPaymentsController objCustomerPaymentsController = new ARCustomerPaymentsController();
                ARDocumentPaymentsController objDocumentPaymentsController = new ARDocumentPaymentsController();
                List<ARCustomerPaymentsInfo> deposits = objCustomerPaymentsController.GetDepositsForTransferring();
                guiFind<ARCustomerPaymentsInfo> guiFind = new guiFind<ARCustomerPaymentsInfo>(TableName.ARCustomerPaymentsTableName, deposits, this, true);
                guiFind.GridControlName = "Deposit";
                if (guiFind.ShowDialog() == DialogResult.OK)
                {
                    ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
                    using (TransactionScope scope = new TransactionScope(TransactionScopeOption.RequiresNew))
                    {
                        try
                        {
                            AROpenDocumentsController objOpenDocumentsController = new AROpenDocumentsController();
                            AROpenDocumentsInfo objOpenDocumentsInfo = (AROpenDocumentsInfo)objOpenDocumentsController.GetObjectByNo(objSaleOrdersInfo.ARSaleOrderNo);
                            if (objOpenDocumentsInfo == null)
                            {
                                objOpenDocumentsInfo = DataGenerator.GenerateOpenDocumentFromSaleOrder(objSaleOrdersInfo);
                                objOpenDocumentsController.CreateObject(objOpenDocumentsInfo);
                            }

                            ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
                            foreach (ARCustomerPaymentsInfo objCustomerPaymentsInfo in guiFind.SelectedObjects)
                            {
                                List<ARDocumentPaymentsInfo> documentPayments = objDocumentPaymentsController.GetDocumentPaymentsByCustomerPaymentID(objCustomerPaymentsInfo.ARCustomerPaymentID);
                                foreach (ARDocumentPaymentsInfo objDocumentPaymentsInfo in documentPayments)
                                {
                                    objDocumentPaymentsInfo.FK_AROpenDocumentID = objOpenDocumentsInfo.AROpenDocumentID;
                                    objDocumentPaymentsController.UpdateObject(objDocumentPaymentsInfo);
                                }

                                //Update the updated date of customer payment, notify data exchanger about the changes
                                objCustomerPaymentsInfo.AAUpdatedDate = DateTime.Now;
                                objCustomerPaymentsController.UpdateObject(objCustomerPaymentsInfo);

                                //Rollback the deposit and balance due of the old sale order
                                ARSaleOrdersInfo oldSaleOrder = (ARSaleOrdersInfo)objSaleOrdersController.GetObjectByNo(objCustomerPaymentsInfo.AROpenDocumentNo);
                                if (oldSaleOrder != null)
                                {
                                    oldSaleOrder.ARSaleOrderDepositBalance -= objCustomerPaymentsInfo.ARCustomerPaymentTotalAmount;
                                    oldSaleOrder.ARSaleOrderBalanceDue += objCustomerPaymentsInfo.ARCustomerPaymentTotalAmount;
                                    BOSApp.RoundByCurrency(objCustomerPaymentsInfo, objSaleOrdersInfo.FK_GECurrencyID);
                                    objSaleOrdersController.UpdateObject(oldSaleOrder);
                                }

                                //Update the deposit and balance due of the current sale order                                    
                                objSaleOrdersInfo.ARSaleOrderDepositBalance += Math.Min(objCustomerPaymentsInfo.ARCustomerPaymentTotalAmount, objSaleOrdersInfo.ARSaleOrderBalanceDue);
                                objSaleOrdersInfo.ARSaleOrderBalanceDue -= Math.Min(objCustomerPaymentsInfo.ARCustomerPaymentTotalAmount, objSaleOrdersInfo.ARSaleOrderBalanceDue);
                            }
                            objSaleOrdersController.UpdateObject(objSaleOrdersInfo);
                            scope.Complete();
                        }
                        catch (Exception)
                        {

                        }
                    }

                    List<ARDocumentPaymentsInfo> payments = objDocumentPaymentsController.GetDocumentPaymentsBySaleOrderNo(objSaleOrdersInfo.ARSaleOrderNo);
                    SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                    entity.DocumentPaymentList.Invalidate(payments);
                }
            }
        }

        public override bool CheckSelectedSearchObjects(string tableName, object objects)
        {
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            if (tableName == TableName.ARCustomerPaymentsTableName)
            {
                List<ARCustomerPaymentsInfo> customerPayments = (List<ARCustomerPaymentsInfo>)objects;
                foreach (ARCustomerPaymentsInfo objCustomerPaymentsInfo in customerPayments)
                {
                    if (objCustomerPaymentsInfo.AROpenDocumentNo == objSaleOrdersInfo.ARSaleOrderNo)
                    {
                        MessageBox.Show(string.Format(SaleOrderLocalizedResources.DepositAlreadyExistsMessage, objCustomerPaymentsInfo.ARCustomerPaymentNo),
                                        CommonLocalizedResources.MessageBoxDefaultCaption,
                                        MessageBoxButtons.OK,
                                        MessageBoxIcon.Error);
                        return false;
                    }
                    if (objCustomerPaymentsInfo.FK_ARCustomerID != objSaleOrdersInfo.FK_ARCustomerID)
                    {
                        MessageBox.Show(string.Format(SaleOrderLocalizedResources.DepositHasNotSameCustomerMessage, objCustomerPaymentsInfo.ARCustomerPaymentNo),
                                                    CommonLocalizedResources.MessageBoxDefaultCaption,
                                                    MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                        return false;
                    }
                }
            }
            return true;
        }

        protected override void ChangeObjectStatus(string dataMember, string status)
        {
            using (TransactionScope scope = new TransactionScope(TransactionScopeOption.RequiresNew))
            {
                try
                {
                    SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                    ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
                    ARSaleOrderItemsController objSaleOrderItemsController = new ARSaleOrderItemsController();
                    ARSaleOrdersInfo saleOrder = (ARSaleOrdersInfo)entity.MainObject;
                    saleOrder.ARSaleOrderStatus = status;
                    objSaleOrdersController.UpdateObject(saleOrder);

                    //Update order quantity
                    if (status == SaleOrderStatus.Shipped.ToString())
                    {
                        foreach (ARSaleOrderItemsInfo item in entity.ComponentSaleOrderItemList)
                        {
                            decimal qty = item.ARSaleOrderItemProductQty - item.ARSaleOrderItemShippedQty - item.ARSaleOrderItemCanceledQty;
                            if (!item.IsSubItem)
                            {
                                objSaleOrderItemsController.UpdateShippedQty(item.ARSaleOrderItemID, item.ARSaleOrderItemShippedQty + qty);
                            }
                        }
                    }
                    scope.Complete();
                }
                catch (Exception)
                {
                    scope.Dispose();
                }
            }
        }

        #region Data Exchange
        public override void ActionTransfer(string defaultBranchConfigKey)
        {
            base.ActionTransfer(ConfigValueKey.DataExchangeDefaultBranchSO);
        }

        protected override bool TransferData(BRBranchsInfo objBranchsInfo)
        {
            ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            bool isCompleted = false;
            objSaleOrdersInfo.FK_BRTransferredBranchID = objBranchsInfo.BRBranchID;
            objSaleOrdersInfo.IsTransferred = true;
            objSaleOrdersInfo.ARSaleOrderTransferredDate = BOSApp.GetCurrentServerDate().AddSeconds(BOSCommon.Constants.App.UpdateSeconds);
            objSaleOrdersController.UpdateObject(objSaleOrdersInfo);
            isCompleted = true;
            return isCompleted;
        }

        private void TransferSaleOrderItemsToBranch(List<ARSaleOrderItemsInfo> saleOrderItems, int branchSaleOrderID)
        {
            ARSaleOrderItemsController objSaleOrderItemsController = new ARSaleOrderItemsController();
            ARSOItemComponentsController objSOItemComponentsController = new ARSOItemComponentsController();

            objSaleOrderItemsController.DeleteBySaleOrderID(branchSaleOrderID);

            foreach (ARSaleOrderItemsInfo objSaleOrderItemsInfo in saleOrderItems)
            {
                ARSaleOrderItemsInfo branchItem = (ARSaleOrderItemsInfo)objSaleOrderItemsInfo.Clone();
                branchItem.FK_ARSaleOrderID = branchSaleOrderID;
                SynProductSerie(branchItem);
                objSaleOrderItemsController.CreateObject(branchItem);

                //Create the item's components 
                foreach (ARSOItemComponentsInfo objSOItemComponentsInfo in objSaleOrderItemsInfo.ARSOItemComponentList)
                {
                    ARSOItemComponentsInfo branchItemComponent = (ARSOItemComponentsInfo)objSOItemComponentsInfo.Clone();
                    branchItemComponent.FK_ARSaleOrderItemID = branchItem.ARSaleOrderItemID;
                    SynProductSerie(branchItemComponent);
                    objSOItemComponentsController.CreateObject(branchItemComponent);
                }
            }
        }

        private void TransferDepositsToBranch(int branchCustomerID, AROpenDocumentsInfo objOpenDocumentsInfo, List<ARCustomerPaymentsInfo> customerPayments)
        {
            ARCustomerPaymentsController objCustomerPaymentsController = new ARCustomerPaymentsController();
            ARCustomerPaymentDetailsController objCustomerPaymentDetailsController = new ARCustomerPaymentDetailsController();
            ARCustomerPaymentCurrencysController objCustomerPaymentCurrencysController = new ARCustomerPaymentCurrencysController();
            ARDocumentPaymentsController objDocumentPaymentsController = new ARDocumentPaymentsController();
            ARCustomersController objCustomersController = new ARCustomersController();
            AROpenDocumentsController objOpenDocumentsController = new AROpenDocumentsController();

            //Transfer open document
            AROpenDocumentsInfo branchOpenDocument = (AROpenDocumentsInfo)objOpenDocumentsController.GetObjectByNo(objOpenDocumentsInfo.AROpenDocumentNo);
            int branchOpenDocumentID = 0;
            if (branchOpenDocument != null)
            {
                branchOpenDocumentID = branchOpenDocument.AROpenDocumentID;
                branchOpenDocument = (AROpenDocumentsInfo)objOpenDocumentsInfo.Clone();
                branchOpenDocument.AROpenDocumentID = branchOpenDocumentID;
                branchOpenDocument.FK_ARCustomerID = branchCustomerID;
                branchOpenDocument.AROpenDocumentTransferredDate = BOSApp.GetCurrentServerDate();
                branchOpenDocumentID = objOpenDocumentsController.UpdateObject(branchOpenDocument);
            }
            else
            {
                branchOpenDocument = (AROpenDocumentsInfo)objOpenDocumentsInfo.Clone();
                branchOpenDocument.FK_ARCustomerID = branchCustomerID;
                branchOpenDocument.AAUpdatedDate = DateTime.MaxValue;
                branchOpenDocumentID = objOpenDocumentsController.CreateObject(branchOpenDocument);
            }

            //Transfer customer payments
            foreach (ARCustomerPaymentsInfo objCustomerPaymentsInfo in customerPayments)
            {
                ARCustomerPaymentsInfo branchCustomerPayment = (ARCustomerPaymentsInfo)objCustomerPaymentsController.GetObjectByNo(objCustomerPaymentsInfo.ARCustomerPaymentNo);
                int branchCustomerPaymentID = 0;
                if (branchCustomerPayment != null)
                {
                    branchCustomerPaymentID = branchCustomerPayment.ARCustomerPaymentID;
                    branchCustomerPayment = (ARCustomerPaymentsInfo)objCustomerPaymentsInfo.Clone();
                    branchCustomerPayment.ARCustomerPaymentID = branchCustomerPaymentID;
                    branchCustomerPayment.FK_ARCustomerID = branchCustomerID;
                    branchCustomerPayment.ARCustomerPaymentTransferredDate = BOSApp.GetCurrentServerDate();
                    branchCustomerPaymentID = objCustomerPaymentsController.UpdateObject(branchCustomerPayment);
                }
                else
                {
                    branchCustomerPayment = (ARCustomerPaymentsInfo)objCustomerPaymentsInfo.Clone();
                    branchCustomerPayment.FK_ARCustomerID = branchCustomerID;
                    branchCustomerPayment.AAUpdatedDate = DateTime.MaxValue;
                    branchCustomerPaymentID = objCustomerPaymentsController.CreateObject(branchCustomerPayment);
                }

                //Delete all relative data of the payment
                objCustomerPaymentDetailsController.DeleteByCustomerPaymentID(branchCustomerPaymentID);

                //Transfer payment details                                
                foreach (ARCustomerPaymentDetailsInfo objCustomerPaymentDetailsInfo in objCustomerPaymentsInfo.PaymentDetails)
                {
                    objCustomerPaymentDetailsInfo.FK_ARCustomerPaymentID = branchCustomerPaymentID;
                    objCustomerPaymentDetailsController.CreateObject(objCustomerPaymentDetailsInfo);

                    //Transfer payments by currencies of the payment details
                    foreach (ARCustomerPaymentCurrencysInfo objCustomerPaymentCurrencysInfo in objCustomerPaymentDetailsInfo.PaymentCurrencys)
                    {
                        objCustomerPaymentCurrencysInfo.FK_ARCustomerPaymentDetailID = objCustomerPaymentDetailsInfo.ARCustomerPaymentDetailID;
                        objCustomerPaymentCurrencysController.CreateObject(objCustomerPaymentCurrencysInfo);
                    }
                }

                //Transfer document payments
                foreach (ARDocumentPaymentsInfo objDocumentPaymentsInfo in objCustomerPaymentsInfo.DocumentPayments)
                {
                    ARDocumentPaymentsInfo branchDocumentPayment = (ARDocumentPaymentsInfo)objDocumentPaymentsInfo.Clone();
                    branchDocumentPayment.FK_ARCustomerPaymentID = branchCustomerPaymentID;
                    branchDocumentPayment.FK_AROpenDocumentID = branchOpenDocumentID;
                    objDocumentPaymentsController.CreateObject(branchDocumentPayment);
                }
            }
        }

        private void TransferReceiptVouchersToBranch(int branchCustomerID, List<ARReceiptVouchersInfo> receiptVouchers)
        {
            ARReceiptVouchersController objReceiptVouchersController = new ARReceiptVouchersController();
            foreach (ARReceiptVouchersInfo receiptVoucher in receiptVouchers)
            {
                ARReceiptVouchersInfo branchReceiptVoucher = (ARReceiptVouchersInfo)objReceiptVouchersController.GetObjectByNo(receiptVoucher.ARReceiptVoucherNo);
                if (branchReceiptVoucher != null)
                {
                    int branchReceiptVoucherID = branchReceiptVoucher.ARReceiptVoucherID;
                    branchReceiptVoucher = (ARReceiptVouchersInfo)receiptVoucher.Clone();
                    branchReceiptVoucher.ARReceiptVoucherID = branchReceiptVoucherID;
                    branchReceiptVoucher.FK_ACObjectID = branchCustomerID;
                    branchReceiptVoucher.ARReceiptVoucherTransferredDate = BOSApp.GetCurrentServerDate();
                    objReceiptVouchersController.UpdateObject(branchReceiptVoucher);
                }
                else
                {
                    branchReceiptVoucher = (ARReceiptVouchersInfo)receiptVoucher.Clone();
                    branchReceiptVoucher.FK_ACObjectID = branchCustomerID;
                    branchReceiptVoucher.AAUpdatedDate = DateTime.MaxValue;
                    objReceiptVouchersController.CreateObject(branchReceiptVoucher);
                }

                if (branchReceiptVoucher.ARReceiptVoucherID > 0)
                {
                    TransferReceiptVoucherItemsToBranch(receiptVoucher.ReceiptVoucherItems, branchReceiptVoucher.ARReceiptVoucherID);
                }
            }
        }

        private void TransferReceiptVoucherItemsToBranch(List<ARReceiptVoucherItemsInfo> receiptVoucherItems, int branchReceiptVoucherID)
        {
            ARReceiptVoucherItemsController objReceiptVoucherItemsController = new ARReceiptVoucherItemsController();
            objReceiptVoucherItemsController.DeleteByForeignColumn("FK_ARReceiptVoucherID", branchReceiptVoucherID);

            foreach (ARReceiptVoucherItemsInfo item in receiptVoucherItems)
            {
                item.FK_ARReceiptVoucherID = branchReceiptVoucherID;
                objReceiptVoucherItemsController.CreateObject(item);
            }
        }

        private void TransferBankTransactionsToBranch(int branchCustomerID, List<ACBankTransactionsInfo> bankTransactions)
        {
            ACBankTransactionsController objBankTransactionsController = new ACBankTransactionsController();
            foreach (ACBankTransactionsInfo bankTransaction in bankTransactions)
            {
                ACBankTransactionsInfo branchBankTransaction = (ACBankTransactionsInfo)objBankTransactionsController.GetObjectByNo(bankTransaction.ACBankTransactionNo);
                if (branchBankTransaction != null)
                {
                    int branchBankTransactionID = branchBankTransaction.ACBankTransactionID;
                    branchBankTransaction = (ACBankTransactionsInfo)bankTransaction.Clone();
                    branchBankTransaction.ACBankTransactionID = branchBankTransactionID;
                    branchBankTransaction.FK_ACObjectID = branchCustomerID;
                    branchBankTransaction.ACBankTransactionTransferredDate = BOSApp.GetCurrentServerDate();
                    objBankTransactionsController.UpdateObject(branchBankTransaction);
                }
                else
                {
                    branchBankTransaction = (ACBankTransactionsInfo)bankTransaction.Clone();
                    branchBankTransaction.FK_ACObjectID = branchCustomerID;
                    branchBankTransaction.AAUpdatedDate = DateTime.MaxValue;
                    objBankTransactionsController.CreateObject(branchBankTransaction);
                }

                if (branchBankTransaction.ACBankTransactionID > 0)
                {
                    TransferBankTransactionItemsToBranch(bankTransaction.BankTransactionItems, branchBankTransaction.ACBankTransactionID);
                }
            }
        }

        private void TransferBankTransactionItemsToBranch(List<ACBankTransactionItemsInfo> bankTransactionItems, int branchBankTransactionID)
        {
            ACBankTransactionItemsController objBankTransactionItemsController = new ACBankTransactionItemsController();
            objBankTransactionItemsController.DeleteByForeignColumn("FK_ACBankTransactionID", branchBankTransactionID);

            ACCostObjectsController objCostObjectsController = new ACCostObjectsController();
            foreach (ACBankTransactionItemsInfo item in bankTransactionItems)
            {
                item.FK_ACBankTransactionID = branchBankTransactionID;
                item.FK_ACCostObjectID = 0;
                objBankTransactionItemsController.CreateObject(item);
            }
        }
        #endregion

        protected override bool IsTransactionLocked()
        {
            return false;
        }

        //TNDLoc [ADD][07/11/2015][Sale Payment Process],START
        public void CancelDeposit()
        {
            if (Toolbar.IsNullOrNoneAction())
            {
                SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;
                ARSaleOrderPaymentTimesController objSaleOrderPaymentTimesController = new ARSaleOrderPaymentTimesController();
                foreach (ARSaleOrderPaymentTimesInfo item in entity.ARSaleOrderPaymentTimesList)
                {
                    if (item.ARSaleOrderPaymentTimePaymentType == SaleOrderPaymentTimePaymentType.Deposit.ToString())
                    {
                        item.ARSaleOrderPaymentTimeStatus = SaleOrderPaymentTimeStatus.Canceled.ToString();
                        objSaleOrderPaymentTimesController.UpdateObject(item);
                    }
                }
                entity.ARSaleOrderPaymentTimesList.GridControl?.RefreshDataSource();
            }
        }
        public bool IsValidAmount()
        {
            bool isValidAmount = true;
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;
            if (objSaleOrdersInfo.ARSaleOrderTotalAmount < entity.ARSaleOrderPaymentTimesList.Sum(s => s.ARSaleOrderPaymentTimeAmount))
            {
                isValidAmount = false;
                MessageBox.Show(SaleOrderLocalizedResources.InvalidPaymentTimeAmount, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            return isValidAmount;
        }
        //TNDLoc [ADD][07/11/2015][Sale Payment Process],END

        public void GetCustomerContactInfo(string contactTpye)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            List<ARCustomerContactsInfo> customerContactList = new List<ARCustomerContactsInfo>();
            ARCustomerContactsController objCustomerContactsController = new ARCustomerContactsController();
            customerContactList = objCustomerContactsController.GetARCustomerContactsListByARCustomerID(objSaleOrdersInfo.FK_ARCustomerID);
            guiCustomerContactInfo guiCustomerContactInfo = new guiCustomerContactInfo(customerContactList);
            guiCustomerContactInfo.Module = this;
            ARCustomersController objCustomersController = new ARCustomersController();
            ARCustomersInfo objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectByID(objSaleOrdersInfo.FK_ARCustomerID);

            if (guiCustomerContactInfo.ShowDialog() == DialogResult.OK)
            {
                if (guiCustomerContactInfo.SelectedObject != null)
                {
                    if (contactTpye == "Invoice")
                    {
                        objSaleOrdersInfo.ARSaleOrderInvoiceAddressFax = guiCustomerContactInfo.SelectedObject.ARCustomerContactFax;
                        objSaleOrdersInfo.ARSaleOrderInvoiceContactName = guiCustomerContactInfo.SelectedObject.ARCustomerContactName;
                        objSaleOrdersInfo.ARSaleOrderInvoiceAddressTaxCode = guiCustomerContactInfo.SelectedObject.ARCustomerContactTaxCode;
                        objSaleOrdersInfo.ARSaleOrderInvoiceAddressTel = guiCustomerContactInfo.SelectedObject.ARCustomerContactPhone;
                        objSaleOrdersInfo.ARSaleOrderInvoiceAddressLine3 = guiCustomerContactInfo.SelectedObject.ARCustomerContactAddressLine3;
                    }
                    else if (contactTpye == "Delivery")
                    {
                        objSaleOrdersInfo.ARSaleOrderDeliveryContactName = objCustomersInfo.ARCustomerDeliveryContactName;
                        objSaleOrdersInfo.ARSaleOrderDeliveryAddressFax = guiCustomerContactInfo.SelectedObject.ARCustomerContactFax;
                        objSaleOrdersInfo.ARSaleOrderDeliveryContactName = guiCustomerContactInfo.SelectedObject.ARCustomerContactName;
                        objSaleOrdersInfo.ARSaleOrderDeliveryAddressTaxCode = guiCustomerContactInfo.SelectedObject.ARCustomerContactTaxCode;
                        objSaleOrdersInfo.ARSaleOrderDeliveryAddressTel = guiCustomerContactInfo.SelectedObject.ARCustomerContactPhone;
                        objSaleOrdersInfo.ARSaleOrderDeliveryAddressLine3 = guiCustomerContactInfo.SelectedObject.ARCustomerContactAddressLine3;
                    }
                    DisplayLabelText(CurrentModuleEntity.MainObject);
                    entity.UpdateMainObjectBindingSource();
                }
            }
            else
                CurrentModuleEntity.MainObject = objSaleOrdersInfo;
        }

        public void ReadonlyControl(bool check)
        {
            SellerControl.Properties.ReadOnly = check;
        }
        //TNDLoc [ADD][08/12/2015][Revert version 1762 ],START

        public void PrintViewOutCountry()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                RPSaleOrderViewer report = new RPSaleOrderViewer();
                InitSaleOrderViewerReport(report);
                guiReportPreview reviewer = new guiReportPreview(report, BOSCommon.Constants.Report.DevSaleOrderItemReportViewerPath, false);
                reviewer.Show();
            }
        }
        public void PrintViewInCountry()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                RPSaleOrderInCountryViewer report = new RPSaleOrderInCountryViewer();
                InitSaleOrderInCountryViewerReport(report);
                guiReportPreview reviewer = new guiReportPreview(report, null, false);
                reviewer.Show();
            }
        }

        public void PrintViewOutSourcing()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                RPSaleOrderOutSourcingViewer report = new RPSaleOrderOutSourcingViewer();
                InitSaleOrderOutSourcingViewerReport(report);
                guiReportPreview reviewer = new guiReportPreview(report, null, false);
                reviewer.Show();
            }
        }

        public void PrintViewSaleWood()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                RPSaleOrderSaleWoodViewer report = new RPSaleOrderSaleWoodViewer();
                InitSaleOrderSaleWoodViewerReport(report);
                guiReportPreview reviewer = new guiReportPreview(report, null, false);
                reviewer.Show();
            }
        }


        private void InitSaleOrderViewerReport(RPSaleOrderViewer report)
        {
            ARSaleOrderItemsController objSaleOrderItemsController = new ARSaleOrderItemsController();
            ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)objSaleOrdersController.GetSaleOrderByID(Toolbar.CurrentObjectID);
            BRBranchsController objBranchsController = new BRBranchsController();
            BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            CSCompanyBanksController objCompanyBanksController = new CSCompanyBanksController();
            ARSaleOrderPaymentTimesController saleOrderPaymentTimeController = new ARSaleOrderPaymentTimesController();
            GEPaymentTermsController paymentTermController = new GEPaymentTermsController();
            ARSaleOrderPaymentTimesController objSaleOrderPaymentTimesController = new ARSaleOrderPaymentTimesController();

            if (objBranchsInfo != null)
            {
                XRLabel label = (XRLabel)report.Bands[BandKind.PageHeader].Controls["xr_lblBRBranchPhone_1"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactPhone;
                    objSaleOrdersInfo.CompanyTel = objBranchsInfo.BRBranchContactPhone;
                }

                label = (XRLabel)report.Bands[BandKind.PageHeader].Controls["xr_lblBRBranchFax_1"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactFax;
                    objSaleOrdersInfo.CompanyFax = objBranchsInfo.BRBranchContactFax;
                }
                objSaleOrdersInfo.CompanyTaxCode = BOSApp.CurrentCompanyInfo.CSCompanyTaxNumber;
            }


            List<ARSaleOrderItemsInfo> SaleOrderItemList = objSaleOrderItemsController.GetSaleOrderItemBySaleOrderID((Toolbar.CurrentObjectID));
            string saleOrderNo = string.Empty;
            string saleOrderDate = string.Empty;
            int count = 1;
            if (SaleOrderItemList != null)
            {
                if (objSaleOrdersInfo != null)
                {
                    objSaleOrdersInfo.ARSaleOrderSubTotalAmount = 0;
                }
                foreach (ARSaleOrderItemsInfo objSaleOrderItemsInfo in SaleOrderItemList)
                {
                    objSaleOrderItemsInfo.ARSaleOrderItemRecordOrder = count;
                    count++;
                    objSaleOrderItemsInfo.ARSaleOrderItemComment = string.Empty;
                    if (objSaleOrderItemsInfo.ARSaleOrderItemProductDiscount > 0)
                    {
                        objSaleOrderItemsInfo.ARSaleOrderItemComment += string.Format(" {0}: {1}%;",
                                                                                SaleOrderLocalizedResources.Discount,
                                                                                BOSUtil.GetNumberDisplayFormat(
                                                                                                    objSaleOrderItemsInfo.ARSaleOrderItemProductDiscount,
                                                                                                    FormatGroupAttribute.cstFormatGroupPercent));
                    }
                    if (objSaleOrderItemsInfo.ARSaleOrderItemProductTaxPercent > 0)
                    {
                        objSaleOrderItemsInfo.ARSaleOrderItemComment += string.Format(" {0}: {1}%;",
                                                                                SaleOrderLocalizedResources.VAT,
                                                                                BOSUtil.GetNumberDisplayFormat(
                                                                                                    objSaleOrderItemsInfo.ARSaleOrderItemProductTaxPercent,
                                                                                                    FormatGroupAttribute.cstFormatGroupPercent));
                    }

                    if (!string.IsNullOrEmpty(objSaleOrderItemsInfo.ICStockName))
                    {
                        string stockName = string.Empty;
                        int firstSpaceIndex = objSaleOrderItemsInfo.ICStockName.Trim().IndexOf(" ");
                        if (firstSpaceIndex >= 0)
                        {
                            stockName = objSaleOrderItemsInfo.ICStockName.Substring(firstSpaceIndex + 1);
                        }
                        else
                        {
                            stockName = objSaleOrderItemsInfo.ICStockName;
                        }
                        objSaleOrderItemsInfo.ICStockName = stockName;
                    }
                    if (objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice > 0)
                    {
                        objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice = Math.Round(objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice, 3);
                        objSaleOrderItemsInfo.ICProductUnitPrice = objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice;
                    }

                    if (objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount > 0)
                    {
                        objSaleOrderItemsInfo.ARSaleOrderItemProductQty = objSaleOrderItemsInfo.ARSaleOrderItemProductQty - objSaleOrderItemsInfo.ARSaleOrderItemCanceledQty;
                        objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount = objSaleOrderItemsInfo.ARSaleOrderItemProductQty * objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice;
                        objSaleOrderItemsInfo.ARSaleOrderItemTaxAmount = objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount * objSaleOrderItemsInfo.ARSaleOrderItemProductTaxPercent / 100;
                        objSaleOrderItemsInfo.ARSaleOrderItemDiscountAmount = objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount * objSaleOrderItemsInfo.ARSaleOrderItemProductDiscount / 100;
                        objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount = objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount + objSaleOrderItemsInfo.ARSaleOrderItemTaxAmount - objSaleOrderItemsInfo.ARSaleOrderItemDiscountAmount;
                        objSaleOrderItemsInfo.ARSaleOrderItemPrice = objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount;

                        if (objSaleOrdersInfo != null)
                        {
                            objSaleOrdersInfo.ARSaleOrderSubTotalAmount += objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount;
                        }
                        List<ARSaleOrderPaymentTimesInfo> saleOrderPaymentTimes = objSaleOrderPaymentTimesController.GetItemsBySaleOrderID(objSaleOrdersInfo.ARSaleOrderID);
                        if (saleOrderPaymentTimes != null && saleOrderPaymentTimes.Count > 0)
                        {
                            saleOrderPaymentTimes.ForEach(s =>
                                objSaleOrdersInfo.ARSaleOrderSubTotalAmount -= s.ARSaleOrderPaymentTimeDepositBalance);
                        }
                        objSaleOrdersInfo.ARSaleOrderSubTotalAmount += objSaleOrdersInfo.ARSaleOrderTotalCost;
                        objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount = Math.Round(objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount, 2);
                        objSaleOrderItemsInfo.ARSaleOrderItemTotalAmountText = String.Format("{0:N2}", objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount);
                    }
                }
            }

            if (objSaleOrdersInfo != null)
            {
                CSCompanyBanksInfo objCompanyBanksInfo = (CSCompanyBanksInfo)objCompanyBanksController.GetObjectByID(objSaleOrdersInfo.FK_CSCompanyBankID);
                if (objCompanyBanksInfo != null)
                {
                    objSaleOrdersInfo.BankAccountName = objCompanyBanksInfo.CSCompanyBankName;
                    objSaleOrdersInfo.BankAccountNo = objCompanyBanksInfo.CSCompanyBankAccount;
                    objSaleOrdersInfo.BankAccountSwiftcode = objCompanyBanksInfo.CSCompanyBankCode;
                }
                if (objSaleOrdersInfo != null)
                {
                    if (objSaleOrdersInfo.ARSaleOrderPortPartialShipment)
                        objSaleOrdersInfo.ARSaleOrderPortPartialShipmentText = "Allow";
                    else
                        objSaleOrdersInfo.ARSaleOrderPortPartialShipmentText = "Not Allow";

                    if (objSaleOrdersInfo.ARSaleOrderPortTranShipment)
                        objSaleOrdersInfo.ARSaleOrderPortTranShipmentText = "Allow";
                    else
                        objSaleOrdersInfo.ARSaleOrderPortTranShipmentText = "Not Allow";
                }
                if (objSaleOrdersInfo.ARShippingType != string.Empty)
                {
                    objSaleOrdersInfo.ARSaleOrderShipingTypeText = GetConfigTextByGroupAndValue("ShippingType", objSaleOrdersInfo.ARShippingType);
                }

                objSaleOrdersInfo.ARSaleOrderDiscountFix = objSaleOrdersInfo.ARSaleOrderSubTotalAmount * objSaleOrdersInfo.ARSaleOrderDiscountPerCent / 100;
                objSaleOrdersInfo.ARSaleOrderTaxAmount = objSaleOrdersInfo.ARSaleOrderSubTotalAmount * objSaleOrdersInfo.ARSaleOrderTaxPercent / 100;
                objSaleOrdersInfo.ARSaleOrderTotalAmount = objSaleOrdersInfo.ARSaleOrderSubTotalAmount + objSaleOrdersInfo.ARSaleOrderTaxAmount - objSaleOrdersInfo.ARSaleOrderDiscountFix;

                if (objSaleOrdersInfo.ARSaleOrderTotalAmount > 0)
                {
                    objSaleOrdersInfo.ARSaleOrderTotalAmount = Math.Round(objSaleOrdersInfo.ARSaleOrderTotalAmount, 2);
                    objSaleOrdersInfo.ARSaleOrderTotalAmountText = String.Format("{0:N2}", objSaleOrdersInfo.ARSaleOrderTotalAmount);
                }
                // Total amount not VAT//ARSaleOrderTotalAmountVATText
                if (objSaleOrdersInfo.ARSaleOrderSubTotalAmount > 0)
                {
                    objSaleOrdersInfo.ARSaleOrderSubTotalAmount = Math.Round(objSaleOrdersInfo.ARSaleOrderSubTotalAmount, 2);
                    objSaleOrdersInfo.ARSaleOrderTotalAmountVATText = String.Format("{0:N2}", objSaleOrdersInfo.ARSaleOrderSubTotalAmount);
                }
                if (objSaleOrdersInfo.ARSaleOrderTaxAmount > 0)
                {
                    objSaleOrdersInfo.ARSaleOrderTaxAmount = Math.Round(objSaleOrdersInfo.ARSaleOrderTaxAmount, 2);
                    objSaleOrdersInfo.ARSaleOrderAmountVATText = String.Format("{0:N2}", objSaleOrdersInfo.ARSaleOrderTaxAmount);
                }

                objSaleOrdersInfo.ARSaleOrderPaymentTermText = string.Empty;
                GEPaymentTermsInfo paymentTerm = paymentTermController.GetObjectByID(objSaleOrdersInfo.FK_GEPaymentTermID) as GEPaymentTermsInfo;
                if (paymentTerm != null)
                {
                    objSaleOrdersInfo.ARSaleOrderPaymentTermText = paymentTerm.GEPaymentTermName;
                }
                ARSaleOrderItemContainersController objSaleOrderItemContainersController = new ARSaleOrderItemContainersController();
                List<ARSaleOrderItemContainersInfo> objSOItemContainersList = objSaleOrderItemContainersController.GetSOItemContainerBySaleOrderID(objSaleOrdersInfo.ARSaleOrderID);

                if (objSOItemContainersList != null)
                {
                    foreach (ARSaleOrderItemContainersInfo item in objSOItemContainersList)
                    {
                        GEContainersController objContainersController = new GEContainersController();
                        GEContainersInfo objContainer = (GEContainersInfo)objContainersController.GetObjectByID(item.FK_GEContainerID);
                        if (objContainer != null)
                        {
                            if (objSaleOrdersInfo.ARSaleOrderQuantityContainer != string.Empty)
                            {

                                objSaleOrdersInfo.ARSaleOrderQuantityContainer += ";" + item.ARSaleOrderItemContainerProductQty + "x" + objContainer.GEContainerName;
                            }
                            else
                            {
                                objSaleOrdersInfo.ARSaleOrderQuantityContainer = item.ARSaleOrderItemContainerProductQty + "x" + objContainer.GEContainerName;
                            }
                        }

                    }
                }
            }
            if (!string.IsNullOrEmpty(objSaleOrdersInfo.ARSaleOrderSaleAgreement))
            {
                XRLabel Text = (XRLabel)report.FindControl("xr_lblARSaleOrderSaleAgreement", false);
                if (Text != null)
                {
                    Text.Text = objSaleOrdersInfo.ARSaleOrderSaleAgreement;
                }
                XRLabel saleAgreement = (XRLabel)report.FindControl("xr_lblaleAgreement", false);
                if (saleAgreement != null)
                {
                    saleAgreement.Text = "Sale Agreement:";
                }
            }

            report.bsSaleOrderItemList.DataSource = SaleOrderItemList;
            report.bsSaleOrdersInfo.DataSource = objSaleOrdersInfo;
            report.DataMember = BOSCommon.Constants.Report.DevSaleOrderItemReportName;

        }

        public string GetConfigTextByGroupAndValue(string group, string value)
        {
            ADConfigValuesController objConfigValuesController = new ADConfigValuesController();
            ADConfigValuesInfo objADConfigValuesInfo = objConfigValuesController.GetObjectByGroupAndValue(group, value);
            if (objADConfigValuesInfo != null)
                return objADConfigValuesInfo.ADConfigText;
            return string.Empty;
        }

        private void InitSaleOrderInCountryViewerReport(RPSaleOrderInCountryViewer report)
        {
            ARSaleOrderItemsController objSaleOrderItemsController = new ARSaleOrderItemsController();
            ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)objSaleOrdersController.GetSaleOrderByID(Toolbar.CurrentObjectID);
            BRBranchsController objBranchsController = new BRBranchsController();
            BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            CSCompanyBanksController objCompanyBanksController = new CSCompanyBanksController();
            ARSaleOrderPaymentTimesController saleOrderPaymentTimeController = new ARSaleOrderPaymentTimesController();
            GEPaymentTermsController paymentTermController = new GEPaymentTermsController();

            if (objBranchsInfo != null)
            {
                XRLabel label = (XRLabel)report.Bands[BandKind.PageHeader].Controls["xr_lblBRBranchAddressLine3_1"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactAddressLine3;
                    objSaleOrdersInfo.CompanyAddress = objBranchsInfo.BRBranchContactAddressLine3;
                }

                label = (XRLabel)report.Bands[BandKind.PageHeader].Controls["xr_lblBRBranchPhone_1"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactPhone;
                    objSaleOrdersInfo.CompanyTel = objBranchsInfo.BRBranchContactPhone;
                }

                label = (XRLabel)report.Bands[BandKind.PageHeader].Controls["xr_lblBRBranchFax_1"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactFax;
                    objSaleOrdersInfo.CompanyFax = objBranchsInfo.BRBranchContactFax;
                }
                objSaleOrdersInfo.CompanyTaxCode = BOSApp.CurrentCompanyInfo.CSCompanyTaxNumber;
            }
            CSCompanyBanksInfo objCompanyBanksInfo = (CSCompanyBanksInfo)objCompanyBanksController.GetObjectByID(objSaleOrdersInfo.FK_CSCompanyBankID);

            List<ARSaleOrderItemsInfo> SaleOrderItemList = objSaleOrderItemsController.GetSaleOrderItemBySaleOrderID((Toolbar.CurrentObjectID));
            string saleOrderNo = string.Empty;
            string saleOrderDate = string.Empty;
            int count = 1;
            if (SaleOrderItemList != null)
            {
                if (objSaleOrdersInfo != null)
                {
                    objSaleOrdersInfo.ARSaleOrderSubTotalAmount = 0;
                }
                foreach (ARSaleOrderItemsInfo objSaleOrderItemsInfo in SaleOrderItemList)
                {
                    objSaleOrderItemsInfo.ARSaleOrderItemRecordOrder = count;
                    count++;
                    objSaleOrderItemsInfo.ARSaleOrderItemComment = string.Empty;
                    if (objSaleOrderItemsInfo.ARSaleOrderItemProductDiscount > 0)
                    {
                        objSaleOrderItemsInfo.ARSaleOrderItemComment += string.Format(" {0}: {1}%;",
                                                                                SaleOrderLocalizedResources.Discount,
                                                                                BOSUtil.GetNumberDisplayFormat(
                                                                                                    objSaleOrderItemsInfo.ARSaleOrderItemProductDiscount,
                                                                                                    FormatGroupAttribute.cstFormatGroupPercent));
                    }
                    if (objSaleOrderItemsInfo.ARSaleOrderItemProductTaxPercent > 0)
                    {
                        objSaleOrderItemsInfo.ARSaleOrderItemComment += string.Format(" {0}: {1}%;",
                                                                                SaleOrderLocalizedResources.VAT,
                                                                                BOSUtil.GetNumberDisplayFormat(
                                                                                                    objSaleOrderItemsInfo.ARSaleOrderItemProductTaxPercent,
                                                                                                    FormatGroupAttribute.cstFormatGroupPercent));
                    }

                    if (!string.IsNullOrEmpty(objSaleOrderItemsInfo.ICStockName))
                    {
                        string stockName = string.Empty;
                        int firstSpaceIndex = objSaleOrderItemsInfo.ICStockName.Trim().IndexOf(" ");
                        if (firstSpaceIndex >= 0)
                        {
                            stockName = objSaleOrderItemsInfo.ICStockName.Substring(firstSpaceIndex + 1);
                        }
                        else
                        {
                            stockName = objSaleOrderItemsInfo.ICStockName;
                        }
                        objSaleOrderItemsInfo.ICStockName = stockName;
                    }
                    if (objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice > 0)
                    {
                        objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice = Math.Round(objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice, 2);
                        objSaleOrderItemsInfo.ICProductUnitPrice = objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice;
                    }

                    if (objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount > 0)
                    {
                        objSaleOrderItemsInfo.ARSaleOrderItemProductQty = objSaleOrderItemsInfo.ARSaleOrderItemProductQty - objSaleOrderItemsInfo.ARSaleOrderItemCanceledQty;
                        objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount = objSaleOrderItemsInfo.ARSaleOrderItemProductQty * objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice;
                        objSaleOrderItemsInfo.ARSaleOrderItemTaxAmount = objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount * objSaleOrderItemsInfo.ARSaleOrderItemProductTaxPercent / 100;
                        objSaleOrderItemsInfo.ARSaleOrderItemDiscountAmount = objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount * objSaleOrderItemsInfo.ARSaleOrderItemProductDiscount / 100;
                        objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount = objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount + objSaleOrderItemsInfo.ARSaleOrderItemTaxAmount - objSaleOrderItemsInfo.ARSaleOrderItemDiscountAmount;
                        objSaleOrderItemsInfo.ARSaleOrderItemPrice = objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount;

                        if (objSaleOrdersInfo != null)
                        {
                            objSaleOrdersInfo.ARSaleOrderSubTotalAmount += objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount;
                        }

                        objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount = Math.Round(objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount, 2);
                        objSaleOrderItemsInfo.ARSaleOrderItemTotalAmountText = String.Format("{0:N2}", objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount);
                    }
                }
            }

            if (objSaleOrdersInfo != null)
            {
                if (objCompanyBanksInfo != null)
                {
                    objSaleOrdersInfo.BankAccountName = objCompanyBanksInfo.CSCompanyBankName;
                    objSaleOrdersInfo.BankAccountNo = objCompanyBanksInfo.CSCompanyBankAccount;
                    objSaleOrdersInfo.BankAccountSwiftcode = objCompanyBanksInfo.CSCompanyBankCode;
                }
                if (objSaleOrdersInfo != null)
                {
                    if (objSaleOrdersInfo.ARSaleOrderPortPartialShipment)
                        objSaleOrdersInfo.ARSaleOrderPortPartialShipmentText = "Allow";
                    else
                        objSaleOrdersInfo.ARSaleOrderPortPartialShipmentText = "Not Allow";

                    if (objSaleOrdersInfo.ARSaleOrderPortTranShipment)
                        objSaleOrdersInfo.ARSaleOrderPortTranShipmentText = "Allow";
                    else
                        objSaleOrdersInfo.ARSaleOrderPortTranShipmentText = "Not Allow";
                }
                if (objSaleOrdersInfo.ARShippingType != string.Empty)
                {
                    objSaleOrdersInfo.ARSaleOrderShipingTypeText = GetConfigTextByGroupAndValue("ShippingType", objSaleOrdersInfo.ARShippingType);
                }
                if (objSaleOrdersInfo.ARPaymentMethodCombo != string.Empty)
                {
                    objSaleOrdersInfo.ARSaleOrderPaymentTermText = GetConfigTextByGroupAndValue("PaymentMethod", objSaleOrdersInfo.ARPaymentMethodCombo);
                }

                objSaleOrdersInfo.ARSaleOrderDiscountFix = objSaleOrdersInfo.ARSaleOrderSubTotalAmount * objSaleOrdersInfo.ARSaleOrderDiscountPerCent / 100;
                objSaleOrdersInfo.ARSaleOrderTaxAmount = objSaleOrdersInfo.ARSaleOrderSubTotalAmount * objSaleOrdersInfo.ARSaleOrderTaxPercent / 100;
                objSaleOrdersInfo.ARSaleOrderTotalAmount = objSaleOrdersInfo.ARSaleOrderSubTotalAmount + objSaleOrdersInfo.ARSaleOrderTaxAmount - objSaleOrdersInfo.ARSaleOrderDiscountFix;

                if (objSaleOrdersInfo.ARSaleOrderTotalAmount > 0)
                {
                    objSaleOrdersInfo.ARSaleOrderTotalAmount = Math.Round(objSaleOrdersInfo.ARSaleOrderTotalAmount, 2);
                    objSaleOrdersInfo.ARSaleOrderTotalAmountText = String.Format("{0:N2}", objSaleOrdersInfo.ARSaleOrderTotalAmount);
                }
                // Total amount not VAT//ARSaleOrderTotalAmountVATText
                if (objSaleOrdersInfo.ARSaleOrderSubTotalAmount > 0)
                {
                    objSaleOrdersInfo.ARSaleOrderSubTotalAmount = Math.Round(objSaleOrdersInfo.ARSaleOrderSubTotalAmount, 2);
                    objSaleOrdersInfo.ARSaleOrderTotalAmountVATText = String.Format("{0:N2}", objSaleOrdersInfo.ARSaleOrderSubTotalAmount);
                }
                if (objSaleOrdersInfo.ARSaleOrderTaxAmount > 0)
                {
                    objSaleOrdersInfo.ARSaleOrderTaxAmount = Math.Round(objSaleOrdersInfo.ARSaleOrderTaxAmount, 2);
                    objSaleOrdersInfo.ARSaleOrderAmountVATText = String.Format("{0:N2}", objSaleOrdersInfo.ARSaleOrderTaxAmount);
                }

                objSaleOrdersInfo.ARSaleOrderPaymentTermText = string.Empty;
                GEPaymentTermsInfo paymentTerm = paymentTermController.GetObjectByID(objSaleOrdersInfo.FK_GEPaymentTermID) as GEPaymentTermsInfo;
                if (paymentTerm != null)
                {
                    objSaleOrdersInfo.ARSaleOrderPaymentTermText = paymentTerm.GEPaymentTermName;
                }
                ARSaleOrderItemContainersController objSaleOrderItemContainersController = new ARSaleOrderItemContainersController();
                List<ARSaleOrderItemContainersInfo> objSOItemContainersList = objSaleOrderItemContainersController.GetSOItemContainerBySaleOrderID(objSaleOrdersInfo.ARSaleOrderID);

                if (objSOItemContainersList != null)
                {
                    foreach (ARSaleOrderItemContainersInfo item in objSOItemContainersList)
                    {
                        GEContainersController objContainersController = new GEContainersController();
                        GEContainersInfo objContainer = (GEContainersInfo)objContainersController.GetObjectByID(item.FK_GEContainerID);
                        if (objContainer != null)
                        {
                            if (objSaleOrdersInfo.ARSaleOrderQuantityContainer != string.Empty)
                            {

                                objSaleOrdersInfo.ARSaleOrderQuantityContainer += ";" + item.ARSaleOrderItemContainerProductQty + "x" + objContainer.GEContainerName;
                            }
                            else
                            {
                                objSaleOrdersInfo.ARSaleOrderQuantityContainer = item.ARSaleOrderItemContainerProductQty + "x" + objContainer.GEContainerName;
                            }
                        }

                    }
                }
            }
            if (!string.IsNullOrEmpty(objSaleOrdersInfo.ARSaleOrderSaleAgreement))
            {
                XRLabel Text = (XRLabel)report.FindControl("xr_lblARSaleOrderSaleAgreement", false);
                if (Text != null)
                {
                    Text.Text = objSaleOrdersInfo.ARSaleOrderSaleAgreement;
                }
                XRLabel saleAgreement = (XRLabel)report.FindControl("xr_lblaleAgreement", false);
                if (saleAgreement != null)
                {
                    saleAgreement.Text = "Sale Agreement:";
                }
            }

            report.bsSaleOrderItemList.DataSource = SaleOrderItemList;
            report.bsSaleOrdersInfo.DataSource = objSaleOrdersInfo;
            report.DataMember = BOSCommon.Constants.Report.DevSaleOrderItemReportName;
        }

        private void InitSaleOrderOutSourcingViewerReport(RPSaleOrderOutSourcingViewer report)
        {
            ARSaleOrderItemsController objSaleOrderItemsController = new ARSaleOrderItemsController();
            ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)objSaleOrdersController.GetSaleOrderByID(Toolbar.CurrentObjectID);
            BRBranchsController objBranchsController = new BRBranchsController();
            BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            CSCompanyBanksController objCompanyBanksController = new CSCompanyBanksController();

            ARSaleOrderPaymentTimesController saleOrderPaymentTimeController = new ARSaleOrderPaymentTimesController();
            GEPaymentTermsController paymentTermController = new GEPaymentTermsController();

            if (objBranchsInfo != null)
            {
                XRLabel label = (XRLabel)report.Bands[BandKind.PageHeader].Controls["xr_lblBRBranchAddressLine3_1"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactAddressLine3;
                    objSaleOrdersInfo.CompanyAddress = objBranchsInfo.BRBranchContactAddressLine3;
                }

                label = (XRLabel)report.Bands[BandKind.PageHeader].Controls["xr_lblBRBranchPhone_1"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactPhone;
                    objSaleOrdersInfo.CompanyTel = objBranchsInfo.BRBranchContactPhone;
                }

                label = (XRLabel)report.Bands[BandKind.PageHeader].Controls["xr_lblBRBranchFax_1"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactFax;
                    objSaleOrdersInfo.CompanyFax = objBranchsInfo.BRBranchContactFax;
                }
                objSaleOrdersInfo.CompanyTaxCode = BOSApp.CurrentCompanyInfo.CSCompanyTaxNumber;
            }
            CSCompanyBanksInfo objCompanyBanksInfo = (CSCompanyBanksInfo)objCompanyBanksController.GetObjectByID(objSaleOrdersInfo.FK_CSCompanyBankID);



            List<ARSaleOrderItemsInfo> SaleOrderItemList = objSaleOrderItemsController.GetSaleOrderItemBySaleOrderID((Toolbar.CurrentObjectID));
            string saleOrderNo = string.Empty;
            string saleOrderDate = string.Empty;
            int count = 1;
            if (SaleOrderItemList != null)
            {
                if (objSaleOrdersInfo != null)
                {
                    objSaleOrdersInfo.ARSaleOrderSubTotalAmount = 0;
                }
                foreach (ARSaleOrderItemsInfo objSaleOrderItemsInfo in SaleOrderItemList)
                {
                    objSaleOrderItemsInfo.ARSaleOrderItemRecordOrder = count;
                    count++;
                    objSaleOrderItemsInfo.ARSaleOrderItemComment = string.Empty;
                    if (objSaleOrderItemsInfo.ARSaleOrderItemProductDiscount > 0)
                    {
                        objSaleOrderItemsInfo.ARSaleOrderItemComment += string.Format(" {0}: {1}%;",
                                                                                SaleOrderLocalizedResources.Discount,
                                                                                BOSUtil.GetNumberDisplayFormat(
                                                                                                    objSaleOrderItemsInfo.ARSaleOrderItemProductDiscount,
                                                                                                    FormatGroupAttribute.cstFormatGroupPercent));
                    }
                    if (objSaleOrderItemsInfo.ARSaleOrderItemProductTaxPercent > 0)
                    {
                        objSaleOrderItemsInfo.ARSaleOrderItemComment += string.Format(" {0}: {1}%;",
                                                                                SaleOrderLocalizedResources.VAT,
                                                                                BOSUtil.GetNumberDisplayFormat(
                                                                                                    objSaleOrderItemsInfo.ARSaleOrderItemProductTaxPercent,
                                                                                                    FormatGroupAttribute.cstFormatGroupPercent));
                    }

                    if (!string.IsNullOrEmpty(objSaleOrderItemsInfo.ICStockName))
                    {
                        string stockName = string.Empty;
                        int firstSpaceIndex = objSaleOrderItemsInfo.ICStockName.Trim().IndexOf(" ");
                        if (firstSpaceIndex >= 0)
                        {
                            stockName = objSaleOrderItemsInfo.ICStockName.Substring(firstSpaceIndex + 1);
                        }
                        else
                        {
                            stockName = objSaleOrderItemsInfo.ICStockName;
                        }
                        objSaleOrderItemsInfo.ICStockName = stockName;
                    }
                    if (objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice > 0)
                    {
                        objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice = Math.Round(objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice, 2);
                        objSaleOrderItemsInfo.ICProductUnitPrice = objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice;
                    }

                    if (objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount > 0)
                    {
                        objSaleOrderItemsInfo.ARSaleOrderItemProductQty = objSaleOrderItemsInfo.ARSaleOrderItemProductQty - objSaleOrderItemsInfo.ARSaleOrderItemCanceledQty;
                        objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount = objSaleOrderItemsInfo.ARSaleOrderItemProductQty * objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice;
                        objSaleOrderItemsInfo.ARSaleOrderItemTaxAmount = objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount * objSaleOrderItemsInfo.ARSaleOrderItemProductTaxPercent / 100;
                        objSaleOrderItemsInfo.ARSaleOrderItemDiscountAmount = objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount * objSaleOrderItemsInfo.ARSaleOrderItemProductDiscount / 100;
                        objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount = objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount + objSaleOrderItemsInfo.ARSaleOrderItemTaxAmount - objSaleOrderItemsInfo.ARSaleOrderItemDiscountAmount;
                        objSaleOrderItemsInfo.ARSaleOrderItemPrice = objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount;

                        if (objSaleOrdersInfo != null)
                        {
                            objSaleOrdersInfo.ARSaleOrderSubTotalAmount += objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount;
                        }

                        objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount = Math.Round(objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount, 2);
                        objSaleOrderItemsInfo.ARSaleOrderItemTotalAmountText = String.Format("{0:N2}", objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount);
                    }
                }
            }

            if (objSaleOrdersInfo != null)
            {
                if (objCompanyBanksInfo != null)
                {
                    objSaleOrdersInfo.BankAccountName = objCompanyBanksInfo.CSCompanyBankName;
                    objSaleOrdersInfo.BankAccountNo = objCompanyBanksInfo.CSCompanyBankAccount;
                    objSaleOrdersInfo.BankAccountSwiftcode = objCompanyBanksInfo.CSCompanyBankCode;
                }
                if (objSaleOrdersInfo != null)
                {
                    if (objSaleOrdersInfo.ARSaleOrderPortPartialShipment)
                        objSaleOrdersInfo.ARSaleOrderPortPartialShipmentText = "Allow";
                    else
                        objSaleOrdersInfo.ARSaleOrderPortPartialShipmentText = "Not Allow";

                    if (objSaleOrdersInfo.ARSaleOrderPortTranShipment)
                        objSaleOrdersInfo.ARSaleOrderPortTranShipmentText = "Allow";
                    else
                        objSaleOrdersInfo.ARSaleOrderPortTranShipmentText = "Not Allow";
                }
                if (objSaleOrdersInfo.ARShippingType != string.Empty)
                {
                    objSaleOrdersInfo.ARSaleOrderShipingTypeText = GetConfigTextByGroupAndValue("ShippingType", objSaleOrdersInfo.ARShippingType);
                }
                if (objSaleOrdersInfo.ARPaymentMethodCombo != string.Empty)
                {
                    objSaleOrdersInfo.ARSaleOrderPaymentTermText = GetConfigTextByGroupAndValue("PaymentMethod", objSaleOrdersInfo.ARPaymentMethodCombo);
                }
                objSaleOrdersInfo.ARSaleOrderDiscountFix = objSaleOrdersInfo.ARSaleOrderSubTotalAmount * objSaleOrdersInfo.ARSaleOrderDiscountPerCent / 100;
                objSaleOrdersInfo.ARSaleOrderTaxAmount = objSaleOrdersInfo.ARSaleOrderSubTotalAmount * objSaleOrdersInfo.ARSaleOrderTaxPercent / 100;
                objSaleOrdersInfo.ARSaleOrderTotalAmount = objSaleOrdersInfo.ARSaleOrderSubTotalAmount + objSaleOrdersInfo.ARSaleOrderTaxAmount - objSaleOrdersInfo.ARSaleOrderDiscountFix;

                if (objSaleOrdersInfo.ARSaleOrderTotalAmount > 0)
                {
                    objSaleOrdersInfo.ARSaleOrderTotalAmount = Math.Round(objSaleOrdersInfo.ARSaleOrderTotalAmount, 2);
                    objSaleOrdersInfo.ARSaleOrderTotalAmountText = String.Format("{0:N2}", objSaleOrdersInfo.ARSaleOrderTotalAmount);
                }
                // Total amount not VAT//ARSaleOrderTotalAmountVATText
                if (objSaleOrdersInfo.ARSaleOrderSubTotalAmount > 0)
                {
                    objSaleOrdersInfo.ARSaleOrderSubTotalAmount = Math.Round(objSaleOrdersInfo.ARSaleOrderSubTotalAmount, 2);
                    objSaleOrdersInfo.ARSaleOrderTotalAmountVATText = String.Format("{0:N2}", objSaleOrdersInfo.ARSaleOrderSubTotalAmount);
                }
                if (objSaleOrdersInfo.ARSaleOrderTaxAmount > 0)
                {
                    objSaleOrdersInfo.ARSaleOrderTaxAmount = Math.Round(objSaleOrdersInfo.ARSaleOrderTaxAmount, 2);
                    objSaleOrdersInfo.ARSaleOrderAmountVATText = String.Format("{0:N2}", objSaleOrdersInfo.ARSaleOrderTaxAmount);
                }

                objSaleOrdersInfo.ARSaleOrderPaymentTermText = string.Empty;
                GEPaymentTermsInfo paymentTerm = paymentTermController.GetObjectByID(objSaleOrdersInfo.FK_GEPaymentTermID) as GEPaymentTermsInfo;
                if (paymentTerm != null)
                {
                    objSaleOrdersInfo.ARSaleOrderPaymentTermText = paymentTerm.GEPaymentTermName;
                }
            }
            if (!string.IsNullOrEmpty(objSaleOrdersInfo.ARSaleOrderSaleAgreement))
            {
                XRLabel Text = (XRLabel)report.FindControl("xr_lblARSaleOrderSaleAgreement", false);
                if (Text != null)
                {
                    Text.Text = objSaleOrdersInfo.ARSaleOrderSaleAgreement;
                }
                XRLabel saleAgreement = (XRLabel)report.FindControl("xr_lblaleAgreement", false);
                if (saleAgreement != null)
                {
                    saleAgreement.Text = "Sale Agreement:";
                }
            }

            report.bsSaleOrderItemList.DataSource = SaleOrderItemList;
            report.bsSaleOrdersInfo.DataSource = objSaleOrdersInfo;
            report.DataMember = BOSCommon.Constants.Report.DevSaleOrderItemReportName;
        }

        private void InitSaleOrderSaleWoodViewerReport(RPSaleOrderSaleWoodViewer report)
        {
            ARSaleOrderItemsController objSaleOrderItemsController = new ARSaleOrderItemsController();
            ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)objSaleOrdersController.GetSaleOrderByID(Toolbar.CurrentObjectID);
            BRBranchsController objBranchsController = new BRBranchsController();
            BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            CSCompanyBanksController objCompanyBanksController = new CSCompanyBanksController();
            ARSaleOrderPaymentTimesController saleOrderPaymentTimeController = new ARSaleOrderPaymentTimesController();
            GEPaymentTermsController paymentTermController = new GEPaymentTermsController();

            if (objBranchsInfo != null)
            {
                XRLabel label = (XRLabel)report.Bands[BandKind.PageHeader].Controls["xr_lblBRBranchAddressLine3_1"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactAddressLine3;
                    objSaleOrdersInfo.CompanyAddress = objBranchsInfo.BRBranchContactAddressLine3;
                }

                label = (XRLabel)report.Bands[BandKind.PageHeader].Controls["xr_lblBRBranchPhone_1"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactPhone;
                    objSaleOrdersInfo.CompanyTel = objBranchsInfo.BRBranchContactPhone;
                }

                label = (XRLabel)report.Bands[BandKind.PageHeader].Controls["xr_lblBRBranchFax_1"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactFax;
                    objSaleOrdersInfo.CompanyFax = objBranchsInfo.BRBranchContactFax;
                }
                objSaleOrdersInfo.CompanyTaxCode = BOSApp.CurrentCompanyInfo.CSCompanyTaxNumber;
            }
            CSCompanyBanksInfo objCompanyBanksInfo = (CSCompanyBanksInfo)objCompanyBanksController.GetObjectByID(objSaleOrdersInfo.FK_CSCompanyBankID);


            List<ARSaleOrderItemsInfo> SaleOrderItemList = objSaleOrderItemsController.GetSaleOrderItemBySaleOrderID((Toolbar.CurrentObjectID));
            string saleOrderNo = string.Empty;
            string saleOrderDate = string.Empty;
            int count = 1;
            if (SaleOrderItemList != null)
            {
                if (objSaleOrdersInfo != null)
                {
                    objSaleOrdersInfo.ARSaleOrderSubTotalAmount = 0;
                }
                foreach (ARSaleOrderItemsInfo objSaleOrderItemsInfo in SaleOrderItemList)
                {
                    objSaleOrderItemsInfo.ARSaleOrderItemRecordOrder = count;
                    count++;
                    objSaleOrderItemsInfo.ARSaleOrderItemComment = string.Empty;
                    if (objSaleOrderItemsInfo.ARSaleOrderItemProductDiscount > 0)
                    {
                        objSaleOrderItemsInfo.ARSaleOrderItemComment += string.Format(" {0}: {1}%;",
                                                                                SaleOrderLocalizedResources.Discount,
                                                                                BOSUtil.GetNumberDisplayFormat(
                                                                                                    objSaleOrderItemsInfo.ARSaleOrderItemProductDiscount,
                                                                                                    FormatGroupAttribute.cstFormatGroupPercent));
                    }
                    if (objSaleOrderItemsInfo.ARSaleOrderItemProductTaxPercent > 0)
                    {
                        objSaleOrderItemsInfo.ARSaleOrderItemComment += string.Format(" {0}: {1}%;",
                                                                                SaleOrderLocalizedResources.VAT,
                                                                                BOSUtil.GetNumberDisplayFormat(
                                                                                                    objSaleOrderItemsInfo.ARSaleOrderItemProductTaxPercent,
                                                                                                    FormatGroupAttribute.cstFormatGroupPercent));
                    }

                    if (!string.IsNullOrEmpty(objSaleOrderItemsInfo.ICStockName))
                    {
                        string stockName = string.Empty;
                        int firstSpaceIndex = objSaleOrderItemsInfo.ICStockName.Trim().IndexOf(" ");
                        if (firstSpaceIndex >= 0)
                        {
                            stockName = objSaleOrderItemsInfo.ICStockName.Substring(firstSpaceIndex + 1);
                        }
                        else
                        {
                            stockName = objSaleOrderItemsInfo.ICStockName;
                        }
                        objSaleOrderItemsInfo.ICStockName = stockName;
                    }
                    if (objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice > 0)
                    {
                        objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice = Math.Round(objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice, 2);
                        objSaleOrderItemsInfo.ICProductUnitPrice = objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice;
                    }

                    if (objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount > 0)
                    {
                        objSaleOrderItemsInfo.ARSaleOrderItemProductQty = objSaleOrderItemsInfo.ARSaleOrderItemProductQty - objSaleOrderItemsInfo.ARSaleOrderItemCanceledQty;
                        objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount = objSaleOrderItemsInfo.ARSaleOrderItemProductQty * objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice;
                        objSaleOrderItemsInfo.ARSaleOrderItemTaxAmount = objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount * objSaleOrderItemsInfo.ARSaleOrderItemProductTaxPercent / 100;
                        objSaleOrderItemsInfo.ARSaleOrderItemDiscountAmount = objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount * objSaleOrderItemsInfo.ARSaleOrderItemProductDiscount / 100;
                        objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount = objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount + objSaleOrderItemsInfo.ARSaleOrderItemTaxAmount - objSaleOrderItemsInfo.ARSaleOrderItemDiscountAmount;
                        objSaleOrderItemsInfo.ARSaleOrderItemPrice = objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount;

                        if (objSaleOrdersInfo != null)
                        {
                            objSaleOrdersInfo.ARSaleOrderSubTotalAmount += objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount;
                        }

                        objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount = Math.Round(objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount, 2);
                        objSaleOrderItemsInfo.ARSaleOrderItemTotalAmountText = String.Format("{0:N2}", objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount);
                    }
                    ICProductsController objProductController = new ICProductsController();
                    ICProductsInfo objProductsInfo = (ICProductsInfo)objProductController.GetObjectByID(objSaleOrderItemsInfo.FK_ICProductID);
                    if (objProductsInfo != null)
                    {
                        if (objProductsInfo.ICProductType == ProductType.Lumber.ToString())
                        {
                            objSaleOrderItemsInfo.ARSaleOrderItemQC = "Gỗ phách " + objSaleOrderItemsInfo.ARSaleOrderItemHeight + "x" + objSaleOrderItemsInfo.ARSaleOrderItemWidth
                                                                         + "x" + objSaleOrderItemsInfo.ARSaleOrderItemLength;
                        }
                        else if (objProductsInfo.ICProductType == ProductType.Roundwood.ToString())
                        {
                            objSaleOrderItemsInfo.ARSaleOrderItemQC = "Gỗ tròn " + objSaleOrderItemsInfo.ARSaleOrderItemLength + "x" + objSaleOrderItemsInfo.ARSaleOrderItemPerimeter;
                        }
                        else
                        {
                            objSaleOrderItemsInfo.ARSaleOrderItemQC = objProductsInfo.ICProductName + " " + objSaleOrderItemsInfo.ARSaleOrderItemLength + "x" + objSaleOrderItemsInfo.ARSaleOrderItemWidth
                                                                         + "x" + objSaleOrderItemsInfo.ARSaleOrderItemHeight;
                        }
                    }
                }
            }


            if (objSaleOrdersInfo != null)
            {
                if (objCompanyBanksInfo != null)
                {
                    objSaleOrdersInfo.BankAccountName = objCompanyBanksInfo.CSCompanyBankName;
                    objSaleOrdersInfo.BankAccountNo = objCompanyBanksInfo.CSCompanyBankAccount;
                    objSaleOrdersInfo.BankAccountSwiftcode = objCompanyBanksInfo.CSCompanyBankCode;
                }
                if (objSaleOrdersInfo != null)
                {
                    if (objSaleOrdersInfo.ARSaleOrderPortPartialShipment)
                        objSaleOrdersInfo.ARSaleOrderPortPartialShipmentText = "Allow";
                    else
                        objSaleOrdersInfo.ARSaleOrderPortPartialShipmentText = "Not Allow";

                    if (objSaleOrdersInfo.ARSaleOrderPortTranShipment)
                        objSaleOrdersInfo.ARSaleOrderPortTranShipmentText = "Allow";
                    else
                        objSaleOrdersInfo.ARSaleOrderPortTranShipmentText = "Not Allow";
                }
                if (objSaleOrdersInfo.ARShippingType != string.Empty)
                {
                    objSaleOrdersInfo.ARSaleOrderShipingTypeText = GetConfigTextByGroupAndValue("ShippingType", objSaleOrdersInfo.ARShippingType);
                }
                if (objSaleOrdersInfo.ARPaymentMethodCombo != string.Empty)
                {
                    objSaleOrdersInfo.ARSaleOrderPaymentTermText = GetConfigTextByGroupAndValue("PaymentMethod", objSaleOrdersInfo.ARPaymentMethodCombo);
                    if (objSaleOrdersInfo.FK_GEPaymentTermID > 0)
                    {
                        GEPaymentTermsController objPaymentTermsController = new GEPaymentTermsController();
                        GEPaymentTermsInfo PaymentsInfo = (GEPaymentTermsInfo)objPaymentTermsController.GetObjectByID(objSaleOrdersInfo.FK_GEPaymentTermID);
                        objSaleOrdersInfo.ARSaleOrderPaymentTermText = objSaleOrdersInfo.ARSaleOrderPaymentTermText + " (" + PaymentsInfo.GEPaymentTermName + " )";
                    }
                }

                objSaleOrdersInfo.ARSaleOrderDiscountFix = objSaleOrdersInfo.ARSaleOrderSubTotalAmount * objSaleOrdersInfo.ARSaleOrderDiscountPerCent / 100;
                objSaleOrdersInfo.ARSaleOrderTaxAmount = objSaleOrdersInfo.ARSaleOrderSubTotalAmount * objSaleOrdersInfo.ARSaleOrderTaxPercent / 100;
                objSaleOrdersInfo.ARSaleOrderTotalAmount = objSaleOrdersInfo.ARSaleOrderSubTotalAmount + objSaleOrdersInfo.ARSaleOrderTaxAmount - objSaleOrdersInfo.ARSaleOrderDiscountFix;

                if (objSaleOrdersInfo.ARSaleOrderTotalAmount > 0)
                {
                    objSaleOrdersInfo.ARSaleOrderTotalAmount = Math.Round(objSaleOrdersInfo.ARSaleOrderTotalAmount, 2);
                    objSaleOrdersInfo.ARSaleOrderTotalAmountText = String.Format("{0:N2}", objSaleOrdersInfo.ARSaleOrderTotalAmount);
                }
                // Total amount not VAT//ARSaleOrderTotalAmountVATText
                if (objSaleOrdersInfo.ARSaleOrderSubTotalAmount > 0)
                {
                    objSaleOrdersInfo.ARSaleOrderSubTotalAmount = Math.Round(objSaleOrdersInfo.ARSaleOrderSubTotalAmount, 2);
                    objSaleOrdersInfo.ARSaleOrderTotalAmountVATText = String.Format("{0:N2}", objSaleOrdersInfo.ARSaleOrderSubTotalAmount);
                }
                if (objSaleOrdersInfo.ARSaleOrderTaxAmount > 0)
                {
                    objSaleOrdersInfo.ARSaleOrderTaxAmount = Math.Round(objSaleOrdersInfo.ARSaleOrderTaxAmount, 2);
                    objSaleOrdersInfo.ARSaleOrderAmountVATText = String.Format("{0:N2}", objSaleOrdersInfo.ARSaleOrderTaxAmount);
                }
                objSaleOrdersInfo.ARSaleOrderPaymentTermText = string.Empty;
                GEPaymentTermsInfo paymentTerm = paymentTermController.GetObjectByID(objSaleOrdersInfo.FK_GEPaymentTermID) as GEPaymentTermsInfo;
                if (paymentTerm != null)
                {
                    objSaleOrdersInfo.ARSaleOrderPaymentTermText = paymentTerm.GEPaymentTermName;
                }
            }
            if (!string.IsNullOrEmpty(objSaleOrdersInfo.ARSaleOrderSaleAgreement))
            {
                XRLabel Text = (XRLabel)report.FindControl("xr_lblARSaleOrderSaleAgreement", false);
                if (Text != null)
                {
                    Text.Text = objSaleOrdersInfo.ARSaleOrderSaleAgreement;
                }
                XRLabel saleAgreement = (XRLabel)report.FindControl("xr_lblaleAgreement", false);
                if (saleAgreement != null)
                {
                    saleAgreement.Text = "Sale Agreement:";
                }
            }

            report.bsSaleOrderItemList.DataSource = SaleOrderItemList;
            report.bsSaleOrdersInfo.DataSource = objSaleOrdersInfo;
            report.DataMember = BOSCommon.Constants.Report.DevSaleOrderItemReportName;
        }

        public void PrintInCountry()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                if (!CheckDepositPayment())
                {
                    if (MessageBox.Show(SaleOrderLocalizedResources.ConfirmDepositBeforePrintingMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    {
                        return;
                    }
                }

                PrintDialog printDialog = new PrintDialog();
                ADReportsController objReportsController = new ADReportsController();
                ADReportsInfo objReportsInfo = (ADReportsInfo)objReportsController.GetObjectByNo(typeof(RPSaleOrder).Name);
                short numCopies = 1;
                if (objReportsInfo != null)
                {
                    numCopies = objReportsInfo.ADReportCopies;
                }
                printDialog.PrinterSettings.Copies = numCopies;
                DialogResult result = printDialog.ShowDialog();
                if (result == DialogResult.OK)
                {
                    string[] copies = new string[] { SaleOrderLocalizedResources.Copy1, SaleOrderLocalizedResources.Copy2 };
                    for (int i = 0; i < printDialog.PrinterSettings.Copies; i++)
                    {
                        string copy = copies[i % copies.Length];
                        RPSaleOrderInCountryViewer report = new RPSaleOrderInCountryViewer();
                        InitSaleOrderInCountryViewerReport(report);
                        XRLabel copyLabel = (XRLabel)report.Bands[BandKind.PageHeader].Controls["xr_lblCopy"];
                        if (copyLabel != null)
                            copyLabel.Text = copy;
                        XtraReportHelper.PrintToPrinter(report, printDialog.PrinterSettings.PrinterName);
                    }
                }
            }
        }

        public void PrintOutSourcing()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                if (!CheckDepositPayment())
                {
                    if (MessageBox.Show(SaleOrderLocalizedResources.ConfirmDepositBeforePrintingMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    {
                        return;
                    }
                }

                PrintDialog printDialog = new PrintDialog();
                ADReportsController objReportsController = new ADReportsController();
                ADReportsInfo objReportsInfo = (ADReportsInfo)objReportsController.GetObjectByNo(typeof(RPSaleOrder).Name);
                short numCopies = 1;
                if (objReportsInfo != null)
                {
                    numCopies = objReportsInfo.ADReportCopies;
                }
                printDialog.PrinterSettings.Copies = numCopies;
                DialogResult result = printDialog.ShowDialog();
                if (result == DialogResult.OK)
                {
                    string[] copies = new string[] { SaleOrderLocalizedResources.Copy1, SaleOrderLocalizedResources.Copy2 };
                    for (int i = 0; i < printDialog.PrinterSettings.Copies; i++)
                    {
                        string copy = copies[i % copies.Length];
                        RPSaleOrderOutSourcingViewer report = new RPSaleOrderOutSourcingViewer();
                        InitSaleOrderOutSourcingViewerReport(report);
                        XRLabel copyLabel = (XRLabel)report.Bands[BandKind.PageHeader].Controls["xr_lblCopy"];
                        if (copyLabel != null)
                            copyLabel.Text = copy;
                        XtraReportHelper.PrintToPrinter(report, printDialog.PrinterSettings.PrinterName);
                    }
                }
            }
        }

        public void PrintSaleWood()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;
                if (!CheckDepositPayment())
                {
                    if (MessageBox.Show(SaleOrderLocalizedResources.ConfirmDepositBeforePrintingMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    {
                        return;
                    }
                }
                PrintDialog printDialog = new PrintDialog();
                ADReportsController objReportsController = new ADReportsController();
                ADReportsInfo objReportsInfo = (ADReportsInfo)objReportsController.GetObjectByNo(typeof(RPSaleOrder).Name);
                short numCopies = 1;
                if (objReportsInfo != null)
                {
                    numCopies = objReportsInfo.ADReportCopies;
                }
                printDialog.PrinterSettings.Copies = numCopies;
                DialogResult result = printDialog.ShowDialog();
                if (result == DialogResult.OK)
                {
                    string[] copies = new string[] { SaleOrderLocalizedResources.Copy1, SaleOrderLocalizedResources.Copy2 };
                    for (int i = 0; i < printDialog.PrinterSettings.Copies; i++)
                    {
                        string copy = copies[i % copies.Length];
                        RPSaleOrderSaleWoodViewer report = new RPSaleOrderSaleWoodViewer();
                        //report.LoadLayout(BOSCommon.Constants.Report.DevSaleOrderItemReportPath);                                
                        InitSaleOrderSaleWoodViewerReport(report);
                        XRLabel copyLabel = (XRLabel)report.Bands[BandKind.PageHeader].Controls["xr_lblCopy"];
                        if (copyLabel != null)
                            copyLabel.Text = copy;
                        XtraReportHelper.PrintToPrinter(report, printDialog.PrinterSettings.PrinterName);
                    }
                }
            }
        }

        public void PrintOutCountry()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;
                if (!CheckDepositPayment())
                {
                    if (MessageBox.Show(SaleOrderLocalizedResources.ConfirmDepositBeforePrintingMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    {
                        return;
                    }
                }

                PrintDialog printDialog = new PrintDialog();
                ADReportsController objReportsController = new ADReportsController();
                ADReportsInfo objReportsInfo = (ADReportsInfo)objReportsController.GetObjectByNo(typeof(RPSaleOrder).Name);
                short numCopies = 1;
                if (objReportsInfo != null)
                {
                    numCopies = objReportsInfo.ADReportCopies;
                }
                printDialog.PrinterSettings.Copies = numCopies;
                DialogResult result = printDialog.ShowDialog();
                if (result == DialogResult.OK)
                {
                    string[] copies = new string[] { SaleOrderLocalizedResources.Copy1, SaleOrderLocalizedResources.Copy2 };
                    for (int i = 0; i < printDialog.PrinterSettings.Copies; i++)
                    {
                        string copy = copies[i % copies.Length];
                        RPSaleOrderViewer report = new RPSaleOrderViewer();
                        InitSaleOrderViewerReport(report);
                        XRLabel copyLabel = (XRLabel)report.Bands[BandKind.PageHeader].Controls["xr_lblCopy"];
                        if (copyLabel != null)
                            copyLabel.Text = copy;
                        XtraReportHelper.PrintToPrinter(report, printDialog.PrinterSettings.PrinterName);
                    }
                }
            }
        }

        public bool CheckDepositPayment()
        {
            bool isPaid = false;
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            if (entity.ARSaleOrderPaymentTimesList == null || entity.ARSaleOrderPaymentTimesList.Count == 0)
                return false;
            if (entity.ARSaleOrderPaymentTimesList.Count == 1)
                return true;
            entity.ARSaleOrderPaymentTimesList.ForEach(o =>
            {
                if (o.ARSaleOrderPaymentTimePaymentType == SaleOrderPaymentTimePaymentType.Deposit.ToString()
                    && (o.ARSaleOrderPaymentTimeStatus == SaleOrderPaymentTimeStatus.Paid.ToString()
                        || o.ARSaleOrderPaymentTimeDepositBalance > 0))
                    isPaid = true;
            });
            return isPaid;
        }

        public void PrintOrder()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;

            ADConfigValuesController objConfigValuesController = new ADConfigValuesController();
            ADConfigValuesInfo objConfigValuesInfo = objConfigValuesController.GetObjectByConfigKey(ConfigValueKey.ApproveBeforePrintSaleOrder);

            if (objConfigValuesInfo != null && objConfigValuesInfo.ADConfigKeyValue == "1" && objSaleOrdersInfo.ARSaleOrderStatus != SaleOrderStatus.Confirmed.ToString())
            {
                MessageBox.Show(SaleOrderLocalizedResources.ApproveBeforePrintMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            RPSaleOrderTV report = new RPSaleOrderTV();
            InitPrintSaleOrderTV(report);
            guiReportPreview reviewer = new guiReportPreview(report, null, true);
            reviewer.Show();
        }

        public void InitPrintSaleOrderTV(RPSaleOrderTV report)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            CSCompanysController objCompanysController = new CSCompanysController();
            CSCompanysInfo objCompanysInfo = (CSCompanysInfo)objCompanysController.GetObjectByID(BOSApp.CurrentCompanyInfo.CSCompanyID);
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = (ACObjectsInfo)objObjectsController.GetObjectByIDAndType(mainObject.FK_ACObjectID, mainObject.ARObjectType);
            ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)objSaleOrdersController.GetObjectByID(mainObject.ARSaleOrderID);
            ARSaleOrderItemsController objSaleOrderItemsController = new ARSaleOrderItemsController();
            List<ARSaleOrderItemsInfo> saleOrderItemsList = objSaleOrderItemsController.GetDataSourceForRPSaleOrderTV(mainObject.ARSaleOrderID);
            List<int> productIDList = saleOrderItemsList.Select(p => p.FK_ICProductID).ToList<int>();
            List<ICProductFilesInfo> productFiles = ApiClientHelper.GetPrimaryImages(productIDList.ToArray());
            ICProductFilesInfo objProductFilesInfo = new ICProductFilesInfo();
            System.ComponentModel.ComponentResourceManager resourceImgDefault = new System.ComponentModel.ComponentResourceManager(typeof(RPProductCollection));
            Image imgDefault = ((System.Drawing.Image)(resourceImgDefault.GetObject("xrPictureBox4.Image")));
            saleOrderItemsList.ForEach(p =>
            {
                objProductFilesInfo = productFiles.Where(o1 => o1.FK_ICProductID == p.FK_ICProductID).FirstOrDefault();
                p.ICProductImage = objProductFilesInfo == null ? imgDefault : objProductFilesInfo.ICProductFileImage;
                if (p.IsInlandItemProductName)
                {
                    p.ARSaleOrderItemProductDesc = p.ARSaleOrderItemProductName;
                }
            });
            report.bsCSCompanys.DataSource = objCompanysInfo != null ? objCompanysInfo : new CSCompanysInfo();
            report.bsACObjects.DataSource = objObjectsInfo != null ? objObjectsInfo : new ACObjectsInfo();
            report.bsARSaleOrders.DataSource = objSaleOrdersInfo != null ? objSaleOrdersInfo : new ARSaleOrdersInfo();
            report.bsARSaleOrderItems.DataSource = saleOrderItemsList != null ? saleOrderItemsList : new List<ARSaleOrderItemsInfo>();
        }

        public ARSaleOrderItemsInfo ToSaleOrderItemFromSaleOrderItemWorks(ARSaleOrderItemWorksInfo objSaleOrderItemWorksInfo)
        {
            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(objSaleOrderItemWorksInfo.FK_ICProductID);
            ICMeasureUnitsController objMeasureUnitsController = new ICMeasureUnitsController();
            ICMeasureUnitsInfo objMeasureUnitsInfo = (ICMeasureUnitsInfo)objMeasureUnitsController.GetObjectByID(objSaleOrderItemWorksInfo.FK_ICMeasureUnitID);
            string saleOrderItemProductSize = string.Empty;
            if (objProductsInfo != null && (objProductsInfo.ICProductLength > 0 || objProductsInfo.ICProductWidth > 0 || objProductsInfo.ICProductHeight > 0))
            {
                List<string> productSizeList = new List<string>();
                if (objProductsInfo.ICProductLength != 0)
                    productSizeList.Add(ToString(objProductsInfo.ICProductLength));
                if (objProductsInfo.ICProductWidth != 0)
                    productSizeList.Add(ToString(objProductsInfo.ICProductWidth));
                if (objProductsInfo.ICProductHeight != 0)
                    productSizeList.Add(ToString(objProductsInfo.ICProductHeight));
                saleOrderItemProductSize = string.Join("x", productSizeList.ToArray());
            }
            return new ARSaleOrderItemsInfo
            {
                ARSaleOrderItemProductNo = objSaleOrderItemWorksInfo.ARSaleOrderItemWorkProductNo,
                ARSaleOrderItemProductName = objSaleOrderItemWorksInfo.ARSaleOrderItemWorkProductName,
                ARSaleOrderItemProductQty = objSaleOrderItemWorksInfo.ARSaleOrderItemWorkProductQty,
                ARSaleOrderItemProductUnitPrice = objSaleOrderItemWorksInfo.ARSaleOrderItemWorkProductUnitPrice,
                ARSaleOrderItemProductDiscount = objSaleOrderItemWorksInfo.ARSaleOrderItemWorkDiscountPerCent,
                ARSaleOrderItemDiscountAmount = objSaleOrderItemWorksInfo.ARSaleOrderItemWorkDiscountAmount,
                ARSaleOrderItemTotalAmount = objSaleOrderItemWorksInfo.ARSaleOrderItemWorkTotalAmount,
                ARSaleOrderItemPrice = objSaleOrderItemWorksInfo.ARSaleOrderItemWorkProductUnitPrice * objSaleOrderItemWorksInfo.ARSaleOrderItemWorkProductQty,
                ARSaleOrderItemProductSize = saleOrderItemProductSize,
                ARSaleOrderItemProductDesc = objSaleOrderItemWorksInfo.ARSaleOrderItemWorkProductDesc,
                ICMeasureUnitName = objMeasureUnitsInfo == null ? string.Empty : objMeasureUnitsInfo.ICMeasureUnitName,
                FK_ICDepartmentID = objSaleOrderItemWorksInfo.FK_ICDepartmentID,
                ICProductUnitPrice = objSaleOrderItemWorksInfo.ARSaleOrderItemWorkProductUnitPrice,
                ARSaleOrderItemVirtualID = Guid.NewGuid().ToString()
        };
        }

        private string ToString(decimal number)
        {
            if (number == 0)
                return "0";
            if (number > 0 && number < 1)
                return number.ToString("N3");
            return number / Convert.ToInt32(number) != 1 ? number.ToString("N3") : number.ToString("N0");
        }

        public void ShownInventoryStocks()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
                ICInventoryStocksInfo objInventoryStocksInfo = new ICInventoryStocksInfo();
                ICInventoryStocksController objInventoryStocksController = new ICInventoryStocksController();
                guiShowInventoryStock guiShowInventoryStock = new guiShowInventoryStock(objSaleOrdersInfo.ARSaleOrderProductType);
                guiShowInventoryStock.Module = this;
                guiShowInventoryStock.ShowDialog();
                List<ICProductSeriesInfo> SeriesList = new List<ICProductSeriesInfo>();
                SeriesList = guiShowInventoryStock.ProductSeriesInfoList;
                if (SeriesList.Count > 0)
                {
                    GetSelectedSeriesList(SeriesList);
                    SetDefaultSaleOrderTaxPercent();
                }
            }
        }

        public void GetSelectedSeriesList(List<ICProductSeriesInfo> SeriesList)
        {
            string type = string.Empty;
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;

            ICProductsController objProductsController = new ICProductsController();

            foreach (ICProductSeriesInfo item in SeriesList)
            {
                ARSaleOrderItemsInfo objSaleOrderItemsInfo = new ARSaleOrderItemsInfo();
                BOSUtil.CopyObject(item, objSaleOrderItemsInfo);
                //ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);
                ICProductsInfo objProductsInfo = BOSApp.GetProductFromCurrentProductList(item.FK_ICProductID);
                if (objProductsInfo != null)
                {
                    objSaleOrderItemsInfo.ARSaleOrderItemProductDesc = objProductsInfo.ICProductDesc;
                    objSaleOrderItemsInfo.ARSaleOrderItemProductName = objProductsInfo.ICProductName;
                    objSaleOrderItemsInfo.FK_ICMeasureUnitID = objProductsInfo.FK_ICProductBasicUnitID;
                    //objSaleOrderItemsInfo.ARSaleOrderItemHTID = objProductsInfo.ICProductAttributeFinishing;
                    //objSaleOrderItemsInfo.ARSaleOrderItemHTText = objProductsInfo.ICProductAttributeFinishingText;
                    //Màu sơn
                    objSaleOrderItemsInfo.ARSaleOrderItemColorID = objProductsInfo.FK_ICProductAttributeColorID.ToString();
                    objSaleOrderItemsInfo.ARSaleOrderItemColorText = GetAttributeText(objProductsInfo.ICProductColorAttribute);
                    //Loại gỗ
                    objSaleOrderItemsInfo.FK_ICProductAttributeWoodTypeID = objProductsInfo.FK_ICProductAttributeWoodTypeID;
                    //objSaleOrderItemsInfo.ARSaleOrderItemWoodTypeID = objProductsInfo.FK_ICProductAttributeWoodTypeID.ToString();
                    //objSaleOrderItemsInfo.ARSaleOrderItemWoodTypeText = GetAttributeText(objProductsInfo.ICProductWoodTypeAttribute);

                    objSaleOrderItemsInfo.ARSaleOrderItemProductDesc = objProductsInfo.ICProductDesc;
                    objSaleOrderItemsInfo.FK_ICPerimeterGroupID = objProductsInfo.FK_ICPerimeterGroupID;
                }
                objSaleOrderItemsInfo.ARSaleOrderItemProductSerialNo = item.ICProductSerieNo;
                objSaleOrderItemsInfo.ARSaleOrderItemLotNo = item.ICProductSerieLotNo;
                objSaleOrderItemsInfo.ARSaleOrderItemLotNo = item.ICProductSerieLotNo;
                objSaleOrderItemsInfo.ARSaleOrderItemProductQty = item.ICInventoryStockQuantity;
                objSaleOrderItemsInfo.ARSaleOrderItemWoodQty = item.ICInventoryStockWoodQuantity;
                objSaleOrderItemsInfo.FK_ICProductSerieID = item.ICProductSerieID;
                objSaleOrderItemsInfo.ARSaleOrderItemOriginOfProduct = objProductsInfo.ICProductOriginOfProduct;
                objSaleOrderItemsInfo.ARSaleOrderItemGrantedFrom = SaleOrderItemGrantedFrom.Inventory.ToString();

                objSaleOrderItemsInfo.ARSaleOrderItemHeight = item.ICProductSerieProductHeight;
                objSaleOrderItemsInfo.ARSaleOrderItemWidth = item.ICProductSerieProductWidth;
                objSaleOrderItemsInfo.ARSaleOrderItemLength = item.ICProductSerieProductLength;
                objSaleOrderItemsInfo.ARSaleOrderItemPerimeter = item.ICProductSerieProductPerimeter;
                //objSaleOrderItemsInfo.ARSaleOrderItemHeightMin = item.
                objSaleOrderItemsInfo.ARSaleOrderItemWidthMin = item.ICProductSerieProductWidth;
                objSaleOrderItemsInfo.ARSaleOrderItemLengthMin = item.ICProductSerieProductLength;
                objSaleOrderItemsInfo.ARSaleOrderItemPerimeterMin = item.ICProductSerieProductPerimeter;
                objSaleOrderItemsInfo.ARSaleOrderItemVirtualID = Guid.NewGuid().ToString();
                //objSaleOrderItemsInfo.ARSaleOrderItemHeightMax = 
                objSaleOrderItemsInfo.ARSaleOrderItemWidthMax = item.ICProductSerieProductWidthMax;
                objSaleOrderItemsInfo.ARSaleOrderItemLentghMax = item.ICProductSerieProductLengthMax;
                objSaleOrderItemsInfo.ARSaleOrderItemPerimeterMax = item.ICProductSerieProductLengthMax;
                objSaleOrderItemsInfo.ICProductUnitPrice = objProductsInfo.ICProductPrice01;
                objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice = objSaleOrderItemsInfo.ICProductUnitPrice;
                objSaleOrderItemsInfo.ARSaleOrderItemIsInvoiceAndShipment = objSaleOrdersInfo.ARSaleOrderIsInvoiceAndShipment;
                objSaleOrderItemsInfo.ARSaleOrderItemIsDeliveryPlan = objSaleOrdersInfo.ARSaleOrderIsDeliveryPlan;
                objSaleOrderItemsInfo.ARSaleOrderItemIsSaleOrderShipment = objSaleOrdersInfo.ARSaleOrderIsSaleOrderShipment;
                objSaleOrderItemsInfo.ARSaleOrderItemIsVehicleAllocation = objSaleOrdersInfo.ARSaleOrderIsVehicleAllocation;
                objSaleOrderItemsInfo.ARSaleOrderItemIsAcceptance = objSaleOrdersInfo.ARSaleOrderIsAcceptance;
                objSaleOrderItemsInfo.ARSaleOrderItemIsContainerLoader = objSaleOrdersInfo.ARSaleOrderIsContainerLoader;
                objSaleOrderItemsInfo.ARSaleOrderItemDeliveryDate = objSaleOrdersInfo.ARSaleOrderDeliveryDate;

                entity.RoundByCurrency(objSaleOrderItemsInfo);
                entity.SetProductPriceByProductUnitPrice(objSaleOrderItemsInfo);
                if (objProductsInfo != null)
                {
                    type = objProductsInfo.ICProductType;
                }
                //if (type == SaleOrderProductType.Hardware.ToString() ||
                //type == SaleOrderProductType.IngredientPackaging.ToString() ||
                //type == SaleOrderProductType.IngredientPaint.ToString() ||
                //type == SaleOrderProductType.SemiProduct.ToString() ||
                //type == SaleOrderProductType.Other.ToString() ||
                //type == string.Empty ||
                //type == SaleOrderProductType.Product.ToString()
                //)
                //{
                //    if (type == SaleOrderProductType.IngredientPaint.ToString())
                //    {
                //        objSaleOrderItemsInfo.ARSaleOrderItemProductQty = Math.Round(objSaleOrderItemsInfo.ARSaleOrderItemProductQty, 4, MidpointRounding.AwayFromZero);
                //    }
                //    else
                //    {
                //        objSaleOrderItemsInfo.ARSaleOrderItemProductQty = Math.Round(objSaleOrderItemsInfo.ARSaleOrderItemProductQty, 3, MidpointRounding.AwayFromZero);
                //    }
                //    
                //}
                entity.ARSaleOrderItemsList.Add(objSaleOrderItemsInfo);
            }
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
        }

        public void ChangeItemSerieNo(ARSaleOrderItemsInfo item)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            string type = string.Empty;
            type = objSaleOrdersInfo.ARSaleOrderProductType;
            DataGenerator.ChangeValuesARSaleOderItemsGridFromProductSeries(item);
            UpdateTotalAmount(entity.ARSaleOrderItemsList);
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
        }

        #region New from Allocation Plan
        public void NewFromAllocationPlan(string allocationPlanType)
        {
            if (Toolbar.IsNullOrNoneAction())
            {
                ActionNew();
                SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;
                MMAllocationPlanItemsController objAllocationPlanItemsController = new MMAllocationPlanItemsController();
                List<MMAllocationPlanItemsInfo> objAllocationPlanItemsList = objAllocationPlanItemsController.GetAllocationPlanItemForSaleOrder(allocationPlanType);
            Stamp:
                guiFind<MMAllocationPlanItemsInfo> guiFind = new guiFind<MMAllocationPlanItemsInfo>(TableName.MMAllocationPlanItemsTableName,
                                                                                                    objAllocationPlanItemsList,
                                                                                                    this,
                                                                                                    true,
                                                                                                    true,
                                                                                                    new string[] { "MMAllocationPlanNo" });
                if (guiFind.ShowDialog() == DialogResult.OK)
                {
                    if (guiFind.SelectedObjects != null && guiFind.SelectedObjects.Count > 0)
                    {
                        int allocationPlanID = guiFind.SelectedObjects[0].FK_MMAllocationPlanID;
                        MMAllocationPlanItemsInfo objAllocationPlanItemsInfo = guiFind.SelectedObjects.FirstOrDefault(i => i.FK_MMAllocationPlanID != allocationPlanID);
                        if (objAllocationPlanItemsInfo != null)
                        {
                            MessageBox.Show(SaleOrderLocalizedResources.ChooseOneAllocationPlan, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            goto Stamp;
                        }
                        foreach (MMAllocationPlanItemsInfo item in guiFind.SelectedObjects)
                        {
                            if (objSaleOrdersInfo.FK_MMBatchProductID == 0)
                            {
                                objSaleOrdersInfo.FK_MMBatchProductID = item.FK_MMBatchProductID;
                            }
                            ARSaleOrderItemsInfo objSaleOrderItemsInfo = new ARSaleOrderItemsInfo();
                            BOSUtil.CopyObject(item, objSaleOrderItemsInfo);
                            objSaleOrderItemsInfo.ARSaleOrderItemVirtualID = Guid.NewGuid().ToString();
                            objSaleOrderItemsInfo.FK_MMAllocationPlanID = item.FK_MMAllocationPlanID;
                            objSaleOrderItemsInfo.FK_MMAllocationPlanItemID = item.Id;
                            objSaleOrderItemsInfo.ARSaleOrderItemProductQty = item.MMAllocationPlanItemQty - item.MMAllocationPlanItemCanceledQty - item.MMAllocationPlanItemSaleOrderQty;
                            objSaleOrderItemsInfo.ARSaleOrderItemWoodQty = item.MMAllocationPlanItemWoodQty - item.MMAllocationPlanItemCanceledWoodQty - item.MMAllocationPlanItemSaleOrderWoodQty;
                            if (allocationPlanType == SaleOrderProductType.DryLumber.ToString() || allocationPlanType == SaleOrderProductType.FreshLumber.ToString()
                                || allocationPlanType == SaleOrderProductType.Verneer.ToString() || allocationPlanType == SaleOrderProductType.ArtificialBoard.ToString())
                            {
                                objSaleOrderItemsInfo.ARSaleOrderItemProductQty = Math.Round(objSaleOrderItemsInfo.ARSaleOrderItemProductQty, 4, MidpointRounding.AwayFromZero);
                                //entity.LumberWoodList.Add(objSaleOrderItemsInfo);
                            }
                            if (allocationPlanType == SaleOrderProductType.Roundwood.ToString())
                            {
                                objSaleOrderItemsInfo.ARSaleOrderItemProductQty = Math.Round(objSaleOrderItemsInfo.ARSaleOrderItemProductQty, 4, MidpointRounding.AwayFromZero);
                                //entity.RoundWoodList.Add(objSaleOrderItemsInfo);
                            }
                            if (allocationPlanType == SaleOrderProductType.Hardware.ToString() ||
                                allocationPlanType == SaleOrderProductType.IngredientPackaging.ToString() ||
                                allocationPlanType == SaleOrderProductType.IngredientPaint.ToString() ||
                                allocationPlanType == SaleOrderProductType.SemiProduct.ToString() ||
                                allocationPlanType == SaleOrderProductType.Other.ToString() ||
                                allocationPlanType == SaleOrderProductType.Product.ToString() ||
                                allocationPlanType == string.Empty
                                )
                            {
                                if (allocationPlanType == SaleOrderProductType.IngredientPaint.ToString())
                                {
                                    objSaleOrderItemsInfo.ARSaleOrderItemProductQty = Math.Round(objSaleOrderItemsInfo.ARSaleOrderItemProductQty, 4, MidpointRounding.AwayFromZero);
                                }
                                else
                                {
                                    objSaleOrderItemsInfo.ARSaleOrderItemProductQty = Math.Round(objSaleOrderItemsInfo.ARSaleOrderItemProductQty, 3, MidpointRounding.AwayFromZero);
                                }
                                ICProductsController productController = new ICProductsController();
                                ICProductsInfo objProductsInfo = (ICProductsInfo)productController.GetObjectByID(objSaleOrderItemsInfo.FK_ICProductID);
                                if (objProductsInfo != null)
                                {
                                    // Hoàn thiện
                                    objSaleOrderItemsInfo.ARSaleOrderItemHTID = objProductsInfo.ICProductAttributeFinishing;
                                    objSaleOrderItemsInfo.ARSaleOrderItemHTText = objProductsInfo.ICProductAttributeFinishingText;
                                    //Màu sơn
                                    objSaleOrderItemsInfo.ARSaleOrderItemColorID = objProductsInfo.ICProductColorAttribute;
                                    objSaleOrderItemsInfo.ARSaleOrderItemColorText = GetAttributeText(objProductsInfo.ICProductColorAttribute);
                                    //Loại gỗ
                                    objSaleOrderItemsInfo.ARSaleOrderItemWoodTypeID = objProductsInfo.ICProductWoodTypeAttribute;
                                    objSaleOrderItemsInfo.ARSaleOrderItemWoodTypeText = GetAttributeText(objProductsInfo.ICProductWoodTypeAttribute);

                                    objSaleOrderItemsInfo.ARSaleOrderItemProductDesc = objProductsInfo.ICProductDesc;
                                }
                                entity.ARSaleOrderItemsList.Add(objSaleOrderItemsInfo);
                            }
                        }

                        if (allocationPlanType == SaleOrderProductType.DryLumber.ToString() || allocationPlanType == SaleOrderProductType.FreshLumber.ToString()
                            || allocationPlanType == SaleOrderProductType.Verneer.ToString() || allocationPlanType == SaleOrderProductType.ArtificialBoard.ToString())
                        {
                            //entity.LumberWoodList.GridControl?.RefreshDataSource();
                            UpdateContQty();
                            //UpdateTotalAmount(entity.LumberWoodList);
                        }
                        if (allocationPlanType == SaleOrderProductType.Roundwood.ToString())
                        {
                            //entity.RoundWoodList.GridControl?.RefreshDataSource();
                            UpdateContQty();
                            //UpdateTotalAmount(entity.RoundWoodList);
                        }
                        if (allocationPlanType == SaleOrderProductType.Hardware.ToString() ||
                            allocationPlanType == SaleOrderProductType.IngredientPackaging.ToString() ||
                            allocationPlanType == SaleOrderProductType.IngredientPaint.ToString() ||
                            allocationPlanType == SaleOrderProductType.SemiProduct.ToString() ||
                              allocationPlanType == SaleOrderProductType.Other.ToString() ||
                              allocationPlanType == SaleOrderProductType.Product.ToString() ||
                             allocationPlanType == string.Empty

                            )
                        {
                            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
                            UpdateContQty();
                            UpdateTotalAmount(entity.ARSaleOrderItemsList);
                        }
                    }
                }
            }
        }

        public void NewFromAllocationPlanWood()
        {
            NewFromAllocationPlan(AllocationPlanType.DryLumber.ToString());
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            objSaleOrdersInfo.ARSaleOrderType = SaleOrderType.OutSourcing.ToString();
            objSaleOrdersInfo.ARSaleOrderProductType = SaleOrderProductType.DryLumber.ToString();

        }

        public void NewFromAllocationPlanHardware()
        {


            NewFromAllocationPlan(AllocationPlanType.Hardware.ToString());
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            objSaleOrdersInfo.ARSaleOrderType = SaleOrderType.OutSourcing.ToString();
            objSaleOrdersInfo.ARSaleOrderProductType = SaleOrderProductType.Hardware.ToString();

        }

        public void NewFromAllocationPlanIngredientPaint()
        {

            NewFromAllocationPlan(AllocationPlanType.IngredientPaint.ToString());
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            objSaleOrdersInfo.ARSaleOrderType = SaleOrderType.OutSourcing.ToString();
            objSaleOrdersInfo.ARSaleOrderProductType = SaleOrderProductType.IngredientPaint.ToString();

        }

        public void NewFromAllocationPlanIngredientPackaging()
        {


            NewFromAllocationPlan(AllocationPlanType.IngredientPackaging.ToString());
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            objSaleOrdersInfo.ARSaleOrderType = SaleOrderType.OutSourcing.ToString();
            objSaleOrdersInfo.ARSaleOrderProductType = SaleOrderProductType.IngredientPackaging.ToString();

        }

        public void NewFromAllocationPlanSemiProduct()
        {

            NewFromAllocationPlan(AllocationPlanType.SemiProduct.ToString());
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            objSaleOrdersInfo.ARSaleOrderType = SaleOrderType.OutSourcing.ToString();
            objSaleOrdersInfo.ARSaleOrderProductType = SaleOrderProductType.SemiProduct.ToString();
        }
        #endregion
        public void EditPrice()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                IsEditPrice = true;
                base.ActionEdit();

                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonSave, true);
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, false);

                LoadControlByEditPrice(IsEditPrice);
            }
        }

        //public void CheckPaymentTimeAmount()
        //{
        //    SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
        //    ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
        //    decimal depositAmount = 0;
        //    foreach (ARSaleOrderPaymentTimesInfo item in entity.ARSaleOrderPaymentTimesList)
        //    {
        //        GEPaymentTermItemsInfo objPaymentTermItemsInfo = new GEPaymentTermItemsInfo();
        //        List<GEPaymentTermItemsInfo> ListPaymentTermItem = new List<GEPaymentTermItemsInfo>();
        //        GEPaymentTermItemsController objPaymentTermItemsController = new GEPaymentTermItemsController();
        //        ListPaymentTermItem = objPaymentTermItemsController.GetListItemByPaymentTermID(item.FK_GEPaymentTermID);
        //        if (ListPaymentTermItem != null && ListPaymentTermItem.Count > 0)
        //        {
        //            if (ListPaymentTermItem.Count < 3)
        //            {
        //                if (item.ARSaleOrderPaymentTimePaymentType == SaleOrderPaymentTimePaymentType.Deposit.ToString())
        //                {
        //                    objPaymentTermItemsInfo = ListPaymentTermItem.Where(x => x.GEPaymentTermItemPaymentType == PaymentTermItemPaymentType.Deposit.ToString()).FirstOrDefault();
        //                }
        //                if (item.ARSaleOrderPaymentTimePaymentType == SaleOrderPaymentTimePaymentType.Payment.ToString())
        //                {
        //                    objPaymentTermItemsInfo = ListPaymentTermItem.Where(x => x.GEPaymentTermItemPaymentType == PaymentTermItemPaymentType.Payment.ToString()).FirstOrDefault();
        //                }
        //                if (item.ARSaleOrderPaymentTimePaymentType == "Final Payment")
        //                {
        //                    objPaymentTermItemsInfo = ListPaymentTermItem.Where(x => x.GEPaymentTermItemPaymentType == PaymentTermItemPaymentType.Payment.ToString()).FirstOrDefault();
        //                }
        //                if (objPaymentTermItemsInfo != null)
        //                {
        //                    if (item.ARSaleOrderPaymentTimePaymentType == SaleOrderPaymentTimePaymentType.Deposit.ToString())
        //                        item.ARSaleOrderPaymentTimeAmount = mainObject.ARSaleOrderTotalAmount * objPaymentTermItemsInfo.GEPaymentTermItemPercentPayment / 100;
        //                    else
        //                        item.ARSaleOrderPaymentTimeAmount = mainObject.ARSaleOrderTotalAmount - depositAmount;
        //                    item.ARSaleOrderPaymentTimeBalanceDue = item.ARSaleOrderPaymentTimeAmount - item.ARSaleOrderPaymentTimeDepositBalance;
        //                }
        //                BOSApp.RoundByCurrency(item, mainObject.FK_GECurrencyID);
        //                if (item.ARSaleOrderPaymentTimePaymentType == SaleOrderPaymentTimePaymentType.Deposit.ToString())
        //                    depositAmount = item.ARSaleOrderPaymentTimeAmount;
        //            }
        //            else
        //            {
        //                GEPaymentTermItemsInfo paymentTermItemInfo = (GEPaymentTermItemsInfo)objPaymentTermItemsController.GetObjectByID(item.FK_GEPaymentTermItemID);
        //                if (paymentTermItemInfo != null)
        //                {
        //                    item.ARSaleOrderPaymentTimeAmount = mainObject.ARSaleOrderTotalAmount * paymentTermItemInfo.GEPaymentTermItemPercentPayment / 100;
        //                    item.ARSaleOrderPaymentTimeBalanceDue = item.ARSaleOrderPaymentTimeAmount - item.ARSaleOrderPaymentTimeDepositBalance;
        //                }
        //            }
        //        }
        //    }
        //    if (mainObject.ARSaleOrderTotalAmount < entity.ARSaleOrderPaymentTimesList.Sum(s => s.ARSaleOrderPaymentTimeAmount))
        //    {
        //        MessageBox.Show(SaleOrderLocalizedResources.InvalidPaymentTimeAmount, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
        //    }
        //    entity.ARSaleOrderPaymentTimesList.GridControl?.RefreshDataSource();
        //}

        public void UpdatePriceForSaleType(ARSaleOrderItemsInfo item)
        {
            BOSProgressBar.Start("Đang xử lý");
            IsSave = true;
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;

            if (mainObject.ARSaleOrderSaleType == SaleType.National.ToString())
            {
                entity.RoundByCurrency(item);
                if (item.ARSaleOrderItemProductUnitPrice2 <= 0)
                {
                    item.ARSaleOrderItemProductUnitPrice2 = item.ICProductUnitPrice;
                }
                //item.ARSaleOrderItemProductUnitPrice = (mainObject.ARSaleOrderExchangeRate > 0 ? item.ARSaleOrderItemProductUnitPrice2 * mainObject.ARSaleOrderExchangeRate2 / mainObject.ARSaleOrderExchangeRate : 0);
                entity.SetProductPriceByProductUnitPrice(item);
                entity.UpdateMainObjectBindingSource();
                UpdateTotalAmount(entity.ARSaleOrderItemsList);
                entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
            }
            else if (mainObject.ARSaleOrderSaleType == SaleType.International.ToString())
            {
                entity.RoundByCurrency(item);
                item.ARSaleOrderItemProductUnitPrice2 = (mainObject.ARSaleOrderExchangeRate2 > 0 ? item.ARSaleOrderItemProductUnitPrice * mainObject.ARSaleOrderExchangeRate / mainObject.ARSaleOrderExchangeRate2 : 0);
                entity.SetProductPriceByProductUnitPrice(item);
                entity.UpdateMainObjectBindingSource();
                UpdateTotalAmount(entity.ARSaleOrderItemsList);
                entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
            }
            else
            {
                MessageBox.Show(SaleOrderLocalizedResources.SaleOrderSaleTypeMessage, CommonLocalizedResources.MessageBoxDefaultCaption,
                                                                  MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            IsSave = false;
            BOSProgressBar.Close();
        }

        public void UpdatePriceForSaleType()
        {
            BOSProgressBar.Start("Đang xử lý");
            IsSave = true;
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            if (mainObject.ARSaleOrderSaleType == SaleType.National.ToString())
            {
                if (entity.ARSaleOrderItemsList != null && entity.ARSaleOrderItemsList.Count > 0)
                {
                    foreach (ARSaleOrderItemsInfo item in entity.ARSaleOrderItemsList)
                    {
                        entity.RoundByCurrency(item);
                        if (item.ARSaleOrderItemProductUnitPrice2 <= 0)
                        {
                            item.ARSaleOrderItemProductUnitPrice2 = item.ICProductUnitPrice;
                        }
                        //item.ARSaleOrderItemProductUnitPrice = (mainObject.ARSaleOrderExchangeRate > 0 ? item.ARSaleOrderItemProductUnitPrice2 * mainObject.ARSaleOrderExchangeRate2 / mainObject.ARSaleOrderExchangeRate : 0);
                        entity.SetProductPriceByProductUnitPrice(item);
                    }
                }
            }
            else if (mainObject.ARSaleOrderSaleType == SaleType.International.ToString())
            {
                if (entity.ARSaleOrderItemsList != null && entity.ARSaleOrderItemsList.Count > 0)
                {
                    foreach (ARSaleOrderItemsInfo item in entity.ARSaleOrderItemsList)
                    {
                        entity.RoundByCurrency(item);
                        item.ARSaleOrderItemProductUnitPrice2 = (mainObject.ARSaleOrderExchangeRate2 > 0 ? item.ARSaleOrderItemProductUnitPrice * mainObject.ARSaleOrderExchangeRate / mainObject.ARSaleOrderExchangeRate2 : 0);
                        entity.SetProductPriceByProductUnitPrice(item);
                    }
                }
            }
            entity.UpdateTotalAmount(entity.ARSaleOrderItemsList);
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
            IsSave = false;
            BOSProgressBar.Close();
        }

        public void ChangePaymentTimeAmount(int GEPaymentTermID)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            GEPaymentTermItemsInfo objPaymentTermItemsInfo = new GEPaymentTermItemsInfo();
            List<GEPaymentTermItemsInfo> ListPaymentTermItem = new List<GEPaymentTermItemsInfo>();
            GEPaymentTermItemsController objPaymentTermItemsController = new GEPaymentTermItemsController();
            ListPaymentTermItem = objPaymentTermItemsController.GetListItemByPaymentTermID(GEPaymentTermID);
            decimal depositAmount = 0;
            if (ListPaymentTermItem.Count < 3)
            {
                foreach (ARSaleOrderPaymentTimesInfo item in entity.ARSaleOrderPaymentTimesList)
                {
                    if (item.ARSaleOrderPaymentTimePaymentType == SaleOrderPaymentTimePaymentType.Deposit.ToString())
                    {
                        objPaymentTermItemsInfo = ListPaymentTermItem.Where(x => x.GEPaymentTermItemPaymentType == PaymentTermItemPaymentType.Deposit.ToString()).FirstOrDefault();
                        if (objPaymentTermItemsInfo != null)
                        {
                            BOSApp.RoundByCurrency(item, mainObject.FK_GECurrencyID);
                            item.ARSaleOrderPaymentTimeAmount = mainObject.ARSaleOrderTotalAmount * objPaymentTermItemsInfo.GEPaymentTermItemPercentPayment / 100;
                            BOSApp.RoundByCurrency(item, mainObject.FK_GECurrencyID);
                            depositAmount = item.ARSaleOrderPaymentTimeAmount;
                        }
                    }
                    if (item.ARSaleOrderPaymentTimePaymentType == "Final Payment")
                    {
                        item.ARSaleOrderPaymentTimeAmount = mainObject.ARSaleOrderTotalAmount - depositAmount;
                    }
                    BOSApp.RoundByCurrency(item, mainObject.FK_GECurrencyID);
                }
            }
        }
        public void UpdateTotalAmountByCurrency(int currencieID)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            mainObject.FK_GECurrencyID = currencieID;
            mainObject.ARSaleOrderExchangeRate = entity.GetCurrencyExchangeRate(currencieID, BOSApp.GetCurrentServerDate()) != null
                ? entity.GetCurrencyExchangeRate(currencieID, BOSApp.GetCurrentServerDate()).GECurrencyExchangeRateTransferExchangeRate
                : 1;
            CSCompanysInfo objCompanysInfo = BOSApp.CurrentCompanyInfo;
            ARCustomersController objCustomersController = new ARCustomersController();
            ARCustomersInfo objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectByID(mainObject.FK_ARCustomerID);
            if (entity.ARSaleOrderItemsList != null && entity.ARSaleOrderItemsList.Count > 0)
            {
                if (mainObject.STToolbarActionName.Equals("Manual")
                    || mainObject.STToolbarActionName.Equals("NewFromOther")
                    || mainObject.STToolbarActionName.Equals("NewFromWood"))
                {
                    if (objCompanysInfo != null && objCompanysInfo.CSSourceSellingPriceMethod == ADConfigValueUtility.cstSourceSellingPriceMethodMasterData)
                    {
                        entity.ARSaleOrderItemsList.ForEach(o =>
                        {
                            o.ARSaleOrderItemProductUnitPrice2 = mainObject.ARSaleOrderExchangeRate2 > 0 ? o.ARSaleOrderItemProductUnitPrice * mainObject.ARSaleOrderExchangeRate / mainObject.ARSaleOrderExchangeRate2 : 0;
                            entity.SetProductPriceByProductUnitPrice(o);
                            BOSApp.RoundByCurrency(o, mainObject.FK_GECurrencyID);
                        });
                    }
                    else if (objCompanysInfo != null && objCompanysInfo.CSSourceSellingPriceMethod == ADConfigValueUtility.cstSourceSellingPriceMethodPriceSheet)
                    {
                        entity.ARSaleOrderItemsList.ForEach(o =>
                        {
                            ICProductsInfo product = BOSApp.GetProductFromCurrentProductList(o.FK_ICProductID);
                            decimal sumQty = entity.ARSaleOrderItemsList.Where(p => o.FK_ICProductID == p.FK_ICProductID && o.FK_ICMeasureUnitID == p.FK_ICMeasureUnitID).Sum(p => p.ARSaleOrderItemProductQty);
                            if (product != null && product.ICProductType == ProductType.Product.ToString())
                            {
                                o.ARSaleOrderItemProductUnitPrice = BOSApp.CalculaterProductUnitPrice(product, o.ARSaleOrderItemProductUnitPrice, sumQty, o.FK_ICMeasureUnitID, objCustomersInfo != null ? objCustomersInfo.ARCustomerID : 0, mainObject.ARSaleOrderDate, mainObject.FK_GECurrencyID);
                                o.ICProductUnitPrice = o.ARSaleOrderItemProductUnitPrice;
                                BOSApp.RoundByCurrency(o, mainObject.FK_GECurrencyID);
                                o.ARSaleOrderItemProductUnitPrice2 = mainObject.ARSaleOrderExchangeRate2 > 0 ? o.ARSaleOrderItemProductUnitPrice * mainObject.ARSaleOrderExchangeRate / mainObject.ARSaleOrderExchangeRate2 : 0;
                            }
                            entity.SetProductPriceByProductUnitPrice(o);
                        });
                    }    
                }
                entity.UpdateTotalAmount(entity.ARSaleOrderItemsList);
                entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
            }
            foreach (ARSaleOrderPaymentTimesInfo item in entity.ARSaleOrderPaymentTimesList)
            {
                BOSApp.RoundByCurrency(item, mainObject.FK_GECurrencyID);
            }
            entity.ARSaleOrderPaymentTimesList.GridControl?.RefreshDataSource();

            entity.UpdateMainObjectBindingSource();
        }

        public void UpdateTotalAmountByCurrency2(int currencieID)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            mainObject.FK_GECurrencyID2 = currencieID;
            mainObject.ARSaleOrderExchangeRate2 = entity.GetCurrencyExchangeRate(currencieID, BOSApp.GetCurrentServerDate()) != null
                ? entity.GetCurrencyExchangeRate(currencieID, BOSApp.GetCurrentServerDate()).GECurrencyExchangeRateTransferExchangeRate
                : 1;
            if (entity.ARSaleOrderItemsList != null && entity.ARSaleOrderItemsList.Count > 0)
            {
                foreach (ARSaleOrderItemsInfo item in entity.ARSaleOrderItemsList)
                {
                    entity.RoundByCurrency(item);
                }
                entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
                UpdateTotalAmount(entity.ARSaleOrderItemsList);
            }
            entity.UpdateMainObjectBindingSource();
        }

        public void UpdateSaleOrderItemDeliveryDate(DateTime deliveryDate)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            if (!Toolbar.IsNullOrNoneAction())
            {
                if (mainObject.ARSaleOrderDeliveryDate.Date == deliveryDate.Date)
                    return;
                mainObject.ARSaleOrderDeliveryActualDate = mainObject.ARSaleOrderDeliveryDate.Date;
                //ChangeActualDeliveryDate(mainObject.ARSaleOrderDeliveryActualDate.ToString());
                DialogResult check = MessageBox.Show(SaleOrderLocalizedResources.ConfirmChangeDeliveryDateMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (check == DialogResult.No)
                    return;
                if (entity.ARSaleOrderItemsList.Count > 0)
                {
                    foreach (ARSaleOrderItemsInfo item in entity.ARSaleOrderItemsList)
                    {
                        item.ARSaleOrderItemDeliveryDate = mainObject.ARSaleOrderDeliveryDate;
                    }
                    entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
                }
                entity.UpdateMainObjectBindingSource();
            }
        }

        public void ChangePaymentTimeDate()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            entity.ARSaleOrderPaymentTimesList.ForEach(o =>
            {
                o.ARSaleOrderPaymentTimeDate = GetPaymentTime(o.ARSaleOrderPaymentTimePaymentTermItemType, o.ARSaleOrderPaymentTimePaymentTimepoint, o.ARSaleOrderPaymentTimePaymentTermItemDay);
                o.ARSaleOrderPaymentTimeDueDate = GetPaymentTime(o.ARSaleOrderPaymentTimePaymentTermItemType, o.ARSaleOrderPaymentTimePaymentTimepoint, o.ARSaleOrderPaymentTimePaymentTermItemDay);
            });
            entity.ARSaleOrderItemsList.ForEach(o =>
            {
                o.ARSaleOrderItemDeliveryDate = mainObject.ARSaleOrderDeliveryDate;
            });
            if (ProductLookupControl != null)
            {
                ProductLookupControl.Properties.DataSource = LoadProductList();
            }
            entity.ARSaleOrderPaymentTimesList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
        }

        public void UpdatePaymentTime()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            decimal remainAmount = mainObject.ARSaleOrderTotalAmount;
            if (!IsEditPaymentTime)
            {
                entity.ARSaleOrderPaymentTimesList.ForEach(o =>
                {
                    o.ARSaleOrderPaymentTimeStatus = SaleOrderPaymentTimeStatus.New.ToString();
                    o.ARSaleOrderPaymentTimeAmount = Math.Min(remainAmount, mainObject.ARSaleOrderTotalAmount * o.ARSaleOrderPaymentTimePaymentTermItemPercentPayment / 100);
                    o.ARSaleOrderPaymentTimeBalanceDue = Math.Min(remainAmount, mainObject.ARSaleOrderTotalAmount * o.ARSaleOrderPaymentTimePaymentTermItemPercentPayment / 100);
                    o.ARSaleOrderPaymentTimeDate = GetPaymentTime(o.ARSaleOrderPaymentTimePaymentTermItemType, o.ARSaleOrderPaymentTimePaymentTimepoint, o.ARSaleOrderPaymentTimePaymentTermItemDay);
                    o.ARSaleOrderPaymentTimeDueDate = GetPaymentTime(o.ARSaleOrderPaymentTimePaymentTermItemType, o.ARSaleOrderPaymentTimePaymentTimepoint, o.ARSaleOrderPaymentTimePaymentTermItemDay);
                    BOSApp.RoundByCurrency(o, mainObject.FK_GECurrencyID);
                    remainAmount -= o.ARSaleOrderPaymentTimeAmount;
                });
            }
            entity.ARSaleOrderPaymentTimesList.GridControl?.RefreshDataSource();
        }

        public void GeneratePaymentTime(int paymentTimeID)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;

            List<GEPaymentTermItemsInfo> paymentTermItems = new List<GEPaymentTermItemsInfo>();
            GEPaymentTermItemsController objPaymentTermItemsController = new GEPaymentTermItemsController();
            ARSaleOrderPaymentTimesInfo objSaleOrderPaymentTimesInfo = new ARSaleOrderPaymentTimesInfo();

            paymentTermItems = objPaymentTermItemsController.GetListItemByPaymentTermID(paymentTimeID);

            if (mainObject == null)
                return;

            if (entity.ARSaleOrderPaymentTimesList == null)
            {
                entity.ARSaleOrderPaymentTimesList = new BOSList<ARSaleOrderPaymentTimesInfo>();
            }
            else
            {
                entity.ARSaleOrderPaymentTimesList.Clear();
            }

            if (paymentTermItems.Count() == 0)
            {
                entity.ARSaleOrderPaymentTimesList.GridControl?.RefreshDataSource();
                return;
            }
            paymentTermItems = paymentTermItems.OrderBy(o => o.GEPaymentTermItemPaymentType).ToList();
            decimal remainAmount = mainObject.ARSaleOrderTotalAmount;
            paymentTermItems.ForEach(o =>
            {
                objSaleOrderPaymentTimesInfo = new ARSaleOrderPaymentTimesInfo();
                objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimePaymentType = o.GEPaymentTermItemPaymentType != PaymentTermItemPaymentType.Deposit.ToString() ? "Final Payment" : PaymentTermItemPaymentType.Deposit.ToString();
                objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeStatus = SaleOrderPaymentTimeStatus.New.ToString();
                objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeAmount = Math.Min(remainAmount, mainObject.ARSaleOrderTotalAmount * o.GEPaymentTermItemPercentPayment / 100);
                objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeBalanceDue = Math.Min(remainAmount, mainObject.ARSaleOrderTotalAmount * o.GEPaymentTermItemPercentPayment / 100);
                objSaleOrderPaymentTimesInfo.FK_GEPaymentTermID = paymentTimeID;
                objSaleOrderPaymentTimesInfo.ARPaymentMethodCombo = mainObject.ARPaymentMethodCombo;
                objSaleOrderPaymentTimesInfo.FK_ARSaleOrderID = mainObject.ARSaleOrderID;
                objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimePaymentTimepoint = o.GEPaymentTermItemPaymentDate;
                objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimePaymentTermItemDay = o.GEPaymentTermItemDay;
                objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimePaymentTermItemPercentPayment = o.GEPaymentTermItemPercentPayment;
                objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimePaymentTermItemPaymentType = o.GEPaymentTermItemPaymentType;
                objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimePaymentTermItemType = o.GEPaymentTermItemType;
                objSaleOrderPaymentTimesInfo.FK_GEPaymentTermItemID = o.GEPaymentTermItemID;
                objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeDate = GetPaymentTime(o.GEPaymentTermItemType, o.GEPaymentTermItemPaymentDate, o.GEPaymentTermItemDay);
                objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeDueDate = GetPaymentTime(o.GEPaymentTermItemType, o.GEPaymentTermItemPaymentDate, o.GEPaymentTermItemDay);
                BOSApp.RoundByCurrency(objSaleOrderPaymentTimesInfo, mainObject.FK_GECurrencyID);
                remainAmount -= objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeAmount;
                entity.ARSaleOrderPaymentTimesList.Add(objSaleOrderPaymentTimesInfo);
            });
            SaleOrderPaymentTimeGridControl.DataSource = entity.ARSaleOrderPaymentTimesList;
            SaleOrderPaymentTimeGridControl?.RefreshDataSource();
            //UpdateCommissionsBelongPaymentTerm(paymentTimeID);
        }

        private DateTime GetPaymentTime(string paymentTermType, string paymentTimePoint, int day)
        {
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            if (paymentTermType != PaymentTermType.Day.ToString())
                return mainObject.ARSaleOrderDate;

            DateTime paymentDate = mainObject.ARSaleOrderDate;
            PaymentTermItemPaymentDate type = EnumExtensions.ParseEnum<PaymentTermItemPaymentDate>(paymentTimePoint);
            try
            {
                switch (type)
                {
                    case PaymentTermItemPaymentDate.IsContract:
                        paymentDate = mainObject.ARSaleOrderDate.AddDays(day);
                        break;

                    case PaymentTermItemPaymentDate.IsBeforeDelivery:
                        paymentDate = mainObject.ARSaleOrderDeliveryDate.AddDays(-day);
                        break;

                    case PaymentTermItemPaymentDate.IsAfterDelivery:
                        paymentDate = mainObject.ARSaleOrderDeliveryDate.AddDays(day);
                        break;

                    case PaymentTermItemPaymentDate.IsInvoiceIn:
                        paymentDate = mainObject.ARSaleOrderDeliveryDate.AddDays(day);
                        break;

                    default:
                        paymentDate = mainObject.ARSaleOrderDate;
                        break;
                }
            }
            catch (Exception)
            {
                paymentDate = mainObject.ARSaleOrderDate;
            }
            return paymentDate;
        }

        public void AddCollectionToSaleOrder()
        {
            if (IsEditable())
            {
                ActionEdit();
            }
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objARSaleOrderInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            ARSaleOrderItemsInfo objARSaleOrderItemInfo = (ARSaleOrderItemsInfo)entity.ModuleObjects[TableName.ARSaleOrderItemsTableName];

            ICCollectionsController objCollectionController = new ICCollectionsController();
            List<ICCollectionsInfo> collectionList = (List<ICCollectionsInfo>)objCollectionController.GetListFromDataSet(objCollectionController.GetAllObjects());

            guiAddCollectionToSaleOrder<ICCollectionsInfo> guiAddCollectionToSaleOrder = new guiAddCollectionToSaleOrder<ICCollectionsInfo>(collectionList, 0);
            guiAddCollectionToSaleOrder.Module = this;
            guiAddCollectionToSaleOrder.ShowDialog();
            if (guiAddCollectionToSaleOrder.DialogResult != DialogResult.OK)
                return;

            IList<ICCollectionsInfo> results = guiAddCollectionToSaleOrder.SelectedObjects;
            if (results.Count == 0)
                return;

            ICCollectionItemsController objCollectionItemController = new ICCollectionItemsController();
            ICProductsController objProductController = new ICProductsController();
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            ICCollectionItemsInfo objcollectionItemInfo = new ICCollectionItemsInfo();
            List<ICCollectionItemsInfo> collectionItemList;
            foreach (ICCollectionsInfo item in results)
            {
                collectionItemList = objCollectionItemController.GetCollectionItemListWithProductGroupIDByCollectionID(item.ICCollectionID);
                if (collectionItemList.Count > 0)
                {
                    foreach (ICCollectionItemsInfo collectionitem in collectionItemList)
                    {
                        if (collectionitem.FK_ICProductID > 0 && collectionitem.ICCollectionItemProductType == ProductType.Product.ToString())
                        {
                            objARSaleOrderItemInfo = new ARSaleOrderItemsInfo();
                            entity.SetValuesAfterValidateProduct(collectionitem.FK_ICProductID, objARSaleOrderItemInfo);
                            if (objARSaleOrderItemInfo.ICProductUnitPrice == 0)
                                objARSaleOrderItemInfo.ICProductUnitPrice = collectionitem.ICCollectionItemProductUnitPrice;
                            objARSaleOrderItemInfo.ARSaleOrderItemProductUnitPrice = collectionitem.ICCollectionItemProductUnitPrice;
                            objARSaleOrderItemInfo.ARSaleOrderItemProductQty = collectionitem.ICCollectionItemQty;
                            objARSaleOrderItemInfo.ARSaleOrderItemPrice = collectionitem.ICCollectionItemProductUnitPrice;
                            objARSaleOrderItemInfo.ARSaleOrderItemTotalAmount = collectionitem.ICCollectionItemProductUnitPrice;
                            objARSaleOrderItemInfo.FK_ICMeasureUnitID = collectionitem.FK_ICMeasureUnitID;
                            objARSaleOrderItemInfo.FK_ICProductGroupID = collectionitem.FK_ICProductGroupID;
                            objARSaleOrderItemInfo.ARSaleOrderItemVirtualID = Guid.NewGuid().ToString();
                            entity.ARSaleOrderItemsList.Add(objARSaleOrderItemInfo);
                        }
                    }
                }
                else
                {
                    entity.SetValuesAfterValidateProduct(objARSaleOrderItemInfo.FK_ICProductID);
                    entity.ARSaleOrderItemsList.AddObjectToList();
                }
            }

            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
            UpdateTotalAmount(entity.ARSaleOrderItemsList);
        }

        public void ShowCollectionComponents(ICCollectionsInfo item)
        {
            ICCollectionItemsController objCollectionController = new ICCollectionItemsController();

            List<ICCollectionItemsInfo> collectionItemList = objCollectionController.GetCollectionItemListByCollectionID(item.ICCollectionID);
            guiShowCollectionComponent<ICCollectionItemsInfo> guiShowCollectionComponent = new guiShowCollectionComponent<ICCollectionItemsInfo>(collectionItemList);
            guiShowCollectionComponent.Module = this;
            guiShowCollectionComponent.ShowDialog();
            if (guiShowCollectionComponent.DialogResult != DialogResult.OK)
                return;

        }

        public void ChangeGrantedFrom()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            if (entity.ARSaleOrderItemsList.CurrentIndex < 0)
                return;
            ARSaleOrderItemsInfo objSaleOrderItemsInfo = (ARSaleOrderItemsInfo)entity.ARSaleOrderItemsList[entity.ARSaleOrderItemsList.CurrentIndex];

            if (objSaleOrderItemsInfo.ARSaleOrderItemOriginOfProduct == objSaleOrderItemsInfo.ARSaleOrderItemGrantedFrom
                || objSaleOrderItemsInfo.ARSaleOrderItemGrantedFrom == SaleOrderItemGrantedFrom.Inventory.ToString()
                || objSaleOrderItemsInfo.ARSaleOrderItemGrantedFrom == SaleOrderItemGrantedFrom.Service.ToString()
                || objSaleOrderItemsInfo.ARSaleOrderItemGrantedFrom == SaleOrderItemGrantedFrom.Inventory.ToString()
                || ((objSaleOrderItemsInfo.ARSaleOrderItemOriginOfProduct == "DomesticPurchase") && (objSaleOrderItemsInfo.ARSaleOrderItemGrantedFrom == "Purchase"))
                || ((objSaleOrderItemsInfo.ARSaleOrderItemOriginOfProduct == "Import") && (objSaleOrderItemsInfo.ARSaleOrderItemGrantedFrom == "Purchase"))
                || ((objSaleOrderItemsInfo.ARSaleOrderItemOriginOfProduct == "ProductionOrPurchase") && (objSaleOrderItemsInfo.ARSaleOrderItemGrantedFrom == "Purchase" || objSaleOrderItemsInfo.ARSaleOrderItemGrantedFrom == "Production")))
            {
                return;
            }
            else
            {
                MessageBox.Show(SaleOrderLocalizedResources.ErrorProductionAndPurchase, CommonLocalizedResources.MessageBoxDefaultCaption,
                                                                  MessageBoxButtons.OK, MessageBoxIcon.Information);
                objSaleOrderItemsInfo.ARSaleOrderItemGrantedFrom = String.Empty;
                return;
            }
        }

        public void AddItemWorkToSaleOrderItemWorkList(ARSaleOrderItemsInfo objSaleOrderItemsInfo)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ICProductWorkItemsController objProductWorkItemsController = new ICProductWorkItemsController();
            List<ICProductWorkItemsInfo> productWorkItems = objProductWorkItemsController.GetProductWorkItemsByProductWorkItemParentID(objSaleOrderItemsInfo.FK_ICProductID);

            if (objSaleOrderItemsInfo.ARSaleOrderItemWorkList == null)
            {
                objSaleOrderItemsInfo.ARSaleOrderItemWorkList = new BOSList<ARSaleOrderItemWorksInfo>();
                objSaleOrderItemsInfo.ARSaleOrderItemWorkList.InitBOSList(entity,
                                              TableName.ARSaleOrderItemsTableName,
                                              TableName.ARSaleOrderItemWorksTableName,
                                              BOSList<ARSaleOrderItemWorksInfo>.cstRelationForeign);
            }
            productWorkItems.ForEach(o =>
            {
                ARSaleOrderItemWorksInfo objSaleOrderItemWorksInfo = ToSaleOrderItemWorksInfo(o);
                entity.ARSaleOrderItemWorkList.Add(objSaleOrderItemWorksInfo);
                objSaleOrderItemsInfo.ARSaleOrderItemWorkList.Add(objSaleOrderItemWorksInfo);
                if (!CreateFromProposal)
                {
                    ARSaleOrderItemWorksInfo objSaleOrderItemCost = ToSaleOrderItemWorksInfoForSaleOrderItemCostList(objSaleOrderItemWorksInfo);
                    if (objSaleOrderItemWorksInfo.ARSaleOrderItemWorkProductChargeCheck)
                        entity.ARSaleOrderItemCostList.Add(objSaleOrderItemCost);
                }
            });
            ARSaleOrderItemWorksGridControl?.RefreshDataSource();
            ARSaleOrderItemWorkMaterialsGridControl?.RefreshDataSource();
            ARSaleOrderItemWorkAssetsGridControl?.RefreshDataSource();
            ARSaleOrderItemWorkTasksGridControl?.RefreshDataSource();
            ARSaleOrderItemCostGridControl?.RefreshDataSource();
        }

        private ARSaleOrderItemWorksInfo ToSaleOrderItemWorksInfo(ICProductWorkItemsInfo objProductWorkItemsInfo)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;

            ARSaleOrderItemWorksInfo objSaleOrderItemWorksInfo;
            objSaleOrderItemWorksInfo = new ARSaleOrderItemWorksInfo()
            {
                FK_ICProductID = objProductWorkItemsInfo.FK_ICProductWorkItemChildID,
                FK_ICProductReferenceID = objProductWorkItemsInfo.FK_ICProductWorkItemParentID,
                FK_ICDepartmentID = objProductWorkItemsInfo.FK_ICDepartmentID,
                FK_ICProductGroupID = objProductWorkItemsInfo.FK_ICProductGroupID,
                FK_ICMeasureUnitID = objProductWorkItemsInfo.FK_ICProductBasicUnitID,
                ARSaleOrderItemWorkProductNo = objProductWorkItemsInfo.ICProductWorkItemProductNo,
                ARSaleOrderItemWorkProductName = objProductWorkItemsInfo.ICProductWorkItemProductName,
                ARSaleOrderItemWorkProductDesc = objProductWorkItemsInfo.ICProductWorkItemProductDesc,
                ARSaleOrderItemWorkProductQty = objProductWorkItemsInfo.ICProductWorkItemQty,
                ARSaleOrderItemWorkProductUnitPrice = objProductWorkItemsInfo.ICProductPrice01,
                ARSaleOrderItemWorkProductType = objProductWorkItemsInfo.ICProductWorkItemType,
                ARSaleOrderItemWorkProductChargeCheck = objProductWorkItemsInfo.ICProductWorkItemProductChargeCheck,
                ARSaleOrderItemWorkTotalAmount = objProductWorkItemsInfo.ICProductPrice01 * objProductWorkItemsInfo.ICProductWorkItemQty,
                ARSaleOrderItemWorkSubTotalAmount = objProductWorkItemsInfo.ICProductPrice01 * objProductWorkItemsInfo.ICProductWorkItemQty,
            };

            return objSaleOrderItemWorksInfo;
        }

        private ARSaleOrderItemWorkItemsInfo ToSaleOrderItemWorkItemsInfo(ICProductWorkItemsInfo objProductWorkItemsInfo)
        {
            return new ARSaleOrderItemWorkItemsInfo()
            {
                FK_ICProductID = objProductWorkItemsInfo.FK_ICProductWorkItemChildID,
                FK_ICDepartmentID = objProductWorkItemsInfo.FK_ICDepartmentID,
                FK_ICProductGroupID = objProductWorkItemsInfo.FK_ICProductGroupID,
                FK_ICMeasureUnitID = objProductWorkItemsInfo.FK_ICProductBasicUnitID,
                ARSaleOrderItemWorkItemProductNo = objProductWorkItemsInfo.ICProductWorkItemProductNo,
                ARSaleOrderItemWorkItemProductName = objProductWorkItemsInfo.ICProductWorkItemProductName,
                ARSaleOrderItemWorkItemProductDesc = objProductWorkItemsInfo.ICProductWorkItemProductDesc,
                ARSaleOrderItemWorkItemProductQty = objProductWorkItemsInfo.ICProductWorkItemQty,
                ARSaleOrderItemWorkItemProductUnitPrice = objProductWorkItemsInfo.ICProductPrice01,
                ARSaleOrderItemWorkItemProductType = objProductWorkItemsInfo.ICProductWorkItemType,
                ARSaleOrderItemWorkItemProductChargeCheck = objProductWorkItemsInfo.ICProductWorkItemProductChargeCheck,
                ARSaleOrderItemWorkItemTotalAmount = objProductWorkItemsInfo.ICProductPrice01 * objProductWorkItemsInfo.ICProductWorkItemQty,
                ARSaleOrderItemWorkItemSubTotalAmount = objProductWorkItemsInfo.ICProductPrice01 * objProductWorkItemsInfo.ICProductWorkItemQty,
            };
        }

        private ARSaleOrderItemWorkTasksInfo ToSaleOrderItemWorkTasksInfo(ICProductTasksInfo objProductTasksInfo)
        {
            return new ARSaleOrderItemWorkTasksInfo()
            {
                FK_HRDepartmentID = objProductTasksInfo.FK_HRDepartmentID,
                FK_HRDepartmentRoomID = objProductTasksInfo.FK_HRDepartmentRoomID,
                FK_HREmployeeID = objProductTasksInfo.FK_HREmployeeID,
                FK_ICMeasureUnitID = objProductTasksInfo.FK_ICMeasureUnitID,
                FK_ICProductID = objProductTasksInfo.FK_ICProductID,
                FK_ICTaskID = objProductTasksInfo.FK_ICTaskID,
                ARSaleOrderItemWorkTaskNo = objProductTasksInfo.ICProductTaskNo,
                ARSaleOrderItemWorkTaskName = objProductTasksInfo.ICProductTaskName,
                ARSaleOrderItemWorkTaskInfo = objProductTasksInfo.ICProductTaskInfo,
                ARSaleOrderItemWorkTaskTotalEstimatedDays = objProductTasksInfo.ICProductTaskTotalEstimatedDays,
                ARSaleOrderItemWorkTaskTotalEstimatedHours = objProductTasksInfo.ICProductTaskTotalEstimatedHours,
                ARSaleOrderItemWorkTaskTotalActualDays = objProductTasksInfo.ICProductTaskTotalActualDays,
                ARSaleOrderItemWorkTaskTotalActualHours = objProductTasksInfo.ICProductTaskTotalActualHours,
                ARSaleOrderItemWorkTaskEstimatedExtendDays = objProductTasksInfo.ICProductTaskEstimatedExtendDays,
                ARSaleOrderItemWorkTaskActualExtendDays = objProductTasksInfo.ICProductTaskActualExtendDays,
                ARSaleOrderItemWorkTaskEstimatedExtendHours = objProductTasksInfo.ICProductTaskEstimatedExtendHours,
                ARSaleOrderItemWorkTaskActualExtendHours = objProductTasksInfo.ICProductTaskActualExtendHours,
                ARSaleOrderItemWorkTaskQty = objProductTasksInfo.ICProductTaskQty,
                ARSaleOrderItemWorkTaskEstimatedTotalCost = objProductTasksInfo.ICProductTaskEstimatedTotalCost,
                ARSaleOrderItemWorkTaskActualTotalCost = objProductTasksInfo.ICProductTaskActualTotalCost,
            };
        }

        public void ShowWorkItemComponent()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            if (entity.ARSaleOrderItemWorkList.CurrentIndex >= 0)
            {
                ARSaleOrderItemWorksInfo objSaleOrderItemsInfo = entity.ARSaleOrderItemWorkList[entity.ARSaleOrderItemWorkList.CurrentIndex];
                List<ARSaleOrderItemWorkItemsInfo> saleOrderItemWorkItemList = objSaleOrderItemsInfo.ARSaleOrderItemWorkItemList == null
                                                                                ? new List<ARSaleOrderItemWorkItemsInfo>()
                                                                                : objSaleOrderItemsInfo.ARSaleOrderItemWorkItemList.ToList();
                List<ARSaleOrderItemWorkTasksInfo> saleOrderItemWorkTaskList = objSaleOrderItemsInfo.ARSaleOrderItemWorkTaskList == null
                                                                                ? new List<ARSaleOrderItemWorkTasksInfo>()
                                                                                : objSaleOrderItemsInfo.ARSaleOrderItemWorkTaskList.ToList();
                if (saleOrderItemWorkItemList == null || saleOrderItemWorkItemList.Count == 0
                    || saleOrderItemWorkTaskList == null || saleOrderItemWorkTaskList.Count == 0)
                {
                    MessageBox.Show(SaleOrderLocalizedResources.ComponentIsNull, CommonLocalizedResources.MessageBoxDefaultCaption,
                                                                MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                guiSaleOrderWorkItemComponent guiProductWorkItemComponent = new guiSaleOrderWorkItemComponent(objSaleOrderItemsInfo, saleOrderItemWorkItemList, saleOrderItemWorkTaskList);
                guiProductWorkItemComponent.Module = this;
                guiProductWorkItemComponent.ShowDialog();
            }
        }

        public void PrintProposalPayment()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrderInfo = (ARSaleOrdersInfo)entity.MainObject;
            List<ARSaleOrderPaymentTimesInfo> SaleOrderPaymentTimeList = entity.ARSaleOrderPaymentTimesList;
            guiAddSaleOrderPaymentTimes<ARSaleOrderPaymentTimesInfo> guiAddSaleOrderPaymentTime = new guiAddSaleOrderPaymentTimes<ARSaleOrderPaymentTimesInfo>(SaleOrderPaymentTimeList);
            guiAddSaleOrderPaymentTime.Module = this;
            guiAddSaleOrderPaymentTime.ShowDialog();

            if (guiAddSaleOrderPaymentTime.DialogResult != DialogResult.OK)
                return;

            IList<ARSaleOrderPaymentTimesInfo> results = guiAddSaleOrderPaymentTime.SelectedObjects;
            if (results.Count == 0)
                return;
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                RPProposalPayment reporeProposalPayment = new RPProposalPayment();
                //report.LoadLayout(BOSCommon.Constants.Report.DevSaleOrderItemReportPath);
                InitSaleOrderProposalPaymentReport(reporeProposalPayment, results);
                guiReportPreview reviewer = new guiReportPreview(reporeProposalPayment, BOSCommon.Constants.Report.DevInvoiceItemReportPath, true);
                reviewer.Show();
            }
        }

        private void InitSaleOrderProposalPaymentReport(RPProposalPayment report, IList<ARSaleOrderPaymentTimesInfo> saleOrderPaymentTimeList)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrderInfo = (ARSaleOrdersInfo)entity.MainObject;
            report.bsARSaleOrders.DataSource = objSaleOrderInfo;
            report.bsARSaleOrderPaymentTimes.DataSource = saleOrderPaymentTimeList;

            ACObjectsController objACObjectsController = new ACObjectsController();
            ACObjectsInfo objACObjectsInfo = objACObjectsController.GetObjectByIDAndType(objSaleOrderInfo.FK_ACObjectID, objSaleOrderInfo.ARObjectType);
            report.bsACObjects.DataSource = objACObjectsInfo;

            CSCompanysController objCompanyController = new CSCompanysController();
            report.bsCompanys.DataSource = (CSCompanysInfo)objCompanyController.GetObjectByID(1);
            CSCompanyBanksController objCompanyBanksController = new CSCompanyBanksController();
            report.bsCompanyBanks.DataSource = (CSCompanyBanksInfo)objCompanyBanksController.GetObjectByID(1);

            XRLabel lblSaleOrderPaymentTotal = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblSaleOrderPaymentTotal"];
            if (lblSaleOrderPaymentTotal != null)
            {
                lblSaleOrderPaymentTotal.Text = saleOrderPaymentTimeList.Sum(o => o.ARSaleOrderPaymentTimeBalanceDue).ToString("n2");
            }
            XRLabel lblProposalPaymentTitle1 = (XRLabel)report.Bands[BandKind.PageHeader].Controls["xr_lblProposalPaymentTitle1"];
            if (lblProposalPaymentTitle1 != null)
            {
                lblProposalPaymentTitle1.Text = ((CSCompanysInfo)objCompanyController.GetObjectByID(1)).CSCompanyDesc + " xin trân trọng kính gửi đến quý khách hàng lời cảm ơn chân thành vế sự quan tâm đến sản phẩm của chúng tôi trong thời gian vừa qua.";
            }
            XRLabel lblProposalPaymentTitle2 = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblProposalPaymentTitle2"];
            if (lblProposalPaymentTitle2 != null)
            {
                lblProposalPaymentTitle2.Text = "Công ty chúng tôi xin gửi thư đề nghị thanh toán đến quý khách hàng. Căn cứ theo phương thức thánh toán của hợp đồng số " + objSaleOrderInfo.ARSaleOrderNo + " ngày 17/08/2017. Số tiền mà công ty tôi đề nghị quý khách hàng thanh toán là:";
            }
            XRLabel lblProposalPaymenttAmountString = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblProposalPaymenttAmountString"];
            if (lblProposalPaymenttAmountString != null)
            {
                string totalAmount = ConvertAmountToWord.ReadAmount(saleOrderPaymentTimeList.Sum(o => o.ARSaleOrderPaymentTimeBalanceDue).ToString("n2"), objSaleOrderInfo.FK_GECurrencyID);
                lblProposalPaymenttAmountString.Text = totalAmount;
            }
        }

        public void PrintAcceptance()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrderInfo = (ARSaleOrdersInfo)entity.MainObject;
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                RPAcceptance reporeAcceptance = new RPAcceptance();
                InitSaleOrderAcceptanceReport(reporeAcceptance);
                guiReportPreview reviewer = new guiReportPreview(reporeAcceptance, BOSCommon.Constants.Report.DevInvoiceItemReportPath, true);
                reviewer.Show();
            }
        }

        private void InitSaleOrderAcceptanceReport(RPAcceptance report)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrderInfo = (ARSaleOrdersInfo)entity.MainObject;
            report.bsARSaleOrders.DataSource = entity.ARSaleOrderItemsList;
            CSCompanysController objCompanyController = new CSCompanysController();
            CSCompanysInfo objCompanysInfo = (CSCompanysInfo)objCompanyController.GetObjectByID(1);
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByIDAndType(objSaleOrderInfo.FK_ACObjectID, objSaleOrderInfo.ARObjectType);
            XRLabel lblCompanyName = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblCompanyName"];
            if (lblCompanyName != null)
            {
                lblCompanyName.Text = objCompanysInfo.CSCompanyDesc;
            }
            XRLabel lblCompanyAddress = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblCompanyAddress"];
            if (lblCompanyAddress != null)
            {
                lblCompanyAddress.Text = objCompanysInfo.CSCompanyAddressLine1;
            }
            XRLabel lblSaleOrderNo = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblSaleOrderNo"];
            if (lblSaleOrderNo != null)
            {
                lblSaleOrderNo.Text = "(Hợp đồng số :" + objSaleOrderInfo.ARSaleOrderNo + ")";
            }
            XRLabel lblCustomerName = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblCustomerName"];
            if (lblCustomerName != null)
            {
                lblCustomerName.Text = string.IsNullOrEmpty(objObjectsInfo.ACObjectContactName) ? objObjectsInfo.ACObjectName : objObjectsInfo.ACObjectContactName;
            }
            XRLabel lblCustomerAddress = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblCustomerAddress"];
            if (lblCustomerAddress != null)
            {
                lblCustomerAddress.Text = objObjectsInfo.ACObjectDeliveryAddressLine1;
            }
            XRLabel lblCompanyContact = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblCompanyContact"];
            if (lblCompanyContact != null)
            {
                lblCompanyContact.Text = "Trân trọng cảm ơn sự quan tâm của quý khác hàng. Nếu cần bất kỳ thông tin nào về sản phẩm & dịch vụ của công ty chúng tôi xin vui lòng liên lạc số điện thoại:" + objCompanysInfo.CSCompanyPhone;
            }
        }

        public void CopyItemToNewRow()
        {
            if (IsEditable())
            {
                ActionEdit();
            }
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            if (entity.ARSaleOrderItemsList.CurrentIndex >= 0)
            {
                ARSaleOrderItemsInfo objSaleOrderItemsInfo = entity.ARSaleOrderItemsList[entity.ARSaleOrderItemsList.CurrentIndex];
                ARSaleOrderItemsInfo objCopySaleOrderItems = (ARSaleOrderItemsInfo)objSaleOrderItemsInfo.Clone();
                objCopySaleOrderItems.ARSaleOrderItemID = 0;
                objCopySaleOrderItems.ARSaleOrderItemVirtualID = Guid.NewGuid().ToString();
                entity.ARSaleOrderItemsList.Add(objCopySaleOrderItems);
                entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
                SetDefaultSaleOrderTaxPercent();
                ChangeItemFromSaleOrderItemsList();
            }
        }

        public string ChangeObject(string objectAccessKey)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;

            if (objSaleOrdersInfo.CustomersInfo != null && objSaleOrdersInfo.CustomersInfo.FK_ARProspectCustomerID != 0)
            {
                MessageBox.Show(SaleOrderLocalizedResources.ObjectIsExistMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                objSaleOrdersInfo.ACObjectAccessKey = string.Empty;
                objSaleOrdersInfo.FK_ACObjectID = 0;
                objSaleOrdersInfo.ARObjectType = string.Empty;
                return objSaleOrdersInfo.ACObjectAccessKey;
            }

            string oldAccessKey = objSaleOrdersInfo.ACObjectAccessKey;
            objSaleOrdersInfo.ACObjectAccessKey = objectAccessKey;
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByAccessKey(objectAccessKey);
            objObjectsInfo = objObjectsController.GetObjectByIDAndType(objObjectsInfo.ACObjectID, objObjectsInfo.ACObjectType);
            if (objObjectsInfo != null)
            {
                if (IsActiveCheck(objObjectsInfo))
                {
                    MessageBox.Show(PurchaseOrderLocalizedResources.IsActiveLockedError, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    objSaleOrdersInfo.ACObjectAccessKey = oldAccessKey;
                    entity.UpdateMainObjectBindingSource();
                    DisplayLabelText(objSaleOrdersInfo);
                    return objSaleOrdersInfo.ACObjectAccessKey;
                }

                if (IsPurchaseCheck(objObjectsInfo))
                {
                    MessageBox.Show(PurchaseOrderLocalizedResources.IsBuyingLockedErrorMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    objSaleOrdersInfo.ACObjectAccessKey = oldAccessKey;
                    entity.UpdateMainObjectBindingSource();
                    DisplayLabelText(objSaleOrdersInfo);
                    return objSaleOrdersInfo.ACObjectAccessKey;
                }
                if (objObjectsInfo.ACObjectType == ObjectType.Customer.ToString())
                {
                    objSaleOrdersInfo.FK_ARCustomerID = objObjectsInfo.ACObjectID;

                    ARCommissionsController objCommissionsController = new ARCommissionsController();
                    DataSet ds = objCommissionsController.GetDataByCustomerID(objObjectsInfo.ACObjectID);
                    entity.SaleCommissionsList.Invalidate(ds);
                }
                ARCustomersController objCustomersController = new ARCustomersController();
                ARCustomersInfo objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectByID(objSaleOrdersInfo.FK_ARCustomerID);
                objSaleOrdersInfo.FK_ARPriceLevelID = objObjectsInfo.FK_ARPriceLevelID;
                SetDefaultInvoiceAndDeliveryFromObject(objObjectsInfo);
                ChangePriceLevel(objSaleOrdersInfo.FK_ARPriceLevelID);
                if (objSaleOrdersInfo.STToolbarActionName == "Manual")
                {
                    entity.ARSaleOrderItemsList.ForEach(o =>
                    {
                        ICProductsInfo product = BOSApp.GetProductFromCurrentProductList(o.FK_ICProductID);
                        decimal sumQty = entity.ARSaleOrderItemsList.Where(p => o.FK_ICProductID == p.FK_ICProductID && o.FK_ICMeasureUnitID == p.FK_ICMeasureUnitID).Sum(p => p.ARSaleOrderItemProductQty);
                        if (product != null && product.ICProductType == ProductType.Product.ToString())
                        {
                            o.ARSaleOrderItemProductUnitPrice = BOSApp.CalculaterProductUnitPrice(product, o.ARSaleOrderItemProductUnitPrice, sumQty, o.FK_ICMeasureUnitID, objCustomersInfo != null ? objCustomersInfo.ARCustomerID : 0, objSaleOrdersInfo.ARSaleOrderDate, objSaleOrdersInfo.FK_GECurrencyID);
                            o.ICProductUnitPrice = o.ARSaleOrderItemProductUnitPrice;
                            BOSApp.RoundByCurrency(o, objSaleOrdersInfo.FK_GECurrencyID);
                            o.ARSaleOrderItemProductUnitPrice2 = objSaleOrdersInfo.ARSaleOrderExchangeRate2 > 0 ? o.ARSaleOrderItemProductUnitPrice * objSaleOrdersInfo.ARSaleOrderExchangeRate / objSaleOrdersInfo.ARSaleOrderExchangeRate2 : 0;
                        }
                        entity.SetProductPriceByProductUnitPrice(o);
                    });
                    entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
                    UpdateTotalAmount(entity.ARSaleOrderItemsList);
                }
                GeneratePaymentTime(objSaleOrdersInfo.FK_GEPaymentTermID);
            }
            else
            {
                objSaleOrdersInfo.ARObjectType = string.Empty;
                objSaleOrdersInfo.FK_ACObjectID = 0;
                objSaleOrdersInfo.FK_ARCustomerID = 0;
            }
            ICProductCustomersController objProductCustomersController = new ICProductCustomersController();
            ICProductCustomersInfo objProductCustomersInfo = new ICProductCustomersInfo();
            entity.ARSaleOrderItemsList.ForEach(o =>
            {
                objProductCustomersInfo = (ICProductCustomersInfo)objProductCustomersController.GetProductCustomerByProductIDAndCustomerID(o.FK_ICProductID, objSaleOrdersInfo.FK_ARCustomerID);
                o.ARSaleOrderItemProductCustomerNumber = objProductCustomersInfo != null ? objProductCustomersInfo.ICProductCustomerNumber : string.Empty;
            });
            if (objSaleOrdersInfo.STToolbarActionName != "NewFromWood" && objSaleOrdersInfo.STToolbarActionName != "NewFromOther")
                SetDefaultMainObjectBySomeCreteria();
            if (ProductLookupControl != null)
            {
                ProductLookupControl.Properties.DataSource = LoadProductList();
            }
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
            entity.UpdateMainObjectBindingSource();
            DisplayLabelText(objSaleOrdersInfo);
            return objSaleOrdersInfo.ACObjectAccessKey;
        }

        public void SetDefaultInvoiceAndDeliveryFromObject(ACObjectsInfo objObjectsInfo)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;

            if (objObjectsInfo == null)
                return;

            mainObject.FK_ACObjectID = objObjectsInfo.ACObjectID;
            mainObject.ARObjectType = objObjectsInfo.ACObjectType;
            //Set Default ObjectInfo 
            mainObject.ARSaleOrderSOContactName = string.IsNullOrEmpty(objObjectsInfo.ACObjectName) ? "" : objObjectsInfo.ACObjectName;
            mainObject.ARSaleOrderDeliveryAddressTel = objObjectsInfo.ACObjectContactPhone;
            mainObject.FK_GECurrencyID = objObjectsInfo.GECurrencyID == 0 ? BOSApp.CurrentCompanyInfo.FK_GECurrencyID : objObjectsInfo.GECurrencyID;
            decimal dCurrencyExchangeRate = BOSApp.RealTimeExchageRateTransferByCurrencyAndDate(mainObject.FK_GECurrencyID, mainObject.ARSaleOrderDate);
            mainObject.ARSaleOrderExchangeRate = (dCurrencyExchangeRate > 0)
                                                               ? dCurrencyExchangeRate
                                                               : 1;

            mainObject.FK_GEPaymentTermID = objObjectsInfo.GEPaymentTermID;
            mainObject.ARPaymentMethodCombo = string.IsNullOrEmpty(objObjectsInfo.ACObjectPaymentMethodCombo) ? "" : objObjectsInfo.ACObjectPaymentMethodCombo;
            mainObject.ARSaleOrderTaxNumber = objObjectsInfo.ACObjectTaxNumber;

            //Set Default DeliveryInfo 
            mainObject.ARSaleOrderDeliveryContactName = string.IsNullOrEmpty(objObjectsInfo.ACObjectDeliveryContactName) ? objObjectsInfo.ACObjectName : objObjectsInfo.ACObjectDeliveryContactName;
            mainObject.ARSaleOrderDeliveryAddressFax = string.IsNullOrEmpty(objObjectsInfo.ACObjectContactFax) ? "" : objObjectsInfo.ACObjectContactFax;
            mainObject.ARSaleOrderDeliveryAddressTaxCode = string.IsNullOrEmpty(objObjectsInfo.ACObjectContactTaxCode) ? "" : objObjectsInfo.ACObjectContactTaxCode;
            mainObject.ARSaleOrderDeliveryAddressTel = string.IsNullOrEmpty(objObjectsInfo.ACObjectContactPhone) ? "" : objObjectsInfo.ACObjectContactPhone;
            mainObject.ARSaleOrderDeliveryAddressLine3 = string.IsNullOrEmpty(objObjectsInfo.ACObjectDeliveryAddressLine1) ? objObjectsInfo.ACObjectContactAddress : objObjectsInfo.ACObjectDeliveryAddressLine1;

            //Set Default InvoiceInfo 
            if (mainObject.ARObjectType == ObjectType.Customer.ToString() && mainObject.FK_ACObjectID > 0)
            {
                ARCustomersController objCustomersController = new ARCustomersController();
                ARCustomersInfo objCustomersInfo = (ARCustomersInfo) objCustomersController.GetObjectByID(mainObject.FK_ACObjectID);
                mainObject.ARSaleOrderInvoiceContactName = objCustomersInfo.ARCustomerInvoiceContactName;
                mainObject.ARSaleOrderInvoiceAddressLine3 = objCustomersInfo.ARCustomerInvoiceAddressLine1;
                mainObject.ARSaleOrderInvoiceAddressTaxCode = objCustomersInfo.ARCustomerInvoiceAddressTaxCode;
                mainObject.ARSaleOrderInvoiceAddressTel = objCustomersInfo.ARCustomerInvoiceAddressTel;
                mainObject.ARSaleOrderInvoiceAddressFax = objCustomersInfo.ARCustomerInvoiceAddressFax;
                mainObject.ARSaleOrderDeliveryAddressTel = objCustomersInfo.ARCustomerDeliveryAddressTel;
            }    
            else
            {
                mainObject.ARSaleOrderInvoiceContactName = objObjectsInfo.ACObjectName;
                mainObject.ARSaleOrderInvoiceAddressLine3 = objObjectsInfo.ACObjectDeliveryAddressLine1;
                mainObject.ARSaleOrderInvoiceAddressTaxCode = objObjectsInfo.ACObjectInvoiceAddressTaxCode;
                mainObject.ARSaleOrderInvoiceAddressTel = objObjectsInfo.ACObjectInvoiceAddressTel;
                mainObject.ARSaleOrderInvoiceAddressFax = objObjectsInfo.ACObjectInvoiceAddressFax;
            }    
            
            entity.UpdateMainObjectBindingSource();
        }
        public void SetDeliveryAddress(int projectID)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            PMProjectsController objProjectsController = new PMProjectsController();
            PMProjectsInfo objProjectsInfo = (PMProjectsInfo)objProjectsController.GetObjectByID(projectID);
            PMProjectLocationsController objProjectLocationsController = new PMProjectLocationsController();
            PMProjectLocationsInfo objProjectLocationsInfo = objProjectLocationsController.GetProjectLocationByPMProjectID(objProjectsInfo.PMProjectID);
            if (objProjectLocationsInfo != null)
            {
                mainObject.ARSaleOrderDeliveryAddressLine3 = objProjectLocationsInfo.PMProjectLocationAddress;
            }
            entity.UpdateMainObjectBindingSource();
            DisplayLabelText(mainObject);
        }
        public bool IsActiveCheck(ACObjectsInfo objObjectsInfo)
        {
            APSuppliersController objSuppliersController = new APSuppliersController();
            BRBranchsController objBranchsController = new BRBranchsController();
            ARCustomersController objCustomersController = new ARCustomersController();
            HREmployeesController objEmployeesController = new HREmployeesController();

            APSuppliersInfo objSuppliersInfo = new APSuppliersInfo();
            BRBranchsInfo objBranchsInfo = new BRBranchsInfo();
            ARCustomersInfo objCustomersInfo = new ARCustomersInfo();
            HREmployeesInfo objEmployeesInfo = new HREmployeesInfo();
            if (objObjectsInfo.ACObjectType == ObjectType.Supplier.ToString())
            {
                objSuppliersInfo = (APSuppliersInfo)objSuppliersController.GetObjectByID(objObjectsInfo.ACObjectID);
                if (objSuppliersInfo != null)
                {
                    if (!objSuppliersInfo.APSupplierActiveCheck)
                    {
                        return true;
                    }
                }
            }

            if (objObjectsInfo.ACObjectType == ObjectType.Customer.ToString())
            {
                objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectByID(objObjectsInfo.ACObjectID);
                if (objCustomersInfo != null)
                {
                    if (!objCustomersInfo.ARCustomerActiveCheck)
                    {
                        return true;
                    }
                }
            }

            if (objObjectsInfo.ACObjectType == ObjectType.Branch.ToString())
            {
                objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(objObjectsInfo.ACObjectID);
                if (objBranchsInfo != null)
                {
                    if (!objBranchsInfo.BRBranchActiveCheck)
                    {
                        return true;
                    }
                }
            }

            if (objObjectsInfo.ACObjectType == ObjectType.Employee.ToString())
            {
                objEmployeesInfo = (HREmployeesInfo)objEmployeesController.GetObjectByID(objObjectsInfo.ACObjectID);
                if (objEmployeesInfo != null)
                {
                    if (!objEmployeesInfo.HREmployeeActiveCheck)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        public bool IsPurchaseCheck(ACObjectsInfo objObjectsInfo)
        {
            APSuppliersController objSuppliersController = new APSuppliersController();
            ARCustomersController objCustomersController = new ARCustomersController();

            APSuppliersInfo objSuppliersInfo = new APSuppliersInfo();
            ARCustomersInfo objCustomersInfo = new ARCustomersInfo();
            if (objObjectsInfo.ACObjectType == ObjectType.Supplier.ToString())
            {
                objSuppliersInfo = (APSuppliersInfo)objSuppliersController.GetObjectByID(objObjectsInfo.ACObjectID);
                if (objSuppliersInfo != null)
                {
                    if (objSuppliersInfo.IsBuyingLocked)
                    {
                        return true;
                    }
                }
            }

            if (objObjectsInfo.ACObjectType == ObjectType.Customer.ToString())
            {
                objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectByID(objObjectsInfo.ACObjectID);
                if (objCustomersInfo != null)
                {
                    if (objCustomersInfo.IsBuyingLocked)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        public void AddNewCustomer()
        {
            Customer.CustomerModule customerModule = (Customer.CustomerModule)BOSApp.ShowModule(ModuleName.Customer);
            if (customerModule == null)
                return;

            Customer.CustomerEntities customerEntities = (Customer.CustomerEntities)customerModule.CurrentModuleEntity;
            customerModule.ActionNew();
        }

        private ARSaleOrderItemWorksInfo ToSaleOrderItemWorksInfoForSaleOrderItemCostList(ARSaleOrderItemWorkItemsInfo objSaleOrderItemWorkItemsInfo)
        {
            return new ARSaleOrderItemWorksInfo()
            {
                FK_ICProductID = objSaleOrderItemWorkItemsInfo.FK_ICProductID,
                FK_ICDepartmentID = objSaleOrderItemWorkItemsInfo.FK_ICDepartmentID,
                FK_ICProductGroupID = objSaleOrderItemWorkItemsInfo.FK_ICProductGroupID,
                FK_ICMeasureUnitID = objSaleOrderItemWorkItemsInfo.FK_ICMeasureUnitID,
                ARSaleOrderItemWorkProductNo = objSaleOrderItemWorkItemsInfo.ARSaleOrderItemWorkItemProductNo,
                ARSaleOrderItemWorkProductName = objSaleOrderItemWorkItemsInfo.ARSaleOrderItemWorkItemProductName,
                ARSaleOrderItemWorkProductDesc = objSaleOrderItemWorkItemsInfo.ARSaleOrderItemWorkItemProductDesc,
                ARSaleOrderItemWorkProductQty = objSaleOrderItemWorkItemsInfo.ARSaleOrderItemWorkItemProductQty,
                ARSaleOrderItemWorkProductUnitPrice = objSaleOrderItemWorkItemsInfo.ARSaleOrderItemWorkItemProductUnitPrice,
                ARSaleOrderItemWorkProductType = objSaleOrderItemWorkItemsInfo.ARSaleOrderItemWorkItemProductType,
                ARSaleOrderItemWorkProductChargeCheck = objSaleOrderItemWorkItemsInfo.ARSaleOrderItemWorkItemProductChargeCheck,
                ARSaleOrderItemWorkTotalAmount = objSaleOrderItemWorkItemsInfo.ARSaleOrderItemWorkItemTotalAmount,
                ARSaleOrderItemWorkSubTotalAmount = objSaleOrderItemWorkItemsInfo.ARSaleOrderItemWorkItemSubTotalAmount,
                ARSaleOrderItemWorkIsCost = true,
            };
        }

        private ARSaleOrderItemWorksInfo ToSaleOrderItemWorksInfoForSaleOrderItemCostList(ARSaleOrderItemWorksInfo objSaleOrderItemWorksInfo)
        {
            return new ARSaleOrderItemWorksInfo()
            {
                FK_ICProductID = objSaleOrderItemWorksInfo.FK_ICProductID,
                FK_ICDepartmentID = objSaleOrderItemWorksInfo.FK_ICDepartmentID,
                FK_ICProductGroupID = objSaleOrderItemWorksInfo.FK_ICProductGroupID,
                FK_ICMeasureUnitID = objSaleOrderItemWorksInfo.FK_ICMeasureUnitID,
                FK_ARSaleOrderID = objSaleOrderItemWorksInfo.FK_ARSaleOrderID,
                ARSaleOrderItemWorkProductNo = objSaleOrderItemWorksInfo.ARSaleOrderItemWorkProductNo,
                ARSaleOrderItemWorkProductName = objSaleOrderItemWorksInfo.ARSaleOrderItemWorkProductName,
                ARSaleOrderItemWorkProductDesc = objSaleOrderItemWorksInfo.ARSaleOrderItemWorkProductDesc,
                ARSaleOrderItemWorkProductQty = objSaleOrderItemWorksInfo.ARSaleOrderItemWorkProductQty,
                ARSaleOrderItemWorkProductUnitPrice = objSaleOrderItemWorksInfo.ARSaleOrderItemWorkProductUnitPrice,
                ARSaleOrderItemWorkProductType = objSaleOrderItemWorksInfo.ARSaleOrderItemWorkProductType,
                ARSaleOrderItemWorkProductChargeCheck = objSaleOrderItemWorksInfo.ARSaleOrderItemWorkProductChargeCheck,
                ARSaleOrderItemWorkTotalAmount = objSaleOrderItemWorksInfo.ARSaleOrderItemWorkTotalAmount,
                ARSaleOrderItemWorkSubTotalAmount = objSaleOrderItemWorksInfo.ARSaleOrderItemWorkSubTotalAmount,
                ARSaleOrderItemWorkIsCost = true,
            };
        }

        public void DeleteItemFromSaleOrderItemCostList()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrderItemWorksInfo objSaleOrderItemsInfo = entity.ARSaleOrderItemCostList[entity.ARSaleOrderItemCostList.CurrentIndex];
            entity.ARSaleOrderItemCostList.Remove(objSaleOrderItemsInfo);
            entity.ARSaleOrderItemWorkList.Remove(objSaleOrderItemsInfo);

            if (objSaleOrderItemsInfo.ARSaleOrderItemWorkMaterialList != null)
            {
                objSaleOrderItemsInfo.ARSaleOrderItemWorkMaterialList.All(t =>
                {
                    entity.ARSaleOrderItemWorkMaterialList.Remove(t);
                    return true;
                });
            }

            if (objSaleOrderItemsInfo.ARSaleOrderItemWorkAssetList != null)
            {
                objSaleOrderItemsInfo.ARSaleOrderItemWorkAssetList.All(t =>
                {
                    entity.ARSaleOrderItemWorkAssetList.Remove(t);
                    return true;
                });
            }

            if (objSaleOrderItemsInfo.ARSaleOrderItemWorkTaskList != null)
            {
                objSaleOrderItemsInfo.ARSaleOrderItemWorkTaskList.All(t =>
                {
                    entity.ARSaleOrderItemWorkTaskList.Remove(t);
                    return true;
                });
            }

            entity.ARSaleOrderItemWorkTaskList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemWorkList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemCostList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemWorkMaterialList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemWorkAssetList.GridControl?.RefreshDataSource();
            UpdateTotalAmount(entity.ARSaleOrderItemsList);
        }

        public void AddWorkItemToSaleOrderItemCostList()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;
                ICProductsController objProductsController = new ICProductsController();
                ICProductWorkItemsController objProductWorkItemsController = new ICProductWorkItemsController();
                List<ICProductsInfo> result = objProductsController.GetListProductByProductType(ProductType.Work.ToString());
                List<ICProductsInfo> productWorkList = result.Where(o => o.ICProductChargeCheck).ToList();
                guiFind<ICProductsInfo> guiAddProduct = new guiFind<ICProductsInfo>("ICProducts", productWorkList, this, true, true);
                guiAddProduct.ShowDialog();
                if (guiAddProduct.DialogResult != DialogResult.OK)
                    return;

                IList<ICProductsInfo> results = guiAddProduct.SelectedObjects;
                if (results.Count == 0)
                    return;

                if (IsEditable())
                    ActionEdit();
                results.ToList().ForEach(o =>
                {
                    ARSaleOrderItemWorksInfo objSaleOrderItemCost = ToSaleOrderItemWorksInfoForSaleOrderItemCostList(o);
                    entity.ARSaleOrderItemCostList.Add(objSaleOrderItemCost);

                    List<ICProductWorkItemsInfo> productWorkItemList = objProductWorkItemsController.GetProductWorkItemsByProductWorkItemParentIDAndParentType(o.ICProductID, o.ICProductType);
                    List<ICProductWorkItemsInfo> productWorkMaterialItemList = productWorkItemList.Where(s => s.ICProductWorkItemType == ProductWorkItemType.Material.ToString()
                                                                                                                                         && s.ICProductWorkItemProductChargeCheck)
                                                                                                  .ToList();
                    List<ICProductWorkItemsInfo> productWorkAssetItemList = productWorkItemList.Where(s => s.ICProductWorkItemType == ProductWorkItemType.Asset.ToString()
                                                                                                                                         && s.ICProductWorkItemProductChargeCheck)
                                                                                                  .ToList();
                    productWorkMaterialItemList.ForEach(s =>
                    {
                        objSaleOrderItemCost = ToSaleOrderItemWorksInfoForSaleOrderItemCostList(s);
                        entity.ARSaleOrderItemCostList.Add(objSaleOrderItemCost);
                    });
                    productWorkAssetItemList.ForEach(s =>
                    {
                        objSaleOrderItemCost = ToSaleOrderItemWorksInfoForSaleOrderItemCostList(s);
                        entity.ARSaleOrderItemCostList.Add(objSaleOrderItemCost);
                    });
                });
                ARSaleOrderItemCostGridControl?.RefreshDataSource();
                objSaleOrdersInfo.ARSaleOrderTotalCost = 0;
                entity.ARSaleOrderItemCostList.ForEach(o =>
                    objSaleOrdersInfo.ARSaleOrderTotalCost += o.ARSaleOrderItemWorkTotalAmount);
                entity.UpdateMainObjectBindingSource();
                UpdateTotalAmount(entity.ARSaleOrderItemsList);
            }
        }

        public void AddMaterialItemToSaleOrderItemCostList()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;
                List<string> productTypes = new List<string>();
                productTypes = Enum.GetNames(typeof(ProductType)).Where(s => s != ProductType.Work.ToString()
                                                                                  && s != ProductType.SemiProduct.ToString()
                                                                                  && s != ProductType.Equipment.ToString()
                                                                                  && s != ProductType.VVP.ToString()
                                                                                  && s != ProductType.MMTB.ToString()
                                                                                  && s != ProductType.Car.ToString()).ToList();
                List<ICProductsInfo> productList = new List<ICProductsInfo>();
                List<ICProductsForViewInfo> productViewList = BOSApp.CurrentProductList.Where(p => productTypes.Contains(p.ICProductType)).ToList();
                if (productViewList.Count() > 0) productViewList.ForEach(o =>
                {
                    ICProductsInfo newObj = new ICProductsInfo();
                    BOSUtil.CopyObject(o, newObj);
                    productList.Add(newObj);
                });
                guiFind<ICProductsInfo> guiAddProduct = new guiFind<ICProductsInfo>("ICProducts", productList, this, true, true);
                guiAddProduct.ShowDialog();
                if (guiAddProduct.DialogResult != DialogResult.OK)
                    return;

                IList<ICProductsInfo> results = guiAddProduct.SelectedObjects;
                if (results.Count == 0)
                    return;

                if (IsEditable())
                    ActionEdit();
                results.ToList().ForEach(o =>
                {
                    ARSaleOrderItemWorksInfo objSaleOrderItemCost = ToSaleOrderItemWorksInfoForSaleOrderItemCostList(o);
                    objSaleOrderItemCost.ARSaleOrderItemWorkProductQty = 1;
                    objSaleOrderItemCost.ARSaleOrderItemWorkProductType = ProductItemType.Material.ToString();
                    objSaleOrderItemCost.ARSaleOrderItemWorkTotalAmount = objSaleOrderItemCost.ARSaleOrderItemWorkProductUnitPrice * objSaleOrderItemCost.ARSaleOrderItemWorkProductQty;
                    entity.ARSaleOrderItemWorkMaterialList.Add(objSaleOrderItemCost);
                    if (objSaleOrderItemCost.ARSaleOrderItemWorkProductChargeCheck)
                    {
                        entity.ARSaleOrderItemCostList.Add(objSaleOrderItemCost);
                    }
                });
                entity.ARSaleOrderItemWorkMaterialList.GridControl?.RefreshDataSource();
                entity.ARSaleOrderItemCostList.GridControl?.RefreshDataSource();

                objSaleOrdersInfo.ARSaleOrderTotalCost = 0;
                entity.ARSaleOrderItemCostList.ForEach(o =>
                    objSaleOrdersInfo.ARSaleOrderTotalCost += o.ARSaleOrderItemWorkTotalAmount);
                entity.UpdateMainObjectBindingSource();

                UpdateTotalAmount(entity.ARSaleOrderItemsList);
            }
        }

        public ARSaleOrderItemWorksInfo ToSaleOrderItemWorksInfoForSaleOrderItemCostList(ICProductsInfo objProductsInfo)
        {
            return new ARSaleOrderItemWorksInfo()
            {
                FK_ICProductID = objProductsInfo.ICProductID,
                FK_ICDepartmentID = objProductsInfo.FK_ICDepartmentID,
                FK_ICProductGroupID = objProductsInfo.FK_ICProductGroupID,
                FK_ICMeasureUnitID = objProductsInfo.FK_ICProductBasicUnitID,
                ARSaleOrderItemWorkProductNo = objProductsInfo.ICProductNo,
                ARSaleOrderItemWorkProductName = objProductsInfo.ICProductName,
                ARSaleOrderItemWorkProductDesc = objProductsInfo.ICProductDesc,
                ARSaleOrderItemWorkProductQty = 1,
                ARSaleOrderItemWorkProductUnitPrice = objProductsInfo.ICProductPrice01,
                ARSaleOrderItemWorkProductType = objProductsInfo.ICProductType,
                ARSaleOrderItemWorkProductChargeCheck = objProductsInfo.ICProductChargeCheck,
                ARSaleOrderItemWorkTotalAmount = objProductsInfo.ICProductPrice01,
                ARSaleOrderItemWorkSubTotalAmount = objProductsInfo.ICProductPrice01,
                ARSaleOrderItemWorkIsCost = objProductsInfo.ICProductChargeCheck,
            };
        }

        public ARSaleOrderItemWorksInfo ToSaleOrderItemWorksInfoForSaleOrderItemCostList(ICProductWorkItemsInfo objProductWorkItemsInfo)
        {
            return new ARSaleOrderItemWorksInfo()
            {
                FK_ICProductID = objProductWorkItemsInfo.FK_ICProductWorkItemChildID,
                FK_ICProductReferenceID = objProductWorkItemsInfo.FK_ICProductWorkItemParentID,
                FK_ICDepartmentID = objProductWorkItemsInfo.FK_ICDepartmentID,
                FK_ICProductGroupID = objProductWorkItemsInfo.FK_ICProductGroupID,
                FK_ICMeasureUnitID = objProductWorkItemsInfo.FK_ICProductBasicUnitID,
                ARSaleOrderItemWorkProductNo = objProductWorkItemsInfo.ICProductWorkItemProductNo,
                ARSaleOrderItemWorkProductName = objProductWorkItemsInfo.ICProductWorkItemProductName,
                ARSaleOrderItemWorkProductDesc = objProductWorkItemsInfo.ICProductWorkItemProductDesc,
                ARSaleOrderItemWorkProductQty = objProductWorkItemsInfo.ICProductWorkItemQty,
                ARSaleOrderItemWorkProductUnitPrice = objProductWorkItemsInfo.ICProductPrice01,
                ARSaleOrderItemWorkProductType = objProductWorkItemsInfo.ICProductWorkItemType,
                ARSaleOrderItemWorkProductChargeCheck = objProductWorkItemsInfo.ICProductWorkItemProductChargeCheck,
                ARSaleOrderItemWorkTotalAmount = objProductWorkItemsInfo.ICProductPrice01 * objProductWorkItemsInfo.ICProductWorkItemQty,
                ARSaleOrderItemWorkSubTotalAmount = objProductWorkItemsInfo.ICProductPrice01 * objProductWorkItemsInfo.ICProductWorkItemQty,
                ARSaleOrderItemWorkIsCost = true,
            };
        }

        public void UpdateSaleOrderTotalCost(ARSaleOrderItemWorksInfo objARSaleOrderItemWorksInfo)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;

            objARSaleOrderItemWorksInfo.ARSaleOrderItemWorkTotalAmount = objARSaleOrderItemWorksInfo.ARSaleOrderItemWorkProductUnitPrice * objARSaleOrderItemWorksInfo.ARSaleOrderItemWorkProductQty;
            ARSaleOrderItemCostGridControl?.RefreshDataSource();
            objSaleOrdersInfo.ARSaleOrderTotalCost = 0;
            entity.UpdateMainObjectBindingSource();
            UpdateTotalAmount(entity.ARSaleOrderItemsList);
        }

        public void ChangeCustomerPayment(ARSaleOrderPaymentTimesInfo objSaleOrderPaymentTimesInfo)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;
            ARCustomerPaymentsController objCustomerPaymentsController = new ARCustomerPaymentsController();
            List<ARCustomerPaymentsInfo> customerPayments = objCustomerPaymentsController.GetCustomerPaymentsWithTypeAdvancePayment();
            ARCustomerPaymentsInfo objCustomerPaymentsInfo = customerPayments.FirstOrDefault(o => o.ARCustomerPaymentID == objSaleOrderPaymentTimesInfo.FK_ARCustomerPaymentID);
            if (objCustomerPaymentsInfo != null)
            {
                decimal remainAmount = objCustomerPaymentsInfo.ARCustomerPaymentTotalAmount;
                if (objCustomerPaymentsInfo.ARCustomerPaymentTotalAmount > objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeAmount)
                {
                    objSaleOrderPaymentTimesInfo.FK_ARCustomerPaymentID = objCustomerPaymentsInfo.ARCustomerPaymentID;
                    objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeDepositBalance = objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeAmount;
                    objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeBalanceDue = 0;
                    remainAmount -= objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeAmount;
                    objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeDepositBalanceFromCustomerPayment = objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeAmount;
                    objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeStatus = SaleOrderPaymentTimeStatus.Paid.ToString();
                    if (entity.ARSaleOrderPaymentTimesList.Count == 2)
                    {
                        ARSaleOrderPaymentTimesInfo objExtraSaleOrderPaymentTime = entity.ARSaleOrderPaymentTimesList
                                                                                         .FirstOrDefault(o => o != objSaleOrderPaymentTimesInfo);
                        if (objSaleOrderPaymentTimesInfo.FK_ARExtraCustomerPaymentID > 0)
                        {

                        }
                        if (objExtraSaleOrderPaymentTime.ARSaleOrderPaymentTimeBalanceDue < remainAmount)
                        {
                            objExtraSaleOrderPaymentTime.ARSaleOrderPaymentTimeDepositBalanceFromExtraCustomerPayment = objExtraSaleOrderPaymentTime.ARSaleOrderPaymentTimeAmount - objExtraSaleOrderPaymentTime.ARSaleOrderPaymentTimeDepositBalance;
                            objExtraSaleOrderPaymentTime.ARSaleOrderPaymentTimeDepositBalance = objExtraSaleOrderPaymentTime.ARSaleOrderPaymentTimeAmount;
                            objExtraSaleOrderPaymentTime.ARSaleOrderPaymentTimeBalanceDue = 0;
                            //remainAmount -= (objExtraSaleOrderPaymentTime.ARSaleOrderPaymentTimeAmount - ;
                        }
                        else
                        {
                            objExtraSaleOrderPaymentTime.ARSaleOrderPaymentTimeDepositBalance += remainAmount;
                            objExtraSaleOrderPaymentTime.ARSaleOrderPaymentTimeBalanceDue = objExtraSaleOrderPaymentTime.ARSaleOrderPaymentTimeAmount
                                                                                        - objExtraSaleOrderPaymentTime.ARSaleOrderPaymentTimeDepositBalance;
                            objExtraSaleOrderPaymentTime.ARSaleOrderPaymentTimeDepositBalanceFromExtraCustomerPayment = remainAmount;
                        }
                        objExtraSaleOrderPaymentTime.FK_ARExtraCustomerPaymentID = objCustomerPaymentsInfo.ARCustomerPaymentID;

                        if (objExtraSaleOrderPaymentTime.ARSaleOrderPaymentTimeBalanceDue == 0)
                            objExtraSaleOrderPaymentTime.ARSaleOrderPaymentTimeStatus = SaleOrderPaymentTimeStatus.Paid.ToString();
                        else
                            objExtraSaleOrderPaymentTime.ARSaleOrderPaymentTimeStatus = SaleOrderPaymentTimeStatus.New.ToString();

                    }
                }
                else
                {
                    objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeDepositBalance = objCustomerPaymentsInfo.ARCustomerPaymentTotalAmount;
                    objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeBalanceDue = objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeAmount
                                                                                        - objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeDepositBalance;
                    objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeDepositBalanceFromCustomerPayment = objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeDepositBalance;
                    if (objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeBalanceDue == 0)
                        objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeStatus = SaleOrderPaymentTimeStatus.Paid.ToString();
                    else
                        objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeStatus = SaleOrderPaymentTimeStatus.New.ToString();
                }
            }
        }

        private ARSaleOrderItemWorksInfo ToSaleOrderItemWorksInfoForSaleOrderItemCostList(ARProposalItemWorksInfo objProposalItemWorksInfo)
        {

            return new ARSaleOrderItemWorksInfo()
            {
                FK_ICProductID = objProposalItemWorksInfo.FK_ICProductID,
                FK_ICDepartmentID = objProposalItemWorksInfo.FK_ICDepartmentID,
                FK_ICProductGroupID = objProposalItemWorksInfo.FK_ICProductGroupID,
                FK_ICMeasureUnitID = objProposalItemWorksInfo.FK_ICMeasureUnitID,
                ARSaleOrderItemWorkProductNo = objProposalItemWorksInfo.ARProposalItemWorkProductNo,
                ARSaleOrderItemWorkProductName = objProposalItemWorksInfo.ARProposalItemWorkProductName,
                ARSaleOrderItemWorkProductDesc = objProposalItemWorksInfo.ARProposalItemWorkProductDesc,
                ARSaleOrderItemWorkProductQty = objProposalItemWorksInfo.ARProposalItemWorkProductQty,
                ARSaleOrderItemWorkProductChargeCheck = objProposalItemWorksInfo.ARProposalItemWorkProductChargeCheck,
                ARSaleOrderItemWorkProductUnitPrice = objProposalItemWorksInfo.ARProposalItemWorkProductUnitPrice,
                ARSaleOrderItemWorkProductType = objProposalItemWorksInfo.ARProposalItemWorkProductType,
                ARSaleOrderItemWorkTotalAmount = objProposalItemWorksInfo.ARProposalItemWorkProductUnitPrice * objProposalItemWorksInfo.ARProposalItemWorkProductQty,
                ARSaleOrderItemWorkSubTotalAmount = objProposalItemWorksInfo.ARProposalItemWorkProductUnitPrice * objProposalItemWorksInfo.ARProposalItemWorkProductQty,
                ARSaleOrderItemWorkIsCost = true,
            };
        }

        //public void ActionNewFromSaleOrder()
        //{
        //    ActionNew();
        //    HyperLinkEditChooseProspectCustomer.Visible = false;
        //    ChangeDataSourceDocumentTypeLookup(true);
        //    SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
        //    ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
        //    ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
        //    ACObjectsController objObjectsController = new ACObjectsController();
        //    List<ARSaleOrdersInfo> saleOrderlList = objSaleOrdersController.GetSaleOrdersForOrdering();
        //    guiFind<ARSaleOrdersInfo> guiFind = new guiFind<ARSaleOrdersInfo>("ARSaleOrders", saleOrderlList, this, false, true);
        //    guiFind.ShowDialog();
        //    if (guiFind.DialogResult != DialogResult.OK)
        //    {
        //        ActionCancel();
        //        return;
        //    }
        //    ARSaleOrdersInfo objSaleOrdersInfo = guiFind.SelectedObjects[0];
        //    if (objSaleOrdersInfo != null)
        //    {
        //        BOSUtil.CopyObject(objSaleOrdersInfo, mainObject);
        //        mainObject.ARSaleOrderDocumentType = SaleOrderDocumentType.Annex.ToString();
        //        mainObject.ARSaleOrderID = 0;
        //        mainObject.ARSaleOrderNo = ERPModuleEntities.cstNewObjectText;
        //        mainObject.ARSaleOrderType = SaleOrderType.AnnexContract.ToString();
        //        mainObject.ARSaleOrderStatus = SaleOrderStatus.New.ToString();
        //        mainObject.ARSaleOrderBatchStatus = string.Empty;
        //        mainObject.ARSaleOrderParentID = objSaleOrdersInfo.ARSaleOrderID;
        //        mainObject.ARSaleOrderSubTotalAmount = 0;
        //        mainObject.ARSaleOrderTotalCost = 0;
        //        mainObject.ARSaleOrderDiscountPerCent = 0;
        //        mainObject.ARSaleOrderDiscountFix = 0;
        //        mainObject.ARSaleOrderSOCommissionPercent = 0;
        //        mainObject.ARSaleOrderSOCommissionAmount = 0;
        //        mainObject.ARSaleOrderTaxPercent = 0;
        //        mainObject.ARSaleOrderTaxAmount = 0;
        //        mainObject.ARSaleOrderTotalAmount = 0;
        //        mainObject.ARSaleOrderDepositBalance = 0;
        //        mainObject.ARSaleOrderBalanceDue = 0;
        //        mainObject.ACObjectAccessKey = mainObject.FK_ACObjectID + ";" + mainObject.ARObjectType;
        //        mainObject.FK_PMProjectID = objSaleOrdersInfo.FK_PMProjectID;
        //        ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByIDAndType(mainObject.FK_ACObjectID, mainObject.ARObjectType);
        //        if (objObjectsInfo == null)
        //            objObjectsInfo = new ACObjectsInfo();
        //        SetDefaultEmployee();
        //        SetDefaultInvoiceAndDeliveryFromObject(objObjectsInfo);
        //        entity.UpdateMainObjectBindingSource();
        //        DisplayLabelText(mainObject);
        //        GeneratePaymentTime(mainObject.FK_GEPaymentTermID);
        //        ARSaleOrderItemsGridControl.LoadGridView(mainObject.ARSaleOrderType);
        //    }
        //}

        public void ShowClearingDetail()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            if (String.IsNullOrEmpty(mainObject.ACObjectAccessKey))
                return;
            if (IsEditable())
            {
                ActionEdit();
            }

            if (entity.ARSaleOrderPaymentTimesList.CurrentIndex >= 0)
            {
                ARSaleOrderPaymentTimesInfo objSaleOrderPaymentTimesInfo = entity.ARSaleOrderPaymentTimesList[entity.ARSaleOrderPaymentTimesList.CurrentIndex];
                ARClearingDetailsController obClearingDetailsController = new ARClearingDetailsController();
                List<ARClearingDetailsInfo> clearingDetails = new List<ARClearingDetailsInfo>();
                clearingDetails = obClearingDetailsController.GetClearingDetailsForSaleOrders(mainObject.FK_ACObjectID, mainObject.ARObjectType, mainObject.FK_PMProjectID);
                guiClearingDetails guiClearingDetails = new guiClearingDetails(clearingDetails);
                guiClearingDetails.Module = this;
                guiClearingDetails.ShowDialog();
                if (guiClearingDetails.DialogResult != DialogResult.OK)
                    return;

                objSaleOrderPaymentTimesInfo.ClearingDetailList = new BOSList<ARClearingDetailsInfo>(TableName.ARClearingDetailsTableName);
                objSaleOrderPaymentTimesInfo.ClearingDetailList.Invalidate(guiClearingDetails.SelectedObjects);

                objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeDepositBalance = objSaleOrderPaymentTimesInfo.ClearingDetailList.Sum(o => o.ARClearingDetailAmount);
                objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeBalanceDue = objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeAmount - objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeDepositBalance;
                objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeDate = BOSApp.GetCurrentServerDate();
            }
        }

        public void ChangeItemBelongDeliveryMethod()
        {
            if (Toolbar.IsNullOrNoneAction())
                return;

            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            if (mainObject.ARSaleOrderIsContainerLoader)
            {
                mainObject.ARSaleOrderIsAcceptance = false;
                //mainObject.ARSaleOrderIsDeliveryPlan = false;
                mainObject.ARSaleOrderIsSaleOrderShipment = false;
                //mainObject.ARSaleOrderIsInvoiceAndShipment = false;
                mainObject.ARSaleOrderIsVehicleAllocation = false;
            }
            if (mainObject.ARSaleOrderIsAcceptance
                //|| mainObject.ARSaleOrderIsDeliveryPlan
                || mainObject.ARSaleOrderIsSaleOrderShipment
                //|| mainObject.ARSaleOrderIsInvoiceAndShipment
                || mainObject.ARSaleOrderIsVehicleAllocation)
            {
                mainObject.ARSaleOrderIsContainerLoader = false;
            }
            entity.ARSaleOrderItemsList.ForEach(o =>
            {
                objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(o.FK_ICProductID);
                if (objProductsInfo.ICProductType != ProductType.Service.ToString())
                {
                    o.ARSaleOrderItemIsAcceptance = mainObject.ARSaleOrderIsAcceptance;
                    o.ARSaleOrderItemIsDeliveryPlan = mainObject.ARSaleOrderIsDeliveryPlan;
                    o.ARSaleOrderItemIsSaleOrderShipment = mainObject.ARSaleOrderIsSaleOrderShipment;
                    o.ARSaleOrderItemIsInvoiceAndShipment = mainObject.ARSaleOrderIsInvoiceAndShipment;
                    o.ARSaleOrderItemIsVehicleAllocation = mainObject.ARSaleOrderIsVehicleAllocation;
                    o.ARSaleOrderItemIsContainerLoader = mainObject.ARSaleOrderIsContainerLoader;
                }
            });
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
            entity.UpdateMainObjectBindingSource();
        }

        public string GetSaleOrderDocumentType()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;

            return mainObject.ARSaleOrderDocumentType;
        }

        public void AddItemWork()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;

            ICProductWorkItemsController objProductWorkItemsController = new ICProductWorkItemsController();
            List<ICProductsInfo> productWorkList = ChooseProductWork();

            if (productWorkList != null
                && productWorkList.Count > 0)
            {
                ARSaleOrderItemWorksInfo itemWork;
                foreach (ICProductsInfo work in productWorkList)
                {
                    itemWork = GenerateProposalItemWorkByProduct(work);
                    entity.ARSaleOrderItemWorkList.Add(itemWork);
                    if (itemWork.ARSaleOrderItemWorkProductChargeCheck)
                    {
                        entity.ARSaleOrderItemCostList.Add(itemWork);
                    }
                }

                entity.UpdateTotalAmount(entity.ARSaleOrderItemsList);
                entity.ARSaleOrderItemWorkList.GridControl?.RefreshDataSource();
                entity.ARSaleOrderItemWorkAssetList.GridControl?.RefreshDataSource();
                entity.ARSaleOrderItemWorkMaterialList.GridControl?.RefreshDataSource();
                entity.ARSaleOrderItemCostList.GridControl?.RefreshDataSource();
                entity.ARSaleOrderItemWorkTaskList.GridControl?.RefreshDataSource();
            }
        }

        public ARSaleOrderItemWorksInfo GenerateProposalItemWorkByProduct(ICProductsInfo product)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrderItemWorksInfo proposalItemWork = new ARSaleOrderItemWorksInfo();
            proposalItemWork.FK_ICProductID = product.ICProductID;
            proposalItemWork.FK_ICProductGroupID = product.FK_ICProductGroupID;
            proposalItemWork.FK_ICDepartmentID = product.FK_ICDepartmentID;
            proposalItemWork.FK_ICMeasureUnitID = product.FK_ICProductBasicUnitID;
            proposalItemWork.ARSaleOrderItemWorkProductNo = product.ICProductNo;
            proposalItemWork.ARSaleOrderItemWorkProductName = product.ICProductName;
            proposalItemWork.ARSaleOrderItemWorkProductDesc = product.ICProductDesc;
            proposalItemWork.ARSaleOrderItemWorkProductQty = 1;
            proposalItemWork.ARSaleOrderItemWorkProductType = ProductType.Work.ToString();
            proposalItemWork.ARSaleOrderItemWorkProductUnitPrice = product.ICProductPrice01;
            proposalItemWork.ARSaleOrderItemWorkSubTotalAmount = proposalItemWork.ARSaleOrderItemWorkProductUnitPrice
                                                            * proposalItemWork.ARSaleOrderItemWorkProductQty;
            proposalItemWork.ARSaleOrderItemWorkTotalAmount = proposalItemWork.ARSaleOrderItemWorkProductUnitPrice
                                                            * proposalItemWork.ARSaleOrderItemWorkProductQty;
            proposalItemWork.ARSaleOrderItemWorkProductChargeCheck = product.ICProductChargeCheck;

            proposalItemWork.ARSaleOrderItemWorkMaterialList = new BOSList<ARSaleOrderItemWorksInfo>();
            proposalItemWork.ARSaleOrderItemWorkMaterialList.InitBOSList(entity,
                                              string.Empty,
                                              TableName.ARSaleOrderItemWorksTableName,
                                              BOSList<ARSaleOrderItemWorksInfo>.cstRelationNone);

            proposalItemWork.ARSaleOrderItemWorkAssetList = new BOSList<ARSaleOrderItemWorksInfo>();
            proposalItemWork.ARSaleOrderItemWorkAssetList.InitBOSList(entity,
                                              string.Empty,
                                              TableName.ARSaleOrderItemWorksTableName,
                                              BOSList<ARSaleOrderItemWorksInfo>.cstRelationNone);

            ICProductWorkItemsController objProductWorkItemsController = new ICProductWorkItemsController();
            List<ICProductWorkItemsInfo> productWorkItemLists = objProductWorkItemsController.GetProductWorkItemsByProductWorkItemParentID(proposalItemWork.FK_ICProductID);

            List<ICProductWorkItemsInfo> productWorkMaterialItems = productWorkItemLists.Where(o => o.ICProductWorkItemType == ProductItemType.Material.ToString()).ToList();
            productWorkMaterialItems.ForEach(o =>
            {
                ARSaleOrderItemWorksInfo objSaleOrderItemWorkMaterialsInfo = ToSaleOrderItemWorksInfo(o);
                objSaleOrderItemWorkMaterialsInfo.ARSaleOrderItemWorkProductType = ProductItemType.Material.ToString();
                entity.ARSaleOrderItemWorkMaterialList.Add(objSaleOrderItemWorkMaterialsInfo);
                proposalItemWork.ARSaleOrderItemWorkMaterialList.Add(objSaleOrderItemWorkMaterialsInfo);
                if (objSaleOrderItemWorkMaterialsInfo.ARSaleOrderItemWorkProductChargeCheck)
                {
                    entity.ARSaleOrderItemCostList.Add(objSaleOrderItemWorkMaterialsInfo);
                }
            });


            List<ICProductWorkItemsInfo> productWorkAssetItems = productWorkItemLists.Where(o => o.ICProductWorkItemType == ProductItemType.Asset.ToString()).ToList();
            productWorkAssetItems.ForEach(o =>
            {
                ARSaleOrderItemWorksInfo objSaleOrderItemWorkAssetsInfo = ToSaleOrderItemWorksInfo(o);
                objSaleOrderItemWorkAssetsInfo.ARSaleOrderItemWorkProductType = ProductItemType.Asset.ToString();
                entity.ARSaleOrderItemWorkAssetList.Add(objSaleOrderItemWorkAssetsInfo);
                proposalItemWork.ARSaleOrderItemWorkAssetList.Add(objSaleOrderItemWorkAssetsInfo);
                if (objSaleOrderItemWorkAssetsInfo.ARSaleOrderItemWorkProductChargeCheck)
                {
                    entity.ARSaleOrderItemCostList.Add(objSaleOrderItemWorkAssetsInfo);
                }
            });


            ICProductTasksController taskController = new ICProductTasksController();
            List<ICProductTasksInfo> taskList = taskController.GetProductTasksByProductID(product.ICProductID);

            proposalItemWork.ARSaleOrderItemWorkTaskList = new BOSList<ARSaleOrderItemWorkTasksInfo>();
            proposalItemWork.ARSaleOrderItemWorkTaskList.InitBOSList(entity,
                                              string.Empty,
                                              TableName.ARSaleOrderItemWorkTasksTableName,
                                              BOSList<ARSaleOrderItemWorkTasksInfo>.cstRelationNone);
            taskList.ForEach(t =>
            {
                ARSaleOrderItemWorkTasksInfo task = ToSaleOrderItemWorkTasksInfo(t);
                entity.ARSaleOrderItemWorkTaskList.Add(task);
                proposalItemWork.ARSaleOrderItemWorkTaskList.Add(task);
            });

            return proposalItemWork;
        }
        public void ChangeIsAcceptanceAllItems()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;

            entity.ARSaleOrderItemsList.ForEach(t => t.ARSaleOrderItemIsAcceptance = true);
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
        }

        public void ChangeQty(ARSaleOrderItemWorksInfo item)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;

            item.ARSaleOrderItemWorkSubTotalAmount = item.ARSaleOrderItemWorkProductUnitPrice * item.ARSaleOrderItemWorkProductQty;
            item.ARSaleOrderItemWorkTotalAmount = item.ARSaleOrderItemWorkProductUnitPrice * item.ARSaleOrderItemWorkProductQty;

            if (item.ARSaleOrderItemWorkTaskList != null
                && item.ARSaleOrderItemWorkTaskList.Count > 0)
            {

                ICProductTasksController taskController = new ICProductTasksController();
                List<ICProductTasksInfo> taskList = taskController.GetProductTasksByProductID(item.FK_ICProductID);
                ICProductTasksInfo task;
                item.ARSaleOrderItemWorkTaskList.All(t =>
                {
                    task = (ICProductTasksInfo)taskList.FirstOrDefault(o => o.FK_ICTaskID == t.FK_ICTaskID);
                    if (task != null)
                    {
                        t.ARSaleOrderItemWorkTaskTotalEstimatedHours
                            = task.ICProductTaskTotalEstimatedHours * item.ARSaleOrderItemWorkProductQty;
                    }

                    return true;
                });
            }

            ChangeSaleOrderItemCostDiscountPerCent();
            entity.ARSaleOrderItemWorkList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemCostList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemWorkAssetList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemWorkMaterialList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemWorkTaskList.GridControl?.RefreshDataSource();
            UpdateTotalAmount(entity.ARSaleOrderItemsList);
        }

        public void ChangeChargeCheck(ARSaleOrderItemWorksInfo item)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrderInfo = (ARSaleOrdersInfo)entity.MainObject;
            if (item.ARSaleOrderItemWorkProductChargeCheck)
            {
                entity.ARSaleOrderItemCostList.Add(item);
            }
            else
            {
                entity.ARSaleOrderItemCostList.Remove(item);
            }
            entity.ARSaleOrderItemWorkList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemCostList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemWorkAssetList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemWorkMaterialList.GridControl?.RefreshDataSource();
            objSaleOrderInfo.ARSaleOrderTotalCost = 0;
            entity.ARSaleOrderItemCostList.ForEach(o =>
                    objSaleOrderInfo.ARSaleOrderTotalCost += o.ARSaleOrderItemWorkTotalAmount);
            entity.UpdateMainObjectBindingSource();
            UpdateTotalAmount(entity.ARSaleOrderItemsList);
        }

        public void DeleteItemFromSaleOrderItemWorksList()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;

            if (entity.ARSaleOrderItemWorkList.CurrentIndex < 0)
                return;

            ARSaleOrderItemWorksInfo objSaleOrderItemsInfo = entity.ARSaleOrderItemWorkList[entity.ARSaleOrderItemWorkList.CurrentIndex];

            entity.ARSaleOrderItemWorkList.Remove(objSaleOrderItemsInfo);
            entity.ARSaleOrderItemCostList.Remove(objSaleOrderItemsInfo);
            if (objSaleOrderItemsInfo.ARSaleOrderItemWorkMaterialList != null)
            {
                objSaleOrderItemsInfo.ARSaleOrderItemWorkMaterialList.All(t =>
                {
                    entity.ARSaleOrderItemWorkMaterialList.Remove(t);
                    return true;
                });
            }
            if (objSaleOrderItemsInfo.ARSaleOrderItemWorkAssetList != null)
            {
                objSaleOrderItemsInfo.ARSaleOrderItemWorkAssetList.All(t =>
                {
                    entity.ARSaleOrderItemWorkAssetList.Remove(t);
                    return true;
                });
            }
            if (objSaleOrderItemsInfo.ARSaleOrderItemWorkTaskList != null)
            {
                objSaleOrderItemsInfo.ARSaleOrderItemWorkTaskList.All(t =>
                {
                    entity.ARSaleOrderItemWorkTaskList.Remove(t);
                    return true;
                });
            }
            entity.ARSaleOrderItemWorkList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemCostList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemWorkMaterialList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemWorkAssetList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemWorkTaskList.GridControl?.RefreshDataSource();
            UpdateTotalAmount(entity.ARSaleOrderItemsList);
        }

        public void DeleteItemSaleOrderItemWorkAssetItemsList()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrderItemWorksInfo objSaleOrderItemsInfo = entity.ARSaleOrderItemWorkAssetList[entity.ARSaleOrderItemWorkAssetList.CurrentIndex];
            entity.ARSaleOrderItemWorkAssetList.Remove(objSaleOrderItemsInfo);
            entity.ARSaleOrderItemCostList.Remove(objSaleOrderItemsInfo);
            entity.ARSaleOrderItemWorkList.ForEach(t =>
            {
                if (t.ARSaleOrderItemWorkAssetList != null
                    && t.ARSaleOrderItemWorkAssetList.Count > 0)
                {
                    t.ARSaleOrderItemWorkAssetList.Remove(objSaleOrderItemsInfo);
                }
            });

            entity.ARSaleOrderItemWorkList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemCostList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemWorkAssetList.GridControl?.RefreshDataSource();
            UpdateTotalAmount(entity.ARSaleOrderItemsList);
        }

        public void DeleteItemSaleOrderItemWorkMaterialtemsList()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrderItemWorksInfo objSaleOrderItemsInfo = entity.ARSaleOrderItemWorkMaterialList[entity.ARSaleOrderItemWorkMaterialList.CurrentIndex];
            entity.ARSaleOrderItemWorkMaterialList.Remove(objSaleOrderItemsInfo);
            entity.ARSaleOrderItemCostList.Remove(objSaleOrderItemsInfo);
            entity.ARSaleOrderItemWorkList.ForEach(t =>
            {
                if (t.ARSaleOrderItemWorkMaterialList != null
                    && t.ARSaleOrderItemWorkMaterialList.Count > 0)
                {
                    t.ARSaleOrderItemWorkMaterialList.Remove(objSaleOrderItemsInfo);
                }
            });

            entity.ARSaleOrderItemWorkList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemCostList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemWorkMaterialList.GridControl?.RefreshDataSource();
            entity.UpdateTotalAmount(entity.ARSaleOrderItemsList);
            UpdateTotalAmount(entity.ARSaleOrderItemsList);
        }

        public void DeleteItemSaleOrderItemWorkTaskItemsList()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrderItemWorkTasksInfo objSaleOrderItemsInfo = entity.ARSaleOrderItemWorkTaskList[entity.ARSaleOrderItemWorkTaskList.CurrentIndex];
            entity.ARSaleOrderItemWorkTaskList.Remove(objSaleOrderItemsInfo);
            entity.ARSaleOrderItemWorkList.ForEach(t =>
            {
                if (t.ARSaleOrderItemWorkTaskList != null
                    && t.ARSaleOrderItemWorkTaskList.Count > 0)
                {
                    t.ARSaleOrderItemWorkTaskList.Remove(objSaleOrderItemsInfo);
                }
            });

            entity.ARSaleOrderItemWorkList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemCostList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemWorkTaskList.GridControl?.RefreshDataSource();

        }

        public void DeleteItemSaleOrderItemWorkTasksList()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrderItemWorkTasksInfo objSaleOrderItemsInfo = entity.ARSaleOrderItemWorkTaskList[entity.ARSaleOrderItemWorkTaskList.CurrentIndex];
            entity.ARSaleOrderItemWorkTaskList.Remove(objSaleOrderItemsInfo);

            entity.ARSaleOrderItemWorkList.ForEach(t =>
            {
                if (t.ARSaleOrderItemWorkTaskList != null
                    && t.ARSaleOrderItemWorkTaskList.Count > 0)
                {
                    t.ARSaleOrderItemWorkTaskList.Remove(objSaleOrderItemsInfo);
                }
            });

            entity.ARSaleOrderItemWorkList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemCostList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemWorkTaskList.GridControl?.RefreshDataSource();
            UpdateTotalAmount(entity.ARSaleOrderItemsList);
        }

        public void DeleteSaleOrderItemAllocationFee()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            entity.SaleOrderItemAllocationFeeList.RemoveSelectedRowObjectFromList();
            UpdateTotalSaleOrderItemAllocationFee();
            entity.SaleOrderItemAllocationFeeList.GridControl?.RefreshDataSource();
        }

        public void DeleteSaleOrderItemOtherFee()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            entity.SaleOrderItemOtherFeeList.RemoveSelectedRowObjectFromList();
            UpdateTotalSaleOrderItemOtherFee();
            entity.SaleOrderItemOtherFeeList.GridControl?.RefreshDataSource();
        }

        public void UpdatePaymentMethod(string paymentMethod)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            if (entity.ARSaleOrderPaymentTimesList.Count > 0)
                entity.ARSaleOrderPaymentTimesList.ForEach(o => o.ARPaymentMethodCombo = paymentMethod);
            entity.ARSaleOrderPaymentTimesList.GridControl?.RefreshDataSource();
        }

        public void AddSaleOrderItemAsset()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;
                List<string> productTypes = new List<string>();
                productTypes = Enum.GetNames(typeof(ProductType)).Where(s => s == ProductType.Equipment.ToString()
                                                                                  || s == ProductType.VVP.ToString()
                                                                                  || s == ProductType.MMTB.ToString()
                                                                                  || s == ProductType.Car.ToString()
                                                                                  || s == ProductType.Service.ToString()
                                                                                  ).ToList();
                List<ICProductsInfo> productList = new List<ICProductsInfo>();
                List<ICProductsForViewInfo> productViewList = BOSApp.CurrentProductList.Where(p => productTypes.Contains(p.ICProductType)).ToList();
                if (productViewList.Count() > 0) productViewList.ForEach(o =>
                {
                    ICProductsInfo newObj = new ICProductsInfo();
                    BOSUtil.CopyObject(o, newObj);
                    productList.Add(newObj);
                });
                guiFind<ICProductsInfo> guiAddProduct = new guiFind<ICProductsInfo>("ICProducts", productList, this, true, true);
                guiAddProduct.ShowDialog();
                if (guiAddProduct.DialogResult != DialogResult.OK)
                    return;

                IList<ICProductsInfo> results = guiAddProduct.SelectedObjects;
                if (results.Count == 0)
                    return;

                if (IsEditable())
                    ActionEdit();
                results.ToList().ForEach(o =>
                {
                    ARSaleOrderItemWorksInfo objSaleOrderItemCost = ToSaleOrderItemWorksInfoForSaleOrderItemCostList(o);
                    objSaleOrderItemCost.ARSaleOrderItemWorkProductQty = 1;
                    objSaleOrderItemCost.ARSaleOrderItemWorkProductType = ProductItemType.Asset.ToString();
                    objSaleOrderItemCost.ARSaleOrderItemWorkTotalAmount = objSaleOrderItemCost.ARSaleOrderItemWorkProductUnitPrice * objSaleOrderItemCost.ARSaleOrderItemWorkProductQty;
                    entity.ARSaleOrderItemWorkAssetList.Add(objSaleOrderItemCost);
                    if (objSaleOrderItemCost.ARSaleOrderItemWorkProductChargeCheck)
                    {
                        entity.ARSaleOrderItemCostList.Add(objSaleOrderItemCost);
                    }
                });
                entity.ARSaleOrderItemWorkAssetList.GridControl?.RefreshDataSource();
                entity.ARSaleOrderItemCostList.GridControl?.RefreshDataSource();

                objSaleOrdersInfo.ARSaleOrderTotalCost = 0;
                entity.ARSaleOrderItemCostList.ForEach(o =>
                    objSaleOrdersInfo.ARSaleOrderTotalCost += o.ARSaleOrderItemWorkTotalAmount);
                entity.UpdateMainObjectBindingSource();

                UpdateTotalAmount(entity.ARSaleOrderItemsList);
            }
        }

        public void AddSaleOrderItemTask()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;

                ICTasksController objTasksController = new ICTasksController();
                List<ICTasksInfo> taskList = objTasksController.GetAllTaskList();
                guiAddTask<ICTasksInfo> guiAddTask = new guiAddTask<ICTasksInfo>(taskList, 0);
                guiAddTask.Module = this;
                guiAddTask.ShowDialog();
                if (guiAddTask.DialogResult != DialogResult.OK)
                    return;

                IList<ICTasksInfo> results = guiAddTask.SelectedObjects;
                if (results.Count == 0)
                    return;

                if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
                    base.ActionEdit();
                ARSaleOrderItemWorkTasksInfo objSaleOrderItemWorkTasksInfo = new ARSaleOrderItemWorkTasksInfo();
                foreach (ICTasksInfo item in results)
                {
                    objSaleOrderItemWorkTasksInfo = ToARSaleOrderItemWorkTasks(item);
                    entity.ARSaleOrderItemWorkTaskList.Add(objSaleOrderItemWorkTasksInfo);
                }
                entity.ARSaleOrderItemWorkTaskList.GridControl?.RefreshDataSource();
            }
        }

        private ARSaleOrderItemWorkTasksInfo ToARSaleOrderItemWorkTasks(ICTasksInfo objTasksInfo)
        {
            return new ARSaleOrderItemWorkTasksInfo
            {
                ARSaleOrderItemWorkTaskNo = objTasksInfo.ICTaskNo,
                ARSaleOrderItemWorkTaskInfo = objTasksInfo.ICTaskInfo,
                ARSaleOrderItemWorkTaskName = objTasksInfo.ICTaskName,
                ARSaleOrderItemWorkTaskQty = objTasksInfo.ICTaskQty,
                ARSaleOrderItemWorkTaskTotalActualDays = objTasksInfo.ICTaskTotalActualDays,
                ARSaleOrderItemWorkTaskTotalActualHours = objTasksInfo.ICTaskTotalActualHours,
                ARSaleOrderItemWorkTaskTotalEstimatedDays = objTasksInfo.ICTaskTotalEstimatedDays,
                ARSaleOrderItemWorkTaskTotalEstimatedHours = objTasksInfo.ICTaskTotalEstimatedHours,
                FK_ICTaskID = objTasksInfo.ICTaskID
            };
        }

        public void DeleteItemFromSaleOrderItemWorkTaskList()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;

            if (entity.ARSaleOrderItemWorkTaskList.CurrentIndex < 0)
                return;

            ARSaleOrderItemWorkTasksInfo objSaleOrderItemWorkTasksInfo = entity.ARSaleOrderItemWorkTaskList[entity.ARSaleOrderItemWorkTaskList.CurrentIndex];

            entity.ARSaleOrderItemWorkTaskList.Remove(objSaleOrderItemWorkTasksInfo);
        }

        public ARSaleOrderItemWorkTasksInfo ToSaleOrderItemWorkTask(ARProposalItemWorkTasksInfo objProposalItemWorkTasksInfo)
        {
            return new ARSaleOrderItemWorkTasksInfo
            {
                FK_HRDepartmentID = objProposalItemWorkTasksInfo.FK_HRDepartmentID,
                FK_HRDepartmentRoomID = objProposalItemWorkTasksInfo.FK_HRDepartmentRoomID,
                FK_HREmployeeID = objProposalItemWorkTasksInfo.FK_HREmployeeID,
                FK_ICMeasureUnitID = objProposalItemWorkTasksInfo.FK_ICMeasureUnitID,
                FK_ICProductID = objProposalItemWorkTasksInfo.FK_ICProductID,
                FK_ICTaskID = objProposalItemWorkTasksInfo.FK_ICTaskID,
                ARSaleOrderItemWorkTaskNo = objProposalItemWorkTasksInfo.ARProposalItemWorkTaskNo,
                ARSaleOrderItemWorkTaskName = objProposalItemWorkTasksInfo.ARProposalItemWorkTaskName,
                ARSaleOrderItemWorkTaskInfo = objProposalItemWorkTasksInfo.ARProposalItemWorkTaskInfo,
                ARSaleOrderItemWorkTaskTotalEstimatedDays = objProposalItemWorkTasksInfo.ARProposalItemWorkTaskTotalEstimatedDays,
                ARSaleOrderItemWorkTaskTotalEstimatedHours = objProposalItemWorkTasksInfo.ARProposalItemWorkTaskTotalEstimatedHours,
                ARSaleOrderItemWorkTaskTotalActualDays = objProposalItemWorkTasksInfo.ARProposalItemWorkTaskTotalActualDays,
                ARSaleOrderItemWorkTaskTotalActualHours = objProposalItemWorkTasksInfo.ARProposalItemWorkTaskTotalActualHours,
                ARSaleOrderItemWorkTaskEstimatedExtendDays = objProposalItemWorkTasksInfo.ARProposalItemWorkTaskEstimatedExtendDays,
                ARSaleOrderItemWorkTaskActualExtendDays = objProposalItemWorkTasksInfo.ARProposalItemWorkTaskActualExtendDays,
                ARSaleOrderItemWorkTaskEstimatedExtendHours = objProposalItemWorkTasksInfo.ARProposalItemWorkTaskEstimatedExtendHours,
                ARSaleOrderItemWorkTaskActualExtendHours = objProposalItemWorkTasksInfo.ARProposalItemWorkTaskActualExtendHours,
                ARSaleOrderItemWorkTaskQty = objProposalItemWorkTasksInfo.ARProposalItemWorkTaskQty,
                ARSaleOrderItemWorkTaskEstimatedTotalCost = objProposalItemWorkTasksInfo.ARProposalItemWorkTaskEstimatedTotalCost,
                ARSaleOrderItemWorkTaskActualTotalCost = objProposalItemWorkTasksInfo.ARProposalItemWorkTaskActualTotalCost,
            };
        }

        public void AddItemCost()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            List<ICProductsInfo> productCostList = ChooseProductCost();

            if (productCostList != null
                && productCostList.Count > 0)
            {
                ARSaleOrderItemWorksInfo itemCost;
                foreach (ICProductsInfo cost in productCostList)
                {
                    itemCost = GenerateSaleOrderItemCostByProduct(cost);
                    entity.ARSaleOrderItemCostList.Add(itemCost);
                }

                entity.UpdateTotalAmount(entity.ARSaleOrderItemsList);
                entity.ARSaleOrderItemCostList.GridControl?.RefreshDataSource();
            }
        }

        public List<ICProductsInfo> ChooseProductCost()
        {
            ICProductsController productController = new ICProductsController();
            List<ICProductsInfo> productCostList = productController.GetCostForSaleOrder();
            List<ICProductsInfo> productCostSelectedList = new List<ICProductsInfo>();
            guiFind<ICProductsInfo> guiFind = new guiFind<ICProductsInfo>(TableName.ICProductsTableName
                                                                            , productCostList
                                                                            , this
                                                                            , true);
            if (guiFind.ShowDialog() == DialogResult.OK)
            {
                productCostSelectedList.AddRange(guiFind.SelectedObjects);
            }
            return productCostSelectedList;
        }

        public ARSaleOrderItemWorksInfo GenerateSaleOrderItemCostByProduct(ICProductsInfo product)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrderItemWorksInfo saleOrderItemCost = new ARSaleOrderItemWorksInfo();
            saleOrderItemCost.FK_ICProductID = product.ICProductID;
            saleOrderItemCost.FK_ICProductGroupID = product.FK_ICProductGroupID;
            saleOrderItemCost.FK_ICDepartmentID = product.FK_ICDepartmentID;
            saleOrderItemCost.FK_ICMeasureUnitID = product.FK_ICProductBasicUnitID;
            saleOrderItemCost.ARSaleOrderItemWorkProductNo = product.ICProductNo;
            saleOrderItemCost.ARSaleOrderItemWorkProductName = product.ICProductName;
            saleOrderItemCost.ARSaleOrderItemWorkProductDesc = product.ICProductDesc;
            saleOrderItemCost.ARSaleOrderItemWorkProductQty = 1;
            saleOrderItemCost.ARSaleOrderItemWorkProductType = ProductType.Service.ToString();
            saleOrderItemCost.ARSaleOrderItemWorkProductUnitPrice = product.ICProductPrice01;
            saleOrderItemCost.ARSaleOrderItemWorkSubTotalAmount = saleOrderItemCost.ARSaleOrderItemWorkProductUnitPrice
                                                            * saleOrderItemCost.ARSaleOrderItemWorkProductQty;
            saleOrderItemCost.ARSaleOrderItemWorkTotalAmount = saleOrderItemCost.ARSaleOrderItemWorkProductUnitPrice
                                                            * saleOrderItemCost.ARSaleOrderItemWorkProductQty;
            saleOrderItemCost.ARSaleOrderItemWorkProductChargeCheck = true;
            return saleOrderItemCost;
        }

        public void ChangeSaleOrderItemCostDiscountPerCent()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            if (entity.ARSaleOrderItemCostList.CurrentIndex < 0)
                return;
            ARSaleOrderItemWorksInfo SaleOrderItemWorksInfo = entity.ARSaleOrderItemCostList[entity.ARSaleOrderItemCostList.CurrentIndex];
            SaleOrderItemWorksInfo.ARSaleOrderItemWorkDiscountAmount = SaleOrderItemWorksInfo.ARSaleOrderItemWorkProductUnitPrice * SaleOrderItemWorksInfo.ARSaleOrderItemWorkDiscountPerCent * SaleOrderItemWorksInfo.ARSaleOrderItemWorkProductQty / 100;
            SaleOrderItemWorksInfo.ARSaleOrderItemWorkTotalAmount = (SaleOrderItemWorksInfo.ARSaleOrderItemWorkProductUnitPrice * SaleOrderItemWorksInfo.ARSaleOrderItemWorkProductQty) - SaleOrderItemWorksInfo.ARSaleOrderItemWorkDiscountAmount;
            entity.UpdateTotalAmount(entity.ARSaleOrderItemsList);
            entity.ARSaleOrderItemCostList.GridControl?.RefreshDataSource();
            entity.UpdateMainObjectBindingSource();
            UpdateTotalAmount(entity.ARSaleOrderItemsList);
        }

        public void ChangeSaleOrderItemCostDiscountAmount()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            if (entity.ARSaleOrderItemCostList.CurrentIndex < 0)
                return;
            ARSaleOrderItemWorksInfo SaleOrderItemWorksInfo = entity.ARSaleOrderItemCostList[entity.ARSaleOrderItemCostList.CurrentIndex];
            SaleOrderItemWorksInfo.ARSaleOrderItemWorkDiscountPerCent = (SaleOrderItemWorksInfo.ARSaleOrderItemWorkDiscountAmount / SaleOrderItemWorksInfo.ARSaleOrderItemWorkProductUnitPrice) * 100;
            SaleOrderItemWorksInfo.ARSaleOrderItemWorkTotalAmount = (SaleOrderItemWorksInfo.ARSaleOrderItemWorkProductUnitPrice * SaleOrderItemWorksInfo.ARSaleOrderItemWorkProductQty) - SaleOrderItemWorksInfo.ARSaleOrderItemWorkDiscountAmount;
            entity.UpdateTotalAmount(entity.ARSaleOrderItemsList);
            entity.ARSaleOrderItemCostList.GridControl?.RefreshDataSource();
            entity.UpdateMainObjectBindingSource();
            UpdateTotalAmount(entity.ARSaleOrderItemsList);
        }
        public void ChangeProposalItemDiscountFix()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            if (entity.ARSaleOrderItemsList.CurrentIndex < 0)
                return;
            ARSaleOrderItemsInfo objSaleOrderItemsInfo = entity.ARSaleOrderItemsList[entity.ARSaleOrderItemsList.CurrentIndex];
            objSaleOrderItemsInfo.ARSaleOrderItemDiscountAmount = objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice * objSaleOrderItemsInfo.ARSaleOrderItemProductDiscount * objSaleOrderItemsInfo.ARSaleOrderItemProductQty / 100;
            objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount = (objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice * objSaleOrderItemsInfo.ARSaleOrderItemProductQty) - objSaleOrderItemsInfo.ARSaleOrderItemDiscountAmount;
            entity.UpdateTotalAmount(entity.ARSaleOrderItemsList);
            entity.UpdateMainObjectBindingSource();
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
        }

        public void ChangeProposalItemDiscountAmount()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            if (entity.ARSaleOrderItemsList.CurrentIndex < 0)
                return;
            ARSaleOrderItemsInfo objSaleOrderItemsInfo = entity.ARSaleOrderItemsList[entity.ARSaleOrderItemsList.CurrentIndex];
            objSaleOrderItemsInfo.ARSaleOrderItemProductDiscount = objSaleOrderItemsInfo.ARSaleOrderItemDiscountAmount / (objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice * objSaleOrderItemsInfo.ARSaleOrderItemProductQty) * 100;
            //objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount = (objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice * objSaleOrderItemsInfo.ARSaleOrderItemProductQty) - objSaleOrderItemsInfo.ARSaleOrderItemDiscountAmount;
            entity.UpdateTotalAmount(entity.ARSaleOrderItemsList);
            entity.UpdateMainObjectBindingSource();
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
        }

        public void ChangeForeignItemProductName(ARSaleOrderItemsInfo item, bool isForeignItemProductName)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ICProductsController objProductsController = new ICProductsController();
            if (item != null)
            {
                ICProductsInfo objProductsInfo = objProductsController.GetObjectByID(item.FK_ICProductID) as ICProductsInfo;
                if (objProductsInfo != null)
                {
                    if (isForeignItemProductName != true)
                        item.ARSaleOrderItemProductName = objProductsInfo.ICProductName;
                    else
                        item.ARSaleOrderItemProductName = string.IsNullOrEmpty(objProductsInfo.ICProductName2) ? objProductsInfo.ICProductName : objProductsInfo.ICProductName2;
                }
            }
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
        }

        public void UpdatePriceWithPromotionProduct()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            if (entity.ARSaleOrderItemsList.CurrentIndex < 0)
                return;
            ARSaleOrderItemsInfo objSaleOrderItemsInfo = entity.ARSaleOrderItemsList[entity.ARSaleOrderItemsList.CurrentIndex];
            objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice = 0;
            objSaleOrderItemsInfo.ICProductUnitPrice = objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice;
            entity.UpdateTotalAmount(entity.ARSaleOrderItemsList);
            entity.UpdateMainObjectBindingSource();
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
        }

        public List<ICProductAttributesInfo> GetProductAttributeDatasource(string group)
        {
            List<ICProductAttributesInfo> woodTypeList = new List<ICProductAttributesInfo>();
            ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
            woodTypeList = objProductAttributesController.GetProductAttributesByProductAttributeGroup(group);
            ICProductAttributesInfo objProductAttributesDummyInfo = new ICProductAttributesInfo();
            woodTypeList.Insert(0, objProductAttributesDummyInfo);
            return woodTypeList;
        }

        public void ChangeMoreColor(string colorIDs)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            if (entity.ARSaleOrderItemsList.CurrentIndex < 0)
                return;
            ARSaleOrderItemsInfo objSaleOrderItemsInfo = entity.ARSaleOrderItemsList[entity.ARSaleOrderItemsList.CurrentIndex];
            objSaleOrderItemsInfo.ARSaleOrderItemProductColorAttribute = colorIDs;
        }

        public void SetDefaultSaleOrderItemProductDesc()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainobject = (ARSaleOrdersInfo)entity.MainObject;
            if (entity.ARSaleOrderItemsList.CurrentIndex < 0)
                return;
            ARSaleOrderItemsInfo objSaleOrderItemsInfo = entity.ARSaleOrderItemsList[entity.ARSaleOrderItemsList.CurrentIndex];

            List<string> item = new List<string>();
            ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
            ICProductAttributesInfo objProductAttributesInfo = null;
            //Tên
            item.Add(objSaleOrderItemsInfo.ARSaleOrderItemProductName.Trim());

            //dài rộng cao
            if (objSaleOrderItemsInfo.ARSaleOrderItemHeight > 0 || objSaleOrderItemsInfo.ARSaleOrderItemWidth > 0 || objSaleOrderItemsInfo.ARSaleOrderItemLength > 0)
            {
                string style = string.Empty;
                if (objSaleOrderItemsInfo.ARSaleOrderItemLength > 0)
                    style = style + ToString(objSaleOrderItemsInfo.ARSaleOrderItemLength);
                if (objSaleOrderItemsInfo.ARSaleOrderItemWidth > 0)
                    style = style + "x" + ToString(objSaleOrderItemsInfo.ARSaleOrderItemWidth);
                if (objSaleOrderItemsInfo.ARSaleOrderItemHeight > 0)
                    style = style + "x" + ToString(objSaleOrderItemsInfo.ARSaleOrderItemHeight);
                item.Add(style + " mm");
            }

            //Thuộc tính khác
            if (!string.IsNullOrEmpty(objSaleOrderItemsInfo.ARSaleOrderItemProductAttribute))
            {
                string[] attributeValueIDs = objSaleOrderItemsInfo.ARSaleOrderItemProductAttribute.Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries);
                if (objSaleOrderItemsInfo.ARSaleOrderItemProductAttribute.Contains(","))
                    attributeValueIDs = objSaleOrderItemsInfo.ARSaleOrderItemProductAttribute.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                ICDepartmentAttributeValuesController objDepartmentAttributeValuesController = new ICDepartmentAttributeValuesController();
                for (int i = 0; i < attributeValueIDs.Length; i++)
                {
                    int attributeValueID = Convert.ToInt32(attributeValueIDs[i]);
                    ICDepartmentAttributeValuesInfo objDepartmentAttributeValuesInfo = (ICDepartmentAttributeValuesInfo)objDepartmentAttributeValuesController.GetObjectByID(attributeValueID);
                    if (objDepartmentAttributeValuesInfo != null)
                        item.Add(objDepartmentAttributeValuesInfo.ICDepartmentAttributeValueValue);
                }
            }

            // Xác định loại gỗ
            if (objSaleOrderItemsInfo.FK_ICProductAttributeWoodTypeID > 0)
            {
                objProductAttributesInfo = (ICProductAttributesInfo)objProductAttributesController.GetObjectByID(objSaleOrderItemsInfo.FK_ICProductAttributeWoodTypeID);
                if (objProductAttributesInfo != null)
                {
                    item.Add(objProductAttributesInfo.ICProductAttributeValue);
                }
            }

            //Loại gỗ khác
            if (!string.IsNullOrEmpty(objSaleOrderItemsInfo.ARSaleOrderItemWoodTypeText))
            {
                item.Add(objSaleOrderItemsInfo.ARSaleOrderItemWoodTypeText);
            }

            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(objSaleOrderItemsInfo.FK_ICProductID);
            if (objProductsInfo != null && objProductsInfo.ICProductTemplateType == ProductTemplateType.Design.ToString())
            {
                //Màu sơn
                if (objSaleOrderItemsInfo.FK_ICProductAttributeColorID > 0)
                {
                    objProductAttributesInfo = (ICProductAttributesInfo)objProductAttributesController.GetObjectByID(objSaleOrderItemsInfo.FK_ICProductAttributeColorID);
                    if (objProductAttributesInfo != null)
                    {
                        item.Add(objProductAttributesInfo.ICProductAttributeValue);
                    }
                }
                //Màu sơn khác
                if (!string.IsNullOrEmpty(objSaleOrderItemsInfo.ARSaleOrderItemColorID))
                {
                    string[] attributeValueIDs = objSaleOrderItemsInfo.ARSaleOrderItemColorID.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                    for (int i = 0; i < attributeValueIDs.Length; i++)
                    {
                        int attributeValueID = Convert.ToInt32(attributeValueIDs[i].Trim());
                        objProductAttributesInfo = (ICProductAttributesInfo)objProductAttributesController.GetObjectByID(attributeValueID);
                        if (objProductAttributesInfo != null)
                            item.Add(objProductAttributesInfo.ICProductAttributeValue);
                    }
                }
            }

            objSaleOrderItemsInfo.ARSaleOrderItemProductDesc = string.Join(", ", item.Where(o => !string.IsNullOrEmpty(o)).ToArray());
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
        }
        public decimal CalculatorSaleOrderItemFormulaPriceConfigQty(ARSaleOrderItemsInfo objSaleOrderItemsInfo)
        {
            decimal exchangeMToMM = 1000;
            ICProductFormulaPriceConfigsController objProductFormulaPriceConfigsController = new ICProductFormulaPriceConfigsController();
            ICProductFormulaPriceConfigsInfo objProductFormulaPriceConfigsInfo = (ICProductFormulaPriceConfigsInfo)objProductFormulaPriceConfigsController.GetObjectByID(objSaleOrderItemsInfo.FK_ICProductFormulaPriceConfigID);
            if (objProductFormulaPriceConfigsInfo == null)
                return objSaleOrderItemsInfo.ARSaleOrderItemProductQty;
            StringBuilder expression = new StringBuilder();
            expression.Append(objSaleOrderItemsInfo.ARSaleOrderItemProductQty.ToString("### ### ### ##0.0##"));
            if (!string.IsNullOrEmpty(objProductFormulaPriceConfigsInfo.ICProductFormulaPriceConfigLengthOperation)
                && objSaleOrderItemsInfo.ARSaleOrderItemLength > 0)
            {
                expression.Append(Operation[objProductFormulaPriceConfigsInfo.ICProductFormulaPriceConfigLengthOperation]);
                expression.Append((objSaleOrderItemsInfo.ARSaleOrderItemLength / exchangeMToMM).ToString("### ### ### ##0.0##"));
            }
            if (!string.IsNullOrEmpty(objProductFormulaPriceConfigsInfo.ICProductFormulaPriceConfigWidthOperation)
                && objSaleOrderItemsInfo.ARSaleOrderItemWidth > 0)
            {
                expression.Append(Operation[objProductFormulaPriceConfigsInfo.ICProductFormulaPriceConfigWidthOperation]);
                expression.Append((objSaleOrderItemsInfo.ARSaleOrderItemWidth / exchangeMToMM).ToString("### ### ### ##0.0##"));
            }
            if (!string.IsNullOrEmpty(objProductFormulaPriceConfigsInfo.ICProductFormulaPriceConfigHeightOperation)
                && objSaleOrderItemsInfo.ARSaleOrderItemHeight > 0)
            {
                expression.Append(Operation[objProductFormulaPriceConfigsInfo.ICProductFormulaPriceConfigHeightOperation]);
                expression.Append((objSaleOrderItemsInfo.ARSaleOrderItemHeight / exchangeMToMM).ToString("### ### ### ##0.0##"));
            }
            System.Data.DataTable execExpression = new System.Data.DataTable();

            string qtyString = (expression.Replace(',', '.').ToString()).Replace(" ", string.Empty).ToString();
            return Convert.ToDecimal(execExpression.Compute(qtyString, string.Empty));
        }

        public void ChangeMoreWoodType(string woodTypeIDs)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            if (entity.ARSaleOrderItemsList.CurrentIndex < 0)
                return;
            ARSaleOrderItemsInfo objSaleOrderItemsInfo = entity.ARSaleOrderItemsList[entity.ARSaleOrderItemsList.CurrentIndex];
            objSaleOrderItemsInfo.ARSaleOrderItemWoodTypeText = woodTypeIDs;
        }

        public string GetAttributeText(string productAttributeRefence)
        {
            ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
            List<ICProductAttributesInfo> productAttributeList = objProductAttributesController.GetProductAttributeByProductAttributeReferenceByCharater(productAttributeRefence, ",");
            if (productAttributeList == null)
                productAttributeList = new List<ICProductAttributesInfo>();
            return string.Join(", ", productAttributeList.Select(o => o.ICProductAttributeValue).ToArray());
        }

        public void ChangeOriginOfProduct()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            if (IsEditable())
            {
                ActionEdit();
            }

            if (entity.ARSaleOrderItemsList.CurrentIndex >= 0)
            {
                ARSaleOrderItemsInfo objSaleOrderItemsInfo = entity.ARSaleOrderItemsList[entity.ARSaleOrderItemsList.CurrentIndex];
                objSaleOrderItemsInfo.ARSaleOrderItemGrantedFrom = entity.GenerateDefaultGrantedFrom(objSaleOrderItemsInfo.ARSaleOrderItemOriginOfProduct);
                entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
            }
        }

        public void UpdateSaleOrderDiscountPerCentAllItem()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            if (IsEditable())
            {
                ActionEdit();
            }

            if (mainObject.ARSaleOrderDiscountPerCentAllItem > 100 || mainObject.ARSaleOrderDiscountPerCentAllItem < 0)
            {
                MessageBox.Show(SaleOrderLocalizedResources.ARSaleOrderDiscountPerCentAllItemError, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (entity.ARSaleOrderItemsList.Count > 0)
            {
                entity.ARSaleOrderItemsList.ForEach(o =>
                {
                    o.ARSaleOrderItemProductDiscount = mainObject.ARSaleOrderDiscountPerCentAllItem;
                    o.ARSaleOrderItemDiscountAmount = o.ARSaleOrderItemProductUnitPrice * o.ARSaleOrderItemProductDiscount * o.ARSaleOrderItemProductQty / 100;
                    o.ARSaleOrderItemTotalAmount = (o.ARSaleOrderItemProductUnitPrice * o.ARSaleOrderItemProductQty) - o.ARSaleOrderItemDiscountAmount;
                });
            }
            entity.UpdateTotalAmount(entity.ARSaleOrderItemsList);
            GeneratePaymentTime(mainObject.FK_GEPaymentTermID);
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
        }

        public void ActionEditAfterPayment()
        {
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                IsEditAfterPayment = true;
                objSaleOrdersInfo.OldObject = (ARSaleOrdersInfo)objSaleOrdersInfo.Clone();

                base.ActionEdit();

                SaleOrderItemsGridControl.LoadGridViewEditAfterPayment();

                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonSave, true);
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, false);

                LoadControls(true);
            }
        }

        public void LoadControls(bool value)
        {
            if (value)
            {
                ObjectAccessKeyLookupEditControl.Properties.ReadOnly = true;
                ARPaymentMethodComboLookupEditControl.Properties.ReadOnly = true;
                CSCompanyBankLookupEditControl.Properties.ReadOnly = true;
                GEPaymentTermLookupEditControl.Properties.ReadOnly = true;
                ARSaleOrderDiscountPerCentAllItemEditControl.Properties.ReadOnly = true;
                ARSaleOrderDiscountPerCentEditControl.Properties.ReadOnly = true;
                ARSaleOrderDiscountFixEditControl.Properties.ReadOnly = true;
                FK_ARPriceLevelIDLookupEditControl.Properties.ReadOnly = true;
                ARSaleOrderCustomerCommissionPercentEditControl.Properties.ReadOnly = true;
                ARSaleOrderSOCommissionAmountEditControl.Properties.ReadOnly = true;
                ARSaleOrderTaxAmountEditControl.Properties.ReadOnly = true;
                ARSaleOrderTaxPercentEditControl.Properties.ReadOnly = true;
                SaleOrderGECurrencyIDControl.Properties.ReadOnly = true;
            }
            else
            {
                ObjectAccessKeyLookupEditControl.Properties.ReadOnly = false;
                ARPaymentMethodComboLookupEditControl.Properties.ReadOnly = false;
                CSCompanyBankLookupEditControl.Properties.ReadOnly = false;
                GEPaymentTermLookupEditControl.Properties.ReadOnly = false;
                if (ARSaleOrderDiscountPerCentAllItemEditControl != null)
                    ARSaleOrderDiscountPerCentAllItemEditControl.Properties.ReadOnly = false;
                ARSaleOrderDiscountPerCentEditControl.Properties.ReadOnly = false;
                ARSaleOrderDiscountFixEditControl.Properties.ReadOnly = false;
                FK_ARPriceLevelIDLookupEditControl.Properties.ReadOnly = false;
                ARSaleOrderCustomerCommissionPercentEditControl.Properties.ReadOnly = false;
                ARSaleOrderSOCommissionAmountEditControl.Properties.ReadOnly = false;
                ARSaleOrderTaxAmountEditControl.Properties.ReadOnly = false;
                ARSaleOrderTaxPercentEditControl.Properties.ReadOnly = false;
                SaleOrderGECurrencyIDControl.Properties.ReadOnly = false;
            }
        }

        public bool CheckDiscountAmount()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;

            if (objSaleOrdersInfo.ARSaleOrderDiscountPerCent > 0 || objSaleOrdersInfo.ARSaleOrderDiscountFix > 0)
                return false;

            foreach (ARSaleOrderItemsInfo item in entity.ARSaleOrderItemsList)
            {
                if (item.ARSaleOrderItemProductDiscount > 0 || item.ARSaleOrderItemDiscountAmount > 0)
                    return false;

            }
            return true;
        }

        public bool CheckDiscountAmountSaleOrder()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;

            if (objSaleOrdersInfo.ARSaleOrderDiscountPerCent > 0 || objSaleOrdersInfo.ARSaleOrderDiscountFix > 0)
                return true;

            foreach (ARSaleOrderItemsInfo item in entity.ARSaleOrderItemsList)
            {
                if (item.ARSaleOrderItemProductDiscount > 0 || item.ARSaleOrderItemDiscountAmount > 0)
                    return false;
            }
            return true;
        }

        public void ChangePreDeliverySurvey(string preDeliverySurvey, bool isChecked)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainobject = (ARSaleOrdersInfo)entity.MainObject;
            if ((preDeliverySurvey == PreDeliverySurvey.PreDeliverySurveyTrue.ToString() && isChecked)
                || (preDeliverySurvey == PreDeliverySurvey.PreDeliverySurveyFalse.ToString() && !isChecked))
                mainobject.ARSaleOrderPreDeliverySurvey = true;
            else
                mainobject.ARSaleOrderPreDeliverySurvey = false;
            entity.UpdateMainObjectBindingSource();
        }

        public void ChangeSalesOrderDeliveryFloorType(string deliveryFloorType)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainobject = (ARSaleOrdersInfo)entity.MainObject;
            mainobject.ARSalesOrderDeliveryFloorType = deliveryFloorType;
            if (deliveryFloorType == SalesOrderDeliveryFloorType.Upstairs.ToString())
            {
                DeliveryFloorNumberControl.Properties.ReadOnly = false;
            }
            else
            {
                mainobject.ARSalesOrderDeliveryFloorNumber = 0;
                DeliveryFloorNumberControl.Properties.ReadOnly = true;
            }
            entity.UpdateMainObjectBindingSource();
        }

        public void SetRowNumberForPrintList(List<ARSaleOrderItemsInfo> saleOrderItemsList)
        {
            ICDepartmentsController objDepartmentsController = new ICDepartmentsController();
            ICDepartmentsInfo objDepartmentsInfo = new ICDepartmentsInfo();
            int departmentGroup = 0;
            int departmentItem = 0;
            string oldDepartmentName = string.Empty;
            saleOrderItemsList = saleOrderItemsList.OrderBy(x => x.FK_ICDepartmentID).ToList();
            saleOrderItemsList.ForEach(x =>
            {
                objDepartmentsInfo = (ICDepartmentsInfo)objDepartmentsController.GetObjectByID(x.FK_ICDepartmentID);
                x.ICDepartmentName = (objDepartmentsInfo != null) ? objDepartmentsInfo.ICDepartmentName : "";
                if (x.ICDepartmentName != oldDepartmentName)
                {
                    departmentGroup++;
                    departmentItem = 1;
                }
                oldDepartmentName = x.ICDepartmentName;
                x.ICDepartmentRowNumber = departmentGroup;
                x.ARSaleOrderItemRowNumberShowReport = string.Format("{0}.{1}", departmentGroup.ToString("n0"), departmentItem.ToString("n0"));
                departmentItem++;
            });
        }

        public void ChangeActualDeliveryDate(string actualDeliveryDate)
        {
            ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
            List<ARSaleOrdersInfo> SaleOrderList = objSaleOrdersController.GetAllSaleOrderByActualDeliveryDate(Convert.ToDateTime(actualDeliveryDate).ToString("yyyy/MM/dd"), BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            guiShowSaleOrderByActualDeliveryDate<ARSaleOrdersInfo> guiShow = new guiShowSaleOrderByActualDeliveryDate<ARSaleOrdersInfo>(SaleOrderList);
            guiShow.Module = this;
            guiShow.ShowDialog();
        }

        public void ChooseProspectCustomer()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;

            if (mainObject.FK_ACObjectID != 0)
            {
                return;
            }

            if (IsEditable())
            {
                ActionEdit();
            }
            ARProspectCustomersController objProspectCustomersController = new ARProspectCustomersController();
            List<ARProspectCustomersInfo> prospectCustomersList = (List<ARProspectCustomersInfo>)objProspectCustomersController.GetListFromDataSet(objProspectCustomersController.GetAllObjects());
            guiFind<ARProspectCustomersInfo> guiFind = new guiFind<ARProspectCustomersInfo>(TableName.ARProspectCustomersTableName,
                                                                                   prospectCustomersList, this, false);
            guiFind.Module = this;
            guiFind.ShowDialog();
            if (guiFind.DialogResult != DialogResult.OK)
                return;
            ARProspectCustomersInfo objProspectCustomersInfo = guiFind.SelectedObjects[0];
            if (objProspectCustomersInfo == null)
            {
                return;
            }
            entity.GenerateCustomerFromProspectCustomer(objProspectCustomersInfo);
            if (!string.IsNullOrEmpty(objProspectCustomersInfo.ARProspectCustomerLastName) && !string.IsNullOrEmpty(objProspectCustomersInfo.ARProspectCustomerFirstName))
            {
                mainObject.ARSaleOrderProspectCustomer = string.Format("{0}{1}{2}", objProspectCustomersInfo.ARProspectCustomerLastName, " ",
                                                                                    objProspectCustomersInfo.ARProspectCustomerFirstName);
            }
            else if (!string.IsNullOrEmpty(objProspectCustomersInfo.ARProspectCustomerCompany))
            {
                mainObject.ARSaleOrderProspectCustomer = objProspectCustomersInfo.ARProspectCustomerCompany;
            }
            if (mainObject.CustomersInfo != null)
            {
                mainObject.ARSaleOrderDeliveryContactName = mainObject.CustomersInfo.ARCustomerName;
                mainObject.ARSaleOrderDeliveryAddressLine3 = mainObject.CustomersInfo.ARCustomerDeliveryAddressLine1;
                mainObject.ARSaleOrderDeliveryAddressTel = mainObject.CustomersInfo.ARCustomerContactPhone;
            }
            entity.UpdateMainObjectBindingSource();
            DisplayLabelText(mainObject);
        }

        public string GetARCustomerNo()
        {
            GENumberingController objGENumberingController = new GENumberingController();
            GENumberingInfo objGENumberingInfo;
            objGENumberingInfo = objGENumberingController.GetGENumberingByNameAndBranchID(ModuleName.Customer, BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            string strMainObjectNo = string.Empty;
            if (objGENumberingInfo != null)
            {
                BOSDbUtil dbUtil = new BOSDbUtil();
                DateTime currentDate = BOSApp.GetCurrentServerDate();
                int numberStart = objGENumberingInfo.GENumberingStart;
                if (objGENumberingInfo.AAUpdatedDate.Year < currentDate.Year)
                {
                    numberStart = Convert.ToInt32(Math.Pow(10, objGENumberingInfo.GENumberingLength - 1)) + 1;
                }
                string prefix = objGENumberingInfo.GENumberingPrefix.Substring(0, objGENumberingInfo.GENumberingPrefix.Length - 1);
                strMainObjectNo = String.Format("{0}{1}-{2}",
                                                       prefix,
                                                       currentDate.Year.ToString().Substring(2, 2),
                                                       numberStart.ToString().PadLeft(objGENumberingInfo.GENumberingLength, '0'));
                objGENumberingInfo.GENumberingStart = objGENumberingInfo.GENumberingStart + 1;
                objGENumberingController.UpdateObject(objGENumberingInfo);
            }
            return strMainObjectNo;
        }

        public void CreateCustomer(ARCustomersInfo objCustomersInfo)
        {
            if (objCustomersInfo != null)
            {
                SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
                ARCustomersController objCustomersController = new ARCustomersController();
                ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
                string no = GetARCustomerNo();
                objCustomersInfo.ARCustomerNo = no;
                int customerID = objCustomersController.CreateObject(objCustomersInfo);
                //Create Opportunity BEGIN
                AROpportunitysController objOpportunitysController = new AROpportunitysController();
                AROpportunitysInfo objOpportunitysInfo = new AROpportunitysInfo();
                objOpportunitysInfo.AROpportunityCustomerName = objCustomersInfo.ARCustomerName;
                objOpportunitysInfo.FK_HREmployeeID = BOSApp.CurrentUsersInfo.FK_HREmployeeID;
                objOpportunitysInfo.AROpportunityExpectedValue = mainObject.ARSaleOrderTotalAmount;
                objOpportunitysInfo.AROpportunityName = mainObject.ARSaleOrderName;
                objOpportunitysInfo.FK_ARCustomerID = customerID;
                objOpportunitysInfo.AROpportunityStep = "Success";
                int opportunityID = objOpportunitysController.CreateObject(objOpportunitysInfo);
                mainObject.FK_AROpportunityID = opportunityID;
                //END
                ARProspectCustomersController objProspectCustomersController = new ARProspectCustomersController();
                objProspectCustomersController.DeleteObject(objCustomersInfo.FK_ARProspectCustomerID);
                mainObject.FK_ACObjectID = customerID;
                mainObject.ARObjectType = ObjectType.Customer.ToString();
                mainObject.ACObjectAccessKey = string.Format("{0};{1}", mainObject.FK_ACObjectID, mainObject.ARObjectType);
                objSaleOrdersController.UpdateObject(mainObject);
                ACObjectsController objObjectsController = new ACObjectsController();
                ACObjectLookupEdit.Properties.DataSource = objObjectsController.GetAllObjects();
            }
        }

        public void ActionClosed()
        {
            if (MessageBox.Show("Bạn có chắc chắn muốn đóng đơn hàng ?", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel)
                return;
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            mainObject.ARSaleOrderStatus = SaleOrderStatus.Closed.ToString();
            entity.SaveMainObject();
            ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
            objSaleOrdersController.UpdateInventoryStocks(mainObject.ARSaleOrderID);
            //GLHelper.UnPostedTransactions(this.Name, mainObject.ARSaleOrderID, ModulePostingType.SaleOrder, ModulePostingType.Allocation);
            InvalidateToolbar();
        }

        public void AddSaleOrderTemplate()
        {
            BOSTextBox filePathTextBox = (BOSTextBox)Controls[SaleOrderModule.FilePathTextBoxName];
            BOSTextBox fileNameTextBox = (BOSTextBox)Controls[SaleOrderModule.FileNameTextBoxName];
            if (string.IsNullOrEmpty(filePathTextBox.Text))
                return;
            if (string.IsNullOrEmpty(fileNameTextBox.Text))
                return;
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrderInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            if (entity.SaleOrderTemplatesList.Exists(o => o.ARSaleOrderTemplateName.Equals(fileNameTextBox.Text)))
            {
                MessageBox.Show(SaleOrderLocalizedResources.DuplicateFileName,
                                CommonLocalizedResources.MessageBoxDefaultCaption,
                                MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            HREmployeesController objEmployeesController = new HREmployeesController();
            ARSaleOrderTemplatesInfo objSaleOrderTemplatesInfo = new ARSaleOrderTemplatesInfo();
            objSaleOrderTemplatesInfo.ARSaleOrderTemplateName = fileNameTextBox.Text.Trim();
            objSaleOrderTemplatesInfo.FK_ARSaleOrderID = objSaleOrderInfo.ARSaleOrderID;
            objSaleOrderTemplatesInfo.AACreatedUser = BOSApp.CurrentUser;
            objSaleOrderTemplatesInfo.UserCreatedFullname = objEmployeesController.GetObjectNameByID(BOSApp.CurrentUsersInfo.FK_HREmployeeID);
            objSaleOrderTemplatesInfo.ARSaleOrderTemplateFileGUID = filePathTextBox.Text;
            objSaleOrderTemplatesInfo.FullPathFile = filePathTextBox.Text.Trim();
            entity.SaleOrderTemplatesList.Add(objSaleOrderTemplatesInfo);
            entity.SaleOrderTemplatesList.GridControl?.RefreshDataSource();
        }

        public void RemoveSaleOrderTemplateList()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            entity.SaleOrderTemplatesList.RemoveSelectedRowObjectFromList();
            entity.SaleOrderTemplatesList.GridControl?.RefreshDataSource();
        }

        public void DownloadDocument()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrderTemplatesInfo objSaleOrderTemplatesInfo = entity.SaleOrderTemplatesList[entity.SaleOrderTemplatesList.CurrentIndex];
            if (objSaleOrderTemplatesInfo == null)
                return;

            //if (string.IsNullOrEmpty(objSaleOrderTemplatesInfo.ARSaleOrderTemplateFileGUID))
            //{
            //    MessageBox.Show(SaleOrderLocalizedResources.FileNotFoundErrorMessage,
            //                    CommonLocalizedResources.MessageBoxDefaultCaption,
            //                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            //    return;
            //}
            //ApiClientHelper.DownloadFile(objSaleOrderTemplatesInfo.ARSaleOrderTemplateFileGUID, objSaleOrderTemplatesInfo.ARSaleOrderTemplateName);
            string url = objSaleOrderTemplatesInfo.ARSaleOrderTemplateFileGUID;
            string extension = "";
            string substring = "";
            string driveID = "";
            int closingindex;
            int index = url.IndexOf("/d/");
            if (index >= 0)
            {
                index += 3;
                closingindex = url.IndexOf('/', index);
                driveID = url.Substring(index, closingindex - index);
            }    
            if (url.Contains("file"))
            {
                url = String.Format("https://drive.google.com/uc?export=download&id={0}", driveID);
                //url = url.Replace("https://drive.google.com/file/d/", "https://drive.google.com/uc?export=download&id=").Replace("/view?usp=sharing", "");
                extension = ".pdf";
            }
            else if (url.Contains("document"))
            {
                url = String.Format("https://docs.google.com/uc?export=download&id={0}", driveID);
                //url = url.Replace("https://docs.google.com/document/d/", "https://docs.google.com/uc?export=download&id=");
                extension = ".docx";
            }
            else if (url.Contains("spreadsheets"))
            {
                url = String.Format("https://docs.google.com/spreadsheets/d/{0}/export?gid=0&format=xlsx", driveID);
                //url = url.Replace("edit?usp=sharing", "export?&format=xlsx");
                extension = ".xlsx"; 
            }    
            //if (url.Contains("edit"))
            //{
            //    int edit = url.IndexOf("edit");
            //    substring = url.Substring(edit - 1, (url.Length - edit + 1));
            //}
            //url = url.Replace(substring, "");
            try 
            {
                WebClient client = new WebClient();
                client.DownloadFile(url, String.Format(System.Windows.Forms.Application.StartupPath + @"\Document\\{0}{1}", objSaleOrderTemplatesInfo.ARSaleOrderTemplateName,extension));
                MessageBox.Show(String.Format("Download thành công! Vui lòng vào thư mục {0} để xem tài liệu", System.Windows.Forms.Application.StartupPath + @"\Document")
                                                    , CommonLocalizedResources.MessageBoxDefaultCaption
                                                    , MessageBoxButtons.OK
                                                    , MessageBoxIcon.Information);
            }
            catch
            {
                MessageBox.Show(String.Format("Download không thành công, vui lòng kiểm tra lại")
                                                    , CommonLocalizedResources.MessageBoxDefaultCaption
                                                    , MessageBoxButtons.OK
                                                    , MessageBoxIcon.Error);
            }
            //HttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create(url);
            //string fileName = "";
            //string destinationPath = System.Windows.Forms.Application.StartupPath + @"\Document";
            //using (HttpWebResponse response = (HttpWebResponse)request.GetResponseAsync().Result)
            //{
            //    string path = response.Headers["Content-Disposition"];
            //    if (string.IsNullOrWhiteSpace(path))
            //    {
            //        var uri = new Uri(url);
            //        fileName = Path.GetFileName(uri.LocalPath);
            //    }
            //    else
            //    {
            //        ContentDisposition contentDisposition = new ContentDisposition(path);
            //        fileName = contentDisposition.FileName;
            //    }
            //    var responseStream = response.GetResponseStream();
            //    using (var fileStream = File.Create(System.IO.Path.Combine(destinationPath, fileName)))
            //    {
            //        responseStream.CopyTo(fileStream);
            //    }
            //}
        }

        public void PrintDeposit()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            if (entity.DocumentPaymentList.CurrentIndex >= 0)
            {
                RPDeposit report = new RPDeposit();
                BRBranchsController objBranchsController = new BRBranchsController();
                BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);
                if (objBranchsInfo != null)
                {
                    XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchAddressLine3"];
                    if (label != null)
                    {
                        label.Text = objBranchsInfo.BRBranchContactAddressLine3;
                    }

                    label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchPhone"];
                    if (label != null)
                    {
                        label.Text = objBranchsInfo.BRBranchContactPhone;
                    }

                    label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchFax"];
                    if (label != null)
                    {
                        label.Text = objBranchsInfo.BRBranchContactFax;
                    }
                }

                ADReportsController objReportsController = new ADReportsController();
                ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
                ARDocumentPaymentsInfo objDocumentPaymentsInfo = (ARDocumentPaymentsInfo)entity.ModuleObjects[TableName.ARDocumentPaymentsTableName];
                ARCustomerPaymentsInfo deposit = objReportsController.GetDepositByID(objDocumentPaymentsInfo.FK_ARCustomerPaymentID);
                if (deposit != null)
                {
                    List<ARCustomerPaymentsInfo> deposits = new List<ARCustomerPaymentsInfo>();
                    deposits.Add(deposit);
                    report.DataSource = deposits;
                    XRLabel paymentDetailsLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblPaymentDetails"];
                    if (paymentDetailsLabel != null)
                    {
                        ARCustomerPaymentsController objCustomerPaymentsController = new ARCustomerPaymentsController();
                        List<ARCustomerPaymentDetailsInfo> paymentDetails = objCustomerPaymentsController.GetPaymentDetails(objDocumentPaymentsInfo.FK_ARCustomerPaymentID);
                        paymentDetailsLabel.Text = GetPaymentDetailDesc(paymentDetails);
                    }
                    guiReportPreview reviewer = new guiReportPreview(report, BOSCommon.Constants.Report.DevDepositReportPath, true);
                    reviewer.Show();
                }
            }
        }

        public void ShowAttachFile()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            if (entity.ARSaleOrderPaymentTimesList.CurrentIndex < 0)
                return;

            ARSaleOrderPaymentTimesInfo objSaleOrderPaymentTimesInfo = entity.ARSaleOrderPaymentTimesList[entity.ARSaleOrderPaymentTimesList.CurrentIndex];
            if (objSaleOrderPaymentTimesInfo.PaymentTimeTemplateList == null)
            {
                objSaleOrderPaymentTimesInfo.PaymentTimeTemplateList = new BOSList<ARSaleOrderPaymentTimeTemplatesInfo>();
                objSaleOrderPaymentTimesInfo.PaymentTimeTemplateList.InitBOSList(entity,
                                                                                 TableName.ARSaleOrderPaymentTimesTableName,
                                                                                 TableName.ARSaleOrderPaymentTimeTemplatesTableName,
                                                                                 BOSList<ARSaleOrderPaymentTimeTemplatesInfo>.cstRelationParent);
            }
            ARSaleOrderPaymentTimeTemplatesController objSaleOrderPaymentTimeTemplatesController = new ARSaleOrderPaymentTimeTemplatesController();
            List<ARSaleOrderPaymentTimeTemplatesInfo> paymentTimeTemplateList = new List<ARSaleOrderPaymentTimeTemplatesInfo>();
            paymentTimeTemplateList = objSaleOrderPaymentTimesInfo.PaymentTimeTemplateList.ToList();
            List<ARSaleOrderPaymentTimeTemplatesInfo> paymentTimeBackupTemplateList = objSaleOrderPaymentTimesInfo.PaymentTimeTemplateList.Select(o => (ARSaleOrderPaymentTimeTemplatesInfo)o.Clone()).ToList();
            if (objSaleOrderPaymentTimesInfo.PaymentTimeTemplateList.Count() == 0)
            {
                paymentTimeTemplateList = objSaleOrderPaymentTimeTemplatesController.GetTemplateByPaymentTimeID(objSaleOrderPaymentTimesInfo.ARSaleOrderPaymentTimeID);
            }
            guiAttachFile guiFind = new guiAttachFile(paymentTimeTemplateList);
            guiFind.Module = this;
            guiFind.ShowDialog();
            if (guiFind.DialogResult != DialogResult.OK)
                return;

            objSaleOrderPaymentTimesInfo.PaymentTimeTemplateList.Invalidate(guiFind.PaymentTimeTemplates);
        }

        //public void AddCommissions()
        //{
        //    SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
        //    ARSaleOrdersInfo mainobject = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
        //    decimal sumTotalCommission = entity.SaleCommissionsList.Sum(o => o.ARCommissionAmount);
        //    if (sumTotalCommission > mainobject.ARSaleOrderSOCommissionAmount)
        //    {
        //        MessageBox.Show(SaleOrderLocalizedResources.CommissionTotalAmountInvalid,
        //                        CommonLocalizedResources.MessageBoxDefaultCaption,
        //                        MessageBoxButtons.OK, MessageBoxIcon.Error);
        //        return;
        //    }
        //    ARCommissionsInfo moduleObjects = (ARCommissionsInfo)entity.ModuleObjects[TableName.ARCommissionsTableName];
        //    if (moduleObjects == null)
        //        moduleObjects = new ARCommissionsInfo();

        //    GEPaymentTermItemsController objPaymentTermItemsController = new GEPaymentTermItemsController();
        //    List<GEPaymentTermItemsInfo> paymentTermItems = objPaymentTermItemsController.GetListItemByPaymentTermID(mainobject.FK_GEPaymentTermID);
        //    ARCommissionsInfo objCommissionsInfo = new ARCommissionsInfo();
        //    ACObjectsController objObjectsController = new ACObjectsController();
        //    ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByAccessKey(moduleObjects.ACObjectAccessKey);
        //    objObjectsInfo = objObjectsController.GetObjectByIDAndType(objObjectsInfo.ACObjectID, objObjectsInfo.ACObjectType);
        //    if (objObjectsInfo == null)
        //        objObjectsInfo = new ACObjectsInfo();

        //    paymentTermItems.ForEach(o =>
        //    {
        //        objCommissionsInfo = new ARCommissionsInfo();
        //        BOSUtil.CopyObject(moduleObjects, objCommissionsInfo);
        //        objCommissionsInfo.FK_ACObjectID = objObjectsInfo.ACObjectID;
        //        objCommissionsInfo.ARObjectType = objObjectsInfo.ACObjectType;
        //        objCommissionsInfo.ACObjectName = objObjectsInfo.ACObjectName;
        //        objCommissionsInfo.ACObjectNo = objObjectsInfo.ACObjectNo;
        //        objCommissionsInfo.ARCommissionPercent = o.GEPaymentTermItemPercentPayment;
        //        objCommissionsInfo.ARCommissionAmount = mainobject.ARSaleOrderTotalAmount * (objCommissionsInfo.ARCommissionRate / 100) * (objCommissionsInfo.ARCommissionPercent / 100);
        //        objCommissionsInfo.ARCommissionAmount = Math.Round(objCommissionsInfo.ARCommissionAmount, 2, MidpointRounding.AwayFromZero);
        //        entity.SaleCommissionsList.Add(objCommissionsInfo);
        //    });
        //    entity.SaleCommissionsList.GridControl?.RefreshDataSource();
        //}

        public void AddCommissions()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainobject = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;

            ARCommissionsInfo moduleObjects = (ARCommissionsInfo)entity.ModuleObjects[TableName.ARCommissionsTableName];
            if (moduleObjects == null)
                moduleObjects = new ARCommissionsInfo();

            decimal sumTotalCommission = entity.SaleCommissionsList.Sum(o => o.ARCommissionAmount) + mainobject.ARSaleOrderSOCommissionAmount * moduleObjects.ARCommissionRate / 100;
            if (sumTotalCommission > mainobject.ARSaleOrderSOCommissionAmount)
            {
                MessageBox.Show(SaleOrderLocalizedResources.CommissionTotalAmountInvalid,
                                CommonLocalizedResources.MessageBoxDefaultCaption,
                                MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByAccessKey(moduleObjects.ACObjectAccessKey);
            objObjectsInfo = objObjectsController.GetObjectByIDAndType(objObjectsInfo.ACObjectID, objObjectsInfo.ACObjectType);
            if (objObjectsInfo == null)
                objObjectsInfo = new ACObjectsInfo();

            if (entity.SaleCommissionsList.Exists(p => p.FK_ACObjectID == objObjectsInfo.ACObjectID && p.ARObjectType == objObjectsInfo.ACObjectType))
            {
                MessageBox.Show(SaleOrderLocalizedResources.CommissionIsExisted,
                                CommonLocalizedResources.MessageBoxDefaultCaption,
                                MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            ARCommissionsInfo objCommissionsInfo = new ARCommissionsInfo();
            BOSUtil.CopyObject(moduleObjects, objCommissionsInfo);
            objCommissionsInfo.FK_ACObjectID = objObjectsInfo.ACObjectID;
            objCommissionsInfo.ARObjectType = objObjectsInfo.ACObjectType;
            objCommissionsInfo.ACObjectName = objObjectsInfo.ACObjectName;
            objCommissionsInfo.ACObjectNo = objObjectsInfo.ACObjectNo;
            objCommissionsInfo.ARCommissionPercent = objCommissionsInfo.ARCommissionRate;
            objCommissionsInfo.ARCommissionAmount = mainobject.ARSaleOrderSOCommissionAmount * objCommissionsInfo.ARCommissionRate / 100;
            objCommissionsInfo.ARCommissionAmount = Math.Round(objCommissionsInfo.ARCommissionAmount, 2, MidpointRounding.AwayFromZero);
            objCommissionsInfo.ARCommissionDesc = String.Empty;
            entity.SaleCommissionsList.Add(objCommissionsInfo);

            entity.SaleCommissionsList.GridControl?.RefreshDataSource();
        }

        public void UpdateCommissionsBelongPaymentTerm(int paymentTermID)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainobject = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            List<ARCommissionsInfo> tempSaleCommissionsList = (List<ARCommissionsInfo>)entity.SaleCommissionsList.Clone();
            List<TempCommissionInfo> tempCommissionList = new List<TempCommissionInfo>();
            try
            {
                entity.SaleCommissionsList.DistinctBy(o => new { o.FK_ACObjectID, o.ARObjectType }).ToList().ForEach(o =>
                {
                    TempCommissionInfo objTempCommissionInfo = new TempCommissionInfo();
                    objTempCommissionInfo.FK_ACObjectID = o.FK_ACObjectID;
                    objTempCommissionInfo.ARObjectType = o.ARObjectType;
                    objTempCommissionInfo.ARCommissionRate = o.ARCommissionRate;
                    objTempCommissionInfo.ACObjectName = o.ACObjectName;
                    objTempCommissionInfo.ACObjectNo = o.ACObjectNo;
                    tempCommissionList.Add(objTempCommissionInfo);
                });
                entity.SaleCommissionsList.Clear();
                GEPaymentTermItemsController objPaymentTermItemsController = new GEPaymentTermItemsController();
                List<GEPaymentTermItemsInfo> paymentTermItems = objPaymentTermItemsController.GetListItemByPaymentTermID(paymentTermID);

                tempCommissionList.ForEach(p =>
                    {
                        paymentTermItems.ForEach(o =>
                        {
                            ARCommissionsInfo objCommissionsInfo = new ARCommissionsInfo();
                            objCommissionsInfo.FK_ACObjectID = p.FK_ACObjectID;
                            objCommissionsInfo.ARObjectType = p.ARObjectType;
                            objCommissionsInfo.ACObjectName = p.ACObjectName;
                            objCommissionsInfo.ACObjectNo = p.ACObjectNo;
                            objCommissionsInfo.ARCommissionRate = p.ARCommissionRate;
                            objCommissionsInfo.ARCommissionPercent = o.GEPaymentTermItemPercentPayment;
                            objCommissionsInfo.ARCommissionAmount = mainobject.ARSaleOrderTotalAmount * (p.ARCommissionRate / 100) * (objCommissionsInfo.ARCommissionPercent / 100);
                            objCommissionsInfo.ARCommissionAmount = Math.Round(objCommissionsInfo.ARCommissionAmount, 2, MidpointRounding.AwayFromZero);
                            entity.SaleCommissionsList.Add(objCommissionsInfo);
                        });
                    });
            }
            catch (Exception ex)
            {
                entity.SaleCommissionsList.Invalidate(tempSaleCommissionsList);
            }
            entity.SaleCommissionsList.GridControl?.RefreshDataSource();
        }

        public void UpdateCommissions()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainobject = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            entity.SaleCommissionsList.ForEach(o =>
            {
                o.ARCommissionAmount = mainobject.ARSaleOrderSOCommissionAmount * o.ARCommissionPercent / 100;
                BOSApp.RoundByCurrency(o, mainobject.FK_GECurrencyID);
            });
            entity.SaleCommissionsList.GridControl?.RefreshDataSource();
            
        }

        public void DeleteItemFromSaleCommissions()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainobject = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            entity.SaleCommissionsList.RemoveSelectedRowObjectFromList();
        }

        public void ChangeDeliveryMethod(int deliveryMethodID)
        {
            if (Toolbar.IsNullOrNoneAction())
                return;
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainobject = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            ARDeliveryMethodsController objDeliveryMethodsController = new ARDeliveryMethodsController();
            ARDeliveryMethodsInfo objDeliveryMethodsInfo = (ARDeliveryMethodsInfo)objDeliveryMethodsController.GetObjectByID(deliveryMethodID);
            if (objDeliveryMethodsInfo == null)
                return;
            mainobject.ARSaleOrderIsDeliveryPlan = objDeliveryMethodsInfo.ARDeliveryMethodIsDeliveryPlan;
            mainobject.ARSaleOrderIsSaleOrderShipment = objDeliveryMethodsInfo.ARDeliveryMethodIsSaleOrderShipment;
            mainobject.ARSaleOrderIsInvoiceAndShipment = objDeliveryMethodsInfo.ARDeliveryMethodIsInvoiceAndShipment;
            mainobject.ARSaleOrderIsVehicleAllocation = objDeliveryMethodsInfo.ARDeliveryMethodIsVehicleAllocation;
            mainobject.ARSaleOrderIsAcceptance = objDeliveryMethodsInfo.ARDeliveryMethodIsAcceptance;
            mainobject.ARSaleOrderIsContainerLoader = objDeliveryMethodsInfo.ARDeliveryMethodIsContainerLoader;
            entity.UpdateMainObjectBindingSource();
            ChangeItemBelongDeliveryMethod();
        }

        public void CheckPromotionItem()
        {
            if (Toolbar.IsNullOrNoneAction())
                return;
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrderItemsInfo objSaleOrderItemsInfo = entity.ARSaleOrderItemsList[entity.ARSaleOrderItemsList.CurrentIndex];
            if (objSaleOrderItemsInfo.ARSaleOrderItemIsPromotionProduct)
            {
                objSaleOrderItemsInfo.ICProductUnitPrice = 0;
                objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice = 0;
                objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount = 0;
            }
            else
            {
                ICProductsController objProductsController = new ICProductsController();
                ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(objSaleOrderItemsInfo.FK_ICProductID);
                if (objProductsInfo == null)
                    return;
                objSaleOrderItemsInfo.ICProductUnitPrice = objProductsInfo.ICProductPrice01;
                objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice = objProductsInfo.ICProductPrice01;
            }
            ChangeItemFromSaleOrderItemsList();
            UpdatePaymentTime();
        }

        public void ActionNewFromReturnShipping()
        {
            ActionNew();
            HyperLinkEditChooseProspectCustomer.Visible = false;
            ObjectAccessKeyLookupEditControl.Properties.ReadOnly = true;
            ChangeDataSourceDocumentTypeLookup(false);
            if (ProductLookupControl != null)
            {
                ProductLookupControl.Properties.DataSource = LoadProductList();
            }
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            ICReceiptsController objReceiptsController = new ICReceiptsController();
            List<ICReceiptsInfo> returnShippingList = objReceiptsController.GetALlReturnShippingForSaleOrder();
            guiFind<ICReceiptsInfo> guiFind = new guiFind<ICReceiptsInfo>("ICReceipts", returnShippingList, this, true, true, new string[] { "FK_ARSaleOrderID" });
            guiFind.ShowDialog();
            if (guiFind.DialogResult == DialogResult.OK)
            {
                List<int> saleOrderIDs = ((List<ICReceiptsInfo>)guiFind.SelectedObjects).Select(o => o.FK_ARSaleOrderID).Distinct().ToList();
                if (saleOrderIDs.Count > 1)
                {
                    DialogResult dr = MessageBox.Show(SaleOrderLocalizedResources.PleaseChooseSameSaleOrder, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    if (dr == DialogResult.OK)
                    {
                        ActionCancel();
                        return;
                    }
                }
                List<ICReceiptsInfo> receipts = (List<ICReceiptsInfo>)guiFind.SelectedObjects;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)guiFind.SelectedObjects[0];
                if (objReceiptsInfo != null)
                {
                    ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
                    ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)objSaleOrdersController.GetObjectByID(objReceiptsInfo.FK_ARSaleOrderID);
                    if (objSaleOrdersInfo != null)
                    {
                        BOSUtil.CopyObject(objSaleOrdersInfo, mainObject);
                        mainObject.ACObjectAccessKey = string.Format("{0};{1}", objSaleOrdersInfo.FK_ACObjectID.ToString(), objSaleOrdersInfo.ARObjectType);
                        mainObject.ARSaleOrderNo = ERPModuleEntities.cstNewObjectText;
                        mainObject.ARSaleOrderType = SaleOrderType.AnnexContract.ToString();
                        mainObject.ARSaleOrderStatus = SaleOrderStatus.New.ToString();
                        mainObject.ARSaleOrderDocumentType = SaleOrderDocumentType.Annex.ToString();
                        mainObject.ARSaleOrderID = 0;
                        mainObject.ARSaleOrderBatchStatus = string.Empty;
                        mainObject.ARSaleOrderParentID = objSaleOrdersInfo.ARSaleOrderID;
                        mainObject.ARSaleOrderSubTotalAmount = 0;
                        mainObject.ARSaleOrderTotalCost = 0;
                        mainObject.ARSaleOrderDiscountPerCent = 0;
                        mainObject.ARSaleOrderDiscountFix = 0;
                        mainObject.ARSaleOrderSOCommissionPercent = 0;
                        mainObject.ARSaleOrderSOCommissionAmount = 0;
                        mainObject.ARSaleOrderTaxPercent = 0;
                        mainObject.ARSaleOrderTaxAmount = 0;
                        mainObject.ARSaleOrderTotalAmount = 0;
                        mainObject.ARSaleOrderDepositBalance = 0;
                        mainObject.ARSaleOrderBalanceDue = 0;
                    }
                    ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
                    List<ICReceiptItemsInfo> returnShippings = new List<ICReceiptItemsInfo>();
                    receipts.ForEach(o =>
                        {
                            returnShippings = objReceiptItemsController.GetItemsByReceiptID(o.ICReceiptID);
                            if (returnShippingList.Count == 0)
                                return;
                            returnShippings.ForEach(p =>
                                {
                                    if (p.ICReceiptItemReturnShippingType == ReturnShippingType.ReplaceDifferenceProduct.ToString())
                                        AddProductToSaleOrderItemList(p.FK_ICReplaceProductID);
                                    if (p.ICReceiptItemReturnShippingType == ReturnShippingType.ReplaceSameProduct.ToString())
                                        AddReceiptItemToSaleOrderItemList(p);
                                });
                        });

                    ARCommissionsController objCommissionsController = new ARCommissionsController();
                    DataSet ds = objCommissionsController.GetDataByCustomerID(objSaleOrdersInfo.FK_ARCustomerID);
                    entity.SaleCommissionsList.Invalidate(ds);
                    GeneratePaymentTime(objSaleOrdersInfo.FK_GEPaymentTermID);
                    ChangeItemBelongDeliveryMethod();
                }
                ChangeDisplayAndDataItemListGridView();
            }
            else
            {
                ActionCancel();
            }
        }

        public void AddProductToSaleOrderItemList(int productID)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ICProductsController objProductsController = new ICProductsController();
            GEVATsController objVATsController = new GEVATsController();
            ICProductsInfo product = (ICProductsInfo)objProductsController.GetObjectByID(productID);
            ARSaleOrderItemsInfo objSaleOrderItemsInfo = new ARSaleOrderItemsInfo();
            objSaleOrderItemsInfo = ToSaleOrderItemsInfo(product);
            entity.ARSaleOrderItemsList.Add(objSaleOrderItemsInfo);
            entity.UpdateTotalAmount(entity.ARSaleOrderItemsList);
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
        }

        public void AddReceiptItemToSaleOrderItemList(ICReceiptItemsInfo objReceiptItemsInfo)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrderItemsInfo objSaleOrderItemsInfo = new ARSaleOrderItemsInfo();
            objSaleOrderItemsInfo = ToSaleOrderItemsInfoFromReceiptItem(objReceiptItemsInfo);
            entity.ARSaleOrderItemsList.Add(objSaleOrderItemsInfo);
            entity.UpdateTotalAmount(entity.ARSaleOrderItemsList);
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
        }

        public ARSaleOrderItemsInfo ToSaleOrderItemsInfoFromReceiptItem(ICReceiptItemsInfo objReceiptItemsInfo)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainobject = (ARSaleOrdersInfo)entity.MainObject;
            ARSaleOrderItemsInfo objSaleOrderItemsInfo = new ARSaleOrderItemsInfo
            {
                FK_ICProductID = objReceiptItemsInfo.FK_ICProductID,
            };
            objSaleOrderItemsInfo.ARSaleOrderItemRemainedQty = objSaleOrderItemsInfo.ARSaleOrderItemProductQty;
            entity.SetValuesAfterValidateProduct(objSaleOrderItemsInfo.FK_ICProductID, objSaleOrderItemsInfo);
            objSaleOrderItemsInfo.ARSaleOrderItemProductQty = objReceiptItemsInfo.ICReceiptItemProductQty;
            objSaleOrderItemsInfo.ARSaleOrderItemProductDiscount = objReceiptItemsInfo.ICReceiptItemProductDiscount;
            objSaleOrderItemsInfo.ARSaleOrderItemProductTaxPercent = objReceiptItemsInfo.ICReceiptItemProductTaxPercent;
            entity.SetProductPriceByProductUnitPrice(objSaleOrderItemsInfo);
            objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice = objReceiptItemsInfo.ICReceiptItemProductUnitCost;
            objSaleOrderItemsInfo.ICProductUnitPrice = objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice;
            objSaleOrderItemsInfo.FK_ICStockID = objReceiptItemsInfo.FK_ICStockID;
            objSaleOrderItemsInfo.ARSaleOrderItemProductSerialNo = objReceiptItemsInfo.ICReceiptItemProductSerialNo;
            objSaleOrderItemsInfo.ARSaleOrderItemLotNo = objReceiptItemsInfo.ICReceiptItemLotNo;
            objSaleOrderItemsInfo.ARSaleOrderItemVirtualID = Guid.NewGuid().ToString();
            return objSaleOrderItemsInfo;
        }

        public List<ICProductsInfo> GetAllSectionProductForLookUp()
        {
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            ICProductsController objProductsController = new ICProductsController();
            List<ICProductsInfo> sectionProductList = objProductsController.GetSectionProductByTemplateID(mainObject.FK_PMTemplateID);
            return sectionProductList;
        }

        public List<PMProjectsInfo> GetProjectByObjectID()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByAccessKey(mainObject.ACObjectAccessKey);
            if (objObjectsInfo == null)
                return null;
            PMProjectsController objProjectsController = new PMProjectsController();
            return objProjectsController.GetAllProjectForLookupByAcobjectIDAndType(objObjectsInfo.ACObjectID, objObjectsInfo.ACObjectType);
        }

        public List<ARSaleContractsInfo> GetSaleContractByObjectIDAnProjectID()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByAccessKey(mainObject.ACObjectAccessKey);
            if (objObjectsInfo == null)
                return null;

            ARSaleContractsController controller = new ARSaleContractsController();
            return controller.GetSaleContractByObjectIDAnProjectID(objObjectsInfo.ACObjectID, objObjectsInfo.ACObjectType, mainObject.FK_PMProjectID);
        }

        public void ChangeCostCenter(int costCenterID)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            entity.ARSaleOrderItemsList.ForEach(o => o.FK_ACCostCenterID = costCenterID);
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
        }

        public override void ActionDuplicate()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            if (mainObject.STToolbarActionName.Equals("NewFromProposal")
                || mainObject.STToolbarActionName.Equals("NewFromSaleForecastNew"))
            {
                MessageBox.Show("Không thể tạo bản sảo cho chứng từ tạo mới từ Thành phẩm / Bán thành phẩm!",
                                    CommonLocalizedResources.MessageBoxDefaultCaption,
                                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            base.ActionDuplicate();

            mainObject.ARSaleOrderStatus = SaleOrderStatus.New.ToString();
            mainObject.FK_HREmployeeID = BOSApp.CurrentUsersInfo.FK_HREmployeeID;
            mainObject.AAUpdatedDate = DateTime.MaxValue;
            mainObject.AAUpdatedUser = String.Empty;
            mainObject.ARSaleOrderDepositBalance = 0;
            mainObject.FK_HREmployeeCompletedID = 0;
            ToolbarNewActionName = mainObject.STToolbarActionName;
            entity.UpdateMainObjectBindingSource();

            entity.ARSaleOrderPaymentTimesList.Duplicate();
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemWorkList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemCostList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemWorkTaskList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemWorkAssetList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemWorkMaterialList.GridControl?.RefreshDataSource();
            entity.ARSaleOrderItemWorkTaskList.GridControl?.RefreshDataSource();
            GeneratePaymentTime(mainObject.FK_GEPaymentTermID);
        }

        public void ShowTemplateItemTree()
        {
            //SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            //ARSaleOrdersInfo mainobject = (ARSaleOrdersInfo)entity.MainObject;
            //if (mainobject.FK_PMTemplateID == 0)
            //{
            //    MessageBox.Show(ProposalLocalizedResources.TemplateIsRequirer, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            //    return;
            //}
            //ARSaleOrderItemsInfo objSaleOrderItemsInfo = (ARSaleOrderItemsInfo)entity.ARSaleOrderItemsList[entity.ARSaleOrderItemsList.CurrentIndex];
            //if (objSaleOrderItemsInfo == null)
            //    return;

            //guiShowTemplateItems guiShowTemplateItems = new guiShowTemplateItems();
            //guiShowTemplateItems.PMTemplateID = mainobject.FK_PMTemplateID;
            //guiShowTemplateItems.PMTemplateItemID = objSaleOrderItemsInfo.FK_PMTemplateItemID;
            //guiShowTemplateItems.PMTemplateItemProductName = objSaleOrderItemsInfo.PMTemplateItemProductName;
            //guiShowTemplateItems.Module = this;
            //DialogResult rs = guiShowTemplateItems.ShowDialog();
            //if (rs != DialogResult.OK)
            //    return;

            //objSaleOrderItemsInfo.FK_PMTemplateItemID = guiShowTemplateItems.PMTemplateItemID;
            //objSaleOrderItemsInfo.PMTemplateItemProductName = guiShowTemplateItems.PMTemplateItemProductName;

            //if (entity.ARSaleOrderItemsList.GridControl != null)
            //{
            //    entity.ARSaleOrderItemsList.EndCurrentEdit();
            //    entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
            //}
        }
        public bool ValidateDeliveryMethod()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ICProductsController objProductsController = new ICProductsController();
            foreach (ARSaleOrderItemsInfo item in entity.ARSaleOrderItemsList)
            {
                ICProductsInfo objProductsInfo = BOSApp.GetProductFromCurrentProductList(item.FK_ICProductID);
                if (objProductsInfo != null && !objProductsInfo.ICProductIsFollowInventoryStock && !objProductsInfo.HasComponent)
                    if (item.ARSaleOrderItemIsSaleOrderShipment ||
                        item.ARSaleOrderItemIsInvoiceAndShipment ||
                        item.ARSaleOrderItemIsContainerLoader)
                    {
                        MessageBox.Show("Vui lòng không chọn Xuất kho bán hàng hoặc Hóa đơn kiêm phiếu xuất hoặc Load hàng đối với sản phẩm dịch vụ !",
                                    CommonLocalizedResources.MessageBoxDefaultCaption,
                                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return false;
                    }
                if (objProductsInfo != null && objProductsInfo.ICProductIsFollowInventoryStock)
                    if (!item.ARSaleOrderItemIsSaleOrderShipment &&
                        !item.ARSaleOrderItemIsInvoiceAndShipment &&
                        !item.ARSaleOrderItemIsContainerLoader)
                    {
                        MessageBox.Show("Vui lòng chọn Xuất kho bán hàng hoặc Hóa đơn kiêm phiếu xuất hoặc Load hàng đối với sản phẩm tồn kho !",
                                    CommonLocalizedResources.MessageBoxDefaultCaption,
                                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return false;
                    }
                if (item.ARSaleOrderItemIsDeliveryPlan)
                    if (!item.ARSaleOrderItemIsSaleOrderShipment &&
                        !item.ARSaleOrderItemIsInvoiceAndShipment)
                    {
                        MessageBox.Show("Vui lòng chọn Xuất kho bán hàng hoặc Hóa đơn kiêm phiếu xuất đối với phương thức giao hàng là Kế hoạch giao hàng !",
                                    CommonLocalizedResources.MessageBoxDefaultCaption,
                                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return false;
                    }
                if (item.ARSaleOrderItemIsVehicleAllocation)
                    if (!item.ARSaleOrderItemIsDeliveryPlan)
                    {
                        MessageBox.Show("Vui lòng chọn Kế hoạch giao hàng đối với phương thức giao hàng là Điều xe !",
                            CommonLocalizedResources.MessageBoxDefaultCaption,
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return false;
                    }
                if (item.ARSaleOrderItemIsSaleOrderShipment)
                    if (item.ARSaleOrderItemIsInvoiceAndShipment)
                    {
                        MessageBox.Show("Vui lòng không chọn Hóa đơn kiêm phiếu xuất đối với phương thức giao hàng là Xuất kho bán hàng !",
                            CommonLocalizedResources.MessageBoxDefaultCaption,
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return false;
                    }
                if (item.ARSaleOrderItemIsAcceptance)
                    if (item.ARSaleOrderItemIsInvoiceAndShipment)
                    {
                        MessageBox.Show("Vui lòng không chọn Hóa đơn kiêm phiếu xuất đối với phương thức giao hàng là Nghiệm thu bán hàng !",
                            CommonLocalizedResources.MessageBoxDefaultCaption,
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return false;
                    }
                if (item.ARSaleOrderItemIsInvoiceAndShipment)
                    if (item.ARSaleOrderItemIsSaleOrderShipment ||
                        item.ARSaleOrderItemIsAcceptance)
                    {
                        MessageBox.Show("Vui lòng không chọn Xuất kho bán hàng hoặc Nghiệm thu bán hàng đối với phương thức giao hàng là Hóa đơn kiêm phiếu xuất !",
                            CommonLocalizedResources.MessageBoxDefaultCaption,
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return false;
                    }
            }

            return true;
        }

        public void ShowSalesman()
        {
            if (Toolbar.IsNullOrNoneAction())
                return;

            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainobject = (ARSaleOrdersInfo)entity.MainObject;
            if (mainobject.FK_ARSellerID == 0)
            {
                MessageBox.Show("Vui lòng chọn người bán trước khi chọn người bán phụ !",
                            CommonLocalizedResources.MessageBoxDefaultCaption,
                            MessageBoxButtons.OK,
                            MessageBoxIcon.Error);
                return;
            }

            guiAddSalesman guiAddSalesman = new guiAddSalesman(entity.ARSalesmansList, mainobject.FK_ARSellerID);
            guiAddSalesman.Module = this;
            DialogResult rs = guiAddSalesman.ShowDialog();
            if (rs != DialogResult.OK)
                return;

            List<ARSalesmansInfo> salesmans = guiAddSalesman.SalesmansList.Select(o => o.Clone() as ARSalesmansInfo).ToList();
            entity.ARSalesmansList.Clear();
            entity.ARSalesmansList.AddRange(salesmans);
            string subSellers = string.Empty;
            HREmployeesController objEmployeesController = new HREmployeesController();
            HREmployeesInfo objEmployeesInfo = new HREmployeesInfo();
            entity.ARSalesmansList
                .Where(p => p.ARSalesmanType != SalesmanType.MainSeller.ToString())
                .ToList()
                .ForEach(p =>
                {
                    objEmployeesInfo = (HREmployeesInfo)objEmployeesController.GetObjectByID(p.FK_HREmployeeID);
                    p.ARSalesmanName = objEmployeesInfo != null ? objEmployeesInfo.HREmployeeName : string.Empty;
                    p.ARSalesmanType = SalesmanType.SubSeller.ToString();
                    subSellers = string.IsNullOrWhiteSpace(subSellers) ? subSellers + p.ARSalesmanName : subSellers + " , " + p.ARSalesmanName;
                });
            SalesmanButtonEditControl.Text = subSellers;
        }

        public void ApplyDiscountProgram()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainobject = (ARSaleOrdersInfo)entity.MainObject;
            ARDiscountProgramsController objDiscountProgramsController = new ARDiscountProgramsController();
            List<ARDiscountProgramsInfo> discountProgramList = objDiscountProgramsController.GetDiscountProgramForSaleOrder(BOSApp.CurrentCompanyInfo.FK_BRBranchID
                                                                                                                            , null
                                                                                                                            , mainobject.FK_ACObjectID
                                                                                                                            , mainobject.ARObjectType
                                                                                                                            , mainobject.ARSaleOrderDate);
            InvalidDiscountProgramChild(discountProgramList);
            //List<int> discountProgramIDs = entity.ARSaleOrderItemsList.Where(o => o.FK_ARDiscountProgramID > 0)
            //                                                          .Select(o => o.FK_ARDiscountProgramID)
            //                                                          .Distinct().ToList();
            List<int> discountProgramIDs = new List<int>();
            discountProgramIDs.Add(mainobject.FK_ARDiscountProgramID);

            guiChooseDiscountProgram guiChooseDiscount = new guiChooseDiscountProgram(discountProgramList);
            guiChooseDiscount.DiscountProgramIDs = discountProgramIDs;
            guiChooseDiscount.Module = this;
            guiChooseDiscount.ShowDialog();
            if (guiChooseDiscount.DialogResult != DialogResult.OK)
            {
                return;
            }

            //discountProgramList = guiChooseDiscount.SelectedObjects;
            ARDiscountProgramsInfo objDiscountProgramsInfo = guiChooseDiscount.SelectedObjects.FirstOrDefault();
            if (discountProgramList.Count() == 0)
                return;

            if (MessageBox.Show("Bạn có muốn áp dụng chương trình chiết khấu cho đơn hàng này không?"
                                , CommonLocalizedResources.MessageBoxDefaultCaption
                                , MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
            {
                mainobject.FK_ARDiscountProgramID = 0;
                mainobject.ARDiscountProgramName = string.Empty;
                entity.UpdateMainObjectBindingSource();
                return;
            }
            
            //string discountProgramRef = string.Join(",", discountProgramList.Select(o => o.ARDiscountProgramID).Distinct());
            entity.UpdateMainObjectBindingSource();
            UpdatePriceForDiscountProgram(objDiscountProgramsInfo, objDiscountProgramsInfo.ARDiscountProgramID);
        }

        private void InvalidDiscountProgramChild(List<ARDiscountProgramsInfo> discountProgramList)
        {
            string discountProgramRef = string.Join(",", discountProgramList.Select(o => o.ARDiscountProgramID.ToString()).ToArray());
            ARDiscountProgramItemsController objDiscountProgramItemsController = new ARDiscountProgramItemsController();
            ARDiscountProgramItemTargetsController objDiscountProgramItemTargetsController = new ARDiscountProgramItemTargetsController();
            List<ARDiscountProgramItemTargetsInfo> discountProgramItemTargetList = objDiscountProgramItemTargetsController.GetAllItemByDiscountProgramRef(discountProgramRef);
            List<ARDiscountProgramItemsInfo> discountProgramItemList = objDiscountProgramItemsController.GetAllItemByDiscountProgramRef(discountProgramRef);
            discountProgramList.ForEach(o =>
            {
                if (o.ARDiscountProgramType == DiscountProgramType.BonusSales.ToString())
                {
                    o.DiscountProgramItemTargetList = new System.ComponentModel.BindingList<ARDiscountProgramItemTargetsInfo>();
                    discountProgramItemTargetList.Where(item => item.FK_ARDiscountProgramID == o.ARDiscountProgramID).All(item =>
                    {
                        o.DiscountProgramItemTargetList.Add(item);
                        return true;
                    });
                }
                else
                {
                    o.DiscountProgramItemList = new System.ComponentModel.BindingList<ARDiscountProgramItemsInfo>();
                    discountProgramItemList.Where(item => item.FK_ARDiscountProgramID == o.ARDiscountProgramID).All(item =>
                    {
                        o.DiscountProgramItemList.Add(item);
                        return true;
                    });
                }
            });
        }

        public void UpdatePriceForDiscountProgram(ARDiscountProgramsInfo objDiscountProgramsInfo, int discountProgramID)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainobject = (ARSaleOrdersInfo)entity.MainObject;
            ARDiscountProgramItemsController objDiscountProgramItemsController = new ARDiscountProgramItemsController();
            mainobject.ARSaleOrderDiscountPerCent = 0;
            entity.ARSaleOrderItemsList.ForEach(o =>
            {
                o.FK_ARDiscountProgramID = 0;
                o.FK_ARDiscountProgramItemID = 0;
                o.ARSaleOrderItemProductDiscount = 0;
            });
            if (objDiscountProgramsInfo.ARDiscountProgramApplyType == DiscountProgramApplyType.Product.ToString())
            {
                List<ARDiscountProgramItemsInfo> discountProgramItemList = objDiscountProgramItemsController.GetAllItemByDiscountProgramID(discountProgramID);
                //discountProgramItemList = discountProgramItemList.GroupBy(o => o.FK_ICProductID).Select(o => o.OrderByDescending(o1 => o1.ARDiscountProgramDate).First()).ToList();
                ARDiscountProgramItemsInfo objDiscountProgramItemsInfo = new ARDiscountProgramItemsInfo();
                entity.ARSaleOrderItemsList.ForEach(o =>
                {
                    objDiscountProgramItemsInfo = discountProgramItemList.Where(o1 => o1.FK_ICProductID == o.FK_ICProductID).FirstOrDefault();
                    if (objDiscountProgramItemsInfo == null)
                        return;

                    o.FK_ARDiscountProgramID = objDiscountProgramItemsInfo.FK_ARDiscountProgramID;
                    o.FK_ARDiscountProgramItemID = objDiscountProgramItemsInfo.ARDiscountProgramItemID;
                    //o.ARSaleOrderItemProductUnitPrice = objDiscountProgramItemsInfo.ARDiscountProgramItemBasicPrice;
                    //if (objDiscountProgramItemsInfo.ARDiscountProgramItemPriorityQty > 0
                    //    && o.ARSaleOrderItemProductQty >= objDiscountProgramItemsInfo.ARDiscountProgramItemPriorityQty)
                    //{
                    //    o.ARSaleOrderItemProductUnitPrice = objDiscountProgramItemsInfo.ARDiscountProgramItemPriorityPrice;
                    //}
                    if (objDiscountProgramItemsInfo.ARDiscountProgramItemApplyOn == DiscountProgramApplyOn.Percent.ToString())
                    {
                        o.ARSaleOrderItemProductDiscount = objDiscountProgramItemsInfo.ARDiscountProgramItemValue;
                    }
                    else
                    {
                        o.ARSaleOrderItemProductUnitPrice = objDiscountProgramItemsInfo.ARDiscountProgramItemProductUnitPrice;
                        o.ICProductUnitPrice = o.ARSaleOrderItemProductUnitPrice;
                    }
                });
                mainobject.FK_ARDiscountProgramID = objDiscountProgramsInfo.ARDiscountProgramID;
                mainobject.ARDiscountProgramName = objDiscountProgramsInfo.ARDiscountProgramName;
            }


            if (objDiscountProgramsInfo.ARDiscountProgramApplyType == DiscountProgramApplyType.SaleOrder.ToString())
            {
                mainobject.FK_ARDiscountProgramID = objDiscountProgramsInfo.ARDiscountProgramID;
                mainobject.ARDiscountProgramName = objDiscountProgramsInfo.ARDiscountProgramName;
                
                mainobject.ARSaleOrderDiscountPerCent = CalculateDiscountPerCent(objDiscountProgramsInfo.ARDiscountProgramApplyOn, objDiscountProgramsInfo.ARDiscountProgramValue);
            }
            UpdateTotalAmount(entity.ARSaleOrderItemsList);
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
        }

        public decimal CalculateDiscountPerCent(string programApplyOn, decimal value)
        {
            ARSaleOrdersInfo mainobject = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;
            decimal discountPerCent = 0;
            if (programApplyOn == DiscountProgramApplyOn.Percent.ToString())
            {
                discountPerCent = value;
            }
            else
            {
                if (mainobject.ARSaleOrderSubTotalAmount > 0)
                    mainobject.ARSaleOrderDiscountPerCent = 100 * value / mainobject.ARSaleOrderSubTotalAmount;
            }
            Math.Round(discountPerCent, 2, MidpointRounding.AwayFromZero);
            return discountPerCent;
        }

        public void ChangeItemCommissionPercent(ARCommissionsInfo item)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainobject = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;

            if (item == null)
                return;

            item.ARCommissionAmount = mainobject.ARSaleOrderSOCommissionAmount * item.ARCommissionPercent / 100;
            item.ARCommissionAmount = Math.Round(item.ARCommissionAmount, 2, MidpointRounding.AwayFromZero);

            entity.SaleCommissionsList.GridControl?.RefreshDataSource();
        }

        public void AllocationQtyCont()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            GEContainersController objContainersController = new GEContainersController();
            List<GEContainersInfo> containerList = objContainersController.GetAllObject();
            decimal volumePI = 0;
            decimal volumeTotalcont = 0;
            entity.ARSaleOrderItemsList.EndCurrentEdit();
            entity.ARSaleOrderItemsList.ForEach(a =>
            {
                ICProductsForViewInfo objProductsInfo = BOSApp.CurrentProductList.FirstOrDefault(b => b.ICProductID == a.FK_ICProductID);
                if (objProductsInfo != null)
                {
                    volumePI += objProductsInfo.ICProductVolume * a.ARSaleOrderItemProductQty;
                }
            });
            entity.SaleOrderItemContainerList.ForEach(a =>
            {
                GEContainersInfo objContainersInfo = containerList.FirstOrDefault(b => b.GEContainerID == a.FK_GEContainerID);
                if (objContainersInfo != null)
                {
                    volumeTotalcont += objContainersInfo.GEContainerQuantity;
                    a.ARSaleOrderItemContainerValume = objContainersInfo.GEContainerQuantity;
                }
            });
            if (entity.SaleOrderItemContainerList.Count() == 0) return;
            ARSaleOrderItemContainersInfo objSaleOrderItemContainersInfo = entity.SaleOrderItemContainerList[entity.SaleOrderItemContainerList.CurrentIndex];
            if (volumeTotalcont > 0 && objSaleOrderItemContainersInfo.ARSaleOrderItemContainerValume > 0)
            {
                decimal volumeCont = objSaleOrderItemContainersInfo.ARSaleOrderItemContainerValume / volumeTotalcont * volumePI;
                objSaleOrderItemContainersInfo.ARSaleOrderItemContainerProductQty = Math.Ceiling(volumeCont / objSaleOrderItemContainersInfo.ARSaleOrderItemContainerValume);
                volumeTotalcont -= objSaleOrderItemContainersInfo.ARSaleOrderItemContainerValume;
                volumePI -= (objSaleOrderItemContainersInfo.ARSaleOrderItemContainerProductQty * objSaleOrderItemContainersInfo.ARSaleOrderItemContainerValume);
            }
            else
            {
                objSaleOrderItemContainersInfo.ARSaleOrderItemContainerProductQty = 0;
            }
            entity.SaleOrderItemContainerList.GridControl?.RefreshDataSource();
        }

        public List<ADConfigValuesInfo> GetSaleOrderTypeForLookUpEdit()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;

            List<ADConfigValuesInfo> configValuesList = new List<ADConfigValuesInfo>();
            configValuesList.Insert(0, new ADConfigValuesInfo());
            configValuesList.AddRange((new ADConfigValuesController()).GetADConfigValuesForSaleOrderTypeLookUp(mainObject.STToolbarActionName));
            return configValuesList;
        }

        public void UpdateTTMTItem(int ttmtID)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            entity.ARSaleOrderItemsList.ForEach(p => p.FK_ICProductAttributeTTMTID = ttmtID);
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
        }

        public void UpdateGrantedFromItem(string grantedFrom)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            entity.ARSaleOrderItemsList.ForEach(p => p.ARSaleOrderItemGrantedFrom = grantedFrom);
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
        }

        public void UpdateTotalAmountByCurrency()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            CSCompanysInfo objCompanysInfo = BOSApp.CurrentCompanyInfo;
            ARCustomersController objCustomersController = new ARCustomersController();
            ARCustomersInfo objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectByID(mainObject.FK_ARCustomerID);
            if (entity.ARSaleOrderItemsList != null && entity.ARSaleOrderItemsList.Count > 0)
            {
                if (mainObject.STToolbarActionName.Equals("Manual")
                    || mainObject.STToolbarActionName.Equals("NewFromOther")
                    || mainObject.STToolbarActionName.Equals("NewFromWood"))
                {
                    if ((objCompanysInfo != null && objCompanysInfo.CSSourceSellingPriceMethod == ADConfigValueUtility.cstSourceSellingPriceMethodMasterData)  || mainObject.STToolbarActionName.Equals("NewFromOther"))
                    {
                        entity.ARSaleOrderItemsList.ForEach(o =>
                        {
                            o.ARSaleOrderItemProductUnitPrice2 = mainObject.ARSaleOrderExchangeRate2 > 0 ? o.ARSaleOrderItemProductUnitPrice * mainObject.ARSaleOrderExchangeRate / mainObject.ARSaleOrderExchangeRate2 : 0;
                            entity.SetProductPriceByProductUnitPrice(o);
                            BOSApp.RoundByCurrency(o, mainObject.FK_GECurrencyID);
                        });
                    }
                    else if (objCompanysInfo != null && objCompanysInfo.CSSourceSellingPriceMethod == ADConfigValueUtility.cstSourceSellingPriceMethodPriceSheet)
                    {
                        entity.ARSaleOrderItemsList.ForEach(o =>
                        {
                            ICProductsInfo product = BOSApp.GetProductFromCurrentProductList(o.FK_ICProductID);
                            decimal sumQty = entity.ARSaleOrderItemsList.Where(p => o.FK_ICProductID == p.FK_ICProductID && o.FK_ICMeasureUnitID == p.FK_ICMeasureUnitID).Sum(p => p.ARSaleOrderItemProductQty);
                            if (product != null && product.ICProductType == ProductType.Product.ToString())
                            {
                                o.ARSaleOrderItemProductUnitPrice = BOSApp.CalculaterProductUnitPrice(product, o.ARSaleOrderItemProductUnitPrice, sumQty, o.FK_ICMeasureUnitID, objCustomersInfo != null ? objCustomersInfo.ARCustomerID : 0, mainObject.ARSaleOrderDate, mainObject.FK_GECurrencyID);
                                o.ICProductUnitPrice = o.ARSaleOrderItemProductUnitPrice;
                                o.ARSaleOrderItemProductUnitPrice2 = mainObject.ARSaleOrderExchangeRate2 > 0 ? o.ARSaleOrderItemProductUnitPrice * mainObject.ARSaleOrderExchangeRate / mainObject.ARSaleOrderExchangeRate2 : 0;
                            }
                            entity.SetProductPriceByProductUnitPrice(o);
                            BOSApp.RoundByCurrency(o, mainObject.FK_GECurrencyID);
                        });
                    }
                }
                else
                {
                    entity.ARSaleOrderItemsList.ForEach(o =>
                    {
                        o.ARSaleOrderItemProductUnitPrice2 = mainObject.ARSaleOrderExchangeRate2 > 0 ? o.ARSaleOrderItemProductUnitPrice * mainObject.ARSaleOrderExchangeRate / mainObject.ARSaleOrderExchangeRate2 : 0;
                        entity.SetProductPriceByProductUnitPrice(o);
                        BOSApp.RoundByCurrency(o, mainObject.FK_GECurrencyID);
                    });
                }
                entity.UpdateTotalAmount(entity.ARSaleOrderItemsList);
                entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
            }
            entity.ARSaleOrderPaymentTimesList.GridControl?.RefreshDataSource();
            entity.UpdateMainObjectBindingSource();
        }

        public void ChangeItemMeasureUnit()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;
            if (entity.ARSaleOrderItemsList.CurrentIndex < 0)
                return;
            ARSaleOrderItemsInfo item = entity.ARSaleOrderItemsList[entity.ARSaleOrderItemsList.CurrentIndex];

            ICProductMeasureUnitsController controller = new ICProductMeasureUnitsController();
            ICProductMeasureUnitsInfo measureUnit = controller.GetProductMeasureUnitByProductIDAndMeasureUnitID(item.FK_ICProductID, item.FK_ICMeasureUnitID);
            item.ARSaleOrderItemProductFactor = (measureUnit != null && measureUnit.ICProductMeasureUnitFactor > 0)
                                                ? measureUnit.ICProductMeasureUnitFactor
                                                : 1;
            entity.SetProductPriceByProductUnitPrice(item);
        }

        public void ChangeDisplayAndDataItemListGridView()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;

            bool isWoodType = BOSApp.IsWoodTypeDocument(objSaleOrdersInfo.ARSaleOrderProductType, entity.ARSaleOrderItemsList.FirstOrDefault());

            ChangeDisplayColumnByWoodType(entity.ARSaleOrderItemsList.GridControl, isWoodType);
            if (!isWoodType)
                entity.ARSaleOrderItemsList.ForEach(o1 => o1.ARSaleOrderItemLotNo = string.Empty);
        }

        public override void ChangeDisplayColumnByWoodType(BOSGridControl gridControl, bool isWoodType)
        {
            base.ChangeDisplayColumnByWoodType(gridControl, isWoodType);
            if (gridControl == null)
                return;
            GridView gridView = (GridView)gridControl.MainView;
            if (gridView == null)
                return;

            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;
            
            GridColumn qtyColumn = gridView.Columns["ARSaleOrderItemProductQty"];
            if (qtyColumn != null)
            {
                if (objSaleOrdersInfo.ARSaleOrderProductType == ProductType.Product.ToString())
                {
                    string ProjectBKV = BOSApp.GetDisplayTextFromConfigValue("ProjectBKV", "true");
                    bool isProjectBKV = bool.Parse(string.IsNullOrWhiteSpace(ProjectBKV) ? "false" : ProjectBKV);
                    if (isProjectBKV)
                    {
                        SaleOrderItemsGridControl.FormatNumbericColumn(qtyColumn, true, "n4");
                    }    
                    else
                    {
                        SaleOrderItemsGridControl.FormatNumbericColumn(qtyColumn, true, "n0");
                    }    
                }
                else
                {
                    STFieldFormatGroupsInfo objFieldFormatGroupsInfo = this.GetColumnFormat("ARSaleOrderItems", "ARSaleOrderItemProductQty", this.ModuleID);
                    if (objFieldFormatGroupsInfo != null)
                        SaleOrderItemsGridControl.FormatNumbericColumn(qtyColumn, true, objFieldFormatGroupsInfo.STFieldFormatGroupFormatString);
                }
            }
        }

        public void ChangeInputType(string type)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;
            objSaleOrdersInfo.ARSaleOrderProductType = type;
            entity.UpdateMainObjectBindingSource();
            ChangeDisplayAndDataItemListGridView();
        }

        public void UpdateLotNoItem(ARSaleOrderItemsInfo objSaleOrderItemsInfo)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;

            if (BOSApp.IsWoodTypeDocument(objSaleOrdersInfo.ARSaleOrderProductType, entity.ARSaleOrderItemsList.FirstOrDefault()))
            {
                ICProductSeriesController objProductSeriesController = new ICProductSeriesController();
                ICProductSeriesInfo objProductSeriesInfo = (ICProductSeriesInfo)objProductSeriesController.GetObjectByID(objSaleOrderItemsInfo.FK_ICProductSerieID);
                if (objProductSeriesInfo != null)
                {
                    objSaleOrderItemsInfo.ARSaleOrderItemLotNo = objProductSeriesInfo.ICProductSerieLotNo;
                }
                else
                {
                    objSaleOrderItemsInfo.ARSaleOrderItemLotNo = string.Empty;
                }
            }
        }

        //public override void ChangeDisplayColumnByWoodType(BOSGridControl gridControl, bool isWoodType)
        //{
        //    base.ChangeDisplayColumnByWoodType(gridControl, isWoodType);
        //    if (gridControl == null)
        //        return;
        //    GridView gridView = (GridView)gridControl.MainView;
        //    if (gridView == null)
        //        return;
        //    GridColumn column = gridView.Columns["ARSaleOrderItemProductQty"];
        //    if (isWoodType)
        //    {
        //        SetColumnFormat(column, "n5");
        //    }
        //    else SetColumnFormat(column, "n3");
        //}
        public void SetColumnFormat(GridColumn column, string formatType)
        {
            if (column == null)
                return;

            DevExpress.XtraEditors.Repository.RepositoryItem rep = column.ColumnEdit;

            DevExpress.XtraEditors.Repository.RepositoryItemTextEdit repText = (DevExpress.XtraEditors.Repository.RepositoryItemTextEdit)rep;

            repText.Mask.EditMask = formatType;
            repText.Mask.UseMaskAsDisplayFormat = true;

            repText.DisplayFormat.FormatString = formatType;
        }
        public void InvalidateProfileManagement()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            entity.InvalidateProfileManagement();
            entity.SaleOrderProfilesList.GridControl?.RefreshDataSource();
            entity.SOItemProfilesList.GridControl?.RefreshDataSource();
        }
        public void ViewFollow()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;
            ARSaleOrderItemsController objSaleOrderItemsController = new ARSaleOrderItemsController();
            List<ARSaleOrderItemsInfo> saleItemFollowList = objSaleOrderItemsController.GetSaleOrderItemStatusByID(objSaleOrdersInfo.ARSaleOrderID);
            entity.SaleOrderItemFollowList.Invalidate(saleItemFollowList);
            entity.SaleOrderItemFollowList.GridControl?.RefreshDataSource();
        }
        public void ChangeItemPONo()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;
            foreach (ARSaleOrderItemsInfo item in entity.ARSaleOrderItemsList)
            {
                item.ARSaleOrderItemPONo = objSaleOrdersInfo.ARSaleOrderPONo;
            }
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
        }

        public void LoadControlByEditPrice(bool isEditPrice)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;

            List<string> bosLineLists = new List<string>()
            {
                "fld_lnMain",
                "fld_Line3",
                "bosLine1",
                "fld_Line4",
                "bosLine2",
                "bosLine3"
            };

            List<string> otherControlsList = new List<string>()
            {
                "fld_lkeFK_ICProductAttributeID"
            };

            bosLineLists.ForEach(o1 =>
            {
                if (Controls.Contains(o1))
                    Controls[o1].Enabled = !isEditPrice;
            });

            otherControlsList.ForEach(o1 =>
            {
                if (Controls.Contains(o1))
                    Controls[o1].Enabled = !isEditPrice;
            });

            if (objSaleOrdersInfo.STToolbarActionName.Equals("NewFromWood"))
            {
                ARSaleOrderItemsGridControl.LoadGridViewAccordingToToolbarActionNew("NewFromWood");
            }   
            else
            {
                ARSaleOrderItemsGridControl.LoadGridViewAccordingToToolbarActionNew(string.Empty);
            }

            if (objSaleOrdersInfo.STToolbarActionName.Equals("NewFromWood")
                || objSaleOrdersInfo.STToolbarActionName.Equals("NewFromOther"))
            {
                SaleOrderItemsGridControl.LoadGridViewSourceSellingPrice(true);
            }
            else
            {
                SaleOrderItemsGridControl.LoadGridViewSourceSellingPrice(false);
            }
            bool isWoodType = BOSApp.IsWoodTypeDocument(objSaleOrdersInfo.ARSaleOrderProductType, entity.ARSaleOrderItemsList.FirstOrDefault());
            ChangeDisplayColumnByWoodType(entity.ARSaleOrderItemsList.GridControl, isWoodType);

            foreach (XtraTabPage item in Tab.TabPages)
            {
                if (item.Name != "fld_tabSOItems")
                    item.PageEnabled = !IsEditPrice;
            }
        }

        public bool CheckAvailableSaleDocumentDate()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)entity.MainObject;

            ACDocumentsController objDocumentsController = new ACDocumentsController();
            List<ACDocumentsInfo> documentsList = objDocumentsController.CheckAvailableSaleDocumentDate(objSaleOrdersInfo.ARSaleOrderDate,
                                                                                    string.Empty,
                                                                                    string.Empty,
                                                                                    string.Empty,
                                                                                    string.Join(",", entity.ARSaleOrderItemsList.Select(o1 => o1.FK_ARSaleForecastItemID.ToString()).ToArray()));
            if (documentsList.Count() > 0)
            {
                MessageBox.Show("Ngày chứng từ hiện tại đang nhỏ hơn các chứng từ sau: \n+"
                            + string.Join("+", documentsList.Select(o1 => string.Format("{0}:{1}\n", o1.ACDocumentNo, o1.ACDocumentDate.ToShortDateString())).ToArray()), CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }
            return true;
        }

        public void InitProductPictureImage(int productID)
        {
            if (productID > 0 && ProductPicturePictureBox != null)
            {
                ProductPicturePictureBox.Image = BOSApp.GetProductPictureImageByProductID(productID);
                ProductPicturePictureBox.Properties.SizeMode = DevExpress.XtraEditors.Controls.PictureSizeMode.Zoom;
            }
        }
        public void InitProductPictureImage(string image,BOSPictureEdit ProductPicturePictureBox)
        {
            if (string.IsNullOrEmpty(image))
                return;
            //image = image.Replace("/view?usp=sharing", "").Replace("https://drive.google.com/file/d/", "https://drive.google.com/uc?id=");
            try
            {
                //WebClient webclient = new WebClient();
                //webclient.Headers.Add("User-Agent: Other");
                //byte[] bytes = webclient.DownloadData(image);
                //MemoryStream ms = new MemoryStream(bytes);
                //System.Drawing.Image img = System.Drawing.Image.FromStream(ms);
                if (ProductPicturePictureBox != null)
                    ProductPicturePictureBox.Image = BOSApp.GetProductPictureImageByLink(image);
            }
            catch
            {
                //BOSApp.ShowMessage("Link ảnh hoặc định dạng hình ảnh không hợp lệ!");
                //if (CarcassPicture != null)
                //    CarcassPicture.Image = null;
            }
        }
        public void GetInventoryQty()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            if (entity.ARSaleOrderItemsList.Count() == 0)
                return;

            ICTransactionsController objTransactionsController = new ICTransactionsController();
            List<int> productIds = entity.ARSaleOrderItemsList.Select(o => o.FK_ICProductID).Distinct().ToList();
            List<ICTransactionsInfo> inventoryStocks = objTransactionsController.GetInventoryStockListByProductRef(productIds);
            ICTransactionsInfo objTransactionsInfo = new ICTransactionsInfo();
            decimal availableQty = 0;
            decimal saleOderQty = 0;
            entity.ARSaleOrderItemsList.ForEach(o =>
            {
                o.IsCheckInventory = true;
                objTransactionsInfo = inventoryStocks.Where(iv => iv.FK_ICProductID == o.FK_ICProductID).FirstOrDefault();
                if (objTransactionsInfo == null)
                    objTransactionsInfo = new ICTransactionsInfo();

                availableQty = objTransactionsInfo.ICInventoryStockQuantity - objTransactionsInfo.ICTransactionReceiptQty;
                if (availableQty < 0)
                    availableQty = 0;
                o.ICInventoryStockQty = availableQty / (o.ARSaleOrderItemProductFactor == 0 ? 1 : o.ARSaleOrderItemProductFactor);
                o.ICInventoryStockQty = Math.Round(o.ICInventoryStockQty, 5, MidpointRounding.AwayFromZero);

                saleOderQty = objTransactionsInfo.ICInventoryStockQuantity - objTransactionsInfo.ICInventoryStockSaleOrderQuantity;
                if (saleOderQty < 0)
                    saleOderQty = 0;
                o.ICInventorySaleOderStockQty = saleOderQty / (o.ARSaleOrderItemProductFactor == 0 ? 1 : o.ARSaleOrderItemProductFactor);
                o.ICInventorySaleOderStockQty = Math.Round(o.ICInventorySaleOderStockQty, 5, MidpointRounding.AwayFromZero);

                objTransactionsInfo.ICTransactionReceiptQty += o.ARSaleOrderItemProductQty * (o.ARSaleOrderItemProductFactor == 0 ? 1 : o.ARSaleOrderItemProductFactor);
                objTransactionsInfo.ICTransactionReceiptQty = Math.Round(objTransactionsInfo.ICTransactionReceiptQty, 5, MidpointRounding.AwayFromZero);
                
            });
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
        }

        public void ChangeSaleOrderItemAllocationFeeByARSaleOrderItemVirtualID(ARSaleOrderItemAllocationFeesInfo item)
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrderItemsInfo objSaleOrderItemsInfo = entity.ARSaleOrderItemsList.FirstOrDefault(o => o.ARSaleOrderItemVirtualID == item.ARSaleOrderItemVirtualID);
            if(objSaleOrderItemsInfo != null)
            {
                item.FK_ICProductID = objSaleOrderItemsInfo.FK_ICProductID;
                item.FK_ARSaleOrderItemID = objSaleOrderItemsInfo.ARSaleOrderItemID;
                item.ARSaleOrderItemAllocationFeeProductQty = objSaleOrderItemsInfo.ARSaleOrderItemProductQty;
                item.ARSaleOrderItemAllocationFeeProductNo = objSaleOrderItemsInfo.ARSaleOrderItemProductNo;
                ICProductsInfo productsInfo = BOSApp.GetProductFromCurrentProductList(item.FK_ICProductID);
                if (productsInfo != null)
                {
                    item.ARSaleOrderItemAllocationFeeProductNo = productsInfo.ICProductNo;
                    item.ARSaleOrderItemAllocationFeeProductName = productsInfo.ICProductName;
                    item.ARSaleOrderItemAllocationFeeProductNoOfOldSys = productsInfo.ICProductNoOfOldSys;
                }
            }
            else
            {
                entity.SaleOrderItemAllocationFeeList.RemoveSelectedRowObjectFromList();
            }
            entity.SaleOrderItemAllocationFeeList.GridControl?.RefreshDataSource();
        }

        public void UpdateTotalSaleOrderItemAllocationFee()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            entity.SaleOrderItemAllocationFeeList.EndCurrentEdit();
            entity.SaleOrderItemOtherFeeList.EndCurrentEdit();

            for (int i = 0; i < entity.SaleOrderItemAllocationFeeList.Count; i++)
            {
                if(entity.SaleOrderItemAllocationFeeList[i].FK_ICProductID <= 0)
                {
                    entity.SaleOrderItemAllocationFeeList.RemoveAt(i);
                    i--;
                }
                else if (entity.SaleOrderItemAllocationFeeList[i].ARSaleOrderItemAllocationFeeFeePercent < 0)
                {
                    entity.SaleOrderItemAllocationFeeList[i].ARSaleOrderItemAllocationFeeFeePercent = 0M;
                    entity.SaleOrderItemAllocationFeeList[i].ARSaleOrderItemAllocationFeeFeeAmount = 0M;
                }
            }

            if(entity.SaleOrderItemAllocationFeeList.Count > 0)
            {
                ARSaleOrderItemAllocationFeesInfo validateItem = entity.SaleOrderItemAllocationFeeList[entity.SaleOrderItemAllocationFeeList.Count - 1];
                decimal checkPercent = 100 - entity.SaleOrderItemAllocationFeeList.Sum(o => o.ARSaleOrderItemAllocationFeeFeePercent);
                if (checkPercent != 0)
                {
                    validateItem.ARSaleOrderItemAllocationFeeFeePercent = validateItem.ARSaleOrderItemAllocationFeeFeePercent + checkPercent;
                }

                decimal totalFee = entity.SaleOrderItemOtherFeeList.Sum(o => o.ARSaleOrderItemOtherFeeTotalPrice);
                totalFee = totalFee - entity.SaleOrderItemAllocationFeeList.Sum(o => o.ARSaleOrderItemAllocationFeeFeeAmount);
                if (totalFee != 0)
                {
                    validateItem.ARSaleOrderItemAllocationFeeFeeAmount = validateItem.ARSaleOrderItemAllocationFeeFeeAmount + totalFee;
                }
            }
            entity.SaleOrderItemAllocationFeeList.GridControl?.RefreshDataSource();
            UpdateSaleOrderItemProductUnitPriceByOtherFee();
        }

        public void UpdateSaleOrderItemProductUnitPriceByOtherFee()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            decimal fee = 0M;
            foreach (ARSaleOrderItemsInfo item in entity.ARSaleOrderItemsList)
            {
                fee = entity.SaleOrderItemAllocationFeeList.Where(o => o.ARSaleOrderItemVirtualID == item.ARSaleOrderItemVirtualID).Sum(i => i.ARSaleOrderItemAllocationFeeFeeAmount);
                if(item.ARSaleOrderItemProductExchangeQty > 0 && fee != 0 )
                {
                    item.ARSaleOrderItemProductUnitPrice = item.ICProductUnitPrice + fee / item.ARSaleOrderItemProductExchangeQty;
                    entity.SetProductPriceByProductUnitPrice(item);
                }
            }
            UpdateTotalAmount(entity.ARSaleOrderItemsList);
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
        }

        public void UpdateTotalSaleOrderItemOtherFee()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            entity.SaleOrderItemAllocationFeeList.EndCurrentEdit();
            entity.SaleOrderItemOtherFeeList.EndCurrentEdit();

            foreach(ARSaleOrderItemOtherFeesInfo item in entity.SaleOrderItemOtherFeeList)
            {
                item.ARSaleOrderItemOtherFeeTotalPrice = item.ARSaleOrderItemOtherFeeUnitPrice * item.ARSaleOrderItemOtherFeeQty;
            }
            entity.SaleOrderItemOtherFeeList.GridControl?.RefreshDataSource();
            if (entity.SaleOrderItemAllocationFeeList.Count > 0)
            {
                decimal totalFee = entity.SaleOrderItemOtherFeeList.Sum(o => o.ARSaleOrderItemOtherFeeTotalPrice);
                foreach (ARSaleOrderItemAllocationFeesInfo item in entity.SaleOrderItemAllocationFeeList)
                {
                    item.ARSaleOrderItemAllocationFeeFeeAmount = item.ARSaleOrderItemAllocationFeeFeePercent / 100 * totalFee;
                }
                UpdateTotalSaleOrderItemAllocationFee();
            }
        }
        public void ChangeSaleType()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;

            byte[] RTFByte = BOSApp.GetDefaultDescConfig(this.Name, mainObject.ARSaleOrderSaleType);
            if (SaleOrderCommentEditControl != null)
            {
                if (RTFByte != null && RTFByte.Length > 0)
                {
                    MemoryStream RTFStream = new MemoryStream(RTFByte);
                    SaleOrderCommentEditControl.LoadDocument(RTFStream, DocumentFormat.Rtf);
                    mainObject.ARSaleOrderComment = SaleOrderCommentEditControl.OpenXmlBytes;
                }
                else
                {
                    SaleOrderCommentEditControl.OpenXmlBytes = null;
                    mainObject.ARSaleOrderComment = SaleOrderCommentEditControl.OpenXmlBytes;
                }
            }
            CSCompanyBanksController objCompanyBanksController = new CSCompanyBanksController();
            List<CSCompanyBanksInfo> listCompanyBank = (List<CSCompanyBanksInfo>)objCompanyBanksController.GetListCompanyBanksBySaleType(mainObject.ARSaleOrderSaleType);
            if (listCompanyBank != null && listCompanyBank.Count > 0)
            {
                mainObject.FK_CSCompanyBankID = listCompanyBank.Select(o => o.CSCompanyBankID).FirstOrDefault();
            }
            ARSaleOrderSaleTypeConfigsController objSaleOrderSaleTypeConfigsController = new ARSaleOrderSaleTypeConfigsController();
            ARSaleOrderSaleTypeConfigsInfo objSaleOrderSaleTypeConfigsInfo = (ARSaleOrderSaleTypeConfigsInfo)objSaleOrderSaleTypeConfigsController.GetConfigBySaleType(mainObject.ARSaleOrderSaleType);
            if (objSaleOrderSaleTypeConfigsInfo != null)
            {
                mainObject.ARSaleOrderItemGrantedFrom = objSaleOrderSaleTypeConfigsInfo.ARSaleOrderItemGrantedFrom;
                mainObject.FK_GECurrencyID = objSaleOrderSaleTypeConfigsInfo.FK_GECurrencyID;
                UpdateGrantedFromItem(mainObject.ARSaleOrderItemGrantedFrom);
                UpdateTotalAmountByCurrency(mainObject.FK_GECurrencyID);
            }
            else
            {
                if (mainObject.ARSaleOrderSaleType == SaleOrderSaleType.National.ToString())
                {
                    mainObject.ARSaleOrderItemGrantedFrom = SaleOrderItemGrantedFrom.Inventory.ToString();
                    UpdateGrantedFromItem(SaleOrderItemGrantedFrom.Inventory.ToString());
                }
                else if (mainObject.ARSaleOrderSaleType == SaleOrderSaleType.International.ToString())
                {
                    mainObject.ARSaleOrderItemGrantedFrom = SaleOrderItemGrantedFrom.Production.ToString();
                    UpdateGrantedFromItem(SaleOrderItemGrantedFrom.Production.ToString());
                }
            }
            if (ProductLookupControl != null)
            {
                ProductLookupControl.Properties.DataSource = LoadProductList();
            }

            SetDefaultSaleOrderTaxPercent();
            entity.UpdateMainObjectBindingSource();
        }

        #region Export Import Excel
        public void ExportPriceSheetTemplate()
        {
            try
            {
                SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;

                guiExportSaleOrderItemsProcess process = new guiExportSaleOrderItemsProcess(entity.ARSaleOrderItemsList, mainObject.ARSaleOrderNo);
                process.Show();
                if (File.Exists(process.FilePath))
                {
                    Process.Start(process.FilePath);
                }
            }
            catch (Exception ex)
            {
                BOSProgressBar.Close();
                MessageBox.Show(ex.ToString()
                                , CommonLocalizedResources.MessageBoxDefaultCaption
                                , MessageBoxButtons.OK
                                , MessageBoxIcon.Error);
            }
        }

        public void ImportPriceSheetExcel()
        {
            if (Toolbar.IsNullOrNoneAction())
                return;

            List<Range> ranges = InitializeDataImport();
            if (ranges == null)
                return;

            if (ranges.Count() != 1)
            {
                MessageBox.Show(PriceSheetLocalizedResources.TeamplateMalformed, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (MessageBox.Show(ImportDataLocalizedResources.QuestionImportDataMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                return;

            BOSProgressBar.Start(ImportDataLocalizedResources.ProgressBarMessage);
            Range woods = ranges[0];
            ImportPriceSheetItem(woods);
            BOSProgressBar.Close();
        }

        public List<Range> InitializeDataImport()
        {
            string filePath = string.Empty;
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Filter = ImportDataLocalizedResources.DialogFilter;
            if (dialog.ShowDialog() != DialogResult.Cancel)
                filePath = dialog.FileName;

            if (!String.IsNullOrEmpty(filePath))
            {
                Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("vi-VN");
                App = new ApplicationClass();
                WorkBook = App.Workbooks.Open(filePath, 0, true, 5, string.Empty, string.Empty, true, XlPlatform.xlWindows, "\t", false, false, 0, true, 1, 0);
                List<Range> result = new List<Range>();
                for (int i = 1; i <= WorkBook.Worksheets.Count; i++)
                {
                    WorkSheet = (Worksheet)WorkBook.Worksheets.get_Item(i);
                    Range range = WorkSheet.UsedRange;
                    result.Add(range);
                }
                return result;
            }
            return null;
        }

        private void ImportPriceSheetItem(Range range)
        {
            if (range == null)
                return;

            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;

            List<ARSaleOrderItemsImportInfo> importInfoList = new List<ARSaleOrderItemsImportInfo>();
            ARSaleOrderItemsImportInfo objSaleOrderItemsImportInfo = new ARSaleOrderItemsImportInfo();
            string cellValue = string.Empty;
            decimal value = 0;
            bool SOQ = false;
            for (int row = 2; row <= range.Rows.Count; row++)
            {
                objSaleOrderItemsImportInfo = new ARSaleOrderItemsImportInfo();
                objSaleOrderItemsImportInfo.ARSaleOrderItemsImportProductNo = (range.Cells[row, 2] as Range).Text.ToString().Trim();
                if (string.IsNullOrEmpty(objSaleOrderItemsImportInfo.ARSaleOrderItemsImportProductNo))
                    continue;

                objSaleOrderItemsImportInfo.ARSaleOrderItemsImportProductNoOfOldSys = (range.Cells[row, 3] as Range).Text.ToString().Trim();
                objSaleOrderItemsImportInfo.ARSaleOrderItemsImportProductCustomerNumber = (range.Cells[row, 4] as Range).Text.ToString().Trim();
                objSaleOrderItemsImportInfo.ARSaleOrderItemsImportProductName = (range.Cells[row, 5] as Range).Text.ToString().Trim();
                objSaleOrderItemsImportInfo.ARSaleOrderItemsImportProductDesc = (range.Cells[row, 6] as Range).Text.ToString().Trim();
                objSaleOrderItemsImportInfo.ARSaleOrderItemsImportMeasureUnitName = (range.Cells[row, 7] as Range).Text.ToString().Trim();

                cellValue = (range.Cells[row, 8] as Range).Text.ToString().Replace(",", string.Empty).Trim();
                cellValue = cellValue.Replace(".", ",").Trim();
                cellValue = cellValue.Replace(" ", string.Empty).Trim();
                Decimal.TryParse(cellValue, out value);
                value = Math.Round(value, 4, MidpointRounding.AwayFromZero);
                objSaleOrderItemsImportInfo.ARSaleOrderItemsImportProductQty = value;

                importInfoList.Add(objSaleOrderItemsImportInfo);
            }

            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = new ICProductsInfo();

            ICMeasureUnitsController objMeasureUnitsController = new ICMeasureUnitsController();
            ICMeasureUnitsInfo objMeasureUnitsInfo = new ICMeasureUnitsInfo();

            ARSaleOrderItemsController objSaleOrderItemsController = new ARSaleOrderItemsController();
            List<ARSaleOrderItemsInfo> saleOrderItemList = new List<ARSaleOrderItemsInfo>();
            ARSaleOrderItemsInfo objSaleOrderItemsInfo = new ARSaleOrderItemsInfo();

            List<ICMeasureUnitsInfo> measureUnitList = objMeasureUnitsController.GetAllAliveMeasureUnit();

            importInfoList.ForEach(o =>
            {
                objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByNo(o.ARSaleOrderItemsImportProductNo);
                if (objProductsInfo == null)
                    return;
                objMeasureUnitsInfo = measureUnitList.Where(o1 => o1.ICMeasureUnitName == o.ARSaleOrderItemsImportMeasureUnitName).FirstOrDefault();

                objSaleOrderItemsInfo = new ARSaleOrderItemsInfo()
                {
                    FK_ICProductID = objProductsInfo.ICProductID,
                    ARSaleOrderItemProductQty = o.ARSaleOrderItemsImportProductQty
                };
                ValidateItemToSaleOrderItemsList(objSaleOrderItemsInfo);
            });
            SetDefaultSaleOrderTaxPercent();
            mainObject.ARSaleOrderCBM = entity.ARSaleOrderItemsList.Sum(x => x.ARSaleOrderItemProductCBM);
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
            UpdateTotalAmount(entity.ARSaleOrderItemsList);
        }

        #region IMPORT NEW
        public bool SaveSaleItemsFromImport(List<IPProductsInfo> productList)
        {
            BOSProgressBar.Start("Đang lưu dữ liệu");
            bool isSaveSucess = true;

            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            ICProductMeasureUnitsController controller = new ICProductMeasureUnitsController();
            ARSaleOrderItemsInfo item = new ARSaleOrderItemsInfo();
            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            ARCustomersController objCustomersController = new ARCustomersController();
            ARCustomersInfo objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectByID(mainObject.FK_ARCustomerID);
            List<ARInvoiceItemsInfo> listInvoiceItems = new List<ARInvoiceItemsInfo>();

            productList.ForEach(o =>
            {
                if(!string.IsNullOrEmpty(o.IPProductNo))
                objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByNo(o.IPProductNo);
                if (string.IsNullOrEmpty(o.IPProductNo) && !string.IsNullOrEmpty(o.IPProductNoOfOldSys))
                    objProductsInfo = (ICProductsInfo)objProductsController.GetProductByNoOfOldSys(o.IPProductNoOfOldSys);
                item = new ARSaleOrderItemsInfo();
                item.FK_ICProductID = objProductsInfo.ICProductID;
                item.ARSaleOrderItemProductCustomerNumber = o.IPProductCustomerNumber;
                item.ARSaleOrderItemProductQty = Math.Round(o.IPProductQuantity, 6);
                item.ARSaleOrderItemProductUnitPrice = o.IPProductUnitPrice;
                item.ARSaleOrderItemProductDiscount = o.IPProductDiscount;
                string test = item.ARSaleOrderItemVirtualID;
                ValidateItemToSaleOrderItemsList(item);
                
            });
            SetDefaultSaleOrderTaxPercent();
            mainObject.ARSaleOrderCBM = entity.ARSaleOrderItemsList.Sum(x => x.ARSaleOrderItemProductCBM);
            entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
            UpdateTotalAmount(entity.ARSaleOrderItemsList);

            BOSProgressBar.Close();
            return isSaveSucess;
        }
        public bool ImportProductToItem()
        {
            string filePath = string.Empty;
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Filter = "Tập tin excel (*.xls;*.xlsx)|*.xls;*.xlsx";//MESLocalizedResources.DialogFilter;
            if (dialog.ShowDialog() == DialogResult.Cancel)
                return false;

            filePath = dialog.FileName;
            string extension = Path.GetExtension(filePath);
            string connectionString = @"Provider=Microsoft.Jet.OLEDB.4.0;Data Source='" + filePath + "';Extended Properties=\"Excel 8.0;HDR=YES;\"";
            if (extension.Equals(".xlsx"))
            {
                connectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source='" + filePath + "';Extended Properties=\"Excel 12.0;HDR=YES;\"";
            }
            BOSProgressBar.Start("Đang khởi tạo dữ liệu");
            DataSet ds = GetDataFromExcel(filePath, connectionString);
            System.Data.DataTable dt = ds.Tables[0];
            string tableName = string.Empty;
            AAColumnAliasController objColumnAliasController = new AAColumnAliasController();
            List<AAColumnAliasInfo> aliasImportsList = BOSApp.LstColumnAlias.Where(o => o.AATableName == "IPProducts").ToList();
            List<IPProductsInfo> listProductsInfo = new List<IPProductsInfo>();
            MappingToProductionItem(dt, listProductsInfo, aliasImportsList);
            BOSProgressBar.Close();

            guiImportProductItems guiFind = new guiImportProductItems(listProductsInfo, false);
            guiFind.Module = this;
            DialogResult rs = guiFind.ShowDialog();
            if (rs != DialogResult.OK)
                return false;

            return SaveSaleItemsFromImport(guiFind.ProductsList);
        }

        public DataSet GetDataFromExcel(string filePath, string connectionString)
        {
            DataSet ds = new DataSet();
            try
            {
                List<string> sheetNames = new List<string>();
                System.Data.OleDb.OleDbDataAdapter command;

                string commandTemplate = "SELECT * FROM [{0}]";
                string commandRun = string.Empty;
                using (OleDbConnection cn = new OleDbConnection(connectionString))
                {
                    cn.Open();
                    System.Data.DataTable dt = cn.GetSchema("Tables");
                    foreach (DataRow dr in dt.Rows)
                    {
                        sheetNames.Add(dr["TABLE_NAME"].ToString());
                    }
                    sheetNames.ForEach(o =>
                    {
                        commandRun = string.Format(commandTemplate, o);
                        command = new System.Data.OleDb.OleDbDataAdapter(commandRun, cn);
                        command.TableMappings.Add("Table", o);
                        command.Fill(ds);
                    });
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
            return ds;
        }

        public void MappingToProductionItem(System.Data.DataTable dt, List<IPProductsInfo> productList, List<AAColumnAliasInfo> aliasImportsList)
        {
            IPProductsInfo objProductsInfo = new IPProductsInfo();
            foreach (DataRow row in dt.Rows)
            {
                objProductsInfo = (IPProductsInfo)GetObjectFromDataRow(row, objProductsInfo.GetType(), aliasImportsList);
                if (objProductsInfo != null && ( !string.IsNullOrWhiteSpace(objProductsInfo.IPProductNo) || !string.IsNullOrWhiteSpace(objProductsInfo.IPProductNoOfOldSys)))
                {
                    productList.Add(objProductsInfo);
                }
            }
        }

        public object GetObjectFromDataRow(DataRow row, Type type, List<AAColumnAliasInfo> aliasList)
        {
            object obj = type.InvokeMember("", System.Reflection.BindingFlags.CreateInstance, null, null, null);
            string columnName = string.Empty;
            AAColumnAliasInfo objColumnAliasInfo = new AAColumnAliasInfo();
            decimal decimalValue = 0;
            bool isConverter = false;
            foreach (DataColumn column in row.Table.Columns)
            {
                isConverter = false;
                object objValue = row[column];
                objColumnAliasInfo = aliasList.Where(o => o.AAColumnAliasCaption.ToLower() == column.ColumnName.ToLower()).FirstOrDefault();
                if (objColumnAliasInfo == null)
                    continue;

                PropertyInfo property = obj.GetType().GetProperty(objColumnAliasInfo.AAColumnAliasName);
                if (property != null)
                    property.SetValue(obj, ToPropertyDataType(column.DataType, property.PropertyType, objValue), null);
            }
            return obj;
        }

        public object ToPropertyDataType(Type fromType, Type toType, object objValue)
        {
            if (toType.Equals(typeof(string)) || toType.Equals(typeof(String)))
            {
                return objValue == null ? string.Empty : objValue.ToString().Trim();
            }
            if (objValue == null)
                return objValue;

            if (fromType.Equals(toType))
                return objValue;

            if (toType.Equals(typeof(decimal)) || toType.Equals(typeof(Decimal)))
            {
                decimal value = 0;
                Decimal.TryParse(objValue.ToString(), out value);
                return Math.Round(value, 5, MidpointRounding.AwayFromZero);
            }
            if (toType.Equals(typeof(int)))
            {
                decimal value = 0;
                Decimal.TryParse(objValue.ToString(), out value);
                return (int)value;
            }
            if (toType.Equals(typeof(bool)) || toType.Equals(typeof(Boolean)))
            {
                return !string.IsNullOrWhiteSpace(objValue.ToString());
            }
            return objValue;
        }

        #endregion
        #endregion

        public void ValidateItemToSaleOrderItemsList(ARSaleOrderItemsInfo objSaleOrderItemsInfo)
        {

            if (objSaleOrderItemsInfo.FK_ICProductID > 0)
            {
                SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
                ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)CurrentModuleEntity.MainObject;

                ARCustomersController objCustomersController = new ARCustomersController();
                ARCustomersInfo objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectByID(mainObject.FK_ARCustomerID);
                //ICProductsController objProductsController = new ICProductsController();
                //ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);

                ICProductsController objProductsController = new ICProductsController();
                ICProductsInfo product = (ICProductsInfo)objProductsController.GetObjectByID(objSaleOrderItemsInfo.FK_ICProductID);
                decimal qty = objSaleOrderItemsInfo.ARSaleOrderItemProductQty;
                objSaleOrderItemsInfo = ToSaleOrderItemsInfo(product);
                string projectBKV = BOSApp.GetDisplayTextFromConfigValue("ProjectBKV", "true");
                bool isProjectBKV = bool.Parse(string.IsNullOrWhiteSpace(projectBKV) ? "false" : projectBKV);
                if (IsEditAfterPayment)
                {
                    objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice = 0;
                    objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice2 = 0;
                    objSaleOrderItemsInfo.ARSaleOrderItemProductTaxPercent = 0;
                    objSaleOrderItemsInfo.ARSaleOrderItemTaxAmount = 0;
                    objSaleOrderItemsInfo.ARSaleOrderItemTotalAmount = 0;
                    objSaleOrderItemsInfo.ARSaleOrderItemTotalCost = 0;
                    objSaleOrderItemsInfo.ARSaleOrderItemWorkTotalAmount = 0;
                    objSaleOrderItemsInfo.ARSaleOrderItemDiscountAmount = 0;
                    objSaleOrderItemsInfo.ARSaleOrderItemNetAmount = 0;
                    objSaleOrderItemsInfo.ARSaleOrderItemProductDiscount = 0;
                    objSaleOrderItemsInfo.ARSaleOrderItemProductGroupDiscount = 0;
                    objSaleOrderItemsInfo.ARSaleOrderItemProductUnitCost = 0;
                    objSaleOrderItemsInfo.ARSaleOrderItemPrice = 0;
                    objSaleOrderItemsInfo.ICProductUnitPrice = objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice;
                    objSaleOrderItemsInfo.ARSaleOrderItemProductTargetPrice = 0;
                    objSaleOrderItemsInfo.ARSaleOrderItemProductQty = qty;
                    if (mainObject.STToolbarActionName.Equals("NewFromWood") && product != null)
                    {
                        objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice = product.ICProductPrice01;
                        BOSApp.RoundByCurrency(objSaleOrderItemsInfo, mainObject.FK_GECurrencyID);
                    }
                    if (mainObject.STToolbarActionName == "Manual")
                    {
                        if (product != null && product.ICProductType == ProductType.Product.ToString())
                        {
                            if (isProjectBKV)
                            {
                                objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice = BOSApp.CalculaterProductUnitPrice(product,
                                                                                                objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice,
                                                                                                qty,
                                                                                                objSaleOrderItemsInfo.FK_ICMeasureUnitID,
                                                                                                objCustomersInfo != null ? objCustomersInfo.ARCustomerID : 0,
                                                                                                mainObject.ARSaleOrderDate,
                                                                                                mainObject.FK_GECurrencyID);
                                objSaleOrderItemsInfo.ICProductUnitPrice = objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice;
                                BOSApp.RoundByCurrency(objSaleOrderItemsInfo, mainObject.FK_GECurrencyID);
                                objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice2 = mainObject.ARSaleOrderExchangeRate2 > 0 ? objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice * mainObject.ARSaleOrderExchangeRate / mainObject.ARSaleOrderExchangeRate2 : 0;
                            }
                            else
                            {
                                decimal sumQty = entity.ARSaleOrderItemsList.Where(o => o.FK_ICProductID == objSaleOrderItemsInfo.FK_ICProductID && o.FK_ICMeasureUnitID == objSaleOrderItemsInfo.FK_ICMeasureUnitID).Sum(p => p.ARSaleOrderItemProductQty);
                                objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice = BOSApp.CalculaterProductUnitPrice(product,
                                                                                                objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice,
                                                                                                sumQty + qty,
                                                                                                objSaleOrderItemsInfo.FK_ICMeasureUnitID,
                                                                                                objCustomersInfo != null ? objCustomersInfo.ARCustomerID : 0,
                                                                                                mainObject.ARSaleOrderDate,
                                                                                                mainObject.FK_GECurrencyID);
                                objSaleOrderItemsInfo.ICProductUnitPrice = objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice;
                                BOSApp.RoundByCurrency(objSaleOrderItemsInfo, mainObject.FK_GECurrencyID);
                                objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice2 = mainObject.ARSaleOrderExchangeRate2 > 0 ? objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice * mainObject.ARSaleOrderExchangeRate / mainObject.ARSaleOrderExchangeRate2 : 0;

                                if (entity.ARSaleOrderItemsList.Where(o => o.FK_ICProductID == objSaleOrderItemsInfo.FK_ICProductID && o.FK_ICMeasureUnitID == objSaleOrderItemsInfo.FK_ICMeasureUnitID).Count() > 0)
                                {
                                    entity.ARSaleOrderItemsList.Where(o => o.FK_ICProductID == objSaleOrderItemsInfo.FK_ICProductID && o.FK_ICMeasureUnitID == objSaleOrderItemsInfo.FK_ICMeasureUnitID).ToList().ForEach(o =>
                                    {
                                        o.ARSaleOrderItemProductUnitPrice = BOSApp.CalculaterProductUnitPrice(product,
                                                                                                o.ARSaleOrderItemProductUnitPrice,
                                                                                                sumQty + qty,
                                                                                                o.FK_ICMeasureUnitID,
                                                                                                objCustomersInfo != null ? objCustomersInfo.ARCustomerID : 0,
                                                                                                mainObject.ARSaleOrderDate,
                                                                                                mainObject.FK_GECurrencyID);
                                        o.ICProductUnitPrice = o.ARSaleOrderItemProductUnitPrice;
                                        BOSApp.RoundByCurrency(o, mainObject.FK_GECurrencyID);
                                        o.ARSaleOrderItemProductUnitPrice2 = mainObject.ARSaleOrderExchangeRate2 > 0 ? o.ARSaleOrderItemProductUnitPrice * mainObject.ARSaleOrderExchangeRate / mainObject.ARSaleOrderExchangeRate2 : 0;
                                    });
                                }
                            }
                        }
                    }
                    entity.SetProductPriceByProductUnitPrice(objSaleOrderItemsInfo);
                    entity.ARSaleOrderItemsList.Add(objSaleOrderItemsInfo);
                }
                else
                {
                    if (objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice == 0 || string.IsNullOrEmpty(objSaleOrderItemsInfo.ARSaleOrderItemVirtualID) || mainObject.STToolbarActionName == "Manual")
                        ChangeItemUnitPriceBelongPriceLevel(objSaleOrderItemsInfo);
                    objSaleOrderItemsInfo.ARSaleOrderItemProductQty = qty;
                    if (product != null && product.ICProductType == ProductType.Product.ToString())
                    {
                        if (isProjectBKV)
                        {
                            objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice = BOSApp.CalculaterProductUnitPrice(product,
                                                                                            objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice,
                                                                                            qty,
                                                                                            objSaleOrderItemsInfo.FK_ICMeasureUnitID,
                                                                                            objCustomersInfo != null ? objCustomersInfo.ARCustomerID : 0,
                                                                                            mainObject.ARSaleOrderDate,
                                                                                            mainObject.FK_GECurrencyID);
                            objSaleOrderItemsInfo.ICProductUnitPrice = objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice;
                            BOSApp.RoundByCurrency(objSaleOrderItemsInfo, mainObject.FK_GECurrencyID);
                            objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice2 = mainObject.ARSaleOrderExchangeRate2 > 0 ? objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice * mainObject.ARSaleOrderExchangeRate / mainObject.ARSaleOrderExchangeRate2 : 0;
                        }
                        else
                        {
                            decimal sumQty = entity.ARSaleOrderItemsList.Where(o => o.FK_ICProductID == objSaleOrderItemsInfo.FK_ICProductID && o.FK_ICMeasureUnitID == objSaleOrderItemsInfo.FK_ICMeasureUnitID).Sum(p => p.ARSaleOrderItemProductQty);
                            if (objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice == 0 || string.IsNullOrEmpty(objSaleOrderItemsInfo.ARSaleOrderItemVirtualID) || mainObject.STToolbarActionName == "Manual")
                                objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice = BOSApp.CalculaterProductUnitPrice(product,
                                                                                            objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice,
                                                                                            sumQty + qty,
                                                                                            objSaleOrderItemsInfo.FK_ICMeasureUnitID,
                                                                                            objCustomersInfo != null ? objCustomersInfo.ARCustomerID : 0,
                                                                                            mainObject.ARSaleOrderDate,
                                                                                            mainObject.FK_GECurrencyID);
                            objSaleOrderItemsInfo.ICProductUnitPrice = objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice;
                            BOSApp.RoundByCurrency(objSaleOrderItemsInfo, mainObject.FK_GECurrencyID);
                            objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice2 = mainObject.ARSaleOrderExchangeRate2 > 0 ? objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice * mainObject.ARSaleOrderExchangeRate / mainObject.ARSaleOrderExchangeRate2 : 0;

                            if (entity.ARSaleOrderItemsList.Where(o => o.FK_ICProductID == objSaleOrderItemsInfo.FK_ICProductID && o.FK_ICMeasureUnitID == objSaleOrderItemsInfo.FK_ICMeasureUnitID).Count() > 0)
                            {
                                entity.ARSaleOrderItemsList.Where(o => o.FK_ICProductID == objSaleOrderItemsInfo.FK_ICProductID && o.FK_ICMeasureUnitID == objSaleOrderItemsInfo.FK_ICMeasureUnitID).ToList().ForEach(o =>
                                {
                                    if (objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice == 0 || string.IsNullOrEmpty(objSaleOrderItemsInfo.ARSaleOrderItemVirtualID) || mainObject.STToolbarActionName == "Manual")
                                        o.ARSaleOrderItemProductUnitPrice = BOSApp.CalculaterProductUnitPrice(product,
                                                                                            o.ARSaleOrderItemProductUnitPrice,
                                                                                            sumQty + qty,
                                                                                            o.FK_ICMeasureUnitID,
                                                                                            objCustomersInfo != null ? objCustomersInfo.ARCustomerID : 0,
                                                                                            mainObject.ARSaleOrderDate,
                                                                                            mainObject.FK_GECurrencyID);
                                    o.ICProductUnitPrice = o.ARSaleOrderItemProductUnitPrice;
                                    BOSApp.RoundByCurrency(o, mainObject.FK_GECurrencyID);
                                    o.ARSaleOrderItemProductUnitPrice2 = mainObject.ARSaleOrderExchangeRate2 > 0 ? o.ARSaleOrderItemProductUnitPrice * mainObject.ARSaleOrderExchangeRate / mainObject.ARSaleOrderExchangeRate2 : 0;
                                });
                            }
                        }
                    }
                    if (mainObject.STToolbarActionName.Equals("NewFromWood") && product != null)
                    {
                        if (objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice > 0 && string.IsNullOrEmpty(objSaleOrderItemsInfo.ARSaleOrderItemVirtualID))
                            objSaleOrderItemsInfo.ARSaleOrderItemProductUnitPrice = product.ICProductPrice01;
                        BOSApp.RoundByCurrency(objSaleOrderItemsInfo, mainObject.FK_GECurrencyID);
                    }
                    if (string.IsNullOrEmpty(objSaleOrderItemsInfo.ARSaleOrderItemVirtualID))
                        objSaleOrderItemsInfo.ARSaleOrderItemVirtualID = Guid.NewGuid().ToString();
                    entity.SetProductPriceByProductUnitPrice(objSaleOrderItemsInfo);
                    entity.ARSaleOrderItemsList.Add(objSaleOrderItemsInfo);
                }
            }
        }
        public List<ICProductsInfo> LoadProductList()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            ICProductsController objProductsController = new ICProductsController();
            List<ICProductsInfo> listProduct = new List<ICProductsInfo>();
            ICProductTypeMappingsController controller = new ICProductTypeMappingsController();
            List<ICProductTypeMappingsInfo> listMappings = controller.GetAllProductTypeBySaleOrderType(mainObject.ARSaleOrderProductType);
            CSCompanysInfo objCompanysInfo = BOSApp.CurrentCompanyInfo;
            string sellingPriceMethod = objCompanysInfo.CSSourceSellingPriceMethod;
            if (mainObject.STToolbarActionName == "NewFromWood" || mainObject.STToolbarActionName == "NewFromOther")
            {
                if (listMappings != null && listMappings.Count() > 0)
                {
                    listProduct = objProductsController.GetListProductBySaleOrderType(mainObject.ARSaleOrderProductType);
                }
                else
                {
                    listProduct = objProductsController.GetAllProductForSaleToLookupEditBySaleOrderProductType(mainObject.ARSaleOrderProductType);
                }
            }
            else
            {
                if (sellingPriceMethod == ADConfigValueUtility.cstSourceSellingPriceMethodMasterData)
                {
                    if (listMappings != null && listMappings.Count() > 0)
                    {
                        listProduct = objProductsController.GetListProductBySaleOrderType(mainObject.ARSaleOrderProductType);
                    }
                    else
                    {
                        listProduct = objProductsController.GetAllProductForSaleToLookupEditBySaleOrderProductType(mainObject.ARSaleOrderProductType);
                    }
                }
                else if (sellingPriceMethod == ADConfigValueUtility.cstSourceSellingPriceMethodPriceSheet)
                {
                    listProduct = objProductsController.GetAllProductListByInActivePriceSheet(mainObject.FK_ARCustomerID, mainObject.ARSaleOrderDate, mainObject.ARSaleOrderProductType);
                }
            }
            return listProduct;
        }
        public void SetDefaultMainObjectBySomeCreteria()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            ARCustomersController objCustomersController = new ARCustomersController();
            if (mainObject.FK_ACObjectID > 0 && mainObject.ARObjectType == ObjectType.Customer.ToString())
            {
                ARCustomersInfo objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectByID(mainObject.FK_ACObjectID);
                if (objCustomersInfo != null)
                {
                    ARCustomerTypeAccountConfigsController objCTACsController = new ARCustomerTypeAccountConfigsController();
                    ARCustomerTypeAccountConfigsInfo objCTACsInfo = (ARCustomerTypeAccountConfigsInfo)objCTACsController.GetObjectByID(objCustomersInfo.FK_ARCustomerTypeAccountConfigID);
                    if (objCTACsInfo != null)
                    {
                        mainObject.ARSaleOrderSaleType = objCTACsInfo.ARCustomerTypeAccountConfigSaleType;
                    }
                    ARCustomerSaleOrderTypeConfigsController objCSOTypeConfigsController = new ARCustomerSaleOrderTypeConfigsController();
                    ARCustomerSaleOrderTypeConfigsInfo objCSOTypeConfigsInfo = (ARCustomerSaleOrderTypeConfigsInfo)objCSOTypeConfigsController.GetSaleOrderTypeByCustomerType(objCustomersInfo.ARCustomerTypeCombo);
                    if (objCSOTypeConfigsInfo != null)
                    {
                        mainObject.ARSaleOrderType = objCSOTypeConfigsInfo.ARSaleOrderType;
                    }    
                }    
            }
            CSCompanyBanksController objCompanyBanksController = new CSCompanyBanksController();
            List<CSCompanyBanksInfo> listCompanyBank = (List<CSCompanyBanksInfo>)objCompanyBanksController.GetListCompanyBanksBySaleType(mainObject.ARSaleOrderSaleType);
            if (listCompanyBank != null && listCompanyBank.Count > 0)
            {
                mainObject.FK_CSCompanyBankID = listCompanyBank.Select(o => o.CSCompanyBankID).FirstOrDefault();
            }
            entity.UpdateMainObjectBindingSource();
        }
        public void SetDefaultSaleOrderTaxPercent()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            GEVATsController objVATsController = new GEVATsController();
            List<int> productGroupIds = new List<int>();
            productGroupIds = entity.ARSaleOrderItemsList.Select(o => o.FK_ICProductGroupID).Distinct().ToList();
            if (mainObject.ARSaleOrderSaleType == SaleType.International.ToString())
            {
                mainObject.ARSaleOrderTaxPercent = 0;
            }
            else
            {
                List<GEVATsInfo> listVATs = objVATsController.GetListObjectByListProductGroup(productGroupIds);
                if (listVATs != null && listVATs.Count > 0)
                {
                    if (listVATs.GroupBy(o => o.GEVATPercentValue).Count() == 1)
                    {
                        mainObject.ARSaleOrderTaxPercent = listVATs.Select(o => o.GEVATPercentValue).FirstOrDefault();
                    }
                    else
                    {
                        mainObject.ARSaleOrderTaxPercent = 0;
                    }
                }
                else
                {
                    mainObject.ARSaleOrderTaxPercent = 0;
                }
            }
            UpdateTotalAmount(entity.ARSaleOrderItemsList);
            entity.UpdateMainObjectBindingSource();
        }
        public void CalculatedTotalProductQtyByPackageVolumnConfig(ARSaleOrderItemsInfo item)
        {
            SaleOrderEntities entity = (SaleOrderEntities) CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;

            ICProductsForViewInfo product = BOSApp.CurrentProductList.FirstOrDefault(o => o.ICProductID == item.FK_ICProductID);
            bool isWoodType = BOSApp.WoodTypesList.Contains(product.ICProductType);
            if (isWoodType && item.ARSaleOrderItemLength * item.ARSaleOrderItemHeight * item.ARSaleOrderItemWidth * item.ARSaleOrderItemWoodQty != 0M)
            {
                item.ARSaleOrderItemProductQty = item.ARSaleOrderItemLength * item.ARSaleOrderItemHeight * item.ARSaleOrderItemWidth * item.ARSaleOrderItemWoodQty / 1000000000;
                item.ARSaleOrderItemProductExchangeQty = item.ARSaleOrderItemProductQty * item.ARSaleOrderItemProductFactor;
                item.ARSaleOrderItemProductQty = Math.Round(item.ARSaleOrderItemProductQty, RoundingNumber.FormatN5, MidpointRounding.AwayFromZero);
                item.ARSaleOrderItemProductExchangeQty = Math.Round(item.ARSaleOrderItemProductExchangeQty, RoundingNumber.FormatN5, MidpointRounding.AwayFromZero);
                entity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
            }    
        }
        public void PrintSaleOrderWoodHP()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                RP_PrintSaleOrderWoodHP report = new RP_PrintSaleOrderWoodHP();
                InitPrintSaleOrderWoodHP(report, Toolbar.CurrentObjectID);
                guiReportPreview viewer = new guiReportPreview(report);
                viewer.Show();
            }
        }
        private static void InitPrintSaleOrderWoodHP(XtraReport report, int soID)
        {
            ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
            ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)objSaleOrdersController.GetObjectByID(soID);
            ADReportsController objReportsController = new ADReportsController();
            List<ARSaleOrderItemsInfo> soiList = objReportsController.GetListSaleOrderItemForReportPrintSaleOrderWoodHPBySOID(soID);
            report.DataSource = soiList;
        }

        public void UpdateOtherFeeAfterComplete()
        {
            SaleOrderEntities entity = (SaleOrderEntities)CurrentModuleEntity;
            ARSaleOrdersInfo mainObject = (ARSaleOrdersInfo)entity.MainObject;
            ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
            List<ICShipmentItemsInfo> checkList = objShipmentItemsController.GetShipmentSaleOrderItemBySaleOrderID(mainObject.ARSaleOrderID);
            if (checkList.Count() > 0)
            {
                MessageBox.Show(string.Format("Không thể cập nhật do đã tạo các chứng từ sau:" 
                                + Environment.NewLine + "-{0}", string.Join("\n-", checkList.Select(o => o.ICShipmentNo).Distinct().ToArray()))
                                , CommonLocalizedResources.MessageBoxDefaultCaption
                                , MessageBoxButtons.OK
                                , MessageBoxIcon.Information);
                return;
            }

            entity.InvalidateMainObject(mainObject.ARSaleOrderID);
            entity.InvalidateModuleObjects(mainObject.ARSaleOrderID);

            List<ARSaleOrderItemOtherFeesInfo> listOtherFees = (List<ARSaleOrderItemOtherFeesInfo>)entity.SaleOrderItemOtherFeeList.Clone();
            List<ARSaleOrderItemAllocationFeesInfo> listAllocationFees = (List<ARSaleOrderItemAllocationFeesInfo>)entity.SaleOrderItemAllocationFeeList.Clone();
            guiUpdateOtherFees guiUpdate = new guiUpdateOtherFees(listOtherFees, listAllocationFees);
            guiUpdate.Module = this;            
            DialogResult rs = guiUpdate.ShowDialog();
            
            if (rs == DialogResult.OK)
            {
                guiUpdate.DeleteAllocationFeesList.DeleteItemObjects();
                guiUpdate.DeleteOtherFeesList.DeleteItemObjects();

                entity.SaleOrderItemAllocationFeeList.Invalidate(guiUpdate.AllocationFeesList);
                entity.SaleOrderItemOtherFeeList.Invalidate(guiUpdate.OtherFeesList);

                for (int i = 0; i < entity.SaleOrderItemAllocationFeeList.Count; i++)
                {
                    if (entity.SaleOrderItemAllocationFeeList[i].FK_ICProductID <= 0)
                    {
                        entity.SaleOrderItemAllocationFeeList.RemoveAt(i);
                        i--;
                        entity.SaleOrderItemAllocationFeeList.GridControl?.RefreshDataSource();
                    }
                    else if (entity.SaleOrderItemAllocationFeeList[i].ARSaleOrderItemAllocationFeeFeePercent < 0)
                    {
                        entity.SaleOrderItemAllocationFeeList[i].ARSaleOrderItemAllocationFeeFeePercent = 0M;
                        entity.SaleOrderItemAllocationFeeList[i].ARSaleOrderItemAllocationFeeFeeAmount = 0M;
                        entity.SaleOrderItemAllocationFeeList.GridControl?.RefreshDataSource();
                    }
                }
                UpdateTotalSaleOrderItemAllocationFee();
                entity.UpdateTotalAmount(entity.ARSaleOrderItemsList);
                UpdatePaymentTime();
                UpdateCommissions();
                foreach (ARSaleOrderPaymentTimesInfo paymentTime in entity.ARSaleOrderPaymentTimesList)
                {
                    paymentTime.ARSaleOrderPaymentTimeBalanceDue = paymentTime.ARSaleOrderPaymentTimeAmount - paymentTime.ARSaleOrderPaymentTimeDepositBalance;
                }
                entity.SaveMainObject();
                entity.SaveModuleObjects();
                if (mainObject.ARSaleOrderStatus != SaleOrderStatus.New.ToString()
                    && mainObject.ARSaleOrderStatus != SaleOrderStatus.Canceled.ToString())
                {
                    GLHelper.PostedTransactions(this.Name, mainObject.ARSaleOrderID, ModulePostingType.InvoiceTrans);
                }
                MessageBox.Show("Cập nhật thành công!"
                                , CommonLocalizedResources.MessageBoxDefaultCaption
                                , MessageBoxButtons.OK
                                , MessageBoxIcon.Information);
                Invalidate(mainObject.ARSaleOrderID);
            }
        }    
    }
    #endregion
}