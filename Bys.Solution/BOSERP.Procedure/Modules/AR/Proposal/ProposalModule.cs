using BOSCommon;
using BOSCommon.Constants;
using BOSCommon.Extensions.Helper;
using BOSComponent;
using BOSERP.Utilities;
using BOSLib;
using BOSReport;
using DevExpress.XtraReports.UI;
using DevExpress.XtraRichEdit;
using DevExpress.XtraTab;
using Localization;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Windows.Forms;

namespace BOSERP.Modules.Proposal
{
    #region ProposalModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ProposalModule
    //Created Date:Friday, August 20, 2010
    //-----------------------------------------------------------

    public class ProposalModule : BaseTransactionModule
    {
        #region ProposalStatus constant
        public const string ApproveProposalButtonTag = "ApproveProposal";
        public const string ARProposalItemWorksGridControlName = "fld_dgcARProposalItemWorksGridControl";
        public const string ARProposalItemWorkMaterialsGridControlName = "fld_dgcARProposalItemWorkMaterialsGridControl";
        public const string ARProposalItemWorkAssetsGridControlName = "fld_dgcARProposalItemWorkAssetsGridControl";
        public const string ARProposalItemCostsGridControlName = "fld_dgcARProposalItemCostGridControl";
        public const string SearchItemWorkLookupEditControlName = "fld_lkeFK_ICProductItemWorkID";
        public const string ARProposalItemsGridControlName = "fld_dgcARProposalItemsGridControl";
        public const string ARProposalItemWorkTasksGridControlName = "fld_dgcARProposalItemWorkTasksGridControl";
        public const string ARProposalPaymentTimesGridControlName = "fld_dgcARProposalPaymentTimes";
        public const string SearchBranchLookupEditControlName = "fld_lkeFK_BRBranchID";
        public const string ACObjectLookupEditControlName = "fld_lkeFK_ACObjectID";
        public const string Prospect = "Prospect";
        public const string TabControlName = "fld_bosTabControl";
        public const string ARProposalTemplateItemsInfosTreeListControlName = "fld_trlTemplateItemsTreeListControl";
        public const string PrefixSection = "S-";
        public const string PrefixWork = "W-";
        public const string AddSectionButtonControlName = "fld_btnAddProductSection";
        public const string AddWorkButtonControlName = "fld_btnAddProductWork";
        public const string ProductPicturePictureBoxName = "fld_pteARProposalItemProductPicture";
        public const string ProposalItemsGridControlName = "fld_dgcARProposalItemsGridControl";
        public const string stProposalDescRichEdit = "fld_recARProposalDesc";
        public const string PaymentMethodControlName = "fld_lkeARPaymentMethodCombo";
        public const string ProductAttributeControlName = "fld_lkeFK_ICProductAttributeID";

        public BOSLookupEdit SearchItemWorkLookupEditControl = null;
        public ARProposalItemWorksGridControl ARProposalItemWorksGridControl;
        public ARProposalItemWorkMaterialsGridControl ARProposalItemWorkMaterialsGridControl;
        public ARProposalItemWorkAssetsGridControl ARProposalItemWorkAssetsGridControl;
        public ARProposalItemCostsGridControl ARProposalItemCostsGridControl;
        public ARProposalItemsGridControl ProposalItemsGridControl;
        public List<BRBranchsInfo> BranchList;
        public List<ADDataViewPermissionsInfo> CurrentModuleDataViewPermissionList;
        public BOSLookupEdit SearchBranchLookupEditControl;
        public BOSLookupEdit ACObjectLookupEditControl;
        public BOSTabControl TabControl;
        public ProposalTemplateItemsTreeListControl TemplateItemsTreeListControl;
        public BOSButton AddSectionButtonControl;
        public BOSButton AddWorkButtonControl;
        private BOSPictureEdit ProductPicturePictureBox;
        public BOSRichEditControl ProposalDescEditControl;
        BOSLookupEdit PaymentMethodLookupEditControl;
        public BOSLookupEdit ProductAttributeControl;

        public Dictionary<string, string> Operation = new Dictionary<string, string>()
            {
                {"Plus","+"},
                {"Minus","-"},
                {"Multi","*"},
                {"Split","/"},
            };
        #endregion

        public ProposalModule()
        {
            Name = "Proposal";
            CurrentModuleEntity = new ProposalEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();

            GetCurrentModuleDataViewPermission();
            ARProposalItemWorksGridControl = (ARProposalItemWorksGridControl)Controls[ARProposalItemWorksGridControlName];
            ARProposalItemWorkMaterialsGridControl = (ARProposalItemWorkMaterialsGridControl)Controls[ARProposalItemWorkMaterialsGridControlName];
            ARProposalItemWorkAssetsGridControl = (ARProposalItemWorkAssetsGridControl)Controls[ARProposalItemWorkAssetsGridControlName];
            ARProposalItemCostsGridControl = (ARProposalItemCostsGridControl)Controls[ARProposalItemCostsGridControlName];
            SearchBranchLookupEditControl = (BOSLookupEdit)Controls[ProposalModule.SearchBranchLookupEditControlName];
            ACObjectLookupEditControl = (BOSLookupEdit)Controls[ProposalModule.ACObjectLookupEditControlName];
            SearchBranchLookupEditControl.Properties.DataSource = BranchList;
            TabControl = (BOSTabControl)Controls[TabControlName];
            TemplateItemsTreeListControl = (ProposalTemplateItemsTreeListControl)Controls[ProposalModule.ARProposalTemplateItemsInfosTreeListControlName];
            VisibleTabPages();
            ProductPicturePictureBox = (BOSPictureEdit)Controls[ProductPicturePictureBoxName];
            ProposalItemsGridControl = (ARProposalItemsGridControl)Controls[ProposalItemsGridControlName];
            ProposalDescEditControl = (BOSRichEditControl)Controls[stProposalDescRichEdit];
            ProductAttributeControl = (BOSLookupEdit)Controls[ProductAttributeControlName];
            //AddSectionButtonControl = (BOSButton)Controls[AddSectionButtonControlName];
            //AddWorkButtonControl = (BOSButton)Controls[AddWorkButtonControlName];

            ADConfigValuesController objConfigValuesController = new ADConfigValuesController();
            PaymentMethodLookupEditControl = (BOSLookupEdit)Controls[PaymentMethodControlName];
            List<ADConfigValuesInfo> paymentMethodList = objConfigValuesController.GetADConfigValuesByKeyGroup("PaymentMethod");
            PaymentMethodLookupEditControl.Properties.DataSource = paymentMethodList.Where(o=> o.IsActive).ToList();
            PaymentMethodLookupEditControl.Properties.DisplayMember = "ADConfigText";
            PaymentMethodLookupEditControl.Properties.ValueMember = "ADConfigKeyValue";
        }

        public void VisibleTabPages()
        {
            XtraTabPage tabPage = TabControl.TabPages.Where(p => p.Name == "fld_tabPageDSCP").FirstOrDefault();
            if (tabPage != null)
                tabPage.PageVisible = false;
        }

        #region Add item to list

        public void AddItemToProposalItemsList()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalItemsInfo objProposalItemsInfo = (ARProposalItemsInfo)entity.ModuleObjects[TableName.ARProposalItemsTableName];
            ARProposalsInfo mainObject = (ARProposalsInfo)CurrentModuleEntity.MainObject;
            if (objProposalItemsInfo.FK_ICProductID <= 0)
                return;

            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(objProposalItemsInfo.FK_ICProductID);
            if (objProductsInfo == null)
                return;

            objProposalItemsInfo = ToProposalItemsInfo(objProductsInfo, objProposalItemsInfo, 0, 1);
            objProposalItemsInfo.ARProposalItemTotalCost = CheckTotalCost(objProposalItemsInfo);
            objProposalItemsInfo.ARProposalItemProductDiscount = mainObject.ARProposalDiscountPerCentForItem;

            CSCompanysInfo objCompanysInfo = BOSApp.CurrentCompanyInfo;
            if (mainObject.ARProposalSourceSellingPriceMethod == ProposalSourceSellingPriceMethod.Config.ToString()
                    && objCompanysInfo.CSSourceSellingPriceMethod == ADConfigValueUtility.cstSourceSellingPriceMethodPriceSheet)
            {
                ARPriceSheetItemsController objPriceSheetItemsController = new ARPriceSheetItemsController();
                List<ARPriceSheetItemsInfo> newParams = new List<ARPriceSheetItemsInfo>()
                    {
                        new ARPriceSheetItemsInfo (mainObject.FK_ARCustomerID, objProductsInfo.ICProductID, objProductsInfo.FK_ICProductBasicUnitID, mainObject.ARProposalDate)
                    };
                List<ARPriceSheetItemsInfo> listPriceSheets = objPriceSheetItemsController.GetPriceSheetInActiveByProductIDs(newParams);
                listPriceSheets = listPriceSheets.Where(o => o.FK_GECurrencyID == mainObject.FK_GECurrencyID).ToList();

                ARProposalItemsInfo proposalItemsInfo = (ARProposalItemsInfo)objProposalItemsInfo.Clone();
                if(listPriceSheets.Count > 0)
                {
                    foreach (ARPriceSheetItemsInfo item in listPriceSheets)
                    {
                        proposalItemsInfo = (ARProposalItemsInfo)objProposalItemsInfo.Clone();
                        proposalItemsInfo.ARProposalItemID = 0;
                        proposalItemsInfo = ToProposalItemsInfo(objProductsInfo, proposalItemsInfo, item.ARPriceSheetItemPrice, item.ARPriceSheetItemQty);
                        proposalItemsInfo.ARProposalItemTotalCost = CheckTotalCost(proposalItemsInfo);
                        proposalItemsInfo.ARProposalItemProductDiscount = mainObject.ARProposalDiscountPerCentForItem;
                        GenarateProposalAreasInfo(proposalItemsInfo);
                        proposalItemsInfo.FK_ARPriceSheetItemID = item.ARPriceSheetItemID;
                        proposalItemsInfo.FK_ARPriceSheetID = item.FK_ARPriceSheetID;
                        proposalItemsInfo.ARProposalItemDesc = item.ARPriceSheetItemCommand;
                        entity.ARProposalItemsList.Add(proposalItemsInfo);
                    }
                }    
                else
                {
                    GenarateProposalAreasInfo(objProposalItemsInfo);
                    entity.ARProposalItemsList.AddObjectToList();
                }    
            }
            else
            {
                GenarateProposalAreasInfo(objProposalItemsInfo);
                entity.ARProposalItemsList.AddObjectToList();
            }

            entity.UpdateTotalAmount();
            entity.ARProposalItemsList.GridControl?.RefreshDataSource();
            GeneratePaymentTime(mainObject.FK_GEPaymentTermID);
        }
        public void AddItemWork()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;

            ICProductWorkItemsController objProductWorkItemsController = new ICProductWorkItemsController();
            List<ICProductsInfo> productWorkList = ChooseProductWork();

            if (productWorkList != null
                && productWorkList.Count > 0)
            {
                ARProposalItemWorksInfo itemWork;
                foreach (ICProductsInfo work in productWorkList)
                {
                    itemWork = GenerateProposalItemWorkByProduct(work);
                    entity.ARProposalItemWorkList.Add(itemWork);
                    if (itemWork.ARProposalItemWorkProductChargeCheck)
                    {
                        entity.ARProposalItemCostList.Add(itemWork);
                    }
                }

                entity.UpdateTotalAmount();
                entity.ARProposalItemWorkList.GridControl?.RefreshDataSource();
                entity.ARProposalItemWorkAssetList.GridControl?.RefreshDataSource();
                entity.ARProposalItemWorkMaterialList.GridControl?.RefreshDataSource();
                entity.ARProposalItemCostList.GridControl?.RefreshDataSource();
                entity.ARProposalItemWorkTasksList.GridControl?.RefreshDataSource();
            }
        }

        public ARProposalItemWorksInfo GenerateProposalItemWorkByProduct(ICProductsInfo product)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalItemWorksInfo proposalItemWork = new ARProposalItemWorksInfo();
            proposalItemWork.FK_ICProductID = product.ICProductID;
            proposalItemWork.FK_ICProductGroupID = product.FK_ICProductGroupID;
            proposalItemWork.FK_ICDepartmentID = product.FK_ICDepartmentID;
            proposalItemWork.FK_ICMeasureUnitID = product.FK_ICProductBasicUnitID;
            proposalItemWork.ARProposalItemWorkProductNo = product.ICProductNo;
            proposalItemWork.ARProposalItemWorkProductName = product.ICProductName;
            proposalItemWork.ARProposalItemWorkProductDesc = product.ICProductDesc;
            proposalItemWork.ARProposalItemWorkProductQty = 1;
            proposalItemWork.ARProposalItemWorkProductType = ProductType.Work.ToString();
            proposalItemWork.ARProposalItemWorkProductUnitPrice = product.ICProductPrice01;
            proposalItemWork.ARProposalItemWorkSubTotalAmount = proposalItemWork.ARProposalItemWorkProductUnitPrice
                                                            * proposalItemWork.ARProposalItemWorkProductQty;
            proposalItemWork.ARProposalItemWorkTotalAmount = proposalItemWork.ARProposalItemWorkProductUnitPrice
                                                            * proposalItemWork.ARProposalItemWorkProductQty;
            proposalItemWork.ARProposalItemWorkProductChargeCheck = product.ICProductChargeCheck;

            proposalItemWork.ARProposalItemWorkMaterialList = new BOSList<ARProposalItemWorksInfo>();
            proposalItemWork.ARProposalItemWorkMaterialList.InitBOSList(entity,
                                              TableName.ARProposalItemsTableName,
                                              TableName.ARProposalItemWorksTableName,
                                              BOSList<ARProposalItemWorksInfo>.cstRelationForeign);

            proposalItemWork.ARProposalItemWorkAssetList = new BOSList<ARProposalItemWorksInfo>();
            proposalItemWork.ARProposalItemWorkAssetList.InitBOSList(entity,
                                              TableName.ARProposalItemsTableName,
                                              TableName.ARProposalItemWorksTableName,
                                              BOSList<ARProposalItemWorksInfo>.cstRelationForeign);

            ICProductWorkItemsController objProductWorkItemsController = new ICProductWorkItemsController();
            List<ICProductWorkItemsInfo> productWorkItemLists = objProductWorkItemsController.GetProductWorkItemsByProductWorkItemParentID(proposalItemWork.FK_ICProductID);

            List<ICProductWorkItemsInfo> productWorkMaterialItems = productWorkItemLists.Where(o => o.ICProductWorkItemType == ProductItemType.Material.ToString()).ToList();
            productWorkMaterialItems.ForEach(o =>
            {
                ARProposalItemWorksInfo objProposalItemWorkMaterialsInfo = ToProposalItemWorksInfo(o);
                objProposalItemWorkMaterialsInfo.ARProposalItemWorkProductType = ProductItemType.Material.ToString();
                entity.ARProposalItemWorkMaterialList.Add(objProposalItemWorkMaterialsInfo);
                proposalItemWork.ARProposalItemWorkMaterialList.Add(objProposalItemWorkMaterialsInfo);
                if (objProposalItemWorkMaterialsInfo.ARProposalItemWorkProductChargeCheck)
                {
                    entity.ARProposalItemCostList.Add(objProposalItemWorkMaterialsInfo);
                }
            });


            List<ICProductWorkItemsInfo> productWorkAssetItems = productWorkItemLists.Where(o => o.ICProductWorkItemType == ProductItemType.Asset.ToString()).ToList();
            productWorkAssetItems.ForEach(o =>
            {
                ARProposalItemWorksInfo objProposalItemWorkAssetsInfo = ToProposalItemWorksInfo(o);
                objProposalItemWorkAssetsInfo.ARProposalItemWorkProductType = ProductItemType.Asset.ToString();
                entity.ARProposalItemWorkAssetList.Add(objProposalItemWorkAssetsInfo);
                proposalItemWork.ARProposalItemWorkAssetList.Add(objProposalItemWorkAssetsInfo);
                if (objProposalItemWorkAssetsInfo.ARProposalItemWorkProductChargeCheck)
                {
                    entity.ARProposalItemCostList.Add(objProposalItemWorkAssetsInfo);
                }
            });

            ICProductTasksController taskController = new ICProductTasksController();
            List<ICProductTasksInfo> taskList = taskController.GetProductTasksByProductID(product.ICProductID);

            proposalItemWork.ARProposalItemWorkTasksList = new BOSList<ARProposalItemWorkTasksInfo>();
            proposalItemWork.ARProposalItemWorkTasksList.InitBOSList(entity,
                                              string.Empty,
                                              TableName.ARProposalItemWorkTasksTableName,
                                              BOSList<ARProposalItemWorkTasksInfo>.cstRelationNone);
            taskList.ForEach(t =>
            {
                ARProposalItemWorkTasksInfo task = ToProposalItemWorkTasksInfo(t);
                entity.ARProposalItemWorkTasksList.Add(task);
                proposalItemWork.ARProposalItemWorkTasksList.Add(task);
            });

            return proposalItemWork;
        }

        public void AddItemWorkToProposalItemWorkList(ARProposalItemsInfo objProposalItemsInfo)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ICProductWorkItemsController objProductWorkItemsController = new ICProductWorkItemsController();
            List<ICProductWorkItemsInfo> productWorkItems = objProductWorkItemsController.GetProductWorkItemsByProductWorkItemParentID(objProposalItemsInfo.FK_ICProductID);

            if (objProposalItemsInfo.ARProposalItemWorkList == null)
            {
                objProposalItemsInfo.ARProposalItemWorkList = new BOSList<ARProposalItemWorksInfo>();
                objProposalItemsInfo.ARProposalItemWorkList.InitBOSList(entity,
                                              TableName.ARProposalItemsTableName,
                                              TableName.ARProposalItemWorksTableName,
                                              BOSList<ARProposalItemWorksInfo>.cstRelationForeign);
            }
            if (entity.ARProposalItemCostList == null)
            {
                entity.ARProposalItemCostList = new BOSList<ARProposalItemWorksInfo>();
                entity.ARProposalItemCostList.InitBOSList(entity,
                                              TableName.ARProposalsTableName,
                                              TableName.ARProposalItemWorksTableName,
                                              BOSList<ARProposalItemWorksInfo>.cstRelationNone);
            }

            List<ICProductWorkItemsInfo> productWorkItemLists = objProductWorkItemsController.GetMaterialProductWorkItemsByProductWorkItemParentID(objProposalItemsInfo.FK_ICProductID);

            List<ICProductWorkItemsInfo> productWorkMaterialItems = productWorkItemLists.Where(o => o.ICProductWorkItemType == ProductItemType.Material.ToString()).ToList();
            productWorkMaterialItems.ForEach(o =>
            {
                ARProposalItemWorksInfo objProposalItemWorkMaterialsInfo = ToProposalItemWorksInfo(o);
                entity.ARProposalItemWorkMaterialList.Add(objProposalItemWorkMaterialsInfo);
                if (objProposalItemWorkMaterialsInfo.ARProposalItemWorkProductChargeCheck)
                {
                    entity.ARProposalItemCostList.Add(objProposalItemWorkMaterialsInfo);
                }
            });

            List<ICProductWorkItemsInfo> productWorkAssetItems = productWorkItemLists.Where(o => o.ICProductWorkItemType == ProductItemType.Asset.ToString()).ToList();
            productWorkAssetItems.ForEach(o =>
            {
                ARProposalItemWorksInfo objProposalItemWorkAssetsInfo = ToProposalItemWorksInfo(o);
                entity.ARProposalItemWorkAssetList.Add(objProposalItemWorkAssetsInfo);
                if (objProposalItemWorkAssetsInfo.ARProposalItemWorkProductChargeCheck)
                {
                    entity.ARProposalItemCostList.Add(objProposalItemWorkAssetsInfo);
                }
            });

            productWorkItems.ForEach(o =>
            {
                ARProposalItemWorksInfo objProposalItemWorksInfo = ToProposalItemWorksInfo(o);

                if (objProposalItemWorksInfo.ARProposalItemWorkMaterialList == null)
                {
                    objProposalItemWorksInfo.ARProposalItemWorkMaterialList = new BOSList<ARProposalItemWorksInfo>();
                    objProposalItemWorksInfo.ARProposalItemWorkMaterialList.InitBOSList(entity,
                                                  TableName.ARProposalItemWorksTableName,
                                                  TableName.ARProposalItemWorksTableName,
                                                  BOSList<ARProposalItemWorksInfo>.cstRelationParent);
                }
                List<ICProductWorkItemsInfo> itemMaterials = productWorkMaterialItems.Where(s => s.FK_ICProductWorkItemParentID == o.FK_ICProductWorkItemChildID).ToList();
                itemMaterials.ForEach(s => objProposalItemWorksInfo.ARProposalItemWorkMaterialList.Add(ToProposalItemWorksInfo(s)));

                if (objProposalItemWorksInfo.ARProposalItemWorkProductChargeCheck)
                {
                    entity.ARProposalItemCostList.Add(objProposalItemWorksInfo);
                }

                if (objProposalItemWorksInfo.ARProposalItemWorkAssetList == null)
                {
                    objProposalItemWorksInfo.ARProposalItemWorkAssetList = new BOSList<ARProposalItemWorksInfo>();
                    objProposalItemWorksInfo.ARProposalItemWorkAssetList.InitBOSList(entity,
                                                  TableName.ARProposalItemWorksTableName,
                                                  TableName.ARProposalItemWorksTableName,
                                                  BOSList<ARProposalItemWorksInfo>.cstRelationParent);
                }
                List<ICProductWorkItemsInfo> itemAssets = productWorkAssetItems.Where(s => s.FK_ICProductWorkItemParentID == o.FK_ICProductWorkItemChildID).ToList();
                itemAssets.ForEach(s => objProposalItemWorksInfo.ARProposalItemWorkAssetList.Add(ToProposalItemWorksInfo(s)));

                if (objProposalItemWorksInfo.ARProposalItemWorkProductChargeCheck)
                {
                    entity.ARProposalItemCostList.Add(objProposalItemWorksInfo);
                }

                entity.ARProposalItemWorkList.Add(objProposalItemWorksInfo);
            });
            objProposalItemsInfo.ARProposalItemTotalCost = entity.ARProposalItemCostList
                                                                                  .Where(o => o.ARProposalItemWorkProductChargeCheck)
                                                                                  .Sum(o => o.ARProposalItemWorkTotalAmount);

            ARProposalItemWorksGridControl?.RefreshDataSource();
            ARProposalItemWorkMaterialsGridControl?.RefreshDataSource();
            ARProposalItemWorkAssetsGridControl?.RefreshDataSource();
            ARProposalItemCostsGridControl?.RefreshDataSource();
        }

        public void AddCollectionToProposal()
        {
            if (IsEditable())
            {
                ActionEdit();
            }
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo objProposalInfo = (ARProposalsInfo)CurrentModuleEntity.MainObject;

            ICCollectionsController objCollectionController = new ICCollectionsController();
            List<ICCollectionsInfo> collectionList = (List<ICCollectionsInfo>)objCollectionController.GetListFromDataSet(objCollectionController.GetAllObjects());

            guiAddCollectionToProposal<ICCollectionsInfo> guiAddCollectionToProposal = new guiAddCollectionToProposal<ICCollectionsInfo>(collectionList, 0);
            guiAddCollectionToProposal.Module = this;
            guiAddCollectionToProposal.ShowDialog();
            if (guiAddCollectionToProposal.DialogResult != DialogResult.OK)
                return;

            List<ICCollectionsInfo> results = guiAddCollectionToProposal.SelectedObjects.ToList();
            if (results.Count == 0)
                return;

            ICCollectionItemsController objCollectionItemController = new ICCollectionItemsController();
            ICProductsController objProductController = new ICProductsController();
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            ICCollectionItemsInfo objcollectionItemInfo = new ICCollectionItemsInfo();
            ICProductsController objProductsController = new ICProductsController();
            List<ICCollectionItemsInfo> collectionItemList;
            ARProposalItemsInfo objProposalItemsInfo;
            ARProposalItemWorksInfo objProposalItemWorksInfo;
            results.ForEach(o =>
            {
                collectionItemList = objCollectionItemController.GetCollectionItemListWithProductGroupIDByCollectionID(o.ICCollectionID);
                collectionItemList.Where(s => s.ICCollectionItemProductType == ProductType.Product.ToString()).ToList().ForEach(i =>
                {
                    objProductsInfo = (ICProductsInfo)objProductsController.GetProductWithDiscountByID(i.FK_ICProductID, objProposalInfo.ARProposalDate);
                    if (objProductsInfo == null)
                    {
                        objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(i.FK_ICProductID);
                    }
                    if (objProductsInfo == null)
                        return;
                    objProposalItemsInfo = ToProposalItemsInfo(i);
                    if (objProductsInfo.ICProductCriteriaItemUnitPrice > 0)
                    {
                        objProposalItemsInfo.ARProposalItemProductUnitPrice = objProductsInfo.ICProductCriteriaItemUnitPrice;
                        objProposalItemsInfo.ARProposalItemTotalAmount = objProductsInfo.ICProductCriteriaItemUnitPrice * objProposalItemsInfo.ARProposalItemProductQty;
                        objProposalItemsInfo.ARProposalItemPrice = objProductsInfo.ICProductCriteriaItemUnitPrice * objProposalItemsInfo.ARProposalItemProductQty;
                    }
                    GenarateProposalAreasInfo(objProposalItemsInfo);
                    entity.ARProposalItemsList.Add(objProposalItemsInfo);
                });

                //collectionItemList.Where(s => s.ICCollectionItemProductType != ProductType.Product.ToString()).ToList().ForEach(i =>
                //{
                //    objProposalItemWorksInfo = ToProposalItemWorksInfo(i);
                //    entity.ARProposalItemWorkExternalList.Add(objProposalItemWorksInfo);
                //    entity.ARProposalItemCostList.Add(objProposalItemWorksInfo);
                //});
            });

            entity.ARProposalItemsList.GridControl?.RefreshDataSource();
            entity.UpdateTotalAmount();
            GeneratePaymentTime(objProposalInfo.FK_GEPaymentTermID);
        }

        public void AddProductToProposalItemWorksList()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo objProposalsInfo = (ARProposalsInfo)CurrentModuleEntity.MainObject;
            ICProductsController objProductsController = new ICProductsController();
            List<ICProductsInfo> productWorkList = objProductsController.GetListProductByProductType(ProductType.Work.ToString());
            List<string> productNoList = entity.ARProposalItemWorkList.Select(o => o.ARProposalItemWorkProductNo).ToList();
            guiAddProduct<ICProductsInfo> guiAddProduct = new guiAddProduct<ICProductsInfo>(productWorkList, productNoList);
            guiAddProduct.Module = this;
            guiAddProduct.ShowDialog();
            if (guiAddProduct.DialogResult != DialogResult.OK)
                return;

            IList<ICProductsInfo> results = guiAddProduct.SelectedObjects;
            if (results.Count == 0)
                return;

            if (!Toolbar.IsEditAction() && !Toolbar.IsNewAction())
                ActionEdit();
            List<ARProposalItemWorksInfo> proposalItemWorks = results.Select(o => ToProposalItemWorksInfo(o)).ToList();

            if (entity.ARProposalItemWorkList == null)
            {
                entity.ARProposalItemWorkList.InitBOSList(this,
                                               TableName.ARProposalItemsTableName,
                                               TableName.ARProposalItemWorksTableName,
                                               BOSList<ARProposalItemsInfo>.cstRelationForeign);
                entity.ARProposalItemWorkList.ItemTableForeignKey = "FK_ARProposalItemID";
            }
        }
        #endregion

        #region Convert object

        private ARProposalItemWorksInfo ToProposalItemWorksInfo(ICProductWorkItemsInfo objProductWorkItemsInfo)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;

            ARProposalItemWorksInfo objProposalItemWorksInfo;
            objProposalItemWorksInfo = new ARProposalItemWorksInfo()
            {
                FK_ICProductID = objProductWorkItemsInfo.FK_ICProductWorkItemChildID,
                FK_ICProductReferenceID = objProductWorkItemsInfo.FK_ICProductWorkItemParentID,
                FK_ICDepartmentID = objProductWorkItemsInfo.FK_ICDepartmentID,
                FK_ICProductGroupID = objProductWorkItemsInfo.FK_ICProductGroupID,
                FK_ICMeasureUnitID = objProductWorkItemsInfo.FK_ICProductBasicUnitID,
                ARProposalItemWorkProductNo = objProductWorkItemsInfo.ICProductWorkItemProductNo,
                ARProposalItemWorkProductName = objProductWorkItemsInfo.ICProductWorkItemProductName,
                ARProposalItemWorkProductDesc = objProductWorkItemsInfo.ICProductWorkItemProductDesc,
                ARProposalItemWorkProductQty = objProductWorkItemsInfo.ICProductWorkItemQty,
                ARProposalItemWorkProductUnitPrice = objProductWorkItemsInfo.ICProductPrice01,
                ARProposalItemWorkProductType = objProductWorkItemsInfo.ICProductWorkItemType,
                ARProposalItemWorkProductChargeCheck = objProductWorkItemsInfo.ICProductWorkItemProductChargeCheck,
                ARProposalItemWorkTotalAmount = objProductWorkItemsInfo.ICProductPrice01 * objProductWorkItemsInfo.ICProductWorkItemQty,
                ARProposalItemWorkSubTotalAmount = objProductWorkItemsInfo.ICProductPrice01 * objProductWorkItemsInfo.ICProductWorkItemQty,
            };
            return objProposalItemWorksInfo;
        }

        private ARProposalItemWorksInfo ToProposalItemWorksInfo(ICProductsInfo objProductsInfo)
        {
            return new ARProposalItemWorksInfo
            {
                FK_ICProductID = objProductsInfo.ICProductID,
                ARProposalItemWorkProductNo = objProductsInfo.ICProductNo,
                ARProposalItemWorkProductName = objProductsInfo.ICProductName,
                ARProposalItemWorkProductDesc = objProductsInfo.ICProductDesc,
                ARProposalItemWorkProductType = objProductsInfo.ICProductType,
                ARProposalItemWorkProductUnitPrice = objProductsInfo.ICProductPrice01,
                ARProposalItemWorkProductChargeCheck = objProductsInfo.ICProductActiveCheck
            };
        }

        private ARProposalItemWorkItemsInfo ToProposalItemsFormProductMaterial(ICProductWorkItemsInfo objProductsInfo)
        {
            return new ARProposalItemWorkItemsInfo
            {
                FK_ICProductID = objProductsInfo.FK_ICProductWorkItemParentID,
                ARProposalItemWorkItemProductNo = objProductsInfo.ICProductWorkItemProductNo,
                ARProposalItemWorkItemProductName = objProductsInfo.ICProductWorkItemProductName,
                ARProposalItemWorkItemProductDesc = objProductsInfo.ICProductWorkItemProductDesc,
                ARProposalItemWorkItemProductType = ProposalItemProductType.Material.ToString(),
                ARProposalItemWorkItemProductUnitPrice = objProductsInfo.ICProductPrice01,
            };
        }

        private ARProposalItemWorkItemsInfo ToProposalItemsFormProductAsset(ICProductWorkItemsInfo objProductsInfo)
        {
            return new ARProposalItemWorkItemsInfo
            {
                FK_ICProductID = objProductsInfo.FK_ICProductWorkItemParentID,
                ARProposalItemWorkItemProductNo = objProductsInfo.ICProductWorkItemProductNo,
                ARProposalItemWorkItemProductName = objProductsInfo.ICProductWorkItemProductName,
                ARProposalItemWorkItemProductDesc = objProductsInfo.ICProductWorkItemProductDesc,
                ARProposalItemWorkItemProductType = ProposalItemProductType.Asset.ToString(),
                ARProposalItemWorkItemProductUnitPrice = objProductsInfo.ICProductPrice01,
            };
        }

        private ARProposalItemsInfo ToProposalItemsInfo(ICProductsInfo objProductsInfo, ARProposalItemsInfo objProposalItemsInfo, decimal productUnitPrice, decimal productQty)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo objProposalsInfo = (ARProposalsInfo)CurrentModuleEntity.MainObject;
            entity.SetValuesAfterValidateProduct(objProposalItemsInfo.FK_ICProductID);
            objProposalItemsInfo.FK_ICProductID = objProductsInfo.ICProductID;
            objProposalItemsInfo.FK_ICDepartmentID = objProductsInfo.FK_ICDepartmentID;
            objProposalItemsInfo.FK_ICProductGroupID = objProductsInfo.FK_ICProductGroupID;
            objProposalItemsInfo.FK_ICMeasureUnitID = objProductsInfo.FK_ICProductBasicUnitID;
            objProposalItemsInfo.ARProposalItemType = objProductsInfo.ICProductTemplateType;
            objProposalItemsInfo.ARProposalItemProductType = objProductsInfo.ICProductType;
            objProposalItemsInfo.ARProposalItemProductAttribute = objProductsInfo.ICProductAttributeKey.Replace("_", ",");
            objProposalItemsInfo.ARProposalItemProductNo = objProductsInfo.ICProductNo;
            objProposalItemsInfo.ARProposalItemProductName = objProductsInfo.ICProductName;
            objProposalItemsInfo.ARProposalItemProductDesc = objProductsInfo.ICProductDesc;
            objProposalItemsInfo.ARProposalItemProductSellUnit = objProductsInfo.FK_ICProductSaleUnitID.ToString();
            objProposalItemsInfo.ARProposalItemProductBasicUnit = objProductsInfo.FK_ICProductBasicUnitID.ToString();
            objProposalItemsInfo.ICProductUnitPrice = objProductsInfo.ICProductPrice01;

            ARCustomersController objCustomersController = new ARCustomersController();
            ARCustomersInfo objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectByID(objProposalsInfo.FK_ARCustomerID);

            objProposalItemsInfo.ARProposalItemProductUnitPrice = productUnitPrice > 0 ? productUnitPrice : objProposalItemsInfo.ICProductUnitPrice;
            objProposalItemsInfo.ARProposalItemProductQty = productQty > 0 ? productQty : 1;
            objProposalItemsInfo.ARProposalItemProductQtyRemained = objProposalItemsInfo.ARProposalItemProductQty;
            objProposalItemsInfo.ARProposalItemProductBasicQty = productQty > 0 ? productQty : 1;

            objProposalItemsInfo.ARProposalItemInternalPrice = objProductsInfo.ICProductPrice01;
            objProposalItemsInfo.ARProposalItemPrice = objProductsInfo.ICProductPrice01;
            objProposalItemsInfo.ARProposalItemTotalAmount = objProductsInfo.ICProductPrice01;
            objProposalItemsInfo.ARProposalItemNetAmount = objProductsInfo.ICProductPrice01;
            objProposalItemsInfo.FK_ICProductAttributeColorID = objProductsInfo.FK_ICProductAttributeColorID;
            objProposalItemsInfo.FK_ICProductAttributeWoodTypeID = objProductsInfo.FK_ICProductAttributeWoodTypeID;
            objProposalItemsInfo.ARProposalItemProductWoodTypeAttribute = objProductsInfo.ICProductWoodTypeAttribute;
            objProposalItemsInfo.ARProposalItemProductColorAttribute = objProductsInfo.ICProductColorAttribute;
            objProposalItemsInfo.FK_ICProductFormulaPriceConfigID = objProductsInfo.FK_ICProductFormulaPriceConfigID;
            objProposalItemsInfo.ARProposalItemProductNoOfOldSys = objProductsInfo.ICProductNoOfOldSys;
            //objProposalItemsInfo.ARProposalItemProductCustomerNumber = objProductsInfo.ICProductCustomerNumber;
            objProposalItemsInfo.ARProposalItemDesc = objProductsInfo.ICProductDesc;
            objProposalItemsInfo.ARProposalItemTempID = Guid.NewGuid();
            if (objProductsInfo.ICProductTemplateType != ProductTemplateType.Design.ToString())
            {
                objProposalItemsInfo.ARProposalItemHeight = objProductsInfo.ICProductHeight;
                objProposalItemsInfo.ARProposalItemLength = objProductsInfo.ICProductLength;
                objProposalItemsInfo.ARProposalItemWidth = objProductsInfo.ICProductWidth;
            }
            ICProductCustomersController objProductCustomersController = new ICProductCustomersController();
            ICProductCustomersInfo objProductCustomersInfo = (ICProductCustomersInfo)objProductCustomersController.GetProductCustomerByProductIDAndCustomerID(objProposalItemsInfo.FK_ICProductID, objProposalsInfo.FK_ARCustomerID);
            objProposalItemsInfo.ARProposalItemProductCustomerNumber = objProductCustomersInfo != null ? objProductCustomersInfo.ICProductCustomerNumber : string.Empty;
            //if (objProductsInfo.ICProductCriteriaItemUnitPrice > 0)
            //{
            //    objProposalItemsInfo.ARProposalItemProductUnitPrice = objProductsInfo.ICProductCriteriaItemUnitPrice;
            //}
            //if (entity.ARPriceLevelsInfo.ARPriceLevelMarkDown > 0)
            //{
            //    objProposalItemsInfo.ARProposalItemProductUnitPrice -= (objProposalItemsInfo.ARProposalItemProductUnitPrice * entity.ARPriceLevelsInfo.ARPriceLevelMarkDown / 100);
            //}

            decimal exchangeRate = objProposalsInfo.ARProposalExchangeRate;
            if (objProposalItemsInfo.FK_ICProductID > 0)
            {
                ARConfigOriginalUnitPricesController objCfoupController = new ARConfigOriginalUnitPricesController();
                ARConfigOriginalUnitPricesInfo objconfigunit = objCfoupController.GetOriginalIsAlive();

                objProposalItemsInfo.ARProposalItemProductDiscount = objProposalsInfo.ARProposalDiscountPerCentForItem;
                if (objconfigunit.ARConfigOriginalUnitPriceHachCode)
                {
                    objProposalItemsInfo.ARProposalItemProductUnitPrice2 = objProposalItemsInfo.ARProposalItemProductUnitPrice * exchangeRate / objProposalsInfo.ARProposalExchangeRate2;

                }
            }
            objProposalItemsInfo.ARProposalItemProductUnitPrice = BOSApp.CalculaterProductUnitPrice(objProductsInfo
                                                                                                    , objProposalItemsInfo.ARProposalItemProductUnitPrice
                                                                                                    , objProposalItemsInfo.ARProposalItemProductQty
                                                                                                    , objProposalItemsInfo.FK_ICMeasureUnitID
                                                                                                    , objCustomersInfo != null ? objCustomersInfo.ARCustomerID : 0
                                                                                                    , objProposalsInfo.ARProposalDate
                                                                                                    , objProposalsInfo.FK_GECurrencyID);
            objProposalItemsInfo.ARProposalItemProductUnitPrice2 = objProposalsInfo.ARProposalExchangeRate2 > 0 ? objProposalItemsInfo.ARProposalItemProductUnitPrice * objProposalsInfo.ARProposalExchangeRate / objProposalsInfo.ARProposalExchangeRate2 : 0;
            
            objProposalItemsInfo.ARProposalItemPrice = objProposalItemsInfo.ARProposalItemProductUnitPrice * objProposalItemsInfo.ARProposalItemProductQty;
            objProposalItemsInfo.ARProposalItemDiscountAmount = (objProposalItemsInfo.ARProposalItemDiscountFix / 100)
                                                                        * objProposalItemsInfo.ARProposalItemProductUnitPrice
                                                                        * objProposalItemsInfo.ARProposalItemProductQty;

            objProposalItemsInfo.ARProposalItemTaxAmount = (objProposalItemsInfo.ARProposalItemProductUnitPrice * objProposalItemsInfo.ARProposalItemProductQty - objProposalItemsInfo.ARProposalItemDiscountAmount)
                                                                * (objProposalItemsInfo.ARProposalItemProductTaxPercent / 100);

            objProposalItemsInfo.ARProposalItemTotalAmount = objProposalItemsInfo.ARProposalItemProductUnitPrice * objProposalItemsInfo.ARProposalItemProductQty - objProposalItemsInfo.ARProposalItemDiscountAmount + objProposalItemsInfo.ARProposalItemTaxAmount;
            entity.UpdateTotalAmount();

            return objProposalItemsInfo;
        }

        //public decimal CalculaterProductUnitPrice(ICProductsInfo product, decimal unitPrice, decimal Qty, int measureUnitID, string customerType, string sourceSellingType, DateTime getDate)
        //{
        //    decimal calUnitPrice = unitPrice;

        //    if (sourceSellingType == ADConfigValueUtility.cstSourceSellingPriceMethodMasterData)
        //    {
        //        calUnitPrice = product.ICProductPrice01;
        //    }
        //    if (sourceSellingType == ADConfigValueUtility.cstSourceSellingPriceMethodPriceSheet)
        //    {
        //        ARPriceSheetItemsController objPriceSheetItemsController = new ARPriceSheetItemsController();
        //        List<ARPriceSheetItemsInfo> newParams = new List<ARPriceSheetItemsInfo>()
        //        {
        //            new ARPriceSheetItemsInfo (customerType, product.ICProductID, measureUnitID, getDate)
        //        };
        //        List<ARPriceSheetItemsInfo> listPriceSheets = objPriceSheetItemsController.GetListInventoryStockQtyForInventoryStockCount(newParams);
        //        ARPriceSheetItemsInfo objPriceSheetItemsInfo = listPriceSheets.Where(o => o.ARPriceSheetItemQty <= Qty && o.FK_ICProductID == product.ICProductID).OrderByDescending(o => o.ARPriceSheetItemQty).FirstOrDefault();
        //        if (objPriceSheetItemsInfo == null)
        //            calUnitPrice = 0;
        //        else
        //            calUnitPrice = objPriceSheetItemsInfo.ARPriceSheetItemPrice;
        //    }
        //    return calUnitPrice;
        //}

        private void GenarateProposalAreasInfo(ARProposalItemsInfo item)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ICProductTemplatesController templatesController = new ICProductTemplatesController();
            ICProductTemplateItemsController templateItemsController = new ICProductTemplateItemsController();
            List<ICProductTemplatesInfo> templates = templatesController.GetProductTemplatesByProductID(item.FK_ICProductID);
            List<ICProductTemplateItemsInfo> templateItems = templateItemsController.GetProductTemplateItemByProductID(item.FK_ICProductID);
            templates.ForEach(o =>
            {
                ARProposalAreasInfo area = new ARProposalAreasInfo()
                {
                    FK_ICProductTemplateID = o.ICProductTemplateID,
                    FK_ICProductID = o.FK_ICProductID,
                    ARProposalAreaNo = o.ICProductTemplateNo,
                    ARProposalAreaName = o.ICProductTemplateName,
                    ARProposalAreaDesc = o.ICProductTemplateDesc,
                    ICProductName = item.ARProposalItemProductName,
                    ARProposalItemTempID = item.ARProposalItemTempID,
                };
                area.ItemList = new BindingList<ARProposalAreaItemsInfo>();
                templateItems
                .Where(i => i.FK_ICProductTemplateID == o.ICProductTemplateID)
                .ToList()
                .ForEach(i =>
                {
                    ARProposalAreaItemsInfo areaItem = new ARProposalAreaItemsInfo()
                    {
                        FK_ICProductID = i.FK_ICProductID,
                        FK_ICProductTemplateID = i.FK_ICProductTemplateID,
                        FK_ICProductTemplateItemID = i.ICProductTemplateItemID,
                        FK_ICMeasureUnitID = i.FK_ICMeasureUnitID,
                        FK_ICProductFormulaPriceConfigID = i.FK_ICProductFormulaPriceConfigID,
                        ARProposalAreaItemProductNo = i.ICProductTemplateItemProductNo,
                        ARProposalAreaItemProductName = i.ICProductTemplateItemProductName,
                        ARProposalAreaItemProductDesc = i.ICProductTemplateItemProductDesc,
                        ARProposalAreaItemLength = i.ICProductTemplateItemLength,
                        ARProposalAreaItemWidth = i.ICProductTemplateItemWidth,
                        ARProposalAreaItemHeight = i.ICProductTemplateItemHeight,
                        ARProposalAreaItemProductQty = i.ICProductTemplateItemProductQty,
                        ARProposalAreaItemProductUnitPrice = i.ICProductTemplateItemProductUnitPrice,
                        ARProposalAreaItemFormulaPriceConfigQty = i.ICProductTemplateItemFormulaPriceConfigQty,
                        ARProposalAreaItemTotalAmount = i.ICProductTemplateItemTotalAmount,
                    };
                    area.ItemList.Add(areaItem);
                });
                area.ARProposalAreaTotalAmount = area.ItemList.Sum(i => i.ARProposalAreaItemTotalAmount);
                entity.ProposalAreasList.Add(area);
                entity.ProposalAreasList.GridControl?.RefreshDataSource();
            });
        }

        private ARProposalItemsInfo ToProposalItemsInfo(ICCollectionItemsInfo objCollectionItemsInfo)
        {
            return new ARProposalItemsInfo
            {
                FK_ICCollectionID = objCollectionItemsInfo.FK_ICCollectionID,
                FK_ICCollectionItemID = objCollectionItemsInfo.ICCollectionItemID,
                FK_ICProductID = objCollectionItemsInfo.FK_ICProductID,
                FK_ICDepartmentID = objCollectionItemsInfo.FK_ICDepartmentID,
                FK_ICProductGroupID = objCollectionItemsInfo.FK_ICProductGroupID,
                FK_ICMeasureUnitID = objCollectionItemsInfo.FK_ICMeasureUnitID,
                ARProposalItemProductType = objCollectionItemsInfo.ICCollectionItemProductType,
                ARProposalItemProductNo = objCollectionItemsInfo.ICCollectionItemProductNo,
                ARProposalItemProductName = objCollectionItemsInfo.ICCollectionItemProductName,
                ARProposalItemProductDesc = objCollectionItemsInfo.ICCollectionItemProductDesc,
                ARProposalItemProductUnitPrice = objCollectionItemsInfo.ICCollectionItemProductUnitPrice,
                ARProposalItemProductQty = objCollectionItemsInfo.ICCollectionItemQty,
                ARProposalItemProductBasicQty = objCollectionItemsInfo.ICCollectionItemQty,
                ARProposalItemInternalPrice = objCollectionItemsInfo.ICCollectionItemProductUnitPrice,
                ARProposalItemPrice = objCollectionItemsInfo.ICCollectionItemQty * objCollectionItemsInfo.ICCollectionItemProductUnitPrice,
                ARProposalItemTotalAmount = objCollectionItemsInfo.ICCollectionItemQty * objCollectionItemsInfo.ICCollectionItemProductUnitPrice,
                ARProposalItemNetAmount = objCollectionItemsInfo.ICCollectionItemQty * objCollectionItemsInfo.ICCollectionItemProductUnitPrice,
                ARProposalItemLength = objCollectionItemsInfo.ICProductLength,
                ARProposalItemWidth = objCollectionItemsInfo.ICProductWidth,
                ARProposalItemHeight = objCollectionItemsInfo.ICProductHeight,
                ARProposalItemTempID = Guid.NewGuid(),
            };
        }

        private ARProposalItemWorksInfo ToProposalItemWorksInfo(ICCollectionItemsInfo objCollectionItemsInfo)
        {
            return new ARProposalItemWorksInfo
            {
                FK_ICProductID = objCollectionItemsInfo.FK_ICProductID,
                FK_ICDepartmentID = objCollectionItemsInfo.FK_ICDepartmentID,
                FK_ICProductGroupID = objCollectionItemsInfo.FK_ICProductGroupID,
                FK_ICMeasureUnitID = objCollectionItemsInfo.FK_ICMeasureUnitID,
                ARProposalItemWorkProductType = objCollectionItemsInfo.ICCollectionItemProductType,
                ARProposalItemWorkProductNo = objCollectionItemsInfo.ICCollectionItemProductNo,
                ARProposalItemWorkProductName = objCollectionItemsInfo.ICCollectionItemProductName,
                ARProposalItemWorkProductDesc = objCollectionItemsInfo.ICCollectionItemProductDesc,
                ARProposalItemWorkProductUnitPrice = objCollectionItemsInfo.ICCollectionItemProductUnitPrice,
                ARProposalItemWorkProductQty = objCollectionItemsInfo.ICCollectionItemQty,
                ARProposalItemWorkSubTotalAmount = objCollectionItemsInfo.ICCollectionItemQty * objCollectionItemsInfo.ICCollectionItemProductUnitPrice,
                ARProposalItemWorkTotalAmount = objCollectionItemsInfo.ICCollectionItemQty * objCollectionItemsInfo.ICCollectionItemProductUnitPrice,
                ARProposalItemWorkProductChargeCheck = true,
            };
        }
        #endregion

        #region Delete item

        public void DeleteItemFromProposalItemsList()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            if (entity.ARProposalItemsList.CurrentIndex < 0)
                return;

            ARProposalItemsInfo item = entity.ARProposalItemsList[entity.ARProposalItemsList.CurrentIndex];
            if (item != null)
            {
                entity.ProposalAreasList.RemoveAll(o => o.FK_ICProductID == item.FK_ICProductID && o.FK_ARProposalItemID == item.ARProposalItemID);
            }
            entity.ARProposalItemsList.RemoveSelectedRowObjectFromList();
            entity.UpdateTotalAmount();
            //entity.ProposalAreasList.GridControl?.RefreshDataSource();
        }

        public void DeleteItemProposalItemWorkMaterialtemsList()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalItemWorksInfo objProposalItemsInfo = entity.ARProposalItemWorkMaterialList[entity.ARProposalItemWorkMaterialList.CurrentIndex];
            entity.ARProposalItemWorkMaterialList.Remove(objProposalItemsInfo);
            entity.ARProposalItemCostList.Remove(objProposalItemsInfo);
            entity.ARProposalItemWorkList.ForEach(t =>
            {
                if (t.ARProposalItemWorkMaterialList != null
                    && t.ARProposalItemWorkMaterialList.Count > 0)
                {
                    t.ARProposalItemWorkMaterialList.Remove(objProposalItemsInfo);
                }
            });

            entity.ARProposalItemWorkList.GridControl?.RefreshDataSource();
            entity.ARProposalItemCostList.GridControl?.RefreshDataSource();
            entity.ARProposalItemWorkMaterialList.GridControl?.RefreshDataSource();
            entity.UpdateTotalAmount();
        }
        public void DeleteItemProposalItemWorkAssetItemsList()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalItemWorksInfo objProposalItemsInfo = entity.ARProposalItemWorkAssetList[entity.ARProposalItemWorkAssetList.CurrentIndex];
            entity.ARProposalItemWorkAssetList.Remove(objProposalItemsInfo);
            entity.ARProposalItemCostList.Remove(objProposalItemsInfo);
            entity.ARProposalItemWorkList.ForEach(t =>
            {
                if (t.ARProposalItemWorkAssetList != null
                    && t.ARProposalItemWorkAssetList.Count > 0)
                {
                    t.ARProposalItemWorkAssetList.Remove(objProposalItemsInfo);
                }
            });

            entity.ARProposalItemWorkList.GridControl?.RefreshDataSource();
            entity.ARProposalItemCostList.GridControl?.RefreshDataSource();
            entity.ARProposalItemWorkAssetList.GridControl?.RefreshDataSource();
            entity.UpdateTotalAmount();
        }
        public void DeleteItemProposalItemWorkItemChargesList()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalItemWorksInfo objProposalItemsInfo = entity.ARProposalItemCostList[entity.ARProposalItemCostList.CurrentIndex];
            entity.ARProposalItemCostList.Remove(objProposalItemsInfo);
            entity.ARProposalItemWorkList.Remove(objProposalItemsInfo);

            if (objProposalItemsInfo.ARProposalItemWorkMaterialList != null)
            {
                objProposalItemsInfo.ARProposalItemWorkMaterialList.All(t =>
                {
                    entity.ARProposalItemWorkMaterialList.Remove(t);
                    return true;
                });
            }

            if (objProposalItemsInfo.ARProposalItemWorkAssetList != null)
            {
                objProposalItemsInfo.ARProposalItemWorkAssetList.All(t =>
                {
                    entity.ARProposalItemWorkAssetList.Remove(t);
                    return true;
                });
            }

            entity.ARProposalItemWorkList.GridControl?.RefreshDataSource();
            entity.ARProposalItemCostList.GridControl?.RefreshDataSource();
            entity.ARProposalItemWorkMaterialList.GridControl?.RefreshDataSource();
            entity.ARProposalItemWorkAssetList.GridControl?.RefreshDataSource();
            entity.UpdateTotalAmount();
        }

        public void DeleteItemFromProposalItemWorksList()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;

            ARProposalItemWorksInfo objProposalItemsInfo = entity.ARProposalItemWorkList[entity.ARProposalItemWorkList.CurrentIndex];

            #region cmt
            //if (objProposalItemsInfo.ARProposalItemWorkList == null)
            //{
            //    objProposalItemsInfo.ARProposalItemWorkList = new BOSList<ARProposalItemWorksInfo>();
            //    objProposalItemsInfo.ARProposalItemWorkList = new BOSList<ARProposalItemWorksInfo>();
            //    objProposalItemsInfo.ARProposalItemWorkList.InitBOSList(entity,
            //                                  TableName.ARSaleOrderItemsTableName,
            //                                  TableName.ARSaleOrderItemWorksTableName,
            //                                  BOSList<ARSaleOrderItemWorksInfo>.cstRelationForeign);
            //    objProposalItemsInfo.ARProposalItemWorkList.Invalidate(entity.ARProposalItemWorkList.Where(o => o.FK_ARProposalItemID == objProposalItemsInfo.ARProposalItemID).ToList());
            //}

            //ICProductWorkItemsController objProductWorkItemsController = new ICProductWorkItemsController();
            //List<ICProductWorkItemsInfo> productWorkItems = objProductWorkItemsController.GetProductWorkItemsByProductWorkItemParentID(objProposalItemsInfo.FK_ICProductID);
            //List<ICProductWorkItemsInfo> productWorkItemLists = objProductWorkItemsController.GetMaterialProductWorkItemsByProductWorkItemParentID(objProposalItemsInfo.FK_ICProductID);
            //List<ICProductWorkItemsInfo> productWorkMaterialItems = productWorkItemLists.Where(o => o.ICProductWorkItemType == ProposalItemProductType.Material.ToString()).ToList();
            //List<ICProductWorkItemsInfo> productWorkAssetItems = productWorkItemLists.Where(o => o.ICProductWorkItemType == ProposalItemProductType.Asset.ToString()).ToList();
            //foreach (ICProductWorkItemsInfo objICProductWorkItemsDeleteInfo in productWorkItems)
            //{
            //    foreach (ARProposalItemWorksInfo objProposalItemWorksInfo in entity.ARProposalItemWorkList)
            //    {
            //        if (objProposalItemWorksInfo.FK_ICProductID == objICProductWorkItemsDeleteInfo.FK_ICProductWorkItemChildID)
            //        {
            //            entity.ARProposalItemWorkList.Remove(objProposalItemWorksInfo);
            //            break;
            //        }
            //    }
            //    foreach (ARProposalItemWorksInfo objProposalItemCostsInfo in entity.ARProposalItemCostList)
            //    {
            //        if (objProposalItemCostsInfo.FK_ICProductID == objICProductWorkItemsDeleteInfo.FK_ICProductWorkItemChildID)
            //        {
            //            entity.ARProposalItemCostList.Remove(objProposalItemCostsInfo);
            //            break;
            //        }
            //    }
            //}

            //foreach (ICProductWorkItemsInfo objICProductWorkMaterialItemsDeleteInfo in productWorkMaterialItems)
            //{
            //    foreach (ARProposalItemWorksInfo objProposalItemWorkMaterialsInfo in entity.ARProposalItemWorkMaterialList)
            //    {
            //        if (objProposalItemWorkMaterialsInfo.FK_ICProductID == objICProductWorkMaterialItemsDeleteInfo.FK_ICProductWorkItemChildID)
            //        {
            //            entity.ARProposalItemWorkMaterialList.Remove(objProposalItemWorkMaterialsInfo);
            //            break;
            //        }
            //    }
            //    foreach (ARProposalItemWorksInfo objProposalItemCostsInfo in entity.ARProposalItemCostList)
            //    {
            //        if (objProposalItemCostsInfo.FK_ICProductID == objICProductWorkMaterialItemsDeleteInfo.FK_ICProductWorkItemChildID)
            //        {
            //            entity.ARProposalItemCostList.Remove(objProposalItemCostsInfo);
            //            break;
            //        }
            //    }
            //    foreach (ARProposalItemWorksInfo objProposalItemCostsInfo in entity.ARProposalItemCostList)
            //    {
            //        if (objProposalItemCostsInfo.FK_ICProductID == objICProductWorkMaterialItemsDeleteInfo.FK_ICProductWorkItemChildID)
            //        {
            //            entity.ARProposalItemCostList.Remove(objProposalItemCostsInfo);
            //            break;
            //        }
            //    }
            //}
            //foreach (ICProductWorkItemsInfo objICProductWorkAssetItemsDeleteInfo in productWorkAssetItems)
            //{
            //    foreach (ARProposalItemWorksInfo objProposalItemWorkAssetsInfo in entity.ARProposalItemWorkAssetList)
            //    {
            //        if (objProposalItemWorkAssetsInfo.FK_ICProductID == objICProductWorkAssetItemsDeleteInfo.FK_ICProductWorkItemChildID)
            //        {
            //            entity.ARProposalItemWorkMaterialList.Remove(objProposalItemWorkAssetsInfo);
            //            break;
            //        }
            //    }
            //    foreach (ARProposalItemWorksInfo objProposalItemCostsInfo in entity.ARProposalItemCostList)
            //    {
            //        if (objProposalItemCostsInfo.FK_ICProductID == objICProductWorkAssetItemsDeleteInfo.FK_ICProductWorkItemChildID)
            //        {
            //            entity.ARProposalItemCostList.Remove(objProposalItemCostsInfo);
            //            break;
            //        }
            //    }
            //    foreach (ARProposalItemWorksInfo objProposalItemCostsInfo in entity.ARProposalItemCostList)
            //    {
            //        if (objProposalItemCostsInfo.FK_ICProductID == objICProductWorkAssetItemsDeleteInfo.FK_ICProductWorkItemChildID)
            //        {
            //            entity.ARProposalItemCostList.Remove(objProposalItemCostsInfo);
            //            break;
            //        }
            //    }
            //}
            #endregion
            entity.ARProposalItemWorkList.Remove(objProposalItemsInfo);
            entity.ARProposalItemCostList.Remove(objProposalItemsInfo);
            if (objProposalItemsInfo.ARProposalItemWorkMaterialList != null)
            {
                objProposalItemsInfo.ARProposalItemWorkMaterialList.All(t =>
                {
                    entity.ARProposalItemWorkMaterialList.Remove(t);
                    return true;
                });
            }
            if (objProposalItemsInfo.ARProposalItemWorkAssetList != null)
            {
                objProposalItemsInfo.ARProposalItemWorkAssetList.All(t =>
                {
                    entity.ARProposalItemWorkAssetList.Remove(t);
                    return true;
                });
            }

            entity.ARProposalItemWorkList.GridControl?.RefreshDataSource();
            entity.ARProposalItemCostList.GridControl?.RefreshDataSource();
            entity.ARProposalItemWorkMaterialList.GridControl?.RefreshDataSource();
            entity.ARProposalItemWorkAssetList.GridControl?.RefreshDataSource();
            entity.UpdateTotalAmount();
        }
        #endregion

        #region Action
        public override void ActionEdit()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            if ((entity.MainObject as ARProposalsInfo).ARProposalStatus == ProposalStatus.Ordered.ToString())
            {
                MessageBox.Show("The proposal has been ordered and can not modify", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                CurrentModuleEntity.SetPropertyChangeEventLock(false);
                return;
            }

            base.ActionEdit();
            //AddSectionButtonControl.Enabled = false;
            //AddWorkButtonControl.Enabled = false;
        }

        public override void ActionNew()
        {
            base.ActionNew();
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo objProposalsInfo = (ARProposalsInfo)CurrentModuleEntity.MainObject;
            ACObjectsInfo objObjectsInfo = new ACObjectsInfo();
            entity.SetDefaultValuesFromObject(objObjectsInfo);
            DisplayLabelText(objObjectsInfo);
            DisplayLabelText(CurrentModuleEntity.MainObject);
            ProposalItemsGridControl.LoadGridViewBySourceSelling(objProposalsInfo.ARProposalSourceSellingPriceMethod);
            if(ProposalDescEditControl != null)
            {
                ProposalDescEditControl.Text = String.Empty;
            }
            //AddSectionButtonControl.Enabled = false;
            //AddWorkButtonControl.Enabled = false;
        }

        public void OrderProposal()
        {
            if (Toolbar.IsNullOrNoneAction())
            {
                ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
                //ARProposalsInfo objProposalsInfo = (ARProposalsInfo)CurrentModuleEntity.MainObject;
                ARProposalsInfo objProposalsInfo = (ARProposalsInfo)((new ARProposalsController()).GetObjectByID(((ARProposalsInfo)entity.MainObject).ARProposalID));
                if (objProposalsInfo.ARProposalStatus == ProposalStatus.Ordered.ToString())
                {
                    MessageBox.Show("Báo giá đã tạo đơn hàng.", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                if (objProposalsInfo.ARProposalStatus == ProposalStatus.New.ToString())
                {
                    MessageBox.Show("Vui lòng duyệt báo giá.", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                SaleOrder.SaleOrderModule saleOrderModule = (SaleOrder.SaleOrderModule)BOSApp.ShowModule("SaleOrder");
                if (saleOrderModule != null)
                {
                    SaleOrder.SaleOrderEntities saleOrderEntity = (SaleOrder.SaleOrderEntities)saleOrderModule.CurrentModuleEntity;
                    saleOrderModule.ActionNew();

                    //Copy customer info                    
                    ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)saleOrderEntity.MainObject;
                    objSaleOrdersInfo.FK_ARCustomerID = objProposalsInfo.FK_ARCustomerID;
                    objSaleOrdersInfo.FK_ACObjectID = objProposalsInfo.FK_ACObjectID;
                    objSaleOrdersInfo.ARObjectType = objProposalsInfo.ARObjectType;
                    ACObjectsInfo objObjectsInfo = (ACObjectsInfo)(new ACObjectsController()).GetObjectByIDAndType(objProposalsInfo.FK_ACObjectID, objProposalsInfo.ARObjectType);
                    if (objObjectsInfo != null)
                    {
                        objSaleOrdersInfo.ACObjectAccessKey = String.Format("{0};{1}", objObjectsInfo.ACObjectID.ToString(), objObjectsInfo.ACObjectType);
                        objSaleOrdersInfo.ARSaleOrderSOContactName = string.IsNullOrEmpty(objObjectsInfo.ACObjectName) ? "" : objObjectsInfo.ACObjectName;
                        objSaleOrdersInfo.ARSaleOrderDeliveryAddressTel = objObjectsInfo.ACObjectContactPhone;
                        objSaleOrdersInfo.FK_GECurrencyID = objObjectsInfo.GECurrencyID == 0 ? BOSApp.CurrentCompanyInfo.FK_GECurrencyID : objObjectsInfo.GECurrencyID;
                        objSaleOrdersInfo.FK_GEPaymentTermID = objObjectsInfo.GEPaymentTermID;
                        objSaleOrdersInfo.ARPaymentMethodCombo = string.IsNullOrEmpty(objObjectsInfo.ACObjectPaymentMethodCombo) ? "" : objObjectsInfo.ACObjectPaymentMethodCombo;
                        objSaleOrdersInfo.ARSaleOrderTaxNumber = objObjectsInfo.ACObjectTaxNumber;

                        //Set Default DeliveryInfo 
                        objSaleOrdersInfo.ARSaleOrderDeliveryContactName = string.IsNullOrEmpty(objObjectsInfo.ACObjectDeliveryContactName) ? objObjectsInfo.ACObjectName : objObjectsInfo.ACObjectDeliveryContactName;
                        objSaleOrdersInfo.ARSaleOrderDeliveryAddressFax = string.IsNullOrEmpty(objObjectsInfo.ACObjectContactFax) ? "" : objObjectsInfo.ACObjectContactFax;
                        objSaleOrdersInfo.ARSaleOrderDeliveryAddressTaxCode = string.IsNullOrEmpty(objObjectsInfo.ACObjectContactTaxCode) ? "" : objObjectsInfo.ACObjectContactTaxCode;
                        objSaleOrdersInfo.ARSaleOrderDeliveryAddressTel = string.IsNullOrEmpty(objObjectsInfo.ACObjectContactPhone) ? "" : objObjectsInfo.ACObjectContactPhone;
                        objSaleOrdersInfo.ARSaleOrderDeliveryAddressLine3 = string.IsNullOrEmpty(objObjectsInfo.ACObjectDeliveryAddressLine1) ? objObjectsInfo.ACObjectContactAddress : objObjectsInfo.ACObjectDeliveryAddressLine1;

                        //Set Default InvoiceInfo 
                        objSaleOrdersInfo.ARSaleOrderInvoiceContactName = objObjectsInfo.ACObjectName;
                        objSaleOrdersInfo.ARSaleOrderInvoiceAddressLine3 = objObjectsInfo.ACObjectDeliveryAddressLine1;
                        objSaleOrdersInfo.ARSaleOrderInvoiceAddressTaxCode = objObjectsInfo.ACObjectInvoiceAddressTaxCode;
                        objSaleOrdersInfo.ARSaleOrderInvoiceAddressTel = objObjectsInfo.ACObjectInvoiceAddressTel;
                        objSaleOrdersInfo.ARSaleOrderInvoiceAddressFax = objObjectsInfo.ACObjectInvoiceAddressFax;
                    }

                    saleOrderModule.ChangeObject(objSaleOrdersInfo.ACObjectAccessKey);
                    objSaleOrdersInfo.ARSaleOrderDesc = objProposalsInfo.ARProposalName;
                    objSaleOrdersInfo.FK_GEPaymentTermID = objProposalsInfo.FK_GEPaymentTermID;
                    objSaleOrdersInfo.ARPaymentMethodCombo = objProposalsInfo.ARPaymentMethodCombo;
                    objSaleOrdersInfo.ARSaleOrderProductType = objProposalsInfo.ARProposalTypeCombo;
                    objSaleOrdersInfo.FK_ACCostCenterID = objProposalsInfo.FK_ACCostCenterID;
                    saleOrderModule.SetDefaultValuesFromCustomer();
                    ARCustomerInfoContactsController objCustomerInfoContactsController = new ARCustomerInfoContactsController();
                    List<ARCustomerInfoContactsInfo> lstARCustomerInfoContacts = objCustomerInfoContactsController.GetListFromDataSet(objCustomerInfoContactsController.GetAllDataByForeignColumn("FK_ARCustomerID", objProposalsInfo.FK_ARCustomerID)) as List<ARCustomerInfoContactsInfo>;
                    lstARCustomerInfoContacts.ForEach(o1 => o1.ACObjectAccessKey = string.Format("{0};{1}", o1.FK_ACObjectID, o1.ARObjectType));

                    //Generate entities from the proposal
                    saleOrderEntity.ARReferenceProposalItems.Clear();
                    saleOrderEntity.GenerateEntityFromProposal(objProposalsInfo);
                    saleOrderModule.CurrentModuleEntity.UpdateMainObjectBindingSource();

                    saleOrderEntity.ARSaleOrderItemsList.GridControl?.RefreshDataSource();
                    if (saleOrderEntity.ARSaleOrderItemsList.Count > 0)
                    {
                        saleOrderEntity.ARSaleOrderItemsList.GridControl.InvalidateLookupEditColumns();
                        saleOrderEntity.ARSaleOrderItemsList.GridViewFocusRow(0);
                    }
                }
            }
        }

        public void ApproveProposal()
        {

            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
                bool isApproved = entity.ApproveProposal();
            }
            base.ActionComplete();
        }
        public override bool ActionCancelComplete()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;
            
            if (mainObject.ARProposalID > 0)
            {
               
                ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
                List < ARSaleOrdersInfo > listSONo = objSaleOrdersController.GetSaleOrderNosListByProposal( mainObject.ARProposalID);
                if (listSONo.Count() > 0)
                {
                    MessageBox.Show( "Đã tồn tại chứng từ Đơn bán hàng: " + Environment.NewLine
                        + string.Join(",", listSONo.Select(s => s.ARSaleOrderNo).ToArray())
                        + Environment.NewLine + "Bạn không thể mở!"
                        , CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return false;
                }
            }
            bool isComplete = base.ActionCancelComplete();
            if (isComplete)
            {
                InvalidateToolbar();
            }
            return isComplete;
        }
        #endregion

        #region Invalidate
        public override void Invalidate(int iObjectID)
        {
            base.Invalidate(iObjectID);
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;
            entity.TemplateItemList.Clear();
            RefreshTreeView(entity.TemplateItemList);
            InvalidateTemplateItem();
            ProposalItemsGridControl.LoadGridViewBySourceSelling(mainObject.ARProposalSourceSellingPriceMethod);
            if (ProposalDescEditControl != null)
            {
                ProposalDescEditControl.OpenXmlBytes = (mainObject.ARProposalDesc != null && mainObject.ARProposalDesc.Length > 0) ? mainObject.ARProposalDesc : null;
            }

            //AddSectionButtonControl.Enabled = true;
            //AddWorkButtonControl.Enabled = true;
            //ARProposalsInfo objProposalsInfo = (ARProposalsInfo)CurrentModuleEntity.MainObject;
            //Control statusLookupEdit = Controls["fld_lkeARProposalStatus"];
            //statusLookupEdit.Enabled = true;
            //if (objProposalsInfo.ARProposalStatus == ProposalStatus.Ordered.ToString())
            //    statusLookupEdit.Enabled = false;
        }

        public override void InvalidateToolbar()
        {
            base.InvalidateToolbar();
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo objProposalsInfo = (ARProposalsInfo)entity.MainObject;
            string status = objProposalsInfo.ARProposalStatus;
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonCancelComplete, false);
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, false);
            if (status == ProposalStatus.New.ToString())
            {
                ParentScreen.SetEnableOfToolbarButton(ProposalModule.ApproveProposalButtonTag, true);
            }
            else
            {
                ParentScreen.SetEnableOfToolbarButton(ProposalModule.ApproveProposalButtonTag, false);
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonCancelComplete, true);
            }
            if (objProposalsInfo.ARProposalID <= 0)
            {
                ParentScreen.SetEnableOfToolbarButton(ProposalModule.ApproveProposalButtonTag, false);
            }
            else
            {
                if (Toolbar.IsEditAction())
                {
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, true);
                }
            }
            if (status == ProposalStatus.Approved.ToString() || status == ProposalStatus.Ordered.ToString())
            {
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
            }
        }
        #endregion

        #region Change object

        public void ChangeItemFromProposalItemsList()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;
            ARProposalItemsInfo objProposalItemsInfo = (ARProposalItemsInfo)entity.ModuleObjects[TableName.ARProposalItemsTableName];
            objProposalItemsInfo.ARProposalItemProductQtyRemained = objProposalItemsInfo.ARProposalItemProductQty - objProposalItemsInfo.ARProposalItemProductQtyOld;
            objProposalItemsInfo.ARProposalItemFormulaPriceConfigQty = CalculatorProposalItemFormulaPriceConfigQty(objProposalItemsInfo);

            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(objProposalItemsInfo.FK_ICProductID);

            //if (isRecalculation)
            //{
            //    ARCustomersController objCustomersController = new ARCustomersController();
            //    ARCustomersInfo objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectByID(mainObject.FK_ARCustomerID);
            //    objProposalItemsInfo.ARProposalItemProductUnitPrice = CalculaterProductUnitPrice(objProductsInfo
            //                                                                                                , objProposalItemsInfo.ARProposalItemProductUnitPrice
            //                                                                                                , objProposalItemsInfo.ARProposalItemProductQty
            //                                                                                                , objProposalItemsInfo.FK_ICMeasureUnitID
            //                                                                                                , objCustomersInfo != null ? objCustomersInfo.ARCustomerTypeCombo : string.Empty
            //                                                                                                );
            //    objProposalItemsInfo.ICProductUnitPrice = objProposalItemsInfo.ARProposalItemProductUnitPrice;
            //    if (mainObject.ARProposalExchangeRate > 0)
            //    {
            //        objProposalItemsInfo.ARProposalItemProductUnitPrice2 = objProposalItemsInfo.ARProposalItemProductUnitPrice * mainObject.ARProposalExchangeRate / mainObject.ARProposalExchangeRate2;
            //    }
            //}

            entity.SetProductPriceByProductUnitPrice();
            if (objProductsInfo != null)
            {
                if (objProductsInfo.ICProductTemplateType == ProductTemplateType.Design.ToString())
                    objProposalItemsInfo.ARProposalItemInternalPrice = objProposalItemsInfo.ARProposalItemProductUnitPrice;
            }    
            entity.ARProposalItemsList.ChangeObjectFromList();
            entity.UpdateTotalAmount();
        }

        public void ChangeCustomer(object sender, DevExpress.XtraEditors.Controls.CloseUpEventArgs e)
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                BOSComponent.BOSLookupEdit lke = (BOSComponent.BOSLookupEdit)sender;
                if (e.Value != lke.OldEditValue)
                {
                    ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
                    ((ARProposalsInfo)entity.MainObject).FK_ARCustomerID = Convert.ToInt32(e.Value);
                    ARCustomersController objCustomersController = new ARCustomersController();
                    ARCustomersInfo objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectByID(((ARProposalsInfo)entity.MainObject).FK_ARCustomerID);
                    ((ARProposalsInfo)entity.MainObject).FK_ARPriceLevelID = objCustomersInfo.FK_ARPriceLevelID;
                    ARPriceLevelsController objPriceLevelsController = new ARPriceLevelsController();
                    ARPriceLevelsInfo objPriceLevelsInfo = (ARPriceLevelsInfo)objPriceLevelsController.GetObjectByID(objCustomersInfo.FK_ARPriceLevelID);
                    entity.ARPriceLevelsInfo = objPriceLevelsInfo != null ? objPriceLevelsInfo : new ARPriceLevelsInfo();
                    SetDefaultValuesFromCustomer();

                    foreach (ARProposalItemsInfo infoItem in entity.ARProposalItemsList)
                        entity.SetProductPrice(infoItem, TableName.ARProposalItemsTableName);
                    entity.ARProposalItemsList.GridControl?.RefreshDataSource();
                    entity.UpdateTotalAmount();

                    CurrentModuleEntity.UpdateMainObjectBindingSource();
                }
            }
        }

        public void ChangePriceLevel(object sender, DevExpress.XtraEditors.Controls.CloseUpEventArgs e)
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                DevExpress.XtraEditors.LookUpEdit lke = (DevExpress.XtraEditors.LookUpEdit)sender;
                if (e.Value != lke.OldEditValue)
                {
                    ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
                    ((ARProposalsInfo)entity.MainObject).FK_ARPriceLevelID = Convert.ToInt32(e.Value);
                    ICProductBranchPricesController objProductBranchPricesController = new ICProductBranchPricesController();
                    ICProductsController objICProductsController = new ICProductsController();

                    ARPriceLevelsController objPriceLevelsController = new ARPriceLevelsController();
                    ARPriceLevelsInfo objPriceLevelsInfo = (ARPriceLevelsInfo)objPriceLevelsController.GetObjectByID(((ARProposalsInfo)entity.MainObject).FK_ARPriceLevelID);
                    objPriceLevelsInfo = objPriceLevelsInfo != null ? objPriceLevelsInfo : new ARPriceLevelsInfo() { ARPriceLevelMarkDown = 100 };
                    entity.ARPriceLevelsInfo = objPriceLevelsInfo;

                    if (entity.ARProposalItemsList.Count > 0)
                    {
                        if (MessageBox.Show(ProposalLocalizedResources.ConfirmUpdatePriceLevel, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                        {
                            foreach (ARProposalItemsInfo item in entity.ARProposalItemsList)
                            {
                                item.ARProposalItemProductUnitPrice = 0;
                                item.ARProposalItemProductUnitPrice2 = 0;
                                ICProductsInfo objICProductsInfo = (ICProductsInfo)objICProductsController.GetObjectByID(item.FK_ICProductID);
                                ICProductBranchPricesInfo objProductBranchPricesInfo = objProductBranchPricesController.GetProductPriceByProductIDAndBranchIDAndCurrencyIDAndType(
                                                                                            item.FK_ICProductID,
                                                                                            BOSApp.CurrentCompanyInfo.FK_BRBranchID,
                                                                                            ((ARProposalsInfo)entity.MainObject).FK_GECurrencyID,
                                                                                            ProductBranchPriceType.Sale.ToString());
                                if (objProductBranchPricesInfo != null)
                                {
                                    objICProductsInfo.ICProductPrice01 = objProductBranchPricesInfo.ICProductBranchPrice;
                                }
                                else
                                {
                                    objICProductsInfo.ICProductPrice01 = 0;
                                }
                                item.ICProductUnitPrice = entity.CalculateProductPriceBaseOnProductPriceLevelForProposal(objICProductsInfo);
                            }
                            entity.ARProposalItemsList.GridControl?.RefreshDataSource();
                            entity.UpdateTotalAmount();
                        }
                    }
                }
            }
        }

        public void ChangeDiscountPercent()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
                ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;
                if (mainObject.ARProposalDiscountPerCentOld != mainObject.ARProposalDiscountPerCent)
                {
                    ((ProposalEntities)CurrentModuleEntity).UpdateTotalAmount();
                    mainObject.ARProposalDiscountPerCentOld = mainObject.ARProposalDiscountPerCent;
                }
            }
        }

        public void ChangeDiscountAmount()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo objPriceLissInfo = (ARProposalsInfo)entity.MainObject;
            if (objPriceLissInfo.ARProposalSubTotalAmount > 0)
                objPriceLissInfo.ARProposalDiscountPerCent = objPriceLissInfo.ARProposalDiscountFix / objPriceLissInfo.ARProposalSubTotalAmount * 100;
            entity.UpdateTotalAmount();
        }

        public decimal CheckTotalCost(ARProposalItemsInfo objProposalItemsInfo)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            decimal proposalItemTotalCost = 0;
            ICProductsController objProductsController = new ICProductsController();
            ICProductWorkItemsController objProductWorkItemsController = new ICProductWorkItemsController();

            List<ICProductWorkItemsInfo> productWorkItems = objProductWorkItemsController.GetProductWorkItemsByProductWorkItemParentID(objProposalItemsInfo.FK_ICProductID);

            if (objProposalItemsInfo.ARProposalItemWorkList == null)
            {
                objProposalItemsInfo.ARProposalItemWorkList = new BOSList<ARProposalItemWorksInfo>();
                objProposalItemsInfo.ARProposalItemWorkList.InitBOSList(entity,
                                              TableName.ARProposalItemsTableName,
                                              TableName.ARProposalItemWorksTableName,
                                              BOSList<ARProposalItemWorksInfo>.cstRelationForeign);
            }
            if (entity.ARProposalItemCostList == null)
            {
                entity.ARProposalItemCostList = new BOSList<ARProposalItemWorksInfo>();
                entity.ARProposalItemCostList.InitBOSList(entity,
                                              TableName.ARProposalsTableName,
                                              TableName.ARProposalItemWorksTableName,
                                              BOSList<ARProposalItemWorksInfo>.cstRelationNone);
            }
            productWorkItems.ForEach(o =>
            {
                if (o.ICProductWorkItemProductChargeCheck)
                {
                    proposalItemTotalCost += o.ICProductPrice01 * o.ICProductWorkItemQty;
                }

            });

            List<ICProductWorkItemsInfo> productWorkMaterialItems = objProductWorkItemsController.GetMaterialProductWorkItemsByProductWorkItemParentID(objProposalItemsInfo.FK_ICProductID);
            productWorkMaterialItems.ForEach(x =>
            {
                ICProductsInfo objProductPerTypesInfo = (ICProductsInfo)objProductsController.GetObjectByID(x.FK_ICProductWorkItemChildID);
                if (x.ICProductWorkItemProductChargeCheck)
                {
                    proposalItemTotalCost += objProductPerTypesInfo.ICProductSupplierPrice * x.ICProductWorkItemQty;
                }
            });
            //todo
            return proposalItemTotalCost;
        }

        /// <summary>
        /// Called when user changes the commission percent
        /// </summary>
        public void ChangeCommissionPercent()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
                ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;
                if (mainObject.ARProposalSOCommissionPercentOld != mainObject.ARProposalSOCommissionPercent)
                {
                    entity.UpdateTotalAmount();
                    mainObject.ARProposalSOCommissionPercentOld = mainObject.ARProposalSOCommissionPercent;
                }
            }
        }

        /// <summary>
        /// Called when user changes the commission amount
        /// </summary>
        public void ChangeCommissionAmount()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo objProposalsInfo = (ARProposalsInfo)entity.MainObject;
            //Calculate customer comission
            decimal subTotalAmount = 0;
            foreach (ARProposalItemsInfo objProposalItemsInfo in entity.ARProposalItemsList)
            {
                subTotalAmount += objProposalItemsInfo.ARProposalItemPrice - objProposalItemsInfo.ARProposalItemDiscountAmount;
            }
            decimal totalAmount = subTotalAmount - objProposalsInfo.ARProposalDiscountFix;
            if (totalAmount != 0)
            {
                objProposalsInfo.ARProposalSOCommissionPercent = objProposalsInfo.ARProposalSOCommissionAmount / totalAmount * 100;
                BOSApp.RoundByCurrency(objProposalsInfo, objProposalsInfo.FK_GECurrencyID);
            }
            entity.UpdateMainObjectBindingSource();
        }
        #endregion

        #region Show object

        public void ShowPaymentInfo()
        {
            ARProposalsInfo objProposalsInfo = (ARProposalsInfo)CurrentModuleEntity.MainObject;
            guiPaymentTerm guiPayment = new guiPaymentTerm();
            guiPayment.Module = this;
            if (guiPayment.ShowDialog() == DialogResult.OK)
            {
                objProposalsInfo.ARProposalPaymentTerm = guiPayment.Tag.ToString();
                CurrentModuleEntity.UpdateMainObjectBindingSource();
            }
        }

        public void ShowCollectionComponents(ICCollectionsInfo item)
        {
            ICCollectionItemsController objCollectionController = new ICCollectionItemsController();

            List<ICCollectionItemsInfo> collectionItemList = objCollectionController.GetCollectionItemListByCollectionID(item.ICCollectionID);
            guiShowCollectionComponent<ICCollectionItemsInfo> guiShowCollectionComponent = new guiShowCollectionComponent<ICCollectionItemsInfo>(collectionItemList);
            guiShowCollectionComponent.Module = this;
            guiShowCollectionComponent.ShowDialog();
            if (guiShowCollectionComponent.DialogResult != DialogResult.OK)
                return;

        }

        public void ShowItemComponent()
        {
            if (IsEditable())
            {
                ActionEdit();
            }

            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            if (entity.ARProposalItemsList.CurrentIndex >= 0)
            {
                ARProposalItemsInfo objProposalItemsInfo = entity.ARProposalItemsList[entity.ARProposalItemsList.CurrentIndex];
                ICProductsForViewInfo product = BOSApp.CurrentProductList.FirstOrDefault(o => o.ICProductID == objProposalItemsInfo.FK_ICProductID);
                if(product != null)
                {
                    if(product.HasComponent)
                    {
                        List<ICProductComponentsInfo> listComponents = (new ICProductComponentsController()).GetProductComponentListByProductID(product.ICProductID);
                        listComponents.ForEach(o => o.ICProductComponentQty = o.ICProductComponentQty * objProposalItemsInfo.ARProposalItemProductQty);
                        guiItemComponent<ICProductComponentsInfo> guiItemComponent = new guiItemComponent<ICProductComponentsInfo>(listComponents);
                        guiItemComponent.Module = this;
                        guiItemComponent.ShowDialog();
                    }
                    else
                    {
                        MessageBox.Show(InvoiceLocalizedResources.ComponentIsNull
                                        , CommonLocalizedResources.MessageBoxDefaultCaption
                                        , MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }    
                }
            }
        }
        #endregion

        #region Print
        public void PrintPriceList()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo objProposalsInfo = (ARProposalsInfo)entity.MainObject;
            RPProposalPrice report = new RPProposalPrice();

            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = (ACObjectsInfo)objObjectsController.GetObjectByIDAndType(objProposalsInfo.FK_ACObjectID, objProposalsInfo.ARObjectType);
            if (objObjectsInfo != null)
            {
                report.bsACObjects.DataSource = objObjectsInfo;
            }
            HREmployeesController objEmployeesController = new HREmployeesController();
            HREmployeesInfo objEmployeesInfo = (HREmployeesInfo)objEmployeesController.GetObjectByID(objProposalsInfo.FK_HREmployeeID);

            XRLabel lblHREmployeeName = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblHREmployeeName"];
            if (lblHREmployeeName != null)
            {
                lblHREmployeeName.Text += objEmployeesInfo.HREmployeeName;
            }
            ICProductsController objProductsController = new ICProductsController();
            ICProductGroupsController objProductGroupsController = new ICProductGroupsController();
            ICProductGroupsInfo objProductGroupsInfo = new ICProductGroupsInfo();
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            List<ICProductGroupsInfo> ProductGroupList = objProductGroupsController.GetAllObjectWithNoParentIDList();
            List<ARProposalItemsInfo> ProposalItemsPrintList = new List<ARProposalItemsInfo>();
            if (entity.ARProposalItemsList != null && entity.ARProposalItemsList.Count > 0 && ProductGroupList != null)
            {
                int groupOrder = 0;
                string oldGroupName = string.Empty;
                string presentGroupName = string.Empty;
                int itemOrder = 0;
                entity.ARProposalItemsList.ForEach(o =>
                {
                    objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(o.FK_ICProductID);
                    o.FK_ICProductGroupID = objProductsInfo.FK_ICProductGroupID;
                    o.FK_ICDepartmentID = objProductsInfo.FK_ICDepartmentID;
                    o.ARProposalItemProductDesc = " " + o.ARProposalItemProductDesc.Trim();
                    objProductGroupsInfo = objProductGroupsController.GetRootProductGroupByICProductGroupParentID(o.FK_ICProductGroupID, o.FK_ICDepartmentID);
                    if (objProductGroupsInfo != null)
                        o.ICProductGroupRootID = objProductGroupsInfo.ICProductGroupID;
                });
                ProposalItemsPrintList = entity.ARProposalItemsList.OrderBy(x => x.FK_ICDepartmentID).ThenBy(n => n.ICProductGroupRootID).ToList();
                foreach (ARProposalItemsInfo item in ProposalItemsPrintList)
                {
                    objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);
                    if (objProductsInfo != null)
                    {
                        ICMeasureUnitsController objMeasureUnitsController = new ICMeasureUnitsController();
                        ICMeasureUnitsInfo objMeasureUnitsInfo = (ICMeasureUnitsInfo)objMeasureUnitsController.GetObjectByID(objProductsInfo.FK_ICProductBasicUnitID);
                        if (objMeasureUnitsInfo != null)
                        {
                            item.ICMeasureUnitName = objMeasureUnitsInfo.ICMeasureUnitName;
                        }
                        item.FK_ICProductGroupID = objProductsInfo.FK_ICProductGroupID;
                    }
                    objProductGroupsInfo = ProductGroupList.Where(x => x.ICProductGroupID == item.ICProductGroupRootID).FirstOrDefault();
                    if (objProductGroupsInfo != null)
                    {
                        item.ICProductGroupName = objProductGroupsInfo.ICProductGroupName;
                        presentGroupName = item.ICProductGroupName;
                        if (!presentGroupName.Equals(oldGroupName))
                        {
                            oldGroupName = presentGroupName;
                            groupOrder++;
                            itemOrder = 0;
                        }
                        itemOrder++;
                        item.GroupOrder = groupOrder;
                        item.ItemOrder = groupOrder.ToString() + "." + itemOrder.ToString();
                    }
                    else
                    {
                        item.ICProductGroupName = "Nhóm hàng khác";
                        presentGroupName = item.ICProductGroupName;
                        if (!presentGroupName.Equals(oldGroupName))
                        {
                            oldGroupName = presentGroupName;
                            groupOrder++;
                            itemOrder = 0;
                        }
                        itemOrder++;
                        item.GroupOrder = groupOrder;
                        item.ItemOrder = groupOrder.ToString() + "." + itemOrder.ToString();
                    }
                    if (item.ARProposalItemLength > 0 || item.ARProposalItemWidth > 0 || item.ARProposalItemHeight > 0)
                        item.ARProposalItemProductSize = " " + Math.Round(item.ARProposalItemLength, 0, MidpointRounding.AwayFromZero) + "x" + Math.Round(item.ARProposalItemWidth, 0, MidpointRounding.AwayFromZero) + "x" + Math.Round(item.ARProposalItemHeight, 0, MidpointRounding.AwayFromZero);
                    item.ARProposalItemProductDesc = " " + item.ARProposalItemProductDesc.Trim();
                }
                ARProposalItemWorksController objProposalItemWorksController = new ARProposalItemWorksController();
                List<ARProposalItemWorksInfo> proposalItemWorksList = objProposalItemWorksController.GetProposalItemWorkCostsByProposalID(entity.ARProposalItemsList[0].FK_ARProposalID);
                if (proposalItemWorksList.Count > 0)
                {
                    ARProposalItemsInfo item = new ARProposalItemsInfo();
                    proposalItemWorksList.ForEach(o =>
                    {
                        item = new ARProposalItemsInfo();
                        objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(o.FK_ICProductID);
                        if (objProductsInfo != null)
                        {
                            item.ICProductGroupName = "Danh sách chi phí";
                            presentGroupName = item.ICProductGroupName;
                            if (!presentGroupName.Equals(oldGroupName))
                            {
                                oldGroupName = presentGroupName;
                                groupOrder++;
                                itemOrder = 0;
                            }
                            itemOrder++;
                            item.GroupOrder = groupOrder;
                            item.ItemOrder = groupOrder.ToString() + "." + itemOrder.ToString();
                            ICMeasureUnitsController objMeasureUnitsController = new ICMeasureUnitsController();
                            ICMeasureUnitsInfo objMeasureUnitsInfo = (ICMeasureUnitsInfo)objMeasureUnitsController.GetObjectByID(objProductsInfo.FK_ICProductBasicUnitID);
                            if (objMeasureUnitsInfo != null)
                            {
                                item.ICMeasureUnitName = objMeasureUnitsInfo.ICMeasureUnitName;
                            }
                            item.ARProposalItemProductDesc = " " + objProductsInfo.ICProductDesc.Trim();
                            item.ARProposalItemProductNo = objProductsInfo.ICProductNo;
                            if (item.ARProposalItemLength > 0 || item.ARProposalItemWidth > 0 || item.ARProposalItemHeight > 0)
                                item.ARProposalItemProductSize = " " + Math.Round(objProductsInfo.ICProductLength, 0, MidpointRounding.AwayFromZero) + "x" + Math.Round(objProductsInfo.ICProductWidth, 0, MidpointRounding.AwayFromZero) + "x" + Math.Round(objProductsInfo.ICProductHeight, 0, MidpointRounding.AwayFromZero);
                            item.ARProposalItemProductQty = o.ARProposalItemWorkProductQty;
                            item.ARProposalItemProductUnitPrice = o.ARProposalItemWorkProductUnitPrice;
                            item.ARProposalItemTotalAmount = item.ARProposalItemProductQty * item.ARProposalItemProductUnitPrice;
                            item.ARProposalItemDesc = o.ARProposalItemWorkComment;
                        }
                        ProposalItemsPrintList.Add(item);
                    });
                }
            }
            objProposalsInfo.ARProposalTotalAmount = objProposalsInfo.ARProposalSubTotalAmount + objProposalsInfo.ARProposalTotalCost;
            report.bsARProposalItems.DataSource = ProposalItemsPrintList;
            report.bsARProposals.DataSource = objProposalsInfo;
            XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblARProposalNo"];
            if (label != null)
            {
                label.Text += objProposalsInfo.ARProposalNo;
            }
            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblShowroom"];
            BRBranchsController objBranchsController = new BRBranchsController();
            if (label != null)
            {
                label.Text += objBranchsController.GetObjectNameByID(objEmployeesInfo.FK_BRBranchID);
            }
            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblDate"];
            if (label != null)
            {
                label.Text = "Ngày " + objProposalsInfo.ARProposalDate.ToString("dd") + " tháng " + objProposalsInfo.ARProposalDate.ToString("MM") + " năm " + objProposalsInfo.ARProposalDate.ToString("yyyy");
            }
            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xrDCLapDat"];
            if (label != null)
            {
                label.Text += objObjectsInfo.ACObjectDeliveryAddressLine1;
            }
            int order = 1;
            if (entity.ARProposalPaymentTimesList.Count == 1)
            {
                entity.ARProposalPaymentTimesList.ForEach(o =>
                {
                    label = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblPaymentTime" + order];
                    if (label != null)
                    {
                        label.Text = string.Format(label.Text, o.ARProposalPaymentTimeAmount.ToString("n0")
                                                            , ConvertAmountToWord.ReadAmount(o.ARProposalPaymentTimeAmount.ToString(), objProposalsInfo.FK_GECurrencyID)
                                                            , objProposalsInfo.ARProposalDate.ToString("dd") + "/" + objProposalsInfo.ARProposalDate.ToString("MM") + "/" + objProposalsInfo.ARProposalDate.ToString("yyyy"));
                    }
                    order++;
                    label = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblPaymentTime" + order];
                    if (label != null)
                    {
                        label.Text = string.Format(label.Text, "............."
                                                            , "............."
                                                            , ".....");
                    }
                    order++;
                });
            }
            else
            {
                entity.ARProposalPaymentTimesList.ForEach(o =>
                {
                    if (o.ARProposalPaymentTimePaymentTermItemPaymentType == "Deposit")
                    {
                        label = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblPaymentTime" + order];
                        if (label != null)
                        {
                            label.Text = string.Format(label.Text, o.ARProposalPaymentTimeAmount.ToString("n0")
                                                                , ConvertAmountToWord.ReadAmount(o.ARProposalPaymentTimeAmount.ToString(), objProposalsInfo.FK_GECurrencyID)
                                                                , objProposalsInfo.ARProposalDate.ToString("dd") + "/" + objProposalsInfo.ARProposalDate.ToString("MM") + "/" + objProposalsInfo.ARProposalDate.ToString("yyyy"));
                        }
                    }
                    else
                    {
                        label = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblPaymentTime" + order];
                        if (label != null)
                        {
                            label.Text = string.Format(label.Text, o.ARProposalPaymentTimeAmount.ToString("n0")
                                                                , ConvertAmountToWord.ReadAmount(o.ARProposalPaymentTimeAmount.ToString(), objProposalsInfo.FK_GECurrencyID)
                                                                , o.ARProposalPaymentTimePaymentTermItemPercentPayment.ToString("n0"));
                        }
                    }
                    order++;
                });
            }
            if (order == 3)
            {
                label = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblPaymentTime" + order];
                if (label != null)
                {
                    label.Text = string.Format(label.Text, "............."
                                                            , "............."
                                                            , ".....");
                }
            }
            guiReportPreview reviewer = new guiReportPreview(report, null, false);
            reviewer.Show();
        }

        public void PrintVinmoPriceList()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo objProposalsInfo = (ARProposalsInfo)entity.MainObject;
            RPProposalPriceVinmo report = new RPProposalPriceVinmo();

            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = (ACObjectsInfo)objObjectsController.GetObjectByIDAndType(objProposalsInfo.FK_ACObjectID, objProposalsInfo.ARObjectType);
            if (objObjectsInfo != null)
            {
                report.bsACObjects.DataSource = objObjectsInfo;
            }
            HREmployeesController objEmployeesController = new HREmployeesController();
            HREmployeesInfo objEmployeesInfo = (HREmployeesInfo)objEmployeesController.GetObjectByID(objProposalsInfo.FK_HREmployeeID);

            XRLabel lblHREmployeeName = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblHREmployeeName"];
            if (lblHREmployeeName != null)
            {
                lblHREmployeeName.Text += objEmployeesInfo.HREmployeeName;
            }
            ICProductsController objProductsController = new ICProductsController();
            ICProductGroupsController objProductGroupsController = new ICProductGroupsController();
            ICProductGroupsInfo objProductGroupsInfo = new ICProductGroupsInfo();
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            List<ICProductGroupsInfo> ProductGroupList = objProductGroupsController.GetAllObjectWithNoParentIDList();
            List<ARProposalItemsInfo> ProposalItemsPrintList = new List<ARProposalItemsInfo>();
            if (entity.ARProposalItemsList != null && entity.ARProposalItemsList.Count > 0 && ProductGroupList != null)
            {
                int groupOrder = 0;
                string oldGroupName = string.Empty;
                string presentGroupName = string.Empty;
                int itemOrder = 0;
                entity.ARProposalItemsList.ForEach(o =>
                {
                    objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(o.FK_ICProductID);
                    o.FK_ICProductGroupID = objProductsInfo.FK_ICProductGroupID;
                    o.FK_ICDepartmentID = objProductsInfo.FK_ICDepartmentID;
                    o.ARProposalItemProductDesc = " " + o.ARProposalItemProductDesc.Trim();
                    objProductGroupsInfo = objProductGroupsController.GetRootProductGroupByICProductGroupParentID(o.FK_ICProductGroupID, o.FK_ICDepartmentID);
                    if (objProductGroupsInfo != null)
                        o.ICProductGroupRootID = objProductGroupsInfo.ICProductGroupID;
                });
                ProposalItemsPrintList = entity.ARProposalItemsList.OrderBy(x => x.FK_ICDepartmentID).ThenBy(n => n.ICProductGroupRootID).ToList();
                foreach (ARProposalItemsInfo item in ProposalItemsPrintList)
                {
                    objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);
                    if (objProductsInfo != null)
                    {
                        ICMeasureUnitsController objMeasureUnitsController = new ICMeasureUnitsController();
                        ICMeasureUnitsInfo objMeasureUnitsInfo = (ICMeasureUnitsInfo)objMeasureUnitsController.GetObjectByID(objProductsInfo.FK_ICProductBasicUnitID);
                        if (objMeasureUnitsInfo != null)
                        {
                            item.ICMeasureUnitName = objMeasureUnitsInfo.ICMeasureUnitName;
                        }
                        //item.FK_ICProductGroupID = objProductsInfo.FK_ICProductGroupID;
                    }
                    if (item.ARProposalItemLength > 0 || item.ARProposalItemWidth > 0 || item.ARProposalItemHeight > 0)
                        item.ARProposalItemProductSize = " " + Math.Round(item.ARProposalItemLength, 0, MidpointRounding.AwayFromZero) + "x" + Math.Round(item.ARProposalItemWidth, 0, MidpointRounding.AwayFromZero) + "x" + Math.Round(item.ARProposalItemHeight, 0, MidpointRounding.AwayFromZero);
                    item.ARProposalItemProductDesc = " " + item.ARProposalItemProductDesc.Trim();
                    objProductGroupsInfo = ProductGroupList.Where(x => x.ICProductGroupID == item.ICProductGroupRootID).FirstOrDefault();
                    if (objProductGroupsInfo != null)
                    {
                        item.ICProductGroupName = objProductGroupsInfo.ICProductGroupName;
                        presentGroupName = item.ICProductGroupName;
                        if (!presentGroupName.Equals(oldGroupName))
                        {
                            oldGroupName = presentGroupName;
                            groupOrder++;
                            itemOrder = 0;
                        }
                        itemOrder++;
                        item.GroupOrder = groupOrder;
                        item.ItemOrder = groupOrder.ToString() + "." + itemOrder.ToString();
                    }
                    else
                    {
                        item.ICProductGroupName = "Nhóm hàng khác";
                        presentGroupName = item.ICProductGroupName;
                        if (!presentGroupName.Equals(oldGroupName))
                        {
                            oldGroupName = presentGroupName;
                            groupOrder++;
                            itemOrder = 0;
                        }
                        itemOrder++;
                        item.GroupOrder = groupOrder;
                        item.ItemOrder = groupOrder.ToString() + "." + itemOrder.ToString();
                    }
                    item.ARProposalItemProductDesc = " " + item.ARProposalItemProductDesc.Trim();
                }
                ARProposalItemWorksController objProposalItemWorksController = new ARProposalItemWorksController();
                List<ARProposalItemWorksInfo> proposalItemWorksList = objProposalItemWorksController.GetProposalItemWorkCostsByProposalID(entity.ARProposalItemsList[0].FK_ARProposalID);
                if (proposalItemWorksList.Count > 0)
                {
                    ARProposalItemsInfo item = new ARProposalItemsInfo();
                    proposalItemWorksList.ForEach(o =>
                    {
                        item = new ARProposalItemsInfo();
                        objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(o.FK_ICProductID);
                        if (objProductsInfo != null)
                        {
                            item.ICProductGroupName = "Danh sách chi phí";
                            presentGroupName = item.ICProductGroupName;
                            if (!presentGroupName.Equals(oldGroupName))
                            {
                                oldGroupName = presentGroupName;
                                groupOrder++;
                                itemOrder = 0;
                            }
                            itemOrder++;
                            item.GroupOrder = groupOrder;
                            item.ItemOrder = groupOrder.ToString() + "." + itemOrder.ToString();
                            ICMeasureUnitsController objMeasureUnitsController = new ICMeasureUnitsController();
                            ICMeasureUnitsInfo objMeasureUnitsInfo = (ICMeasureUnitsInfo)objMeasureUnitsController.GetObjectByID(objProductsInfo.FK_ICProductBasicUnitID);
                            if (objMeasureUnitsInfo != null)
                            {
                                item.ICMeasureUnitName = objMeasureUnitsInfo.ICMeasureUnitName;
                            }
                            item.ARProposalItemProductDesc = " " + objProductsInfo.ICProductDesc.Trim();
                            item.ARProposalItemProductNo = objProductsInfo.ICProductNo;
                            if (item.ARProposalItemLength > 0 || item.ARProposalItemWidth > 0 || item.ARProposalItemHeight > 0)
                                item.ARProposalItemProductSize = " " + Math.Round(objProductsInfo.ICProductLength, 0, MidpointRounding.AwayFromZero) + "x" + Math.Round(objProductsInfo.ICProductWidth, 0, MidpointRounding.AwayFromZero) + "x" + Math.Round(objProductsInfo.ICProductHeight, 0, MidpointRounding.AwayFromZero);
                            item.ARProposalItemProductQty = o.ARProposalItemWorkProductQty;
                            item.ARProposalItemProductUnitPrice = o.ARProposalItemWorkProductUnitPrice;
                            item.ARProposalItemTotalAmount = item.ARProposalItemProductQty * item.ARProposalItemProductUnitPrice;
                            item.ARProposalItemDesc = o.ARProposalItemWorkComment;
                        }
                        ProposalItemsPrintList.Add(item);
                    });
                }
            }
            objProposalsInfo.ARProposalTotalAmount = objProposalsInfo.ARProposalSubTotalAmount + objProposalsInfo.ARProposalTotalCost;
            report.bsARProposalItems.DataSource = ProposalItemsPrintList;
            report.bsARProposals.DataSource = objProposalsInfo;
            XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblARProposalNo"];
            if (label != null)
            {
                label.Text += objProposalsInfo.ARProposalNo;
            }
            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblShowroom"];
            BRBranchsController objBranchsController = new BRBranchsController();
            if (label != null)
            {
                label.Text += objBranchsController.GetObjectNameByID(objEmployeesInfo.FK_BRBranchID);
            }
            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblDate"];
            if (label != null)
            {
                label.Text = "Ngày " + objProposalsInfo.ARProposalDate.ToString("dd") + " tháng " + objProposalsInfo.ARProposalDate.ToString("MM") + " năm " + objProposalsInfo.ARProposalDate.ToString("yyyy");
            }
            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xrDCLapDat"];
            if (label != null)
            {
                label.Text += objObjectsInfo.ACObjectDeliveryAddressLine1;
            }
            int order = 1;
            if (entity.ARProposalPaymentTimesList.Count == 1)
            {
                entity.ARProposalPaymentTimesList.ForEach(o =>
                {
                    label = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblPaymentTime" + order];
                    if (label != null)
                    {
                        label.Text = string.Format(label.Text, o.ARProposalPaymentTimeAmount.ToString("n0")
                                                            , ConvertAmountToWord.ReadAmount(o.ARProposalPaymentTimeAmount.ToString(), objProposalsInfo.FK_GECurrencyID)
                                                            , objProposalsInfo.ARProposalDate.ToString("dd") + "/" + objProposalsInfo.ARProposalDate.ToString("MM") + "/" + objProposalsInfo.ARProposalDate.ToString("yyyy"));
                    }
                    order++;
                    label = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblPaymentTime" + order];
                    if (label != null)
                    {
                        label.Text = string.Format(label.Text, "............."
                                                            , "............."
                                                            , ".....");
                    }
                    order++;
                });
            }
            else
            {
                entity.ARProposalPaymentTimesList.ForEach(o =>
                    {
                        if (o.ARProposalPaymentTimePaymentTermItemPaymentType == "Deposit")
                        {
                            label = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblPaymentTime" + order];
                            if (label != null)
                            {
                                label.Text = string.Format(label.Text, o.ARProposalPaymentTimeAmount.ToString("n0")
                                                                    , ConvertAmountToWord.ReadAmount(o.ARProposalPaymentTimeAmount.ToString(), objProposalsInfo.FK_GECurrencyID)
                                                                    , objProposalsInfo.ARProposalDate.ToString("dd") + "/" + objProposalsInfo.ARProposalDate.ToString("MM") + "/" + objProposalsInfo.ARProposalDate.ToString("yyyy"));
                            }
                        }
                        else
                        {
                            label = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblPaymentTime" + order];
                            if (label != null)
                            {
                                label.Text = string.Format(label.Text, o.ARProposalPaymentTimeAmount.ToString("n0")
                                                                    , ConvertAmountToWord.ReadAmount(o.ARProposalPaymentTimeAmount.ToString(), objProposalsInfo.FK_GECurrencyID)
                                                                    , o.ARProposalPaymentTimePaymentTermItemPercentPayment.ToString("n0"));
                            }
                        }
                        order++;
                    });
            }
            if (order == 3)
            {
                label = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblPaymentTime" + order];
                if (label != null)
                {
                    label.Text = string.Format(label.Text, "............."
                                                            , "............."
                                                            , ".....");
                }
            }
            guiReportPreview reviewer = new guiReportPreview(report, null, false);
            reviewer.Show();
        }
        #endregion

        public List<ICProductAttributesInfo> GetProductAttributeDatasource(string group)
        {
            List<ICProductAttributesInfo> woodTypeList = new List<ICProductAttributesInfo>();
            ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
            woodTypeList = objProductAttributesController.GetProductAttributesByProductAttributeGroup(group);
            ICProductAttributesInfo objProductAttributesDummyInfo = new ICProductAttributesInfo();
            woodTypeList.Insert(0, objProductAttributesDummyInfo);
            return woodTypeList;
        }

        public void ChangeMoreColor(string colorIDs)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            if (entity.ARProposalItemsList.CurrentIndex < 0)
                return;
            ARProposalItemsInfo objProposalItemsInfo = entity.ARProposalItemsList[entity.ARProposalItemsList.CurrentIndex];
            objProposalItemsInfo.ARProposalItemProductColorAttribute = colorIDs;
        }

        public void ChangeMoreWoodType(string woodTypeIDs)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            if (entity.ARProposalItemsList.CurrentIndex < 0)
                return;
            ARProposalItemsInfo objProposalItemsInfo = entity.ARProposalItemsList[entity.ARProposalItemsList.CurrentIndex];
            objProposalItemsInfo.ARProposalItemProductWoodTypeAttribute = woodTypeIDs;
        }

        public void ChangeObject(string objectAccessKey)
        {
            ICProductBranchPricesController objProductBranchPricesController = new ICProductBranchPricesController();
            ARCustomersController objCustomersController = new ARCustomersController();
            ICProductsController objICProductsController = new ICProductsController();
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo objProposalsInfo = (ARProposalsInfo)CurrentModuleEntity.MainObject;
            ARProposalsInfo oldMainObj = (ARProposalsInfo)objProposalsInfo.Clone();

            if (objProposalsInfo.CustomersInfo != null)
            {
                objProposalsInfo.CustomersInfo = null;
                objProposalsInfo.ARProposalProspectCustomer = string.Empty;
            }
            objProposalsInfo.ACObjectAccessKey = objectAccessKey;
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByAccessKey(objectAccessKey);
            objObjectsInfo = objObjectsController.GetObjectByIDAndType(objObjectsInfo.ACObjectID, objObjectsInfo.ACObjectType);
            if (objObjectsInfo != null)
            {
                objProposalsInfo.ACObjectName = objObjectsInfo.ACObjectName;
                objProposalsInfo.FK_ACObjectID = objObjectsInfo.ACObjectID;
                objProposalsInfo.ARObjectType = objObjectsInfo.ACObjectType;
                int customerID = 0;
                if (objObjectsInfo.ACObjectType == ObjectType.Customer.ToString())
                {
                    ARCustomersInfo objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectByID(objObjectsInfo.ACObjectID);
                    if (objCustomersInfo != null)
                    {
                        objProposalsInfo.FK_ARCustomerID = objCustomersInfo.ARCustomerID;
                        objProposalsInfo.FK_GEPaymentTermID = objCustomersInfo.FK_GEPaymentTermID;
                        objProposalsInfo.ARPaymentMethodCombo = objCustomersInfo.ARPaymentMethodCombo;
                        customerID = objCustomersInfo.ARCustomerID;
                    }
                    objProposalsInfo.FK_ARCustomerID = objObjectsInfo.ACObjectID;
                }
                objObjectsInfo.ACObjectCreditOwing = objObjectsController.GetTotalOwing(objObjectsInfo.ACObjectID, objObjectsInfo.ACObjectType);
                objObjectsInfo.ACObjectAvailableCredit = objObjectsInfo.ACObjectCreditLimit - objObjectsInfo.ACObjectCreditOwing;
                entity.SetDefaultValuesFromObject(objObjectsInfo);
                if (oldMainObj.FK_GECurrencyID != objProposalsInfo.FK_GECurrencyID)
                {
                    ChangeCurency(objProposalsInfo.FK_GECurrencyID);
                }
                ChangeItemFromProposalItemsList();
                DisplayLabelText(objObjectsInfo);
                DisplayLabelText(CurrentModuleEntity.MainObject);

                objProposalsInfo.FK_ARPriceLevelID = objObjectsInfo.FK_ARPriceLevelID;
                objProposalsInfo.FK_GEPaymentTermID = objObjectsInfo.GEPaymentTermID;
                ARPriceLevelsController objPriceLevelsController = new ARPriceLevelsController();
                ARPriceLevelsInfo objPriceLevelsInfo = (ARPriceLevelsInfo)objPriceLevelsController.GetObjectByID(objProposalsInfo.FK_ARPriceLevelID);
                entity.ARPriceLevelsInfo = objPriceLevelsInfo != null ? objPriceLevelsInfo : new ARPriceLevelsInfo();
                if (objProposalsInfo.FK_ARPriceSheetID == 0 && objProposalsInfo.ARProposalSourceSellingPriceMethod == SourceSellingPriceMethod.Config.ToString())
                {
                    entity.ARProposalItemsList.ForEach(o =>
                    {
                        ICProductsInfo objProductsInfo = BOSApp.GetProductFromCurrentProductList(o.FK_ICProductID);
                        o.ARProposalItemProductUnitPrice = BOSApp.CalculaterProductUnitPrice(objProductsInfo
                                                                            , o.ARProposalItemProductUnitPrice
                                                                            , o.ARProposalItemProductQty
                                                                            , o.FK_ICMeasureUnitID
                                                                            , customerID
                                                                            , objProposalsInfo.ARProposalDate
                                                                            , objProposalsInfo.FK_GECurrencyID);
                        o.ARProposalItemProductUnitPrice2 = objProposalsInfo.ARProposalExchangeRate2 > 0 ? o.ARProposalItemProductUnitPrice * objProposalsInfo.ARProposalExchangeRate / objProposalsInfo.ARProposalExchangeRate2 : 0;
                        entity.SetProductPriceByProductUnitPrice(o);
                    });
                }
                foreach (ARProposalItemsInfo infoItem in entity.ARProposalItemsList)
                {
                    if (infoItem.ARProposalItemProductQty == 0) infoItem.ARProposalItemProductQty = 1;
                    
                    infoItem.ARProposalItemPrice = infoItem.ARProposalItemProductUnitPrice * infoItem.ARProposalItemProductQty;
                    infoItem.ARProposalItemNetAmount = infoItem.ARProposalItemPrice;
                    infoItem.ARProposalItemDiscountAmount = infoItem.ARProposalItemDiscountFix * infoItem.ARProposalItemPrice / 100;
                    infoItem.ARProposalItemTaxAmount = infoItem.ARProposalItemProductTaxPercent * (infoItem.ARProposalItemPrice - infoItem.ARProposalItemDiscountAmount) / 100;
                    infoItem.ARProposalItemTotalCost = infoItem.ARProposalItemProductUnitCost * infoItem.ARProposalItemProductQty;
                    infoItem.ARProposalItemTotalAmount = infoItem.ARProposalItemPrice - infoItem.ARProposalItemDiscountAmount + infoItem.ARProposalItemTaxAmount;
                }
                GeneratePaymentTime(objProposalsInfo.FK_GEPaymentTermID);
                entity.ARProposalItemsList.GridControl?.RefreshDataSource();
                entity.UpdateTotalAmount();
                entity.UpdateMainObjectBindingSource();
            }
            else
            {
                objProposalsInfo.ARObjectType = string.Empty;
                objProposalsInfo.FK_ACObjectID = 0;
                objProposalsInfo.FK_ARCustomerID = 0;
            }
            ICProductCustomersController objProductCustomersController = new ICProductCustomersController();
            entity.ARProposalItemsList.ForEach(o =>
            {
                ICProductCustomersInfo objProductCustomersInfo = (ICProductCustomersInfo)objProductCustomersController.GetProductCustomerByProductIDAndCustomerID(o.FK_ICProductID, objProposalsInfo.FK_ARCustomerID);
                o.ARProposalItemProductCustomerNumber = objProductCustomersInfo != null ? objProductCustomersInfo.ICProductCustomerNumber : string.Empty;
            });
            entity.ARProposalItemsList.GridControl?.RefreshDataSource();
        }
        public void ChangeCurency(int curency)
        {
            if (curency > 0)
            {
                ARConfigOriginalUnitPricesController objcoupController = new ARConfigOriginalUnitPricesController();
                ARConfigOriginalUnitPricesInfo objconfigPrice = objcoupController.GetOriginalIsAlive();
                if (objconfigPrice != null)
                {
                    if (objconfigPrice.ARConfigOriginalUnitPriceVoucher)
                    {
                        if (MessageBox.Show("Thay đổi loại tiền tệ sẽ thay đổi đơn giá bán, bạn có chắc muốn thay đổi không? "
                            , CommonLocalizedResources.MessageBoxDefaultCaption
                            , MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                        {
                            return;
                        }
                    }
                    UpdateTotalAmountByCurrency(curency);
                }
            }
        }
        public void GetCurrentModuleDataViewPermission()
        {
            CurrentModuleDataViewPermissionList = BOSApp.CurrentADDataViewPermissionList.Where(i => i.STModuleName == Name && i.ADDataViewPermissionType == ADDataViewPermissionType.Module).ToList();

            List<int> branchIDList = new List<int>();
            foreach (ADDataViewPermissionsInfo dataViewPermissionsInfo in CurrentModuleDataViewPermissionList)
            {
                branchIDList.Add(dataViewPermissionsInfo.FK_BRBranchID);
            }

            if (branchIDList.Count == 0)
            {
                BranchList = new List<BRBranchsInfo>();
            }
            else
            {
                BRBranchsController objBranchsController = new BRBranchsController();
                List<BRBranchsInfo> branchList = objBranchsController.GetAllBranches();

                BranchList = branchList.Where(i => branchIDList.IndexOf(i.BRBranchID) > -1).ToList();
            }
        }

        protected override DataSet GetSearchData(ref string searchQuery)
        {
            ARProposalsController objProposalsController = new ARProposalsController();
            ARProposalsInfo searchObject = (ARProposalsInfo)CurrentModuleEntity.SearchObject;
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByAccessKey(searchObject.ACObjectAccessKey);
            DataSet ds = new DataSet();
            if (SearchBranchLookupEditControl.EditValue.ToString() == "" || SearchBranchLookupEditControl.EditValue.ToString() == "0")
            {
                if (BranchList.Count == 0)
                {
                    ds = objProposalsController.GetDataSetByID(-1);
                }
                else
                {

                    ds = objProposalsController.GetProposalByListOfBranchID(searchObject.ARProposalNo,
                                                                            objObjectsInfo.ACObjectID,
                                                                            objObjectsInfo.ACObjectType,
                                                                            searchObject.FK_HREmployeeID,
                                                                            searchObject.ARProposalFromDate,
                                                                            searchObject.ARProposalToDate,
                                                                            searchObject.ARProposalDeliveryFromDate,
                                                                            searchObject.ARProposalDeliveryToDate,
                                                                            searchObject.ARProposalValidateFromDate,
                                                                            searchObject.ARProposalValidateToDate,
                                                                            searchObject.FK_ICProductID,
                                                                            BOSApp.CurrentUsersInfo.ADUserID,
                                                                            BranchList);
                }
            }
            else
            {
                ds = objProposalsController.GetProposalByBranchIDAndUser(searchObject.ARProposalNo,
                                                                            objObjectsInfo.ACObjectID,
                                                                            objObjectsInfo.ACObjectType,
                                                                            searchObject.FK_HREmployeeID,
                                                                            searchObject.ARProposalFromDate,
                                                                            searchObject.ARProposalToDate,
                                                                            searchObject.ARProposalDeliveryFromDate,
                                                                            searchObject.ARProposalDeliveryToDate,
                                                                            searchObject.ARProposalValidateFromDate,
                                                                            searchObject.ARProposalValidateToDate,
                                                                            searchObject.FK_ICProductID,
                                                                            searchObject.FK_BRBranchID,
                                                                            BOSApp.CurrentUsersInfo.ADUserID);
            }

            return ds;
        }

        public void SetDefaultProposalItemProductDesc()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainobject = (ARProposalsInfo)entity.MainObject;
            if (entity.ARProposalItemsList.CurrentIndex < 0)
                return;
            ARProposalItemsInfo objProposalItemsInfo = entity.ARProposalItemsList[entity.ARProposalItemsList.CurrentIndex];
            if (objProposalItemsInfo.ARProposalItemType == ProductTemplateType.Available.ToString())
                return;

            List<string> item = new List<string>();
            ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
            ICProductAttributesInfo objProductAttributesInfo = null;
            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(objProposalItemsInfo.FK_ICProductID);
            if (objProductsInfo != null && objProductsInfo.ICProductTemplateType == ProductTemplateType.Design.ToString())
            {
                //Tên
                item.Add(objProposalItemsInfo.ARProposalItemProductName.Trim());

                //dài rộng cao
                if (objProposalItemsInfo.ARProposalItemHeight > 0 || objProposalItemsInfo.ARProposalItemWidth > 0 || objProposalItemsInfo.ARProposalItemLength > 0)
                {
                    string style = string.Empty;
                    if (objProposalItemsInfo.ARProposalItemLength > 0)
                        style = style + ToString(objProposalItemsInfo.ARProposalItemLength);
                    if (objProposalItemsInfo.ARProposalItemWidth > 0)
                        style = style + "x" + ToString(objProposalItemsInfo.ARProposalItemWidth);
                    if (objProposalItemsInfo.ARProposalItemHeight > 0)
                        style = style + "x" + ToString(objProposalItemsInfo.ARProposalItemHeight);
                    item.Add(style + " mm");
                }

                //Thuộc tính khác
                if (!string.IsNullOrEmpty(objProposalItemsInfo.ARProposalItemProductAttribute))
                {
                    string[] attributeValueIDs = objProposalItemsInfo.ARProposalItemProductAttribute.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                    ICDepartmentAttributeValuesController objDepartmentAttributeValuesController = new ICDepartmentAttributeValuesController();
                    for (int i = 0; i < attributeValueIDs.Length; i++)
                    {
                        int attributeValueID = Convert.ToInt32(attributeValueIDs[i]);
                        ICDepartmentAttributeValuesInfo objDepartmentAttributeValuesInfo = (ICDepartmentAttributeValuesInfo)objDepartmentAttributeValuesController.GetObjectByID(attributeValueID);
                        if (objDepartmentAttributeValuesInfo != null)
                            item.Add(objDepartmentAttributeValuesInfo.ICDepartmentAttributeValueValue);
                    }
                }

                // Xác định loại gỗ
                if (objProposalItemsInfo.FK_ICProductAttributeWoodTypeID > 0)
                {
                    objProductAttributesInfo = (ICProductAttributesInfo)objProductAttributesController.GetObjectByID(objProposalItemsInfo.FK_ICProductAttributeWoodTypeID);
                    if (objProductAttributesInfo != null)
                    {
                        item.Add(objProductAttributesInfo.ICProductAttributeValue);
                    }
                }

                //Loại gỗ khác
                if (!string.IsNullOrEmpty(objProposalItemsInfo.ARProposalItemProductWoodTypeAttribute))
                {
                    string[] attributeValueIDs = objProposalItemsInfo.ARProposalItemProductWoodTypeAttribute.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                    for (int i = 0; i < attributeValueIDs.Length; i++)
                    {
                        int attributeValueID = Convert.ToInt32(attributeValueIDs[i].Trim());
                        objProductAttributesInfo = (ICProductAttributesInfo)objProductAttributesController.GetObjectByID(attributeValueID);
                        if (objProductAttributesInfo != null)
                            item.Add(objProductAttributesInfo.ICProductAttributeValue);
                    }
                }

                //Màu sơn
                if (objProposalItemsInfo.FK_ICProductAttributeColorID > 0)
                {
                    objProductAttributesInfo = (ICProductAttributesInfo)objProductAttributesController.GetObjectByID(objProposalItemsInfo.FK_ICProductAttributeColorID);
                    if (objProductAttributesInfo != null)
                    {
                        item.Add(objProductAttributesInfo.ICProductAttributeValue);
                    }
                }
                //Màu sơn khác
                if (!string.IsNullOrEmpty(objProposalItemsInfo.ARProposalItemProductColorAttribute))
                {
                    string[] attributeValueIDs = objProposalItemsInfo.ARProposalItemProductColorAttribute.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                    for (int i = 0; i < attributeValueIDs.Length; i++)
                    {
                        int attributeValueID = Convert.ToInt32(attributeValueIDs[i].Trim());
                        objProductAttributesInfo = (ICProductAttributesInfo)objProductAttributesController.GetObjectByID(attributeValueID);
                        if (objProductAttributesInfo != null)
                            item.Add(objProductAttributesInfo.ICProductAttributeValue);
                    }
                }

                objProposalItemsInfo.ARProposalItemProductDesc = string.Join(", ", item.Where(o => !string.IsNullOrEmpty(o)).ToArray());
            }

            entity.ARProposalItemsList.GridControl?.RefreshDataSource();
        }

        private string ToString(decimal number)
        {
            if (number == 0)
                return "0";
            return number / Convert.ToInt32(number) != 1 ? number.ToString("N3") : number.ToString("N0");
        }

        public void ChangeTaxPercent()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
                ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;
                if (mainObject.ARProposalTaxPercentOld != mainObject.ARProposalTaxPercent)
                {
                    ((ProposalEntities)CurrentModuleEntity).UpdateTotalAmount();
                    mainObject.ARProposalTaxPercentOld = mainObject.ARProposalTaxPercent;
                }
            }
        }

        public void ChangeTaxAmount()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo objProposalsInfo = (ARProposalsInfo)entity.MainObject;
            if (objProposalsInfo.ARProposalSubTotalAmount > 0)
                objProposalsInfo.ARProposalTaxPercent = objProposalsInfo.ARProposalTaxAmount / (objProposalsInfo.ARProposalSubTotalAmount + objProposalsInfo.ARProposalTotalCost - objProposalsInfo.ARProposalDiscountFix) * 100;
            entity.UpdateTotalAmount();
        }

        public override void ActionDuplicate()
        {
            base.ActionDuplicate();
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo objProposalsInfo = (ARProposalsInfo)entity.MainObject;
            objProposalsInfo.ARProposalStatus = ProposalStatus.New.ToString();
            objProposalsInfo.ARProposalDate = BOSApp.GetCurrentServerDate();
            objProposalsInfo.ARProposalDeliveryDate = DateTime.Now;
            objProposalsInfo.ARProposalValidateDate = DateTime.Now;
            objProposalsInfo.FK_ARPriceLevelID = 1;
            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            decimal dCurrencyExchangeRate = BOSApp.RealTimeExchageRateByCurrencyAndDate(objProposalsInfo.FK_GECurrencyID, objProposalsInfo.ARProposalDate);
            if (dCurrencyExchangeRate > 0)
            {
                objProposalsInfo.ARProposalExchangeRate = dCurrencyExchangeRate;
            }
            decimal dCurrencyExchangeRate2 = BOSApp.RealTimeExchageRateByCurrencyAndDate(objProposalsInfo.FK_GECurrencyID2, objProposalsInfo.ARProposalDate);
            objProposalsInfo.ARProposalExchangeRate2 = dCurrencyExchangeRate2 > 0 ? dCurrencyExchangeRate2 : 1;
            entity.ARProposalItemsList.ForEach(o =>
            {
                o.FK_ARProposalID = 0;
                if (objProposalsInfo.FK_ACObjectID > 0)
                {
                    objProductsInfo = (ICProductsInfo)objProductsController.GetProductDefualtPriceFromInvoiceByCustomerID(o.FK_ICProductID
                                                                                                                        , objProposalsInfo.FK_ACObjectID
                                                                                                                        , objProposalsInfo.ARObjectType
                                                                                                                        , objProposalsInfo.FK_GECurrencyID
                                                                                                                        , objProposalsInfo.ARProposalExchangeRate
                                                                                                                        );
                    if (objProductsInfo != null && objProductsInfo.ICProductPrice01 > 0)
                        o.ICProductUnitPrice = objProductsInfo.ICProductPrice01;
                }
                o.ARProposalItemProductUnitPrice = o.ICProductUnitPrice > 0 ? o.ICProductUnitPrice : o.ARProposalItemProductUnitPrice;
                if (objProposalsInfo.ARProposalExchangeRate > 0)
                {
                    o.ARProposalItemProductUnitPrice2 = o.ARProposalItemProductUnitPrice * objProposalsInfo.ARProposalExchangeRate / objProposalsInfo.ARProposalExchangeRate2;
                }
            });
            ChangeSourceSellingPriceMethod(objProposalsInfo.ARProposalSourceSellingPriceMethod);
            UpdatePriceForcurrencyOrExchange(true);
            entity.UpdateMainObjectBindingSource();
            entity.ARProposalItemsList.GridControl?.RefreshDataSource();
        }

        public void ChangeProposalItemDiscountAmount()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            if (entity.ARProposalItemsList.CurrentIndex < 0)
                return;
            ARProposalItemsInfo objProposalItemsInfo = entity.ARProposalItemsList[entity.ARProposalItemsList.CurrentIndex];
            objProposalItemsInfo.ARProposalItemDiscountFix = (objProposalItemsInfo.ARProposalItemDiscountAmount / objProposalItemsInfo.ARProposalItemPrice) * 100;
            objProposalItemsInfo.ARProposalItemTotalAmount = (objProposalItemsInfo.ARProposalItemProductUnitPrice * objProposalItemsInfo.ARProposalItemProductQty) - objProposalItemsInfo.ARProposalItemDiscountAmount;
            entity.ARProposalItemsList.GridControl?.RefreshDataSource();
            entity.UpdateMainObjectBindingSource();
            entity.UpdateTotalAmount();
        }

        public void AddWorkItemToProposalItemWorksCostList()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
                //Ðang làm
                ARProposalsInfo objProposalsInfo = (ARProposalsInfo)entity.MainObject;
                ICProductsController objProductsController = new ICProductsController();
                ICProductWorkItemsController objProductWorkItemsController = new ICProductWorkItemsController();
                List<ICProductsInfo> result = objProductsController.GetListProductByProductType(ProductType.Work.ToString());
                List<ICProductsInfo> productWorkList = result.Where(o => o.ICProductChargeCheck).ToList();
                guiFind<ICProductsInfo> guiAddProduct = new guiFind<ICProductsInfo>("ICProducts", productWorkList, this, true, true);
                guiAddProduct.ShowDialog();
                if (guiAddProduct.DialogResult != DialogResult.OK)
                    return;

                IList<ICProductsInfo> results = guiAddProduct.SelectedObjects;
                if (results.Count == 0)
                    return;

                if (IsEditable())
                    ActionEdit();

                //Ðang làm
                results.ToList().ForEach(o =>
                {
                    ARProposalItemWorksInfo objProposalItemCost = ToProposalItemWorks(o);

                    entity.ARProposalItemCostList.Add(objProposalItemCost);

                    List<ICProductWorkItemsInfo> productWorkItemList = objProductWorkItemsController.GetProductWorkItemsByProductWorkItemParentIDAndParentType(o.ICProductID, o.ICProductType);
                    List<ICProductWorkItemsInfo> productWorkMaterialItemList = productWorkItemList.Where(s => s.ICProductWorkItemType == ProductWorkItemType.Material.ToString()
                                                                                                                                         && s.ICProductWorkItemProductChargeCheck)
                                                                                                  .ToList();
                    List<ICProductWorkItemsInfo> productWorkAssetItemList = productWorkItemList.Where(s => s.ICProductWorkItemType == ProductWorkItemType.Asset.ToString()
                                                                                                                                         && s.ICProductWorkItemProductChargeCheck)
                                                                                                  .ToList();
                    productWorkMaterialItemList.ForEach(s =>
                    {
                        objProposalItemCost = ToProposalItemWorks(s);
                        entity.ARProposalItemCostList.Add(objProposalItemCost);
                    });
                    productWorkAssetItemList.ForEach(s =>
                    {
                        objProposalItemCost = ToProposalItemWorks(s);
                        entity.ARProposalItemCostList.Add(objProposalItemCost);
                    });
                });
                ARProposalItemCostsGridControl?.RefreshDataSource();
                objProposalsInfo.ARProposalTotalCost = 0;
                entity.ARProposalItemCostList.ForEach(o =>
                    objProposalsInfo.ARProposalTotalCost += o.ARProposalItemWorkTotalAmount);
                entity.UpdateTotalAmount();
                entity.UpdateMainObjectBindingSource();
            }
        }

        public ARProposalItemWorksInfo ToProposalItemWorks(ICProductsInfo objProductsInfo)
        {
            return new ARProposalItemWorksInfo()
            {
                FK_ICProductID = objProductsInfo.ICProductID,
                FK_ICDepartmentID = objProductsInfo.FK_ICDepartmentID,
                FK_ICProductGroupID = objProductsInfo.FK_ICProductGroupID,
                FK_ICMeasureUnitID = objProductsInfo.FK_ICProductBasicUnitID,
                ARProposalItemWorkProductNo = objProductsInfo.ICProductNo,
                ARProposalItemWorkProductName = objProductsInfo.ICProductName,
                ARProposalItemWorkProductDesc = objProductsInfo.ICProductDesc,
                ARProposalItemWorkProductQty = 1,
                ARProposalItemWorkProductUnitPrice = objProductsInfo.ICProductPrice01,
                ARProposalItemWorkProductType = objProductsInfo.ICProductType,
                ARProposalItemWorkProductChargeCheck = objProductsInfo.ICProductChargeCheck,
                ARProposalItemWorkTotalAmount = objProductsInfo.ICProductPrice01,
                ARProposalItemWorkSubTotalAmount = objProductsInfo.ICProductPrice01
            };
        }

        public ARProposalItemWorksInfo ToProposalItemWorks(ICProductWorkItemsInfo objProductWorkItemsInfo)
        {
            return new ARProposalItemWorksInfo()
            {
                FK_ICProductID = objProductWorkItemsInfo.FK_ICProductWorkItemChildID,
                FK_ICProductReferenceID = objProductWorkItemsInfo.FK_ICProductWorkItemParentID,
                FK_ICDepartmentID = objProductWorkItemsInfo.FK_ICDepartmentID,
                FK_ICProductGroupID = objProductWorkItemsInfo.FK_ICProductGroupID,
                FK_ICMeasureUnitID = objProductWorkItemsInfo.FK_ICProductBasicUnitID,
                ARProposalItemWorkProductNo = objProductWorkItemsInfo.ICProductWorkItemProductNo,
                ARProposalItemWorkProductName = objProductWorkItemsInfo.ICProductWorkItemProductName,
                ARProposalItemWorkProductDesc = objProductWorkItemsInfo.ICProductWorkItemProductDesc,
                ARProposalItemWorkProductQty = objProductWorkItemsInfo.ICProductWorkItemQty,
                ARProposalItemWorkProductUnitPrice = objProductWorkItemsInfo.ICProductPrice01,
                ARProposalItemWorkProductType = objProductWorkItemsInfo.ICProductWorkItemType,
                ARProposalItemWorkProductChargeCheck = true,
                ARProposalItemWorkTotalAmount = objProductWorkItemsInfo.ICProductPrice01 * objProductWorkItemsInfo.ICProductWorkItemQty,
                ARProposalItemWorkSubTotalAmount = objProductWorkItemsInfo.ICProductPrice01 * objProductWorkItemsInfo.ICProductWorkItemQty
            };
        }

        public void AddMaterialItemProposalItemWorksCostList()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
                ARProposalsInfo objProposalsInfo = (ARProposalsInfo)entity.MainObject;
                List<string> productTypes = new List<string>();
                productTypes = Enum.GetNames(typeof(ProductType)).Where(s => s != ProductType.Work.ToString()
                                                                                  && s != ProductType.SemiProduct.ToString()
                                                                                  && s != ProductType.Equipment.ToString()
                                                                                  && s != ProductType.VVP.ToString()
                                                                                  && s != ProductType.MMTB.ToString()
                                                                                  && s != ProductType.Car.ToString()).ToList();
                List<ICProductsInfo> productList = new List<ICProductsInfo>();
                List<ICProductsForViewInfo> productViewList = BOSApp.CurrentProductList.Where(p => productTypes.Contains(p.ICProductType)).ToList();
                if (productViewList.Count() > 0) productViewList.ForEach(o =>
                {
                    ICProductsInfo newObj = new ICProductsInfo();
                    BOSUtil.CopyObject(o, newObj);
                    productList.Add(newObj);
                });
                guiFind<ICProductsInfo> guiAddProduct = new guiFind<ICProductsInfo>("ICProducts", productList, this, true, true);
                guiAddProduct.ShowDialog();
                if (guiAddProduct.DialogResult != DialogResult.OK)
                    return;

                IList<ICProductsInfo> results = guiAddProduct.SelectedObjects;
                if (results.Count == 0)
                    return;

                if (IsEditable())
                    ActionEdit();
                results.ToList().ForEach(o =>
                {
                    ARProposalItemWorksInfo objProposalItemCost = ToProposalItemWorks(o);
                    objProposalItemCost.ARProposalItemWorkProductQty = 1;
                    objProposalItemCost.ARProposalItemWorkProductType = ProductItemType.Material.ToString();
                    objProposalItemCost.ARProposalItemWorkTotalAmount = objProposalItemCost.ARProposalItemWorkProductUnitPrice * objProposalItemCost.ARProposalItemWorkProductQty;
                    entity.ARProposalItemWorkMaterialList.Add(objProposalItemCost);

                    if (objProposalItemCost.ARProposalItemWorkProductChargeCheck)
                    {
                        entity.ARProposalItemCostList.Add(objProposalItemCost);
                    }
                });
                entity.ARProposalItemWorkMaterialList.GridControl?.RefreshDataSource();
                entity.ARProposalItemCostList.GridControl?.RefreshDataSource();

                objProposalsInfo.ARProposalTotalCost = 0;
                entity.ARProposalItemCostList.ForEach(o =>
                    objProposalsInfo.ARProposalTotalCost += o.ARProposalItemWorkTotalAmount);

                entity.UpdateTotalAmount();
                entity.UpdateMainObjectBindingSource();
            }
        }
        public override int ActionSave()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainobject = (ARProposalsInfo)entity.MainObject;
            ARCustomersInfo objCustomersInfo = mainobject.CustomersInfo == null ? null : mainobject.CustomersInfo.Clone() as ARCustomersInfo;
            if (mainobject.FK_ACObjectID == 0 && string.IsNullOrEmpty(mainobject.ARProposalProspectCustomer))
            {
                MessageBox.Show("Vui lòng chọn Ðối tượng"
                                , "Thông báo"
                                , MessageBoxButtons.OK
                                , MessageBoxIcon.Information);
                return 0;
            }
            if (string.IsNullOrEmpty(mainobject.ARProposalName))
            {
                MessageBox.Show(ProposalLocalizedResources.ProposalNameIsNull
                                , CommonLocalizedResources.MessageBoxDefaultCaption
                                , MessageBoxButtons.OK
                                , MessageBoxIcon.Information);
                return 0;
            }
            if (string.IsNullOrEmpty(mainobject.ARProposalSaleType))
            {
                MessageBox.Show("Vui lòng chọn Hình thức bán hàng!"
                                , "Thông báo"
                                , MessageBoxButtons.OK
                                , MessageBoxIcon.Information);
                return 0;
            }
            if (string.IsNullOrEmpty(mainobject.ARPaymentMethodCombo))
            {
                MessageBox.Show("Vui lòng chọn Phương thức thanh toán!"
                                , "Thông báo"
                                , MessageBoxButtons.OK
                                , MessageBoxIcon.Information);
                return 0;
            }
            if (mainobject.FK_GEPaymentTermID == 0)
            {
                MessageBox.Show("Vui lòng chọn Điều khoản thanh toán!"
                                , "Thông báo"
                                , MessageBoxButtons.OK
                                , MessageBoxIcon.Information);
                return 0;
            }
            //bool isValid = true;
            //foreach (ARProposalItemsInfo item in entity.ARProposalItemsList)
            //{
            //    if (item.ICProductUnitPrice != null && item.ICProductUnitPrice <= 0)
            //    {
            //        if (MessageBox.Show(string.Format(SaleOrderLocalizedResources.NonProductUnitPrice, item.ARProposalItemProductName),
            //                            CommonLocalizedResources.MessageBoxDefaultCaption,
            //                            MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.No)
            //        {
            //            isValid = false;
            //            break;
            //        }
            //    }
            //}
            //if (!isValid)
            //{
            //    return 0;
            //}

            if (mainobject.ARProposalSaleType == ProposalSaleType.International.ToString() && mainobject.FK_GECurrencyID == GECurrencyID.VND)
            {
                BOSApp.ShowMessage("Vui lòng chọn loại tiền tệ khác VND khi hình thức thanh toán là quốc tế!");
                return 0;
            }
            if (ProposalDescEditControl != null)
            {
                mainobject.ARProposalDesc = ProposalDescEditControl.OpenXmlBytes;
            }   
            int objectID = base.ActionSave();
            entity.SetPropertyChangeEventLock(false);
            CreateCustomer(objCustomersInfo);
            entity.UpdateMainObjectBindingSource();
            entity.SetPropertyChangeEventLock(true);
            return objectID;
        }

        public void ChangeQty(ARProposalItemWorksInfo item)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;

            item.ARProposalItemWorkSubTotalAmount = item.ARProposalItemWorkProductUnitPrice * item.ARProposalItemWorkProductQty;
            item.ARProposalItemWorkTotalAmount = item.ARProposalItemWorkProductUnitPrice * item.ARProposalItemWorkProductQty;

            ChangeProposalItemCostDiscountPerCent();

            entity.UpdateTotalAmount();
            entity.ARProposalItemWorkList.GridControl?.RefreshDataSource();
            entity.ARProposalItemCostList.GridControl?.RefreshDataSource();
            entity.ARProposalItemWorkAssetList.GridControl?.RefreshDataSource();
            entity.ARProposalItemWorkMaterialList.GridControl?.RefreshDataSource();
        }

        public void ChangeChargeCheck(ARProposalItemWorksInfo item)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            if (item.ARProposalItemWorkProductChargeCheck)
            {
                entity.ARProposalItemCostList.Add(item);
            }
            else
            {
                entity.ARProposalItemCostList.Remove(item);
            }
            entity.UpdateTotalAmount();
            entity.ARProposalItemWorkList.GridControl?.RefreshDataSource();
            entity.ARProposalItemCostList.GridControl?.RefreshDataSource();
            entity.ARProposalItemWorkAssetList.GridControl?.RefreshDataSource();
            entity.ARProposalItemWorkMaterialList.GridControl?.RefreshDataSource();
        }

        public decimal CalculatorProposalItemFormulaPriceConfigQty(ARProposalItemsInfo objProposalItemsInfo)
        {
            decimal exchangeMToMM = 1000;
            ICProductFormulaPriceConfigsController objProductFormulaPriceConfigsController = new ICProductFormulaPriceConfigsController();
            ICProductFormulaPriceConfigsInfo objProductFormulaPriceConfigsInfo = (ICProductFormulaPriceConfigsInfo)objProductFormulaPriceConfigsController.GetObjectByID(objProposalItemsInfo.FK_ICProductFormulaPriceConfigID);
            if (objProductFormulaPriceConfigsInfo == null)
                return objProposalItemsInfo.ARProposalItemProductQty;
            StringBuilder expression = new StringBuilder();
            expression.Append(objProposalItemsInfo.ARProposalItemProductQty.ToString("0.###"));
            if (!string.IsNullOrEmpty(objProductFormulaPriceConfigsInfo.ICProductFormulaPriceConfigLengthOperation)
                && objProposalItemsInfo.ARProposalItemLength > 0)
            {
                expression.Append(Operation[objProductFormulaPriceConfigsInfo.ICProductFormulaPriceConfigLengthOperation]);
                expression.Append((objProposalItemsInfo.ARProposalItemLength / exchangeMToMM).ToString("0.###"));
            }
            if (!string.IsNullOrEmpty(objProductFormulaPriceConfigsInfo.ICProductFormulaPriceConfigWidthOperation)
                && objProposalItemsInfo.ARProposalItemWidth > 0)
            {
                expression.Append(Operation[objProductFormulaPriceConfigsInfo.ICProductFormulaPriceConfigWidthOperation]);
                expression.Append((objProposalItemsInfo.ARProposalItemWidth / exchangeMToMM).ToString("0.###"));
            }
            if (!string.IsNullOrEmpty(objProductFormulaPriceConfigsInfo.ICProductFormulaPriceConfigHeightOperation)
                && objProposalItemsInfo.ARProposalItemHeight > 0)
            {
                expression.Append(Operation[objProductFormulaPriceConfigsInfo.ICProductFormulaPriceConfigHeightOperation]);
                expression.Append((objProposalItemsInfo.ARProposalItemHeight / exchangeMToMM).ToString("0.###"));
            }
            DataTable execExpression = new DataTable();
            return Convert.ToDecimal(execExpression.Compute(expression.Replace(',', '.').ToString(), string.Empty));
        }

        public void ChangeDateTime(DateTime dt)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo objProposalsInfo = (ARProposalsInfo)entity.MainObject;
            objProposalsInfo.ARProposalValidateDate = dt.AddDays(30);
            entity.UpdateMainObjectBindingSource();
        }

        public void AddProposalItemWorkAsset()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
                ARProposalsInfo objProposalsInfo = (ARProposalsInfo)entity.MainObject;
                List<string> productTypes = new List<string>();
                productTypes = Enum.GetNames(typeof(ProductType)).Where(s => s == ProductType.Equipment.ToString()
                                                                                  || s == ProductType.VVP.ToString()
                                                                                  || s == ProductType.MMTB.ToString()
                                                                                  || s == ProductType.Car.ToString()
                                                                                  || s == ProductType.Service.ToString()
                                                                                  ).ToList();
                List<ICProductsInfo> productList = new List<ICProductsInfo>();
                List<ICProductsForViewInfo> productViewList = BOSApp.CurrentProductList.Where(p => productTypes.Contains(p.ICProductType)).ToList();
                if (productViewList.Count() > 0) productViewList.ForEach(o =>
                {
                    ICProductsInfo newObj = new ICProductsInfo();
                    BOSUtil.CopyObject(o, newObj);
                    productList.Add(newObj);
                });
                guiFind<ICProductsInfo> guiAddProduct = new guiFind<ICProductsInfo>(TableName.ICProductsTableName,
                                                                                    productList,
                                                                                    this,
                                                                                    true,
                                                                                    true,
                                                                                    new string[] { "FK_ICDepartmentID", "FK_ICProductGroupID" });
                guiAddProduct.ShowDialog();
                if (guiAddProduct.DialogResult != DialogResult.OK)
                    return;

                IList<ICProductsInfo> results = guiAddProduct.SelectedObjects;
                if (results.Count == 0)
                    return;

                if (IsEditable())
                    ActionEdit();
                results.ToList().ForEach(o =>
                {
                    ARProposalItemWorksInfo objProposalItemWorksInfo = ToProposalItemWorksInfoForProposalItemCostList(o);
                    objProposalItemWorksInfo.ARProposalItemWorkProductQty = 1;
                    objProposalItemWorksInfo.ARProposalItemWorkProductType = ProductItemType.Asset.ToString();
                    objProposalItemWorksInfo.ARProposalItemWorkTotalAmount = objProposalItemWorksInfo.ARProposalItemWorkProductUnitPrice * objProposalItemWorksInfo.ARProposalItemWorkProductQty;
                    entity.ARProposalItemWorkAssetList.Add(objProposalItemWorksInfo);
                    if (objProposalItemWorksInfo.ARProposalItemWorkProductChargeCheck)
                    {
                        entity.ARProposalItemCostList.Add(objProposalItemWorksInfo);
                    }
                });
                entity.ARProposalItemWorkAssetList.GridControl?.RefreshDataSource();
                entity.ARProposalItemCostList.GridControl?.RefreshDataSource();

                objProposalsInfo.ARProposalTotalCost = 0;
                entity.ARProposalItemCostList.ForEach(o =>
                    objProposalsInfo.ARProposalTotalCost += o.ARProposalItemWorkTotalAmount);
                entity.UpdateMainObjectBindingSource();

                //entity.UpdateTotalAmount(entity.ARProposalItemWorkList);
            }
        }

        public ARProposalItemWorksInfo ToProposalItemWorksInfoForProposalItemCostList(ICProductsInfo objProductsInfo)
        {
            return new ARProposalItemWorksInfo
            {
                FK_ICProductID = objProductsInfo.ICProductID,
                FK_ICDepartmentID = objProductsInfo.FK_ICDepartmentID,
                FK_ICProductGroupID = objProductsInfo.FK_ICProductGroupID,
                FK_ICMeasureUnitID = objProductsInfo.FK_ICProductBasicUnitID,
                ARProposalItemWorkProductNo = objProductsInfo.ICProductNo,
                ARProposalItemWorkProductName = objProductsInfo.ICProductName,
                ARProposalItemWorkProductDesc = objProductsInfo.ICProductDesc,
                ARProposalItemWorkProductQty = 1,
                ARProposalItemWorkProductUnitPrice = objProductsInfo.ICProductPrice01,
                ARProposalItemWorkProductType = objProductsInfo.ICProductType,
                ARProposalItemWorkProductChargeCheck = objProductsInfo.ICProductChargeCheck,
                ARProposalItemWorkTotalAmount = objProductsInfo.ICProductPrice01,
                ARProposalItemWorkSubTotalAmount = objProductsInfo.ICProductPrice01
            };
        }

        private ARProposalItemWorkTasksInfo ToProposalItemWorkTasksInfo(ICProductTasksInfo objProductTasksInfo)
        {
            return new ARProposalItemWorkTasksInfo()
            {
                FK_HRDepartmentID = objProductTasksInfo.FK_HRDepartmentID,
                FK_HRDepartmentRoomID = objProductTasksInfo.FK_HRDepartmentRoomID,
                FK_HREmployeeID = objProductTasksInfo.FK_HREmployeeID,
                FK_ICMeasureUnitID = objProductTasksInfo.FK_ICMeasureUnitID,
                FK_ICProductID = objProductTasksInfo.FK_ICProductID,
                FK_ICTaskID = objProductTasksInfo.FK_ICTaskID,
                ARProposalItemWorkTaskNo = objProductTasksInfo.ICProductTaskNo,
                ARProposalItemWorkTaskName = objProductTasksInfo.ICProductTaskName,
                ARProposalItemWorkTaskInfo = objProductTasksInfo.ICProductTaskInfo,
                ARProposalItemWorkTaskTotalEstimatedDays = objProductTasksInfo.ICProductTaskTotalEstimatedDays,
                ARProposalItemWorkTaskTotalEstimatedHours = objProductTasksInfo.ICProductTaskTotalEstimatedHours,
                ARProposalItemWorkTaskTotalActualDays = objProductTasksInfo.ICProductTaskTotalActualDays,
                ARProposalItemWorkTaskTotalActualHours = objProductTasksInfo.ICProductTaskTotalActualHours,
                ARProposalItemWorkTaskEstimatedExtendDays = objProductTasksInfo.ICProductTaskEstimatedExtendDays,
                ARProposalItemWorkTaskActualExtendDays = objProductTasksInfo.ICProductTaskActualExtendDays,
                ARProposalItemWorkTaskEstimatedExtendHours = objProductTasksInfo.ICProductTaskEstimatedExtendHours,
                ARProposalItemWorkTaskActualExtendHours = objProductTasksInfo.ICProductTaskActualExtendHours,
                ARProposalItemWorkTaskQty = objProductTasksInfo.ICProductTaskQty,
                ARProposalItemWorkTaskEstimatedTotalCost = objProductTasksInfo.ICProductTaskEstimatedTotalCost,
                ARProposalItemWorkTaskActualTotalCost = objProductTasksInfo.ICProductTaskActualTotalCost,
            };
        }

        public void AddProposalItemWorkTask()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
                ARProposalsInfo objProposalsInfo = (ARProposalsInfo)entity.MainObject;

                ICTasksController objTasksController = new ICTasksController();
                List<ICTasksInfo> taskList = objTasksController.GetAllTaskList();
                guiAddTask<ICTasksInfo> guiAddTask = new guiAddTask<ICTasksInfo>(taskList, 0);
                guiAddTask.Module = this;
                guiAddTask.ShowDialog();
                if (guiAddTask.DialogResult != DialogResult.OK)
                    return;

                IList<ICTasksInfo> results = guiAddTask.SelectedObjects;
                if (results.Count == 0)
                    return;

                if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
                    base.ActionEdit();
                ARProposalItemWorkTasksInfo objProposalItemWorkTasksInfo = new ARProposalItemWorkTasksInfo();
                foreach (ICTasksInfo item in results)
                {
                    objProposalItemWorkTasksInfo = ToARSaleOrderItemWorkTasks(item);
                    entity.ARProposalItemWorkTasksList.Add(objProposalItemWorkTasksInfo);
                }
                entity.ARProposalItemWorkTasksList.GridControl?.RefreshDataSource();
            }
        }

        private ARProposalItemWorkTasksInfo ToARSaleOrderItemWorkTasks(ICTasksInfo objTasksInfo)
        {
            return new ARProposalItemWorkTasksInfo
            {
                ARProposalItemWorkTaskNo = objTasksInfo.ICTaskNo,
                ARProposalItemWorkTaskInfo = objTasksInfo.ICTaskInfo,
                ARProposalItemWorkTaskName = objTasksInfo.ICTaskName,
                ARProposalItemWorkTaskQty = objTasksInfo.ICTaskQty,
                ARProposalItemWorkTaskTotalActualDays = objTasksInfo.ICTaskTotalActualDays,
                ARProposalItemWorkTaskTotalActualHours = objTasksInfo.ICTaskTotalActualHours,
                ARProposalItemWorkTaskTotalEstimatedDays = objTasksInfo.ICTaskTotalEstimatedDays,
                ARProposalItemWorkTaskTotalEstimatedHours = objTasksInfo.ICTaskTotalEstimatedHours,
                FK_ICTaskID = objTasksInfo.ICTaskID
            };
        }

        public void AddItemCost()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            List<ICProductsInfo> productCostList = ChooseProductCost();

            if (productCostList != null
                && productCostList.Count > 0)
            {
                ARProposalItemWorksInfo itemCost;
                foreach (ICProductsInfo cost in productCostList)
                {
                    itemCost = GenerateProposalItemCostByProduct(cost);
                    entity.ARProposalItemCostList.Add(itemCost);
                }
                entity.UpdateTotalAmount();
                entity.ARProposalItemCostList.GridControl?.RefreshDataSource();
            }
        }

        public List<ICProductsInfo> ChooseProductCost()
        {
            ICProductsController productController = new ICProductsController();
            List<ICProductsInfo> productCostList = productController.GetCostForSaleOrder();
            List<ICProductsInfo> productCostSelectedList = new List<ICProductsInfo>();
            guiFind<ICProductsInfo> guiFind = new guiFind<ICProductsInfo>(TableName.ICProductsTableName
                                                                            , productCostList
                                                                            , this
                                                                            , true);
            if (guiFind.ShowDialog() == DialogResult.OK)
            {
                productCostSelectedList.AddRange(guiFind.SelectedObjects);
            }
            return productCostSelectedList;
        }

        public ARProposalItemWorksInfo GenerateProposalItemCostByProduct(ICProductsInfo product)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;
            ARProposalItemWorksInfo proposalItemCost = new ARProposalItemWorksInfo();
            proposalItemCost.FK_ICProductID = product.ICProductID;
            proposalItemCost.FK_ICProductGroupID = product.FK_ICProductGroupID;
            proposalItemCost.FK_ICDepartmentID = product.FK_ICDepartmentID;
            proposalItemCost.FK_ICMeasureUnitID = product.FK_ICProductBasicUnitID;
            proposalItemCost.ARProposalItemWorkProductNo = product.ICProductNo;
            proposalItemCost.ARProposalItemWorkProductName = product.ICProductName;
            proposalItemCost.ARProposalItemWorkProductDesc = product.ICProductDesc;
            proposalItemCost.ARProposalItemWorkProductQty = 1;
            proposalItemCost.ARProposalItemWorkProductType = ProductType.Service.ToString();
            proposalItemCost.ARProposalItemWorkProductUnitPrice = product.ICProductPrice01;
            proposalItemCost.ARProposalItemWorkSubTotalAmount = proposalItemCost.ARProposalItemWorkProductUnitPrice
                                                            * proposalItemCost.ARProposalItemWorkProductQty;
            proposalItemCost.ARProposalItemWorkTotalAmount = proposalItemCost.ARProposalItemWorkProductUnitPrice
                                                            * proposalItemCost.ARProposalItemWorkProductQty;
            proposalItemCost.ARProposalItemWorkProductChargeCheck = true;
            return proposalItemCost;
        }

        public void ChangeProposalItemCostDiscountPerCent()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            if (entity.ARProposalItemCostList.CurrentIndex < 0)
                return;
            ARProposalItemWorksInfo ProposalItemWorkItemsInfo = entity.ARProposalItemCostList[entity.ARProposalItemCostList.CurrentIndex];
            ProposalItemWorkItemsInfo.ARProposalItemWorkDiscountAmount = ProposalItemWorkItemsInfo.ARProposalItemWorkProductUnitPrice * ProposalItemWorkItemsInfo.ARProposalItemWorkDiscountPerCent * ProposalItemWorkItemsInfo.ARProposalItemWorkProductQty / 100;
            ProposalItemWorkItemsInfo.ARProposalItemWorkTotalAmount = (ProposalItemWorkItemsInfo.ARProposalItemWorkProductUnitPrice * ProposalItemWorkItemsInfo.ARProposalItemWorkProductQty) - ProposalItemWorkItemsInfo.ARProposalItemWorkDiscountAmount;
            entity.ARProposalItemCostList.GridControl?.RefreshDataSource();
            entity.UpdateMainObjectBindingSource();
            entity.UpdateTotalAmount();
        }

        public void ChangeProposalItemCostDiscountAmount()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            if (entity.ARProposalItemCostList.CurrentIndex < 0)
                return;
            ARProposalItemWorksInfo ProposalItemWorkItemsInfo = entity.ARProposalItemCostList[entity.ARProposalItemCostList.CurrentIndex];
            ProposalItemWorkItemsInfo.ARProposalItemWorkDiscountPerCent = (ProposalItemWorkItemsInfo.ARProposalItemWorkDiscountAmount / ProposalItemWorkItemsInfo.ARProposalItemWorkProductUnitPrice) * 100;
            ProposalItemWorkItemsInfo.ARProposalItemWorkTotalAmount = (ProposalItemWorkItemsInfo.ARProposalItemWorkProductUnitPrice * ProposalItemWorkItemsInfo.ARProposalItemWorkProductQty) - ProposalItemWorkItemsInfo.ARProposalItemWorkDiscountAmount;
            entity.ARProposalItemCostList.GridControl?.RefreshDataSource();
            entity.UpdateMainObjectBindingSource();
            entity.UpdateTotalAmount();
        }

        public void GeneratePaymentTime(int paymentTimeID)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;

            GEPaymentTermItemsController objPaymentTermItemsController = new GEPaymentTermItemsController();
            List<GEPaymentTermItemsInfo> paymentTermItems = new List<GEPaymentTermItemsInfo>();
            ARProposalPaymentTimesInfo objProposalPaymentTimesInfo;
            paymentTermItems = objPaymentTermItemsController.GetListItemByPaymentTermID(paymentTimeID);
            ARProposalPaymentTimesController objProposalPaymentTimesController = new ARProposalPaymentTimesController();
            if (mainObject == null)
                return;

            if (entity.ARProposalPaymentTimesList == null)
            {
                entity.ARProposalPaymentTimesList = new BOSList<ARProposalPaymentTimesInfo>();
            }
            else
            {
                entity.ARProposalPaymentTimesList.Clear();
            }

            if (paymentTermItems.Count() == 0)
            {
                entity.ARProposalPaymentTimesList.GridControl?.RefreshDataSource();
                return;
            }
            paymentTermItems = paymentTermItems.OrderBy(o => o.GEPaymentTermItemPaymentType).ToList();
            paymentTermItems.ForEach(o =>
            {
                objProposalPaymentTimesInfo = new ARProposalPaymentTimesInfo();
                objProposalPaymentTimesInfo.ARProposalPaymentTimePaymentType = o.GEPaymentTermItemPaymentType != PaymentTermItemPaymentType.Deposit.ToString() ? "Final Payment" : PaymentTermItemPaymentType.Deposit.ToString();
                objProposalPaymentTimesInfo.ARProposalPaymentTimeStatus = ProposalPaymentTimeStatus.New.ToString();
                objProposalPaymentTimesInfo.ARProposalPaymentTimeAmount = mainObject.ARProposalTotalAmount * o.GEPaymentTermItemPercentPayment / 100; ;
                objProposalPaymentTimesInfo.ARProposalPaymentTimeBalanceDue = mainObject.ARProposalTotalAmount * o.GEPaymentTermItemPercentPayment / 100; ;
                objProposalPaymentTimesInfo.FK_GEPaymentTermID = paymentTimeID;
                objProposalPaymentTimesInfo.ARPaymentMethodCombo = mainObject.ARPaymentMethodCombo;
                objProposalPaymentTimesInfo.FK_ARProposalID = mainObject.ARProposalID;
                objProposalPaymentTimesInfo.ARProposalPaymentTimePaymentTimepoint = o.GEPaymentTermItemPaymentDate;
                objProposalPaymentTimesInfo.ARProposalPaymentTimePaymentTermItemDay = o.GEPaymentTermItemDay;
                objProposalPaymentTimesInfo.ARProposalPaymentTimePaymentTermItemPercentPayment = o.GEPaymentTermItemPercentPayment;
                objProposalPaymentTimesInfo.ARProposalPaymentTimePaymentTermItemPaymentType = o.GEPaymentTermItemPaymentType;
                objProposalPaymentTimesInfo.ARProposalPaymentTimePaymentTermItemType = o.GEPaymentTermItemType;
                objProposalPaymentTimesInfo.FK_GEPaymentTermItemID = o.GEPaymentTermItemID;
                objProposalPaymentTimesInfo.ARProposalPaymentTimeDate = GetPaymentTime(o.GEPaymentTermItemType, o.GEPaymentTermItemDay);
                BOSApp.RoundByCurrency(objProposalPaymentTimesInfo, mainObject.FK_GECurrencyID);
                entity.ARProposalPaymentTimesList.Add(objProposalPaymentTimesInfo);
            });
            entity.ARProposalPaymentTimesList.GridControl?.RefreshDataSource();
        }

        private DateTime GetPaymentTime(string paymentTermType, int day)
        {
            ARProposalsInfo mainObject = (ARProposalsInfo)CurrentModuleEntity.MainObject;
            if (paymentTermType != PaymentTermType.Day.ToString())
                return mainObject.ARProposalDate;

            DateTime paymentDate = mainObject.ARProposalDate;
            PaymentTermItemPaymentDate type = EnumExtensions.ParseEnum<PaymentTermItemPaymentDate>(paymentTermType);
            try
            {
                switch (type)
                {
                    case PaymentTermItemPaymentDate.IsContract:
                        paymentDate = mainObject.ARProposalDate;
                        break;

                    case PaymentTermItemPaymentDate.IsBeforeDelivery:
                        paymentDate = mainObject.ARProposalDeliveryDate.AddDays(-day);
                        break;

                    case PaymentTermItemPaymentDate.IsAfterDelivery:
                        paymentDate = mainObject.ARProposalDeliveryDate.AddDays(day);
                        break;

                    case PaymentTermItemPaymentDate.IsInvoiceIn:
                        paymentDate = mainObject.ARProposalDeliveryDate.AddDays(day);
                        break;

                    default:
                        paymentDate = mainObject.ARProposalDate;
                        break;
                }
            }
            catch (Exception)
            {
                paymentDate = mainObject.ARProposalDate;
            }
            return paymentDate;
        }


        public bool CheckPaymentTerm(int paymentTermID)
        {
            GEPaymentTermsController objPaymentTermsController = new GEPaymentTermsController();
            GEPaymentTermsInfo objPaymentTermsInfo = (GEPaymentTermsInfo)objPaymentTermsController.GetObjectByID(paymentTermID);
            if (objPaymentTermsInfo != null && objPaymentTermsInfo.GEPaymentTermActiveCheck == false)
            {
                MessageBox.Show(ProposalLocalizedResources.PaymentTermNoActive, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false;
            }
            GeneratePaymentTime(paymentTermID);
            return true;
        }

        public void ChangePaymentTimeAmount(int paymentTermID)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;
            GEPaymentTermItemsInfo objPaymentTermItemsInfo = new GEPaymentTermItemsInfo();
            List<GEPaymentTermItemsInfo> ListPaymentTermItem = new List<GEPaymentTermItemsInfo>();
            GEPaymentTermItemsController objPaymentTermItemsController = new GEPaymentTermItemsController();
            ListPaymentTermItem = objPaymentTermItemsController.GetListItemByPaymentTermID(paymentTermID);
            decimal depositAmount = 0;
            if (ListPaymentTermItem.Count < 3)
            {
                foreach (ARProposalPaymentTimesInfo item in entity.ARProposalPaymentTimesList)
                {
                    if (item.ARProposalPaymentTimePaymentType == ProposalPaymentTimePaymentType.Deposit.ToString())
                    {
                        objPaymentTermItemsInfo = ListPaymentTermItem.Where(x => x.GEPaymentTermItemPaymentType == PaymentTermItemPaymentType.Deposit.ToString()).FirstOrDefault();
                        if (objPaymentTermItemsInfo != null)
                        {
                            BOSApp.RoundByCurrency(item, mainObject.FK_GECurrencyID);
                            item.ARProposalPaymentTimeAmount = mainObject.ARProposalTotalAmount * objPaymentTermItemsInfo.GEPaymentTermItemPercentPayment / 100;
                            BOSApp.RoundByCurrency(item, mainObject.FK_GECurrencyID);
                            depositAmount = item.ARProposalPaymentTimeAmount;
                        }
                    }
                    if (item.ARProposalPaymentTimePaymentType == "Final Payment")
                    {
                        item.ARProposalPaymentTimeAmount = mainObject.ARProposalTotalAmount - depositAmount;
                    }
                    BOSApp.RoundByCurrency(item, mainObject.FK_GECurrencyID);
                }
            }
        }

        public bool IsValidPaymentTimeAmount()
        {
            bool isValidAmount = true;
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo objProposalsInfo = (ARProposalsInfo)entity.MainObject;
            if (objProposalsInfo.ARProposalTotalAmount < entity.ARProposalPaymentTimesList.Sum(s => s.ARProposalPaymentTimeAmount))
            {
                isValidAmount = false;
                MessageBox.Show(SaleOrderLocalizedResources.InvalidPaymentTimeAmount, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            return isValidAmount;
        }

        public void DeleteItemFromPaymentTimeItemsList()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            if (entity.ARProposalPaymentTimesList.CurrentIndex < 0)
                return;
            entity.ARProposalPaymentTimesList.RemoveSelectedRowObjectFromList();
        }

        public void ShowProductWoodTypeAttribute()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;
            if (IsEditable())
            {
                ActionEdit();
            }

            if (entity.ARProposalItemsList.CurrentIndex >= 0)
            {
                ARProposalItemsInfo objProposalItemsInfo = entity.ARProposalItemsList[entity.ARProposalItemsList.CurrentIndex];
                ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
                List<ICProductAttributesInfo> productAttributes = new List<ICProductAttributesInfo>();
                productAttributes = (List<ICProductAttributesInfo>)objProductAttributesController.GetProductAttributeValueByWoodType();

                if (!String.IsNullOrEmpty(objProposalItemsInfo.ARProposalItemProductWoodTypeAttribute))
                {
                    string[] arr = objProposalItemsInfo.ARProposalItemProductWoodTypeAttribute.Split(',');
                    productAttributes.ForEach(o =>
                    {
                        if (arr.Contains(o.ICProductAttributeID.ToString()))
                            o.Selected = true;
                    });
                }
                guiChooseProductAttributes guiFind = new guiChooseProductAttributes(productAttributes);
                guiFind.Module = this;
                guiFind.ShowDialog();
                if (guiFind.DialogResult != DialogResult.OK)
                    return;
                productAttributes = guiFind.SelectedObjects;
                objProposalItemsInfo.ARProposalItemProductWoodTypeAttribute = string.Join(",", productAttributes.Select(o => o.ICProductAttributeID.ToString()).ToArray());
                entity.ARProposalItemsList.GridControl?.RefreshDataSource();
                entity.ARProposalItemsList.EndCurrentEdit();
            }
        }

        public void ShowProductColorAttribute()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;
            if (IsEditable())
            {
                ActionEdit();
            }

            if (entity.ARProposalItemsList.CurrentIndex >= 0)
            {
                ARProposalItemsInfo objProposalItemsInfo = entity.ARProposalItemsList[entity.ARProposalItemsList.CurrentIndex];
                ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
                List<ICProductAttributesInfo> productAttributes = new List<ICProductAttributesInfo>();
                productAttributes = (List<ICProductAttributesInfo>)objProductAttributesController.GetProductAttributesByProductAttributeGroup(ProductAttributeGroup.COLOR.ToString());

                if (!String.IsNullOrEmpty(objProposalItemsInfo.ARProposalItemProductColorAttribute))
                {
                    string[] arr = objProposalItemsInfo.ARProposalItemProductColorAttribute.Split(',');
                    productAttributes.ForEach(o =>
                    {
                        if (arr.Contains(o.ICProductAttributeID.ToString()))
                            o.Selected = true;
                    });
                }
                guiChooseProductAttributes guiFind = new guiChooseProductAttributes(productAttributes);
                guiFind.Module = this;
                guiFind.ShowDialog();
                if (guiFind.DialogResult != DialogResult.OK)
                    return;
                productAttributes = guiFind.SelectedObjects;
                objProposalItemsInfo.ARProposalItemProductColorAttribute = string.Join(",", productAttributes.Select(o => o.ICProductAttributeID.ToString()).ToArray());
                entity.ARProposalItemsList.GridControl?.RefreshDataSource();
                entity.ARProposalItemsList.EndCurrentEdit();
            }
        }

        public void ChooseProspectCustomer()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;
            if (IsEditable())
            {
                ActionEdit();
            }

            ARProspectCustomersController objProspectCustomersController = new ARProspectCustomersController();
            List<ARProspectCustomersInfo> prospectCustomersList = (List<ARProspectCustomersInfo>)objProspectCustomersController.GetListFromDataSet(objProspectCustomersController.GetAllObjects());

            guiFind<ARProspectCustomersInfo> guiFind = new guiFind<ARProspectCustomersInfo>(TableName.ARProspectCustomersTableName,
                                                                                    prospectCustomersList, this, false);
            guiFind.Module = this;
            guiFind.ShowDialog();
            if (guiFind.DialogResult != DialogResult.OK)
                return;

            ARProspectCustomersInfo objProspectCustomersInfo = guiFind.SelectedObjects[0];
            if (objProspectCustomersInfo == null)
            {
                return;
            }

            entity.GenerateCustomerFromProspectCustomer(objProspectCustomersInfo);
            if (!string.IsNullOrEmpty(objProspectCustomersInfo.ARProspectCustomerLastName) && !string.IsNullOrEmpty(objProspectCustomersInfo.ARProspectCustomerFirstName))
            {
                mainObject.ARProposalProspectCustomer = string.Format("{0}{1}{2}", objProspectCustomersInfo.ARProspectCustomerLastName, " ",
                                                                                    objProspectCustomersInfo.ARProspectCustomerFirstName);
            }
            else if (!string.IsNullOrEmpty(objProspectCustomersInfo.ARProspectCustomerCompany))
            {
                mainObject.ARProposalProspectCustomer = objProspectCustomersInfo.ARProspectCustomerCompany;
            }
            entity.UpdateMainObjectBindingSource();
        }

        public string GetARCustomerNo()
        {
            GENumberingController objGENumberingController = new GENumberingController();
            GENumberingInfo objGENumberingInfo;
            objGENumberingInfo = objGENumberingController.GetGENumberingByNameAndBranchID(ModuleName.Customer, BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            string strMainObjectNo = string.Empty;
            if (objGENumberingInfo != null)
            {
                BOSDbUtil dbUtil = new BOSDbUtil();
                DateTime currentDate = BOSApp.GetCurrentServerDate();

                int numberStart = objGENumberingInfo.GENumberingStart;
                if (objGENumberingInfo.AAUpdatedDate.Year < currentDate.Year)
                {
                    numberStart = Convert.ToInt32(Math.Pow(10, objGENumberingInfo.GENumberingLength - 1)) + 1;
                }
                string prefix = objGENumberingInfo.GENumberingPrefix.Substring(0, objGENumberingInfo.GENumberingPrefix.Length - 1);

                strMainObjectNo = String.Format("{0}{1}-{2}",
                                                        prefix,
                                                        currentDate.Year.ToString().Substring(2, 2),
                                                        numberStart.ToString().PadLeft(objGENumberingInfo.GENumberingLength, '0'));
                objGENumberingInfo.GENumberingStart = objGENumberingInfo.GENumberingStart + 1;
                objGENumberingInfo.AAUpdatedDate = currentDate;
                objGENumberingController.UpdateObject(objGENumberingInfo);
            }
            return strMainObjectNo;
        }

        public void CreateCustomer(ARCustomersInfo objCustomersInfo)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainobject = (ARProposalsInfo)entity.MainObject;
            if (objCustomersInfo != null)
            {
                ARProposalsController objProposalsController = new ARProposalsController();
                ARCustomersController objCustomersController = new ARCustomersController();
                string no = GetARCustomerNo();
                objCustomersInfo.ARCustomerNo = no;
                int customerID = objCustomersController.CreateObject(objCustomersInfo);
                //Create Opportunity BEGIN
                AROpportunitysController objOpportunitysController = new AROpportunitysController();
                AROpportunitysInfo objOpportunitysInfo = new AROpportunitysInfo();
                objOpportunitysInfo.AROpportunityCustomerName = objCustomersInfo.ARCustomerName;
                objOpportunitysInfo.FK_HREmployeeID = BOSApp.CurrentUsersInfo.FK_HREmployeeID;
                objOpportunitysInfo.AROpportunityExpectedValue = mainobject.ARProposalTotalAmount;
                objOpportunitysInfo.AROpportunityName = mainobject.ARProposalName;
                objOpportunitysInfo.FK_ARCustomerID = customerID;
                objOpportunitysInfo.AROpportunityStep = "QuatationsForCustomers";
                objOpportunitysInfo.AROpportunityCompletionDate = mainobject.ARProposalValidateDate;
                int opportunityID = objOpportunitysController.CreateObject(objOpportunitysInfo);
                mainobject.FK_AROpportunityID = opportunityID;
                //END
                ARProspectCustomersController objProspectCustomersController = new ARProspectCustomersController();
                objProspectCustomersController.DeleteObject(objCustomersInfo.FK_ARProspectCustomerID);
                mainobject.FK_ARCustomerID = customerID;
                mainobject.FK_ACObjectID = customerID;
                mainobject.ARObjectType = ObjectType.Customer.ToString();
                mainobject.ACObjectAccessKey = string.Format("{0};{1}", mainobject.FK_ACObjectID, mainobject.ARObjectType);
                ACObjectsController objObjectsController = new ACObjectsController();
                ACObjectLookupEditControl.Properties.DataSource = objObjectsController.GetAllObjects();
                objProposalsController.UpdateObject(mainobject);
                objProposalsController.UpdatePriceSheetReferenceObject(mainobject.ARProposalID, BOSApp.CurrentUser);
            }
        }

        public void NewPriceSheet()
        {
            PriceSheet.PriceSheetModule priceSheetModule = (PriceSheet.PriceSheetModule)BOSApp.ShowModule("PriceSheet");
            if (priceSheetModule == null)
                return;

            PriceSheet.PriceSheetEntities priceSheetEntities = (PriceSheet.PriceSheetEntities)priceSheetModule.CurrentModuleEntity;
            priceSheetModule.ActionNew();
        }

        public void ActionNewProposalFromPriceSheet()
        {
            base.ActionNew();
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;
            ARPriceSheetsController objPriceSheetsController = new ARPriceSheetsController();
            ARPriceSheetItemsInfo objPriceSheetItemsInfo = new ARPriceSheetItemsInfo();
            ARPriceSheetItemsController objPriceSheetItemsController = new ARPriceSheetItemsController();
            List<ARPriceSheetItemsInfo> priceSheetItemsList = objPriceSheetItemsController.GetAllPriceSheetItemForProposalBysUser(BOSApp.CurrentUsersInfo.ADUserID);
        stampp:
            guiFind<ARPriceSheetItemsInfo> guiSheetItems = new guiFind<ARPriceSheetItemsInfo>(TableName.ARPriceSheetItemsTableName,
                                                                                                priceSheetItemsList, this, true, true, new[] { "ARPriceSheetNo" });
            guiSheetItems.Module = this;
            guiSheetItems.ShowDialog();
            if (guiSheetItems.DialogResult != DialogResult.OK)
                return;
            if (guiSheetItems.SelectedObjects.Count() == 0)
                return;

            if (guiSheetItems.SelectedObjects.Select(o => o.FK_ARPriceSheetID).Distinct().Count() > 1)
            {
                MessageBox.Show("Vui lòng chọn trong cùng một bảng giá !", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                goto stampp;
            }
            List<ARPriceSheetItemsInfo> result = (List<ARPriceSheetItemsInfo>)guiSheetItems.SelectedObjects;
            objPriceSheetItemsInfo = (ARPriceSheetItemsInfo)guiSheetItems.SelectedObjects[0];
            ARPriceSheetsController objPriceSheetController = new ARPriceSheetsController();
            ARPriceSheetsInfo objPriceSheetsInfo = (ARPriceSheetsInfo)objPriceSheetController.GetObjectByID(objPriceSheetItemsInfo.FK_ARPriceSheetID);
            objPriceSheetsInfo = (ARPriceSheetsInfo)objPriceSheetsController.GetObjectByID(objPriceSheetItemsInfo.FK_ARPriceSheetID);
            if (objPriceSheetsInfo == null)
                objPriceSheetsInfo = new ARPriceSheetsInfo();
            mainObject.ARProposalName = objPriceSheetsInfo.ARPriceSheetName;
            mainObject.FK_GECurrencyID = objPriceSheetsInfo.FK_GECurrencyID;
            mainObject.FK_ARPriceSheetID = objPriceSheetItemsInfo.FK_ARPriceSheetID;
            if (objPriceSheetsInfo.FK_ARCustomerID > 0)
            {
                mainObject.FK_ARCustomerID = objPriceSheetsInfo.FK_ARCustomerID;
                mainObject.FK_ACObjectID = objPriceSheetsInfo.FK_ARCustomerID;
                mainObject.ARObjectType = ObjectType.Customer.ToString();
                mainObject.ACObjectAccessKey = string.Format("{0};{1}", mainObject.FK_ACObjectID, mainObject.ARObjectType);
            }    
            ARPriceSheetItemWorksController objPriceSheetItemWorksController = new ARPriceSheetItemWorksController();
            List<ARPriceSheetItemWorksInfo> PriceSheetItemWorksList = objPriceSheetItemWorksController.GetItemWorksByPriceSheetID(objPriceSheetItemsInfo.FK_ARPriceSheetID);
            if (PriceSheetItemWorksList != null)
            {
                entity.GenerateProposaleItemWorksFromPriceSheetItemWorks(PriceSheetItemWorksList);
            }
            entity.GenerateProposaleItemsFromPriceSheetItems(result);
            entity.ARProposalItemsList.GridControl?.RefreshDataSource();
            entity.UpdateMainObjectBindingSource();
            entity.UpdateTotalAmount();
        }
        #region PrintProposal
        public void PrintProposalVinmus()
        {
            InitPrintProposal(RPSaleOrderType.Vinmus.ToString(), PrintProposal.Proposal.ToString());
        }

        public void PrintProposalVinmo()
        {
            InitPrintProposal(RPSaleOrderType.Vinmo.ToString(), PrintProposal.Proposal.ToString());
        }
        #endregion

        #region PrintProposalEstimate
        public void PrintProposalEstimateVinmus()
        {
            InitPrintProposal(RPSaleOrderType.Vinmus.ToString(), PrintProposal.Estimate.ToString());
        }

        public void PrintProposalEstimateVinmo()
        {
            InitPrintProposal(RPSaleOrderType.Vinmo.ToString(), PrintProposal.Estimate.ToString());
        }

        public void InitPrintProposal(string type, string printType)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo objProposalsInfo = (ARProposalsInfo)entity.MainObject;
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = (ACObjectsInfo)objObjectsController.GetObjectByIDAndType(objProposalsInfo.FK_ACObjectID, objProposalsInfo.ARObjectType);

            HREmployeesController objEmployeesController = new HREmployeesController();
            HREmployeesInfo objEmployeesInfo = (HREmployeesInfo)objEmployeesController.GetObjectByID(objProposalsInfo.FK_HREmployeeID);

            if (objEmployeesInfo != null)
            {
                objProposalsInfo.HREmployeeName = objEmployeesInfo.HREmployeeName;
            }

            ICProductsController objProductsController = new ICProductsController();
            ICProductGroupsController objProductGroupsController = new ICProductGroupsController();
            ICProductGroupsInfo objProductGroupsInfo = new ICProductGroupsInfo();
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            List<ICProductGroupsInfo> ProductGroupList = objProductGroupsController.GetAllObjectWithNoParentIDList();
            List<ARProposalItemsInfo> ProposalItemsPrintList = new List<ARProposalItemsInfo>();
            if (entity.ARProposalItemsList != null && entity.ARProposalItemsList.Count > 0 && ProductGroupList != null)
            {
                int groupOrder = 0;
                string oldGroupName = string.Empty;
                string presentGroupName = string.Empty;
                int itemOrder = 0;
                entity.ARProposalItemsList.ForEach(o =>
                {
                    objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(o.FK_ICProductID);
                    o.FK_ICProductGroupID = objProductsInfo.FK_ICProductGroupID;
                    o.FK_ICDepartmentID = objProductsInfo.FK_ICDepartmentID;
                    o.ARProposalItemProductDesc = " " + o.ARProposalItemProductDesc.Trim();
                    objProductGroupsInfo = objProductGroupsController.GetRootProductGroupByICProductGroupParentID(o.FK_ICProductGroupID, o.FK_ICDepartmentID);
                    if (objProductGroupsInfo != null)
                        o.ICProductGroupRootID = objProductGroupsInfo.ICProductGroupID;
                });
                ProposalItemsPrintList = entity.ARProposalItemsList.OrderBy(x => x.FK_ICDepartmentID).ThenBy(n => n.ICProductGroupRootID).ToList();
                foreach (ARProposalItemsInfo item in ProposalItemsPrintList)
                {
                    objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);
                    if (objProductsInfo != null)
                    {
                        ICMeasureUnitsController objMeasureUnitsController = new ICMeasureUnitsController();
                        ICMeasureUnitsInfo objMeasureUnitsInfo = (ICMeasureUnitsInfo)objMeasureUnitsController.GetObjectByID(objProductsInfo.FK_ICProductBasicUnitID);
                        if (objMeasureUnitsInfo != null)
                        {
                            item.ICMeasureUnitName = objMeasureUnitsInfo.ICMeasureUnitName;
                        }
                        item.FK_ICProductGroupID = objProductsInfo.FK_ICProductGroupID;
                    }
                    objProductGroupsInfo = ProductGroupList.Where(x => x.ICProductGroupID == item.ICProductGroupRootID).FirstOrDefault();
                    if (objProductGroupsInfo != null)
                    {
                        item.ICProductGroupName = objProductGroupsInfo.ICProductGroupName;
                        presentGroupName = item.ICProductGroupName;
                        if (!presentGroupName.Equals(oldGroupName))
                        {
                            oldGroupName = presentGroupName;
                            groupOrder++;
                            itemOrder = 0;
                        }
                        itemOrder++;
                        item.GroupOrder = groupOrder;
                        item.ItemOrder = groupOrder.ToString() + "." + itemOrder.ToString();
                    }
                    else
                    {
                        item.ICProductGroupName = "Nhóm hàng khác";
                        presentGroupName = item.ICProductGroupName;
                        if (!presentGroupName.Equals(oldGroupName))
                        {
                            oldGroupName = presentGroupName;
                            groupOrder++;
                            itemOrder = 0;
                        }
                        itemOrder++;
                        item.GroupOrder = groupOrder;
                        item.ItemOrder = groupOrder.ToString() + "." + itemOrder.ToString();
                    }
                    if (item.ARProposalItemLength > 0 || item.ARProposalItemWidth > 0 || item.ARProposalItemHeight > 0)
                        item.ARProposalItemProductSize = " " + Math.Round(item.ARProposalItemLength, 0, MidpointRounding.AwayFromZero) + "x" + Math.Round(item.ARProposalItemWidth, 0, MidpointRounding.AwayFromZero) + "x" + Math.Round(item.ARProposalItemHeight, 0, MidpointRounding.AwayFromZero);
                    item.ARProposalItemProductDesc = " " + item.ARProposalItemProductDesc.Trim();

                    if (!string.IsNullOrEmpty(item.ARProposalItemProductDesc))
                    {
                        if (!string.IsNullOrEmpty(item.ARProposalItemDesc))
                        {
                            item.ARProposalItemProductDescShowReport = string.Format("{0}, {1}", item.ARProposalItemProductDesc, item.ARProposalItemDesc);
                        }
                        else item.ARProposalItemProductDescShowReport = item.ARProposalItemProductDesc;
                    }
                    else item.ARProposalItemProductDescShowReport = item.ARProposalItemDesc;
                }
                ARProposalItemWorksController objProposalItemWorksController = new ARProposalItemWorksController();
                List<ARProposalItemWorksInfo> proposalItemWorksList = objProposalItemWorksController.GetProposalItemWorkCostsByProposalID(entity.ARProposalItemsList[0].FK_ARProposalID);
                if (proposalItemWorksList.Count > 0)
                {
                    ARProposalItemsInfo item = new ARProposalItemsInfo();
                    proposalItemWorksList.ForEach(o =>
                    {
                        item = new ARProposalItemsInfo();
                        objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(o.FK_ICProductID);
                        if (objProductsInfo != null)
                        {
                            item.ICProductGroupName = "Danh sách chi phí";
                            presentGroupName = item.ICProductGroupName;
                            if (!presentGroupName.Equals(oldGroupName))
                            {
                                oldGroupName = presentGroupName;
                                groupOrder++;
                                itemOrder = 0;
                            }
                            itemOrder++;
                            item.GroupOrder = groupOrder;
                            item.ItemOrder = groupOrder.ToString() + "." + itemOrder.ToString();
                            ICMeasureUnitsController objMeasureUnitsController = new ICMeasureUnitsController();
                            ICMeasureUnitsInfo objMeasureUnitsInfo = (ICMeasureUnitsInfo)objMeasureUnitsController.GetObjectByID(objProductsInfo.FK_ICProductBasicUnitID);
                            if (objMeasureUnitsInfo != null)
                            {
                                item.ICMeasureUnitName = objMeasureUnitsInfo.ICMeasureUnitName;
                            }
                            item.ARProposalItemProductDesc = " " + objProductsInfo.ICProductDesc.Trim();
                            item.ARProposalItemProductNo = objProductsInfo.ICProductNo;
                            if (item.ARProposalItemLength > 0 || item.ARProposalItemWidth > 0 || item.ARProposalItemHeight > 0)
                                item.ARProposalItemProductSize = " " + Math.Round(objProductsInfo.ICProductLength, 0, MidpointRounding.AwayFromZero) + "x" + Math.Round(objProductsInfo.ICProductWidth, 0, MidpointRounding.AwayFromZero) + "x" + Math.Round(objProductsInfo.ICProductHeight, 0, MidpointRounding.AwayFromZero);
                            item.ARProposalItemProductQty = o.ARProposalItemWorkProductQty;
                            item.ARProposalItemProductUnitPrice = o.ARProposalItemWorkProductUnitPrice;
                            item.ARProposalItemTotalAmount = o.ARProposalItemWorkTotalAmount;
                            item.ARProposalItemPrice = item.ARProposalItemProductQty * item.ARProposalItemProductUnitPrice;
                            item.ARProposalItemDiscountFix = o.ARProposalItemWorkDiscountPerCent;
                            item.ARProposalItemDiscountAmount = o.ARProposalItemWorkDiscountAmount;
                            item.ARProposalItemDesc = o.ARProposalItemWorkComment;
                            item.FK_ICDepartmentID = o.FK_ICDepartmentID;

                            if (!string.IsNullOrEmpty(item.ARProposalItemProductDesc))
                            {
                                if (!string.IsNullOrEmpty(item.ARProposalItemDesc))
                                {
                                    item.ARProposalItemProductDescShowReport = string.Format("{0}, {1}", item.ARProposalItemProductDesc, item.ARProposalItemDesc);
                                }
                                else item.ARProposalItemProductDescShowReport = item.ARProposalItemProductDesc;
                            }
                            else item.ARProposalItemProductDescShowReport = item.ARProposalItemDesc;
                        }
                        ProposalItemsPrintList.Add(item);
                    });
                }
            }
            objProposalsInfo.ARProposalTotalAmount = objProposalsInfo.ARProposalSubTotalAmount + objProposalsInfo.ARProposalTotalCost;
            objProposalsInfo.ARProposalDiscountAmountAllItem = (Decimal)ProposalItemsPrintList.Sum(o => o.ARProposalItemDiscountAmount);
            objProposalsInfo.ARProposalDiscountAmountBefor = (decimal)ProposalItemsPrintList.Sum(o => o.ARProposalItemPrice);

            List<string> phone = new List<string>();
            if (!string.IsNullOrEmpty(objObjectsInfo.ACObjectContactPhone))
                phone.Add(objObjectsInfo.ACObjectContactPhone);
            if (!string.IsNullOrEmpty(objObjectsInfo.ACObjectContactCellPhone))
                phone.Add(objObjectsInfo.ACObjectContactCellPhone);
            ProposalItemsPrintList.ForEach(p => p.ARProposalName = objProposalsInfo.ARProposalName);
            ProposalItemsPrintList.ForEach(p => p.ARProposalRowNumber = 1);
            // ProposalItemsPrintList.OrderBy(p => p.ARProposalRowNumber).ThenBy(p => p.ARProposalName); //khong lam gi ca
            int index = 1;
            foreach (ARProposalItemsInfo proposalItemsInfo in ProposalItemsPrintList)
            {
                proposalItemsInfo.ARProposalItemRowNumber = string.Format("{0}.{1}", proposalItemsInfo.ARProposalRowNumber.ToString(), index.ToString());
                index++;
            }

            SetRowNumberForPrintList(ProposalItemsPrintList);
            if (type == RPSaleOrderType.Vinmo.ToString())
            {
                RPProposalVinmo_BGDT report = new RPProposalVinmo_BGDT(objProposalsInfo.FK_GECurrencyID);
                if (objObjectsInfo != null)
                {
                    report.bsACObjects.DataSource = objObjectsInfo;
                }

                report.bsARProposalItems.DataSource = ProposalItemsPrintList;
                report.bsProposals.DataSource = objProposalsInfo;

                XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblARProposalNo"];
                if (label != null)
                {
                    label.Text += objProposalsInfo.ARProposalNo;
                }

                if (printType == PrintProposal.Proposal.ToString())
                {
                    label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lbTitle"];
                    if (label != null)
                    {
                        label.Text = "BẢNG BÁO GIÁ";
                    }
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblShowroom"];
                BRBranchsController objBranchsController = new BRBranchsController();
                if (label != null)
                {
                    label.Text += objBranchsController.GetObjectNameByID(objEmployeesInfo.FK_BRBranchID);
                }
                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblDate"];
                if (label != null)
                {
                    label.Text = "Ngày " + objProposalsInfo.ARProposalDate.ToString("dd") + " tháng " + objProposalsInfo.ARProposalDate.ToString("MM") + " năm " + objProposalsInfo.ARProposalDate.ToString("yyyy");
                }
                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xrDCLapDat"];
                if (label != null)
                {
                    label.Text += objObjectsInfo.ACObjectDeliveryAddressLine1;
                }
                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lbPhone"];
                if (label != null)
                {
                    label.Text = string.Join(" - ", phone.ToArray());
                }
                guiReportPreview reviewer = new guiReportPreview(report, null, false);
                reviewer.Show();
            }
            else
            {
                RPProposalVM_BGDT report = new RPProposalVM_BGDT(objProposalsInfo.FK_GECurrencyID);
                if (objObjectsInfo != null)
                {
                    report.bsACObjects.DataSource = objObjectsInfo;
                }
                report.bsARProposalItems.DataSource = ProposalItemsPrintList;
                report.bsProposals.DataSource = objProposalsInfo;
                XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblARProposalNo"];
                if (label != null)
                {
                    label.Text += objProposalsInfo.ARProposalNo;
                }

                if (printType == PrintProposal.Proposal.ToString())
                {
                    label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lbTitle"];
                    if (label != null)
                    {
                        label.Text = "BẢNG BÁO GIÁ";
                    }
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblShowroom"];
                BRBranchsController objBranchsController = new BRBranchsController();
                if (label != null)
                {
                    label.Text += objBranchsController.GetObjectNameByID(objEmployeesInfo.FK_BRBranchID);
                }
                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblDate"];
                if (label != null)
                {
                    label.Text = "Ngày " + objProposalsInfo.ARProposalDate.ToString("dd") + " tháng " + objProposalsInfo.ARProposalDate.ToString("MM") + " năm " + objProposalsInfo.ARProposalDate.ToString("yyyy");
                }
                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xrDCLapDat"];
                if (label != null)
                {
                    label.Text += objObjectsInfo.ACObjectDeliveryAddressLine1;
                }
                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lbPhone"];
                if (label != null)
                {
                    label.Text = string.Join(" - ", phone.ToArray());
                }
                guiReportPreview reviewer = new guiReportPreview(report, null, false);
                reviewer.Show();
            }
        }

        public void SetRowNumberForPrintList(List<ARProposalItemsInfo> proposalItemPrintList)
        {
            ICDepartmentsController objDepartmentsController = new ICDepartmentsController();
            ICDepartmentsInfo objDepartmentsInfo = new ICDepartmentsInfo();
            int departmentGroup = 0;
            int departmentItem = 0;
            string oldDepartmentName = string.Empty;
            proposalItemPrintList = proposalItemPrintList.OrderBy(x => x.FK_ICDepartmentID).ToList();
            proposalItemPrintList.ForEach(x =>
            {
                objDepartmentsInfo = (ICDepartmentsInfo)objDepartmentsController.GetObjectByID(x.FK_ICDepartmentID);
                x.ICDepartmentName = (objDepartmentsInfo != null) ? objDepartmentsInfo.ICDepartmentName : "";
                if (x.ICDepartmentName != oldDepartmentName)
                {
                    departmentGroup++;
                    departmentItem = 1;
                }
                oldDepartmentName = x.ICDepartmentName;
                x.GroupOrder = departmentGroup;
                x.ItemOrder = string.Format("{0}.{1}", departmentGroup.ToString("n0"), departmentItem.ToString("n0"));
                departmentItem++;
            });
        }
        #endregion

        public List<PMProjectsInfo> GetAllProjectForLookUp()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByAccessKey(mainObject.ACObjectAccessKey);
            if (objObjectsInfo == null)
                return null;
            PMProjectsController objProjectsController = new PMProjectsController();
            List<PMProjectsInfo> ProjectInfoList = objProjectsController.GetAllProjectForLookupByAcobjectIDAndType(objObjectsInfo.ACObjectID, objObjectsInfo.ACObjectType);
            return ProjectInfoList;
        }

        #region PrintProposalProvince - HCM

        //=================================================================================//
        public void PrintProposalProvince_KCK()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                InitPrintProposal_KCK(ProposalLocalizedResources.PrintProposalTypeProvince);
            }
        }

        public void PrintProposalHCM_KCK()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                InitPrintProposal_KCK(ProposalLocalizedResources.PrintProposalTypeHCM);
            }
        }

        private void InitPrintProposal_KCK(string printType)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsController objProposalsController = new ARProposalsController();
            ARProposalsInfo objProposalsInfo = objProposalsController.GetProposalByIDForReport(((ARProposalsInfo)entity.MainObject).ARProposalID);
            if (objProposalsInfo == null)
            {
                MessageBox.Show(ProposalLocalizedResources.ProposaNotExist,
                            CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            RPProposal_KCK report = new RPProposal_KCK(objProposalsInfo.FK_GECurrencyID);
            ARProposalItemsController objProposalItemsController = new ARProposalItemsController();
            List<ARProposalItemsInfo> proposalItemList = objProposalItemsController.GetProposalItemsByProposalIDForReport(objProposalsInfo.ARProposalID);
            if (objProposalsInfo.ARProposalDiscountPerCent != 0 || proposalItemList.Where(p => p.ARProposalItemDiscountFix > 0).ToList().Count > 0)
            {
                MessageBox.Show(ProposalLocalizedResources.ProposalHaveDiscount,
                            CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByIDAndType(objProposalsInfo.FK_ACObjectID, objProposalsInfo.ARObjectType);
            if (objObjectsInfo != null)
            {
                objObjectsInfo.ACObjectContactPhone = !String.IsNullOrEmpty(objObjectsInfo.ACObjectContactPhone) && !String.IsNullOrEmpty(objObjectsInfo.ACObjectContactCellPhone) ?
                    String.Format("{0} - {1}", objObjectsInfo.ACObjectContactPhone, objObjectsInfo.ACObjectContactCellPhone) : String.Format("{0}{1}", objObjectsInfo.ACObjectContactPhone, objObjectsInfo.ACObjectContactCellPhone);
            }
            proposalItemList = proposalItemList.OrderBy(p => p.FK_ICDepartmentID).ToList();
            SetRowNumberForPrintList(proposalItemList);
            XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblDate"];
            if (label != null)
            {
                label.Text = "Ngày " + objProposalsInfo.ARProposalDate.ToString("dd") + " tháng " + objProposalsInfo.ARProposalDate.ToString("MM") + " năm " + objProposalsInfo.ARProposalDate.ToString("yyyy");
            }
            objProposalsInfo.ARProposalDiscountAmountBefor = 0;
            objProposalsInfo.ARProposalDiscountAmountAllItem = 0;
            proposalItemList.ForEach(p =>
            {
                objProposalsInfo.ARProposalDiscountAmountBefor += p.ARProposalItemPrice;
                objProposalsInfo.ARProposalDiscountAmountAllItem += p.ARProposalItemDiscountAmount;
            });

            //======================================================================================//
            label = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblPaymentTime1"];
            if (label != null)
            {
                decimal proposalPaymentTimeAmount = entity.ARProposalPaymentTimesList.Where(p => p.ARProposalPaymentTimePaymentType == ProposalPaymentTimePaymentType.Deposit.ToString())
                                                                                        .Select(q => q.ARProposalPaymentTimeAmount)
                                                                                        .DefaultIfEmpty(0)
                                                                                        .Sum();
                label.Text = label.Text.Replace("{0}", proposalPaymentTimeAmount.ToString("n2"));
                label.Text = label.Text.Replace("{1}", ConvertAmountToWord.ReadAmount(proposalPaymentTimeAmount.ToString(), GECurrencyID.VND));
                label.Text = label.Text.Replace("{2}", objProposalsInfo.ARProposalDate.ToString("dd-MM-yyyy"));
            }

            ARProposalPaymentTimesInfo objProposalPaymentTimesInfo1 = new ARProposalPaymentTimesInfo();
            label = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblPaymentTime2"];
            if (label != null)
            {
                objProposalPaymentTimesInfo1 = entity.ARProposalPaymentTimesList.Where(p => p.ARProposalPaymentTimePaymentType != ProposalPaymentTimePaymentType.Deposit.ToString()).FirstOrDefault();
                if (objProposalPaymentTimesInfo1 == null) objProposalPaymentTimesInfo1 = new ARProposalPaymentTimesInfo();
                label.Text = label.Text.Replace("{0}", objProposalPaymentTimesInfo1.ARProposalPaymentTimeAmount.ToString("n2"));
                label.Text = label.Text.Replace("{1}", ConvertAmountToWord.ReadAmount(objProposalPaymentTimesInfo1.ARProposalPaymentTimeAmount.ToString(), GECurrencyID.VND));
            }

            label = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblPaymentTime3"];
            if (label != null)
            {
                ARProposalPaymentTimesInfo objProposalPaymentTimesInfo = entity.ARProposalPaymentTimesList.Where(p => p.ARProposalPaymentTimePaymentType != ProposalPaymentTimePaymentType.Deposit.ToString() && p.ARProposalPaymentTimeID != objProposalPaymentTimesInfo1.ARProposalPaymentTimeID).FirstOrDefault();
                if (objProposalPaymentTimesInfo == null) objProposalPaymentTimesInfo = new ARProposalPaymentTimesInfo();
                label.Text = label.Text.Replace("{0}", objProposalPaymentTimesInfo.ARProposalPaymentTimeAmount.ToString("n2"));
                label.Text = label.Text.Replace("{1}", ConvertAmountToWord.ReadAmount(objProposalPaymentTimesInfo.ARProposalPaymentTimeAmount.ToString(), GECurrencyID.VND));

                if (printType == ProposalLocalizedResources.PrintProposalTypeHCM) label.Text = label.Text.Replace(SaleOrderLocalizedResources.PaymentTime3_Tinh, SaleOrderLocalizedResources.PaymentTime3_TPHCM);
                label.Text = label.Text.Replace("{0}", objProposalPaymentTimesInfo.ARProposalPaymentTimeAmount.ToString("n2"));
                label.Text = label.Text.Replace("{1}", ConvertAmountToWord.ReadAmount(objProposalPaymentTimesInfo.ARProposalPaymentTimeAmount.ToString(), GECurrencyID.VND));
            }

            label = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblPaymentTime4"];
            if (label != null)
            {
                if (printType == ProposalLocalizedResources.PrintProposalTypeHCM) label.Text = SaleOrderLocalizedResources.PaymentTime4_TPHCM;
            }
            //========================================================================//

            report.bsACObjects.DataSource = objObjectsInfo;
            report.bsARProposals.DataSource = objProposalsInfo;
            report.bsARProposalItems.DataSource = proposalItemList;
            guiReportPreview reviewer = new guiReportPreview(report, null, false);
            reviewer.Show();
        }

        //==========================================================================//
        public void PrintProposalProvince_CKSP()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                InitPrintProposal_CKSP(ProposalLocalizedResources.PrintProposalTypeProvince);
            }
        }

        public void PrintProposalHCM_CKSP()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                InitPrintProposal_CKSP(ProposalLocalizedResources.PrintProposalTypeHCM);
            }
        }

        private void InitPrintProposal_CKSP(string printType)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsController objProposalsController = new ARProposalsController();
            ARProposalsInfo objProposalsInfo = objProposalsController.GetProposalByIDForReport(((ARProposalsInfo)entity.MainObject).ARProposalID);
            if (objProposalsInfo == null)
            {
                MessageBox.Show(ProposalLocalizedResources.ProposaNotExist,
                            CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            RPProposal_CKSP report = new RPProposal_CKSP(objProposalsInfo.FK_GECurrencyID);
            ARProposalItemsController objProposalItemsController = new ARProposalItemsController();
            List<ARProposalItemsInfo> proposalItemList = objProposalItemsController.GetProposalItemsByProposalIDForReport(objProposalsInfo.ARProposalID);
            if (objProposalsInfo.ARProposalDiscountPerCent != 0)
            {
                MessageBox.Show(ProposalLocalizedResources.ProposalHaveDiscount,
                            CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            if (proposalItemList.Where(p => p.ARProposalItemDiscountFix > 0).ToList().Count == 0)
            {
                MessageBox.Show(ProposalLocalizedResources.ProposalNotHaveDiscount,
                            CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByIDAndType(objProposalsInfo.FK_ACObjectID, objProposalsInfo.ARObjectType);
            if (objObjectsInfo != null)
            {
                objObjectsInfo.ACObjectContactPhone = !String.IsNullOrEmpty(objObjectsInfo.ACObjectContactPhone) && !String.IsNullOrEmpty(objObjectsInfo.ACObjectContactCellPhone) ?
                    String.Format("{0} - {1}", objObjectsInfo.ACObjectContactPhone, objObjectsInfo.ACObjectContactCellPhone) : String.Format("{0}{1}", objObjectsInfo.ACObjectContactPhone, objObjectsInfo.ACObjectContactCellPhone);
            }
            proposalItemList = proposalItemList.OrderBy(p => p.FK_ICDepartmentID).ToList();
            SetRowNumberForPrintList(proposalItemList);
            XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblDate"];
            if (label != null)
            {
                label.Text = "Ngày " + objProposalsInfo.ARProposalDate.ToString("dd") + " tháng " + objProposalsInfo.ARProposalDate.ToString("MM") + " năm " + objProposalsInfo.ARProposalDate.ToString("yyyy");
            }
            objProposalsInfo.ARProposalDiscountAmountBefor = 0;
            objProposalsInfo.ARProposalDiscountAmountAllItem = 0;
            proposalItemList.ForEach(p =>
            {
                objProposalsInfo.ARProposalDiscountAmountBefor += p.ARProposalItemPrice;
                objProposalsInfo.ARProposalDiscountAmountAllItem += p.ARProposalItemDiscountAmount;
            });

            //======================================================================================//
            label = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblPaymentTime1"];
            if (label != null)
            {
                decimal proposalPaymentTimeAmount = entity.ARProposalPaymentTimesList.Where(p => p.ARProposalPaymentTimePaymentType == ProposalPaymentTimePaymentType.Deposit.ToString())
                                                                                        .Select(q => q.ARProposalPaymentTimeAmount)
                                                                                        .DefaultIfEmpty(0)
                                                                                        .Sum();
                label.Text = label.Text.Replace("{0}", proposalPaymentTimeAmount.ToString("n2"));
                label.Text = label.Text.Replace("{1}", ConvertAmountToWord.ReadAmount(proposalPaymentTimeAmount.ToString(), GECurrencyID.VND));
                label.Text = label.Text.Replace("{2}", objProposalsInfo.ARProposalDate.ToString("dd-MM-yyyy"));
            }

            ARProposalPaymentTimesInfo objProposalPaymentTimesInfo1 = new ARProposalPaymentTimesInfo();
            label = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblPaymentTime2"];
            if (label != null)
            {
                objProposalPaymentTimesInfo1 = entity.ARProposalPaymentTimesList.Where(p => p.ARProposalPaymentTimePaymentType != ProposalPaymentTimePaymentType.Deposit.ToString()).FirstOrDefault();
                if (objProposalPaymentTimesInfo1 == null) objProposalPaymentTimesInfo1 = new ARProposalPaymentTimesInfo();
                label.Text = label.Text.Replace("{0}", objProposalPaymentTimesInfo1.ARProposalPaymentTimeAmount.ToString("n2"));
                label.Text = label.Text.Replace("{1}", ConvertAmountToWord.ReadAmount(objProposalPaymentTimesInfo1.ARProposalPaymentTimeAmount.ToString(), GECurrencyID.VND));
            }

            label = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblPaymentTime3"];
            if (label != null)
            {
                ARProposalPaymentTimesInfo objProposalPaymentTimesInfo = entity.ARProposalPaymentTimesList.Where(p => p.ARProposalPaymentTimePaymentType != ProposalPaymentTimePaymentType.Deposit.ToString() && p.ARProposalPaymentTimeID != objProposalPaymentTimesInfo1.ARProposalPaymentTimeID).FirstOrDefault();
                if (objProposalPaymentTimesInfo == null) objProposalPaymentTimesInfo = new ARProposalPaymentTimesInfo();
                label.Text = label.Text.Replace("{0}", objProposalPaymentTimesInfo.ARProposalPaymentTimeAmount.ToString("n2"));
                label.Text = label.Text.Replace("{1}", ConvertAmountToWord.ReadAmount(objProposalPaymentTimesInfo.ARProposalPaymentTimeAmount.ToString(), GECurrencyID.VND));

                if (printType == ProposalLocalizedResources.PrintProposalTypeHCM) label.Text = label.Text.Replace(SaleOrderLocalizedResources.PaymentTime3_Tinh, SaleOrderLocalizedResources.PaymentTime3_TPHCM);
                label.Text = label.Text.Replace("{0}", objProposalPaymentTimesInfo.ARProposalPaymentTimeAmount.ToString("n2"));
                label.Text = label.Text.Replace("{1}", ConvertAmountToWord.ReadAmount(objProposalPaymentTimesInfo.ARProposalPaymentTimeAmount.ToString(), GECurrencyID.VND));
            }

            label = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblPaymentTime4"];
            if (label != null)
            {
                if (printType == ProposalLocalizedResources.PrintProposalTypeHCM) label.Text = SaleOrderLocalizedResources.PaymentTime4_TPHCM;
            }
            //========================================================================//

            report.bsACObjects.DataSource = objObjectsInfo;
            report.bsARProposals.DataSource = objProposalsInfo;
            report.bsARProposalItems.DataSource = proposalItemList;
            guiReportPreview reviewer = new guiReportPreview(report, null, false);
            reviewer.Show();
        }

        //=========================================================================================//
        public void PrintProposalProvince_CKSPDH()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                InitPrintProposal_CKSPDH(ProposalLocalizedResources.PrintProposalTypeProvince);
            }
        }

        public void PrintProposalHCM_CKSPDH()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                InitPrintProposal_CKSPDH(ProposalLocalizedResources.PrintProposalTypeHCM);
            }
        }

        private void InitPrintProposal_CKSPDH(string printType)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsController objProposalsController = new ARProposalsController();
            ARProposalsInfo objProposalsInfo = objProposalsController.GetProposalByIDForReport(((ARProposalsInfo)entity.MainObject).ARProposalID);
            if (objProposalsInfo == null)
            {
                MessageBox.Show(ProposalLocalizedResources.ProposaNotExist,
                            CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            RPProposal_CKSPHD report = new RPProposal_CKSPHD(objProposalsInfo.FK_GECurrencyID);
            ARProposalItemsController objProposalItemsController = new ARProposalItemsController();
            List<ARProposalItemsInfo> proposalItemList = objProposalItemsController.GetProposalItemsByProposalIDForReport(objProposalsInfo.ARProposalID);
            if (objProposalsInfo.ARProposalDiscountPerCent == 0)
            {
                MessageBox.Show(ProposalLocalizedResources.ProposalNotHaveDiscount,
                            CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByIDAndType(objProposalsInfo.FK_ACObjectID, objProposalsInfo.ARObjectType);
            if (objObjectsInfo != null)
            {
                objObjectsInfo.ACObjectContactPhone = !String.IsNullOrEmpty(objObjectsInfo.ACObjectContactPhone) && !String.IsNullOrEmpty(objObjectsInfo.ACObjectContactCellPhone) ?
                    String.Format("{0} - {1}", objObjectsInfo.ACObjectContactPhone, objObjectsInfo.ACObjectContactCellPhone) : String.Format("{0}{1}", objObjectsInfo.ACObjectContactPhone, objObjectsInfo.ACObjectContactCellPhone);
            }
            proposalItemList = proposalItemList.OrderBy(p => p.FK_ICDepartmentID).ToList();
            SetRowNumberForPrintList(proposalItemList);
            XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblDate"];
            if (label != null)
            {
                label.Text = "Ngày " + objProposalsInfo.ARProposalDate.ToString("dd") + " tháng " + objProposalsInfo.ARProposalDate.ToString("MM") + " năm " + objProposalsInfo.ARProposalDate.ToString("yyyy");
            }
            objProposalsInfo.ARProposalDiscountAmountBefor = 0;
            objProposalsInfo.ARProposalDiscountAmountAllItem = 0;
            objProposalsInfo.ARProposalSubTotalAmount = 0;
            proposalItemList.ForEach(p =>
            {
                objProposalsInfo.ARProposalDiscountAmountBefor += p.ARProposalItemPrice;
                objProposalsInfo.ARProposalDiscountAmountAllItem += p.ARProposalItemDiscountAmount;
                objProposalsInfo.ARProposalSubTotalAmount += p.ARProposalItemTotalAmount;
            });

            //======================================================================================//
            label = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblPaymentTime1"];
            if (label != null)
            {
                decimal proposalPaymentTimeAmount = entity.ARProposalPaymentTimesList.Where(p => p.ARProposalPaymentTimePaymentType == ProposalPaymentTimePaymentType.Deposit.ToString())
                                                                                        .Select(q => q.ARProposalPaymentTimeAmount)
                                                                                        .DefaultIfEmpty(0)
                                                                                        .Sum();
                label.Text = label.Text.Replace("{0}", proposalPaymentTimeAmount.ToString("n2"));
                label.Text = label.Text.Replace("{1}", ConvertAmountToWord.ReadAmount(proposalPaymentTimeAmount.ToString(), GECurrencyID.VND));
                label.Text = label.Text.Replace("{2}", objProposalsInfo.ARProposalDate.ToString("dd-MM-yyyy"));
            }

            ARProposalPaymentTimesInfo objProposalPaymentTimesInfo1 = new ARProposalPaymentTimesInfo();
            label = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblPaymentTime2"];
            if (label != null)
            {
                objProposalPaymentTimesInfo1 = entity.ARProposalPaymentTimesList.Where(p => p.ARProposalPaymentTimePaymentType != ProposalPaymentTimePaymentType.Deposit.ToString()).FirstOrDefault();
                if (objProposalPaymentTimesInfo1 == null) objProposalPaymentTimesInfo1 = new ARProposalPaymentTimesInfo();
                label.Text = label.Text.Replace("{0}", objProposalPaymentTimesInfo1.ARProposalPaymentTimeAmount.ToString("n2"));
                label.Text = label.Text.Replace("{1}", ConvertAmountToWord.ReadAmount(objProposalPaymentTimesInfo1.ARProposalPaymentTimeAmount.ToString(), GECurrencyID.VND));
            }

            label = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblPaymentTime3"];
            if (label != null)
            {
                ARProposalPaymentTimesInfo objProposalPaymentTimesInfo = entity.ARProposalPaymentTimesList.Where(p => p.ARProposalPaymentTimePaymentType != ProposalPaymentTimePaymentType.Deposit.ToString() && p.ARProposalPaymentTimeID != objProposalPaymentTimesInfo1.ARProposalPaymentTimeID).FirstOrDefault();
                if (objProposalPaymentTimesInfo == null) objProposalPaymentTimesInfo = new ARProposalPaymentTimesInfo();
                label.Text = label.Text.Replace("{0}", objProposalPaymentTimesInfo.ARProposalPaymentTimeAmount.ToString("n2"));
                label.Text = label.Text.Replace("{1}", ConvertAmountToWord.ReadAmount(objProposalPaymentTimesInfo.ARProposalPaymentTimeAmount.ToString(), GECurrencyID.VND));

                if (printType == ProposalLocalizedResources.PrintProposalTypeHCM) label.Text = label.Text.Replace(SaleOrderLocalizedResources.PaymentTime3_Tinh, SaleOrderLocalizedResources.PaymentTime3_TPHCM);
                label.Text = label.Text.Replace("{0}", objProposalPaymentTimesInfo.ARProposalPaymentTimeAmount.ToString("n2"));
                label.Text = label.Text.Replace("{1}", ConvertAmountToWord.ReadAmount(objProposalPaymentTimesInfo.ARProposalPaymentTimeAmount.ToString(), GECurrencyID.VND));
            }

            label = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblPaymentTime4"];
            if (label != null)
            {
                if (printType == ProposalLocalizedResources.PrintProposalTypeHCM) label.Text = SaleOrderLocalizedResources.PaymentTime4_TPHCM;
            }
            //========================================================================//

            report.bsACObjects.DataSource = objObjectsInfo;
            report.bsARProposals.DataSource = objProposalsInfo;
            report.bsARProposalItems.DataSource = proposalItemList;
            guiReportPreview reviewer = new guiReportPreview(report, null, false);
            reviewer.Show();
        }

        public void BilingualQuotationPrint()
        {
            RPProposalTV report = new RPProposalTV();
            InitBilingualQuotation(report);
            guiReportPreview reviewer = new guiReportPreview(report, null, true);
            reviewer.Show();
        }

        public void InitBilingualQuotation(RPProposalTV report)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)CurrentModuleEntity.MainObject;
            CSCompanysController objCompanysController = new CSCompanysController();
            CSCompanysInfo objCompanysInfo = (CSCompanysInfo)objCompanysController.GetObjectByID(BOSApp.CurrentCompanyInfo.CSCompanyID);
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = (ACObjectsInfo)objObjectsController.GetObjectByIDAndType(mainObject.FK_ACObjectID, mainObject.ARObjectType);
            ARProposalsController objProposalsController = new ARProposalsController();
            ARProposalsInfo objProposalsInfo = (ARProposalsInfo)objProposalsController.GetDataSourceForRPProposalTV(mainObject.ARProposalID);
            ARProposalItemsController objProposalItemsController = new ARProposalItemsController();
            List<ARProposalItemsInfo> ProposalItemsList = objProposalItemsController.GetDataSourceForRPProposalTV(mainObject.ARProposalID);
            report.bsCSCompanys.DataSource = objCompanysInfo != null ? objCompanysInfo : new CSCompanysInfo();
            report.bsACObjects.DataSource = objObjectsInfo != null ? objObjectsInfo : new ACObjectsInfo();
            report.bsARProposals.DataSource = objProposalsInfo != null ? objProposalsInfo : new ARProposalsInfo();
            report.bsARProposalItems.DataSource = ProposalItemsList != null ? ProposalItemsList : new List<ARProposalItemsInfo>();
        }

        public List<ICProductsInfo> GetAllSectionProductForLookUp()
        {
            ARProposalsInfo mainObject = (ARProposalsInfo)CurrentModuleEntity.MainObject;
            ICProductsController objProductsController = new ICProductsController();
            List<ICProductsInfo> sectionProductList = objProductsController.GetSectionProductByTemplateID(mainObject.FK_PMTemplateID);
            return sectionProductList;
        }
        #endregion

        public void ChangeCostCenter(int costCenterID)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            entity.ARProposalItemsList.ForEach(o => o.FK_ACCostCenterID = costCenterID);
            entity.ARProposalItemsList.GridControl?.RefreshDataSource();
        }

        public List<ARSaleContractsInfo> GetSaleContractByObjectIDAnProjectID()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByAccessKey(mainObject.ACObjectAccessKey);
            if (objObjectsInfo == null)
                return null;

            ARSaleContractsController controller = new ARSaleContractsController();
            return controller.GetSaleContractByObjectIDAnProjectID(objObjectsInfo.ACObjectID, objObjectsInfo.ACObjectType, mainObject.FK_PMProjectID);
        }

        public void ShowTemplateItemTree()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainobject = (ARProposalsInfo)entity.MainObject;
            if (mainobject.FK_PMTemplateID == 0)
            {
                MessageBox.Show(ProposalLocalizedResources.TemplateIsRequirer, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            ARProposalItemsInfo objProposalItemsInfo = (ARProposalItemsInfo)entity.ARProposalItemsList[entity.ARProposalItemsList.CurrentIndex];
            if (objProposalItemsInfo == null)
                return;

            guiShowTemplateItems guiShowTemplateItems = new guiShowTemplateItems();
            guiShowTemplateItems.ARProposalID = mainobject.ARProposalID;
            guiShowTemplateItems.ARProposalTemplateItemID = objProposalItemsInfo.FK_ARProposalTemplateItemID;
            guiShowTemplateItems.ARProposalTemplateItemProductName = objProposalItemsInfo.ARProposalTemplateItemProductName;
            guiShowTemplateItems.Module = this;
            DialogResult rs = guiShowTemplateItems.ShowDialog();
            if (rs != DialogResult.OK)
                return;

            objProposalItemsInfo.FK_ARProposalTemplateItemID = guiShowTemplateItems.ARProposalTemplateItemID;
            objProposalItemsInfo.ARProposalTemplateItemProductName = guiShowTemplateItems.ARProposalTemplateItemProductName;

            if (entity.ARProposalItemsList.GridControl != null)
            {
                entity.ARProposalItemsList.EndCurrentEdit();
                entity.ARProposalItemsList.GridControl?.RefreshDataSource();
            }

            AddProductToTemplateItemsList(objProposalItemsInfo, guiShowTemplateItems.CurentProposalTemplateItemsInfo);
        }

        public void DeleteTemplateItemFromTreeList()
        {
            ProposalEntities entity = ((ProposalEntities)CurrentModuleEntity);
            ARProposalTemplateItemsInfo objTemplateItemsInfoCurrent = (ARProposalTemplateItemsInfo)entity.ModuleObjects[TableName.ARProposalTemplateItemsTableName];
            if (objTemplateItemsInfoCurrent == null)
                return;

            DevExpress.XtraTreeList.Nodes.TreeListNode currentNode = TemplateItemsTreeListControl.GetSelectedNode();
            if (currentNode != null)
            {
                if (TemplateItemsTreeListControl.BOSDisplayRoot)
                {
                    if (currentNode.Level > 0)
                        currentNode.ParentNode.Nodes.Remove(currentNode);
                }
                else
                {
                    if (currentNode.Level == 0)
                        TemplateItemsTreeListControl.Nodes.Remove(currentNode);
                    else
                        currentNode.ParentNode.Nodes.Remove(currentNode);
                }
                entity.TemplateItemList.SaveItemObjects();
            }
        }

        public void GenDataSourceForProposalTemplateItems(int templateID)
        {
            ProposalEntities entity = ((ProposalEntities)CurrentModuleEntity);
            entity.TemplateItemList.Clear();
            RefreshTreeView(entity.TemplateItemList);
            GenerateTemplateItem(templateID);
        }

        public void RefreshTreeView(BOSTreeList treeList)
        {
            if (treeList != null && treeList.TreeListControl != null)
            {
                treeList.TreeListControl.RefreshDataSource();
                treeList.TreeListControl.ExpandAll();
            }
        }

        public void GenerateTemplateItem(int templateID)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalTemplateItemsController objProposalTemplateItemsController = new ARProposalTemplateItemsController();
            List<ARProposalTemplateItemsInfo> proposalTemplateItemList = new List<ARProposalTemplateItemsInfo>();
            proposalTemplateItemList = objProposalTemplateItemsController.GetTemplateItemsByTemplateID(templateID);

            GenerateTreeList(entity.TemplateItemList, proposalTemplateItemList, 0);
            RefreshTreeView(entity.TemplateItemList);
        }

        public void InvalidateTemplateItem()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)CurrentModuleEntity.MainObject;
            ARProposalTemplateItemsController objProposalTemplateItemsController = new ARProposalTemplateItemsController();
            List<ARProposalTemplateItemsInfo> proposalTemplateItemList = new List<ARProposalTemplateItemsInfo>();
            proposalTemplateItemList = objProposalTemplateItemsController.GetTemplateItemsByProposalID(mainObject.ARProposalID);

            InvalidateTreeList(entity.TemplateItemList, proposalTemplateItemList, 0);
            RefreshTreeView(entity.TemplateItemList);
        }

        public void InvalidateTreeList(IBOSTreeList treeList, List<ARProposalTemplateItemsInfo> collections, int parentID)
        {
            if (treeList != null && collections != null)
            {
                treeList.Clear();
                treeList.OriginalList.Clear();
                treeList.BackupList.Clear();

                foreach (ARProposalTemplateItemsInfo item in collections)
                {
                    if (item.ARProposalTemplateItemParentID == parentID)
                    {
                        ARProposalTemplateItemsInfo objTemplateItemsInfo = (ARProposalTemplateItemsInfo)item.Clone();
                        if (objTemplateItemsInfo.NumberOfChild == 0)
                            objTemplateItemsInfo.NumberOfChild = collections.Where(s => s.ARProposalTemplateItemParentID == objTemplateItemsInfo.ARProposalTemplateItemID).Count();
                        objTemplateItemsInfo.BackupObject = (ARProposalTemplateItemsInfo)objTemplateItemsInfo.Clone();
                        treeList.Add(objTemplateItemsInfo);
                        if (objTemplateItemsInfo.NumberOfChild > 0)
                        {
                            object objType = treeList.GetType().InvokeMember("", BindingFlags.CreateInstance, null, null, null);
                            objTemplateItemsInfo.SubList = (BOSTreeList)objType;
                            objTemplateItemsInfo.SubList.InitBOSList(this.CurrentModuleEntity, TableName.ARProposalsTableName, TableName.ARProposalTemplateItemsTableName);
                            this.InvalidateTreeList(objTemplateItemsInfo.SubList, collections, objTemplateItemsInfo.ARProposalTemplateItemID);
                        }
                        objTemplateItemsInfo = (ARProposalTemplateItemsInfo)item.Clone();
                        treeList.OriginalList.Add(objTemplateItemsInfo);
                        objTemplateItemsInfo = (ARProposalTemplateItemsInfo)item.Clone();
                        treeList.BackupList.Add(objTemplateItemsInfo);
                    }
                }
            }
        }

        public void GenerateTreeList(IBOSTreeList treeList, List<ARProposalTemplateItemsInfo> collections, int parentID)
        {
            if (treeList != null && collections != null)
            {
                treeList.Clear();
                treeList.OriginalList.Clear();
                treeList.BackupList.Clear();

                foreach (ARProposalTemplateItemsInfo item in collections)
                {
                    if (item.ARProposalTemplateItemParentID == parentID)
                    {
                        ARProposalTemplateItemsInfo objTemplateItemsInfo = (ARProposalTemplateItemsInfo)item.Clone();
                        if (objTemplateItemsInfo.NumberOfChild == 0)
                            objTemplateItemsInfo.NumberOfChild = collections.Where(s => s.ARProposalTemplateItemParentID == objTemplateItemsInfo.FK_PMTemplateItemID).Count();
                        objTemplateItemsInfo.BackupObject = (ARProposalTemplateItemsInfo)objTemplateItemsInfo.Clone();
                        treeList.Add(objTemplateItemsInfo);
                        if (objTemplateItemsInfo.NumberOfChild > 0)
                        {
                            object objType = treeList.GetType().InvokeMember("", BindingFlags.CreateInstance, null, null, null);
                            objTemplateItemsInfo.SubList = (BOSTreeList)objType;
                            objTemplateItemsInfo.SubList.InitBOSList(this.CurrentModuleEntity, TableName.ARProposalsTableName, TableName.ARProposalTemplateItemsTableName);
                            this.GenerateTreeList(objTemplateItemsInfo.SubList, collections, objTemplateItemsInfo.FK_PMTemplateItemID);
                        }
                        objTemplateItemsInfo = (ARProposalTemplateItemsInfo)item.Clone();
                        treeList.OriginalList.Add(objTemplateItemsInfo);
                        objTemplateItemsInfo = (ARProposalTemplateItemsInfo)item.Clone();
                        treeList.BackupList.Add(objTemplateItemsInfo);
                    }
                }
            }
        }

        public void AddProductSectionToTemplateItemsList(string productType)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)CurrentModuleEntity.MainObject;
            ARProposalTemplateItemsInfo objTemplateItemsInfoCurrent = (ARProposalTemplateItemsInfo)entity.TemplateItemList.CurrentObject;
            if (objTemplateItemsInfoCurrent.ARProposalTemplateItemType == TemplateItemType.Work.ToString())
                return;

            ICProductsController objProductsController = new ICProductsController();
            List<ICProductsInfo> productSectionList = objProductsController.GetListProductByProductType(productType);
            guiAddSection<ICProductsInfo> guiAddSection = new guiAddSection<ICProductsInfo>(productSectionList, productType);
            guiAddSection.Module = this;
            guiAddSection.ShowDialog();
            if (guiAddSection.DialogResult != DialogResult.OK)
                return;

            List<ICProductsInfo> results = (List<ICProductsInfo>)guiAddSection.SelectedObjects;
            if (results.Count == 0)
                return;

            entity.GenerateTemplateItemsSection(results, objTemplateItemsInfoCurrent, productType);
            List<ARProposalTemplateItemsInfo> templateItems = new List<ARProposalTemplateItemsInfo>();
            entity.TemplateItemList.ConvertToList(templateItems);
            InvalidateTreeList(entity.TemplateItemList, templateItems, templateItems.Min(o => o.ARProposalTemplateItemParentID));
            RefreshTreeView(entity.TemplateItemList);
        }

        public List<ICProductsInfo> GetWoodIngredient()
        {
            ICProductsController objProductsController = new ICProductsController();
            List<ICProductsInfo> objProductsInfoList = new List<ICProductsInfo>();
            objProductsInfoList.Add(new ICProductsInfo());
            objProductsInfoList.AddRange(objProductsController.GetProductByDepartmentID(DepartmentID.Wood));
            return objProductsInfoList;
        }

        public void ChangedProposalAreaItemList(ARProposalAreaItemsInfo item)
        {
            item.ARProposalAreaItemFormulaPriceConfigQty = CalculatorItemFormulaPriceConfigQty(item);
            item.ARProposalAreaItemTotalAmount = item.ARProposalAreaItemFormulaPriceConfigQty * item.ARProposalAreaItemProductUnitPrice;

            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalAreasInfo areasInfo = entity.ProposalAreasList[entity.ProposalAreasList.CurrentIndex];
            if (areasInfo == null)
                return;
            areasInfo.ARProposalAreaTotalAmount = areasInfo.ItemList.Sum(o => o.ARProposalAreaItemTotalAmount);
            entity.ProposalAreasList.GridControl?.RefreshDataSource();
        }

        public void DeleteProductTemplates()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalAreasInfo product = entity.ProposalAreasList[entity.ProposalAreasList.CurrentIndex];
            if (product != null)
            {
                entity.ProposalAreasList.RemoveSelectedRowObjectFromList();
            }
        }

        public decimal CalculatorItemFormulaPriceConfigQty(ARProposalAreaItemsInfo item)
        {
            decimal exchangeMToMM = 1000;
            ICProductFormulaPriceConfigsController objProductFormulaPriceConfigsController = new ICProductFormulaPriceConfigsController();
            ICProductFormulaPriceConfigsInfo objProductFormulaPriceConfigsInfo = (ICProductFormulaPriceConfigsInfo)objProductFormulaPriceConfigsController.GetObjectByID(item.FK_ICProductFormulaPriceConfigID);
            if (objProductFormulaPriceConfigsInfo == null)
                return item.ARProposalAreaItemProductQty;
            StringBuilder expression = new StringBuilder();
            expression.Append(item.ARProposalAreaItemProductQty.ToString("0.###"));
            if (!string.IsNullOrEmpty(objProductFormulaPriceConfigsInfo.ICProductFormulaPriceConfigLengthOperation)
                && item.ARProposalAreaItemLength > 0)
            {
                expression.Append(Operation[objProductFormulaPriceConfigsInfo.ICProductFormulaPriceConfigLengthOperation]);
                expression.Append((item.ARProposalAreaItemLength / exchangeMToMM).ToString("0.###"));
            }
            if (!string.IsNullOrEmpty(objProductFormulaPriceConfigsInfo.ICProductFormulaPriceConfigWidthOperation)
                && item.ARProposalAreaItemWidth > 0)
            {
                expression.Append(Operation[objProductFormulaPriceConfigsInfo.ICProductFormulaPriceConfigWidthOperation]);
                expression.Append((item.ARProposalAreaItemWidth / exchangeMToMM).ToString("0.###"));
            }
            if (!string.IsNullOrEmpty(objProductFormulaPriceConfigsInfo.ICProductFormulaPriceConfigHeightOperation)
                && item.ARProposalAreaItemHeight > 0)
            {
                expression.Append(Operation[objProductFormulaPriceConfigsInfo.ICProductFormulaPriceConfigHeightOperation]);
                expression.Append((item.ARProposalAreaItemHeight / exchangeMToMM).ToString("0.###"));
            }
            DataTable execExpression = new DataTable();
            return Convert.ToDecimal(execExpression.Compute(expression.Replace(',', '.').ToString(), string.Empty));
        }

        public void AddProductToTemplateItemsList(ARProposalItemsInfo proposalItemsInfo, ARProposalTemplateItemsInfo templateItemsInfoCurrent)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)CurrentModuleEntity.MainObject;

            ICProductsController productsController = new ICProductsController();
            ICProductsInfo productsInfo = (ICProductsInfo)productsController.GetObjectByID(proposalItemsInfo.FK_ICProductID);

            ARProposalTemplateItemsInfo objTemplateItemsInfo = entity.ToTemplateItemsInfoSection(productsInfo, templateItemsInfoCurrent, TemplateItemType.Work.ToString());
            ARProposalTemplateItemsController proposalTemplateItemsController = new ARProposalTemplateItemsController();

            int templateItemID = proposalTemplateItemsController.CreateObject(objTemplateItemsInfo);
            if (templateItemID > 0)
                entity.TemplateItemList.Add(objTemplateItemsInfo);

            List<ARProposalTemplateItemsInfo> templateItems = new List<ARProposalTemplateItemsInfo>();
            entity.TemplateItemList.ConvertToList(templateItems);
            InvalidateTreeList(entity.TemplateItemList, templateItems, templateItems.Min(o => o.ARProposalTemplateItemParentID));
            RefreshTreeView(entity.TemplateItemList);
        }

        public void ChangeDiscountPercentForItem()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
                ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;
                decimal exchangeRate = mainObject.ARProposalExchangeRate == 0 ? 1 : mainObject.ARProposalExchangeRate;

                if (MessageBox.Show("Bạn có muốn áp dụng %chiết khấu cho tất cả sản phẩm không?", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OKCancel, MessageBoxIcon.Information) == DialogResult.OK)
                {
                    foreach (ARProposalItemsInfo item in entity.ARProposalItemsList)
                    {
                        item.ARProposalItemDiscountFix = mainObject.ARProposalDiscountPerCentForItem;
                        //item.ARProposalItemProductUnitPrice = Math.Round((item.ARProposalItemProductInternalUnitPrice - (item.ARProposalItemProductInternalUnitPrice * item.ARProposalItemProductDiscount) / 100), 2);
                        item.ARProposalItemTotalAmount = (item.ICProductUnitPrice
                            - ((item.ICProductUnitPrice * item.ARProposalItemDiscountFix) / 100)
                            + ((item.ICProductUnitPrice * item.ARProposalItemProductTaxPercent) / 100));
                        entity.SetProductPriceByProductUnitPrice(item);
                        ChangeDiscountPercent(item);
                    }
                    entity.ARProposalItemsList.GridControl?.RefreshDataSource();
                }
                entity.UpdateTotalAmount();
            }
        }

        public void ChangeDiscountPercent(ARProposalItemsInfo item)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;
            //decimal exchangeRate = mainObject.ARProposalExchangeRate == 0 ? 1 : mainObject.ARProposalExchangeRate;

            //item.ARProposalItemDiscountAmount = (item.ARProposalItemProductDiscount / 100 * item.ARProposalItemProductUnitPrice) * item.ARProposalItemProductQty;

            //item.ARProposalItemDiscountAmount = (item.ARProposalItemProductDiscount / 100 * item.ICProductUnitPrice) *
            //                                                mainObject.ARProposalExchangeRate2 / exchangeRate * item.ARProposalItemProductQty;

            //item.ARProposalItemProductUnitPrice = (item.ICProductUnitPrice -
            //    ((item.ICProductUnitPrice * item.ARProposalItemProductDiscount) / 100)) *
            //    mainObject.ARProposalExchangeRate2 / exchangeRate;
            //item.ARProposalItemProductUnitPrice2 = item.ARProposalItemProductUnitPrice * exchangeRate / mainObject.ARProposalExchangeRate2;
            entity.SetProductPriceByProductUnitPrice(item);
        }

        public void ChangeTaxPercent(ARProposalItemsInfo item)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;
            //decimal exchangeRate = mainObject.ARProposalExchangeRate == 0 ? 1 : mainObject.ARProposalExchangeRate;

            //item.ARProposalItemTaxAmount = (item.ARProposalItemProductTaxPercent / 100 * item.ICProductUnitPrice) *
            //                                                mainObject.ARProposalExchangeRate2 / exchangeRate * item.ARProposalItemProductQty;

            //item.ARProposalItemProductUnitPrice = (item.ICProductUnitPrice
            //    - ((item.ICProductUnitPrice * item.ARProposalItemProductDiscount) / 100)
            //    + ((item.ICProductUnitPrice * item.ARProposalItemProductTaxPercent) / 100))
            //    * mainObject.ARProposalExchangeRate2 / exchangeRate;
            //item.ARProposalItemProductUnitPrice2 = item.ARProposalItemProductUnitPrice * exchangeRate / mainObject.ARProposalExchangeRate2;
            entity.SetProductPriceByProductUnitPrice(item);
        }

        public void UpdatePriceForSaleType(string saleType, ARProposalItemsInfo item)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;

            mainObject.ARProposalSaleType = saleType;
            if (mainObject.ARProposalSaleType == SaleType.National.ToString())
            {
                mainObject.FK_GECurrencyID = GECurrencyID.VND;
                mainObject.ARProposalExchangeRate = 1;
                if (entity.ARProposalItemsList != null && entity.ARProposalItemsList.Count > 0)
                {
                    {
                        if (mainObject.ARProposalExchangeRate > 0)
                        {
                            entity.RoundByCurrency(item);
                            //item.ARProposalItemProductUnitPrice = item.ARProposalItemProductUnitPrice2 * mainObject.ARProposalExchangeRate2 / mainObject.ARProposalExchangeRate;
                            if (item.ARProposalItemProductUnitPrice2 <= 0)
                            {
                                item.ARProposalItemProductUnitPrice2 = item.ICProductUnitPrice;
                            }
                            entity.SetProductPriceByProductUnitPrice(item);
                        }
                    }
                }
                entity.UpdateMainObjectBindingSource();
            }
            else if (mainObject.ARProposalSaleType == SaleType.International.ToString())
            {
                if (entity.ARProposalItemsList != null && entity.ARProposalItemsList.Count > 0)
                {
                    {
                        if (mainObject.ARProposalExchangeRate2 > 0)
                        {
                            entity.RoundByCurrency(item);
                            item.ARProposalItemProductUnitPrice2 = item.ARProposalItemProductUnitPrice * mainObject.ARProposalExchangeRate / mainObject.ARProposalExchangeRate2;
                            entity.SetProductPriceByProductUnitPrice(item);

                        }
                    }
                }
            }
            //else
            //{
            //    if (entity.ARProposalItemsList != null && entity.ARProposalItemsList.Count > 0)
            //    {
            //        if (mainObject.ARProposalExchangeRate > 0)
            //        {
            //            entity.RoundByCurrency(item);
            //            item.ARProposalItemProductUnitPrice = item.ARProposalItemProductUnitPrice2 * mainObject.ARProposalExchangeRate2 / mainObject.ARProposalExchangeRate;
            //            entity.SetProductPriceByProductUnitPrice(item);
            //        }
            //    }
            //}
            entity.UpdateTotalAmount();
            entity.ARProposalItemsList.GridControl?.RefreshDataSource();
        }
        public void UpdatePriceForSaleType(string saleType)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;
            ARCustomersController objCustomersController = new ARCustomersController();
            ICProductsController objProductsController = new ICProductsController();
            decimal exchangeRate = mainObject.ARProposalExchangeRate == 0 ? 1 : mainObject.ARProposalExchangeRate;
            mainObject.ARProposalSaleType = saleType;

            if (mainObject.ARProposalSaleType == SaleType.National.ToString())
            {
                mainObject.FK_GECurrencyID = GECurrencyID.VND;
                mainObject.ARProposalExchangeRate = 1;
                if (entity.ARProposalItemsList != null && entity.ARProposalItemsList.Count > 0)
                {
                    foreach (ARProposalItemsInfo item in entity.ARProposalItemsList)
                    {
                        if (mainObject.ARProposalExchangeRate > 0)
                        {
                            entity.RoundByCurrency(item);
                            if (item.ARProposalItemProductUnitPrice2 <= 0)
                            {
                                item.ARProposalItemProductUnitPrice2 = item.ICProductUnitPrice;
                            }
                            //item.ARProposalItemProductUnitPrice = item.ARProposalItemProductUnitPrice2 * mainObject.ARProposalExchangeRate2 / mainObject.ARProposalExchangeRate;
                            entity.SetProductPriceByProductUnitPrice(item);
                        }
                    }
                    entity.UpdateTotalAmount();
                    entity.ARProposalItemsList.GridControl?.RefreshDataSource();

                }
                entity.UpdateMainObjectBindingSource();
            }
            else if (mainObject.ARProposalSaleType == SaleType.International.ToString())
            {
                if (entity.ARProposalItemsList != null && entity.ARProposalItemsList.Count > 0)
                {
                    foreach (ARProposalItemsInfo item in entity.ARProposalItemsList)
                    {
                        if (mainObject.ARProposalExchangeRate2 > 0)
                        {
                            entity.RoundByCurrency(item);
                            //item.ARProposalItemDiscountAmount = (item.ARProposalItemProductDiscount / 100 * item.ICProductUnitPrice) *
                            //                                    mainObject.ARProposalExchangeRate2 / exchangeRate * item.ARProposalItemProductQty;                         
                            item.ARProposalItemProductUnitPrice2 = mainObject.ARProposalExchangeRate2 > 0 ? item.ARProposalItemProductUnitPrice * mainObject.ARProposalExchangeRate / mainObject.ARProposalExchangeRate2 : 0;
                            entity.SetProductPriceByProductUnitPrice(item);
                        }
                    }
                    entity.UpdateTotalAmount();
                    entity.ARProposalItemsList.GridControl?.RefreshDataSource();

                }
            }
            else
            {
                if (entity.ARProposalItemsList != null && entity.ARProposalItemsList.Count > 0)
                {
                    foreach (ARProposalItemsInfo item in entity.ARProposalItemsList)
                    {
                        if (mainObject.ARProposalExchangeRate > 0)
                        {
                            entity.RoundByCurrency(item);
                            //item.ARProposalItemDiscountAmount = (item.ARProposalItemProductDiscount / 100 * item.ICProductUnitPrice) *
                            //                                    mainObject.ARProposalExchangeRate2 / exchangeRate * item.ARProposalItemProductQty;
                            item.ARProposalItemProductUnitPrice = item.ARProposalItemProductUnitPrice2 * mainObject.ARProposalExchangeRate2 / mainObject.ARProposalExchangeRate;
                            entity.SetProductPriceByProductUnitPrice(item);
                        }
                    }
                    entity.UpdateTotalAmount();
                    entity.ARProposalItemsList.GridControl?.RefreshDataSource();
                }
            }
        }
        public void ChangeGECurrency()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo objProposalsInfo = (ARProposalsInfo)entity.MainObject;
            if (objProposalsInfo.ARProposalSaleType == SaleType.National.ToString())
            {
                objProposalsInfo.FK_GECurrencyID = GECurrencyID.VND;
                objProposalsInfo.ARProposalExchangeRate = 1;
                //ProposalExchangeRateControl.Focus();
            }
            entity.UpdateMainObjectBindingSource();
        }
        public void UpdateTotalAmountByCurrency(int currencieID)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo objProposalsInfo = (ARProposalsInfo)CurrentModuleEntity.MainObject;
            objProposalsInfo.FK_GECurrencyID = currencieID;

            decimal dCurrencyExchangeRate = BOSApp.RealTimeExchageRateByCurrencyAndDate(objProposalsInfo.FK_GECurrencyID, objProposalsInfo.ARProposalDate);
            if (dCurrencyExchangeRate > 0)
            {
                objProposalsInfo.ARProposalExchangeRate = dCurrencyExchangeRate; ;
            }
            ICProductsController objProductsController = new ICProductsController();
            ARCustomersController objCustomersController = new ARCustomersController();
            ARCustomersInfo objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectByID(objProposalsInfo.FK_ARCustomerID);
            UpdatePriceForcurrencyOrExchange(true);
            //UpdatePriceForSaleType(objProposalsInfo.ARProposalSaleType);
            entity.UpdateMainObjectBindingSource();
        }

        public void UpdatePriceForcurrencyOrExchange(bool exchange1)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;

            decimal exchangeRate = mainObject.ARProposalExchangeRate == 0 ? 1 : mainObject.ARProposalExchangeRate;
            ARCustomersController objCustomersController = new ARCustomersController();
            ARCustomersInfo objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectByID(mainObject.FK_ARCustomerID);
            if (entity.ARProposalItemsList != null && entity.ARProposalItemsList.Count > 0)
            {
                foreach (ARProposalItemsInfo item in entity.ARProposalItemsList)
                {
                    //item.ARProposalItemDiscountAmount = (item.ARProposalItemProductDiscount / 100 * item.ICProductUnitPrice) *
                    //                                       mainObject.ARProposalExchangeRate2 / exchangeRate * item.ARProposalItemProductQty;
                    if (mainObject.FK_ARPriceSheetID > 0 || mainObject.ARProposalSourceSellingPriceMethod == SourceSellingPriceMethod.Typing.ToString())
                    {
                        if (mainObject.ARProposalExchangeRate2 > 0)
                        {
                            entity.RoundByCurrency(item);
                            item.ARProposalItemProductUnitPrice2 = mainObject.ARProposalExchangeRate2 > 0 ? item.ARProposalItemProductUnitPrice * mainObject.ARProposalExchangeRate / mainObject.ARProposalExchangeRate2 : 0;
                            entity.SetProductPriceByProductUnitPrice(item);
                        }
                        else
                        {
                            entity.RoundByCurrency(item);
                            item.ARProposalItemProductUnitPrice2 = 0;
                            entity.SetProductPriceByProductUnitPrice(item);
                        }
                    }
                    else
                    {
                        ICProductsInfo objProductsInfo = BOSApp.GetProductFromCurrentProductList(item.FK_ICProductID);
                        entity.RoundByCurrency(item);
                        item.ARProposalItemProductUnitPrice = BOSApp.CalculaterProductUnitPrice(objProductsInfo,
                                                                                                item.ARProposalItemProductUnitPrice,
                                                                                                item.ARProposalItemProductQty,
                                                                                                item.FK_ICMeasureUnitID,
                                                                                                objCustomersInfo != null ? objCustomersInfo.ARCustomerID : 0,
                                                                                                mainObject.ARProposalDate,
                                                                                                mainObject.FK_GECurrencyID);
                        item.ARProposalItemProductUnitPrice2 = mainObject.ARProposalExchangeRate2 > 0 ? item.ARProposalItemProductUnitPrice * mainObject.ARProposalExchangeRate / mainObject.ARProposalExchangeRate2 : 0;
                        entity.SetProductPriceByProductUnitPrice(item);
                    }
                }
                entity.UpdateTotalAmount();
                entity.ARProposalItemsList.GridControl?.RefreshDataSource();
            }
        }

        #region PrintPrice
        public void PrintPrice()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                BOSProgressBar.Start("Đang xử lý bản in...");
                RPProposalPrintPrice report = new RPProposalPrintPrice();
                InitProposalPrintPrice(report);
                guiReportPreview reviewer = new guiReportPreview(report);
                reviewer.Show();
                BOSProgressBar.Close();
                ActionCancel();
            }
        }
        private void InitProposalPrintPrice(RPProposalPrintPrice report)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARSaleOrderItemsController objSaleOrderItemsController = new ARSaleOrderItemsController();
            GEPaymentTermsController objPaymentTermsController = new GEPaymentTermsController();
            ARProposalsInfo mainObject = (ARProposalsInfo)CurrentModuleEntity.MainObject;
            ARProposalsInfo objProposalsInfo = (ARProposalsInfo)mainObject.Clone();
            objProposalsInfo.PrintTime = DateTime.Now;
            HREmployeesController objEmployeesController = new HREmployeesController();
            HREmployeesInfo objEmployeesInfo = (HREmployeesInfo)objEmployeesController.GetObjectByID(objProposalsInfo.FK_HREmployeeID);
            if (objEmployeesInfo != null)
                objProposalsInfo.HREmployeeName = objEmployeesInfo.HREmployeeName;
            ARCustomersController objCustomersController = new ARCustomersController();
            ARCustomersInfo objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectByID(objProposalsInfo.FK_ARCustomerID);
            if (objCustomersInfo != null)
            {
                objProposalsInfo.ARCustomerContactAddressLine3 = objCustomersInfo.ARCustomerContactAddressLine3;
                objProposalsInfo.ARCustomerName = objCustomersInfo.ARCustomerName;
            }

            GEPaymentTermsInfo objPaymentTermsInfo = (GEPaymentTermsInfo)objPaymentTermsController.GetObjectByID(objProposalsInfo.FK_GEPaymentTermID);
            if (objPaymentTermsInfo != null)
                objProposalsInfo.ARProposalPaymentTerm = objPaymentTermsInfo.GEPaymentTermName;

            CSCompanysController objCompanysController = new CSCompanysController();
            CSCompanysInfo objCompanyInfo = (CSCompanysInfo)objCompanysController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            CSCompanyBanksController objCompanyBanksController = new CSCompanyBanksController();
            CSCompanyBanksInfo objCompanyBanksInfo = new CSCompanyBanksInfo();
            if (objProposalsInfo.FK_CSCompanyBankID != null)
                objCompanyBanksInfo = (CSCompanyBanksInfo)objCompanyBanksController.GetObjectByID(objProposalsInfo.FK_CSCompanyBankID);

            XRLabel label = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xrlable_company"];
            if (label != null)
                label.Text = objCompanyInfo.CSCompanyDesc;
            XRTableCell tablecell = (XRTableCell)report.Bands[BandKind.ReportHeader].Controls["xr_tablecompany"].Controls["xr_tableRowcompany"].Controls["xr_tbccompany"];
            if (tablecell != null)
                tablecell.Text = objCompanyInfo.CSCompanyDesc;
            ICProductsController objProductsController = new ICProductsController();
            List<ARProposalItemsInfo> ProposalItemData = (List<ARProposalItemsInfo>)entity.ARProposalItemsList.Clone();
            foreach (ARProposalItemsInfo item in ProposalItemData)
            {
                ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);
                if (objProductsInfo != null)
                {
                    item.ARProposalItemProductNo = objProductsInfo.ICProductNo;
                    item.ARProposalItemProductPicture = objProductsInfo.ICProductPicture;
                    item.ARProposalItemProductWidth = objProductsInfo.ICProductWidth;
                    item.ARProposalItemProductLength = objProductsInfo.ICProductLength;
                    item.ARProposalItemProductHeight = objProductsInfo.ICProductHeight;

                    List<ICProductsInfo> icproductList = objProductsController.GetProductItemListByProductID(objProductsInfo.ICProductID);
                    ICProductsInfo objProductPackagesInfo = icproductList.FirstOrDefault();
                    if (objProductPackagesInfo != null && objProductPackagesInfo.ICProductItemQty > 0)
                    {
                        decimal addQty = item.ARProposalItemProductQty % objProductPackagesInfo.ICProductItemQty;
                        item.ARProposalItemProductOfBox = Math.Round(item.ARProposalItemProductQty / objProductPackagesInfo.ICProductItemQty, 0);
                        if (addQty > 0)
                            item.ARProposalItemProductOfBox += 1;
                    }
                    item.ARProposalItemProductPakagingQty = item.ARProposalItemProductOfBox;
                    item.ARProposalItemTotalProductGrossWeight = item.ARProposalItemProductOfBox * item.ARProposalitemProductGrossWeight;
                    item.ARProposalItemTotalProductNetWeight = item.ARProposalItemProductOfBox * item.ARProposalitemProductNetWeight;
                    item.ARProposalItemBoxCBM = (item.ARProposalitemProductOverallDimensionHeight *
                                                item.ARProposalitemProductOverallDimensionLength *
                                                item.ARProposalitemProductOverallDimensionWidth) / (decimal)Math.Pow(10, 9);
                    item.ARProposalItemBoxTotalCBM = item.ARProposalItemBoxCBM * item.ARProposalItemProductOfBox;
                    if (item.IsInlandItemProductName)
                    {
                        item.ARProposalItemProductDesc = item.ARProposalItemProductName;
                    }
                }
            }

            report.bsCSCompanys.DataSource = objCompanyInfo;
            report.bsARProposals.DataSource = objProposalsInfo;
            report.bsARProposalItems.DataSource = ProposalItemData;
            report.bsCSCompanyBanks.DataSource = objCompanyBanksInfo;
        }
        #endregion

        public void ChangeForeignItemProductName(ARProposalItemsInfo item, bool isForeignItemProductName)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ICProductsController objProductsController = new ICProductsController();
            if (item != null)
            {
                ICProductsInfo objProductsInfo = objProductsController.GetObjectByID(item.FK_ICProductID) as ICProductsInfo;
                if (objProductsInfo != null)
                {
                    if (isForeignItemProductName != true)
                        item.ARProposalItemProductName = objProductsInfo.ICProductName;
                    else
                        item.ARProposalItemProductName = string.IsNullOrEmpty(objProductsInfo.ICProductName2) ? objProductsInfo.ICProductName : objProductsInfo.ICProductName2;
                }
            }
            entity.ARProposalItemsList.GridControl?.RefreshDataSource();
        }
        public void UpdateTotalAmountByCurrency2(int currencieID)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo objProposalsInfo = (ARProposalsInfo)CurrentModuleEntity.MainObject;
            objProposalsInfo.FK_GECurrencyID2 = currencieID;
            GECurrencyExchangeRatesController objCurrencyExchangeRatesController = new GECurrencyExchangeRatesController();
            GECurrencyExchangeRatesInfo objCurrencyExchangeRatesInfo = objCurrencyExchangeRatesController.GetCurrencyExchangeRateByCurrencyIDAnddate(objProposalsInfo.FK_GECurrencyID2, objProposalsInfo.AACreatedDate);
            if (objCurrencyExchangeRatesInfo != null)
                objProposalsInfo.ARProposalExchangeRate2 = objCurrencyExchangeRatesInfo.GECurrencyExchangeRateExchangeRate;
            else
                objProposalsInfo.ARProposalExchangeRate2 = 1;
            foreach (ARProposalItemsInfo item in entity.ARProposalItemsList)
            {
                entity.RoundByCurrency(item);
            }
            entity.UpdateTotalAmount();
            entity.ARProposalItemsList.GridControl?.RefreshDataSource();

            entity.UpdateMainObjectBindingSource();
        }

        public void InitProductPictureImage(int productID)
        {
            if (productID > 0 && ProductPicturePictureBox != null)
            {
                ProductPicturePictureBox.Image = BOSApp.GetProductPictureImageByProductID(productID);
                ProductPicturePictureBox.Properties.SizeMode = DevExpress.XtraEditors.Controls.PictureSizeMode.Zoom;
            }
        }
        
        public void ChangeSourceSellingPriceMethod(string proposalSourceSellingPriceMethod)
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;            
            ProposalItemsGridControl.LoadGridViewBySourceSelling(proposalSourceSellingPriceMethod);
            ARCustomersController objCustomersController = new ARCustomersController();
            ARCustomersInfo objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectByID(mainObject.FK_ARCustomerID);
            if (proposalSourceSellingPriceMethod == SourceSellingPriceMethod.Config.ToString())
            {
                entity.ARProposalItemsList.ForEach(o =>
                {
                    ICProductsInfo objProductsInfo = BOSApp.GetProductFromCurrentProductList(o.FK_ICProductID);
                    if (objProductsInfo != null)
                    {
                        o.ARProposalItemProductUnitPrice = BOSApp.CalculaterProductUnitPrice(objProductsInfo,
                                                                                            o.ARProposalItemProductUnitPrice,
                                                                                            o.ARProposalItemProductQty,
                                                                                            o.FK_ICMeasureUnitID,
                                                                                            objCustomersInfo != null ? objCustomersInfo.ARCustomerID : 0,
                                                                                            mainObject.ARProposalDate,
                                                                                            mainObject.FK_GECurrencyID);
                        o.ARProposalItemProductUnitPrice2 = mainObject.ARProposalExchangeRate2 > 0? o.ARProposalItemProductUnitPrice * mainObject.ARProposalExchangeRate / mainObject.ARProposalExchangeRate2 : 0;
                        entity.SetProductPriceByProductUnitPrice(o);
                    }
                });
            }
            entity.ARProposalItemsList.GridControl?.RefreshDataSource();
            entity.UpdateTotalAmount();
            entity.UpdateMainObjectBindingSource();
        }
        public void ChangeSaleType()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;

            byte[] RTFByte = BOSApp.GetDefaultDescConfig(this.Name, mainObject.ARProposalSaleType);
            if (ProposalDescEditControl != null)
            {
                if (RTFByte != null && RTFByte.Length > 0)
                {
                    MemoryStream RTFStream = new MemoryStream(RTFByte);
                    ProposalDescEditControl.LoadDocument(RTFStream, DocumentFormat.Rtf);
                    mainObject.ARProposalDesc = ProposalDescEditControl.OpenXmlBytes;
                }
                else
                {
                    ProposalDescEditControl.OpenXmlBytes = null;
                    mainObject.ARProposalDesc = ProposalDescEditControl.OpenXmlBytes;
                }
            }
            entity.UpdateMainObjectBindingSource();
        }

        public void ActionPrintPriceLabel()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;
            ADTemplateToolbarsController controller = new ADTemplateToolbarsController();
            int toolbarID = BOSApp.ListToolbar.Where(o => o.STModuleID == this.ModuleID && o.STToolbarTag == this.ToolbarActionName).Select(o => o.STToolbarID).FirstOrDefault();
            string toolbarTag = BOSApp.ListToolbar.Where(o => o.STModuleID == this.ModuleID && o.STToolbarTag == this.ToolbarActionName).Select(o => o.STToolbarTag).FirstOrDefault();
            int templateID = controller.GetTemplateIDByToolbarID(toolbarID);

            if (templateID == 0)
                return;
            ADTemplatesInfo objADTemplatesInfo = (ADTemplatesInfo)new ADTemplatesController().GetObjectByID(templateID);
            if (objADTemplatesInfo == null)
                return;
            if (string.IsNullOrEmpty(objADTemplatesInfo.ADTemplateStoreProc))
                return;

            string rptFile = System.IO.Path.Combine("Reports", objADTemplatesInfo.ADTemplateNo + ".repx");
            BaseReport report = new BaseReport();
            guiReportPreview reviewer;
            bool bExists = System.IO.File.Exists(rptFile);
            if (!bExists)
                return;

            //DataSet dataSource = SqlDatabaseHelper.RunStoredProcedure(objADTemplatesInfo.ADTemplateStoreProc, this.Name, mainObject.ARProposalID);
            ARProposalItemsController objProposalItemsController = new ARProposalItemsController();
            List<ARProposalItemsInfo> proposalList = objProposalItemsController.GetProposalItemByIDForReportProposalLabel(mainObject.ARProposalID);

            guiFind<ARProposalItemsInfo> guiFind = new guiFind<ARProposalItemsInfo>(TableName.ARProposalItemsTableName,
                                                                                            proposalList,
                                                                                            this,
                                                                                            true,
                                                                                            true);
            guiFind.ShowDialog();
            if (guiFind.DialogResult == DialogResult.OK)
            {
                List<ARProposalItemsInfo> dataSource = (List<ARProposalItemsInfo>)guiFind.SelectedObjects;
                report.DataSource = dataSource.OrderBy(o=> o.ARProposalItemSortOrder).ThenBy(x => x.ARProposalItemID);
                report.LoadLayout(rptFile);

                reviewer = new guiReportPreview(report, true);
                reviewer = new guiReportPreview(report, rptFile, true);
                reviewer.Show();
            }
        }
        public List<ICProductsInfo> LoadProductList()
        {
            ProposalEntities entity = (ProposalEntities)CurrentModuleEntity;
            ARProposalsInfo mainObject = (ARProposalsInfo)entity.MainObject;
            ICProductsController objProductsController = new ICProductsController();
            List<ICProductsInfo> listProduct = new List<ICProductsInfo>();
            listProduct = objProductsController.GetAllProductForSaleToLookupEdit();
            return listProduct;
        }
    }
    #endregion
}
