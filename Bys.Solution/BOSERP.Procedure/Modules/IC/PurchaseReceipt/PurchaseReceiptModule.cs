using BOSCommon;
using BOSCommon.Constants;
using BOSCommon.Enums;
using BOSComponent;
using BOSERP.GenaralLeadger;
using BOSERP.Utilities;
using BOSLib;
using BOSReport;
using DevExpress.XtraEditors;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraReports.UI;
using Localization;
using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Transactions;
using System.Windows.Forms;
using ZXing;
using ZXing.Common;

namespace BOSERP.Modules.PurchaseReceipt
{
    #region PurchaseReceiptModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:PurchaseReceiptModule
    //Created Date:Saturday, May 31, 2008
    //-----------------------------------------------------------

    public class PurchaseReceiptModule : GLReceiptModule
    {
        #region Constants
        public const string PackageGridControlName = "fld_dgcICPackages";
        public const string ChoocePackingListTablControlName = "fld_tabChoocePackingList";
        public const string MultiPackageReceiptItemGridControlName = "fld_dgcMultiPackageReceiptItems";
        public const string MultiProductReceiptItemGridControlName = "fld_dgcMultiProductReceiptItems";
        public const string MultiReceiptItemGridControlName = "fld_dgcMultiReceiptItems";
        public const string APPurchaseOrderItemsGridControlName = "fld_dgcAPPurchaseOrderItems";
        public const string ReceiptTypeRadioGroupControlName = "fld_rdgReceiptType";
        public const string PackagePanelControlName = "fld_panelPackage";
        public const string ProductPanelControlName = "fld_panelProduct";
        public const string ProductPicturePictureBoxName = "fld_pteICReceiptItemProductPicture1";
        public const string ToolbarButtonGeneratePackage = "GeneratePackage";
        public const string DocumentEntryGridControlName = "fld_dgcACDocumentEntrys";
        public const string SearchBranchLookupEditControlName = "fld_lkeFK_BRBranchID";
        public const string ICProductIDItemLookupEditName = "fld_lkeFK_ICProductID1";
        public const string ReceiptItemGridControlName = "fld_dgcICReceiptItems";
        public const string PurchaseOrderItemButtonName = "fld_btnShowPurchaseOrderItems";
        public const string ICReceiptItemContsControlName = "fld_lkeICReceiptItemConts";
        public const string ICReceiptItemContFeesControlName = "fld_dgcICReceiptItemContFees";
        public const string UpdatePositionItemsControlName = "fld_lkeMMUpdatePositionItemID";
        public const string HyperLinkLoadQualitySerialControlName = "fld_lnkLoadQualitySerialNo";
        #endregion

        #region Variable
        /// <summary>
        /// Define chooce packing list tab control
        /// </summary>
        private BOSTabControl ChoocePackingListTabControl;
        /// <summary>
        /// Define package panel control
        /// </summary>
        private PanelControl PackagePanelControl;
        /// <summary>
        /// Define product panel control
        /// </summary>
        private PanelControl ProductPanelControl;
        /// <summary>
        /// Difine receipt type radio group control
        /// </summary>
        private BOSRadioGroup ReceiptTypeRadioGroupControl;

        /// <summary>
        /// A variable to keep the original receipt item list before it changes
        /// </summary>
        private List<ICReceiptItemsInfo> OriginalReceiptItemList;

        public BOSButton PurchaseOrderItemButton;

        /// <summary>
        /// A variable indicates whether the receipt is created from an invoice
        /// </summary>
        private bool CreateFromInvoice = false;
        private BOSPictureEdit ProductPicturePictureBox;
        #endregion

        #region Public properties
        /// Gets or sets check is supplier
        /// </summary>
        public bool IsSupplier { get; set; }
        /// <summary>
        /// Gets or sets check is branch
        /// </summary>
        public bool IsBranch { get; set; }

        /// <summary>
        /// Gets or sets old object to compare and save to history details
        /// </summary>
        public ICReceiptsInfo OriginalReceiptObject { get; set; }
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
        public BOSLookupEdit SearchBranchLookupEditControl;
        public List<ADDataViewPermissionsInfo> CurrentModuleDataViewPermissionList;
        public List<BRBranchsInfo> BranchList;
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], END
        public BOSLookupEdit ICProductIDItemLookupEdit;
        public ICReceiptItemsGridControl ReceiptItemsGridControl;
        public BOSLookupEdit UpdatePositionItemControl;
        public DevExpress.XtraEditors.HyperLinkEdit LoadQualitySerialControl;
        //public  int STT ;

        #endregion

        public PurchaseReceiptModule()
        {
            Name = ModuleName.PurchaseReceipt;
            CurrentModuleEntity = new PurchaseReceiptEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();

            GetCurrentModuleDataViewPermission();
            SearchBranchLookupEditControl = (BOSLookupEdit)Controls[PurchaseReceiptModule.SearchBranchLookupEditControlName];
            SearchBranchLookupEditControl.Properties.DataSource = BranchList;

            ChoocePackingListTabControl = (BOSTabControl)Controls[PurchaseReceiptModule.ChoocePackingListTablControlName];
            ReceiptTypeRadioGroupControl = (BOSRadioGroup)Controls[PurchaseReceiptModule.ReceiptTypeRadioGroupControlName];
            PackagePanelControl = (PanelControl)Controls[PurchaseReceiptModule.PackagePanelControlName];
            ProductPanelControl = (PanelControl)Controls[PurchaseReceiptModule.ProductPanelControlName];
            ICProductIDItemLookupEdit = (BOSLookupEdit)Controls[PurchaseReceiptModule.ICProductIDItemLookupEditName];
            ReceiptItemsGridControl = (ICReceiptItemsGridControl)Controls[PurchaseReceiptModule.ReceiptItemGridControlName];

            PurchaseOrderItemButton = (BOSButton)Controls[PurchaseOrderItemButtonName];
            //Set default chooce receipt type
            ReceiptTypeRadioGroupControl.EditValue = 1;

            OriginalReceiptObject = new ICReceiptsInfo();
            OriginalReceiptItemList = new List<ICReceiptItemsInfo>();
            //ChangedInputType(ProductType.Product.ToString());
            ProductPicturePictureBox = (BOSPictureEdit)Controls[ProductPicturePictureBoxName];
            StartGettingInventoryThread();
            UpdatePositionItemControl = (BOSLookupEdit)Controls[UpdatePositionItemsControlName];
            MMUpdatePositionItemsController objUpdatePosititonsController = new MMUpdatePositionItemsController();
            List<MMUpdatePositionItemsInfo> listUpdatePositions = objUpdatePosititonsController.GetAllLocationName();
            UpdatePositionItemControl.Properties.DataSource = listUpdatePositions;
            LoadQualitySerialControl = (DevExpress.XtraEditors.HyperLinkEdit)Controls[HyperLinkLoadQualitySerialControlName];
        }
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
        //public override string GenerateSearchQuery(string strTableName)
        //{
        //    string query = base.GenerateSearchQuery(strTableName);
        //    query += string.Format(" and ICReceiptTypeCombo = '{0}'", ReceiptType.PurchaseReceipt.ToString());                               
        //    return query;
        //}

        protected override DataSet GetSearchData(ref string searchQuery)
        {
            ICReceiptsController objReceiptsController = new ICReceiptsController();
            ICReceiptsInfo searchObject = (ICReceiptsInfo)CurrentModuleEntity.SearchObject;

            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByAccessKey(searchObject.ACAssObjectAccessKey);

            DataSet ds = new DataSet();
            if (SearchBranchLookupEditControl.EditValue.ToString() == "" || SearchBranchLookupEditControl.EditValue.ToString() == "0")
            {
                if (BranchList.Count == 0)
                {
                    ds = objReceiptsController.GetDataSetByID(-1);
                }
                else
                {
                    ds = objReceiptsController.GetMaterialPurchaseReceiptListByListOfBranchIDForPurchaseReceipt(searchObject.ICReceiptNo,
                                                            objObjectsInfo.ACObjectID,
                                                            objObjectsInfo.ACObjectType,
                                                            searchObject.FK_ICStockID,
                                                            searchObject.FK_HREmployeeID,
                                                            ReceiptType.PurchaseReceipt.ToString(),
                                                            ReceiptType.Product.ToString(),
                                                            searchObject.ReceiptDateFrom,
                                                            searchObject.ReceiptDateTo,
                                                            BranchList);
                }
            }
            else
            {
                ds = objReceiptsController.GetMaterialPurchaseReceiptListForPurchaseReceipt(searchObject.ICReceiptNo,
                                                            objObjectsInfo.ACObjectID,
                                                            objObjectsInfo.ACObjectType,
                                                            searchObject.FK_ICStockID,
                                                            searchObject.FK_BRBranchID,
                                                            searchObject.FK_HREmployeeID,
                                                            ReceiptType.PurchaseReceipt.ToString(),
                                                            ReceiptType.Product.ToString(),
                                                            searchObject.ReceiptDateFrom,
                                                            searchObject.ReceiptDateTo);
            }

            return ds;
        }
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], END
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
        public void GetCurrentModuleDataViewPermission()
        {
            CurrentModuleDataViewPermissionList = BOSApp.CurrentADDataViewPermissionList.Where(i => i.STModuleName == Name && i.ADDataViewPermissionType == ADDataViewPermissionType.Module).ToList();

            List<int> branchIDList = new List<int>();
            foreach (ADDataViewPermissionsInfo dataViewPermissionsInfo in CurrentModuleDataViewPermissionList)
            {
                branchIDList.Add(dataViewPermissionsInfo.FK_BRBranchID);
            }

            if (branchIDList.Count == 0)
            {
                BranchList = new List<BRBranchsInfo>();
            }
            else
            {
                BRBranchsController objBranchsController = new BRBranchsController();
                List<BRBranchsInfo> branchList = objBranchsController.GetAllBranches();

                BranchList = branchList.Where(i => branchIDList.IndexOf(i.BRBranchID) > -1).ToList();
            }
        }
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], END

        public override void ActionNew()
        {
            CreateFromInvoice = false;
            base.ActionNew();
            //ChangedInputType(ProductType.Product.ToString());
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;

            //foreach (ACDocumentEntrysInfo entry in entity.DocumentEntryList)
            //{
            //    entry.FK_ACCreditAccountID = 0;
            //    entry.FK_ACDebitAccountID = 0;
            //}
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.ICReceiptPackNo = entity.GetProductLotNo();
            objReceiptsInfo.IsCreateFromPurchaseOrder = false;
            PurchaseOrderItemButton.Enabled = false;
            LoadGridViewReceiptItemList();
            ChangeDisplayAndDataItemListGridView();
            //STT = 1;
        }
        #region Local
        public void AddItemToReceiptItemsList()
        {
            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptItemsInfo item = (ICReceiptItemsInfo)entity.ModuleObjects[TableName.ICReceiptItemsTableName];
            item.ICReceiptItemLotNo = string.Empty;
            item.ICReceiptItemProductSerialNo = string.Empty;
            bool isFirstAddItem = entity.ReceiptItemsList.Count() == 0;
            if (item.FK_ICProductID > 0)
            {
                ICReceiptsInfo objReceiptInfo = ((ICReceiptsInfo)entity.MainObject);
                ICProductComponentsController objProductComponentsController = new ICProductComponentsController();
                List<ICProductComponentsInfo> components = objProductComponentsController.GetProductComponentListByProductID(item.FK_ICProductID);
                if (components.Count > 0)
                {
                    foreach (ICProductComponentsInfo component in components)
                    {
                        item = new ICReceiptItemsInfo();
                        entity.SetValuesAfterValidateProduct(component.FK_ICProductComponentChildID, item);
                        item.ICReceiptItemProductQty = item.ICReceiptItemProductQty * component.ICProductComponentQty;
                        item.FK_ICProductAttributeTTMTID = objReceiptInfo.FK_ICProductAttributeTTMTID;
                        item.FK_GECountryID = objReceiptInfo.FK_GECountryID;
                        //item.ICReceiptItemProductSerialNo = string.Empty;
                        //item.ICReceiptItemLotNo = string.Empty;
                        entity.ReceiptItemsList.Add(item);
                    }
                    entity.ReceiptItemsList.GridControl.RefreshDataSource();
                }
                else
                {
                    entity.SetValuesAfterValidateProduct(item.FK_ICProductID);
                    item.FK_ICProductAttributeTTMTID = objReceiptInfo.FK_ICProductAttributeTTMTID;
                    item.FK_GECountryID = objReceiptInfo.FK_GECountryID;
                    if (objReceiptInfo.ICReceiptReceiptType == ProductType.Roundwood.ToString() || (entity.MainObject as ICReceiptsInfo).ICReceiptReceiptType == ProductType.Lumber.ToString())
                    {
                        objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);

                        if (objProductsInfo != null)
                        {

                            item.FK_ICProductAttributeWoodTypeID = objProductsInfo.FK_ICProductAttributeWoodTypeID;

                            // item.ICReceiptItemProductPerimeter = objProductsInfo.ICProductPerimeter;
                            item.ICReceiptItemProductLength = objProductsInfo.ICProductLength;
                            item.ICReceiptItemProductWidth = objProductsInfo.ICProductWidth;
                            item.ICReceiptItemProductHeight = objProductsInfo.ICProductHeight;
                            item.ICReceiptItemProductType = objProductsInfo.ICProductType;
                            // item.ICReceiptItemProductFSCCombo = objProductsInfo.ICProductFSCCombo;

                            //NN GIANG ADD AccountID WITH PRODUCT - START - 25-04-2016
                            item.FK_ACAccountID = objProductsInfo.FK_ACAccountID;
                            //NN GIANG ADD AccountID WITH PRODUCT - END - 25-04-2016
                            item.FK_ACAccountID = GetAccountByStock(item.FK_ICStockID, item.FK_ACAccountID);
                        }
                    }
                    if (objReceiptInfo.ICReceiptReceiptType == ProductType.IngredientPaint.ToString())
                    {
                        objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);

                        if (objProductsInfo != null)
                        {
                            item.ICReceiptItemProductionDate = objReceiptInfo.ICReceiptDate;
                            item.ICReceiptItemExpiryDate = item.ICReceiptItemProductionDate.AddDays((int)objProductsInfo.ICProductExpiryDay);
                        }
                    }
                    entity.ReceiptItemsList.AddObjectToList();
                }
                
                ResetTotalQuantity();
                UpdateTotalCost();
                if (isFirstAddItem)
                    ChangeDisplayAndDataItemListGridView();
            }
        }
        public void ResetTotalQuantity()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            if ((entity.MainObject as ICReceiptsInfo).ICReceiptReceiptType == ProductType.Roundwood.ToString() || (entity.MainObject as ICReceiptsInfo).ICReceiptReceiptType == ProductType.Lumber.ToString())
            {
                objReceiptsInfo.ICReceiptTotalQty = 0;
                foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                {
                    item.ICReceiptItemNotJetExceptBlock = objReceiptsInfo.ICReceiptTotalQty +
                        (item.ICReceiptItemProductLength * item.ICReceiptItemProductPerimeter * item.ICReceiptItemProductPerimeter * Convert.ToDecimal(0.0796 / 1000000000));
                    item.ICReceiptItemProductQty = item.ICReceiptItemNotJetExceptBlock - item.ICReceiptItemExceptedBlock;
                    objReceiptsInfo.ICReceiptTotalQty = objReceiptsInfo.ICReceiptTotalQty + item.ICReceiptItemProductQty;
                }
            }
        }
        public void ChangeItemFromReceiptItemsList()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)entity.ModuleObjects[TableName.ICReceiptItemsTableName];
            entity.SetProductCostByProductUnitCost();
            entity.ReceiptItemsList.ChangeObjectFromList();
            UpdateTotalCost();
        }

        public void DeleteItemFromReceiptItemsList()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
                entity.ReceiptItemsList.RemoveSelectedRowObjectFromList();
                UpdateTotalCost();
            }
        }
        public void DeleteItemFromReceiptItemContsList()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
                entity.ReceiptItemContList.RemoveSelectedRowObjectFromList();
                UpdateContFees();
            }
        }
        public void DeleteItemFromReceiptItemContFeesList()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
                entity.ReceiptItemContFeeList.RemoveSelectedRowObjectFromList();
            }
        }

        public void ChangeDiscountPercent()
        {
            UpdateTotalCost();
        }

        public void ChangeDiscountAmount()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            if (objReceiptsInfo.ICReceiptSubTotalCost > 0)
                objReceiptsInfo.ICReceiptDiscountPerCent = objReceiptsInfo.ICReceiptDiscountFix / objReceiptsInfo.ICReceiptSubTotalCost * 100;
            UpdateTotalCost();
        }

        public void ChangeTaxPercent()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            UpdateTotalCost();
        }

        public void ChangeTaxAmount()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            decimal subTotalCost = objReceiptsInfo.ICReceiptSubTotalCost -
                                    objReceiptsInfo.ICReceiptDiscountFix +
                                    objReceiptsInfo.ICReceiptShippingFees +
                                    objReceiptsInfo.ICReceiptShippingExtraFees;
            if (subTotalCost > 0)
                objReceiptsInfo.ICReceiptTaxPercent = objReceiptsInfo.ICReceiptTaxAmount / subTotalCost * 100;
            UpdateTotalCost();
        }

        public void ChangeFee()
        {
            UpdateTotalCost();
        }

        /// <summary>
        /// Update total costs of the purchase receipt
        /// </summary>
        public void UpdateTotalCost()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
                entity.UpdateTotalCost();
                UpdateInventoryCost();
                //UpdateDocumentEntries();
            }
        }

        /// <summary>
        /// Update the inventory cost of all items
        /// </summary>
        private void UpdateInventoryCost()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            decimal cost = objReceiptsInfo.ICReceiptTotalCost - objReceiptsInfo.ICReceiptSubTotalCost - objReceiptsInfo.ICReceiptTaxAmount;
            decimal totalCost = 0;
            foreach (var item in entity.ReceiptItemsList)
            {
                decimal price = item.ICReceiptItemProductUnitCost * item.ICReceiptItemProductQty;
                price -= price * (item.ICReceiptItemProductDiscount / 100);
                totalCost += price;
            }
            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
            {
                if (item.ICReceiptItemProductQty != 0 && item.ICReceiptItemProductUnitCost != 0)
                {
                    decimal price = item.ICReceiptItemProductUnitCost * item.ICReceiptItemProductQty;
                    price -= price * (item.ICReceiptItemProductDiscount / 100);
                    price /= item.ICReceiptItemProductQty;
                    decimal chiphisp = (cost / totalCost) * price;

                    item.ICReceiptItemInventoryCost = price + chiphisp;
                }
                else
                    item.ICReceiptItemInventoryCost = 0;

                //decimal inventoryCost = item.ICReceiptItemExtCost - item.ICReceiptItemDiscountAmount;
                //if (extCost > 0)
                //{
                //    decimal factor = item.ICReceiptItemExtCost / extCost;
                //    inventoryCost -= factor * objReceiptsInfo.ICReceiptDiscountFix;
                //    inventoryCost += factor * (objReceiptsInfo.ICReceiptShippingFees + objReceiptsInfo.ICReceiptShippingExtraFees);
                //}
                //if (item.ICReceiptItemProductQty > 0)
                //{
                //    inventoryCost = inventoryCost / item.ICReceiptItemProductQty;
                //}
                //item.ICReceiptItemInventoryCost = inventoryCost;
            }
        }

        /// <summary>
        /// Called when the user changes the supplier
        /// </summary>
        /// <param name="supplierID">Target supplier id</param>
        public void ChangeSupplier(int supplierID)
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.FK_APSupplierID = supplierID;
            if (!Toolbar.IsNullOrNoneAction())
            {
                SetDefaultValuesFromSupplier();
            }
        }
        #endregion

        public void ActionNewFromPurchaseOrder()
        {
            base.ActionNew();
            CreateFromInvoice = false;
            PurchaseOrderItemButton.Enabled = true;
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.IsCreateFromPurchaseOrder = true;
            objReceiptsInfo.ICReceiptPackNo = entity.GetProductLotNo();
            APPurchaseOrdersController objPurchaseOrdersController = new APPurchaseOrdersController();
            APPurchaseOrderItemsController objPurchaseOrderItemsController = new APPurchaseOrderItemsController();
            List<APPurchaseOrderItemsInfo> purchaseOrderItemList = objPurchaseOrderItemsController.GetPurchaseOrderItemsForPurchaseReceiptAndProductQty();
            guiChoosePurchaseOrderItem guiChoosePurchaseOrderItem = new guiChoosePurchaseOrderItem(purchaseOrderItemList);
            guiChoosePurchaseOrderItem.Module = this;
            guiChoosePurchaseOrderItem.ShowDialog();
            if (guiChoosePurchaseOrderItem.DialogResult != DialogResult.OK || guiChoosePurchaseOrderItem.SelectedObjects.Count() == 0)
            {
                ActionCancel();
                return;
            }

            APPurchaseOrderItemsInfo objPurchaseOrderItemsInfo = (APPurchaseOrderItemsInfo)guiChoosePurchaseOrderItem.SelectedObjects[0];
            APPurchaseOrdersInfo objPurchaseOrdersInfo = (APPurchaseOrdersInfo)objPurchaseOrdersController.GetObjectByID(objPurchaseOrderItemsInfo.FK_APPurchaseOrderID);
            //Check FK_APSupplierID
            objReceiptsInfo.FK_APPurchaseContractID = objPurchaseOrdersInfo.FK_APPurchaseContractID;
            objReceiptsInfo.FK_APSupplierID = objPurchaseOrdersInfo.FK_APSupplierID;
            objReceiptsInfo.FK_ARCustomerID = objPurchaseOrdersInfo.FK_ARCustomerID;
            objReceiptsInfo.FK_MMBatchProductID = objPurchaseOrdersInfo.FK_MMBatchProductID;
            objReceiptsInfo.ICReceiptSOName = string.Join(", ", guiChoosePurchaseOrderItem.SelectedObjects.Where(o => !string.IsNullOrWhiteSpace(o.MMBatchProductSOName)).Select(o => o.MMBatchProductSOName).Distinct().ToArray());
            SetDefaultValuesFromSupplier();
            entity.GenerateEntityFromPurchaseOrders(objPurchaseOrdersInfo, guiChoosePurchaseOrderItem.SelectedObjects);
            objReceiptsInfo.FK_ACAssObjectID = objPurchaseOrdersInfo.FK_ACObjectID;
            objReceiptsInfo.ICAssObjectType = objPurchaseOrdersInfo.APObjectType;
            objReceiptsInfo.ACAssObjectAccessKey = objReceiptsInfo.FK_ACAssObjectID + ";" + objReceiptsInfo.ICAssObjectType;
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByIDAndType(objReceiptsInfo.FK_ACAssObjectID, objReceiptsInfo.ICAssObjectType);
            objReceiptsInfo.ICReceiptDeliveryContactName = objObjectsInfo != null ? objObjectsInfo.ACObjectName : string.Empty;
            objReceiptsInfo.FK_APPurchaseOrderID = objPurchaseOrdersInfo.APPurchaseOrderID;
            objReceiptsInfo.FK_ACObjectID = objPurchaseOrdersInfo.FK_ACAssObjectID;
            objReceiptsInfo.ICObjectType = objPurchaseOrdersInfo.APAssObjectType;
            objReceiptsInfo.ACObjectAccessKey = objReceiptsInfo.FK_ACObjectID + ";" + objReceiptsInfo.ICObjectType;
            objReceiptsInfo.FK_ICProductAttributeTTMTID = objPurchaseOrdersInfo.FK_ICProductAttributeTTMTID;
            objReceiptsInfo.ICReceiptPONo = objPurchaseOrdersInfo.APPurchaseOrderContractNo;
            objReceiptsInfo.ICReceiptTaxPercent = objPurchaseOrdersInfo.APPurchaseOrderTaxPercent;
            objReceiptsInfo.FK_ICStockID = objPurchaseOrdersInfo.FK_ICStockSlotID;
            entity.ReceiptItemsList.ForEach(o => o.FK_ICStockID = objReceiptsInfo.FK_ICStockID);
            objReceiptsInfo.ICReceiptProposedEmployeeID = objPurchaseOrdersInfo.APPurchaseOrderProposedEmployeeID;
            if (objPurchaseOrdersInfo.APPurchaseOrderReceiptTypeCombo == PurchaseOrderReceiptType.WoodMDFOutSourcing.ToString()
                            || objPurchaseOrdersInfo.APPurchaseOrderReceiptTypeCombo == PurchaseOrderReceiptType.MechanicOutSourcing.ToString()
                            || objPurchaseOrdersInfo.APPurchaseOrderReceiptTypeCombo == PurchaseOrderReceiptType.OutSourcing.ToString())
            {
                objReceiptsInfo.ICReceiptProportion = objPurchaseOrderItemsInfo.RemainQty;
            }
            else
            {
                objReceiptsInfo.ICReceiptProportion = 0;
            }
            CurrentModuleEntity.UpdateMainObjectBindingSource();
            DisplayLabelText(CurrentModuleEntity.MainObject);

            entity.ReceiptItemsList.GridControl.RefreshDataSource();
            LoadGridViewReceiptItemList();
            if (entity.ReceiptItemsList.Count > 0)
            {
                entity.ReceiptItemsList.GridControl.InvalidateLookupEditColumns();
                entity.ReceiptItemsList.GridViewFocusRow(0);
            }

            if (objPurchaseOrdersInfo.APPurchaseOrderType == PurchaseOrderType.OutSourcing.ToString()
                && objPurchaseOrdersInfo.FK_MMBatchProductID > 0)
            {
                ICReceiptsController objReceiptsController = new ICReceiptsController();
                ICReceiptsInfo objPackNoReceiptsInfo = objReceiptsController.GetReceiptPackNoByBatchProduct(objPurchaseOrdersInfo.FK_MMBatchProductID);

                MMBatchProductsController objBatchProductsController = new MMBatchProductsController();
                MMBatchProductsInfo objBatchProductsInfo = (MMBatchProductsInfo)objBatchProductsController.GetObjectByID(objPurchaseOrdersInfo.FK_MMBatchProductID);

                if (objPackNoReceiptsInfo == null)
                {
                    objReceiptsInfo.ICReceiptPackNo = objBatchProductsInfo.MMBatchProductNo + ".01/GC";
                }
                else
                {
                    string currentPackNo = objPackNoReceiptsInfo.ICReceiptPackNo.Substring(objPackNoReceiptsInfo.ICReceiptPackNo.Length - 5, 2);
                    int currentPackNumber = 0;
                    if (Int32.TryParse(currentPackNo, out currentPackNumber))
                    {
                        objReceiptsInfo.ICReceiptPackNo = objBatchProductsInfo.MMBatchProductNo + "." + (currentPackNumber + 1).ToString().PadLeft(2, '0') + "/GC";
                    }
                }
            }

            ChangeDisplayAndDataItemListGridView();
        }
        public void ChangePackage()
        {
            if (Toolbar.IsNullOrNoneAction()) return;
           

            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            List<ICReceiptItemsInfo> selectGroupPackage = entity.ReceiptItemsList.Where(o => o.Selected).ToList();
            List<ICReceiptItemsInfo> unSelectGroupPackage = entity.ReceiptItemsList.Where(o => !o.Selected).ToList();
            if (selectGroupPackage.Count() == 0)
            {
                DialogResult dlgResult = MessageBox.Show("Bạn không chọn chi tiết cần sinh kiện, hệ thống sẽ phát sinh lại mã kiện cho tất cả các chi tiết, bạn có muốn không?", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (dlgResult == DialogResult.No) return;
                else selectGroupPackage = entity.ReceiptItemsList.ToList();
            }

           
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            List<GEPackageNumeringConfigsInfo> woodFormulas = (new GEPackageNumeringConfigsController()).GetPackageNumberingList();
            if (woodFormulas.Count() > 0 )
            {
                List<GEPackageNumeringConfigsInfo> checkFormulas = woodFormulas.Where(f => selectGroupPackage.Any(tp => tp.FK_ICProductAttributeWoodTypeID == f.FK_ICProductAttributeID)).ToList();
                if (checkFormulas.Count() == 0) return;
                int countExit = 0;
                foreach (ICReceiptItemsInfo item in selectGroupPackage)
                {
                    if (item.FK_ICProductAttributeWoodTypeID > 0)
                    {
                        bool loaiGoVuong = false;
                        if (item.ICReceiptItemProductHeight == item.ICReceiptItemProductWidth) loaiGoVuong = true;
                        GEPackageNumeringConfigsInfo config = woodFormulas.Where(o => o.FK_ICProductAttributeID == item.FK_ICProductAttributeWoodTypeID 
                        && o.GEPackageNumeringConfigHeigth == item.ICReceiptItemProductHeight && o.GEPackageNumeringConfigWoodType == loaiGoVuong).FirstOrDefault();
                        if (config != null && !string.IsNullOrEmpty(config.MMProductionNormItemConfigPackageNo))
                        {
                            List<ICReceiptItemsInfo> exit = unSelectGroupPackage.Where(o => o.FK_ICProductAttributeWoodTypeID == item.FK_ICProductAttributeWoodTypeID
                                                                                              && o.ICReceiptItemProductHeight == item.ICReceiptItemProductHeight
                                                                                              && ((loaiGoVuong && o.ICReceiptItemProductWidth == item.ICReceiptItemProductHeight)
                                                                                                    || (!loaiGoVuong && o.ICReceiptItemProductWidth != item.ICReceiptItemProductHeight))).ToList();


                            countExit = config.GEPackageNumeringConfigStart;
                            string checkheight = ((int)item.ICReceiptItemProductHeight).ToString();
                            string Checkserial = config.MMProductionNormItemConfigPackageNo + checkheight.PadLeft(2, '0')
                                + config.MMProductionNormItemConfigTypePrefix
                                + config.GEPackageNumeringConfigPrefix;

                            // kiểm tra nếu ConfigStart đã được dùng thì tăng lên 1
                            bool exitSerial = true;
                            while (exitSerial)
                            {
                                if (selectGroupPackage.Where(e => !e.Selected && e.ICReceiptItemProductSerialNo.Contains(Checkserial + (countExit).ToString().PadLeft(config.GEPackageNumeringConfigLength, '0'))).Count() == 0)
                                    exitSerial = false;
                                else countExit++;
                            }

                            exitSerial = true;
                            while (exitSerial)
                            {
                                if (exit.Where(e => e.ICReceiptItemProductSerialNo.Contains(Checkserial + (countExit).ToString().PadLeft(config.GEPackageNumeringConfigLength, '0'))).Count() == 0)
                                    exitSerial = false;
                                else countExit++;
                            }
                            

                            string height = ((int)item.ICReceiptItemProductHeight).ToString();
                            string serial = config.MMProductionNormItemConfigPackageNo + height.PadLeft(2, '0')
                                + config.MMProductionNormItemConfigTypePrefix
                                + config.GEPackageNumeringConfigPrefix
                                + (countExit > 0 ? countExit : config.GEPackageNumeringConfigStart).ToString().PadLeft(config.GEPackageNumeringConfigLength, '0');
                            item.ICReceiptItemProductSerialNo = serial;
                            item.ICReceiptItemLotNo = objReceiptsInfo.ICReceiptPackNo;
                            item.Selected = false;
                            unSelectGroupPackage.Add(item);
                        }
                    }
                }
                selectGroupPackage.ForEach(o => { o.Selected = false; });
                entity.ReceiptItemsList.GridControl.RefreshDataSource();
            }
        }
        public void ClearPackage()
        {
            if (Toolbar.IsNullOrNoneAction()) return;
            DialogResult dlgResult = MessageBox.Show(PurchaseReceiptLocalizedResources.ConfirmClearExistingSerialNo, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (dlgResult == DialogResult.No) return;
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            entity.ReceiptItemsList.ForEach(o => { o.ICReceiptItemProductSerialNo = string.Empty; });
            entity.ReceiptItemsList.GridControl.RefreshDataSource();
        }
        public void GroupPackage()
        {
            if (Toolbar.IsNullOrNoneAction()) return;
           

            ///ConfirmGroupExistingSerialNoErrorSelect

            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            List<GEPackageNumeringConfigsInfo> woodFormulas = (new GEPackageNumeringConfigsController()).GetPackageNumberingList();
            List<ICReceiptItemsInfo> selectGroupPackage = entity.ReceiptItemsList.Where(o => o.Selected).ToList();
            if (selectGroupPackage.Count() < 2)
            {
                BOSApp.ShowMessage(PurchaseReceiptLocalizedResources.ConfirmGroupExistingSerialNoErrorSelect);
                return;
            }
            if (selectGroupPackage.Select(g => g.ICReceiptItemProductHeight).Distinct().ToArray().Count() > 1)
            {
                BOSApp.ShowMessage("Các kiện đang gộp không cùng độ dày!");
                return;
            }
            if (selectGroupPackage.Select(g => g.FK_ICProductAttributeWoodTypeID).Distinct().ToArray().Count() > 1)
            {
                BOSApp.ShowMessage("Các kiện đang gộp không cùng loại gỗ!");
                return;
            }
            //Vuông và không vuông không thể gộp kiện
            int vVuong = selectGroupPackage.Where(g => g.ICReceiptItemProductHeight == g.ICReceiptItemProductWidth).Count();
            int vKVuong = selectGroupPackage.Where(g => g.ICReceiptItemProductHeight != g.ICReceiptItemProductWidth).Count();
            if(vVuong > 0 && vKVuong > 0)
            {
                BOSApp.ShowMessage("Ván vuông và không vuông không thể gộp chung kiện!");
                return;
            }
            // Dùng lại số start nhỏ nhất nếu đã phát sinh kiện  trước đó
            int countExit = 0;
            foreach (ICReceiptItemsInfo exitItem in selectGroupPackage)
            {
                string startNumber = !string.IsNullOrEmpty(exitItem.ICReceiptItemProductSerialNo) ? exitItem.ICReceiptItemProductSerialNo.Substring(6, 5): "0";
                int getNumber = 0;
                int.TryParse(startNumber, out getNumber);
                exitItem.STT = getNumber;
                countExit = Math.Min(getNumber, countExit);
            }
            if (woodFormulas.Count() > 0 )
            {
                List<GEPackageNumeringConfigsInfo> checkFormulas = woodFormulas.Where(f => entity.ReceiptItemsList.Any(tp => tp.FK_ICProductAttributeWoodTypeID == f.FK_ICProductAttributeID)).ToList();
                if (checkFormulas.Count() == 0) return;
                int nubmber = 1;
                
                foreach (ICReceiptItemsInfo item in selectGroupPackage)
                {
                    if (item.FK_ICProductAttributeWoodTypeID > 0)
                    {
                        bool loaiGoVuong = false;
                        if (item.ICReceiptItemProductHeight == item.ICReceiptItemProductWidth) loaiGoVuong = true;
                        GEPackageNumeringConfigsInfo config = woodFormulas.Where(o => o.FK_ICProductAttributeID == item.FK_ICProductAttributeWoodTypeID
                        && o.GEPackageNumeringConfigHeigth == item.ICReceiptItemProductHeight && o.GEPackageNumeringConfigWoodType == loaiGoVuong).FirstOrDefault();
                        if (config != null && !string.IsNullOrEmpty(config.MMProductionNormItemConfigPackageNo))
                        {
                            List<ICReceiptItemsInfo> exit = entity.ReceiptItemsList.Where(o => o.FK_ICProductAttributeWoodTypeID == item.FK_ICProductAttributeWoodTypeID
                                                                                              && o.ICReceiptItemProductHeight == item.ICReceiptItemProductHeight
                                                                                              && ((loaiGoVuong && o.ICReceiptItemProductWidth == item.ICReceiptItemProductHeight)
                                                                                                    || (!loaiGoVuong && o.ICReceiptItemProductWidth != item.ICReceiptItemProductHeight))
                                                                                              && !o.Selected
                                                                                              && !string.IsNullOrEmpty(o.ICReceiptItemProductSerialNo)
                                                                                                    ).ToList();
                            if (countExit == 0) countExit = config.GEPackageNumeringConfigStart;
                            string checkheight = ((int)item.ICReceiptItemProductHeight).ToString();
                            string Checkserial = config.MMProductionNormItemConfigPackageNo + checkheight.PadLeft(2, '0')
                                + config.MMProductionNormItemConfigTypePrefix
                                + config.GEPackageNumeringConfigPrefix;

                            // kiểm tra nếu ConfigStart đã được dùng thì tăng lên 1
                            bool exitSerial = true;
                            while (exitSerial)
                            {
                                if (exit.Where(e => e.ICReceiptItemProductSerialNo.Contains(Checkserial + (countExit).ToString().PadLeft(config.GEPackageNumeringConfigLength, '0'))).Count() == 0)
                                    exitSerial = false;
                                else countExit++;
                            }

                            string height = ((int)item.ICReceiptItemProductHeight).ToString();
                            string serial = config.MMProductionNormItemConfigPackageNo + height.PadLeft(2, '0')
                                + config.MMProductionNormItemConfigTypePrefix
                                + config.GEPackageNumeringConfigPrefix
                                + (countExit > 0 ? countExit : config.GEPackageNumeringConfigStart).ToString().PadLeft(config.GEPackageNumeringConfigLength, '0');

                            item.ICReceiptItemProductSerialNo = serial + "." + nubmber.ToString().PadLeft(2, '0');
                            item.ICReceiptItemLotNo = objReceiptsInfo.ICReceiptPackNo;
                            nubmber++;
                            
                        }
                    }
                }
                selectGroupPackage.ForEach(o => { o.Selected = false; });
                entity.ReceiptItemsList.GridControl.RefreshDataSource();
            }
        }
        /// <summary>
        /// Called when user wants to create a receipt from an invoice
        /// </summary>
        public void ActionNewFromInvoice()
        {
            CreateFromInvoice = true;
            base.ActionNew();
            ICProductIDItemLookupEdit.Enabled = false;
            PurchaseOrderItemButton.Enabled = false;
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo receipt = (ICReceiptsInfo)entity.MainObject;
            receipt.IsCreateFromPurchaseOrder = false;
            APInvoiceInsController objInvoiceInsController = new APInvoiceInsController();
            List<APInvoiceInsInfo> invoices = objInvoiceInsController.GetInvoicesForReceiptByUserPermission(BOSApp.CurrentUsersInfo.ADUserID,
                                                                                                            ModuleName.InvoiceIn,
                                                                                                            ADDataViewPermissionType.Module);
            List<APInvoiceInsInfo> invoiceIns = new List<APInvoiceInsInfo>();
            APPurchaseOrdersController objPurchaseOrdersController = new APPurchaseOrdersController();
            foreach (APInvoiceInsInfo item in invoices)
            {
                bool isValid = true;
                if (!string.IsNullOrEmpty(item.APInvoiceInReference))
                {
                    string[] purchaseOrderNos = item.APInvoiceInReference.Split(',');
                    foreach (string purchaseOrderNo in purchaseOrderNos)
                    {
                        APPurchaseOrdersInfo objPOsInfo = (APPurchaseOrdersInfo)objPurchaseOrdersController.GetObjectByNo(purchaseOrderNo);
                        if (objPOsInfo != null)
                        {

                            if (objPOsInfo.APPurchaseOrderChannel != PurchaseOrderChannel.Import.ToString()
                                || objPOsInfo.APPurchaseOrderType == PurchaseOrderType.Service.ToString()
                                || objPOsInfo.APPurchaseOrderType == PurchaseOrderType.OutSourcingService.ToString())
                            {
                                isValid = false;
                                break;
                            }
                        }
                    }
                }
                if (isValid)
                {
                    invoiceIns.Add(item);
                }
            }

        stampp:
            guiFind<APInvoiceInsInfo> guiFind = new guiFind<APInvoiceInsInfo>(TableName.APInvoiceInsTableName, invoiceIns, this, true, true,
                new string[] { "APInvoiceInNo" });
            guiFind.ShowDialog();
            if (guiFind.DialogResult == DialogResult.OK)
            {
                List<APInvoiceInsInfo> results = guiFind.SelectedObjects.ToList();
                if (results.Count == 0)
                    return;
                if (results.Count > 1)
                {
                    MessageBox.Show(PurchaseReceiptLocalizedResources.ChooseMultiInvoiceMessage, CommonLocalizedResources.MessageBoxDefaultCaption,
                        MessageBoxButtons.OK, MessageBoxIcon.Error);
                    goto stampp;
                }
                else
                {
                    APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)guiFind.SelectedObjects[0];
                    if (objInvoiceInsInfo != null)
                    {
                        //Copy supplier info
                        receipt.FK_APSupplierID = objInvoiceInsInfo.FK_APSupplierID;
                        SetDefaultValuesFromSupplier();

                        //Generate entities from the purchase order
                        entity.GenerateEntityFromInvoice(objInvoiceInsInfo);
                        UpdateTotalCost();
                        DisplayLabelText(CurrentModuleEntity.MainObject);

                        entity.ReceiptItemsList.GridControl.RefreshDataSource();
                        LoadGridViewReceiptItemList();
                        if (entity.ReceiptItemsList.Count > 0)
                        {
                            entity.ReceiptItemsList.GridControl.InvalidateLookupEditColumns();
                            entity.ReceiptItemsList.GridViewFocusRow(0);
                            if (entity.MultiPackageReceiptComponentItemsList.GridView != null)
                                entity.MultiPackageReceiptComponentItemsList.GridView.RefreshData();
                        }
                        receipt.FK_ACAssObjectID = objInvoiceInsInfo.FK_ACAssObjectID;
                        receipt.ICAssObjectType = objInvoiceInsInfo.APAssObjectType;
                        receipt.ACAssObjectAccessKey = receipt.FK_ACAssObjectID + ";" + receipt.ICAssObjectType;
                        entity.UpdateMainObjectBindingSource();
                    }
                }
                ChangeDisplayAndDataItemListGridView();
            }
            else
            {
                ActionCancel();
                ICProductIDItemLookupEdit.Enabled = true;
            }
        }

        public override void ActionEdit()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            if ((entity.MainObject as ICReceiptsInfo).ICReceiptStatus == ReceiptStatus.Complete.ToString())
            {
                MessageBox.Show(PurchaseReceiptLocalizedResources.CanNotModifyMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                CurrentModuleEntity.SetPropertyChangeEventLock(false);
                return;
            }

            base.ActionEdit();
        }
        public override void ActionDelete()
        {
            base.ActionDelete();
        }
        public override int ActionSave()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            APPurchaseOrdersController objPurchaseOrdersController = new APPurchaseOrdersController();
            entity.ReceiptItemsList.EndCurrentEdit();
            bool isSave = CheckSerialNoInReceiptItemsList();
            if(!isSave)
            {
                return 0;
            }
            if (!CheckValidReceiptDate())
            {
                return 0;
            }    
            if (entity.ReceiptItemsList.Where(o => o.FK_APPurchaseOrderID > 0).Count() > 0)
            {
                APPurchaseOrdersInfo objPurchaseOrdersInfo = (APPurchaseOrdersInfo)objPurchaseOrdersController.GetObjectByID(entity.ReceiptItemsList.Where(o => o.FK_APPurchaseOrderID > 0).FirstOrDefault().FK_APPurchaseOrderID);
                if (objPurchaseOrdersInfo != null && objReceiptsInfo.ACAssObjectAccessKey != objPurchaseOrdersInfo.FK_ACObjectID + ";" + objPurchaseOrdersInfo.APObjectType)
                {
                    MessageBox.Show("Nhà cung cấp bạn chọn khác với nhà cung cấp của chứng từ mua", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return 0;
                }
            }    
            List<ICTransactionsInfo> invalidSerialNoList = objReceiptsInfo.ICReceiptID == 0 ? entity.ReceiptItemsList.GetInvalidSerialNo() : entity.ReceiptItemsList.GetInvalidSerialNoBySomeCriteria();
            if (invalidSerialNoList.Count() > 0)
            {
                MessageBox.Show(string.Format("Mã lô hàng của các sản phẩm sau đã tồn tại:\n- {0}",
                                                string.Join("\n- ", invalidSerialNoList.Select(o1 => string.Format("{0}: {1}", o1.ICProductNo, o1.ICTransactionReceiptSerialNo))
                                                                                     .ToArray())),
                   CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return 0;
            }

            
            ICProductsInfo objProductsInfo = new ICProductsInfo();

            //ChangePackNo();
            List<string> productError = new List<string>();
            foreach (ICReceiptItemsInfo objReceiptItemsInfo in entity.ReceiptItemsList)
            {
                if (objReceiptItemsInfo.FK_ICStockID == 0)
                {
                    MessageBox.Show(PurchaseReceiptLocalizedResources.DefineStoreForEachItemMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return 0;
                }
                /*Check SerialNo*/
                List<ICReceiptItemsInfo> listValidateItems = entity.ReceiptItemsList.Where(p => p.FK_ICProductID == objReceiptItemsInfo.FK_ICProductID
                                                                                   && p.ICReceiptItemProductSerialNo == objReceiptItemsInfo.ICReceiptItemProductSerialNo).ToList();
                if (listValidateItems.Count > 1)
                {
                    productError.Add(objReceiptItemsInfo.ICReceiptItemProductDesc);
                }
                //Đã kiểm tra ở dòng 702 GetInvalidSerialNo()
                //ICProductSeriesController objProductSeriesController = new ICProductSeriesController();
                //ICProductSeriesInfo objProductSeriesInfo = objProductSeriesController.GetSerieByProductIDAndSerieNo(objReceiptItemsInfo.FK_ICProductID, objReceiptItemsInfo.ICReceiptItemProductSerialNo);
                //if (objProductSeriesInfo != null)
                //{
                //    if (objReceiptItemsInfo.FK_ICProductSerieID != objProductSeriesInfo.ICProductSerieID)
                //    {
                //        MessageBox.Show(string.Format(PurchaseReceiptLocalizedResources.IsExistLotNoText, objReceiptItemsInfo.ICReceiptItemProductDesc)
                //                        , CommonLocalizedResources.MessageBoxDefaultCaption
                //                        , MessageBoxButtons.OK
                //                        , MessageBoxIcon.Exclamation);
                //        return 0;
                //    }
                //}
            }
            if (productError.Count > 0)
            {
                MessageBox.Show(string.Format("Mã lô/ Mã kiện (Mã đầu lóng) của sản phẩm trùng nhau: \n-{0}", string.Join("\n-", productError.Distinct().ToArray()))
                                 + Environment.NewLine + "Vui lòng kiểm tra lại!"
                                , CommonLocalizedResources.MessageBoxDefaultCaption
                                , MessageBoxButtons.OK
                                , MessageBoxIcon.Exclamation);
                return 0;
            }

            //Check đơn giá trường hợp tạo mới từ đơn mua hàng
            if (objReceiptsInfo.ICReceiptCreateFrom == "PurchaseOrder")
            {
                productError = new List<string>();
                APPurchaseOrderItemsController objPurchaseOrderItemsController = new APPurchaseOrderItemsController();
                List<APPurchaseOrderItemsInfo> purchaseOrderItemList = objPurchaseOrderItemsController.GetPurchaseOrderItemsByPurchaseOrderID(entity.ReceiptItemsList.FirstOrDefault().FK_APPurchaseOrderID);
                List<ICReceiptItemsInfo> listValidateItems = new List<ICReceiptItemsInfo>();
                foreach (ICReceiptItemsInfo objReceiptItemsInfo in entity.ReceiptItemsList)
                {
                    APPurchaseOrderItemsInfo objPurchaseOrderItemsInfo = purchaseOrderItemList.Where(p => p.APPurchaseOrderItemID == objReceiptItemsInfo.FK_APPurchaseOrderItemID).FirstOrDefault();
                    if (objPurchaseOrderItemsInfo != null)
                    {
                        if (objReceiptItemsInfo.ICReceiptItemProductUnitCost > objPurchaseOrderItemsInfo.APPurchaseOrderItemProductUnitCost)
                        {
                            listValidateItems.Add(objReceiptItemsInfo);
                            productError.Add(objReceiptItemsInfo.ICReceiptItemProductDesc);
                        }    
                    }
                }
                if (productError.Count > 0)
                {
                    MessageBox.Show(string.Format("Đơn giá của sản phẩm đang lớn hơn đơn giá ở Đơn mua hàng: \n-{0}", string.Join("\n-", productError.Distinct().ToArray()))
                                     + Environment.NewLine + "Vui lòng kiểm tra lại!"
                                    , CommonLocalizedResources.MessageBoxDefaultCaption
                                    , MessageBoxButtons.OK
                                    , MessageBoxIcon.Exclamation);
                    return 0;
                }
            }

            //foreach (ICReceiptComponentItemsInfo objReceiptComponentItemsInfo in entity.MultiProductReceiptComponentItemsList)
            //{
            //    if (objReceiptComponentItemsInfo.FK_ICStockID == 0)
            //    {
            //        MessageBox.Show(PurchaseReceiptLocalizedResources.DefineStoreForEachItemMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            //        return 0;
            //    }
            //}
            //foreach (ICReceiptComponentItemsInfo objReceiptComponentItemsInfo in entity.MultiPackageReceiptComponentItemsList)
            //{
            //    if (objReceiptComponentItemsInfo.FK_ICStockID == 0)
            //    {
            //        MessageBox.Show(PurchaseReceiptLocalizedResources.DefineStoreForEachItemMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            //        return 0;
            //    }
            //}
            //foreach (ICReceiptComponentItemsInfo objReceiptComponentItemsInfo in entity.MultiReceiptComponentItemsList)
            //{
            //    if (objReceiptComponentItemsInfo.FK_ICStockID == 0)
            //    {
            //        MessageBox.Show(PurchaseReceiptLocalizedResources.DefineStoreForEachItemMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            //        return 0;
            //    }
            //}
            //objReceiptsInfo.ICReceiptDesc = PurchaseReceiptLocalizedResources.PurchaseReceiptDefaultDesc;
            SetDefaultDesc();

            APInvoiceInsController objInvoiceInsController = new APInvoiceInsController();

            List<string> purListID = entity.ReceiptItemsList.Where(p => p.FK_APPurchaseOrderID > 0).Select(o => o.FK_APPurchaseOrderID.ToString()).Distinct().ToList();
            List<string> invoiceListID = entity.ReceiptItemsList.Where(p => p.FK_APInvoiceInID > 0).Select(o => o.FK_APInvoiceInID.ToString()).Distinct().ToList();
            if (purListID != null && purListID.Count > 0)
            {
                List<APPurchaseOrdersInfo> purchaseList = objPurchaseOrdersController.GetPurchaseOrderByListID(string.Join(",", purListID.ToArray()));
                if (purchaseList != null && purchaseList.Count > 0)
                {
                    //objReceiptsInfo.ICReceiptReference = string.Join(",", purchaseList.Select(o => o.APPurchaseOrderNo).ToArray());
                    objReceiptsInfo.ICReceiptDesc += "; " + string.Join("; ", purchaseList.Select(o => o.APPurchaseOrderNo).ToArray());
                }
            }
            if (invoiceListID != null && invoiceListID.Count > 0)
            {
                List<APInvoiceInsInfo> invoiceList = objInvoiceInsController.GetInvoiceInByListID(string.Join(",", invoiceListID.ToArray()));
                if (invoiceList != null && invoiceList.Count > 0)
                {
                    //objReceiptsInfo.ICReceiptReference = string.Join(",", invoiceList.Select(o => o.APInvoiceInNo).ToArray());
                    objReceiptsInfo.ICReceiptDesc += "; " + string.Join("; ", invoiceList.Select(o => o.APInvoiceInNo).ToArray());
                }
            }


            OriginalReceiptItemList.Clear();
            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList.OriginalList)
            {
                OriginalReceiptItemList.Add((ICReceiptItemsInfo)item.Clone());
            }
            entity.MultiPackageReceiptComponentItemsList.EndCurrentEdit();
            entity.MultiProductReceiptComponentItemsList.EndCurrentEdit();
            entity.MultiReceiptComponentItemsList.EndCurrentEdit();

            UpdateTotalCost();

            bool isWoodType = BOSApp.IsWoodTypeDocument(objReceiptsInfo.ICReceiptReceiptType, entity.ReceiptItemsList.FirstOrDefault());

            

            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
            {
                objProductsInfo = BOSApp.GetProductFromCurrentProductList(item.FK_ICProductID);
                if (objProductsInfo != null)
                {
                    item.ICReceiptItemProductType = objProductsInfo.ICProductType;
                    if (item.ICReceiptItemProductType.Equals(ProductType.Equipment.ToString()))
                    {
                        if (item.ICReceiptItemProductSerialNo.Equals(string.Empty))
                            GeneralSeriesForIngredientPackaging(item);
                    }
                    else if (isWoodType)
                    {
                        if (item.ICReceiptItemLotNo.Equals(String.Empty))
                            GeneralLotNosForWoodType(item);
                        if (item.ICReceiptItemProductSerialNo.Equals(String.Empty))
                        {
                            MessageBox.Show(PurchaseReceiptLocalizedResources.ItemWoodSerieNoIsRequiredMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return 0;
                        }
                    }
                    else if (item.ICReceiptItemProductSerialNo.Equals(string.Empty))
                        GeneralSeriesForIngredientPackaging(item);
                }
            }

            if (objReceiptsInfo.ICReceiptReceiptType == ReceiptReceiptType.MechanicOutSourcing.ToString()
                        || objReceiptsInfo.ICReceiptReceiptType == ReceiptReceiptType.OutSourcing.ToString())
            {
                //Kiểm tra tổng tỷ trọng
                decimal remainProportion = (new ICReceiptsController()).CheckReceiptProportionByPurchaseOrderID(objReceiptsInfo.FK_APPurchaseOrderID, objReceiptsInfo.ICReceiptID);
                if (remainProportion < objReceiptsInfo.ICReceiptProportion)
                {
                    MessageBox.Show(string.Format(PurchaseReceiptLocalizedResources.ErrorProportion, remainProportion.ToString("n2"))
                                    , CommonLocalizedResources.MessageBoxDefaultCaption
                                    , MessageBoxButtons.OK
                                    , MessageBoxIcon.Error);
                    return 0;
                }
            }
            else
            {
                objReceiptsInfo.ICReceiptProportion = 0;
            }

            if (!CheckAvailablePurchaseDocumentDate())
                return 0;

            int receiptID = base.ActionSave();
            if (receiptID > 0)
            {
                entity.InvalidateItemComponents();
                ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
                if (isWoodType)
                {
                    try
                    {
                        objReceiptItemsController.UpdatePackageNumering(objReceiptsInfo.ICReceiptID);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Bạn đang tạo kiện không đúng công thức quy định, vui lòng kiểm tra lại!"
                                    , CommonLocalizedResources.MessageBoxDefaultCaption
                                    , MessageBoxButtons.OK
                                    , MessageBoxIcon.Error);
                    }
                }
            }
            return receiptID;
        }

        /// <summary>
        /// Set the default description for the purchase receipt
        /// </summary>
        private void SetDefaultDesc()
        {
            ICReceiptsInfo receipt = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            if (receipt.ICReceiptDesc.Contains(PurchaseReceiptLocalizedResources.PurchaseReceiptDefaultDesc))
            {
                //APSuppliersController objSuppliersController = new APSuppliersController();
                //APSuppliersInfo supplier = (APSuppliersInfo)objSuppliersController.GetObjectByID(receipt.FK_APSupplierID);
                ACObjectsController objectController = new ACObjectsController();
                ACObjectsInfo supplier = objectController.GetObjectByIDAndType(receipt.FK_ACAssObjectID, receipt.ICAssObjectType);
                if (supplier != null)
                {
                    receipt.ICReceiptDesc = receipt.ICReceiptDesc.Replace("{0}", supplier.ACObjectName);
                    receipt.ICReceiptDesc = receipt.ICReceiptDesc.Replace("{1}", receipt.ICReceiptPackNo);
                }
            }
        }

        public override bool ActionComplete()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            bool isValid = ApprovedReceipt();
            if (isValid == false)
                return false;

            List<ICTransactionsInfo> invalidSerialNoList = entity.ReceiptItemsList.GetInvalidSerialNoBySomeCriteria();
            if (invalidSerialNoList.Count() > 0)
            {
                MessageBox.Show(string.Format("Mã lô hàng của các sản phẩm sau đã tồn tại:\n- {0}",
                                                string.Join("\n- ", invalidSerialNoList.Select(o1 => string.Format("{0}: {1}", o1.ICProductNo, o1.ICTransactionReceiptSerialNo))
                                                                                     .ToArray())),
                   CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }

           

            ICProductSeriesController objProductSeriesController = new ICProductSeriesController();
            objProductSeriesController.GenerateProductSerieByReceiptID(objReceiptsInfo.ICReceiptID);

            //Update the reference invoice
            if (!string.IsNullOrEmpty(objReceiptsInfo.ICReceiptReference))
            {
                if (objReceiptsInfo.ICReceiptCreateFrom == "InvoiceIn")
                    entity.UpdateReferenceInvoice();
                else
                    entity.UpdateReferencePurchaseOrder();
            }
            ////                Move out transaction                    /////

            bool isCompleted = base.ActionComplete();
            if (isCompleted)
            {
                ////                Move out transaction                    /////
                entity.UpdateModuleObjectsBindingSource();
                entity.UpdatePurchaseOrdersStatus();
                ////                Move out transaction                    /////
                List<APPOPaymentTimeInvoiceInDetailsInfo> pOPaymentTimeInvoiceInDetailList = entity.GeneratePOPaymentTimeInvoiceInDetailList();
                if (pOPaymentTimeInvoiceInDetailList.Count > 0)
                {
                    BOSList<APPOPaymentTimeInvoiceInDetailsInfo> pOPaymentTimeInvoiceInDetails = new BOSList<APPOPaymentTimeInvoiceInDetailsInfo>(TableName.APPOPaymentTimeInvoiceInDetailsTableName);
                    pOPaymentTimeInvoiceInDetails.Invalidate(pOPaymentTimeInvoiceInDetailList);
                    pOPaymentTimeInvoiceInDetails.SaveItemObjects();
                }
            }
            return isCompleted;
        }
        public override bool ActionCancelComplete()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            if (objReceiptsInfo.ICReceiptID > 0)
            {

                APInvoiceInsController objAPInvoiceInsController = new APInvoiceInsController();
                List<APInvoiceInsInfo> listInvoiceIn = objAPInvoiceInsController.GetInvoiceInByReceipt(objReceiptsInfo.ICReceiptID);
                if (listInvoiceIn.Count() > 0)
                {
                    MessageBox.Show(PurchaseReceiptLocalizedResources.CancelCompleteExistsInvoiceIn
                        + Environment.NewLine
                        + string.Join(",", listInvoiceIn.Select(o => o.APInvoiceInNo).Distinct().ToArray())
                        , CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return false;
                }
                ICShipmentsController objICShipmentsController = new ICShipmentsController();
                List<ICShipmentsInfo> listShipment = objICShipmentsController.GetShipmentReferenceByReceipt(objReceiptsInfo.ICReceiptID);
                if (listShipment.Count() > 0)
                {
                    MessageBox.Show(PurchaseReceiptLocalizedResources.CancelCompleteExistsShipment
                       + Environment.NewLine
                        + string.Join(",", listShipment.Select(o => o.ICShipmentNo).Distinct().ToArray())
                        , CommonLocalizedResources.MessageBoxDefaultCaption
                       , MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return false;
                }
                APFeePaymentReceiptsController objAPFeePaymentReceiptssController = new APFeePaymentReceiptsController();
                List<APFeePaymentReceiptsInfo> listPayment = objAPFeePaymentReceiptssController.GetFeePaymentByReceipt(objReceiptsInfo.ICReceiptID);
                if (listPayment.Count() > 0)
                {
                    MessageBox.Show(PurchaseReceiptLocalizedResources.CancelCompleteExistsFee
                        + Environment.NewLine
                        + string.Join(",", listPayment.Select(o => o.FeePaymentNo).Distinct().ToArray())
                        , CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return false;
                }
            }

            if (!base.ActionCancelComplete()) return false;

            GLHelper.UnPostedTransactions(this.Name, objReceiptsInfo.ICReceiptID, ModulePostingType.Accounting, ModulePostingType.Stock
                    , ModulePostingType.Purchase, ModulePostingType.Allocation, ModulePostingType.InvoiceInTrans);

            //Update the reference invoice
            UpdateReceiptQtyPurchaseOrderAndInvoiceIn();
            InvalidateToolbar();
            return true;
        }
        public void UpdateReceiptQtyPurchaseOrderAndInvoiceIn()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            if (objReceiptsInfo.ICReceiptCreateFrom == "InvoiceIn" || objReceiptsInfo.ICReceiptCreateFrom == "PurchaseOrder")
            {
                (new ICReceiptsController()).UpdateReceiptQtyPurchaseOrderAndInvoiceIn(objReceiptsInfo.ICReceiptID, BOSApp.CurrentUsersInfo.ADUserName);
                List<string> OrderListID = entity.ReceiptItemsList.Where(p => p.FK_APPurchaseOrderID > 0).Select(p => p.FK_APPurchaseOrderID.ToString()).Distinct().ToList();
                if (OrderListID != null && OrderListID.Count > 0)
                    (new APPurchaseOrdersController()).UpdatePurchaseOrderStatus(string.Join(",", OrderListID.ToArray())
                                                                         , BOSApp.CurrentUsersInfo.ADUserName);
            }
        }
        public string GetProductSerieNo(ICReceiptPackageItemsInfo objReceiptPackageItemsInfo)
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICProductSeriesController objProductSeriesController = new ICProductSeriesController();
            ICReceiptItemsInfo objReceiptItemsInfo = entity.ReceiptItemsList.Where(o => o.FK_ICProductID == objReceiptPackageItemsInfo.FK_ICProductID).FirstOrDefault();
            string productSerieNo = objReceiptItemsInfo == null ? string.Empty : objReceiptItemsInfo.ICReceiptItemProductSerialNo;
            bool hasProductSerieID = false;
            entity.ReceiptPackageItemDetailShowList.ForEach(o =>
            {
                if (hasProductSerieID)
                    return;

                if (o.FK_ICReceiptPackageItemID == objReceiptPackageItemsInfo.ICReceiptPackageItemID)
                {
                    productSerieNo = productSerieNo;
                    hasProductSerieID = true;
                }
            });
            return productSerieNo;
        }

        public override void Invalidate(int iObjectID)
        {
            base.Invalidate(iObjectID);

            ICReceiptsInfo objOriginalReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            OriginalReceiptObject = (ICReceiptsInfo)objOriginalReceiptsInfo.Clone();

            //ICProductIDItemLookupEdit
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICProductIDItemLookupEdit.Enabled = true;
            PurchaseOrderItemButton.Enabled = entity.ReceiptItemsList.Count(o1 => o1.FK_APPurchaseOrderItemID > 0) > 0;
            if (LoadQualitySerialControl != null)
                LoadQualitySerialControl.Visible = false;
            LoadGridViewReceiptItemList();
            bool isWoodType = BOSApp.IsWoodTypeDocument(objOriginalReceiptsInfo.ICReceiptReceiptType, entity.ReceiptItemsList.FirstOrDefault());
            ChangeDisplayColumnByWoodType(entity.ReceiptItemsList.GridControl, isWoodType);

            objOriginalReceiptsInfo.ICReceiptSOName = string.Join(", ", entity.ReceiptItemsList.Where(o => !string.IsNullOrWhiteSpace(o.ICReceiptItemSOName)).Select(o => o.ICReceiptItemSOName).Distinct().ToArray());
            ChangeDisplayColumnByCreateFrom(entity.ReceiptItemsList.GridControl);
            entity.UpdateMainObjectBindingSource();
        }

        public override void InvalidateToolbar()
        {
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            ParentScreen.SetEnableOfToolbarButton(PurchaseReceiptConst.CreateSerialNumber, false);
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, false);
            if (objReceiptsInfo.ICReceiptID > 0)
            {
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, true);
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, true);
                ParentScreen.SetEnableOfToolbarButton(PurchaseReceiptConst.ValidatePurchaseReceipt, false);
                ParentScreen.SetEnableOfToolbarButton(PurchaseReceiptModule.ToolbarButtonGeneratePackage, true);
                ParentScreen.SetEnableOfToolbarButton(PurchaseReceiptConst.CancelValidatePurchaseReceipt, false);
                ParentScreen.SetEnableOfToolbarButton("CancelComplete", false);
                if (objReceiptsInfo.ICReceiptStatus == ReceiptStatus.New.ToString())
                {
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, true);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, false);
                    ParentScreen.SetEnableOfToolbarButton(PurchaseReceiptConst.ValidatePurchaseReceipt, true);
                    ParentScreen.SetEnableOfToolbarButton(PurchaseReceiptModule.ToolbarButtonGeneratePackage, true);
                    ParentScreen.SetEnableOfToolbarButton(PurchaseReceiptConst.CancelValidatePurchaseReceipt, false);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, true);
                }
                if (objReceiptsInfo.ICReceiptStatus == ReceiptStatus.Confirmed.ToString())
                {
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, true);
                    ParentScreen.SetEnableOfToolbarButton(PurchaseReceiptConst.ValidatePurchaseReceipt, false);
                    ParentScreen.SetEnableOfToolbarButton(PurchaseReceiptModule.ToolbarButtonGeneratePackage, true);
                    ParentScreen.SetEnableOfToolbarButton(PurchaseReceiptConst.CancelValidatePurchaseReceipt, true);

                }
                if (objReceiptsInfo.ICReceiptStatus == ReceiptStatus.Complete.ToString())
                {
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, false);
                    ParentScreen.SetEnableOfToolbarButton(PurchaseReceiptModule.ToolbarButtonGeneratePackage, false);
                    ParentScreen.SetEnableOfToolbarButton(PurchaseReceiptConst.CancelValidatePurchaseReceipt, false);
                    ParentScreen.SetEnableOfToolbarButton(PurchaseReceiptConst.CreateSerialNumber, true);
                    ParentScreen.SetEnableOfToolbarButton("CancelComplete", true);
                }

                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonTransfer, false);
                if (objReceiptsInfo.ICReceiptStatus == ReceiptStatus.New.ToString() && !objReceiptsInfo.IsTransferred)
                {
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonTransfer, true);
                }
            }
            if(!Toolbar.IsNullOrNoneAction())
            {
                ParentScreen.SetEnableOfToolbarButton(PurchaseReceiptConst.ValidatePurchaseReceipt, false);
            }    
            base.InvalidateToolbar();
        }

        public void PrintBarCode()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            guiPrintPackageBarcode gui = new guiPrintPackageBarcode();
            gui.Module = this;
            if (gui.ShowDialog() == DialogResult.OK)
            {
                RPLable report = new RPLable();
                //report.LoadLayout(BOSCommon.Constants.Report.DevLablePath);
                InventoryDataSet.Report_GetLableDataTable lableDataTable = new InventoryDataSet.Report_GetLableDataTable();
                ICPackageProductsController objPackageProductsController = new ICPackageProductsController();
                foreach (ICPackagesInfo objPackagesInfo in entity.PackageList)
                {
                    if (objPackagesInfo.Selected)
                    {
                        String outputBarCode = BarcodePrinter.GenCodeEAN13(objPackagesInfo.ICPackageNo);
                        DataRow row = lableDataTable.NewRow();
                        row[lableDataTable.ICPackageNoColumn.ColumnName] = outputBarCode;
                        row[lableDataTable.ICReceiptPackNoColumn.ColumnName] = objPackagesInfo.ICPackagePackNo;
                        row[lableDataTable.ICPackageCountColumn.ColumnName] = objPackagesInfo.ICPackageCount;
                        row[lableDataTable.ICPackageOrderColumn.ColumnName] = String.Format("{0}/{1}", objPackagesInfo.ICPackageOrder, objPackagesInfo.ICPackageCount);
                        row[lableDataTable.ICPackageProductCountColumn.ColumnName] = objPackagesInfo.ICPackageProductCount;
                        row[lableDataTable.ICProductSupplierNoColumn.ColumnName] = objPackagesInfo.ICProductSupplierNo;
                        row[lableDataTable.ICProductDescColumn.ColumnName] = objPackagesInfo.ICProductDesc;
                        row[lableDataTable.ICPackageSupplierNoColumn.ColumnName] = objPackagesInfo.ICPackageSupplierNo;
                        lableDataTable.Rows.Add(row);

                        //Update package 
                        if (!objPackagesInfo.IsPrinted)
                        {
                            objPackagesInfo.IsPrinted = true;
                            entity.UpdatePackage(objPackagesInfo);
                        }
                    }
                }
                report.DataSource = lableDataTable;
                report.DataMember = BOSCommon.Constants.Report.DevLableName;
                guiReportPreview reviewer = new guiReportPreview(report, BOSCommon.Constants.Report.DevLablePath, false);
                reviewer.Show();
            }
        }

        /// <summary>
        /// Print receipt report
        /// </summary>
        public void PrintReceiptReport()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                PrintReceipt(Toolbar.CurrentObjectID);
            }
        }
        public void PrintPurchaseReceiptAccount()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                RP_PurchaseReceiptAccount_New report = new RP_PurchaseReceiptAccount_New();
                InitPurchaseReceiptAccountReport(report);
                guiReportPreview reviewer = new guiReportPreview(report);
                reviewer.Show();
            }
        }

        public void PrintA5()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            int receiptID = objReceiptsInfo.ICReceiptID;
            RP_PurchaseReceiptForAccounting report = new RP_PurchaseReceiptForAccounting();
            InitPurchaseReceiptForAccounting(report, receiptID);
            guiReportPreview viewer = new guiReportPreview(report);
            viewer.Show();
        }
        public void PrintA4()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            int receiptID = objReceiptsInfo.ICReceiptID;
            RP_PurchaseReceiptForAccountingA4 report = new RP_PurchaseReceiptForAccountingA4();
            InitPurchaseReceiptForAccounting(report, receiptID);
            guiReportPreview viewer = new guiReportPreview(report);
            viewer.Show();
        }

        public void PrintReceiptLumber()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                PrintReceiptLumber(Toolbar.CurrentObjectID);
            }
        }
        public static void PrintReceiptLumber(int receiptID)
        {
            RP_WoodPurchaseReceiptForLumber report = new RP_WoodPurchaseReceiptForLumber();
            InitReceiptReport(report, receiptID);
            guiReportPreview viewer = new guiReportPreview(report);
            viewer.Show();
        }

        public void InitPurchaseReceiptAccountReport(XtraReport report)
        {
            BRBranchsController objBranchsController = new BRBranchsController();
            BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            if (objBranchsInfo != null)
            {
                XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchAddressLine3"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactAddressLine3;
                }
            }


            ICReceiptsController objReceiptsController = new ICReceiptsController();
            report.DataSource = objReceiptsController.GetReceiptsByReceiptID(Toolbar.CurrentObjectID);
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)objReceiptsController.GetObjectByID(Toolbar.CurrentObjectID);
            foreach (ICReceiptsInfo item in objReceiptsController.GetReceiptsByReceiptID(Toolbar.CurrentObjectID))
            {
                objReceiptsInfo.ACDocumentEntryAmount += item.ACDocumentEntryAmount;
            }
            if (objReceiptsInfo.ACDocumentEntryAmount != 0)
            {
                XRLabel amountWord = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblAmountWord"];
                if (amountWord != null)
                    amountWord.Text = ConvertAmountToWord.ReadAmount(objReceiptsInfo.ACDocumentEntryAmount.ToString(), objReceiptsInfo.FK_GECurrencyID);
            }

            XRLabel CompanyBankName = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xrLabel3"];
            if (CompanyBankName != null)
                CompanyBankName.Text = BOSApp.CurrentCompanyInfo.CSCompanyDesc.ToString();
        }

        public static void PrintReceipt(int receiptID)
        {
            RP_PurchaseReceipt report = new RP_PurchaseReceipt();
            InitReceiptReport(report, receiptID);
            guiReportPreview viewer = new guiReportPreview(report);
            viewer.Show();
        }

        private static void InitReceiptReport(XtraReport report, int receiptID)
        {

            BRBranchsController objBranchsController = new BRBranchsController();
            BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            if (objBranchsInfo != null)
            {
                XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchAddressLine3"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactAddressLine3;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchPhone"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactPhone;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchFax"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactFax;
                }
            }

            ICReceiptsController objReceiptsController = new ICReceiptsController();
            ICReceiptsInfo receipt = (ICReceiptsInfo)objReceiptsController.GetObjectByID(receiptID);
            #region Hạch Toán
            List<ACDocumentEntrysInfo> entries = new List<ACDocumentEntrysInfo>();
            if (receipt != null)
            {
                ACDocumentsController objDocumentsController = new ACDocumentsController();
                ACDocumentEntrysController objDocumentEntrysController = new ACDocumentEntrysController();
                ACDocumentsInfo document = null;
                if (receipt.ICReceiptTypeCombo == ReceiptType.PurchaseReceipt.ToString())
                {
                    document = objDocumentsController.GetDocumentByTypeAndNo(AccDocumentType.NhapKhoMuaHangHoaDon.ToString(), receipt.ICReceiptNo);
                    if (document == null)
                    {
                        document = objDocumentsController.GetDocumentByTypeAndNo(AccDocumentType.NhapKhoMuaHang.ToString(), receipt.ICReceiptNo);
                    }
                }
                if (document != null)
                {
                    entries = objDocumentEntrysController.GetDocumentEntryByDocumentID(document.ACDocumentID);
                }
            }

            ADReportsController objReportsController = new ADReportsController();
            List<ICReceiptItemsInfo> receiptList = objReportsController.GetListReceiptItemByReceiptID(receiptID);

            XRLabel accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblDebitAccountNo"];
            if (accLabel != null)
            {
                string debitAccountNo = string.Empty;

                foreach (ICReceiptItemsInfo item in receiptList)
                {
                    if (!debitAccountNo.Contains(item.DebitAccountNo))
                    {
                        debitAccountNo += string.Format(" {0},", item.DebitAccountNo);
                    }
                }
                if (!string.IsNullOrEmpty(debitAccountNo))
                {
                    debitAccountNo = debitAccountNo.Substring(0, debitAccountNo.Length - 1);
                }
                accLabel.Text = debitAccountNo;
            }

            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblCreditAccountNo"];
            if (accLabel != null)
            {
                string creditAccountNo = string.Empty;
                foreach (ICReceiptItemsInfo item in receiptList)
                {
                    if (item.CreditAccountNo != null)
                    {
                        if (!creditAccountNo.Contains(item.CreditAccountNo))
                        {
                            creditAccountNo += string.Format(" {0},", item.CreditAccountNo);
                        }
                    }
                }
                if (!string.IsNullOrEmpty(creditAccountNo))
                {
                    creditAccountNo = creditAccountNo.Substring(0, creditAccountNo.Length - 1);
                }
                accLabel.Text = creditAccountNo;
            }

            #endregion
            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xrLabel28"];
            if (accLabel != null)
            {
                accLabel.Text = receipt.ICReceiptDate.ToString("dd/MM/yyyy");
            }
            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xrLabel29"];
            if (accLabel != null)
            {
                accLabel.Text = receipt.ICReceiptDate.ToString("dd/MM/yyyy");
            }

            report.DataSource = receiptList;
            //report.DataMember = BOSCommon.Constants.Report.DevReceiptItemReportName;
        }

        private static void InitPRForAccountingA4(XtraReport report, int receiptID)
        {
            ICReceiptsController objReceiptsController = new ICReceiptsController();
            ICReceiptsInfo receipt = (ICReceiptsInfo)objReceiptsController.GetObjectByID(receiptID);
            #region Hạch Toán
            List<ACDocumentEntrysInfo> entries = new List<ACDocumentEntrysInfo>();
            if (receipt != null)
            {
                ACDocumentsController objDocumentsController = new ACDocumentsController();
                ACDocumentEntrysController objDocumentEntrysController = new ACDocumentEntrysController();
                ACDocumentsInfo document = null;
                if (receipt.ICReceiptTypeCombo == ReceiptType.PurchaseReceipt.ToString())
                {
                    document = objDocumentsController.GetDocumentByTypeAndNo(AccDocumentType.NhapKhoMuaHangHoaDon.ToString(), receipt.ICReceiptNo);
                    if (document == null)
                    {
                        document = objDocumentsController.GetDocumentByTypeAndNo(AccDocumentType.NhapKhoMuaHang.ToString(), receipt.ICReceiptNo);
                    }
                }
                if (document != null)
                {
                    entries = objDocumentEntrysController.GetDocumentEntryByDocumentID(document.ACDocumentID);
                }
            }

            ADReportsController objReportsController = new ADReportsController();
            List<ICReceiptItemsInfo> receiptList = objReportsController.GetListReceiptItemForReportAccountingByReceiptID(receiptID);

            XRLabel accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblDebitAccountNo"];
            if (accLabel != null)
            {
                string debitAccountNo = string.Empty;

                foreach (ICReceiptItemsInfo item in receiptList)
                {
                    if (!debitAccountNo.Contains(item.DebitAccountNo))
                    {
                        debitAccountNo += string.Format(" {0},", item.DebitAccountNo);
                    }
                }
                if (!string.IsNullOrEmpty(debitAccountNo))
                {
                    debitAccountNo = debitAccountNo.Substring(0, debitAccountNo.Length - 1);
                }
                accLabel.Text = debitAccountNo;
            }

            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblCreditAccountNo"];
            if (accLabel != null)
            {
                string creditAccountNo = string.Empty;
                foreach (ICReceiptItemsInfo item in receiptList)
                {
                    if (item.CreditAccountNo != null)
                    {
                        if (!creditAccountNo.Contains(item.CreditAccountNo))
                        {
                            creditAccountNo += string.Format(" {0},", item.CreditAccountNo);
                        }
                    }
                }
                if (!string.IsNullOrEmpty(creditAccountNo))
                {
                    creditAccountNo = creditAccountNo.Substring(0, creditAccountNo.Length - 1);
                }
                accLabel.Text = creditAccountNo;
            }

            #endregion
            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xrLabel28"];
            if (accLabel != null)
            {
                accLabel.Text = receipt.ICReceiptDate.ToString("dd/MM/yyyy");
            }
            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xrLabel29"];
            if (accLabel != null)
            {
                accLabel.Text = receipt.ICReceiptDate.ToString("dd/MM/yyyy");
            }

            report.DataSource = receiptList;
            //report.DataMember = BOSCommon.Constants.Report.DevReceiptItemReportName;
        }
        /// <summary>
        /// Search packages for printing
        /// </summary>
        /// <param name="productSupplierNo">Supplier no of products contained in packages</param>
        public void SearchPackagesForPrinting(string productSupplierNo)
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            ICPackagesController objPackagesController = new ICPackagesController();
            List<ICPackagesInfo> packageList = objPackagesController.GetPackageList(objReceiptsInfo.FK_APSupplierID, objReceiptsInfo.ICReceiptPackNo, objReceiptsInfo.ICReceiptDate);
            ICPackageProductsController objPackagesProductsController = new ICPackageProductsController();
            productSupplierNo = productSupplierNo.ToLower();
            for (int i = 0; i < packageList.Count; i++)
            {
                ICPackagesInfo objPackagesInfo = packageList[i];
                if (!string.IsNullOrEmpty(productSupplierNo) && !objPackagesInfo.ICProductSupplierNo.ToLower().Contains(productSupplierNo))
                {
                    packageList.RemoveAt(i);
                    i--;
                }
            }
            entity.PackageList.Invalidate(packageList);
        }

        public void SearchInventoryItemPackagesForPrinting(int stockID, int serieID, int productID)
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICInventoryItemPackagesController controller = new ICInventoryItemPackagesController();
            List<ICInventoryItemPackagesInfo> packageList = controller.GetInventoryItemPackageList(stockID, serieID, productID);
            entity.InventoryItemPackageList.Invalidate(packageList);
        }

        /// <summary>
        /// Select or discard all packages for printing
        /// </summary>
        /// <param name="isChecked">A value indicates selecting or discarding</param>
        public void SelectAllPrintedPackages(bool isChecked)
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            entity.InventoryItemPackageList.ForEach(o => o.Selected = isChecked);
            entity.InventoryItemPackageList.GridControl.RefreshDataSource();
        }


        /// <summary>
        /// Generate package from receipt items
        /// </summary>
        public void GeneratePackageFromReceipt()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                DialogResult dlgResult = MessageBox.Show(PurchaseReceiptLocalizedResources.ConfirmDeleteExistingPackagesMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (dlgResult == DialogResult.Yes)
                {
                    using (TransactionScope scope = new TransactionScope(TransactionScopeOption.RequiresNew))
                    {
                        try
                        {
                            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
                            if (entity.GeneratePackageFromReceipt())
                            {
                                scope.Complete();
                                MessageBox.Show(PurchaseReceiptLocalizedResources.GenarateSuccessMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                        }
                        catch (Exception)
                        {
                            scope.Dispose();
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Choose receipt type
        /// </summary>
        public void ChooseReceiptType()
        {
            if (Convert.ToInt32(ReceiptTypeRadioGroupControl.EditValue) == 1)
            {
                ProductPanelControl.Visible = true;
                PackagePanelControl.Visible = false;
            }
            else
            {
                ProductPanelControl.Visible = false;
                PackagePanelControl.Visible = true;
            }
        }

        /// <summary>
        /// Tranfer receipt item from list to list
        /// </summary>
        /// <param name="receiptComponentItemType">Type of receipt component item</param>
        /// <param name="fromReceiptComponentItemList">From receipt component item list</param>
        /// <param name="toReceiptComponentItemList">To receipt component item list</param>
        public void TranferReceiptItemFromListToList(string receiptComponentItemType, BOSList<ICReceiptComponentItemsInfo> fromReceiptComponentItemList, BOSList<ICReceiptComponentItemsInfo> toReceiptComponentItemList)
        {
            GridView gridView = (GridView)fromReceiptComponentItemList.GridControl.MainView;
            int[] selectedRowHandles = gridView.GetSelectedRows();
            if (selectedRowHandles.Length > 0)
            {
                PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
                foreach (int rowHandle in selectedRowHandles)
                {
                    ICReceiptComponentItemsInfo objReceiptComponentItemsInfo = (ICReceiptComponentItemsInfo)gridView.GetRow(rowHandle);
                    if (objReceiptComponentItemsInfo != null)
                    {
                        //Add to the target list
                        objReceiptComponentItemsInfo.ICReceiptComponentItemType = receiptComponentItemType;
                        toReceiptComponentItemList.Add(objReceiptComponentItemsInfo);

                        //Remove from the source list 
                        int index = gridView.GetDataSourceRowIndex(rowHandle);
                        if (index < fromReceiptComponentItemList.OriginalList.Count)
                        {
                            fromReceiptComponentItemList.OriginalList.RemoveAt(index);
                        }
                        fromReceiptComponentItemList.RemoveAt(index);

                        //Update receitp item type for receipt item list
                        //int receiptItemIndex = entity.ReceiptItemsList.PosOf("Id", item.Id);
                        //entity.ReceiptItemsList[receiptItemIndex].ICReceiptItemType = receiptItemType;
                    }
                }
                fromReceiptComponentItemList.GridControl.RefreshDataSource();
                toReceiptComponentItemList.GridControl.RefreshDataSource();
            }
        }

        /// <summary>
        /// Show form and identify package supplier no
        /// </summary>
        /// <param name="objReceiptComponentItemsInfo">Given receipt component item</param>
        /// <param name="receiptComponentItemsList">Receipt component item list</param>
        public void IdentifyPackageSupplierNo(ICReceiptComponentItemsInfo objReceiptComponentItemsInfo, BOSList<ICReceiptComponentItemsInfo> receiptComponentItemsList)
        {
            guiIdentifyPackageSupplier guiIdentifyPackageSupplier = new guiIdentifyPackageSupplier(objReceiptComponentItemsInfo);
            guiIdentifyPackageSupplier.Module = this;
            if (guiIdentifyPackageSupplier.ShowDialog() == DialogResult.OK)
            {
                BackupReceiptItemPackageList(objReceiptComponentItemsInfo);

                PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
                ICReceiptComponentItemsInfo receiptComponentItemsObject = receiptComponentItemsList.Where(i => i.ICReceiptComponentItemID == objReceiptComponentItemsInfo.ICReceiptComponentItemID).FirstOrDefault();
                if (receiptComponentItemsObject != null)
                {
                    receiptComponentItemsObject.ReceiptItemPackageList = (BOSList<ICReceiptItemPackagesInfo>)objReceiptComponentItemsInfo.ReceiptItemPackageList.Clone();
                }
            }
        }

        /// <summary>
        /// Delete receipt item package from list
        /// </summary>
        /// <param name="gridControl">Receipt item package grid control</param>
        public void DeleteReceiptItemPackage(ICReceiptItemPackagesGridControl gridControl)
        {
            BOSList<ICReceiptItemPackagesInfo> receiptItemPackageList = (BOSList<ICReceiptItemPackagesInfo>)((BindingSource)gridControl
                                                                                              .DataSource).DataSource;
            receiptItemPackageList.GridControl = gridControl;
            receiptItemPackageList.RemoveSelectedRowObjectFromList();
        }

        /// <summary>
        /// Backup the receipt item package list of an order item and store to its original one
        /// </summary>
        /// <param name="objReceiptComponentItemsInfo">Given receipt component item</param>
        public void BackupReceiptItemPackageList(ICReceiptComponentItemsInfo objReceiptComponentItemsInfo)
        {
            if (objReceiptComponentItemsInfo.ReceiptItemPackageList != null)
            {
                objReceiptComponentItemsInfo.ReceiptItemPackageList.BackupList.Clear();
                foreach (ICReceiptItemPackagesInfo objReceiptItemPackagesInfo in objReceiptComponentItemsInfo.ReceiptItemPackageList)
                {
                    objReceiptComponentItemsInfo.ReceiptItemPackageList.BackupList.Add((ICReceiptItemPackagesInfo)objReceiptItemPackagesInfo.Clone());
                }
            }
        }

        /// <summary>
        /// Rollback the receipt item package list of an order item by its original one to discard all changes
        /// </summary>
        /// <param name="objReceiptComponentItemsInfo">Given receipt component item</param>
        public void RollbackReceiptItemPackageList(ICReceiptComponentItemsInfo objReceiptComponentItemsInfo)
        {
            if (objReceiptComponentItemsInfo.ReceiptItemPackageList != null)
            {
                objReceiptComponentItemsInfo.ReceiptItemPackageList.Clear();
                foreach (ICReceiptItemPackagesInfo objReceiptItemPackagesInfo in objReceiptComponentItemsInfo.ReceiptItemPackageList.BackupList)
                {
                    objReceiptComponentItemsInfo.ReceiptItemPackageList.Add((ICReceiptItemPackagesInfo)objReceiptItemPackagesInfo.Clone());
                }
            }
        }

        /// <summary>
        /// Check sum receipt item package qty equal with receipt item product package qty or not
        /// </summary>
        /// <param name="objReceiptComponentItemsInfo">Given receip component item</param>
        /// <returns>false is not equal</returns>
        public bool CheckSumReceiptItemPackageQty(ICReceiptComponentItemsInfo objReceiptComponentItemsInfo)
        {
            if (objReceiptComponentItemsInfo != null)
            {
                decimal sum = 0;
                foreach (ICReceiptItemPackagesInfo objReceiptItemPackagesInfo in objReceiptComponentItemsInfo.ReceiptItemPackageList)
                {
                    sum += objReceiptItemPackagesInfo.ICReceiptItemPackageQty;
                }
                if (sum != objReceiptComponentItemsInfo.ICReceiptComponentItemPackageQty)
                {
                    MessageBox.Show(PurchaseReceiptLocalizedResources.InvalidReceiptItemPackageQtyTotalMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return false;
                }
            }
            return true;
        }

        #region History
        /// <summary>
        /// Switch to the transferred branch and view changes to the receipt at the branch
        /// </summary>
        public void ShowReceiptHistory()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
                if (objReceiptsInfo.FK_BRTransferredBranchID > 0)
                {
                    //NUThao [DELETE] [08/04/2014] [DB centre] [SwitchConnection issue], START
                    //try
                    //{
                    //    BRBranchsController objBranchsController = new BRBranchsController();
                    //    BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(objReceiptsInfo.FK_BRTransferredBranchID);
                    //    if (objBranchsInfo != null)
                    //    {
                    //        BOSApp.SwitchConnection(objBranchsInfo.BRBranchID);
                    //        if (BOSApp.TestCurrentConnection())
                    //        {
                    //            ICReceiptsController objReceiptsController = new ICReceiptsController();
                    //            ICReceiptsInfo branchReceipt = (ICReceiptsInfo)objReceiptsController.GetObjectByNo(objReceiptsInfo.ICReceiptNo);
                    //            if (branchReceipt != null)
                    //            {
                    //                if (branchReceipt.ICReceiptStatus == ReceiptStatus.Complete.ToString())
                    //                {
                    //                    List<GEHistoryDetailsInfo> historyDetailList = GetHistoryDetailList(objReceiptsInfo.ICReceiptNo);
                    //                    entity.HistoryDetailList.Invalidate(historyDetailList);
                    //                    InvalidateReceiptItemLogList(objReceiptsInfo.ICReceiptNo);
                    //                    guiReceiptHistory guiHistory = new guiReceiptHistory();
                    //                    guiHistory.Module = this;
                    //                    guiHistory.Show();
                    //                }
                    //                else
                    //                {
                    //                    MessageBox.Show(PurchaseReceiptLocalizedResources.BranchReceiptHasNotBeenCompletedMessage,
                    //                                    CommonLocalizedResources.MessageBoxDefaultCaption,
                    //                                    MessageBoxButtons.OK,
                    //                                    MessageBoxIcon.Information);
                    //                }
                    //            }                                
                    //        }
                    //        else
                    //        {
                    //            MessageBox.Show(string.Format(DataExchangeLocalizedResources.CannotConnectToBranch, objBranchsInfo.BRBranchName), "#Messaeg#", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    //        }
                    //    }
                    //}
                    //catch (Exception)
                    //{

                    //}
                    //finally
                    //{
                    //    BOSApp.RollbackLocalConnection();
                    //}
                    //NUThao [DELETE] [08/04/2014] [DB centre] [SwitchConnection issue], END


                    //NUThao [ADD] [08/04/2014] [DB centre] [SwitchConnection issue], START
                    ICReceiptsController objReceiptsController = new ICReceiptsController();
                    ICReceiptsInfo branchReceipt = (ICReceiptsInfo)objReceiptsController.GetObjectByNo(objReceiptsInfo.ICReceiptNo);
                    if (branchReceipt != null)
                    {
                        if (branchReceipt.ICReceiptStatus == ReceiptStatus.Complete.ToString())
                        {
                            List<GEHistoryDetailsInfo> historyDetailList = GetHistoryDetailList(objReceiptsInfo.ICReceiptNo);
                            entity.HistoryDetailList.Invalidate(historyDetailList);
                            InvalidateReceiptItemLogList(objReceiptsInfo.ICReceiptNo);
                            guiReceiptHistory guiHistory = new guiReceiptHistory();
                            guiHistory.Module = this;
                            guiHistory.Show();
                        }
                        else
                        {
                            MessageBox.Show(PurchaseReceiptLocalizedResources.BranchReceiptHasNotBeenCompletedMessage,
                                            CommonLocalizedResources.MessageBoxDefaultCaption,
                                            MessageBoxButtons.OK,
                                            MessageBoxIcon.Information);
                        }
                    }
                    //NUThao [ADD] [08/04/2014] [DB centre] [SwitchConnection issue], END
                }
            }
        }

        /// <summary>
        /// Invalidate the receipt item log list
        /// </summary>
        /// <param name="receiptNo">Receipt no</param>
        public void InvalidateReceiptItemLogList(string receiptNo)
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsController objReceiptsController = new ICReceiptsController();
            int receiptID = objReceiptsController.GetObjectIDByNo(receiptNo);
            if (receiptID > 0)
            {
                List<ICReceiptItemLogsInfo> receiptItemLogList = GetReceiptItemLogList(receiptID);
                entity.ReceiptItemLogList.Invalidate(receiptItemLogList);
            }
        }
        /// <summary>
        /// Get history detail list of a receipt
        /// </summary>
        /// <param name="receiptNo">Receipt no</param>
        /// <returns>History detail list</returns>
        public List<GEHistoryDetailsInfo> GetHistoryDetailList(string receiptNo)
        {
            GEHistoryDetailsController objHistoryDetailsController = new GEHistoryDetailsController();
            List<GEHistoryDetailsInfo> historyDetailOriginalList = objHistoryDetailsController.GetHistoryDetailList(ModuleName.PurchaseReceipt, receiptNo);
            List<GEHistoryDetailsInfo> historyDetailList = new List<GEHistoryDetailsInfo>();
            if (historyDetailOriginalList != null)
            {
                foreach (GEHistoryDetailsInfo objHistoryDetailsInfo in historyDetailOriginalList)
                {
                    if (!string.IsNullOrEmpty(objHistoryDetailsInfo.AAColumnAliasCaption))
                    {
                        objHistoryDetailsInfo.OldValueDisplayedText = BOSApp.GetDisplayedTextByValue(TableName.ICReceiptsTableName, objHistoryDetailsInfo.GEHistoryDetailColumnName, objHistoryDetailsInfo.GEHistoryDetailOldValue);
                        objHistoryDetailsInfo.NewValueDisplayedText = BOSApp.GetDisplayedTextByValue(TableName.ICReceiptsTableName, objHistoryDetailsInfo.GEHistoryDetailColumnName, objHistoryDetailsInfo.GEHistoryDetailNewValue);
                        historyDetailList.Add(objHistoryDetailsInfo);
                    }
                }
            }
            return historyDetailList;
        }

        /// <summary>
        /// Get receipt item log list of a receipt
        /// </summary>
        /// <param name="receiptID">Receipt id</param>
        /// <returns>Receipt item log list</returns>
        public List<ICReceiptItemLogsInfo> GetReceiptItemLogList(int receiptID)
        {
            ICReceiptItemLogsController objReceiptItemLogsController = new ICReceiptItemLogsController();
            List<ICReceiptItemLogsInfo> receiptItemLogList = new List<ICReceiptItemLogsInfo>();
            List<ICReceiptItemLogsInfo> lst = objReceiptItemLogsController.GetReceiptItemLogByReceiptID(receiptID);
            foreach (ICReceiptItemLogsInfo objReceiptItemLogsInfo in lst)
            {
                if (!string.IsNullOrEmpty(objReceiptItemLogsInfo.AAColumnAliasCaption))
                {
                    objReceiptItemLogsInfo.ICReceiptItemLogOldValue = BOSApp.GetDisplayedTextByValue(TableName.ICReceiptItemsTableName, objReceiptItemLogsInfo.ICReceiptItemLogColumnName, objReceiptItemLogsInfo.ICReceiptItemLogOldValue);
                    objReceiptItemLogsInfo.ICReceiptItemLogNewValue = BOSApp.GetDisplayedTextByValue(TableName.ICReceiptItemsTableName, objReceiptItemLogsInfo.ICReceiptItemLogColumnName, objReceiptItemLogsInfo.ICReceiptItemLogNewValue);
                    receiptItemLogList.Add(objReceiptItemLogsInfo);
                }
            }
            return receiptItemLogList;
        }

        #endregion

        /// <summary>
        /// Called when user wants to change stock
        /// </summary>
        /// <param name="stockID">Selected stock id</param>
        public void ChangeStock(int stockID)
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.FK_ICStockID = stockID;
            if (!Toolbar.IsNullOrNoneAction())
            {
                if (entity.ReceiptItemsList.Count > 0)
                {
                    if (MessageBox.Show(PurchaseReceiptLocalizedResources.ConfirmChangeItemStockMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                        {
                            item.FK_ICStockID = stockID;
                            item.FK_ACAccountID = GetAccountByStock(stockID, item.FK_ACAccountID);
                        }
                        entity.ReceiptItemsList.GridControl.RefreshDataSource();
                    }
                }
            }

        }
        public void ChangStockItem(ICReceiptItemsInfo item)
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            item.FK_ACAccountID = GetAccountByStock(item.FK_ICStockID, item.FK_ACAccountID);
            entity.ReceiptItemsList.GridControl.RefreshDataSource();
        }

        #region Data Exchange
        public override void ActionTransfer(string defaultBranchConfigKey)
        {
            base.ActionTransfer(ConfigValueKey.DataExchangeDefaultBranchReceipt);
        }

        protected override bool TransferData(BRBranchsInfo objBranchsInfo)
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsController objReceiptsController = new ICReceiptsController();
            //ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            bool isCompleted = false;

            //NUThao [DELETE] [08/04/2014] [DB centre] [SwitchConnection issue], START
            //try
            //{
            //    BOSApp.SwitchConnection(objBranchsInfo.BRBranchID);
            //    if (BOSApp.TestCurrentConnection())
            //    {
            //        if (CheckForValidReceipt())
            //        {
            //            ICReceiptsInfo branchReceipt = (ICReceiptsInfo)objReceiptsController.GetObjectByNo(objReceiptsInfo.ICReceiptNo);
            //            int branchReceiptID;
            //            if (branchReceipt != null)
            //            {
            //                branchReceiptID = branchReceipt.ICReceiptID;
            //                branchReceipt = (ICReceiptsInfo)objReceiptsInfo.Clone();
            //                branchReceipt.ICReceiptID = branchReceiptID;
            //                branchReceipt.FK_BRTransferredBranchID = 0;
            //                branchReceipt.IsTransferred = true;
            //                branchReceipt.ICReceiptTransferredDate = DateTime.MaxValue;
            //                branchReceiptID = objReceiptsController.UpdateObject(branchReceipt);
            //            }
            //            else
            //            {
            //                branchReceipt = (ICReceiptsInfo)objReceiptsInfo.Clone();
            //                branchReceipt.FK_BRTransferredBranchID = 0;
            //                branchReceipt.IsTransferred = true;
            //                branchReceipt.ICReceiptTransferredDate = DateTime.MaxValue;
            //                branchReceiptID = objReceiptsController.CreateObject(branchReceipt);
            //            }

            //            if (branchReceiptID > 0)
            //            {
            //                //Transfer receipt items
            //                TransferReceiptItemsToBranch(entity.ReceiptItemsList, branchReceiptID);
            //            }

            //            isCompleted = true;
            //            MessageBox.Show(DataExchangeLocalizedResources.TransferSuccessMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            //        }                    
            //    }
            //    else
            //    {
            //        MessageBox.Show(string.Format(DataExchangeLocalizedResources.CannotConnectToBranch, objBranchsInfo.BRBranchName), CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            //    }
            //}
            //catch (Exception)
            //{
            //    MessageBox.Show(DataExchangeLocalizedResources.TransferErrorMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            //}
            //finally
            //{
            //    BOSApp.RollbackLocalConnection();

            //    if (isCompleted)
            //    {
            //        objReceiptsInfo.FK_BRTransferredBranchID = objBranchsInfo.BRBranchID;
            //        objReceiptsInfo.IsTransferred = true;
            //        objReceiptsInfo.ICReceiptTransferredDate = BOSApp.GetCurrentServerDate().AddSeconds(App.UpdateSeconds);
            //        objReceiptsController.UpdateObject(objReceiptsInfo);                    
            //    }
            //}
            //NUThao [DELETE] [08/04/2014] [DB centre] [SwitchConnection issue], END

            //NUThao [ADD] [08/04/2014] [DB centre] [SwitchConnection issue], START
            //if (CheckForValidReceipt())
            //{
            //    ICReceiptsInfo branchReceipt = (ICReceiptsInfo)objReceiptsController.GetObjectByNo(objReceiptsInfo.ICReceiptNo);
            //    int branchReceiptID;
            //    if (branchReceipt != null)
            //    {
            //        branchReceiptID = branchReceipt.ICReceiptID;
            //        branchReceipt = (ICReceiptsInfo)objReceiptsInfo.Clone();
            //        branchReceipt.ICReceiptID = branchReceiptID;
            //        branchReceipt.FK_BRTransferredBranchID = 0;
            //        branchReceipt.IsTransferred = true;
            //        branchReceipt.ICReceiptTransferredDate = DateTime.MaxValue;
            //        branchReceiptID = objReceiptsController.UpdateObject(branchReceipt);
            //    }
            //    else
            //    {
            //        branchReceipt = (ICReceiptsInfo)objReceiptsInfo.Clone();
            //        branchReceipt.FK_BRTransferredBranchID = 0;
            //        branchReceipt.IsTransferred = true;
            //        branchReceipt.ICReceiptTransferredDate = DateTime.MaxValue;
            //        branchReceiptID = objReceiptsController.CreateObject(branchReceipt);
            //    }

            //    if (branchReceiptID > 0)
            //    {
            //        //Transfer receipt items
            //        TransferReceiptItemsToBranch(entity.ReceiptItemsList, branchReceiptID);
            //    }

            //    isCompleted = true;
            //    MessageBox.Show(DataExchangeLocalizedResources.TransferSuccessMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            //}

            //if (isCompleted)
            //{
            //    objReceiptsInfo.FK_BRTransferredBranchID = objBranchsInfo.BRBranchID;
            //    objReceiptsInfo.IsTransferred = true;
            //    objReceiptsInfo.ICReceiptTransferredDate = BOSApp.GetCurrentServerDate().AddSeconds(App.UpdateSeconds);
            //    objReceiptsController.UpdateObject(objReceiptsInfo);
            //}

            objReceiptsInfo.FK_BRTransferredBranchID = objBranchsInfo.BRBranchID;
            objReceiptsInfo.IsTransferred = true;
            objReceiptsInfo.ICReceiptTransferredDate = BOSApp.GetCurrentServerDate().AddSeconds(App.UpdateSeconds);
            objReceiptsController.UpdateObject(objReceiptsInfo);
            isCompleted = true;
            //NUThao [ADD] [08/04/2014] [DB centre] [SwitchConnection issue], END
            return isCompleted;
        }

        /// <summary>
        /// Check for valid receipt before transferring to a branch
        /// </summary>
        /// <returns>True if the receipt is valid and ready for transferring, otherwise false</returns>
        private bool CheckForValidReceipt()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICProductsController objProductsController = new ICProductsController();
            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
            {
                if (item.FK_ICProductID > 0 && !objProductsController.IsExist(item.FK_ICProductID))
                {
                    MessageBox.Show(string.Format(PurchaseReceiptLocalizedResources.TransferredProductNotExistMessage, item.ICReceiptItemProductDesc),
                                    CommonLocalizedResources.MessageBoxDefaultCaption,
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Exclamation);
                    return false;
                }
            }

            return true;
        }

        /// <summary>
        /// Transfer the receipt items to a branch
        /// </summary>
        /// <param name="receiptItems">Receipt item list</param>
        /// <param name="branchReceiptID">Receipt id at the target branch</param>
        private void TransferReceiptItemsToBranch(BOSList<ICReceiptItemsInfo> receiptItems, int branchReceiptID)
        {
            ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();

            objReceiptItemsController.DeleteByForeignColumn("FK_ICReceiptID", branchReceiptID);

            foreach (ICReceiptItemsInfo objReceiptItemsInfo in receiptItems)
            {
                ICReceiptItemsInfo branchReceiptItem = (ICReceiptItemsInfo)objReceiptItemsInfo.Clone();
                branchReceiptItem.FK_ICReceiptID = branchReceiptID;
                SynProductSerie(branchReceiptItem);
                objReceiptItemsController.CreateObject(branchReceiptItem);
            }
        }
        #endregion

        #region Accounting
        protected override void UpdateDocumentEntries()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            ICProductsController productController = new ICProductsController();
            ACDocTypeEntrysController objDocTypeEntrysController = new ACDocTypeEntrysController();

            //string accDocumentType = CreateFromInvoice == true ? AccDocumentType.NhapKhoMuaHangHoaDon.ToString() :
            //                                                            AccDocumentType.NhapKhoMuaHang.ToString();

            string accDocumentType = string.Empty;
            if (objReceiptsInfo.ICReceiptCreateFrom == "InvoiceIn")
            {
                accDocumentType = AccDocumentType.NhapKhoMuaHangHoaDon.ToString();
            }
            else
            {
                accDocumentType = AccDocumentType.NhapKhoMuaHang.ToString();
            }

            ACDocTypeEntrysInfo defaultEntry = objDocTypeEntrysController.GetEntryByDocumentTypeAndEntryType(
                                                                        accDocumentType,
                                                                        accDocumentType);
            Dictionary<ACDocumentEntrysInfo, List<ICReceiptItemsInfo>> documentEntryAccounts = new Dictionary<ACDocumentEntrysInfo, List<ICReceiptItemsInfo>>();
            List<int> productAccountID = new List<int>();

            ICStocksController objStockController = new ICStocksController();
            ICStocksInfo objStockInfo = (ICStocksInfo)objStockController.GetObjectByID(objReceiptsInfo.FK_ICStockID);
            //Get acountID from stock
            int accountStockID = 0;
            if (objStockInfo != null)
                accountStockID = objStockInfo.FK_ACAccountID;
            ACDocumentEntrysInfo objDocumentEntrysInfo = new ACDocumentEntrysInfo();

            if (accountStockID != 0)
            {
                entity.DocumentEntryList.Clear();
                objDocumentEntrysInfo = AccountHelper.AddItemToDocumentEntryList(defaultEntry, entity.DocumentEntryList);
                entity.DocumentEntryList.ForEach(o =>
                {
                    o.FK_ACDebitAccountID = accountStockID;
                });
                documentEntryAccounts.Add(objDocumentEntrysInfo, entity.ReceiptItemsList.ToList());
                productAccountID.Add(accountStockID);
            }
            else
            {
                if (entity.ReceiptItemsList.Count > 0)
                {
                    List<int> accountIDs = entity.ReceiptItemsList.Select(o => o.FK_ACAccountID).Distinct().ToList();
                    entity.DocumentEntryList.Clear();
                    accountIDs.ForEach(o =>
                    {
                        objDocumentEntrysInfo = AccountHelper.AddItemToDocumentEntryList(defaultEntry, entity.DocumentEntryList);
                        if (o != 0)
                        {
                            objDocumentEntrysInfo.FK_ACDebitAccountID = o;
                            productAccountID.Add(o);
                        }
                        else
                            productAccountID.Add(objDocumentEntrysInfo.FK_ACDebitAccountID);
                        documentEntryAccounts.Add(objDocumentEntrysInfo, entity.ReceiptItemsList.Where(x => x.FK_ACAccountID == o).ToList());
                    });
                }
            }

            //update document entry amount
            if (documentEntryAccounts.Count != 0)
            {
                ACDocumentEntrysInfo item = null;
                foreach (ACDocumentEntrysInfo entry in documentEntryAccounts.Keys)
                {
                    entry.ACDocumentEntryAmount = documentEntryAccounts[entry].Sum(i => i.ICReceiptItemInventoryCost * i.ICReceiptItemProductQty);
                    entry.ACDocumentEntryExchangeAmount = entry.ACDocumentEntryAmount * objReceiptsInfo.ICReceiptExchangeRate;
                    BOSApp.RoundByCurrency(entry, "ACDocumentEntryExchangeAmount", BOSApp.CurrentCompanyInfo.FK_GECurrencyID);
                    BOSApp.RoundByCurrency(entry, "ACDocumentEntryAmount", objReceiptsInfo.FK_GECurrencyID);
                    item = entry;
                }


                ACDocumentsInfo objDocumentsInfo = entity.DocumentList.FirstOrDefault(d => d.ACDocumentTypeName == accDocumentType);
                if (objDocumentsInfo == null)
                {
                    objDocumentsInfo = new ACDocumentsInfo();
                    objDocumentsInfo.FK_ACDocumentTypeID = item.FK_ACDocumentTypeID;
                    objDocumentsInfo.ACDocumentTypeName = item.ACDocumentTypeName;
                    entity.DocumentList.Add(objDocumentsInfo);
                }
            }

            //remove the redundance document entries 
            List<ACDocumentEntrysInfo> removedItems = entity.DocumentEntryList.Where(item => item.ACEntryTypeName == AccEntryType.NhapKhoMuaHang.ToString()
                                                                              && !productAccountID.Any(accountID => accountID == item.FK_ACDebitAccountID)).ToList();
            if (removedItems != null)
            {
                foreach (ACDocumentEntrysInfo item in removedItems)
                    entity.DocumentEntryList.Remove(item);
            }

            //update shipping fee
            ACDocumentEntrysInfo shippingFee = entity.DocumentEntryList.FirstOrDefault(e => e.ACEntryTypeName == AccEntryType.ChiPhiMuaHang.ToString());
            if (shippingFee != null)
            {
                shippingFee.ACDocumentEntryAmount = objReceiptsInfo.ICReceiptShippingFees + objReceiptsInfo.ICReceiptShippingExtraFees;
                shippingFee.ACDocumentEntryExchangeAmount = shippingFee.ACDocumentEntryAmount * objReceiptsInfo.ICReceiptExchangeRate;
                BOSApp.RoundByCurrency(shippingFee, objReceiptsInfo.FK_GECurrencyID);
            }

            //update tax amount
            ACDocumentEntrysInfo shippingTax = entity.DocumentEntryList.FirstOrDefault(e => e.ACEntryTypeName == AccEntryType.ThueGTGTDuocKhauTru.ToString());
            if (shippingTax != null)
            {
                shippingTax.ACDocumentEntryAmount = entity.ReceiptItemsList.Sum(i => i.ICReceiptItemTaxAmount) + objReceiptsInfo.ICReceiptTaxAmount;
                shippingTax.ACDocumentEntryExchangeAmount = shippingTax.ACDocumentEntryAmount * objReceiptsInfo.ICReceiptExchangeRate;
            }

            entity.DocumentEntryList.GridControl.RefreshDataSource();
        }
        #endregion
        public void ChangeQTyFromReceiptItemsList(decimal receiptItemProductQty)
        {
            guiConfigSerialNo objguiConfigSerialNo = new guiConfigSerialNo();
            objguiConfigSerialNo.Module = this;
            objguiConfigSerialNo.RowNumer = (int)receiptItemProductQty;
            if (objguiConfigSerialNo.ShowDialog() == DialogResult.OK)
            {
                decimal everage = receiptItemProductQty / (objguiConfigSerialNo.RowNumer > 0 ? objguiConfigSerialNo.RowNumer : 1);
                decimal totalQty = 0;
                PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
                ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)entity.ReceiptItemsList[entity.ReceiptItemsList.CurrentIndex];
                objReceiptItemsInfo.ICReceiptItemProductQty = everage;
                objReceiptItemsInfo.ICReceiptItemProductSerialNo = objReceiptsInfo.ICReceiptPrefix + string.Format("{0}", objReceiptsInfo.ICReceiptSerialNoStart);
                objReceiptItemsInfo.ICReceiptItemLotNo = objReceiptsInfo.ICReceiptPrefix + string.Format("{0}", objReceiptsInfo.ICReceiptSerialNoStart);
                entity.SetProductCostByProductUnitCost(objReceiptItemsInfo);
                ICReceiptItemsInfo newICReceiptItemsInfo = null;
                ICReceiptItemsInfo objReceiptItemsInfoClone = new ICReceiptItemsInfo();
                BOSUtil.CopyObject(objReceiptItemsInfo, objReceiptItemsInfoClone);
                
                for (int i = 1; i < objguiConfigSerialNo.RowNumer; i++)
                {
                    newICReceiptItemsInfo = new ICReceiptItemsInfo();
                    BOSUtil.CopyObject(objReceiptItemsInfoClone, newICReceiptItemsInfo);
                    totalQty += objReceiptItemsInfo.ICReceiptItemProductQty;
                    if (i + 1 == objguiConfigSerialNo.RowNumer && totalQty < receiptItemProductQty)
                        newICReceiptItemsInfo.ICReceiptItemProductQty = receiptItemProductQty - totalQty;
                    newICReceiptItemsInfo.FK_ICProductSerieID = 0;
                    newICReceiptItemsInfo.ICReceiptItemProductSerialNo = objReceiptsInfo.ICReceiptPrefix + string.Format("{0}", objReceiptsInfo.ICReceiptSerialNoStart + i);
                    newICReceiptItemsInfo.ICReceiptItemLotNo = objReceiptsInfo.ICReceiptPrefix + string.Format("{0}", objReceiptsInfo.ICReceiptSerialNoStart + i);
                    entity.ReceiptItemsList.Insert(entity.ReceiptItemsList.CurrentIndex + i, newICReceiptItemsInfo);
                }
                objReceiptsInfo.ICReceiptPrefix = string.Empty;
                objReceiptsInfo.ICReceiptSerialNoStart = 0;
            }
        }

        public void ChangePackNo()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;

            if (!Toolbar.IsNullOrNoneAction())
            {
                if (entity.ReceiptItemsList.Count > 0)
                {
                    if (MessageBox.Show(PurchaseReceiptLocalizedResources.ConfirmChangeItemLotNoMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        bool isWoodType = BOSApp.IsWoodTypeDocument(objReceiptsInfo.ICReceiptReceiptType, entity.ReceiptItemsList.FirstOrDefault());
                        foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                        {
                            if (isWoodType)
                                item.ICReceiptItemLotNo = objReceiptsInfo.ICReceiptPackNo;
                            else
                                item.ICReceiptItemProductSerialNo = objReceiptsInfo.ICReceiptPackNo;
                            //GeneralSeriesForIngredientPackaging(item);
                        }
                        entity.ReceiptItemsList.GridControl.RefreshDataSource();
                    }
                }
                if (LoadQualitySerialControl != null)
                    LoadQualitySerialControl.Visible = true;
            }
        }

        public string GetdumpSeriesNoInListCurrent(int productId, string desc)
        {
            string packno = String.Empty;
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            ICReceiptItemsInfo itemdump = entity.ReceiptItemsList.Where(x => x.FK_ICProductID == productId && x.ICReceiptItemProductDesc == desc).First();
            if (itemdump != null)
                packno = itemdump.ICReceiptItemProductSerialNo;
            return packno;
        }
        public string GetdumpSeriesNoInListCurrentForEquipment(int productId, int Model, int ModelDetail, ICReceiptItemsInfo item)
        {
            string packno = String.Empty;
            string Key = Model + "-" + ModelDetail;
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            ICReceiptItemsInfo itemdump = entity.ReceiptItemsList.Where(x => x.FK_ICProductID == productId && (x.FK_ICModelID + "-" + x.FK_ICModelDetailID).Equals(Key)).First();
            if (itemdump != null && itemdump != item)
                packno = itemdump.ICReceiptItemProductSerialNo;
            return packno;
        }
        public int GetSTTInListCurrent(List<ICReceiptItemsInfo> ListItem, int productID, string desc)
        {

            int max = 0;
            int temp = 0;
            List<ICReceiptItemsInfo> List = ListItem.Where(x => x.FK_ICProductID == productID).ToList();
            foreach (ICReceiptItemsInfo item in List)
            {
                string[] line = item.ICReceiptItemProductSerialNo.Split('.');
                if (line.Length > 1)
                    temp = Int32.Parse(line[1]);
                else
                    temp = 0;
                if (temp > max)
                    max = temp;
            }
            return max;
        }
        public void GeneralSeriesForIngredientPackaging(ICReceiptItemsInfo item)
        {
            int STT = 0;
            string PackNo = string.Empty;
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            ICProductsInfo objProductsInfo = BOSApp.GetProductFromCurrentProductList(item.FK_ICProductID);
            bool isSeriNo = (objProductsInfo.ICPriceCalculationMethodMethod == PriceCalculationMethod.Specific.ToString() && !item.ICReceiptItemIsAverageCalculation);

            item.ICReceiptItemProductSerialNo = isSeriNo ? objReceiptsInfo.ICReceiptPackNo : string.Empty;

            entity.ReceiptItemsList.GridControl.RefreshDataSource();
        }
        public void GeneralLotNosForWoodType(ICReceiptItemsInfo item)
        {
            int STT = 0;
            string PackNo = string.Empty;
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;

            ICProductsInfo objProductsInfo = BOSApp.GetProductFromCurrentProductList(item.FK_ICProductID);
            bool isSeriNo = (objProductsInfo.ICPriceCalculationMethodMethod == PriceCalculationMethod.Specific.ToString() && !item.ICReceiptItemIsAverageCalculation);

            item.ICReceiptItemLotNo = isSeriNo ? objReceiptsInfo.ICReceiptPackNo : string.Empty;

            entity.ReceiptItemsList.GridControl.RefreshDataSource();
        }
        public void ClearSerialNo(ICReceiptItemsInfo item)
        {
            item.ICReceiptItemProductSerialNo = string.Empty;
            GeneralSeriesForIngredientPackaging(item);
        }

        public void ValidatePurchaseReceipt()
        {
            if (Toolbar.IsNullOrNoneAction())
            {
                PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
                bool isValid = ApprovedReceipt();
                if (isValid)
                {
                    ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
                    //[NKVung]  [Check Product Qty Before Validate] [START]
                    APPurchaseOrderItemsController objPurchaseOrderItemsController = new APPurchaseOrderItemsController();
                    APInvoiceInItemsController objInvoiceInItemsController = new APInvoiceInItemsController();
                    ICProductsInfo objProductsInfo = new ICProductsInfo();
                    ICProductsController objProductsController = new ICProductsController();
                    ICReceiptItemsInfo validateItem = new ICReceiptItemsInfo();
                    bool isAllowValidate = true;
                    foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                    {
                        decimal qty = 0;
                        objProductsInfo = BOSApp.GetProductFromCurrentProductList(item.FK_ICProductID);
                        if (item.FK_APInvoiceInItemID > 0)
                        {
                            APInvoiceInItemsInfo objInvoiceInItemsInfo = (APInvoiceInItemsInfo)objInvoiceInItemsController.GetObjectByID(item.FK_APInvoiceInItemID);
                            if (
                                        objProductsInfo.ICProductType == ProductType.IngredientPaint.ToString() ||
                                        objProductsInfo.ICProductType == ProductType.Roundwood.ToString() ||
                                        objProductsInfo.ICProductType == ProductType.Reuse.ToString() ||
                                        objProductsInfo.ICProductType == ProductType.Lumber.ToString() ||
                                        objProductsInfo.ICProductType == ProductType.ArtificialBoard.ToString() ||
                                        objProductsInfo.ICProductType == ProductType.Verneer.ToString() ||
                                        objProductsInfo.ICProductType == ProductType.ArtificialBoard.ToString())
                            {
                                qty = Math.Round(objInvoiceInItemsInfo.APInvoiceInItemProductQty * objInvoiceInItemsInfo.APInvoiceInItemProductFactor, 5, MidpointRounding.AwayFromZero);
                            }
                            else
                            {
                                qty = Math.Round(objInvoiceInItemsInfo.APInvoiceInItemProductQty * objInvoiceInItemsInfo.APInvoiceInItemProductFactor, 2, MidpointRounding.AwayFromZero);
                            }

                            if (item.ICReceiptItemProductQty * item.ICReceiptItemProductFactor > qty)
                            {
                                MessageBox.Show(PurchaseReceiptLocalizedResources.ReceiptFromInvoiceInErrorMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                                isAllowValidate = false;
                                base.ActionCancel();
                                break;
                            }
                        }
                    }

                    if (isAllowValidate)
                    {
                        objReceiptsInfo.ICReceiptStatus = ReceiptStatus.Confirmed.ToString();
                        objReceiptsInfo.ICReceiptValidateDate = DateTime.Now;
                        entity.UpdateMainObject();

                        base.ActionCancel();
                        InvalidateToolbar();
                    }
                    //[NKVung]  [Check Product Qty Before Validate] [END]
                }
            }
        }

        //[NKVung]  [Fillter Model Detail By Model] [START]
        public void ResetModelDetail(ICReceiptItemsInfo item)
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICModelDetailsController objModelDetailsController = new ICModelDetailsController();
            List<ICModelDetailsInfo> ModelDetailsList = new List<ICModelDetailsInfo>();
            if (item != null)
            {
                ModelDetailsList = objModelDetailsController.GetModelDetailByModelID(item.FK_ICModelID);
            }
            if (ModelDetailsList.Count > 0)
            {
                item.FK_ICModelDetailID = ModelDetailsList.FirstOrDefault().ICModelDetailID;
            }
            else
            {
                item.FK_ICModelDetailID = 0;
            }
            entity.ReceiptItemsList.GridControl.RefreshDataSource();
        }
        //[NKVung]  [Fillter Model Detail By Model] [END]
        public bool CheckSelectedProposalItems()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            List<APPurchaseOrderItemsInfo> purchaseOrderItemCheckedList = entity.PurchaseOrderItemList.Where(purchaseOrder => purchaseOrder.Selected).ToList();
            if (purchaseOrderItemCheckedList.Count == 0)
            {
                MessageBox.Show(PurchaseReceiptLocalizedResources.ChoosePurchaseOrderItemsMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return false;
            }
            return true;
        }
        //NKVung  [Show Gui Choose Purchase Order Item] [START]
        public bool ShowGuiChoosePurchaseOrderItems()
        {

            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.ICReceiptPackNo = entity.GetProductLotNo();
            APPurchaseOrdersController objPurchaseOrdersController = new APPurchaseOrdersController();
            APPurchaseOrderItemsController objPurchaseOrderItemsController = new APPurchaseOrderItemsController();
            List<APPurchaseOrderItemsInfo> purchaseOrderItemList = objPurchaseOrderItemsController.GetListPurchaseOrderItemsByPurchaseOrderID(entity.ReceiptItemsList.FirstOrDefault().FK_APPurchaseOrderID);

            string purchaseOrderNo = objPurchaseOrdersController.GetObjectNoByID(entity.ReceiptItemsList.FirstOrDefault().FK_APPurchaseOrderID);
            string objectName = entity.ReceiptItemsList.FirstOrDefault(o => !string.IsNullOrWhiteSpace(o.ACObjectName)).ACObjectName;

            purchaseOrderItemList.ForEach(o1 =>
            {
                o1.APPurchaseOrderNo = purchaseOrderNo;
                o1.ACObjectName = objectName;
                o1.ACAssObjectName = objectName;
            });

            entity.ReceiptItemsList.ForEach(o =>
            {
                purchaseOrderItemList = purchaseOrderItemList.Where(p => p.APPurchaseOrderItemID != o.FK_APPurchaseOrderItemID).ToList();
            });
            guiChoosePurchaseOrderItem guiChoosePurchaseOrderItem = new guiChoosePurchaseOrderItem(purchaseOrderItemList);
            guiChoosePurchaseOrderItem.Module = this;
            guiChoosePurchaseOrderItem.ShowDialog();
            if (guiChoosePurchaseOrderItem.DialogResult != DialogResult.OK || guiChoosePurchaseOrderItem.SelectedObjects.Count() == 0)
            {
                return false;
            }

            APPurchaseOrderItemsInfo objPurchaseOrderItemsInfo = (APPurchaseOrderItemsInfo)guiChoosePurchaseOrderItem.SelectedObjects[0];
            APPurchaseOrdersInfo objPurchaseOrdersInfo = (APPurchaseOrdersInfo)objPurchaseOrdersController.GetObjectByID(objPurchaseOrderItemsInfo.FK_APPurchaseOrderID);

            //entity.GenerateEntityFromPurchaseOrders(objPurchaseOrdersInfo, guiChoosePurchaseOrderItem.SelectedObjects);
            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            foreach (APPurchaseOrderItemsInfo obj in guiChoosePurchaseOrderItem.SelectedObjects)
            {
                decimal qty = 0;
                if (obj.APPurchaseOrderItemProductQty > 0)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = new ICReceiptItemsInfo();
                    BOSUtil.CopyObject(obj, objReceiptItemsInfo);
                    objProductsInfo = BOSApp.GetProductFromCurrentProductList(objReceiptItemsInfo.FK_ICProductID);
                    if (objProductsInfo != null)
                    {
                        objReceiptItemsInfo.FK_ACAccountID = objProductsInfo.FK_ACAccountID;
                        objReceiptItemsInfo.FK_ACAccountID = GetAccountByStock(objReceiptItemsInfo.FK_ICStockID, objReceiptItemsInfo.FK_ACAccountID);
                        qty = Math.Round((obj.APPurchaseOrderItemProductQty), 5, MidpointRounding.AwayFromZero);
                    }
                    objReceiptItemsInfo.FK_ICStockID = objReceiptsInfo.FK_ICStockID;
                    objReceiptItemsInfo.ICReceiptItemProductQty = qty;
                    objReceiptItemsInfo.FK_APPurchaseOrderItemID = obj.APPurchaseOrderItemID;
                    objReceiptItemsInfo.FK_ICModelID = obj.FK_ICModelID;
                    objReceiptItemsInfo.FK_ICModelDetailID = obj.FK_ICModelDetailID;
                    objReceiptItemsInfo.FK_MMBatchProductID = obj.FK_MMBatchProductID;
                    objReceiptItemsInfo.FK_ICMeasureUnitID = obj.FK_ICMeasureUnitID;
                    objReceiptItemsInfo.ICReceiptItemProductFactor = obj.APPurchaseOrderItemProductFactor;
                    entity.SetProductCostByProductUnitCost(objReceiptItemsInfo);
                    objReceiptItemsInfo.ICReceiptItemProductSupplierNo = obj.APPurchaseOrderItemProductSupplierNo;
                    objReceiptItemsInfo.ICReceiptItemWoodQty = obj.APPurchaseOrderItemWoodQty;
                    objReceiptItemsInfo.ICReceiptItemProductType = objProductsInfo.ICProductType;
                    if (objPurchaseOrdersInfo.APPurchaseOrderReceiptTypeCombo == ProductType.Lumber.ToString() || objPurchaseOrdersInfo.APPurchaseOrderReceiptTypeCombo == ProductType.Roundwood.ToString())
                    {
                        objReceiptItemsInfo.ICReceiptItemProductLength = obj.APPurchaseOrderItemProductLenght;

                        if (objPurchaseOrdersInfo.APPurchaseOrderReceiptTypeCombo == ProductType.Roundwood.ToString())
                        {
                            objReceiptItemsInfo.ICReceiptItemNotJetExceptBlock = Math.Round(obj.APPurchaseOrderItemProductQty, 4, MidpointRounding.AwayFromZero);
                            objReceiptItemsInfo.ICReceiptItemProductQty = Math.Round((objReceiptItemsInfo.ICReceiptItemNotJetExceptBlock - objReceiptItemsInfo.ICReceiptItemExceptedBlock), 4, MidpointRounding.AwayFromZero);
                            objReceiptsInfo.ICReceiptTotalQty = Math.Round((objReceiptsInfo.ICReceiptTotalQty + objReceiptItemsInfo.ICReceiptItemProductQty), 4, MidpointRounding.AwayFromZero);
                        }
                    }
                    objReceiptItemsInfo.ICReceiptItemInventoryCost = objReceiptItemsInfo.ICReceiptItemProductUnitCost;
                    entity.ReceiptItemsList.Add(objReceiptItemsInfo);
                }
            }

            CurrentModuleEntity.UpdateMainObjectBindingSource();
            DisplayLabelText(CurrentModuleEntity.MainObject);

            entity.ReceiptItemsList.GridControl.RefreshDataSource();

            UpdateTotalCost();
            return false;
        }

        private void InitPurchaseReceiptForAccounting(XtraReport report, int receiptID)
        {
            BRBranchsController objBranchsController = new BRBranchsController();
            BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            if (objBranchsInfo != null)
            {
                XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchAddressLine3"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactAddressLine3;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchPhone"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactPhone;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchFax"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactFax;
                }
            }


            ICReceiptsController objReceiptsController = new ICReceiptsController();
            ICReceiptsInfo receipt = (ICReceiptsInfo)objReceiptsController.GetObjectByID(receiptID);
            #region Hạch Toán
            List<ACDocumentEntrysInfo> entries = new List<ACDocumentEntrysInfo>();
            if (receipt != null)
            {
                ACDocumentsController objDocumentsController = new ACDocumentsController();
                ACDocumentEntrysController objDocumentEntrysController = new ACDocumentEntrysController();
                ACDocumentsInfo document = null;
                if (receipt.ICReceiptTypeCombo == ReceiptType.PurchaseReceipt.ToString())
                {
                    document = objDocumentsController.GetDocumentByTypeAndNo(AccDocumentType.NhapKhoMuaHangHoaDon.ToString(), receipt.ICReceiptNo);
                    if (document == null)
                    {
                        document = objDocumentsController.GetDocumentByTypeAndNo(AccDocumentType.NhapKhoMuaHang.ToString(), receipt.ICReceiptNo);
                    }
                }
                if (document != null)
                {
                    entries = objDocumentEntrysController.GetDocumentEntryByDocumentID(document.ACDocumentID);
                }
            }

            ADReportsController objReportsController = new ADReportsController();
            List<ICReceiptItemsInfo> receiptList = objReportsController.GetListReceiptItemByReceiptID(receiptID);

            XRLabel accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblDebitAccountNo"];
            if (accLabel != null)
            {
                string debitAccountNo = string.Empty;

                foreach (ICReceiptItemsInfo item in receiptList)
                {
                    if (!debitAccountNo.Contains(item.DebitAccountNo))
                    {
                        debitAccountNo += string.Format(" {0},", item.DebitAccountNo);
                    }
                }
                if (!string.IsNullOrEmpty(debitAccountNo))
                {
                    debitAccountNo = debitAccountNo.Substring(0, debitAccountNo.Length - 1);
                }
                accLabel.Text = debitAccountNo;
            }

            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblCreditAccountNo"];
            if (accLabel != null)
            {
                string creditAccountNo = string.Empty;
                foreach (ICReceiptItemsInfo item in receiptList)
                {
                    if (item.CreditAccountNo != null)
                    {
                        if (!creditAccountNo.Contains(item.CreditAccountNo))
                        {
                            creditAccountNo += string.Format(" {0},", item.CreditAccountNo);
                        }
                    }
                }
                if (!string.IsNullOrEmpty(creditAccountNo))
                {
                    creditAccountNo = creditAccountNo.Substring(0, creditAccountNo.Length - 1);
                }
                accLabel.Text = creditAccountNo;
            }
            #endregion
            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xrLabel28"];
            if (accLabel != null)
            {
                accLabel.Text = receipt.ICReceiptDate.ToString("dd/MM/yyyy");
            }
            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xrLabel29"];
            if (accLabel != null)
            {
                accLabel.Text = receipt.ICReceiptDate.ToString("dd/MM/yyyy");
            }

            report.DataSource = receiptList;
        }

        public void CancelValidatePurchaseReceipt()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.ICReceiptStatus = ReceiptStatus.New.ToString();
            entity.UpdateMainObject();
            InvalidateToolbar();
            LoadGridViewReceiptItemList();
            ChangeDisplayAndDataItemListGridView();
            //ReceiptItemsGridControl.LoadGridViewWhenCancelValidated();

        }

        public void ChangeGECurrency(string stringID)
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            int id = 0;
            int.TryParse(stringID, out id);
            objReceiptsInfo.FK_GECurrencyID = id;
            GECurrencyExchangeRatesController objCurrencyExchangeRatesController = new GECurrencyExchangeRatesController();
            decimal exchangeRateValue = objCurrencyExchangeRatesController.GetCurrencyExchangeRateByCurrencyIDAndDate(objReceiptsInfo.FK_GECurrencyID, objReceiptsInfo.ICReceiptDate);
            if (exchangeRateValue > 0)
            {
                objReceiptsInfo.ICReceiptExchangeRate = exchangeRateValue;
            }
            CurrentModuleEntity.UpdateMainObjectBindingSource();
            entity.SetProductCostByProductUnitCost();
            UpdateTotalCost();
        }

        public void ChangeAssObject(string assObjectAccessKey)
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.ACAssObjectAccessKey = assObjectAccessKey;
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByAccessKey(assObjectAccessKey);
            objObjectsInfo = objObjectsController.GetObjectByIDAndType(objObjectsInfo.ACObjectID, objObjectsInfo.ACObjectType);
            if (objObjectsInfo != null)
            {
                objReceiptsInfo.FK_ACAssObjectID = objObjectsInfo.ACObjectID;
                objReceiptsInfo.ICAssObjectType = objObjectsInfo.ACObjectType;
                objReceiptsInfo.ACAssObjectName = objObjectsInfo.ACObjectName;
                objReceiptsInfo.ICReceiptDeliveryContactName = objObjectsInfo.ACObjectName;
            }
        }

        public void ChangeObject(string acObjectAccessKey)
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.ACObjectAccessKey = acObjectAccessKey;
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByAccessKey(acObjectAccessKey);
            objObjectsInfo = objObjectsController.GetObjectByIDAndType(objObjectsInfo.ACObjectID, objObjectsInfo.ACObjectType);
            if (objObjectsInfo != null)
            {
                objReceiptsInfo.FK_ACAssObjectID = objObjectsInfo.ACObjectID;
                objReceiptsInfo.ICAssObjectType = objObjectsInfo.ACObjectType;
                objReceiptsInfo.ACObjectName = objObjectsInfo.ACObjectName;
            }
        }

        public void CreateSerialNumber()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo mainObject = (ICReceiptsInfo)entity.MainObject;
            ICProductSerialNumbersController objProductSerialNumbersController = new ICProductSerialNumbersController();
            List<ICProductSerialNumbersInfo> productSerialNumbers;
            productSerialNumbers = objProductSerialNumbersController.GetProductSerialNumbersByReceiptID(mainObject.ICReceiptID);
            if (productSerialNumbers.Count == 0)
            {
                entity.GenerateProductSerialNumber();
                productSerialNumbers = objProductSerialNumbersController.GetProductSerialNumbersByReceiptID(mainObject.ICReceiptID);
            }
            guiShowProductSerialNumber guiShowProductSerialNumber = new guiShowProductSerialNumber(productSerialNumbers);
            guiShowProductSerialNumber.Module = this;
            guiShowProductSerialNumber.ShowDialog();
        }

        public void PrintBarCodeForSerialNumber(List<ICProductSerialNumbersInfo> productSerialNumbers)
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            RPSerialNumber report = new RPSerialNumber();
            foreach (ICProductSerialNumbersInfo objProductSerialNumbersInfo in productSerialNumbers)
            {
                objProductSerialNumbersInfo.BarcodeImage = (System.Drawing.Image)EncodingBase128(objProductSerialNumbersInfo.ICProductSerialNumberNo);
            }
            report.DataSource = productSerialNumbers;
            guiReportPreview reviewer = new guiReportPreview(report, BOSCommon.Constants.Report.DevInvoiceItemReportPath, false);
            reviewer.ShowDialog();
        }

        public void PrintQRCodePakage()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo mainObject = (ICReceiptsInfo)entity.MainObject;
            if (mainObject.ICReceiptStatus != ReceiptStatus.Complete.ToString())
            {
                MessageBox.Show("Vui lòng hoàn tất chứng từ trước khi in!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            RPReceiptPackageItemQRCode report = new RPReceiptPackageItemQRCode();
            ICReceiptPackageItemsController objReceiptPackageItemsController = new ICReceiptPackageItemsController();
            List<ICReceiptPackageItemsInfo> selected = objReceiptPackageItemsController.GetReceiptPackageItemByReceiptID(mainObject.ICReceiptID);
            List<ICReceiptPackageItemsInfo> duplicate = new List<ICReceiptPackageItemsInfo>();
            selected.ForEach(o =>
            {
                o.BarcodeImage = (System.Drawing.Image)EncodingQR(250, 250, o.ICReceiptPackageItemBarCode);
                for (int i = 1; i < o.ICReceiptPackageItemQty; i++)
                {
                    ICReceiptPackageItemsInfo objReceiptPackageItemsInfo = (ICReceiptPackageItemsInfo)o.Clone();
                    duplicate.Add(objReceiptPackageItemsInfo);
                }
            });
            selected = selected.Union(duplicate).OrderBy(o => o.ICReceiptPackageItemBarCode).ToList();
            report.bsReceiptPackageItems.DataSource = selected;
            guiReportPreview reviewer = new guiReportPreview(report, BOSCommon.Constants.Report.DevInvoiceItemReportPath, false);
            reviewer.ShowDialog();
        }

        public void PrintInventoryItemBarcode()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo mainObject = (ICReceiptsInfo)entity.MainObject;

            RPInventoryItemPackageQRCode report = new RPInventoryItemPackageQRCode();

            List<ICInventoryItemPackagesInfo> selected = entity.InventoryItemPackageList.Where(o => o.Selected).ToList();
            List<ICInventoryItemPackagesInfo> duplicate = new List<ICInventoryItemPackagesInfo>();
            selected.ForEach(o =>
            {
                //o.BarcodeImage = (System.Drawing.Image)EncodingBase128(o.ICInventoryItemPackageBarCode);
                o.BarcodeImage = (System.Drawing.Image)EncodingQR(250, 250, o.ICInventoryItemPackageBarCode);
                if (o.ICProductPackagePrintQty > 1)
                {
                    for (int i = 1; i < o.ICProductPackagePrintQty; i++)
                    {
                        ICInventoryItemPackagesInfo objInventoryItemPackagesInfo = (ICInventoryItemPackagesInfo)o.Clone();
                        duplicate.Add(objInventoryItemPackagesInfo);
                    }
                }
            });
            selected = selected.Union(duplicate).OrderBy(o => o.ICInventoryItemPackageBarCode).ToList();
            report.DataSource = selected;
            guiReportPreview reviewer = new guiReportPreview(report, BOSCommon.Constants.Report.DevInvoiceItemReportPath, false);
            reviewer.ShowDialog();
        }

        public Bitmap EncodingQR(int width, int height, string inputStringToBarcode)
        {
            BarcodeWriter bw = new BarcodeWriter();
            bw.Format = ZXing.BarcodeFormat.QR_CODE;
            EncodingOptions encOptions = new EncodingOptions() { Width = width, Height = height, Margin = 0 };
            bw.Options = encOptions;
            if (string.IsNullOrEmpty(inputStringToBarcode))
                inputStringToBarcode = " ";
            Bitmap result = new Bitmap(bw.Write(inputStringToBarcode));
            return result;
        }

        public void PrintInventoryPackageBarcode()
        {
            guiPrintInventoryPackageBarcode guiPrintInventoryPackageBarcode = new guiPrintInventoryPackageBarcode();
            guiPrintInventoryPackageBarcode.Module = this;
            guiPrintInventoryPackageBarcode.ShowDialog();
        }

        public void PrintReceiptA4()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                PrinttReceiptA4(Toolbar.CurrentObjectID);
            }
        }
        public void PrintPurchaseReceiptForAccountingDT()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                RP_PRForAccountingA4DT report = new RP_PRForAccountingA4DT();
                InitPRForAccountingA4(report, Toolbar.CurrentObjectID);
                guiReportPreview viewer = new guiReportPreview(report);
                viewer.Show();
            }
        }

        public void PrintPurchaseReceiptForAccounting()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                RP_PRForAccountingA4 report = new RP_PRForAccountingA4();
                InitPRForAccountingA4(report, Toolbar.CurrentObjectID);
                guiReportPreview viewer = new guiReportPreview(report);
                viewer.Show();
            }
        }

        public void PrintWoodPurchaseReceiptA4()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                RP_PrintWoodPurchaseReceiptA4 report = new RP_PrintWoodPurchaseReceiptA4();
                InitPrintWoodPurchaseReceiptA4(report, Toolbar.CurrentObjectID);
                guiReportPreview viewer = new guiReportPreview(report);
                viewer.Show();
            }
        }
        private static void InitPrintWoodPurchaseReceiptA4(XtraReport report, int receiptID)
        {
            ICReceiptsController objReceiptsController = new ICReceiptsController();
            ICReceiptsInfo receipt = (ICReceiptsInfo)objReceiptsController.GetObjectByID(receiptID);
            ADReportsController objReportsController = new ADReportsController();
            List<ICReceiptItemsInfo> receiptList = objReportsController.GetListReceiptItemForReportPrintWoodPurchaseByReceiptID(receiptID);
            report.DataSource = receiptList;
        }
        public void PrinttReceiptA4(int receiptID)
        {
            RP_PurchaseReceiptA4 report = new RP_PurchaseReceiptA4();
            InitReceiptReport(report, receiptID);
            guiReportPreview viewer = new guiReportPreview(report);
            viewer.Show();
        }
        public void PrintReceiptA5()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                PrinttReceiptA5(Toolbar.CurrentObjectID);
            }
        }
        public void PrinttReceiptA5(int receiptID)
        {
            RP_PurchaseReceiptA5 report = new RP_PurchaseReceiptA5();
            InitReceiptReport(report, receiptID);
            guiReportPreview viewer = new guiReportPreview(report);
            viewer.Show();
        }



        public Bitmap EncodingBase128(string inputStringToBarcode)
        {
            BarcodeWriter bw = new BarcodeWriter();
            bw.Format = ZXing.BarcodeFormat.CODE_128;
            EncodingOptions encOptions = new EncodingOptions() { Width = 250, Height = 50, Margin = 0 };
            bw.Options = encOptions;
            if (string.IsNullOrEmpty(inputStringToBarcode))
                inputStringToBarcode = " ";
            Bitmap result = new Bitmap(bw.Write(inputStringToBarcode));
            return result;
        }

        public void AddProductPackageItemDetails()
        {
            if (IsEditable())
            {
                ActionEdit();
            }

        }
        public ICReceiptPackageItemsInfo GenReceiptPackageItemFromProductPackageItem(ICProductPackageItemsInfo objProductPackageItemsInfo)
        {

            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            decimal receiptItemProductQty = entity.ReceiptItemsList.Where(o => o.FK_ICProductID == objProductPackageItemsInfo.FK_ICProductID).Select(o => o.ICReceiptItemProductQty).Sum();
            decimal packageItemQty = receiptItemProductQty * objProductPackageItemsInfo.ICProductPackageItemQty;
            packageItemQty = objProductPackageItemsInfo.ICProductPackageProductQty == 0 ? packageItemQty : packageItemQty / objProductPackageItemsInfo.ICProductPackageProductQty;

            ICReceiptPackageItemsInfo objReceiptPackageItemsInfo = new ICReceiptPackageItemsInfo();
            if (objProductPackageItemsInfo != null)
            {
                objReceiptPackageItemsInfo.FK_ICProductPackageItemID = objProductPackageItemsInfo.ICProductPackageItemID;
                objReceiptPackageItemsInfo.ICReceiptPackageItemNo = objProductPackageItemsInfo.ICProductPackageItemNo;
                objReceiptPackageItemsInfo.ICReceiptPackageItemName = objProductPackageItemsInfo.ICProductPackageItemName;
                objReceiptPackageItemsInfo.ICReceiptPackageItemLength = objProductPackageItemsInfo.ICProductPackageItemLength;
                objReceiptPackageItemsInfo.ICReceiptPackageItemWidth = objProductPackageItemsInfo.ICProductPackageItemWidth;
                objReceiptPackageItemsInfo.ICReceiptPackageItemHeight = objProductPackageItemsInfo.ICProductPackageItemHeight;
                objReceiptPackageItemsInfo.ICReceiptPackageItemHasDetail = objProductPackageItemsInfo.ICProductPackageItemHasDetail;
                objReceiptPackageItemsInfo.ICReceiptPackageItemQty = packageItemQty;
                objReceiptPackageItemsInfo.ICProductPackageMethodType = objProductPackageItemsInfo.ICProductPackageMethodType;
                objReceiptPackageItemsInfo.FK_ICProductID = objProductPackageItemsInfo.FK_ICProductID;
            }
            return objReceiptPackageItemsInfo;
        }

        public ICReceiptPackageItemDetailsInfo GenReceiptPackageItemDetailFromProductPackageItemDetail(ICProductPackageItemDetailsInfo objProductPackageItemDetailsInfo, decimal ICReceiptPackageItemQty)
        {
            ICReceiptPackageItemDetailsInfo objReceiptPackageItemDetailsInfo = new ICReceiptPackageItemDetailsInfo();
            if (objProductPackageItemDetailsInfo != null)
            {
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailNo = objProductPackageItemDetailsInfo.ICProductPackageItemDetailNo;
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailName = objProductPackageItemDetailsInfo.ICProductPackageItemDetailName;
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductNo = objProductPackageItemDetailsInfo.ICProductPackageItemDetailFinalProductNo;
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductName = objProductPackageItemDetailsInfo.ICProductPackageItemDetailFinalProductName;
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductDesc = objProductPackageItemDetailsInfo.ICProductPackageItemDetailFinalProductDesc;
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailQty = objProductPackageItemDetailsInfo.ICProductPackageItemDetailQty;
                objReceiptPackageItemDetailsInfo.FK_ICProductID = objProductPackageItemDetailsInfo.FK_ICProductID;
                objReceiptPackageItemDetailsInfo.FK_ICProductDetailID = objProductPackageItemDetailsInfo.FK_ICProductDetailID;
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemQty = ICReceiptPackageItemQty;
            }
            return objReceiptPackageItemDetailsInfo;
        }

        public void UpdateTotalAmountForDSConts(ICReceiptItemContsInfo contInfo)
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
                GEUnitCostContainersController objUnitCostContainersController = new GEUnitCostContainersController();
                if (contInfo != null)
                {
                    contInfo.ICReceiptItemContUnitPrice = objUnitCostContainersController.GetTotalUnitPriceByContainerIDAndTeminalID(contInfo.FK_GEContainerID, objReceiptsInfo.FK_GETerminalID);
                    contInfo.ICReceiptItemContTotalAmount = contInfo.ICReceiptItemContQty * contInfo.ICReceiptItemContUnitPrice;
                }
                entity.ReceiptItemContList.GridControl.RefreshDataSource();
                UpdateContFees();
            }
        }

        public void SetDefaultReceiptPackageItemList()
        {
            if (IsEditable())
            {
                ActionEdit();
            }
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            if (entity.ReceiptPackageItemList.Count > entity.CountItemsInReceiptPackageItemList)
            {
                entity.CountItemsInReceiptPackageItemList++;
                if (entity.ReceiptPackageItemList[entity.ReceiptPackageItemList.CurrentIndex] != null)
                {
                    entity.ReceiptPackageItemList[entity.ReceiptPackageItemList.CurrentIndex].ICReceiptPackageItemTemporaryID = entity.ReceiptPackageItemList.Count;
                }
            }
            entity.ReceiptPackageItemList.GridControl.RefreshDataSource();
        }

        public void DeleteItemReceiptPackageItemsList()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptPackageItemsInfo objReceiptPackageItemsInfo = entity.ReceiptPackageItemList[entity.ReceiptPackageItemList.CurrentIndex];
            List<ICReceiptPackageItemDetailsInfo> ReceiptPackageItemDetailShowRemoveList = new List<ICReceiptPackageItemDetailsInfo>();
            if (objReceiptPackageItemsInfo.ICReceiptPackageItemTemporaryID > 0 && objReceiptPackageItemsInfo.ReceiptPackageItemDetailsList != null)
            {
                foreach (ICReceiptPackageItemDetailsInfo objReceiptPackageItemDetailsInfo in objReceiptPackageItemsInfo.ReceiptPackageItemDetailsList)
                {
                    entity.ReceiptPackageItemDetailShowList.ForEach(x =>
                    {
                        if (x.FK_ICReceiptPackageItemID == objReceiptPackageItemDetailsInfo.FK_ICReceiptPackageItemID)
                            entity.ReceiptPackageItemDetailShowList.Remove(x);
                    });
                }
            }
            else
            {
                // Sau khi remove thi ForEach bi break nen dung 2 list
                entity.ReceiptPackageItemDetailShowList.ForEach(x =>
                {
                    if (x.FK_APInvoiceInPackageItemID > 0)
                    {
                        if (x.FK_APInvoiceInPackageItemID == objReceiptPackageItemsInfo.FK_APInvoiceInPackageItemID)
                            ReceiptPackageItemDetailShowRemoveList.Add(x);
                    }
                    else if (x.FK_APPOPackageItemID > 0)
                    {
                        if (x.FK_APPOPackageItemID == objReceiptPackageItemsInfo.FK_APPOPackageItemID)
                            ReceiptPackageItemDetailShowRemoveList.Add(x);
                    }
                    else if (x.FK_ICReceiptPackageItemID == objReceiptPackageItemsInfo.ICReceiptPackageItemID)
                        ReceiptPackageItemDetailShowRemoveList.Add(x);
                });
                ReceiptPackageItemDetailShowRemoveList.ForEach(x =>
                {
                    if (x.FK_APInvoiceInPackageItemID > 0)
                    {
                        if (x.FK_APInvoiceInPackageItemID == objReceiptPackageItemsInfo.FK_APInvoiceInPackageItemID)
                            entity.ReceiptPackageItemDetailShowList.Remove(x);
                    }
                    else if (x.FK_APPOPackageItemID > 0)
                    {
                        if (x.FK_APPOPackageItemID == objReceiptPackageItemsInfo.FK_APPOPackageItemID)
                            entity.ReceiptPackageItemDetailShowList.Remove(x);
                    }
                    else if (x.FK_ICReceiptPackageItemID == objReceiptPackageItemsInfo.ICReceiptPackageItemID)
                        entity.ReceiptPackageItemDetailShowList.Remove(x);
                });
            }
            entity.ReceiptPackageItemList.RemoveSelectedRowObjectFromList();
            entity.ReceiptPackageItemDetailShowList.GridControl.RefreshDataSource();
        }

        public void InvalidateReportList()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICProductDetailsController objProductDetailsController = new ICProductDetailsController();
            ICProductsController objProductsController = new ICProductsController();
            entity.ReceiptPackageItemDetailReportList.Clear();
            entity.ReceiptItemsList.ForEach(o =>
            {
                if (o.ICReceiptItemHasProductPackage == false)
                    return;
                ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(o.FK_ICProductID);
                List<ICProductDetailsInfo> productDetailsList = objProductDetailsController.GetListProductDetailByProductID(o.FK_ICProductID);
                if (productDetailsList.Count > 0)
                {
                    productDetailsList.ForEach(x =>
                    {
                        ICReceiptPackageItemDetailsInfo objReceiptPackageItemDetailsInfo = new ICReceiptPackageItemDetailsInfo();
                        objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductNo = objProductsInfo.ICProductNo;
                        objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductName = o.ICReceiptItemProductDesc;
                        objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductDesc = o.ICReceiptItemProductDesc;
                        objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailQty = o.ICReceiptItemProductQty * x.ICProductDetailProductQty;
                        objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailNo = x.ICProductDetailProductNo;
                        objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailName = x.ICProductDetailProductName;
                        objReceiptPackageItemDetailsInfo.ICReceiptItemQty = o.ICReceiptItemProductQty * x.ICProductDetailProductQty;
                        objReceiptPackageItemDetailsInfo.ICReceiptItemPackagedQty1 = 0;
                        entity.ReceiptPackageItemDetailShowList.ForEach(i =>
                        {
                            if (i.ICReceiptPackageItemDetailNo == objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailNo && i.ICReceiptPackageItemDetailFinalProductNo == objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductNo)
                                objReceiptPackageItemDetailsInfo.ICReceiptItemPackagedQty1 += i.ICReceiptPackageItemQty * i.ICReceiptPackageItemDetailQty;
                        });
                        entity.ReceiptPackageItemDetailReportList.Add(objReceiptPackageItemDetailsInfo);
                    });
                }
                else
                {
                    ICReceiptPackageItemDetailsInfo objReceiptPackageItemDetailsInfo = new ICReceiptPackageItemDetailsInfo();
                    objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductNo = objProductsInfo.ICProductNo;
                    objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductName = o.ICReceiptItemProductDesc;
                    objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductDesc = o.ICReceiptItemProductDesc;
                    objReceiptPackageItemDetailsInfo.ICReceiptItemPackagedQty1 = 0;
                    objReceiptPackageItemDetailsInfo.ICReceiptItemQty = o.ICReceiptItemProductQty;
                    entity.ReceiptPackageItemDetailShowList.ForEach(i =>
                    {
                        if (i.ICReceiptPackageItemDetailNo == objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailNo && i.ICReceiptPackageItemDetailFinalProductNo == objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductNo)
                            objReceiptPackageItemDetailsInfo.ICReceiptItemPackagedQty1 += i.ICReceiptPackageItemQty * i.ICReceiptPackageItemDetailQty;
                    });
                    entity.ReceiptPackageItemDetailReportList.Add(objReceiptPackageItemDetailsInfo);
                }
            });
            entity.ReceiptPackageItemDetailReportList.GridControl.RefreshDataSource();
        }

        public void UpdateItemDetailShowListQty(decimal ICReceiptPackageItemQty)
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptPackageItemDetailsController objReceiptPackageItemDetailsController = new ICReceiptPackageItemDetailsController();
            ICReceiptPackageItemsInfo objReceiptPackageItemsInfo = (ICReceiptPackageItemsInfo)entity.ReceiptPackageItemList[entity.ReceiptPackageItemList.CurrentIndex];
            if (objReceiptPackageItemsInfo.FK_APPOPackageItemID > 0 || objReceiptPackageItemsInfo.FK_APInvoiceInPackageItemID > 0 || objReceiptPackageItemsInfo.ReceiptPackageItemDetailsList == null)
            {
                entity.ReceiptPackageItemDetailShowList.ForEach(o =>
                {
                    if (o.FK_APPOPackageItemID > 0 && o.FK_APPOPackageItemID == objReceiptPackageItemsInfo.FK_APPOPackageItemID)
                        o.ICReceiptPackageItemQty = ICReceiptPackageItemQty;
                    else if (o.FK_APInvoiceInPackageItemID > 0 && o.FK_APInvoiceInPackageItemID == objReceiptPackageItemsInfo.FK_APInvoiceInPackageItemID)
                        o.ICReceiptPackageItemQty = ICReceiptPackageItemQty;
                    else if (o.FK_APPOPackageItemID == objReceiptPackageItemsInfo.FK_APPOPackageItemID)
                        o.ICReceiptPackageItemQty = ICReceiptPackageItemQty;
                });
            }
            else if (objReceiptPackageItemsInfo.ReceiptPackageItemDetailsList != null)
            {
                foreach (ICReceiptPackageItemDetailsInfo objReceiptPackageItemDetailsInfo in objReceiptPackageItemsInfo.ReceiptPackageItemDetailsList)
                {
                    entity.ReceiptPackageItemDetailShowList.ForEach(o =>
                    {
                        if (o.FK_ICReceiptPackageItemID == objReceiptPackageItemsInfo.ICReceiptPackageItemTemporaryID)
                            o.ICReceiptPackageItemQty = ICReceiptPackageItemQty;
                    });
                }
            }
            //else if (objReceiptPackageItemsInfo.ICReceiptPackageItemID > 0)
            //{
            //    List<ICReceiptPackageItemDetailsInfo> PackageItemDetailList = objReceiptPackageItemDetailsController.GetPackageItemDetailsListByPackageItemID(objReceiptPackageItemsInfo.ICReceiptPackageItemID);
            //    PackageItemDetailList.ForEach(x =>
            //    {
            //        entity.ReceiptPackageItemDetailShowList.ForEach(o =>
            //        {
            //            if (o.FK_ICReceiptPackageItemID == x.FK_ICReceiptPackageItemID)
            //                o.ICReceiptPackageItemQty = ICReceiptPackageItemQty;
            //        });
            //    });
            //}
            entity.ReceiptPackageItemDetailShowList.GridControl.RefreshDataSource();
        }

        public bool ApprovedReceipt()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            ICProductDetailsController objProductDetailsController = new ICProductDetailsController();
            ICReceiptPackageItemDetailsController objReceiptPackageItemDetailsController = new ICReceiptPackageItemDetailsController();
            ICProductsController objProductsController = new ICProductsController();
            bool isValid = CheckSerialNoInReceiptItemsList();
            if(!isValid)
            {
                return isValid;
            }    
            List<string> productError = new List<string>();



            entity.ReceiptItemsList.ForEach(o =>
            {
                if (isValid == false)
                    return;

                bool isWoodType = BOSApp.IsWoodTypeDocument(objReceiptsInfo.ICReceiptReceiptType, entity.ReceiptItemsList.FirstOrDefault());
                if (string.IsNullOrEmpty(o.ICReceiptItemProductSerialNo)
                                || (string.IsNullOrEmpty(o.ICReceiptItemLotNo)  &&  isWoodType))
                {
                    isValid = false;
                    MessageBox.Show(string.Format(PurchaseReceiptLocalizedResources.ItemSerieNoIsRequiredMessage, o.ICReceiptItemProductDesc)
                                        , CommonLocalizedResources.MessageBoxDefaultCaption
                                        , MessageBoxButtons.OK
                                        , MessageBoxIcon.Error);
                    return;
                }
                //else
                //{
                //    ICProductSeriesController objProductSeriesController = new ICProductSeriesController();
                //    ICProductSeriesInfo objProductSeriesInfo = objProductSeriesController.GetSerieByProductIDAndSerieNo(o.FK_ICProductID, o.ICReceiptItemProductSerialNo);
                //    if (objProductSeriesInfo != null)
                //    {
                //        if (o.ICReceiptItemLotNo == objProductSeriesInfo.ICProductSerieLotNo && o.FK_ICStockID == objProductSeriesInfo.FK_ICStockID)
                //        {
                //            o.FK_ICProductSerieID = objProductSeriesInfo.ICProductSerieID;
                //        }
                //        else
                //        {
                //            isValid = false;
                //            MessageBox.Show(string.Format(PurchaseReceiptLocalizedResources.IsExistLotNoText, o.ICReceiptItemProductDesc)
                //                            , CommonLocalizedResources.MessageBoxDefaultCaption
                //                            , MessageBoxButtons.OK
                //                            , MessageBoxIcon.Exclamation);
                //            return;
                //        }
                //    }
                //}

                if (o.ICReceiptItemHasProductPackage == false)
                    return;
                if (isValid == false)
                    return;

            });

            List<ICTransactionsInfo> invalidSerialNoList = objReceiptsInfo.ICReceiptID == 0 ? entity.ReceiptItemsList.GetInvalidSerialNo() : entity.ReceiptItemsList.GetInvalidSerialNoBySomeCriteria();
            if (invalidSerialNoList.Count() > 0)
            {
                MessageBox.Show(string.Format("Mã lô hàng của các sản phẩm sau đã tồn tại:\n- {0}",
                                                string.Join("\n- ", invalidSerialNoList.Select(o1 => string.Format("{0}: {1}", o1.ICProductNo, o1.ICTransactionReceiptSerialNo))
                                                                                     .ToArray())),
                   CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }

            GEUnitCostContainersController objUnitCostContainersController = new GEUnitCostContainersController();
            List<GEUnitCostContainersInfo> listUnitCostContainers = (List<GEUnitCostContainersInfo>)objUnitCostContainersController.GetListFromDataSet((DataSet)objUnitCostContainersController.GetAllObjects());
            GEUnitCostContainersInfo validateUnitCostContainersInfo;
            entity.ReceiptItemContFeeList.ForEach(o =>
            {
                if (isValid == false)
                    return;
                validateUnitCostContainersInfo = listUnitCostContainers.Where(p => p.FK_GEContainerID == o.FK_GEContainerID
                                                                                    && p.FK_GEUnitCostID == o.FK_GEUnitCostID
                                                                                    && p.fk_GETerminalID == objReceiptsInfo.FK_GETerminalID).FirstOrDefault();
                if (validateUnitCostContainersInfo != null && validateUnitCostContainersInfo.GEUnitCostContainerUnitCost != o.ICReceiptItemContFeeUnitCost)
                {
                    if (MessageBox.Show(PurchaseReceiptLocalizedResources.ChangeContFeeUnitCost,
                                                            CommonLocalizedResources.MessageBoxDefaultCaption,
                                                            MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.No)
                    {
                        isValid = false;
                        return;
                    }
                }
            });
            return isValid;
        }

        public ICReceiptPackageItemsInfo GenReceiptPackageItemFromInvoiceInPackageItem(APInvoiceInPackageItemsInfo objInvoiceInPackageItemsInfo)
        {
            ICReceiptPackageItemsInfo objReceiptPackageItemsInfo = new ICReceiptPackageItemsInfo();
            if (objInvoiceInPackageItemsInfo != null)
            {
                objReceiptPackageItemsInfo.ICReceiptPackageItemNo = objInvoiceInPackageItemsInfo.APInvoiceInPackageItemNo;
                objReceiptPackageItemsInfo.ICReceiptPackageItemName = objInvoiceInPackageItemsInfo.APInvoiceInPackageItemName;
                objReceiptPackageItemsInfo.ICReceiptPackageItemLength = objInvoiceInPackageItemsInfo.APInvoiceInPackageItemLength;
                objReceiptPackageItemsInfo.ICReceiptPackageItemWidth = objInvoiceInPackageItemsInfo.APInvoiceInPackageItemWidth;
                objReceiptPackageItemsInfo.ICReceiptPackageItemHeight = objInvoiceInPackageItemsInfo.APInvoiceInPackageItemHeight;
                objReceiptPackageItemsInfo.ICReceiptPackageItemHasDetail = objInvoiceInPackageItemsInfo.APInvoiceInPackageItemHasDetail;
                objReceiptPackageItemsInfo.ICReceiptPackageItemQty = objInvoiceInPackageItemsInfo.APInvoiceInPackageItemQty;
                objReceiptPackageItemsInfo.ICProductPackageMethodType = objInvoiceInPackageItemsInfo.APProductPackageMethodType;
                objReceiptPackageItemsInfo.FK_APInvoiceInPackageItemID = objInvoiceInPackageItemsInfo.APInvoiceInPackageItemID;

            }
            return objReceiptPackageItemsInfo;
        }

        public ICReceiptPackageItemDetailsInfo GenReceiptPackageItemDetailFromInvoiceInPackageItemDetail(APInvoiceInPackageItemDetailsInfo objInvoiceInPackageItemDetailsInfo)
        {
            ICReceiptPackageItemDetailsInfo objReceiptPackageItemDetailsInfo = new ICReceiptPackageItemDetailsInfo();
            if (objReceiptPackageItemDetailsInfo != null)
            {
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailNo = objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailNo;
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailName = objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailName;
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductNo = objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailFinalProductNo;
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductName = objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailFinalProductName;
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductDesc = objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailFinalProductDesc;
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailQty = objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailQty;
                objReceiptPackageItemDetailsInfo.FK_ICProductID = objInvoiceInPackageItemDetailsInfo.FK_ICProductID;
                objReceiptPackageItemDetailsInfo.FK_ICProductDetailID = objInvoiceInPackageItemDetailsInfo.FK_ICProductDetailID;
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemQty = objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemQty;
                objReceiptPackageItemDetailsInfo.FK_APInvoiceInPackageItemID = objInvoiceInPackageItemDetailsInfo.FK_APInvoiceInPackageItemID;
            }
            return objReceiptPackageItemDetailsInfo;
        }

        public ICReceiptPackageItemsInfo GenReceiptPackageItemFromPOPackageItem(APPOPackageItemsInfo objPOPackageItemsInfo)
        {
            ICReceiptPackageItemsInfo objReceiptPackageItemsInfo = new ICReceiptPackageItemsInfo();
            if (objPOPackageItemsInfo != null)
            {
                objReceiptPackageItemsInfo.ICReceiptPackageItemNo = objPOPackageItemsInfo.APPOPackageItemNo;
                objReceiptPackageItemsInfo.ICReceiptPackageItemName = objPOPackageItemsInfo.APPOPackageItemName;
                objReceiptPackageItemsInfo.ICReceiptPackageItemLength = objPOPackageItemsInfo.APPOPackageItemLength;
                objReceiptPackageItemsInfo.ICReceiptPackageItemWidth = objPOPackageItemsInfo.APPOPackageItemWidth;
                objReceiptPackageItemsInfo.ICReceiptPackageItemHeight = objPOPackageItemsInfo.APPOPackageItemHeight;
                objReceiptPackageItemsInfo.ICReceiptPackageItemHasDetail = objPOPackageItemsInfo.APPOPackageItemHasDetail;
                objReceiptPackageItemsInfo.ICReceiptPackageItemQty = objPOPackageItemsInfo.APPOPackageItemQty;
                objReceiptPackageItemsInfo.ICProductPackageMethodType = objPOPackageItemsInfo.APProductPackageMethodType;
                objReceiptPackageItemsInfo.FK_APPOPackageItemID = objPOPackageItemsInfo.APPOPackageItemID;

            }
            return objReceiptPackageItemsInfo;
        }

        public ICReceiptPackageItemDetailsInfo GenReceiptPackageItemDetailFromPOPackageItemDetail(APPOPackageItemDetailsInfo objPOPackageItemDetailsInfo)
        {
            ICReceiptPackageItemDetailsInfo objReceiptPackageItemDetailsInfo = new ICReceiptPackageItemDetailsInfo();
            if (objReceiptPackageItemDetailsInfo != null)
            {
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailNo = objPOPackageItemDetailsInfo.APPOPackageItemDetailNo;
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailName = objPOPackageItemDetailsInfo.APPOPackageItemDetailName;
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductNo = objPOPackageItemDetailsInfo.APPOPackageItemDetailFinalProductNo;
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductName = objPOPackageItemDetailsInfo.APPOPackageItemDetailFinalProductName;
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductDesc = objPOPackageItemDetailsInfo.APPOPackageItemDetailFinalProductDesc;
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailQty = objPOPackageItemDetailsInfo.APPOPackageItemDetailQty;
                objReceiptPackageItemDetailsInfo.FK_ICProductID = objPOPackageItemDetailsInfo.FK_ICProductID;
                objReceiptPackageItemDetailsInfo.FK_ICProductDetailID = objPOPackageItemDetailsInfo.FK_ICProductDetailID;
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemQty = objPOPackageItemDetailsInfo.APPOPackageItemQty;
                objReceiptPackageItemDetailsInfo.FK_APPOPackageItemID = objPOPackageItemDetailsInfo.FK_APPOPackageItemID;
            }
            return objReceiptPackageItemDetailsInfo;
        }

        public bool CheckExistInReceiptItemList(int productID)
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            return entity.ReceiptItemsList.Where(o => o.FK_ICProductID == productID).Count() > 0;
        }

        public void PrintQRCodeProduct()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo mainObject = (ICReceiptsInfo)entity.MainObject;
            string receiptItemRef = string.Join(",", entity.ReceiptItemsList.Where(o => o.ICReceiptItemProductType == ProductType.Product.ToString() && !o.ICReceiptItemHasProductPackage)
                                                           .Select(o => o.Id.ToString()).ToArray());
            if (string.IsNullOrEmpty(receiptItemRef))
            {
                MessageBox.Show("Không có sản phẩm không kiện. Vui lòng kiểm tra lại!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            guiPrintQRCode guiFind = new guiPrintQRCode(entity.ReceiptItemsList.Where(o => o.ICReceiptItemProductType == ProductType.Product.ToString() && !o.ICReceiptItemHasProductPackage).ToList());
            guiFind.Module = this;
            if (guiFind.ShowDialog() != DialogResult.OK)
            {
                return;
            }
            receiptItemRef = string.Join(",", guiFind.SelectedObjects.Select(o => o.Id.ToString()).ToArray());

            RPReceiptPackageItemQRCodeProduct report = new RPReceiptPackageItemQRCodeProduct();

            ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
            List<ICReceiptItemsInfo> selected = objReceiptItemsController.GetReceiptItemQRCodeProductByRef(receiptItemRef);
            List<ICReceiptItemsInfo> duplicate = new List<ICReceiptItemsInfo>();
            selected.ForEach(o =>
            {
                o.BarcodeImage = (System.Drawing.Image)EncodingQR(250, 250, o.ICReceiptItemProductBarcode);
                for (int i = 1; i < o.ICReceiptItemProductQty; i++)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)o.Clone();
                    duplicate.Add(objReceiptItemsInfo);
                }
            });
            selected = selected.Union(duplicate).OrderBy(o => o.ICReceiptItemProductBarcode).ToList();
            report.bsReceiptItems.DataSource = selected;
            guiReportPreview reviewer = new guiReportPreview(report, BOSCommon.Constants.Report.DevInvoiceItemReportPath, false);
            reviewer.ShowDialog();
        }

        public void PrintQRCodeMaterial()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo mainObject = (ICReceiptsInfo)entity.MainObject;
            string receiptItemRef = string.Join(",", entity.ReceiptItemsList.Where(o => o.ICReceiptItemProductType != ProductType.Product.ToString() && !o.ICReceiptItemHasProductPackage)
                                                           .Select(o => o.Id.ToString()).ToArray());
            if (string.IsNullOrEmpty(receiptItemRef))
            {
                MessageBox.Show("Không có vật tư không kiện. Vui lòng kiểm tra lại!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            guiPrintQRCode guiFind = new guiPrintQRCode(entity.ReceiptItemsList.Where(o => o.ICReceiptItemProductType != ProductType.Product.ToString() && !o.ICReceiptItemHasProductPackage).ToList());
            guiFind.Module = this;
            if (guiFind.ShowDialog() != DialogResult.OK)
            {
                return;
            }
            receiptItemRef = string.Join(",", guiFind.SelectedObjects.Select(o => o.Id.ToString()).ToArray());

            RPReceiptPackageItemQRCodeMaterial report = new RPReceiptPackageItemQRCodeMaterial();

            ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
            List<ICReceiptItemsInfo> selected = objReceiptItemsController.GetReceiptItemQRCodeProductByRef(receiptItemRef);
            List<ICReceiptItemsInfo> duplicate = new List<ICReceiptItemsInfo>();
            selected.ForEach(o =>
            {
                o.BarcodeImage = (System.Drawing.Image)EncodingQR(250, 250, o.ICReceiptItemProductBarcode);
                for (int i = 1; i < o.ICReceiptItemProductQty; i++)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)o.Clone();
                    duplicate.Add(objReceiptItemsInfo);
                }
            });
            selected = selected.Union(duplicate).OrderBy(o => o.ICReceiptItemProductBarcode).ToList();
            report.bsReceiptItems.DataSource = selected;
            guiReportPreview reviewer = new guiReportPreview(report, BOSCommon.Constants.Report.DevInvoiceItemReportPath, false);
            reviewer.ShowDialog();
        }

        public void ChangeHasProductPackage()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptItemsInfo objReceiptItemsInfo = entity.ReceiptItemsList[entity.ReceiptItemsList.CurrentIndex];
            if (objReceiptItemsInfo == null)
                return;

            if (objReceiptItemsInfo.ICReceiptItemHasProductPackage)
                GenerateProductPackageByReceiptItem(objReceiptItemsInfo);
            else
                RemoveReceiptPackageByReceiptItem(objReceiptItemsInfo);
        }

        public void RemoveReceiptPackageByReceiptItem(ICReceiptItemsInfo objReceiptItemsInfo)
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            entity.ReceiptPackageItemList.RemoveAll(o => o.FK_ICProductID == objReceiptItemsInfo.FK_ICProductID);
            entity.ReceiptPackageItemList.GridControl.RefreshDataSource();
        }

        public void GenerateProductPackageByReceiptItem(ICReceiptItemsInfo objReceiptItemsInfo)
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;

            ICReceiptPackageItemsInfo objReceiptPackageItemsInfo = entity.ReceiptPackageItemList.Where(o => o.FK_ICProductID == objReceiptItemsInfo.FK_ICProductID).FirstOrDefault();
            if (objReceiptPackageItemsInfo != null)
                return;

            ICReceiptPackageItemsController objReceiptPackageItemsController = new ICReceiptPackageItemsController();
            List<ICReceiptPackageItemsInfo> receiptPackageItemList = objReceiptPackageItemsController.GenerateProductPackageByProductID(objReceiptItemsInfo.FK_ICProductID
                                                                                                                                        , objReceiptItemsInfo.ICReceiptItemProductQty
                                                                                                                                        , objReceiptItemsInfo.FK_ICReceiptID);

            if (receiptPackageItemList.Count() == 0)
                return;

            entity.ReceiptPackageItemList.AddRange(receiptPackageItemList);
            entity.ReceiptPackageItemList.GridControl.RefreshDataSource();
        }

        public void PrintPurchaseReceiptTV()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            object[] arParam = new object[1];
            arParam[0] = objReceiptsInfo.ICReceiptID;
            ViewReportByTemplate("RPReceiptTV", "GetDataSourceForRPReceiptTV", arParam);
        }
        public void ChangeReceiptReceiptType(string receiptReceiptType)
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
                objReceiptsInfo.ICReceiptReceiptType = receiptReceiptType;
                entity.UpdateMainObjectBindingSource();
                LoadGridViewReceiptItemList();
                ChangeDisplayAndDataItemListGridView();
            }
        }

        public void LoadGridViewReceiptItemList()
        {
            if (ReceiptItemsGridControl != null)
            {
                PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
                List<string> lumberGroups = new List<string>() { ReceiptReceiptType.Lumber.ToString(),
                                                            ReceiptReceiptType.Roundwood.ToString()};
                ReceiptItemsGridControl.LoadGridViewByActionNewFromType(entity.ReceiptItemsList.Count(o1 => o1.FK_APPurchaseOrderItemID > 0) == 0,
                                                                        lumberGroups.Contains(objReceiptsInfo.ICReceiptReceiptType));
                ReceiptItemsGridControl.LoadGridViewByReceiptType(objReceiptsInfo.ICReceiptReceiptType);
            }
        }

        public void ChangeTerminal(int terminalID)
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
                GEUnitCostContainersController objUnitCostContainersController = new GEUnitCostContainersController();
                entity.ReceiptItemContFeeList.Clear();
                List<GEUnitCostContainersInfo> unitcontList = objUnitCostContainersController.GetItemListByTeminalID(objReceiptsInfo.FK_GETerminalID);
                objReceiptsInfo.FK_GETerminalID = terminalID;
                entity.UpdateMainObjectBindingSource();
                DialogResult dlgResult = MessageBox.Show(PurchaseReceiptLocalizedResources.ChangeTerminalItemsMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (dlgResult == DialogResult.Yes)
                {
                    entity.ReceiptItemsList.ForEach(o1 =>
                    {
                        o1.FK_GETerminalID = terminalID;
                        o1.FK_GEContainerID = 0;
                    });

                    if (entity.ReceiptItemContList != null && entity.ReceiptItemContList.Count() > 0)
                    {
                        entity.ReceiptItemContList.ForEach(a =>
                        {
                            List<GEUnitCostContainersInfo> unitcontByContList = new List<GEUnitCostContainersInfo>();
                            if (unitcontList != null && unitcontList.Count() > 0)
                            {
                                unitcontByContList = unitcontList.Where(b => b.FK_GEContainerID == a.FK_GEContainerID).ToList();
                                if (unitcontByContList != null && unitcontByContList.Count() > 0)
                                {
                                    a.ICReceiptItemContUnitPrice = unitcontByContList.Sum(b => b.GEUnitCostContainerUnitCost);
                                }
                            }
                            a.ICReceiptItemContTotalAmount = a.ICReceiptItemContUnitPrice * a.ICReceiptItemContQty;
                            if (unitcontByContList != null && unitcontByContList.Count() > 0)
                            {
                                unitcontByContList.ForEach(b =>
                                {
                                    ICReceiptItemContFeesInfo objReceiptItemContFeesInfo = new ICReceiptItemContFeesInfo();
                                    objReceiptItemContFeesInfo.FK_GEContainerID = b.FK_GEContainerID;
                                    objReceiptItemContFeesInfo.FK_GEUnitCostID = b.FK_GEUnitCostID;
                                    objReceiptItemContFeesInfo.ICReceiptItemContFeeContQty = a.ICReceiptItemContQty;
                                    objReceiptItemContFeesInfo.ICReceiptItemContFeeUnitCost = b.GEUnitCostContainerUnitCost;
                                    objReceiptItemContFeesInfo.ICReceiptItemContFeeTotalCost = objReceiptItemContFeesInfo.ICReceiptItemContFeeContQty * objReceiptItemContFeesInfo.ICReceiptItemContFeeUnitCost;
                                    entity.ReceiptItemContFeeList.Add(objReceiptItemContFeesInfo);
                                });
                            }
                        });
                    }
                    entity.ReceiptItemContList.GridControl.RefreshDataSource();
                    entity.ReceiptItemContFeeList.GridControl.RefreshDataSource();
                    entity.ReceiptItemsList.GridControl.RefreshDataSource();
                }
            }
        }

        public void UpdateTotalAmountForDSContFees(ICReceiptItemContFeesInfo item)
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
                if (item != null)
                {
                    item.ICReceiptItemContFeeTotalCost = item.ICReceiptItemContFeeUnitCost * item.ICReceiptItemContFeeContQty;
                }
                entity.ReceiptItemContFeeList.GridControl.RefreshDataSource();
                entity.ReceiptItemContList.ForEach(a =>
                {
                    decimal totalContFeeUnit = entity.ReceiptItemContFeeList.Sum(b => b.ICReceiptItemContFeeUnitCost);
                    if (entity.ReceiptItemContFeeList != null && entity.ReceiptItemContFeeList.Count > 0)
                    {
                        a.ICReceiptItemContUnitPrice = totalContFeeUnit;
                        a.ICReceiptItemContTotalAmount = a.ICReceiptItemContUnitPrice * a.ICReceiptItemContQty;
                    }
                });
                entity.ReceiptItemContList.GridControl.RefreshDataSource();
            }
        }

        //Cập nhật ds phí
        public void UpdateContFees()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
                GEUnitCostContainersController objUnitCostContainersController = new GEUnitCostContainersController();
                //Ds phí theo cảng
                List<GEUnitCostContainersInfo> unitcontList = objUnitCostContainersController.GetItemListByTeminalID(objReceiptsInfo.FK_GETerminalID);
                //Xóa những phí không có conts
                if (entity.ReceiptItemContFeeList != null && entity.ReceiptItemContFeeList.Count() > 0)
                {
                    List<int> contIDList = entity.ReceiptItemContFeeList.Select(a => a.FK_GEContainerID).Distinct().ToList();
                    foreach (int contID in contIDList)
                    {
                        ICReceiptItemContsInfo item = entity.ReceiptItemContList.FirstOrDefault(a => a.FK_GEContainerID == contID);
                        if (item == null)
                        {
                            try
                            {
                                entity.ReceiptItemContFeeList.ForEach(a =>
                                {
                                    if (a.FK_GEContainerID == contID)
                                    {
                                        entity.ReceiptItemContFeeList.Remove(a);
                                    }
                                });
                            }
                            catch (Exception ex)
                            {
                                //
                            }
                        }
                    }
                }
                // cập nhật và thêm mới phí nếu chưa có
                if (entity.ReceiptItemContList != null && entity.ReceiptItemContList.Count() > 0)
                {
                    entity.ReceiptItemContList.ForEach(a =>
                    {
                        if (entity.ReceiptItemContFeeList != null && entity.ReceiptItemContFeeList.Count() > 0)
                        {
                            ICReceiptItemContFeesInfo itemfee = entity.ReceiptItemContFeeList.FirstOrDefault(b => b.FK_GEContainerID == a.FK_GEContainerID);
                            if (itemfee != null)
                            {
                                entity.ReceiptItemContFeeList.ForEach(b =>
                                {
                                    if (b.FK_GEContainerID == a.FK_GEContainerID)
                                    {
                                        b.ICReceiptItemContFeeContQty = a.ICReceiptItemContQty;
                                        b.ICReceiptItemContFeeTotalCost = b.ICReceiptItemContFeeContQty * b.ICReceiptItemContFeeUnitCost;
                                    }
                                });
                            }
                            else
                            {
                                AddContFeeByContitem(unitcontList, a);
                            }
                        }
                        else
                        {
                            AddContFeeByContitem(unitcontList, a);
                        }
                    });
                }
                entity.ReceiptItemContFeeList.GridControl.RefreshDataSource();
            }
        }

        //Thêm phí mới 
        public void AddContFeeByContitem(List<GEUnitCostContainersInfo> unitcontList, ICReceiptItemContsInfo conItem)
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            List<GEUnitCostContainersInfo> unitcontByContList = new List<GEUnitCostContainersInfo>();
            if (unitcontList != null && unitcontList.Count() > 0)
            {
                unitcontByContList = unitcontList.Where(b => b.FK_GEContainerID == conItem.FK_GEContainerID).ToList();
            }
            if (unitcontByContList != null && unitcontByContList.Count() > 0)
            {
                unitcontByContList.ForEach(b =>
                {
                    ICReceiptItemContFeesInfo objReceiptItemContFeesInfo = new ICReceiptItemContFeesInfo();
                    objReceiptItemContFeesInfo.FK_GEContainerID = b.FK_GEContainerID;
                    objReceiptItemContFeesInfo.FK_GEUnitCostID = b.FK_GEUnitCostID;
                    objReceiptItemContFeesInfo.ICReceiptItemContFeeContQty = conItem.ICReceiptItemContQty;
                    objReceiptItemContFeesInfo.ICReceiptItemContFeeUnitCost = b.GEUnitCostContainerUnitCost;
                    objReceiptItemContFeesInfo.ICReceiptItemContFeeTotalCost = objReceiptItemContFeesInfo.ICReceiptItemContFeeContQty * objReceiptItemContFeesInfo.ICReceiptItemContFeeUnitCost;
                    entity.ReceiptItemContFeeList.Add(objReceiptItemContFeesInfo);
                });
            }
        }

        public void ChangeCountry(int countryID)
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
                objReceiptsInfo.FK_GECountryID = countryID;
                entity.UpdateMainObjectBindingSource();
                entity.ReceiptItemsList.ForEach(o1 =>
                {
                    o1.FK_GECountryID = countryID;
                });
                entity.ReceiptItemsList.GridControl.RefreshDataSource();
            }
        }

        public void ChangeProductAttributeTTMT(int productAttributeTTMTID)
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
                objReceiptsInfo.FK_ICProductAttributeTTMTID = productAttributeTTMTID;
                entity.UpdateMainObjectBindingSource();
                entity.ReceiptItemsList.ForEach(o1 =>
                {
                    o1.FK_ICProductAttributeTTMTID = productAttributeTTMTID;
                });
                entity.ReceiptItemsList.GridControl.RefreshDataSource();
            }
        }

        public void ChangeProductAttributeWoodType(int productAttributeWoodTypeID)
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
                objReceiptsInfo.FK_ICProductAttributeWoodTypeID = productAttributeWoodTypeID;
                entity.UpdateMainObjectBindingSource();
                DialogResult dlgResult = MessageBox.Show(PurchaseReceiptLocalizedResources.ChangeWoodTypeItemsMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (dlgResult == DialogResult.Yes)
                {
                    entity.ReceiptItemsList.ForEach(o1 =>
                    {
                        o1.FK_ICProductAttributeWoodTypeID = productAttributeWoodTypeID;
                    });
                }
                entity.ReceiptItemsList.GridControl.RefreshDataSource();
            }
        }

        public void CopyItemToNewRow()
        {
            if (IsEditable())
            {
                ActionEdit();
            }
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            if (entity.ReceiptItemsList.CurrentIndex >= 0)
            {
                ICReceiptItemsInfo objReceiptItemsInfo = entity.ReceiptItemsList[entity.ReceiptItemsList.CurrentIndex];
                ICReceiptItemsInfo objCopyReceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsInfo.Clone();
                objCopyReceiptItemsInfo.Id = 0;
                objCopyReceiptItemsInfo.ICReceiptItemProductQty = 0;
                //objCopyReceiptItemsInfo.FK_APPurchaseOrderItemID = 0;
                //objCopyReceiptItemsInfo.FK_APPurchaseOrderID = 0;
                if (CalculatedPackageVolumnConfigsList == null || CalculatedPackageVolumnConfigsList.Count <= 0)
                {
                    CalculatedPackageVolumnConfigsList = (new ICCalculatedPackageVolumnConfigsController()).GetAllObjectList();
                }
                ICCalculatedPackageVolumnConfigsInfo objCalculatedPackageVolumnConfigsInfo = CalculatedPackageVolumnConfigsList.FirstOrDefault(o => o.STModuleName == this.Name);
                ICProductsForViewInfo product = BOSApp.CurrentProductList.FirstOrDefault(o => o.ICProductID == objCopyReceiptItemsInfo.FK_ICProductID);
                if (product.ICProductType == ProductType.Lumber.ToString()
                    && objCalculatedPackageVolumnConfigsInfo != null
                    && objCalculatedPackageVolumnConfigsInfo.IsActive
                    && objCopyReceiptItemsInfo.ICReceiptItemProductLength * objCopyReceiptItemsInfo.ICReceiptItemProductHeight * objCopyReceiptItemsInfo.ICReceiptItemProductWidth * objCopyReceiptItemsInfo.ICReceiptItemWoodQty != 0M)
                {
                    objCopyReceiptItemsInfo.ICReceiptItemProductQty = objCopyReceiptItemsInfo.ICReceiptItemProductLength * objCopyReceiptItemsInfo.ICReceiptItemProductHeight * objCopyReceiptItemsInfo.ICReceiptItemProductWidth * objCopyReceiptItemsInfo.ICReceiptItemWoodQty / 1000000000;
                    objCopyReceiptItemsInfo.ICReceiptItemProductExchangeQty = objCopyReceiptItemsInfo.ICReceiptItemProductQty * objCopyReceiptItemsInfo.ICReceiptItemProductFactor;
                    objCopyReceiptItemsInfo.ICReceiptItemProductQty = Math.Round(objCopyReceiptItemsInfo.ICReceiptItemProductQty, RoundingNumber.FormatN6, MidpointRounding.AwayFromZero);
                    objCopyReceiptItemsInfo.ICReceiptItemProductExchangeQty = Math.Round(objCopyReceiptItemsInfo.ICReceiptItemProductExchangeQty, RoundingNumber.FormatN6, MidpointRounding.AwayFromZero);
                }
                entity.SetProductCostByProductUnitCost(objCopyReceiptItemsInfo);
                entity.ReceiptItemsList.Add(objCopyReceiptItemsInfo);
                entity.ReceiptItemsList.GridControl.RefreshDataSource();
                UpdateTotalCost();
            }
        }

        public void ChangeDisplayAndDataItemListGridView()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            bool isWoodType = BOSApp.IsWoodTypeDocument(objReceiptsInfo.ICReceiptReceiptType, entity.ReceiptItemsList.FirstOrDefault());
            ChangeDisplayColumnByWoodType(entity.ReceiptItemsList.GridControl, isWoodType);
            if (!isWoodType)
                entity.ReceiptItemsList.ForEach(o1 => o1.ICReceiptItemLotNo = string.Empty);
            ChangeDisplayColumnByCreateFrom(entity.ReceiptItemsList.GridControl);
        }

        public override void ChangeDisplayColumnByWoodType(BOSGridControl gridControl, bool isWoodType)
        {
            base.ChangeDisplayColumnByWoodType(gridControl, isWoodType);
            if (gridControl == null)
                return;
            GridView gridView = (GridView)gridControl.MainView;
            if (gridView == null)
                return;
            GridColumn qtycolumn = gridView.Columns["ICReceiptItemProductQty"];
            GridColumn column = gridView.Columns["ICReceiptItemWoodQty"];
            if (isWoodType)
            {
                if (column == null)
                {
                    column = new GridColumn();
                    column.FieldName = "ICReceiptItemWoodQty";
                    column.Caption = CommonLocalizedResources.WoodQtyText;
                    column.OptionsColumn.AllowEdit = true;
                    column.VisibleIndex = qtycolumn != null ? qtycolumn.VisibleIndex : 999;
                    column.SummaryItem.SummaryType = DevExpress.Data.SummaryItemType.None;
                    gridView.Columns.Add(column);
                }
                else
                {
                    column.Caption = CommonLocalizedResources.WoodQtyText;
                    column.OptionsColumn.AllowEdit = true;
                    column.SummaryItem.SummaryType = DevExpress.Data.SummaryItemType.None;
                }
            }
            if (!isWoodType && column != null)
            {
                gridView.Columns.Remove(column);
            }
        }
        public void ChangeDisplayColumnByCreateFrom(BOSGridControl gridControl)
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo mainobject = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            if (gridControl == null)
                return;
            GridView gridView = (GridView)gridControl.MainView;
            if (gridView == null)
                return;
            GridColumn column = gridView.Columns["ICReceiptItemProductUnitCost"];
            GridColumn columnTotalCost = gridView.Columns["ICReceiptItemTotalCost"];

            if (column != null)
            {
                if (mainobject.ICReceiptCreateFrom == "InvoiceIn")
                {
                    column.OptionsColumn.AllowEdit = false;
                }
                else
                {
                    column.OptionsColumn.AllowEdit = true;
                }
            }
            if (columnTotalCost != null)
            {
                if (mainobject.ICReceiptCreateFrom == "InvoiceIn")
                {
                    columnTotalCost.OptionsColumn.AllowEdit = false;
                }
                else
                {
                    columnTotalCost.OptionsColumn.AllowEdit = false;
                }
            }
        }
        public void ChangeReceiptItemProductQty(ICReceiptItemsInfo objReceiptItemsInfo, out bool isSuccess)
        {
             isSuccess = true;
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo mainobject = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            ICProductTolenrancesController objProductTolerancesController = new ICProductTolenrancesController();
            if (objReceiptItemsInfo.FK_APPurchaseOrderItemID > 0 && CreateFromInvoice == false)
            {
                decimal currentQty = entity.ReceiptItemsList.Where(o1 => o1.FK_APPurchaseOrderItemID == objReceiptItemsInfo.FK_APPurchaseOrderItemID)
                                                            .Sum(o1 => o1.ICReceiptItemProductQty * o1.ICReceiptItemProductFactor);

                ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
                List<ICReceiptItemsInfo> receiptItemList = objReceiptItemsController.GetAllDataByPurchaseOrderItemID(objReceiptItemsInfo.FK_APPurchaseOrderItemID);
                decimal sumQty = receiptItemList.Where(o => o.FK_ICProductID == objReceiptItemsInfo.FK_ICProductID
                                                           && o.FK_APPurchaseOrderID == objReceiptItemsInfo.FK_APPurchaseOrderID
                                                           && o.FK_ICReceiptID != objReceiptItemsInfo.FK_ICReceiptID
                                                           && o.Id != objReceiptItemsInfo.Id)
                                                   .Select(o => o.ICReceiptItemProductExchangeQty).Sum();
                APPurchaseOrderItemsController objPurchaseOrderItemsController = new APPurchaseOrderItemsController();
                APPurchaseOrderItemsInfo objPurchaseOrderItemsInfo = (APPurchaseOrderItemsInfo)objPurchaseOrderItemsController.GetObjectByID(objReceiptItemsInfo.FK_APPurchaseOrderItemID);
                decimal remainedQty = (objPurchaseOrderItemsInfo.APPurchaseOrderItemProductQty - objPurchaseOrderItemsInfo.APPurchaseOrderItemProductCanceledQty) *
                            objPurchaseOrderItemsInfo.APPurchaseOrderItemProductFactor;
                ICProductTolenrancesInfo objProductTolenrancesInfo = objProductTolerancesController.GetProductTolenranceByIDAndType(objReceiptItemsInfo.FK_ICProductID, ProductTolenranceType.Purchase.ToString());
                decimal tolenrancePlus = 0;
                if (objProductTolenrancesInfo != null)
                {
                    if (objProductTolenrancesInfo.ICProductTolenranceCalculateType == ProductTolenranceCalculateType.Percent.ToString())
                        tolenrancePlus = remainedQty * objProductTolenrancesInfo.ICProductTolenrancePlus == null ? 0 : objProductTolenrancesInfo.ICProductTolenrancePlus / 100;
                    else if (objProductTolenrancesInfo.ICProductTolenranceCalculateType == ProductTolenranceCalculateType.Quantity.ToString())
                        tolenrancePlus = objProductTolenrancesInfo.ICProductTolenrancePlus == null ? 0 : objProductTolenrancesInfo.ICProductTolenrancePlus;
                }
                if (objPurchaseOrderItemsInfo == null)
                    objPurchaseOrderItemsInfo = new APPurchaseOrderItemsInfo();
                if (remainedQty + tolenrancePlus >= (currentQty + sumQty))
                    return;
                MessageBox.Show(PurchaseReceiptLocalizedResources.ReceiptQtyCannotBeGreaterThanOrderedQty,
                                CommonLocalizedResources.MessageBoxDefaultCaption,
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Warning);
                objReceiptItemsInfo.ICReceiptItemProductQty = ((objPurchaseOrderItemsInfo.APPurchaseOrderItemProductQty - objPurchaseOrderItemsInfo.APPurchaseOrderItemProductCanceledQty)
                                                               * objPurchaseOrderItemsInfo.APPurchaseOrderItemProductFactor
                                                                 - sumQty - (currentQty - objReceiptItemsInfo.ICReceiptItemProductQty)) / objReceiptItemsInfo.ICReceiptItemProductFactor;
                isSuccess = false;
            }
            else if (objReceiptItemsInfo.FK_APInvoiceInItemID > 0 && CreateFromInvoice == true)
            {
                decimal currentQty = entity.ReceiptItemsList.Where(o1 => o1.FK_APPurchaseOrderItemID == objReceiptItemsInfo.FK_APPurchaseOrderItemID)
                                                            .Sum(o1 => o1.ICReceiptItemProductQty * o1.ICReceiptItemProductFactor);

                ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
                List<ICReceiptItemsInfo> receiptItemList = objReceiptItemsController.GetAllDataByInvoiceInItemID(objReceiptItemsInfo.FK_APInvoiceInItemID);
                decimal sumQty = receiptItemList.Where(o => o.FK_ICProductID == objReceiptItemsInfo.FK_ICProductID
                                                           && o.FK_APInvoiceInID == objReceiptItemsInfo.FK_APInvoiceInID
                                                           && o.FK_ICReceiptID != objReceiptItemsInfo.FK_ICReceiptID
                                                           && o.Id != objReceiptItemsInfo.Id
                                                           )
                                                   .Select(o => o.ICReceiptItemProductExchangeQty).Sum();
                APInvoiceInItemsController objInvoiceInItemsController = new APInvoiceInItemsController();
                APInvoiceInItemsInfo objInvoiceInItemsInfo = (APInvoiceInItemsInfo)objInvoiceInItemsController.GetObjectByID(objReceiptItemsInfo.FK_APInvoiceInItemID);
                if (objInvoiceInItemsInfo == null)
                    objInvoiceInItemsInfo = new APInvoiceInItemsInfo();
                ICProductTolenrancesInfo objProductTolenrancesInfo = objProductTolerancesController.GetProductTolenranceByIDAndType(objReceiptItemsInfo.FK_ICProductID, ProductTolenranceType.Purchase.ToString());
                decimal tolenrancePlus = 0;
                if (objProductTolenrancesInfo != null)
                {
                    if (objProductTolenrancesInfo.ICProductTolenranceCalculateType == ProductTolenranceCalculateType.Percent.ToString())
                        tolenrancePlus = objInvoiceInItemsInfo.APInvoiceInItemProductExchangeQty * objProductTolenrancesInfo.ICProductTolenrancePlus == null ? 0 : objProductTolenrancesInfo.ICProductTolenrancePlus / 100;
                    else if (objProductTolenrancesInfo.ICProductTolenranceCalculateType == ProductTolenranceCalculateType.Quantity.ToString())
                        tolenrancePlus = objProductTolenrancesInfo.ICProductTolenrancePlus == null ? 0 : objProductTolenrancesInfo.ICProductTolenrancePlus;
                }
                if (objInvoiceInItemsInfo.APInvoiceInItemProductExchangeQty + tolenrancePlus >= (currentQty + sumQty))
                    return;
                MessageBox.Show(PurchaseReceiptLocalizedResources.ReceiptQtyCannotBeGreaterThanOrderedQty1,
                                CommonLocalizedResources.MessageBoxDefaultCaption,
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Warning);
                objReceiptItemsInfo.ICReceiptItemProductQty = (objInvoiceInItemsInfo.APInvoiceInItemProductQty - sumQty - (currentQty - objReceiptItemsInfo.ICReceiptItemProductQty)) / objReceiptItemsInfo.ICReceiptItemProductFactor;
                isSuccess = false;
            }
            else return;
            entity.ReceiptItemsList.GridControl.RefreshDataSource();
        }

        public bool CheckAvailablePurchaseDocumentDate()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo mainobject = (ICReceiptsInfo)CurrentModuleEntity.MainObject;

            ACDocumentsController objDocumentsController = new ACDocumentsController();
            List<ACDocumentsInfo> documentsList = objDocumentsController.CheckAvailablePurchaseDocumentDate(mainobject.ICReceiptDate,
                                                                                    string.Empty, string.Join(",", entity.ReceiptItemsList.Select(o1 => o1.FK_APPurchaseOrderItemID.ToString()).ToArray()));
            if (documentsList.Count() > 0)
            {
                MessageBox.Show("Ngày chứng từ hiện tại đang nhỏ hơn các chứng từ sau: \n+"
                            + string.Join("+", documentsList.Select(o1 => string.Format("{0}:{1}\n", o1.ACDocumentNo, o1.ACDocumentDate.ToShortDateString())).ToArray()), CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }
            return true;
        }

        public bool CheckSerialNoInReceiptItemsList()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            List<string> productError = new List<string>();

            foreach (ICReceiptItemsInfo objReceiptItemsInfo in entity.ReceiptItemsList)
            {
                List<ICReceiptItemsInfo> listValidateItems = entity.ReceiptItemsList.Where(p => p.FK_ICProductID == objReceiptItemsInfo.FK_ICProductID
                                                                                   && p.ICReceiptItemProductSerialNo == objReceiptItemsInfo.ICReceiptItemProductSerialNo
                                                                                   && p.ICReceiptItemLotNo == objReceiptItemsInfo.ICReceiptItemLotNo
                                                                                   && p.ICReceiptItemProductUnitCost != objReceiptItemsInfo.ICReceiptItemProductUnitCost).ToList();
                if (listValidateItems.Count > 0)
                {
                    productError.Add(objReceiptItemsInfo.ICReceiptItemProductDesc);
                }
            }
            if (productError.Count > 0)
            {
                MessageBox.Show(string.Format("Mã lô/ Mã kiện (Mã đầu lóng) của sản phẩm trùng nhau nhưng khác đơn giá: \n -{0}", string.Join("\n-", productError.Distinct().ToArray()))
                                 + Environment.NewLine + "Vui lòng kiểm tra lại!"
                                , CommonLocalizedResources.MessageBoxDefaultCaption
                                , MessageBoxButtons.OK
                                , MessageBoxIcon.Exclamation);
                return false;
            }
            else
            {
                return true;
            }    
        }

        public void InitProductPictureImage(int productID)
        {
            if (productID > 0 && ProductPicturePictureBox != null)
            {
                ProductPicturePictureBox.Image = BOSApp.GetProductPictureImageByProductID(productID);
                ProductPicturePictureBox.Properties.SizeMode = DevExpress.XtraEditors.Controls.PictureSizeMode.Zoom;
            }
        }
        public bool CheckValidReceiptDate()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo mainObject = (ICReceiptsInfo)entity.MainObject;
            ICReceiptItemsInfo objReceiptItemsInfo = entity.ReceiptItemsList.Where(o => o.FK_APPurchaseOrderID > 0).FirstOrDefault();
            APPurchaseOrdersController objPurchaseOrdersController = new APPurchaseOrdersController();
            APPurchaseOrdersInfo objPurchaseOrdersInfo = (APPurchaseOrdersInfo)objPurchaseOrdersController.GetObjectByID(objReceiptItemsInfo.FK_APPurchaseOrderID);
            if (objPurchaseOrdersInfo != null)
            {
                if (mainObject.ICReceiptDate.Date < objPurchaseOrdersInfo.APPurchaseOrderDate.Date)
                {
                    MessageBox.Show("Ngày chứng từ không được nhỏ hơn ngày ĐMH", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return false;
                }
                if (mainObject.ICReceiptInvoiceInDate.Date < objPurchaseOrdersInfo.APPurchaseOrderDate.Date)
                {
                    MessageBox.Show("Ngày hoá đơn không được nhỏ hơn ngày ĐMH", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return false;
                }
            }
            return true;
        }
        public void ChangeUpdatePositionLocation(string updatePositionItemLocationName)
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
                objReceiptsInfo.MMUpdatePositionItemPositionName = updatePositionItemLocationName;
                MMUpdatePositionItemsController objUpdatePositionItemsController = new MMUpdatePositionItemsController();
                entity.ReceiptItemsList.ForEach(o =>
                {
                    MMUpdatePositionItemsInfo objUpdatePositionItemsInfo = (MMUpdatePositionItemsInfo)objUpdatePositionItemsController.GetItemByLocationName(updatePositionItemLocationName, o.FK_ICProductID, o.FK_ICStockID, 0);
                    if (objUpdatePositionItemsInfo != null)
                    {
                        o.FK_MMUpdatePositionItemID = objUpdatePositionItemsInfo.MMUpdatePositionItemID;
                    }
                });
                entity.UpdateMainObjectBindingSource();
            }
        }
        public void CreateUpdatePositionsInfo()
        {
            PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objICReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            if (objICReceiptsInfo.FK_ICStockID == 0)
            {
                BOSApp.ShowMessage("Vui lòng chọn mã kho!");
                return;
            }
            guiAddUpdatePositionItems guiAddUpdatePositionItem = new guiAddUpdatePositionItems(objICReceiptsInfo.FK_ICStockID);
            guiAddUpdatePositionItem.Module = this;
            guiAddUpdatePositionItem.ShowDialog();

        }
        public void UpdateQualitySerial()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                PurchaseReceiptEntities entity = (PurchaseReceiptEntities)CurrentModuleEntity;
                ICReceiptsInfo objICReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
                MMFalseConditionalItemsController objFalseConditionalItemsController = new MMFalseConditionalItemsController();
                entity.ReceiptItemsList.ForEach(o =>
                {
                    MMFalseConditionalItemsInfo objFalseConditionalItemsInfo = (MMFalseConditionalItemsInfo)objFalseConditionalItemsController.GetItemBySerialNo(o.ICReceiptItemProductSerialNo);
                    if (objFalseConditionalItemsInfo != null)
                    {
                        o.FK_ICProductAttributeQualityID = objFalseConditionalItemsInfo.FK_ICProductAttributeQualityID;
                        o.ICReceiptItemProductLength = objFalseConditionalItemsInfo.MMFalseConditionalItemProductLength;
                        o.ICReceiptItemProductHeight = objFalseConditionalItemsInfo.MMFalseConditionalItemProductHeight;
                        o.ICReceiptItemProductWidth = objFalseConditionalItemsInfo.MMFalseConditionalItemProductWidth;
                        o.ICReceiptItemWoodQty = objFalseConditionalItemsInfo.MMFalseConditionalItemWoodQty;
                        if (CalculatedPackageVolumnConfigsList == null || CalculatedPackageVolumnConfigsList.Count <= 0)
                        {
                            CalculatedPackageVolumnConfigsList = (new ICCalculatedPackageVolumnConfigsController()).GetAllObjectList();
                        }
                        ICCalculatedPackageVolumnConfigsInfo objCalculatedPackageVolumnConfigsInfo = CalculatedPackageVolumnConfigsList.FirstOrDefault(p => p.STModuleName == this.Name);
                        ICProductsForViewInfo product = BOSApp.CurrentProductList.FirstOrDefault(p => p.ICProductID == o.FK_ICProductID);
                        if (product.ICProductType == ProductType.Lumber.ToString()
                            && objCalculatedPackageVolumnConfigsInfo != null
                            && objCalculatedPackageVolumnConfigsInfo.IsActive
                            && o.ICReceiptItemProductLength * o.ICReceiptItemProductHeight * o.ICReceiptItemProductWidth * o.ICReceiptItemWoodQty != 0M)
                        {
                            o.ICReceiptItemProductQty = o.ICReceiptItemProductLength * o.ICReceiptItemProductHeight * o.ICReceiptItemProductWidth * o.ICReceiptItemWoodQty / 1000000000;
                            o.ICReceiptItemProductExchangeQty = o.ICReceiptItemProductQty * o.ICReceiptItemProductFactor;
                            o.ICReceiptItemProductQty = Math.Round(o.ICReceiptItemProductQty, RoundingNumber.FormatN6, MidpointRounding.AwayFromZero);
                            o.ICReceiptItemProductExchangeQty = Math.Round(o.ICReceiptItemProductExchangeQty, RoundingNumber.FormatN6, MidpointRounding.AwayFromZero);
                            entity.ReceiptItemsList.GridControl?.RefreshDataSource();
                        }
                        o.ICReceiptItemCode01Combo = objFalseConditionalItemsInfo.MMFalseConditionalItemHumidity.ToString("n2");
                    }    
                });
            }
        }
    }
    #endregion
}