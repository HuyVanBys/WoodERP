using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Windows.Forms;
using DevExpress.XtraTreeList;
using DevExpress.XtraTreeList.Nodes;
using DevExpress.XtraTreeList.Columns;
using BOSLib;
using Localization;
using System.Linq;
using BOSCommon;
using System.Reflection;

namespace BOSERP.Modules.ProductTemplate
{
    #region ProjectTypeModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ProductTemplateModule
    //Created Date:Monday, March 01, 2010
    //-----------------------------------------------------------

    public class ProductTemplateModule : BaseModuleERP
    {
        #region Declare Constant
        #endregion

        #region Variables
        #endregion

        public ProductTemplateModule()
        {
            Name = "ProductTemplate";
            CurrentModuleEntity = new ProductTemplateEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();
        }

        public void DiscardProductTemplate()
        {
            ProductTemplateEntities entity = (ProductTemplateEntities)CurrentModuleEntity;
            ICProductTemplatesInfo mainobject = (ICProductTemplatesInfo)CurrentModuleEntity.MainObject;
            if (mainobject.ICProductTemplateStatus != ProductTemplateStatus.Complete.ToString())
                return;
            entity.SetPropertyChangeEventLock(false);
            mainobject.ICProductTemplateStatus = ProductTemplateStatus.Canceled.ToString();
            entity.UpdateMainObject();
            entity.SetPropertyChangeEventLock(true);
            InvalidateToolbar();
        }

        public void ActionApprove()
        {
            ProductTemplateEntities entity = (ProductTemplateEntities)CurrentModuleEntity;
            ICProductTemplatesInfo mainobject = (ICProductTemplatesInfo)CurrentModuleEntity.MainObject;
            entity.SetPropertyChangeEventLock(false);
            mainobject.ICProductTemplateStatus = ProductTemplateStatus.Complete.ToString();
            entity.UpdateMainObject();
            entity.SetPropertyChangeEventLock(true);
            InvalidateToolbar();
        }

        public override void InvalidateToolbar()
        {
            base.InvalidateToolbar();
            ICProductTemplatesInfo mainobject = (ICProductTemplatesInfo)CurrentModuleEntity.MainObject;
            if (mainobject.ICProductTemplateStatus == ProductTemplateStatus.New.ToString())
            {
                ParentScreen.SetEnableOfToolbarButton("Approve", true);
                ParentScreen.SetEnableOfToolbarButton("DiscardProductTemplate", false);
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, true);
            }
            else if (mainobject.ICProductTemplateStatus == ProductTemplateStatus.Complete.ToString())
            {
                ParentScreen.SetEnableOfToolbarButton("Approve", false);
                ParentScreen.SetEnableOfToolbarButton("DiscardProductTemplate", true);
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
            }
            else if (mainobject.ICProductTemplateStatus == ProductTemplateStatus.Canceled.ToString())
            {
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
                ParentScreen.SetEnableOfToolbarButton("Approve", false);
                ParentScreen.SetEnableOfToolbarButton("DiscardProductTemplate", false);
            }
        }

        public void AddProductTemplateConfig(int configID, bool isParent)
        {
            ProductTemplateEntities entity = (ProductTemplateEntities)CurrentModuleEntity;
            ICProductTemplateConfigsController objProductTemplateConfigsController = new ICProductTemplateConfigsController();
            List<ICProductTemplateConfigsInfo> productTemplateConfigs = objProductTemplateConfigsController.GetAllProductTemplateByConfigID(configID);
            ICProductTemplateItemsInfo objProductTemplateItemsInfo = (ICProductTemplateItemsInfo)entity.ProductTemplateItemsTreeList.CurrentObject;
            ICProductTemplateConfigsInfo obj = productTemplateConfigs.Where(o => o.ICProductTemplateConfigID == configID).FirstOrDefault();
            if (obj == null)
                return;

            ICProductTemplateItemsInfo child = ToProductTemplateItem(obj);
            if (objProductTemplateItemsInfo != null && !isParent)
            {
                if (objProductTemplateItemsInfo.SubList == null)
                {
                    objProductTemplateItemsInfo.SubList = new BOSTreeList();
                }
                objProductTemplateItemsInfo.SubList.Add(child);
            }
            else
            {
                entity.ProductTemplateItemsTreeList.Add(child);
            }
            child.SubList = new BOSTreeList();
            GenerateProductTemplateItem(child.SubList, productTemplateConfigs, obj.ICProductTemplateConfigID);
            RefreshTreeView(entity.ProductTemplateItemsTreeList);
        }

        public void RefreshTreeView(BOSTreeList treeList)
        {
            if (treeList != null && treeList.TreeListControl != null)
            {
                treeList.TreeListControl.RefreshDataSource();
                treeList.TreeListControl.ExpandAll();
                treeList.TreeListControl.BestFitColumns();
            }
        }

        public ICProductTemplateItemsInfo ToProductTemplateItem(ICProductTemplateConfigsInfo item)
        {
            return new ICProductTemplateItemsInfo()
            {
                ICProductTemplateItemNo = item.ICProductTemplateConfigNo,
                ICProductTemplateItemName = item.ICProductTemplateConfigName,
                NumberOfChild = item.NumberOfChild
            };
        }

        private void GenerateProductTemplateItem(IBOSTreeList treeList, List<ICProductTemplateConfigsInfo> collections, int parentID)
        {
            int sortOrder = 0;
            if (treeList != null && collections != null)
            {
                foreach (ICProductTemplateConfigsInfo item in collections)
                {
                    if (item.ICProductTemplateConfigParentID == parentID)
                    {
                        ICProductTemplateConfigsInfo objProductTemplatesInfo = (ICProductTemplateConfigsInfo)item.Clone();
                        if (objProductTemplatesInfo.NumberOfChild == 0)
                            objProductTemplatesInfo.NumberOfChild = collections.Where(s => s.ICProductTemplateConfigParentID == objProductTemplatesInfo.ICProductTemplateConfigID).Count();

                        objProductTemplatesInfo.BackupObject = (ICProductTemplateConfigsInfo)objProductTemplatesInfo.Clone();
                        ICProductTemplateItemsInfo objProductTemplateItemsInfo = ToProductTemplateItem(objProductTemplatesInfo);
                        objProductTemplateItemsInfo.ICProductTemplateItemSortOrder = sortOrder;
                        treeList.Add(objProductTemplateItemsInfo);

                        if (objProductTemplateItemsInfo.NumberOfChild > 0)
                        {
                            object objType = treeList.GetType().InvokeMember("", BindingFlags.CreateInstance, null, null, null);
                            objProductTemplateItemsInfo.SubList = (BOSTreeList)objType;
                            objProductTemplateItemsInfo.SubList.InitBOSList(this.CurrentModuleEntity, TableName.ICProductTemplateItemsTableName, TableName.ICProductTemplateItemsTableName);
                            this.GenerateProductTemplateItem(objProductTemplateItemsInfo.SubList, collections, objProductTemplatesInfo.ICProductTemplateConfigID);
                        }
                    }
                    sortOrder++;
                }
            }
        }

        private void InvalidateTreeList(IBOSTreeList treeList, List<ICProductTemplateItemsInfo> collections, int parentID)
        {
            int sortOrder = 0;
            if (treeList != null && collections != null)
            {
                foreach (ICProductTemplateItemsInfo item in collections)
                {
                    if (item.ICProductTemplateItemParentID == parentID)
                    {
                        ICProductTemplateItemsInfo objProductTemplatesInfo = (ICProductTemplateItemsInfo)item.Clone();
                        if (objProductTemplatesInfo.NumberOfChild == 0)
                            objProductTemplatesInfo.NumberOfChild = collections.Where(s => s.ICProductTemplateItemParentID == objProductTemplatesInfo.ICProductTemplateItemID).Count();

                        objProductTemplatesInfo.BackupObject = (ICProductTemplateItemsInfo)objProductTemplatesInfo.Clone();
                        objProductTemplatesInfo.ICProductTemplateItemSortOrder = sortOrder;
                        treeList.Add(objProductTemplatesInfo);
                        if (objProductTemplatesInfo.NumberOfChild > 0)
                        {
                            object objType = treeList.GetType().InvokeMember("", BindingFlags.CreateInstance, null, null, null);
                            objProductTemplatesInfo.SubList = (BOSTreeList)objType;
                            objProductTemplatesInfo.SubList.InitBOSList(this.CurrentModuleEntity, TableName.ICProductTemplateItemsTableName, TableName.ICProductTemplateItemsTableName);
                            this.InvalidateTreeList(objProductTemplatesInfo.SubList, collections, objProductTemplatesInfo.ICProductTemplateItemID);
                        }
                    }
                    sortOrder++;
                }
            }
        }

        public void DeleteProductTemplateItemTreeList()
        {
            ProductTemplateEntities entity = (ProductTemplateEntities)CurrentModuleEntity;
            entity.ProductTemplateItemsTreeList.RemoveSelectedRowObjectFromList();
        }

        public override void Invalidate(int iObjectID)
        {
            base.Invalidate(iObjectID);
            ProductTemplateEntities entity = (ProductTemplateEntities)CurrentModuleEntity;
            ICProductTemplateItemsController objProductTemplateItemsController = new ICProductTemplateItemsController();
            List<ICProductTemplateItemsInfo> productTemplateItemList = objProductTemplateItemsController.GetProductTemplateItemByProductTemplateID(iObjectID);
            entity.ProductTemplateItemsTreeList.Clear();
            InvalidateTreeList(entity.ProductTemplateItemsTreeList, productTemplateItemList, 0);
            RefreshTreeView(entity.ProductTemplateItemsTreeList);
        }

        protected override DataSet GetSearchData(ref string searchQuery)
        {
            ICProductTemplatesController objProductTemplatesController = new ICProductTemplatesController();
            ICProductTemplatesInfo searchObject = (ICProductTemplatesInfo)CurrentModuleEntity.SearchObject;

            DataSet ds = objProductTemplatesController.GetProductTemplateDataSet(searchObject.FK_HREmployeeID,
                                                                                 searchObject.ICProductTemplateNo,
                                                                                 searchObject.ICProductTemplateName,
                                                                                 searchObject.ICProductTemplateFromDate,
                                                                                 searchObject.ICProductTemplateToDate,
                                                                                 searchObject.FK_ICProductID);
            return ds;
        }
    }
    #endregion
}