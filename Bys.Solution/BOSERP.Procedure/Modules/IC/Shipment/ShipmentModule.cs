using System;
using BOSCommon;
using BOSCommon.Constants;
using BOSComponent;
using BOSERP.GenaralLeadger;
using BOSLib;
using BOSReport;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraReports.UI;
using Localization;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows.Forms;
using System.IO;
using System.Threading;
using System.Diagnostics;
using Microsoft.Office.Interop.Excel;

namespace BOSERP.Modules.Shipment
{
    #region ShipmentModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ShipmentModule
    //Created Date:Monday, April 14, 2008
    //-----------------------------------------------------------

    public class ShipmentModule : GLShipmentModule
    {
        #region Constants
        public const string ShipmentItemGridControlName = "fld_dgcICShipmentItems";
        public const string DocumentEntryGridControlName = "fld_dgcACDocumentEntrys";
        public const string SearchBranchLookupEditControlName = "fld_lkeFK_BRBranchID";
        public const string ProductLookupEditControlName = "fld_lkeFK_ICProductID";
        public const string ProductPicturePictureBoxName = "fld_pteICShipmentItemProductPicture";
        #endregion

        #region Public properties
        public BOSLookupEdit SearchBranchLookupEditControl = null;
        public List<ADDataViewPermissionsInfo> CurrentModuleDataViewPermissionList;
        public List<BRBranchsInfo> BranchList;
        public List<ICStocksInfo> stockList = null;
        public List<ICImportAndExportReasonsInfo> importAndExportReasonList = null;
        public ICShipmentItemsGridControl ShipmentItemGridControl;
        public BOSLookupEdit ProductLookupEditControl;
        private BOSPictureEdit ProductPicturePictureBox;
        #endregion

        public ShipmentModule()
        {
            Name = "Shipment";
            CurrentModuleEntity = new ShipmentEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();
            //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
            GetCurrentModuleDataViewPermission();
            SearchBranchLookupEditControl = (BOSLookupEdit)Controls[SearchBranchLookupEditControlName];
            SearchBranchLookupEditControl.Properties.DataSource = BranchList;
            //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], END
            ShipmentItemGridControl = (ICShipmentItemsGridControl)Controls[ShipmentItemGridControlName];
            StartGettingInventoryThread();
            stockList = new List<ICStocksInfo>();
            importAndExportReasonList = new List<ICImportAndExportReasonsInfo>();
            ProductLookupEditControl = (BOSLookupEdit)Controls[ProductLookupEditControlName];
            if(ProductLookupEditControl != null)
            {
                ProductLookupEditControl.Properties.DataSource = GetDataSourceForProductLookupEdit(string.Empty);
            }
            ProductPicturePictureBox = (BOSPictureEdit)Controls[ProductPicturePictureBoxName];
        }

        public List<ICProductsInfo> GetDataSourceForProductLookupEdit(string type)
        {
            ICProductsController objProductsController = new ICProductsController();
            string[] arrProductType = {
                ProductType.SemiProduct.ToString(),
                ProductType.Service.ToString(),
                ProductType.Work.ToString(),
                ProductType.Section.ToString()
            };
            if (string.IsNullOrEmpty(type)) type = string.Join(",", arrProductType);
            List<ICProductsInfo> productList = objProductsController.GetAllProductNotConstrainProductTypesLookupEdit(type);
            if (productList == null)
                productList = new List<ICProductsInfo>();
            productList.Insert(0, new ICProductsInfo());
            return productList;
        }

        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
        public void GetCurrentModuleDataViewPermission()
        {
            CurrentModuleDataViewPermissionList = BOSApp.CurrentADDataViewPermissionList.Where(i => i.STModuleName == Name && i.ADDataViewPermissionType == ADDataViewPermissionType.Module).ToList();

            List<int> branchIDList = new List<int>();
            foreach (ADDataViewPermissionsInfo dataViewPermissionsInfo in CurrentModuleDataViewPermissionList)
            {
                branchIDList.Add(dataViewPermissionsInfo.FK_BRBranchID);
            }

            if (branchIDList.Count == 0)
            {
                BranchList = new List<BRBranchsInfo>();
            }
            else
            {
                BRBranchsController objBranchsController = new BRBranchsController();
                List<BRBranchsInfo> branchList = objBranchsController.GetAllBranches();

                BranchList = branchList.Where(i => branchIDList.IndexOf(i.BRBranchID) > -1).ToList();
            }
        }
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], END

        protected override DataSet GetSearchData(ref string searchQuery)
        {
            ICShipmentsController objShipmentsController = new ICShipmentsController();
            ACObjectsController objObjectsController = new ACObjectsController();
            ICShipmentsInfo searchObject = (ICShipmentsInfo)CurrentModuleEntity.SearchObject;
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByAccessKey(searchObject.ACObjectAccessKey);
            
            //DataSet ds = objShipmentsController.GetShipmentListAllType(
            //                                               searchObject.ICShipmentNo,
            //                                               objObjectsInfo.ACObjectID,
            //                                               objObjectsInfo.ACObjectType,
            //                                               searchObject.FK_ICStockID,
            //                                               searchObject.FK_HREmployeeID,
            //                                               searchObject.ICShipmentTypeCombo,
            //                                               null,
            //                                               searchObject.ShipmentDateFrom,
            //                                               searchObject.ShipmentDateTo);

            DataSet ds;
            if (SearchBranchLookupEditControl.EditValue.ToString() == "" || SearchBranchLookupEditControl.EditValue.ToString() == "0")
            {
                if (BranchList.Count == 0)
                {
                    ds = objShipmentsController.GetDataSetByID(-1);
                }
                else
                {
                    ds = objShipmentsController.GetShipmentListAllType(searchObject.ICShipmentNo,
                                                                       BranchList,
                                                                       objObjectsInfo.ACObjectID,
                                                                       objObjectsInfo.ACObjectType,
                                                                       searchObject.FK_ICStockID,
                                                                       searchObject.FK_HREmployeeID,
                                                                       searchObject.ICShipmentTypeCombo,
                                                                       null,
                                                                       searchObject.ShipmentDateFrom,
                                                                       searchObject.ShipmentDateTo);
                }
            }
            else
            {
                ds = objShipmentsController.GetShipmentListAllType(searchObject.ICShipmentNo,
                                                                   searchObject.FK_BRBranchID,
                                                                   objObjectsInfo.ACObjectID,
                                                                   objObjectsInfo.ACObjectType,
                                                                   searchObject.FK_ICStockID,
                                                                   searchObject.FK_HREmployeeID,
                                                                   searchObject.ICShipmentTypeCombo,
                                                                   null,
                                                                   searchObject.ShipmentDateFrom,
                                                                   searchObject.ShipmentDateTo);
            }
            return ds;
        }

        public override void ResetSearchObject()
        {
            base.ResetSearchObject();

            ICShipmentsInfo searchObject = (ICShipmentsInfo)CurrentModuleEntity.SearchObject;
            searchObject.ICShipmentTypeCombo = ShipmentType.Shipment.ToString();
        }

        public override void InvalidateToolbar()
        {
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)CurrentModuleEntity.MainObject;
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, false);
            if (objShipmentsInfo.ICShipmentID > 0)
            {
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, objShipmentsInfo.ICShipmentPostedStatus != PostedTransactionStatus.Posted.ToString());
                if (Toolbar.IsEditAction())
                {
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, true);
                }
            }
            base.InvalidateToolbar();
        }

        public void AddItemToShipmentItemsList()
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objICShipmentsInfo = (ICShipmentsInfo)entity.MainObject;
            //ICShipmentItemsInfo item = (ICShipmentItemsInfo)entity.ModuleObjects[TableName.ICShipmentItemsTableName];
            ICShipmentItemsInfo item = (ICShipmentItemsInfo)(entity.ModuleObjects[TableName.ICShipmentItemsTableName]).Clone();
            ICProductsController objProductsController = new ICProductsController();
            bool isFirstAddItem = entity.ShipmentItemList.Count() == 0;
            if (item.FK_ICProductID > 0)
            {                
                ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);
                if (objProductsInfo != null && objProductsInfo.HasComponent)
                {
                    List<ICProductsForViewInfo> listProduct = new List<ICProductsForViewInfo>();
                    listProduct = BOSApp.CurrentProductList.Where(o => o.ICProductID == objProductsInfo.ICProductID).ToList();
                    guiShowProductHasComponent<ICProductsInfo> guiProduct = new guiShowProductHasComponent<ICProductsInfo>(listProduct);
                    guiProduct.Module = this;
                    guiProduct.ShowDialog();
                    if (guiProduct.DialogResult == DialogResult.OK)
                    {
                        ICProductsForViewInfo objProduct1 = guiProduct.CollectionItemList.FirstOrDefault();
                        ICProductComponentsController objProductComponentsController = new ICProductComponentsController();
                        List<ICProductComponentsInfo> listComponents = objProductComponentsController.GetProductComponentListByProductID(objProduct1.ICProductID);
                        foreach (ICProductComponentsInfo objProductComponentsInfo in listComponents)
                        {
                            item = new ICShipmentItemsInfo();
                            item.FK_ICProductID = objProductComponentsInfo.FK_ICProductComponentChildID;
                            entity.SetValuesAfterValidateProduct(item.FK_ICProductID, item);
                            ICProductsInfo objProductInfo = BOSApp.GetProductFromCurrentProductList(item.FK_ICProductID);
                            if (objProductInfo != null)
                            {
                                item.FK_ACAccountID = objProductsInfo.FK_ACAccountID;
                            }
                            item.ICShipmentItemProductQty = objProductComponentsInfo.ICProductComponentQty * objProduct1.ICProductItemQty;
                            item.ICShipmentItemProductExchangeQty = item.ICShipmentItemProductQty * item.ICShipmentItemProductFactor;
                            item.ICProductDesc = objProductComponentsInfo.ICProductDesc;
                            item.ICShipmentItemProductSupplierNo = objProductComponentsInfo.ICProductSupplierNo;
                            item.FK_ICImportAndExportReasonID = objICShipmentsInfo.FK_ICImportAndExportReasonID;
                            item.FK_ACUnfinishedConstructionCostID = objICShipmentsInfo.FK_ACUnfinishedConstructionCostID;
                            item.FK_MMBatchProductID = objICShipmentsInfo.FK_MMBatchProductID;
                            entity.ShipmentItemList.Add(item);
                        }
                    }
                }
                else
                {
                    entity.ShipmentItemList.AddObjectToList();
                    item = (ICShipmentItemsInfo)entity.ShipmentItemList.LastOrDefault();

                    if (item != null)
                    {
                        entity.SetValuesAfterValidateProduct(item.FK_ICProductID, item);
                        if (objProductsInfo != null)
                        {
                            item.FK_ACAccountID = objProductsInfo.FK_ACAccountID;
                            item.FK_ICImportAndExportReasonID = objICShipmentsInfo.FK_ICImportAndExportReasonID;
                            item.FK_ACUnfinishedConstructionCostID = objICShipmentsInfo.FK_ACUnfinishedConstructionCostID;
                            item.FK_MMBatchProductID = objICShipmentsInfo.FK_MMBatchProductID;
                            item.FK_ACSegmentID = objICShipmentsInfo.FK_ACSegmentID;
                        }
                    }
                }
                UpdateTotalAmount();
                if (isFirstAddItem)
                    ChangeDisplayAndDataItemListGridView();
                entity.ShipmentItemList.GridControl.RefreshDataSource();
            }
        }

        public void ChangeItemFromShipmentItemsList()
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            entity.SetProductPriceByProductUnitPrice();
            entity.ShipmentItemList.ChangeObjectFromList();
            UpdateTotalAmount();
        }

        public void ChangeItemImportAndExportReason(ICShipmentItemsInfo item)
        {
            UpdateTotalAmount();
        }

        public void DeleteItemFromShipmentItemsList()
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)entity.MainObject;
            if (objShipmentsInfo.ICShipmentTypeCombo != ShipmentType.SaleShipment.ToString())
            {
                entity.ShipmentItemList.RemoveSelectedRowObjectFromList();
                UpdateTotalAmount();
            }
        }

        /// <summary>
        /// Called when the user changes the stock
        /// </summary>
        /// <param name="stockID">Selected stock id</param>
        public void ChangeStock(int stockID)
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)entity.MainObject;
            objShipmentsInfo.FK_ICStockID = stockID;
            if (!Toolbar.IsNullOrNoneAction())
            {
                if (entity.ShipmentItemList.Count > 0)
                {
                    if (MessageBox.Show(ShipmentLocalizedResources.ConfirmChangeItemStockMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        foreach (ICShipmentItemsInfo item in entity.ShipmentItemList)
                        {
                            item.FK_ICStockID = stockID;
                            item.FK_ICProductSerieID = 0;
                            item.ICShipmentItemProductSerialNo = string.Empty;
                            item.ICShipmentItemLotNo = string.Empty;
                        }
                        entity.ShipmentItemList.GridControl.RefreshDataSource();
                    }
                }
            }
            UpdateTotalAmount();
        }

        public void ChangeImportAndExportReason(int importAndExportReasonID)
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)entity.MainObject;
            objShipmentsInfo.FK_ICImportAndExportReasonID = importAndExportReasonID;
            if (!Toolbar.IsNullOrNoneAction())
            {
                if (entity.ShipmentItemList.Count > 0)
                {
                    entity.ShipmentItemList.ForEach(o => o.FK_ICImportAndExportReasonID = importAndExportReasonID);
                    entity.ShipmentItemList.GridControl.RefreshDataSource();
                }
            }
            UpdateTotalAmount();
        }

        public void ChangeObject(string objectAccessKey)
        {
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo obj = objObjectsController.GetObjectByAccessKey(objectAccessKey);
            ICShipmentsInfo shipment = (ICShipmentsInfo)CurrentModuleEntity.MainObject;
            shipment.ACObjectAccessKey = objectAccessKey;
            obj = objObjectsController.GetObjectByIDAndType(obj.ACObjectID, obj.ACObjectType);
            if (obj != null)
            {
                shipment.ICShipmentDeliveryContactName = obj.ACObjectName;
                CurrentModuleEntity.UpdateMainObjectBindingSource();
            }
        }

        public override int ActionSave()
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo shipment = (ICShipmentsInfo)CurrentModuleEntity.MainObject;
            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            entity.ShipmentItemList.EndCurrentEdit();
            UpdateTotalAmount();
            if (string.IsNullOrEmpty(shipment.ICShipmentProductType))
            {
                MessageBox.Show("Vui lòng chọn loại hàng hóa!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return 0;
            }

            bool isWoodType = BOSApp.IsWoodTypeDocument(shipment.ICShipmentProductType, entity.ShipmentItemList.FirstOrDefault());

            foreach (ICShipmentItemsInfo objShipmentItemsInfo in entity.ShipmentItemList)
            {
                objProductsInfo = BOSApp.GetProductFromCurrentProductList(objShipmentItemsInfo.FK_ICProductID);
                if (objProductsInfo.ICProductType != ProductType.Service.ToString()
                    && !objProductsInfo.IsAsset
                    && (objProductsInfo.ICPriceCalculationMethodMethod != PriceCalculationMethod.Average.ToString()
                        || (objProductsInfo.ICPriceCalculationMethodMethod == PriceCalculationMethod.Average.ToString() && objShipmentItemsInfo.ICShipmentItemIsSpecificCalculation)))
                {
                    if (objShipmentItemsInfo.FK_ICProductSerieID == 0)
                    {
                        MessageBox.Show(string.Format(ShipmentLocalizedResources.ItemSerieNoIsRequiredMessage, objShipmentItemsInfo.ICShipmentItemProductDesc), CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return 0;
                    }

                    if (isWoodType && (string.IsNullOrEmpty(objShipmentItemsInfo.ICShipmentItemLotNo) || string.IsNullOrEmpty(objShipmentItemsInfo.ICShipmentItemProductSerialNo)))
                    {
                        MessageBox.Show(string.Format("Vui lòng nhập mã lô hàng/ mã kiện(mã đầu lóng) cho sản phẩm {0}", objShipmentItemsInfo.ICShipmentItemProductDesc), CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return 0;
                    }
                }
            }
            if (shipment.ICShipmentProductType != ProductType.SemiProduct.ToString() && shipment.ICShipmentProductType != ProductType.Product.ToString())
            if (entity.ShipmentItemList.CheckAvailableQty(TransactionUtil.cstInventoryShipment, this.Name))
            {
                return 0;
            }

            if (entity.ShipmentItemList.IsInvalidInventory(TransactionUtil.cstInventoryShipment))
            {
                return 0;
            }
            
            bool isValid = ApprovedShipment();
            if (isValid == false)
                return 0;

            if (shipment.ICShipmentTypeCombo == ShipmentType.SaleShipment.ToString())
            {
                ARInvoicesController objInvoicesController = new ARInvoicesController();
                ARInvoiceItemsController objInvoiceItemsController = new ARInvoiceItemsController();
                ACDocumentsController objDocumentsController = new ACDocumentsController();
                ARInvoicesInfo objInvoicesInfo = (ARInvoicesInfo)objInvoicesController.GetObjectByNo(shipment.ICShipmentNo);
                List<ACDocumentsInfo> documentList = objDocumentsController.GetListObjectByNo(shipment.ICShipmentNo);
                if (objInvoicesInfo != null)
                {
                    foreach (ICShipmentItemsInfo item in entity.ShipmentItemList)
                    {
                        ARInvoiceItemsInfo objInvoiceItemsInfo = (ARInvoiceItemsInfo)objInvoiceItemsController.GetObjectByID(item.FK_ARInvoiceItemID);
                        if (objInvoiceItemsInfo != null)
                        {
                            objInvoiceItemsInfo.FK_ICStockID = item.FK_ICStockID;
                            objInvoiceItemsInfo.FK_ICProductSerieID = item.FK_ICProductSerieID;
                            objInvoiceItemsInfo.ARInvoiceItemProductSerialNo = item.ICShipmentItemProductSerialNo;
                            objInvoiceItemsController.UpdateObject(objInvoiceItemsInfo);
                        }
                    }

                    objInvoicesInfo.ARInvoiceDate = shipment.ICShipmentDate;
                    objInvoicesController.UpdateObject(objInvoicesInfo);
                }
                foreach (ACDocumentsInfo document in documentList)
                {
                    document.ACDocumentDate = shipment.ICShipmentDate;
                    objDocumentsController.UpdateObject(document);
                }
            }

            int shipmentID = base.ActionSave();
            if (shipmentID > 0)
            {
                ActionPosted();
            }
            return shipmentID;
        }

        /// <summary>
        /// Update the total amount of the shipment
        /// </summary>
        public override void UpdateTotalAmount()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
                entity.UpdateTotalAmount();
                // UpdateDocumentEntries();
            }
        }

        #region Accounting
        protected override void UpdateDocumentEntries()
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)entity.MainObject;
            entity.DocumentEntryList.Clear();
            ICProductsController productController = new ICProductsController();
            ACDocTypeEntrysController objDocTypeEntrysController = new ACDocTypeEntrysController();
            ICImportAndExportReasonsController objImportAndExportReasonsController = new ICImportAndExportReasonsController();

            string documentType = AccDocumentType.XuatKho.ToString();
            string entryType = AccEntryType.XuatKhoDieuChinh.ToString();

            if (objShipmentsInfo.ICShipmentTypeCombo == ShipmentType.PresentingShipment.ToString())
            {
                documentType = AccDocumentType.XuatKhoTangHang.ToString();
                entryType = AccEntryType.XuatKhoTangHang.ToString();
            }
            else if (objShipmentsInfo.ICShipmentTypeCombo == ShipmentType.SaleShipment.ToString())
            {
                documentType = AccDocumentType.XuatKhoBanHang.ToString();
                entryType = AccEntryType.XuatKhoBanHang.ToString();
            }
            else if (objShipmentsInfo.ICShipmentTypeCombo == ShipmentType.EquipmentDecreasing.ToString())
            {
                documentType = AccDocumentType.GiamCCDC.ToString();
                entryType = AccEntryType.GhiGiamCCDC.ToString();
            }
            else if (objShipmentsInfo.ICShipmentTypeCombo == ShipmentType.EquipmentShipment.ToString())
            {
                documentType = AccDocumentType.XuatCCDC.ToString();
                entryType = AccEntryType.XuatCCDC.ToString();
            }

            ACDocTypeEntrysInfo defaultEntry = objDocTypeEntrysController.GetEntryByDocumentTypeAndEntryType(
                                                                        documentType,
                                                                        entryType);
            Dictionary<ACDocumentEntrysInfo, List<ICShipmentItemsInfo>> documentEntryAccounts = new Dictionary<ACDocumentEntrysInfo, List<ICShipmentItemsInfo>>();
            //List<int> productAccountID = new List<int>();

            if (entity.ShipmentItemList != null)
            {

                foreach (ICShipmentItemsInfo shipmentItem in entity.ShipmentItemList)
                {
                    ICImportAndExportReasonsController objICImportAndExportReasonsController = new ICImportAndExportReasonsController();
                    int debitAccountID = 0;
                    ICImportAndExportReasonsInfo objICImportAndExportReasonsInfo = importAndExportReasonList.FirstOrDefault(o => o.ICImportAndExportReasonID == shipmentItem.FK_ICImportAndExportReasonID);
                    if (objICImportAndExportReasonsInfo != null && objICImportAndExportReasonsInfo.FK_ACAcountID > 0)
                        debitAccountID = objICImportAndExportReasonsInfo.FK_ACAcountID;
                    else
                    {
                        objICImportAndExportReasonsInfo = (ICImportAndExportReasonsInfo)objICImportAndExportReasonsController.GetObjectByID(shipmentItem.FK_ICImportAndExportReasonID);
                        if (objICImportAndExportReasonsInfo != null && objICImportAndExportReasonsInfo.FK_ACAcountID > 0)
                        {
                            debitAccountID = objICImportAndExportReasonsInfo.FK_ACAcountID;
                            importAndExportReasonList.Add(objICImportAndExportReasonsInfo);
                        }
                    }
                    ICStocksController objICStocksController = new ICStocksController();
                    int creditAccountID = 0;
                    ICStocksInfo objICStocksInfo = stockList.FirstOrDefault(o => o.ICStockID == shipmentItem.FK_ICStockID);
                    if (objICStocksInfo != null && objICStocksInfo.FK_ACAccountID > 0)
                        creditAccountID = objICStocksInfo.FK_ACAccountID;
                    else
                    {
                        objICStocksInfo = (ICStocksInfo)objICStocksController.GetObjectByID(shipmentItem.FK_ICStockID);
                        if (objICStocksInfo != null && objICStocksInfo.FK_ACAccountID > 0)
                        {
                            creditAccountID = objICStocksInfo.FK_ACAccountID;
                            stockList.Add(objICStocksInfo);
                        }
                        if (creditAccountID == 0)
                        {
                            ICProductsController objICProductsController = new ICProductsController();
                            ICProductsInfo objICProductsInfo = (ICProductsInfo)objICProductsController.GetObjectByID(shipmentItem.FK_ICProductID);
                            if (objICProductsInfo != null && objICProductsInfo.FK_ACAccountID > 0)
                                creditAccountID = objICProductsInfo.FK_ACAccountID;
                        }
                    }
                    //ICProductsInfo product = productController.GetObjectByID(shipmentItem.FK_ICProductID) as ICProductsInfo;
                    ACDocumentEntrysInfo entry = entity.DocumentEntryList.FirstOrDefault(e => e.ACEntryTypeName == entryType
                                                                        && e.FK_ACDebitAccountID == debitAccountID
                                                                        && e.FK_ACCreditAccountID == creditAccountID);
                    if (entry == null && defaultEntry != null)
                    {
                        entry = AccountHelper.AddItemToDocumentEntryList(defaultEntry, entity.DocumentEntryList);
                        if (debitAccountID > 0)
                            entry.FK_ACDebitAccountID = debitAccountID;
                        if (creditAccountID > 0)
                            entry.FK_ACCreditAccountID = creditAccountID;
                    }
                    if (entry != null && !documentEntryAccounts.ContainsKey(entry))
                    {
                        documentEntryAccounts.Add(entry, new List<ICShipmentItemsInfo>());
                        //productAccountID.Add(entry.FK_ACCreditAccountID);
                    }
                    documentEntryAccounts[entry].Add(shipmentItem);
                }
            }

            //update document entry amount
            if (documentEntryAccounts.Count != 0)
            {
                ACDocumentEntrysInfo item = null;
                foreach (ACDocumentEntrysInfo entry in documentEntryAccounts.Keys)
                {
                    entry.ACDocumentEntryAmount = documentEntryAccounts[entry].Sum(i => i.ICShipmentItemProductUnitCost * i.ICShipmentItemProductQty);
                    entry.ACDocumentEntryExchangeAmount = entry.ACDocumentEntryAmount * objShipmentsInfo.ICShipmentExchangeRate;
                    BOSApp.RoundByCurrency(entry, "ACDocumentEntryExchangeAmount", BOSApp.CurrentCompanyInfo.FK_GECurrencyID);
                    BOSApp.RoundByCurrency(entry, "ACDocumentEntryAmount", objShipmentsInfo.FK_GECurrencyID);
                    item = entry;
                }


                ACDocumentsInfo objDocumentsInfo = entity.DocumentList.FirstOrDefault(d => d.ACDocumentTypeName == documentType);
                if (objDocumentsInfo == null)
                {
                    objDocumentsInfo = new ACDocumentsInfo();
                    objDocumentsInfo.FK_ACDocumentTypeID = item.FK_ACDocumentTypeID;
                    objDocumentsInfo.ACDocumentTypeName = item.ACDocumentTypeName;
                    entity.DocumentList.Add(objDocumentsInfo);
                }
            }

            foreach (ACDocumentEntrysInfo item in entity.DocumentEntryList.ToList())
            {
                if (item.ACDocumentEntryAmount == 0)
                    entity.DocumentEntryList.Remove(item);
            }
            entity.DocumentEntryList.GridControl.RefreshDataSource();
        }

        #endregion

        public void AddProductPackageItemDetails()
        {
            if (IsEditable())
            {
                ActionEdit();
            }
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)CurrentModuleEntity.MainObject;
            ICShipmentPackageItemDetailsController objShipmentPackageItemDetailsController = new ICShipmentPackageItemDetailsController();
            ICProductPackageItemDetailsController objProductPackageItemDetailsController = new ICProductPackageItemDetailsController();
            entity.ShipmentPackageItemDetailList.Clear();
            entity.DeleteShipmentPackageItemDetailList.Clear();
            if (entity.ShipmentPackageItemList.CurrentIndex < 0)
            {
                MessageBox.Show("Vui lòng tạo kiện trước khi thêm chi tiết!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            if (entity.ShipmentPackageItemList[entity.ShipmentPackageItemList.CurrentIndex].ICShipmentPackageItemHasDetail == false)
            {
                MessageBox.Show("Vui lòng tích chọn xác định chi tiết trước khi thêm chi tiết!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            ICShipmentPackageItemsInfo objShipmentPackageItemsInfo = (ICShipmentPackageItemsInfo)entity.ShipmentPackageItemList[entity.ShipmentPackageItemList.CurrentIndex];
            if (objShipmentPackageItemsInfo.ShipmentPackageItemDetailsList == null)
            {
                objShipmentPackageItemsInfo.ShipmentPackageItemDetailsList = new BOSList<ICShipmentPackageItemDetailsInfo>();
                objShipmentPackageItemsInfo.ShipmentPackageItemDetailsList.InitBOSList((ShipmentEntities)CurrentModuleEntity,
                                               TableName.ICShipmentPackageItemsTableName,
                                               TableName.ICShipmentPackageItemDetailsTableName,
                                               BOSList<ICShipmentPackageItemDetailsInfo>.cstRelationForeign);
                objShipmentPackageItemsInfo.ShipmentPackageItemDetailsList.ItemTableForeignKey = "FK_ICShipmentPackageItemID";
            }
            if (objShipmentPackageItemsInfo.DeleteShipmentPackageItemDetailsList == null)
            {
                objShipmentPackageItemsInfo.DeleteShipmentPackageItemDetailsList = new BOSList<ICShipmentPackageItemDetailsInfo>();
                objShipmentPackageItemsInfo.DeleteShipmentPackageItemDetailsList.InitBOSList((ShipmentEntities)CurrentModuleEntity,
                                               TableName.ICShipmentPackageItemsTableName,
                                               TableName.ICShipmentPackageItemDetailsTableName,
                                               BOSList<ICShipmentPackageItemDetailsInfo>.cstRelationForeign);
                objShipmentPackageItemsInfo.DeleteShipmentPackageItemDetailsList.ItemTableForeignKey = "FK_ICShipmentPackageItemID";
            }
            List<ICShipmentPackageItemDetailsInfo> ShipmentPackageItemDetailsList = new List<ICShipmentPackageItemDetailsInfo>();
            if (objShipmentPackageItemsInfo.ICShipmentPackageItemTemporaryID > 0 && objShipmentPackageItemsInfo.ICShipmentPackageItemID == 0)
            {
                entity.ShipmentPackageItemDetailShowList.ForEach(o =>
                {
                    if (o.FK_ICShipmentPackageItemID == objShipmentPackageItemsInfo.ICShipmentPackageItemTemporaryID)
                        ShipmentPackageItemDetailsList.Add(o);
                });
            }
            else
                ShipmentPackageItemDetailsList = (List<ICShipmentPackageItemDetailsInfo>)objShipmentPackageItemDetailsController.GetPackageItemDetailsListByPackageItemID(objShipmentPackageItemsInfo.ICShipmentPackageItemID);
            objShipmentPackageItemsInfo.ShipmentPackageItemDetailsList.Clear();
            ShipmentPackageItemDetailsList.ForEach(o =>
            {
                objShipmentPackageItemsInfo.ShipmentPackageItemDetailsList.Add(o);
            });
            foreach (ICShipmentPackageItemDetailsInfo item in objShipmentPackageItemsInfo.ShipmentPackageItemDetailsList)
            {
                entity.ShipmentPackageItemDetailList.Add(item);
            }
            guiAddProductPackageItemDetails guiFind = new guiAddProductPackageItemDetails(objShipmentPackageItemsInfo.ShipmentPackageItemDetailsList);
            guiFind.Module = this;
            guiFind.ShowDialog();
            entity.RemoveOldShipmentPackageItemDetailItem(objShipmentPackageItemsInfo.ShipmentPackageItemDetailsList);
            objShipmentPackageItemsInfo.ShipmentPackageItemDetailsList.Clear();
            objShipmentPackageItemsInfo.DeleteShipmentPackageItemDetailsList.Clear();
            entity.ShipmentPackageItemDetailList.ForEach(o =>
            {
                if (objShipmentPackageItemsInfo.ICShipmentPackageItemID != 0)
                    o.FK_ICShipmentPackageItemID = objShipmentPackageItemsInfo.ICShipmentPackageItemID;
                else
                    o.FK_ICShipmentPackageItemID = objShipmentPackageItemsInfo.ICShipmentPackageItemTemporaryID;
                o.ICShipmentPackageItemQty = objShipmentPackageItemsInfo.ICShipmentPackageItemQty;
                entity.ShipmentPackageItemDetailShowList.Add(o);
            });
            entity.ShipmentPackageItemDetailList.ForEach(o =>
            {
                if (objShipmentPackageItemsInfo.ICShipmentPackageItemID != 0)
                    o.FK_ICShipmentPackageItemID = objShipmentPackageItemsInfo.ICShipmentPackageItemID;
                else
                    o.FK_ICShipmentPackageItemID = objShipmentPackageItemsInfo.ICShipmentPackageItemTemporaryID;
                objShipmentPackageItemsInfo.ShipmentPackageItemDetailsList.Add(o);
            });
            entity.DeleteShipmentPackageItemDetailList.ForEach(o =>
            {
                if (objShipmentPackageItemsInfo.ICShipmentPackageItemID != 0)
                    o.FK_ICShipmentPackageItemID = objShipmentPackageItemsInfo.ICShipmentPackageItemID;
                else
                    o.FK_ICShipmentPackageItemID = objShipmentPackageItemsInfo.ICShipmentPackageItemTemporaryID;
                objShipmentPackageItemsInfo.DeleteShipmentPackageItemDetailsList.Add(o);
            });
            entity.ShipmentPackageItemList[entity.ShipmentPackageItemList.CurrentIndex] = objShipmentPackageItemsInfo;
            entity.ShipmentPackageItemDetailShowList.GridControl.RefreshDataSource();
        }

        public ICShipmentPackageItemsInfo GenShipmentPackageItemFromProductPackageItem(ICProductPackageItemsInfo objProductPackageItemsInfo)
        {
            ICShipmentPackageItemsInfo objShipmentPackageItemsInfo = new ICShipmentPackageItemsInfo();
            if (objProductPackageItemsInfo != null)
            {
                objShipmentPackageItemsInfo.ICShipmentPackageItemNo = objProductPackageItemsInfo.ICProductPackageItemNo;
                objShipmentPackageItemsInfo.ICShipmentPackageItemName = objProductPackageItemsInfo.ICProductPackageItemName;
                objShipmentPackageItemsInfo.ICShipmentPackageItemLength = objProductPackageItemsInfo.ICProductPackageItemLength;
                objShipmentPackageItemsInfo.ICShipmentPackageItemWidth = objProductPackageItemsInfo.ICProductPackageItemWidth;
                objShipmentPackageItemsInfo.ICShipmentPackageItemHeight = objProductPackageItemsInfo.ICProductPackageItemHeight;
                objShipmentPackageItemsInfo.ICShipmentPackageItemHasDetail = objProductPackageItemsInfo.ICProductPackageItemHasDetail;
                objShipmentPackageItemsInfo.ICShipmentPackageItemQty = objProductPackageItemsInfo.ICProductPackageItemQty;
                objShipmentPackageItemsInfo.ICProductPackageMethodType = objProductPackageItemsInfo.ICProductPackageMethodType;
            }
            return objShipmentPackageItemsInfo;
        }

        public ICShipmentPackageItemDetailsInfo GenShipmentPackageItemDetailFromProductPackageItemDetail(ICProductPackageItemDetailsInfo objProductPackageItemDetailsInfo, decimal ICShipmentPackageItemQty)
        {
            ICShipmentPackageItemDetailsInfo objShipmentPackageItemDetailsInfo = new ICShipmentPackageItemDetailsInfo();
            if (objProductPackageItemDetailsInfo != null)
            {
                objShipmentPackageItemDetailsInfo.ICShipmentPackageItemDetailNo = objProductPackageItemDetailsInfo.ICProductPackageItemDetailNo;
                objShipmentPackageItemDetailsInfo.ICShipmentPackageItemDetailName = objProductPackageItemDetailsInfo.ICProductPackageItemDetailName;
                objShipmentPackageItemDetailsInfo.ICShipmentPackageItemDetailFinalProductNo = objProductPackageItemDetailsInfo.ICProductPackageItemDetailFinalProductNo;
                objShipmentPackageItemDetailsInfo.ICShipmentPackageItemDetailFinalProductName = objProductPackageItemDetailsInfo.ICProductPackageItemDetailFinalProductName;
                objShipmentPackageItemDetailsInfo.ICShipmentPackageItemDetailFinalProductDesc = objProductPackageItemDetailsInfo.ICProductPackageItemDetailFinalProductDesc;
                objShipmentPackageItemDetailsInfo.ICShipmentPackageItemDetailQty = objProductPackageItemDetailsInfo.ICProductPackageItemDetailQty;
                objShipmentPackageItemDetailsInfo.FK_ICProductID = objProductPackageItemDetailsInfo.FK_ICProductID;
                objShipmentPackageItemDetailsInfo.FK_ICProductDetailID = objProductPackageItemDetailsInfo.FK_ICProductDetailID;
                objShipmentPackageItemDetailsInfo.ICShipmentPackageItemQty = ICShipmentPackageItemQty;
            }
            return objShipmentPackageItemDetailsInfo;
        }

        public void SetDefaultShipmentPackageItemList()
        {
            if (IsEditable())
            {
                ActionEdit();
            }
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)CurrentModuleEntity.MainObject;
            if (entity.ShipmentPackageItemList.Count > entity.CountItemsInShipmentPackageItemList)
            {
                entity.CountItemsInShipmentPackageItemList++;
                if (entity.ShipmentPackageItemList[entity.ShipmentPackageItemList.CurrentIndex] != null)
                {
                    entity.ShipmentPackageItemList[entity.ShipmentPackageItemList.CurrentIndex].ICShipmentPackageItemTemporaryID = entity.ShipmentPackageItemList.Count;
                }
            }
            entity.ShipmentPackageItemList.GridControl.RefreshDataSource();
        }

        public void DeleteItemShipmentPackageItemsList()
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentPackageItemsInfo objShipmentPackageItemsInfo = entity.ShipmentPackageItemList[entity.ShipmentPackageItemList.CurrentIndex];
            List<ICShipmentPackageItemDetailsInfo> ShipmentPackageItemDetailShowRemoveList = new List<ICShipmentPackageItemDetailsInfo>();
            if (objShipmentPackageItemsInfo.ICShipmentPackageItemTemporaryID > 0 && objShipmentPackageItemsInfo.ShipmentPackageItemDetailsList != null)
            {
                foreach (ICShipmentPackageItemDetailsInfo objShipmentPackageItemDetailsInfo in objShipmentPackageItemsInfo.ShipmentPackageItemDetailsList)
                {
                    entity.ShipmentPackageItemDetailShowList.ForEach(x =>
                    {
                        if (x.FK_ICShipmentPackageItemID == objShipmentPackageItemDetailsInfo.FK_ICShipmentPackageItemID)
                            entity.ShipmentPackageItemDetailShowList.Remove(x);
                    });
                }
            }
            else
            {
                entity.ShipmentPackageItemDetailShowList.ForEach(x =>
                {
                    if (x.FK_ICShipmentPackageItemID == objShipmentPackageItemsInfo.ICShipmentPackageItemID)
                        ShipmentPackageItemDetailShowRemoveList.Add(x);
                });
                ShipmentPackageItemDetailShowRemoveList.ForEach(x =>
                {
                    if (x.FK_ICShipmentPackageItemID == objShipmentPackageItemsInfo.ICShipmentPackageItemID)
                        entity.ShipmentPackageItemDetailShowList.Remove(x);
                });
            }
            entity.ShipmentPackageItemList.RemoveSelectedRowObjectFromList();
            entity.ShipmentPackageItemDetailShowList.GridControl.RefreshDataSource();
        }

        public void InvalidateReportList()
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICProductDetailsController objProductDetailsController = new ICProductDetailsController();
            ICProductsController objProductsController = new ICProductsController();
            entity.ShipmentPackageItemDetailReportList.Clear();
            entity.ShipmentItemList.ForEach(o =>
            {
                if (o.ICShipmentItemHasProductPackage == false)
                    return;
                ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(o.FK_ICProductID);
                List<ICProductDetailsInfo> productDetailsList = objProductDetailsController.GetListProductDetailByProductID(o.FK_ICProductID);
                if (productDetailsList.Count > 0)
                {
                    productDetailsList.ForEach(x =>
                    {
                        ICShipmentPackageItemDetailsInfo objShipmentPackageItemDetailsInfo = new ICShipmentPackageItemDetailsInfo();
                        objShipmentPackageItemDetailsInfo.ICShipmentPackageItemDetailFinalProductNo = objProductsInfo.ICProductNo;
                        objShipmentPackageItemDetailsInfo.ICShipmentPackageItemDetailFinalProductName = o.ICShipmentItemProductName;
                        objShipmentPackageItemDetailsInfo.ICShipmentPackageItemDetailFinalProductDesc = o.ICShipmentItemProductDesc;
                        objShipmentPackageItemDetailsInfo.ICShipmentPackageItemDetailQty = o.ICShipmentItemProductQty * x.ICProductDetailProductQty;
                        objShipmentPackageItemDetailsInfo.ICShipmentPackageItemDetailNo = x.ICProductDetailProductNo;
                        objShipmentPackageItemDetailsInfo.ICShipmentPackageItemDetailName = x.ICProductDetailProductName;
                        objShipmentPackageItemDetailsInfo.ICShipmentItemQty = o.ICShipmentItemProductQty * x.ICProductDetailProductQty;
                        objShipmentPackageItemDetailsInfo.ICShipmentItemPackagedQty1 = 0;
                        entity.ShipmentPackageItemDetailShowList.ForEach(i =>
                        {
                            if (i.ICShipmentPackageItemDetailNo == objShipmentPackageItemDetailsInfo.ICShipmentPackageItemDetailNo && i.ICShipmentPackageItemDetailFinalProductNo == objShipmentPackageItemDetailsInfo.ICShipmentPackageItemDetailFinalProductNo)
                                objShipmentPackageItemDetailsInfo.ICShipmentItemPackagedQty1 += i.ICShipmentPackageItemQty * i.ICShipmentPackageItemDetailQty;
                        });
                        entity.ShipmentPackageItemDetailReportList.Add(objShipmentPackageItemDetailsInfo);
                    });
                }
                else
                {
                    ICShipmentPackageItemDetailsInfo objShipmentPackageItemDetailsInfo = new ICShipmentPackageItemDetailsInfo();
                    objShipmentPackageItemDetailsInfo.ICShipmentPackageItemDetailFinalProductNo = objProductsInfo.ICProductNo;
                    objShipmentPackageItemDetailsInfo.ICShipmentPackageItemDetailFinalProductName = o.ICShipmentItemProductName;
                    objShipmentPackageItemDetailsInfo.ICShipmentPackageItemDetailFinalProductDesc = o.ICShipmentItemProductDesc;
                    objShipmentPackageItemDetailsInfo.ICShipmentItemPackagedQty1 = 0;
                    objShipmentPackageItemDetailsInfo.ICShipmentItemQty = o.ICShipmentItemProductQty;
                    entity.ShipmentPackageItemDetailShowList.ForEach(i =>
                    {
                        if (i.ICShipmentPackageItemDetailNo == objShipmentPackageItemDetailsInfo.ICShipmentPackageItemDetailNo && i.ICShipmentPackageItemDetailFinalProductNo == objShipmentPackageItemDetailsInfo.ICShipmentPackageItemDetailFinalProductNo)
                            objShipmentPackageItemDetailsInfo.ICShipmentItemPackagedQty1 += i.ICShipmentPackageItemQty * i.ICShipmentPackageItemDetailQty;
                    });
                    entity.ShipmentPackageItemDetailReportList.Add(objShipmentPackageItemDetailsInfo);
                }
            });
            entity.ShipmentPackageItemDetailReportList.GridControl.RefreshDataSource();
        }

        public void UpdateItemDetailShowListQty(decimal ICShipmentPackageItemQty)
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentPackageItemDetailsController objShipmentPackageItemDetailsController = new ICShipmentPackageItemDetailsController();
            ICShipmentPackageItemsInfo objShipmentPackageItemsInfo = (ICShipmentPackageItemsInfo)entity.ShipmentPackageItemList[entity.ShipmentPackageItemList.CurrentIndex];
            if (objShipmentPackageItemsInfo.ICShipmentPackageItemID == 0 && objShipmentPackageItemsInfo.ShipmentPackageItemDetailsList != null)
            {
                foreach (ICShipmentPackageItemDetailsInfo objShipmentPackageItemDetailsInfo in objShipmentPackageItemsInfo.ShipmentPackageItemDetailsList)
                {
                    entity.ShipmentPackageItemDetailShowList.ForEach(o =>
                    {
                        if (o.FK_ICShipmentPackageItemID == objShipmentPackageItemsInfo.ICShipmentPackageItemTemporaryID)
                            o.ICShipmentPackageItemQty = ICShipmentPackageItemQty;
                    });
                }
            }
            else if (objShipmentPackageItemsInfo.ICShipmentPackageItemID > 0)
            {
                List<ICShipmentPackageItemDetailsInfo> PackageItemDetailList = objShipmentPackageItemDetailsController.GetPackageItemDetailsListByPackageItemID(objShipmentPackageItemsInfo.ICShipmentPackageItemID);
                PackageItemDetailList.ForEach(x =>
                {
                    entity.ShipmentPackageItemDetailShowList.ForEach(o =>
                    {
                        if (o.FK_ICShipmentPackageItemID == x.FK_ICShipmentPackageItemID)
                            o.ICShipmentPackageItemQty = ICShipmentPackageItemQty;
                    });
                });
            }
            entity.ShipmentPackageItemDetailShowList.GridControl.RefreshDataSource();
        }

        public bool ApprovedShipment()
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)CurrentModuleEntity.MainObject;
            ICProductDetailsController objProductDetailsController = new ICProductDetailsController();
            ICShipmentPackageItemDetailsController objShipmentPackageItemDetailsController = new ICShipmentPackageItemDetailsController();
            ICProductsController objProductsController = new ICProductsController();
            bool isValid = true;
            entity.ShipmentItemList.ForEach(o =>
            {
                if (o.ICShipmentItemHasProductPackage == false)
                    return;
                if (isValid == false)
                    return;
                //ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(o.FK_ICProductID);
                //List<ICProductDetailsInfo> productDetailsList = objProductDetailsController.GetListProductDetailByProductID(o.FK_ICProductID);
                //if (productDetailsList != null)
                //{
                //    productDetailsList.ForEach(x =>
                //    {
                //        if (isValid == false)
                //            return;
                //        entity.ShipmentPackageItemDetailShowList.ForEach(i =>
                //        {
                //            if (i.FK_ICProductID == x.FK_ICProductID && i.FK_ICProductDetailID == x.Id && isValid == true)
                //            {
                //                x.ICShipmentItemPackagedQty1Compare += i.ICShipmentPackageItemQty * i.ICShipmentPackageItemDetailQty;
                //                x.ICShipmentPackageItemDetailFinalProductName = i.ICShipmentPackageItemDetailFinalProductName;
                //            }
                //        });
                //        if (o.ICShipmentItemProductQty * x.ICProductDetailProductQty != x.ICShipmentItemPackagedQty1Compare)
                //        {
                //            isValid = false;
                //            DialogResult result = MessageBox.Show("Số lượng chi tiết " + x.ICProductDetailProductName + " của thành phẩm " + x.ICShipmentPackageItemDetailFinalProductName + " hiện đang bị chênh lệch so với trong cấu hình chi tiết Module thành phẩm!\nVui lòng điều chỉnh lại!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                //            return;
                //        }
                //    });
                //}
            });
            return isValid;
        }

        public bool CheckExistInShipmentItemList(int productID)
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            return entity.ShipmentItemList.Where(o => o.FK_ICProductID == productID).Count() > 0;
        }

        public void ChangeBatchProduct()
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)CurrentModuleEntity.MainObject;
            entity.ShipmentItemList.ForEach(o => o.FK_MMBatchProductID = objShipmentsInfo.FK_MMBatchProductID);
            entity.ShipmentItemList.GridControl.RefreshDataSource();
        }

        public void PrintShipmentTV()
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)CurrentModuleEntity.MainObject;
            object[] arParam = new object[1];
            arParam[0] = objShipmentsInfo.ICShipmentID;
            ViewReportByTemplate("RPShipmentTV", "GetDataSourceForRPShipmentTV", arParam);
        }

        public void ChangeSegment(int segmenID)
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)entity.MainObject;
            objShipmentsInfo.FK_ACSegmentID = segmenID;
            if (!Toolbar.IsNullOrNoneAction())
            {
                if (entity.ShipmentItemList.Count > 0)
                {
                    entity.ShipmentItemList.ForEach(o => o.FK_ACSegmentID = segmenID);
                    entity.ShipmentItemList.GridControl.RefreshDataSource();
                }
            }
        }

        public void ChangeDisplayAndDataItemListGridView()
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)entity.MainObject;
            bool isWoodType = BOSApp.IsWoodTypeDocument(objShipmentsInfo.ICShipmentProductType, entity.ShipmentItemList.FirstOrDefault());
            ChangeDisplayColumnByWoodType(entity.ShipmentItemList.GridControl, isWoodType);
            if (!isWoodType)
                entity.ShipmentItemList.ForEach(o1 => o1.ICShipmentItemLotNo = string.Empty);
        }

        public void ChangeInputType(string type)
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)entity.MainObject;
            objShipmentsInfo.ICShipmentProductType = type;
            entity.UpdateMainObjectBindingSource();
            ChangeDisplayAndDataItemListGridView();
        }

        public override void ActionNew()
        {
            base.ActionNew();
            ChangeDisplayAndDataItemListGridView();
        }

        public override void Invalidate(int iObjectID)
        {
            base.Invalidate(iObjectID);

            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)entity.MainObject;

            bool isWoodType = BOSApp.IsWoodTypeDocument(objShipmentsInfo.ICShipmentProductType, entity.ShipmentItemList.FirstOrDefault());
            ChangeDisplayColumnByWoodType(entity.ShipmentItemList.GridControl, isWoodType);
        }

        public void UpdateLotNoItem(ICShipmentItemsInfo objShipmentItemsInfo)
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)entity.MainObject;

            if (BOSApp.IsWoodTypeDocument(objShipmentsInfo.ICShipmentProductType, entity.ShipmentItemList.FirstOrDefault()))
            {
                ICProductSeriesController objProductSeriesController = new ICProductSeriesController();
                ICProductSeriesInfo objProductSeriesInfo = (ICProductSeriesInfo)objProductSeriesController.GetObjectByID(objShipmentItemsInfo.FK_ICProductSerieID);
                if (objProductSeriesInfo != null)
                {
                    //Mã lô; Khối lượng; Số thanh(tấm); TTMT; Xuất xứ; chất lượng; Dài min; Dài max; Rộng min; Rộng max
                    objShipmentItemsInfo.ICShipmentItemLotNo = objProductSeriesInfo.ICProductSerieLotNo;
                    objShipmentItemsInfo.FK_ICProductAttributeTTMTID = objProductSeriesInfo.FK_ICProductAttributeTTMTID;
                    objShipmentItemsInfo.FK_GECountryID = objProductSeriesInfo.FK_GECountryID;
                    objShipmentItemsInfo.FK_ICProductAttributeQualityID = objProductSeriesInfo.FK_ICProductAttributeQualityID;
                    objShipmentItemsInfo.ICShipmentItemLengthMin = objProductSeriesInfo.ICProductSerieProductLengthMin;
                    objShipmentItemsInfo.ICShipmentItemLengthMax = objProductSeriesInfo.ICProductSerieProductLengthMax;
                    objShipmentItemsInfo.ICShipmentItemWidthMin = objProductSeriesInfo.ICProductSerieProductWidthMin;
                    objShipmentItemsInfo.ICShipmentItemWidthMax = objProductSeriesInfo.ICProductSerieProductWidthMax;
                    objShipmentItemsInfo.ICShipmentItemHeight = objProductSeriesInfo.ICProductSerieProductHeight;
                    ICInventoryStocksController objInventoryStocksController = new ICInventoryStocksController();
                    ICInventoryStocksInfo objInventoryStocksInfo = objInventoryStocksController.GetSingleInventoryStockByStockIDAndProductIDAndSerieID(objShipmentItemsInfo.FK_ICStockID,
                                                                                                                                                        objShipmentItemsInfo.FK_ICProductID,
                                                                                                                                                        objShipmentItemsInfo.FK_ICProductSerieID,
                                                                                                                                                        BOSApp.CurrentUserGroupInfo.ADUserGroupID);
                    if (objInventoryStocksInfo != null)
                    {
                        objShipmentItemsInfo.ICShipmentItemProductQty = objInventoryStocksInfo.ICInventoryStockQuantity;
                        objShipmentItemsInfo.ICShipmentItemWoodQty = objInventoryStocksInfo.ICInventoryStockWoodQuantity;
                    }
                    else
                    {
                        objShipmentItemsInfo.ICShipmentItemProductQty = 0;
                        objShipmentItemsInfo.ICShipmentItemWoodQty = 0;
                    }
                }
                else
                {
                    objShipmentItemsInfo.ICShipmentItemLotNo = string.Empty;
                    objShipmentItemsInfo.FK_ICProductAttributeTTMTID = 0;
                    objShipmentItemsInfo.FK_GECountryID = 0;
                    objShipmentItemsInfo.FK_ICProductAttributeQualityID = 0;
                    objShipmentItemsInfo.ICShipmentItemLengthMin = 0;
                    objShipmentItemsInfo.ICShipmentItemLengthMax = 0;
                    objShipmentItemsInfo.ICShipmentItemWidthMin = 0;
                    objShipmentItemsInfo.ICShipmentItemWidthMax = 0;
                    objShipmentItemsInfo.ICShipmentItemProductQty = 0;
                    objShipmentItemsInfo.ICShipmentItemWoodQty = 0;
                    objShipmentItemsInfo.ICShipmentItemHeight = 0;
                }
                entity.SetProductPriceByProductUnitPrice(objShipmentItemsInfo);
                UpdateTotalAmount();
            }
        }

        public void PrintShipmentNL()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                RP_Shipment report = new RP_Shipment();
                InitShipmentNL(report, Toolbar.CurrentObjectID);
                guiReportPreview viewer = new guiReportPreview(report);
                viewer.Show();
            }
        }

        private void InitShipmentNL(XtraReport report, int shipmentID)
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            BRBranchsController objBranchsController = new BRBranchsController();
            BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            if (objBranchsInfo != null)
            {
                XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchAddressLine3"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactAddressLine3;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchPhone"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactPhone;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchFax"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactFax;
                }
            }

            ICShipmentsController objShipmentsController = new ICShipmentsController();
            ADReportsController objReportsController = new ADReportsController();
            ICShipmentsInfo shipment = (ICShipmentsInfo)objShipmentsController.GetObjectByID(shipmentID);
            List<ICShipmentItemsInfo> shipmentItemList = objReportsController.GetShipmentItemsByShipmentIDForReport(shipmentID);

            ACAccountsController objAccountsController = new ACAccountsController();

            XRLabel accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblDebitAccountNo"];
            if (accLabel != null)
            {
                string debitAccountNo = string.Empty;

                foreach (ICShipmentItemsInfo item in shipmentItemList)
                {
                    if (!debitAccountNo.Contains(item.DebitAccountNo))
                    {
                        debitAccountNo += string.Format(" {0},", item.DebitAccountNo);
                    }
                }
                if (!string.IsNullOrEmpty(debitAccountNo))
                {
                    debitAccountNo = debitAccountNo.Substring(0, debitAccountNo.Length - 1);
                }
                accLabel.Text = debitAccountNo;
            }
            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblCreditAccountNo"];
            if (accLabel != null)
            {
                string creditAccountNo = string.Empty;
                foreach (ICShipmentItemsInfo item in shipmentItemList)
                {
                    if (item.CreditAccountNo != null)
                    {
                        if (!creditAccountNo.Contains(item.CreditAccountNo))
                        {
                            creditAccountNo += string.Format(" {0},", item.CreditAccountNo);
                        }
                    }
                }
                if (!string.IsNullOrEmpty(creditAccountNo))
                {
                    creditAccountNo = creditAccountNo.Substring(0, creditAccountNo.Length - 1);
                }
                accLabel.Text = creditAccountNo;
            }

            accLabel = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblToDate"];
            if (accLabel != null)
            {
                accLabel.Text = string.Format(accLabel.Text, BOSApp.GetCurrentServerDate().Day.ToString().PadLeft(2, '0'),
                                              BOSApp.GetCurrentServerDate().Month.ToString().PadLeft(2, '0'),
                                              BOSApp.GetCurrentServerDate().Year);
            }

            report.DataSource = shipmentItemList;
        }

        public override void ChangeDisplayColumnByWoodType(BOSGridControl gridControl, bool isWoodType)
        {
            base.ChangeDisplayColumnByWoodType(gridControl, isWoodType);
            if (gridControl == null)
                return;
            GridView gridView = (GridView)gridControl.MainView;
            if (gridView == null)
                return;

            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)entity.MainObject;

            GridColumn qtyColumn = gridView.Columns["ICShipmentItemProductQty"];
            GridColumn woodQtycolumn = gridView.Columns["ICShipmentItemWoodQty"];
            if (isWoodType)
            {
                if (woodQtycolumn == null)
                {
                    woodQtycolumn = new GridColumn();
                    woodQtycolumn.FieldName = "ICShipmentItemWoodQty";
                    woodQtycolumn.Caption = CommonLocalizedResources.WoodQtyText;
                    woodQtycolumn.OptionsColumn.AllowEdit = true;
                    woodQtycolumn.VisibleIndex = qtyColumn != null ? qtyColumn.VisibleIndex + 1 : 999;
                    STFieldFormatGroupsInfo formatsInfo = GetColumnFormat("ICShipmentItems", "ICShipmentItemWoodQty", this.ModuleID);
                    if(formatsInfo != null)
                    {
                        woodQtycolumn.DisplayFormat.FormatType = BOSUtil.GetFormatTypeFromText(formatsInfo.STFieldFormatGroupFormatType);
                        woodQtycolumn.DisplayFormat.FormatString = formatsInfo.STFieldFormatGroupFormatString;
                    }
                    gridView.Columns.Add(woodQtycolumn);
                }
                else
                {
                    woodQtycolumn.Caption = CommonLocalizedResources.WoodQtyText;
                    woodQtycolumn.OptionsColumn.AllowEdit = true;
                    woodQtycolumn.VisibleIndex = qtyColumn != null ? qtyColumn.VisibleIndex + 1 : 999;
                }   
            }
            if (qtyColumn != null)
            {
                if (objShipmentsInfo.ICShipmentProductType == ProductType.Other.ToString())
                {
                    ShipmentItemGridControl.FormatNumbericColumn(qtyColumn, true, "n3");

                }
                else
                {
                    ShipmentItemGridControl.FormatNumbericColumn(qtyColumn, true, "n6");
                }
            }


            if (!isWoodType && woodQtycolumn != null)
            {
                gridView.Columns.Remove(woodQtycolumn);
            }
        }

        public void InitProductPictureImage(int productID)
        {
            if (productID > 0 && ProductPicturePictureBox != null)
            {
                ProductPicturePictureBox.Image = BOSApp.GetProductPictureImageByProductID(productID);
                ProductPicturePictureBox.Properties.SizeMode = DevExpress.XtraEditors.Controls.PictureSizeMode.Zoom;
            }
        }

        public void ChangeUnfinishedConstructionCost(int unfinishedConstructionCostID)
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)entity.MainObject;
            objShipmentsInfo.FK_ACUnfinishedConstructionCostID = unfinishedConstructionCostID;
            if (!Toolbar.IsNullOrNoneAction())
            {
                if (entity.ShipmentItemList.Count > 0)
                {
                    entity.ShipmentItemList.ForEach(o => o.FK_ACUnfinishedConstructionCostID = unfinishedConstructionCostID);
                    entity.ShipmentItemList.GridControl?.RefreshDataSource();
                }
            }
        }

        public override void ActionPosted()
        {
            if (!CheckLock()) return;
            base.ActionPosted();
            UpdateUnifinishedCost(true);
        }

        public override void ActionUnPosted()
        {
            if (!CheckLock()) return;
            if (CheckUnifinishedCost())
            {
                base.ActionUnPosted();
                UpdateUnifinishedCost(false);
            }
        }

        public void UpdateUnifinishedCost(bool isPosted)
        {
            ICShipmentsInfo mainObject = (ICShipmentsInfo)CurrentModuleEntity.MainObject;
            ACUnfinishedConstructionCostsController objUnfinishedConstructionCostsController = new ACUnfinishedConstructionCostsController();
            objUnfinishedConstructionCostsController.UpdateUnfinishedConstructionCostByShipmentID(mainObject.ICShipmentID, isPosted);
        }

        public bool CheckUnifinishedCost()
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentItemsInfo itemValidate = entity.ShipmentItemList.FirstOrDefault(o => o.FK_ACUnfinishedConstructionCostID > 0);
            if (itemValidate != null)
            {
                ACUnfinishedConstructionCostsController unfinishedCostController = new ACUnfinishedConstructionCostsController();
                ACUnfinishedConstructionCostsInfo unfinishedCost = new ACUnfinishedConstructionCostsInfo();

                foreach (ICShipmentItemsInfo item in entity.ShipmentItemList)
                {
                    unfinishedCost = unfinishedCostController.GetObjectByID(item.FK_ACUnfinishedConstructionCostID) as ACUnfinishedConstructionCostsInfo;
                    if (unfinishedCost != null 
                            && (unfinishedCost.ACUnfinishedConstructionCostStatus == UnfinishedConstructionCostStatus.Complete.ToString()
                                || unfinishedCost.ACUnfinishedConstructionCostStatus == UnfinishedConstructionCostStatus.ChuyenTSCD.ToString()))
                    {
                        MessageBox.Show(string.Format("Chi phí XDCB dở dang {0} ({1}) đã Hoàn tất hoặc Ghi tăng tài sản" 
                                                        + Environment.NewLine + "Bạn không thể thực hiện thao tác này!", unfinishedCost.ACUnfinishedConstructionCostNo, unfinishedCost.ACUnfinishedConstructionCostName)
                                        , CommonLocalizedResources.MessageBoxDefaultCaption
                                        , MessageBoxButtons.OK
                                        , MessageBoxIcon.Information);
                        return false;
                    }
                }
                return true;
            }
            return true;
        }

        public void PrintMultiShipmentMaterial()
        {
            if (!Toolbar.IsNullOrNoneAction() || Toolbar.CurrentObjectID <= 0)
                return;
            guiPrintMultiShipment guiFind = new guiPrintMultiShipment();
            guiFind.Module = this;
            guiFind.ShipmentFromDate = BOSUtil.GetMonthBeginDate();
            guiFind.ShipmentToDate = BOSApp.GetCurrentServerDate();
            DialogResult rs = guiFind.ShowDialog();
            if (rs != DialogResult.OK)
                return;
            List<ICShipmentsInfo> shipmentList = guiFind.SelectedObjects;

            RPMultiShipmentMaterial report = new RPMultiShipmentMaterial();
            InitRPSummaryShipmentReport(report
                                               , shipmentList
                                               , guiFind.ShipmentFromDate ?? DateTime.MaxValue
                                               , guiFind.ShipmentToDate ?? DateTime.MaxValue);
            guiReportPreview reviewer = new guiReportPreview(report, null, true);
            reviewer.Show();
        }

        public void InitRPSummaryShipmentReport(RPMultiShipmentMaterial report, List<ICShipmentsInfo> shipmentList, DateTime fromDate, DateTime toDate)
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo mainObject = (ICShipmentsInfo)entity.MainObject;

            string shipmentIDRef = string.Join(",", shipmentList.Select(o => o.ICShipmentID.ToString()).ToArray());

            ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
            List<ICShipmentItemsInfo> shipmentItemList = objShipmentItemsController.GetAllShipmentItemForReportByShipmentRef(shipmentIDRef);
            //List<int> arrSaleOrderID = deliveryPlanItemList.Select(o => o.FK_ARSaleOrderID).Distinct().ToList();
            //List<ARDeliveryPlanItemsInfo> deliveryPlanItemPrintList = new List<ARDeliveryPlanItemsInfo>();
            //ARDeliveryPlanItemsInfo objDeliveryPlanItemsInfo = new ARDeliveryPlanItemsInfo();

            //int groupID = 0;
            //int deliveryPlanOldID = 0;
            //int itemOrder = 0;
            //arrSaleOrderID.ForEach(o =>
            //{
            //    objDeliveryPlanItemsInfo = ToDeliveryPlanItemPrintList(deliveryPlanItemList.Where(o1 => o1.FK_ARSaleOrderID == o).ToList(), o);
            //    deliveryPlanItemPrintList.Add(objDeliveryPlanItemsInfo);
            //});

            //deliveryPlanItemPrintList.OrderBy(o => o.FK_ARDeliveryPlanID).All(o =>
            //{
            //    if (deliveryPlanOldID != o.FK_ARDeliveryPlanID)
            //    {
            //        itemOrder = 0;
            //        groupID++;
            //    }
            //    deliveryPlanOldID = o.FK_ARDeliveryPlanID;
            //    itemOrder++;
            //    o.ItemOrder = string.Format("{0}.{1}", groupID, itemOrder);
            //    o.GroupOrder = groupID + "";
            //    return true;
            //});

            report.DataSource = shipmentItemList; // deliveryPlanItemPrintList;
            //XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblDeliveryDate"];
            //if (label != null)
            //{
            //    label.Text = string.Format(label.Text, fromDate.ToString("dd/MM/yyyy"));
            //    if (strDeliveryPlanType == DeliveryPlanType.Week.ToString())
            //    {
            //        label.Text = string.Format(@"KẾ HOẠCH GIAO HÀNG TỪ NGÀY {0} ĐẾN NGÀY {1}", fromDate.ToString("dd/MM/yyyy"), toDate.ToString("dd/MM/yyyy"));
            //    }
            //}
        }

        #region Xóa chứng từ
        public override void ActionDelete()
        {
            ICShipmentsInfo mainObject = (ICShipmentsInfo)CurrentModuleEntity.MainObject.Clone();
            if (mainObject.ICShipmentID > 0)
            {
                if (mainObject.ICShipmentPostedStatus == PostedTransactionStatus.Posted.ToString())
                {
                    ActionUnPosted();
                }
                base.ActionDelete();
            }
        }
        #endregion

        public void AutoSelectProductSerialNo()
        {
            if (Toolbar.IsNullOrNoneAction())
            {
                return;
            }

            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo mainObject = (ICShipmentsInfo)entity.MainObject;

            if (entity.ShipmentItemList.Count <= 0)
            {
                MessageBox.Show("Vui lòng thêm sản phẩm xuất kho để gắn mã lô!"
                                , CommonLocalizedResources.MessageBoxDefaultCaption,
                                MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            int countNullProduct = entity.ShipmentItemList.Where(s => s.FK_ICStockID <= 0).Count();
            if (countNullProduct > 0)
            {
                MessageBox.Show("Vui lòng chọn kho để gắn mã lô!"
                                , CommonLocalizedResources.MessageBoxDefaultCaption,
                                MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            entity.ShipmentItemList.ForEach(o => o.ICShipmentDate = mainObject.ICShipmentDate);
            List<ICShipmentItemsInfo> listShipmentItems = entity.ShipmentItemList;
            ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
            listShipmentItems = objShipmentItemsController.GetListInventoryStockSerialNoForShipment(listShipmentItems);
            listShipmentItems = listShipmentItems.OrderBy(o => o.ICProductSerieReceiptDate).ToList();
            ICShipmentItemsInfo shipmentItemQty = new ICShipmentItemsInfo();
            foreach (ICShipmentItemsInfo item in entity.ShipmentItemList)
            {
                shipmentItemQty = listShipmentItems.FirstOrDefault(o => o.FK_ICProductID == item.FK_ICProductID && o.ICShipmentItemProductExchangeQty >= item.ICShipmentItemProductExchangeQty);
                if (shipmentItemQty != null)
                {
                    item.FK_ICStockID = shipmentItemQty.FK_ICStockID;
                    item.FK_ICProductSerieID = shipmentItemQty.FK_ICProductSerieID;
                    item.ICShipmentItemProductSerialNo = shipmentItemQty.ICShipmentItemProductSerialNo;
                    item.ICShipmentItemLotNo = shipmentItemQty.ICShipmentItemLotNo;
                    shipmentItemQty.ICShipmentItemProductExchangeQty -= item.ICShipmentItemProductExchangeQty;
                    ChangeItemSerieNo(item);
                }
            }
            shipmentItemQty = entity.ShipmentItemList.FirstOrDefault(o => o.FK_ICStockID > 0);
            if(shipmentItemQty != null)
            {
                mainObject.FK_ICStockID = shipmentItemQty.FK_ICStockID;
                entity.UpdateMainObjectBindingSource();
            }    
        }

        public override void ActionDuplicate()
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo mainObject = (ICShipmentsInfo)CurrentModuleEntity.MainObject;
            base.ActionDuplicate();
            mainObject.ICShipmentStatus = BankTransactionStatus.New.ToString();
            mainObject.ICShipmentPostedStatus = PostedTransactionStatus.UnPosted.ToString();
            mainObject.STToolbarActionName = "Duplicate";
            mainObject.FK_HREmployeeID = BOSApp.CurrentUsersInfo.FK_HREmployeeID;
            mainObject.AAUpdatedDate = DateTime.MaxValue;
            mainObject.AAUpdatedUser = String.Empty;

            entity.ShipmentItemList.Duplicate();
            entity.ShipmentItemList.GridControl?.RefreshDataSource();
            //entity.DocumentEntryList.Clear();
            entity.DocumentEntryList.GridControl?.RefreshDataSource();
        }

        #region Export Import Excel
        public void ExportShipmentItemTemplate()
        {
            try
            {
                ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
                ICShipmentsInfo mainObject = (ICShipmentsInfo)entity.MainObject;

                guiExportShipmentItemsProcess process = new guiExportShipmentItemsProcess(entity.ShipmentItemList, mainObject.ICShipmentNo);
                process.ShowDialog();
                if (File.Exists(process.FilePath))
                {
                    Process.Start(process.FilePath);
                }
            }
            catch (Exception ex)
            {
                BOSProgressBar.Close();
                MessageBox.Show(ex.ToString()
                                , CommonLocalizedResources.MessageBoxDefaultCaption
                                , MessageBoxButtons.OK
                                , MessageBoxIcon.Error);
            }
        }

        public void ImportShipmentItemExcel()
        {
            if (Toolbar.IsNullOrNoneAction())
            {
                return;
            }

            List<Range> ranges = InitializeDataImport();
            if (ranges == null)
            {
                return;
            }

            if (ranges.Count() != 1)
            {
                MessageBox.Show(PriceSheetLocalizedResources.TeamplateMalformed, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (MessageBox.Show(ImportDataLocalizedResources.QuestionImportDataMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
            {
                return;
            }

            BOSProgressBar.Start(ImportDataLocalizedResources.ProgressBarMessage);
            Range woods = ranges[0];
            ImportShipmentItems(woods);
            BOSProgressBar.Close();
        }

        public List<Range> InitializeDataImport()
        {
            string filePath = string.Empty;
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Filter = ImportDataLocalizedResources.DialogFilter;
            if (dialog.ShowDialog() != DialogResult.Cancel)
                filePath = dialog.FileName;

            if (!String.IsNullOrEmpty(filePath))
            {
                Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("vi-VN");
                Worksheet workSheet = new Worksheet();
                Microsoft.Office.Interop.Excel.Application app = new ApplicationClass();
                Workbook workBook = app.Workbooks.Open(filePath, 0, true, 5, string.Empty, string.Empty, true, XlPlatform.xlWindows, "\t", false, false, 0, true, 1, 0);
                List<Range> result = new List<Range>();
                for (int i = 1; i <= workBook.Worksheets.Count; i++)
                {
                    workSheet = (Worksheet)workBook.Worksheets.get_Item(i);
                    Range range = workSheet.UsedRange;
                    result.Add(range);
                }
                return result;
            }
            return null;
        }

        private void ImportShipmentItems(Range range)
        {
            if (range == null)
                return;

            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo mainObject = (ICShipmentsInfo)entity.MainObject;

            List<ICShipmentItemsInfo> importInfoList = new List<ICShipmentItemsInfo>();
            ICShipmentItemsInfo objImportInfo = new ICShipmentItemsInfo();
            string cellValue = string.Empty;
            decimal value = 0;
            bool SOQ = false;
            for (int row = 2; row <= range.Rows.Count; row++)
            {
                objImportInfo = new ICShipmentItemsInfo();
                objImportInfo.ICProductNo = (range.Cells[row, 2] as Range).Text.ToString().Trim();
                if (string.IsNullOrEmpty(objImportInfo.ICProductNo))
                    continue;

                objImportInfo.ICShipmentItemProductSupplierNo = (range.Cells[row, 3] as Range).Text.ToString().Trim();
                objImportInfo.ICShipmentItemProductNoOfOldSys = (range.Cells[row, 4] as Range).Text.ToString().Trim();
                objImportInfo.ICShipmentItemProductName = (range.Cells[row, 5] as Range).Text.ToString().Trim();
                objImportInfo.ICShipmentItemProductDesc = (range.Cells[row, 6] as Range).Text.ToString().Trim();
                objImportInfo.ICMeasureUnitName = (range.Cells[row, 7] as Range).Text.ToString().Trim();
                objImportInfo.ICStockName = (range.Cells[row, 9] as Range).Text.ToString().Trim();
                objImportInfo.ICShipmentItemProductSerialNo = (range.Cells[row, 10] as Range).Text.ToString().Trim();

                cellValue = (range.Cells[row, 8] as Range).Text.ToString().Replace(",", string.Empty).Trim();
                cellValue = cellValue.Replace(".", ",").Trim();
                cellValue = cellValue.Replace(" ", string.Empty).Trim();
                Decimal.TryParse(cellValue, out value);
                value = Math.Round(value, 4, MidpointRounding.AwayFromZero);
                objImportInfo.ICShipmentItemProductQty = value;

                importInfoList.Add(objImportInfo);
            }

            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = new ICProductsInfo();

            ICMeasureUnitsInfo objMeasureUnitsInfo = new ICMeasureUnitsInfo();
            List<ICMeasureUnitsInfo> measureUnitList = (new ICMeasureUnitsController()).GetAllAliveMeasureUnit();

            List<ICStocksInfo> listStocksInfo = (new ICStocksController()).GetAllStocks();
            ICStocksInfo objStocksInfo = new ICStocksInfo();

            ICProductSeriesController objProductSeriesController = new ICProductSeriesController();
            ICProductSeriesInfo objProductSeriesInfo = new ICProductSeriesInfo();

            ICShipmentItemsInfo objShipmentItemsInfo = new ICShipmentItemsInfo();
            importInfoList.ForEach(o =>
            {
                objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByNo(o.ICProductNo);
                if (objProductsInfo == null)
                    return;
                objMeasureUnitsInfo = measureUnitList.Where(o1 => o1.ICMeasureUnitName == o.ICMeasureUnitName).FirstOrDefault();
                objStocksInfo = listStocksInfo.Where(o1 => o1.ICStockNo == o.ICStockName).FirstOrDefault();
                objProductSeriesInfo = objProductSeriesController.GetSerieByProductIDAndSerieNo(objProductsInfo.ICProductID, o.ICShipmentItemProductSerialNo);

                objShipmentItemsInfo = new ICShipmentItemsInfo()
                {
                    FK_ICProductID = objProductsInfo.ICProductID,
                    ICShipmentItemProductQty = o.ICShipmentItemProductQty,
                    ICShipmentItemProductNoOfOldSys = objProductsInfo.ICProductNoOfOldSys,
                    ICShipmentItemProductName = objProductsInfo.ICProductName,
                    ICShipmentItemProductDesc = objProductsInfo.ICProductDesc,
                    FK_ICMeasureUnitID = objMeasureUnitsInfo != null ? objMeasureUnitsInfo.ICMeasureUnitID : 0,
                    FK_ICStockID = objStocksInfo != null ? objStocksInfo.ICStockID : 0,
                    ICShipmentItemProductSerialNo = o.ICShipmentItemProductSerialNo,
                    FK_ICProductSerieID = objProductSeriesInfo != null ? objProductSeriesInfo.ICProductSerieID : 0,
                    ICShipmentItemLotNo = objProductSeriesInfo != null ? objProductSeriesInfo.ICProductSerieLotNo : string.Empty
                };
                ValidateItemToShipmentItemsList(objShipmentItemsInfo);
                objShipmentItemsInfo.ICShipmentItemProductQty = o.ICShipmentItemProductQty;                
                ChangeItemSerieNo(objShipmentItemsInfo);
                UpdateLotNoItem(objShipmentItemsInfo);
                CalculatedProductQtyByPackageVolumnConfig(objShipmentItemsInfo);
                ChangeItemFromShipmentItemsList();
            });
            UpdateTotalAmount();
            entity.ShipmentItemList.GridControl?.RefreshDataSource();
        }
        #endregion

        public void ValidateItemToShipmentItemsList(ICShipmentItemsInfo item)
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objICShipmentsInfo = (ICShipmentsInfo)entity.MainObject;

            ICProductsController objProductsController = new ICProductsController();
            if (item.FK_ICProductID > 0)
            {
                ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);
                if (objProductsInfo != null && objProductsInfo.HasComponent)
                {
                    List<ICProductsForViewInfo> listProduct = new List<ICProductsForViewInfo>();
                    listProduct = BOSApp.CurrentProductList.Where(o => o.ICProductID == objProductsInfo.ICProductID).ToList();
                    guiShowProductHasComponent<ICProductsInfo> guiProduct = new guiShowProductHasComponent<ICProductsInfo>(listProduct);
                    guiProduct.Module = this;
                    guiProduct.ShowDialog();
                    if (guiProduct.DialogResult == DialogResult.OK)
                    {
                        ICProductsForViewInfo objProduct1 = guiProduct.CollectionItemList.FirstOrDefault();
                        ICProductComponentsController objProductComponentsController = new ICProductComponentsController();
                        List<ICProductComponentsInfo> listComponents = objProductComponentsController.GetProductComponentListByProductID(objProduct1.ICProductID);
                        foreach (ICProductComponentsInfo objProductComponentsInfo in listComponents)
                        {
                            item = new ICShipmentItemsInfo();
                            item.FK_ICProductID = objProductComponentsInfo.FK_ICProductComponentChildID;
                            entity.SetValuesAfterValidateProduct(item.FK_ICProductID, item);
                            ICProductsInfo objProductInfo = BOSApp.GetProductFromCurrentProductList(item.FK_ICProductID);
                            if (objProductInfo != null)
                            {
                                item.FK_ACAccountID = objProductsInfo.FK_ACAccountID;
                            }
                            item.ICShipmentItemProductQty = objProductComponentsInfo.ICProductComponentQty * objProduct1.ICProductItemQty;
                            item.ICShipmentItemProductExchangeQty = item.ICShipmentItemProductQty * item.ICShipmentItemProductFactor;
                            item.ICProductDesc = objProductComponentsInfo.ICProductDesc;
                            item.ICShipmentItemProductSupplierNo = objProductComponentsInfo.ICProductSupplierNo;
                            item.FK_ICImportAndExportReasonID = objICShipmentsInfo.FK_ICImportAndExportReasonID;
                            item.FK_ACUnfinishedConstructionCostID = objICShipmentsInfo.FK_ACUnfinishedConstructionCostID;
                            item.FK_MMBatchProductID = objICShipmentsInfo.FK_MMBatchProductID;
                            entity.ShipmentItemList.Add(item);
                        }
                    }
                }
                else
                {
                    if (objProductsInfo != null)
                    {
                        item.FK_ACAccountID = objProductsInfo.FK_ACAccountID;
                        item.FK_ICImportAndExportReasonID = objICShipmentsInfo.FK_ICImportAndExportReasonID;
                        item.FK_ACUnfinishedConstructionCostID = objICShipmentsInfo.FK_ACUnfinishedConstructionCostID;
                        item.FK_MMBatchProductID = objICShipmentsInfo.FK_MMBatchProductID;
                        item.FK_ACSegmentID = objICShipmentsInfo.FK_ACSegmentID;
                    }
                    entity.ShipmentItemList.Add(item);
                }
            }
        }
        public void UpdatePositionItem(ICShipmentItemsInfo item)
        {
            ShipmentEntities entity = (ShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objICShipmentsInfo = (ICShipmentsInfo)entity.MainObject;
            MMUpdatePositionItemsController objUpdatePositionItemsController = new MMUpdatePositionItemsController();
            MMUpdatePositionItemsInfo objUpdatePositionItemsInfo = (MMUpdatePositionItemsInfo)objUpdatePositionItemsController.GetItemByLocationName(string.Empty, item.FK_ICProductID, item.FK_ICStockID, item.FK_ICProductSerieID);
            if (objUpdatePositionItemsInfo != null)
            {
                item.FK_MMUpdatePositionItemID = objUpdatePositionItemsInfo.MMUpdatePositionItemID;
            }
        }
    }
    #endregion
}