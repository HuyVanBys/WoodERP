using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows.Forms;
using System.IO;
using System.Transactions;
using BOSLib;
using BOSCommon;
using Localization;
using BOSComponent;
using BOSERP.Utilities;
using BOSReport;
using DevExpress.XtraReports.UI;
using DevExpress.XtraEditors;
using DevExpress.XtraGrid.Views.Grid;
using System.Linq;
//using BOSERP.Modules.IC.BatchReceiptRoundWood.Localization;

namespace BOSERP.Modules.BatchReceiptRoundWood
{
    #region BatchReceiptRoundWoodModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ReceiptModule
    //Created Date:Saturday, May 31, 2008
    //-----------------------------------------------------------

    public class BatchReceiptRoundWoodModule : BaseTransactionModule
    {
        #region Constants
        public const string ReceiptItemGridControlName = "fld_dgcReceiptItems";
        public const string DocumentEntryGridControlName = "fld_dgcACDocumentEntrys";
        public static int RoundWoodSplit;
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
        //public const string SearchBranchLookupEditControlName = "fld_lkeFK_BRBranchID";
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], END
        #endregion

        #region Variable
        private List<ICReceiptItemsInfo> OriginalReceiptItemList;
        #endregion

        #region Public properties
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
        //public BOSLookupEdit SearchBranchLookupEditControl;
        //public List<ADDataViewPermissionsInfo> CurrentModuleDataViewPermissionList;
        //public List<BRBranchsInfo> BranchList;
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], END
        ItemLookupEdit ProductLookUpEditControl;


        #endregion

        public BatchReceiptRoundWoodModule()
        {
            Name = "BatchReceiptRoundWood";
            CurrentModuleEntity = new BatchReceiptRoundWoodEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();

            StartGettingInventoryThread();
            //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
            //GetCurrentModuleDataViewPermission();
            // SearchBranchLookupEditControl = (BOSLookupEdit)Controls[SearchBranchLookupEditControlName];
            //SearchBranchLookupEditControl.Properties.DataSource = BranchList;
            //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], END

        }
        protected override DataSet GetSearchData(ref string searchQuery)
        {
            ICReceiptsController objReceiptsController = new ICReceiptsController();
            ICReceiptsInfo searchObject = (ICReceiptsInfo)CurrentModuleEntity.SearchObject;
            DataSet ds = objReceiptsController.GetReceiptList(searchObject.ICReceiptNo,
                                                                    null,
                                                                    null,
                                                                    searchObject.FK_ICStockID,
                                                                    searchObject.FK_HREmployeeID,
                                                                    ReceiptType.SubRoundWood.ToString(),
                                                                    searchObject.ReceiptDateFrom,
                                                                    searchObject.ReceiptDateTo);

            return ds;
        }
        //public void GetCurrentModuleDataViewPermission()
        //{
        //    CurrentModuleDataViewPermissionList = BOSApp.CurrentADDataViewPermissionList.Where(i => i.STModuleName == Name && i.ADDataViewPermissionType == ADDataViewPermissionType.Module).ToList();

        //    List<int> branchIDList = new List<int>();
        //    foreach (ADDataViewPermissionsInfo dataViewPermissionsInfo in CurrentModuleDataViewPermissionList)
        //    {
        //        branchIDList.Add(dataViewPermissionsInfo.FK_BRBranchID);
        //    }

        //    if (branchIDList.Count == 0)
        //    {
        //        BranchList = new List<BRBranchsInfo>();
        //    }
        //    else
        //    {
        //        BRBranchsController objBranchsController = new BRBranchsController();
        //        List<BRBranchsInfo> branchList = objBranchsController.GetAllBranches();

        //        BranchList = branchList.Where(i => branchIDList.IndexOf(i.BRBranchID) > -1).ToList();
        //    }
        //}

        public override void ActionNew()
        {
            base.ActionNew();

            SetDefaultEmployee();
            SetDefaultStock();
            GenerateAccountingData();
            DisplayLabelText(CurrentModuleEntity.MainObject);
        }

        public void SetDefaultStock()
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            ICStocksController objStocksController = new ICStocksController();

            //Kho gỗ tròn
            ICStocksInfo objStockInfo = (ICStocksInfo)objStocksController.GetObjectByNo("K-105");
            if (objStockInfo != null)
                objReceiptsInfo.FK_ICStockID = objStockInfo.ICStockID;

        }

        public void FromBatchShipmentRoundwood()
        {
            ActionNew();
            ShowBatchShipmentRoundwood();
        }

        public void ShowBatchShipmentRoundwood()
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            ICReceiptsInfo oldReceipts = (ICReceiptsInfo)CurrentModuleEntity.MainObject.Clone();
            ICReceiptItemsInfo objReceiptItemsInfo = new ICReceiptItemsInfo();
            ICShipmentsController objShipmentController = new ICShipmentsController();
            ICShipmentsInfo objShipmentsInfo = new ICShipmentsInfo();
            ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
            List<ICShipmentItemsInfo> ShipmentItemList = new List<ICShipmentItemsInfo>();
            ShipmentItemList = objShipmentItemsController.GetBatchShipmentForReceipt(objReceiptsInfo.FK_MMBatchProductID, objReceiptsInfo.FK_ICProductID);
            List<ICShipmentItemsInfo> shipmentItemCheck = new List<ICShipmentItemsInfo>();
            MMBatchProductsInfo objBatchProductsInfo = new MMBatchProductsInfo();
            MMBatchProductsController objBatchProductsController = new MMBatchProductsController();
            DateTime fromdate = DateTime.MinValue;
            guiChooseDate chooseDate = new guiChooseDate();
            chooseDate.Module = this;
            chooseDate.ShowDialog();
            if (chooseDate.DialogResult == DialogResult.OK)
            {
                fromdate = chooseDate.FromDate;
                ShipmentItemList = objShipmentItemsController.GetWoodShipmentItemForReceipt(fromdate);
                if (ShipmentItemList != null)
                {
                    guiFind<ICShipmentItemsInfo> guiFind = new guiFind<ICShipmentItemsInfo>(TableName.ICShipmentItemsTableName,
                                                                                                    ShipmentItemList,
                                                                                                    this,
                                                                                                    true,
                                                                                                    true,
                                                                                                    new string[] { "ICShipmentNo", "ICShipmentContainerNo" },
                                                                                                    null,
                                                                                                    true);
                    guiFind.ShowDialog();
                    if (guiFind.DialogResult == DialogResult.OK)
                    {
                        objShipmentsInfo = (ICShipmentsInfo)objShipmentController.GetObjectByID(guiFind.SelectedObjects[0].FK_ICShipmentID);
                        if (objShipmentsInfo != null)
                        {
                            //objBatchProductsInfo = (MMBatchProductsInfo)objBatchProductsController.GetObjectByID(guiFind.SelectedObjects[0].FK_MMBatchProductID);
                            BOSUtil.CopyObject(objShipmentsInfo, objReceiptsInfo);
                            objReceiptsInfo.ICReceiptStatus = oldReceipts.ICReceiptStatus;
                            objReceiptsInfo.ICReceiptNo = "***NEW***";
                            objReceiptsInfo.ICReceiptTypeCombo = ReceiptType.SubRoundWood.ToString();
                            objReceiptsInfo.FK_ICProductAttributeWoodTypeID = objShipmentsInfo.FK_ICProductAttributeWoodTypeID;
                            objReceiptsInfo.FK_ICProductAttributeTTMTID = objShipmentsInfo.FK_ICProductAttributeTTMTID;
                            objReceiptsInfo.FK_MMBatchProductID = objShipmentsInfo.FK_MMBatchProductID;
                            objReceiptsInfo.FK_ICStockID = objShipmentsInfo.FK_ICStockID;
                            objReceiptsInfo.FK_MMOperationID = objShipmentsInfo.FK_MMOperationID;
                            objReceiptsInfo.FK_GECountryID = objShipmentsInfo.FK_GECountryID;
                            objReceiptsInfo.ICReceiptContainerNo = objShipmentsInfo.ICShipmentContainerNo;
                            DisplayLabelText(objReceiptsInfo);
                            CurrentModuleEntity.UpdateMainObjectBindingSource();
                        }
                        //Choose first sale order as a template
                        List<ICShipmentItemsInfo> selectedShipmentItems = guiFind.SelectedObjects as List<ICShipmentItemsInfo>;
                        if (selectedShipmentItems != null && selectedShipmentItems.Count > 0)
                        {
                            foreach (ICShipmentItemsInfo item in selectedShipmentItems)
                            {
                                GetSelectedItemFromBatchShipmentRoundwood(item);
                            }
                            entity.ReceiptItemsList.GridControl.RefreshDataSource();
                        }
                        UpdateTotalCost();
                    }
                    else
                        ActionCancel();
                }
            }
            else
                ActionCancel();
        }

        public void ActionNewFromBatchLumber()
        {
            ActionNew();
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            ICReceiptsInfo oldReceipts = (ICReceiptsInfo)CurrentModuleEntity.MainObject.Clone();
            ICShipmentsInfo objShipmentInfo = new ICShipmentsInfo();
            ICShipmentsController objShipmentController = new ICShipmentsController();
            ICShipmentItemsInfo objShipmentItemInfo = new ICShipmentItemsInfo();
            ICShipmentItemsController objShipmentItemController = new ICShipmentItemsController();
            MMBatchProductsInfo objBatchProductsInfo = new MMBatchProductsInfo();
            MMBatchProductsController objBatchProductsController = new MMBatchProductsController();
            List<ICShipmentItemsInfo> listShipmentItem = new List<ICShipmentItemsInfo>();
            listShipmentItem = objShipmentItemController.GetShipmentBatchLumberForReceipt();
            guiFind<ICShipmentItemsInfo> guiItem = new guiFind<ICShipmentItemsInfo>(TableName.ICShipmentItemsTableName,
                                                                                    listShipmentItem,
                                                                                    this,
                                                                                    true,
                                                                                    true,
                                                                                    new string[] { "MMBatchProductNo", "ICShipmentNo" });
            guiItem.ShowDialog();
            if (guiItem.DialogResult == DialogResult.OK)
            {
                List<ICShipmentItemsInfo> templateListShipment = (List<ICShipmentItemsInfo>)guiItem.SelectedObjects;
                if (templateListShipment != null && templateListShipment.Count > 0)
                {
                    listShipmentItem = templateListShipment.Where(x => x.FK_MMBatchProductID != guiItem.SelectedObjects[0].FK_MMBatchProductID).ToList();
                }
                if (listShipmentItem != null && listShipmentItem.Count > 0)
                {
                    MessageBox.Show(BatchReceiptDryLumberLocalizedResources.ChooseMultiBatchProduct,
                                    CommonLocalizedResources.MessageBoxDefaultCaption,
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                    ActionCancel();
                    ActionNewFromBatchLumber();
                }
                else
                {
                    objShipmentInfo = (ICShipmentsInfo)objShipmentController.GetObjectByID(guiItem.SelectedObjects[0].FK_ICShipmentID);
                    if (objShipmentInfo != null)
                    {
                        objBatchProductsInfo = (MMBatchProductsInfo)objBatchProductsController.GetObjectByID(guiItem.SelectedObjects[0].FK_MMBatchProductID);
                        BOSUtil.CopyObject(objShipmentInfo, objReceiptInfo);
                        objReceiptInfo.ICReceiptNo = "***NEW***";
                        objReceiptInfo.ICReceiptTypeCombo = ReceiptType.SubRoundWood.ToString();
                        objReceiptInfo.ICReceiptStatus = oldReceipts.ICReceiptStatus;
                        objReceiptInfo.FK_ICProductAttributeWoodTypeID = objShipmentInfo.FK_ICProductAttributeWoodTypeID;
                        objReceiptInfo.FK_ICProductAttributeTTMTID = objShipmentInfo.FK_ICProductAttributeTTMTID;
                        objReceiptInfo.FK_MMBatchProductID = objShipmentInfo.FK_MMBatchProductID;
                        objReceiptInfo.FK_ICStockID = objShipmentInfo.FK_ICStockID;
                        objReceiptInfo.FK_MMOperationID = objShipmentInfo.FK_MMOperationID;
                        objReceiptInfo.FK_GECountryID = objShipmentInfo.FK_GECountryID;
                        objReceiptInfo.ICReceiptContainerNo = objShipmentInfo.ICShipmentContainerNo;
                        DisplayLabelText(objReceiptInfo);
                        CurrentModuleEntity.UpdateMainObjectBindingSource();
                    }
                    foreach (ICShipmentItemsInfo item in guiItem.SelectedObjects)
                    {
                        GetSelectedItemFromBatchShipmentRoundwood(item);
                    }
                    entity.ReceiptItemsList.GridControl.RefreshDataSource();
                    UpdateTotalCost();
                }

            }
            else ActionCancel();


        }

        public void GetSelectedItemFromBatchShipmentRoundwood(ICShipmentItemsInfo objShipmentItemsInfo)
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            //ICProductSeriesController objProductSeriesController = new ICProductSeriesController();
            //ICProductSeriesInfo objProductSeriesInfo;
            if (objShipmentItemsInfo != null)
            {
                ICReceiptItemsInfo objReceiptItemsInfo = new ICReceiptItemsInfo();
                objReceiptItemsInfo.FK_ICProductID = objShipmentItemsInfo.FK_ICProductID;
                objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(objShipmentItemsInfo.FK_ICProductID);
                if (objProductsInfo != null)
                {
                    objReceiptItemsInfo.ICReceiptItemProductDesc = objProductsInfo.ICProductDesc;
                    objReceiptItemsInfo.ICReceiptItemProductType = objProductsInfo.ICProductType;
                }

                //objReceiptItemsInfo.ICReceiptItemProductSerialNo = objShipmentItemsInfo.ICShipmentItemProductSerialNo;
                objReceiptItemsInfo.FK_ICStockID = objShipmentItemsInfo.FK_ICStockID;
                objReceiptItemsInfo.ICReceiptItemProductName = objShipmentItemsInfo.ICShipmentItemProductName;
                objReceiptItemsInfo.FK_ICProductAttributeWoodTypeID = objShipmentItemsInfo.FK_ICProductAttributeWoodTypeID;
                objReceiptItemsInfo.FK_ICProductAttributeTTMTID = objShipmentItemsInfo.FK_ICProductAttributeTTMTID;
                objReceiptItemsInfo.FK_GECountryID = objShipmentItemsInfo.FK_GECountryID;
                objReceiptItemsInfo.FK_ICProductAttributeQualityID = objShipmentItemsInfo.FK_ICProductAttributeQualityID;
               
                objReceiptItemsInfo.ICReceiptItemLotNo = objShipmentItemsInfo.ICShipmentItemLotNo;
                objReceiptItemsInfo.ICReceiptItemWoodQty = objShipmentItemsInfo.ICShipmentItemWoodQty;
                objReceiptItemsInfo.ICReceiptItemLogListNo = objShipmentItemsInfo.ICShipmentItemLoglist;
                objReceiptItemsInfo.ICReceiptItemContainerNo = objShipmentItemsInfo.ICShipmentItemContainerNo;
                objReceiptItemsInfo.FK_MMBatchProductID = objShipmentItemsInfo.FK_MMBatchProductID;
                objReceiptItemsInfo.FK_ICProductSerieID = objShipmentItemsInfo.FK_ICProductSerieID;
                objReceiptItemsInfo.FK_MMOperationID = objShipmentItemsInfo.FK_MMOperationID;
                objReceiptItemsInfo.FK_ICShipmentID = objShipmentItemsInfo.FK_ICShipmentProposalID;
                objReceiptItemsInfo.FK_ICShipmentItemID = objShipmentItemsInfo.FK_ICShipmentProposalItemID;
                objReceiptItemsInfo.FK_ICMeasureUnitID = objShipmentItemsInfo.FK_ICMeasureUnitID;
                objReceiptItemsInfo.ICReceiptItemProductSerialNo = objShipmentItemsInfo.ICShipmentItemProductSerialNo;
                objReceiptItemsInfo.ICReceiptItemProductUnitCost = objShipmentItemsInfo.ICShipmentItemProductUnitPrice;
                objReceiptItemsInfo.ICReceiptItemTotalCost = objShipmentItemsInfo.ICShipmentItemTotalAmount;


                objReceiptItemsInfo.ICReceiptItemProductLength = objShipmentItemsInfo.ICShipmentItemLength;
                objReceiptItemsInfo.ICReceiptItemProductPerimeter = objShipmentItemsInfo.ICShipmentItemPerimeter;
                objReceiptItemsInfo.ICReceiptItemProductWidth = objShipmentItemsInfo.ICShipmentItemWidth;
                objReceiptItemsInfo.ICReceiptItemHeightMax = objShipmentItemsInfo.ICShipmentItemHeightMax;
                objReceiptItemsInfo.ICReceiptItemWidthMax = objShipmentItemsInfo.ICShipmentItemWidthMax;
                objReceiptItemsInfo.ICReceiptItemLenghtMax = objShipmentItemsInfo.ICShipmentItemLengthMax;
                objReceiptItemsInfo.ICReceiptItemProductHeight = objShipmentItemsInfo.ICShipmentItemHeight;
                objReceiptItemsInfo.ICReceiptItemProductQty = objShipmentItemsInfo.ICShipmentItemProductQty;


                entity.ReceiptItemsList.Add(objReceiptItemsInfo);
            }
        }
        public void ChangeItemSerieNo(ICReceiptItemsInfo item)
        {
            InvalidateItemSerieNo(item, TableName.ICReceiptItemsTableName, "ICReceiptItemProductSerialNo");
            if (BOSApp.CurrentCompanyInfo.CSCostMethod == AccCostMethod.SpecificIdentification.ToString())
            {
                item.ICReceiptItemProductUnitCost = AccountHelper.GetInventoryCost(item.FK_ICProductID, item.FK_ICProductSerieID);
                BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
                entity.SetProductCostByProductUnitCost(item);
                entity.ReceiptItemsList.GridControl.RefreshDataSource();
                UpdateTotalCost();
            }
        }
        public void UpdateTotalCost()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
                entity.UpdateTotalCost();
                UpdateInventoryCost();
                UpdateDocumentEntries();
            }
        }

        private void UpdateInventoryCost()
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            double extCost = entity.ReceiptItemsList.Sum(i => i.ICReceiptItemExtCost);
            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
            {
                item.ICReceiptItemInventoryCost = item.ICReceiptItemProductUnitCost;
            }
        }
        public void ChangeItemSize(ICReceiptItemsInfo item)
        {
            item.ICReceiptItemProductQty = item.ICReceiptItemProductLength *
                    item.ICReceiptItemProductPerimeter * item.ICReceiptItemProductPerimeter * 0.0796 / 1000000000;
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            entity.SetProductCostByProductUnitCost(item);
            entity.ReceiptItemsList.GridControl.RefreshDataSource();
            UpdateTotalCost();
        }
        public void ChangeItemFromReceiptItemsList()
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            entity.SetProductCostByProductUnitCost();
            entity.ReceiptItemsList.ChangeObjectFromList();
            UpdateTotalCost();
        }

        public void DeleteItemFromReceiptItemsList()
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            entity.ReceiptItemsList.RemoveSelectedRowObjectFromList();
            UpdateTotalCost();
        }

        public void ChangeQTyFromReceiptItemsList(long receiptItemProductQty)
        {
            guiConfigSerialNo objguiConfigSerialNo = new guiConfigSerialNo();
            objguiConfigSerialNo.Module = this;
            if (objguiConfigSerialNo.ShowDialog() == DialogResult.OK)
            {
                BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
                ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)entity.ReceiptItemsList[entity.ReceiptItemsList.CurrentIndex];
                objReceiptItemsInfo.ICReceiptItemProductQty = 1;
                //objReceiptItemsInfo.ICReceiptItemProductBlock = 1;
                objReceiptItemsInfo.ICReceiptItemProductSerialNo = objReceiptsInfo.ICReceiptPrefix + string.Format("{0}", objReceiptsInfo.ICReceiptSerialNoStart);

                entity.SetProductCostByProductUnitCost(objReceiptItemsInfo);
                ICReceiptItemsInfo newICReceiptItemsInfo = null;
                ICReceiptItemsInfo objReceiptItemsInfoClone = new ICReceiptItemsInfo();
                BOSUtil.CopyObject(objReceiptItemsInfo, objReceiptItemsInfoClone);
                for (int i = 1; i < receiptItemProductQty; i++)
                {
                    newICReceiptItemsInfo = new ICReceiptItemsInfo();
                    BOSUtil.CopyObject(objReceiptItemsInfoClone, newICReceiptItemsInfo);
                    newICReceiptItemsInfo.ICReceiptItemProductSerialNo = objReceiptsInfo.ICReceiptPrefix + string.Format("{0}", objReceiptsInfo.ICReceiptSerialNoStart + i);
                    entity.ReceiptItemsList.Insert(entity.ReceiptItemsList.CurrentIndex + i, newICReceiptItemsInfo);
                }
                objReceiptsInfo.ICReceiptPrefix = string.Empty;
                objReceiptsInfo.ICReceiptSerialNoStart = 0;
            }
        }

        public void ChangeItemFromReceiptItemsList(long receiptItemProductQty)
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
          
            objReceiptsInfo.ICReceiptSerialNoStart = 1;
            ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)entity.ReceiptItemsList[entity.ReceiptItemsList.CurrentIndex];
            entity.ReceiptItemsList.BackupList.Clear();
            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
            {
                entity.ReceiptItemsList.BackupList.Add((ICReceiptItemsInfo)item.Clone());
            }
            if (objReceiptItemsInfo != null)
            {
                objReceiptsInfo.ICReceiptPrefix = objReceiptItemsInfo.ICReceiptItemProductSerialNo;
                objReceiptItemsInfo.ICReceiptItemWoodQty = 1;
                string noStart = GetStringSerialByNumber(1);
                objReceiptItemsInfo.ICReceiptItemProductSerialNo = objReceiptsInfo.ICReceiptPrefix + string.Format("{0}", noStart);

                ICReceiptItemsInfo newICReceiptItemsInfo = null;
                ICReceiptItemsInfo objReceiptItemsInfoClone = new ICReceiptItemsInfo();
                BOSUtil.CopyObject(objReceiptItemsInfo, objReceiptItemsInfoClone);
                for (int i = 1; i < receiptItemProductQty; i++)
                {
                    noStart = GetStringSerialByNumber(1 + i);
                    newICReceiptItemsInfo = new ICReceiptItemsInfo();
                    BOSUtil.CopyObject(objReceiptItemsInfoClone, newICReceiptItemsInfo);
                    newICReceiptItemsInfo.ICReceiptItemProductSerialNo = objReceiptsInfo.ICReceiptPrefix + string.Format("{0}", noStart);
                    entity.ReceiptItemsList.Insert(entity.ReceiptItemsList.CurrentIndex + i, newICReceiptItemsInfo);
                }
                objReceiptsInfo.ICReceiptPrefix = string.Empty;
                objReceiptsInfo.ICReceiptSerialNoStart = 0;
            }
        }

        public string GetStringSerialByNumber(int start)
        {
            string result = "A";
            switch (start)
            {
                case 1: result = "A";
                    break;
                case 2: result = "B";
                    break;
                case 3: result = "C";
                    break;
                case 4: result = "D";
                    break;
                case 5: result = "E";
                    break;
                case 6: result = "F";
                    break;
                case 7: result = "G";
                    break;
                case 8: result = "H";
                    break;
                case 9: result = "I";
                    break;
                case 10: result = "J";
                    break;
                case 11: result = "K";
                    break;
                case 12: result = "L";
                    break;
                case 13: result = "M";
                    break;
                case 14: result = "N";
                    break;
                case 15: result = "O";
                    break;
                case 16: result = "P";
                    break;
                case 17: result = "Q";
                    break;
                case 18: result = "R";
                    break;
                case 19: result = "S";
                    break;
                case 20: result = "T";
                    break;
                case 21: result = "U";
                    break;
                case 22: result = "V";
                    break;
                case 23: result = "W";
                    break;
                case 24: result = "X";
                    break;
                case 25: result = "Y";
                    break;
                case 26: result = "Z";
                    break;
                default:
                    result = "A";
                    break;
            }
            return result;
        }
        public DataTable GetProductItemAttribute()
        {
            ADConfigValuesController objConfigValuesController = new ADConfigValuesController();
            DataSet ds = objConfigValuesController.GetADConfigValuesByGroup(ConfigValueGroup.ReceiptItemProductAttributeKey);
            if (ds.Tables != null)
                return ds.Tables[0];
            else
                return null;
        }
        public DataTable GetProductItemOrigin()
        {
            ADConfigValuesController objConfigValuesController = new ADConfigValuesController();
            DataSet ds = objConfigValuesController.GetADConfigValuesByGroup(ConfigValueGroup.ReceiptItemProductOrigin);
            if (ds.Tables != null)
                return ds.Tables[0];
            else
                return null;
        }
        public DataTable GetProductItemSource()
        {
            ADConfigValuesController objConfigValuesController = new ADConfigValuesController();
            DataSet ds = objConfigValuesController.GetADConfigValuesByGroup(ConfigValueGroup.ReceiptItemProductFSC);
            if (ds.Tables != null)
                return ds.Tables[0];
            else
                return null;
        }
        public string GetConfigTextByGroupAndValue(string group, string value)
        {
            ADConfigValuesController objConfigValuesController = new ADConfigValuesController();
            ADConfigValuesInfo objADConfigValuesInfo = objConfigValuesController.GetObjectByGroupAndValue(group, value);
            if (objADConfigValuesInfo != null)
                return objADConfigValuesInfo.ADConfigText;
            return string.Empty;
        }
        public void AddItemToReceiptItemsList()
        {
            ICReceiptsController objReceiptsController = new ICReceiptsController();
            ICReceiptsInfo objReceiptsInfo = new ICReceiptsInfo();
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptItemsInfo item = (ICReceiptItemsInfo)entity.ModuleObjects[TableName.ICReceiptItemsTableName];
            if (item.FK_ICProductID > 0)
            {
                ICReceiptsInfo objReceiptInfo = ((ICReceiptsInfo)entity.MainObject);
                //ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)CurrentModuleEntity.MainObject;
                ICProductsController objProductsController = new ICProductsController();
                ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);

                if (objReceiptInfo != null)
                {
                    item.FK_MMBatchProductID = objReceiptInfo.FK_MMBatchProductID;
                    item.FK_MMOperationID = objReceiptInfo.FK_MMOperationID;
                    item.FK_ICProductAttributeWoodTypeID = objReceiptInfo.FK_ICProductAttributeWoodTypeID;
                }

                entity.SetValuesAfterValidateProduct(item.FK_ICProductID);
                entity.ReceiptItemsList.AddObjectToList();

                //if (objReceiptInfo.ICReceiptReceiptType == ProductType.Roundwood.ToString())
                //{
                objReceiptsInfo = (ICReceiptsInfo)objReceiptsController.GetObjectByID(item.FK_ICProductID);

                if (objReceiptsInfo != null)
                {
                    item.FK_ICProductAttributeWoodTypeID = objReceiptsInfo.FK_ICProductAttributeWoodTypeID;
                    item.FK_GECountryID = objReceiptsInfo.FK_GECountryID;
                    item.FK_MMBatchProductID = objReceiptsInfo.FK_MMBatchProductID;
                    item.FK_ICProductAttributeTTMTID = objReceiptsInfo.FK_ICProductAttributeTTMTID;
                    item.ICReceiptItemWoodQty = objReceiptsInfo.ICReceiptTotalQty;
                    item.ICReceiptItemContainerNo = objReceiptsInfo.ICReceiptContainerNo;
                    item.FK_MMOperationID = objReceiptsInfo.FK_MMOperationID;
                    item.FK_ICStockID = objReceiptsInfo.FK_ICStockID;
                }
                //}
                ResetTotalQuantity();
                UpdateTotalCost();
            }
        }
        public void ResetTotalQuantity()
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            if ((entity.MainObject as ICReceiptsInfo).ICReceiptReceiptType == ProductType.Roundwood.ToString() || (entity.MainObject as ICReceiptsInfo).ICReceiptReceiptType == ProductType.Lumber.ToString())
            {
                objReceiptsInfo.ICReceiptTotalQty = 0;
                foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                {
                    item.ICReceiptItemNotJetExceptBlock = objReceiptsInfo.ICReceiptTotalQty +
                        (item.ICReceiptItemProductLength * item.ICReceiptItemProductPerimeter * item.ICReceiptItemProductPerimeter * 0.0796 / 1000000000);
                    item.ICReceiptItemProductQty = item.ICReceiptItemNotJetExceptBlock - item.ICReceiptItemExceptedBlock;
                    objReceiptsInfo.ICReceiptTotalQty = objReceiptsInfo.ICReceiptTotalQty + item.ICReceiptItemProductQty;
                }
            }
        }

        public override void ActionEdit()
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            if ((entity.MainObject as ICReceiptsInfo).ICReceiptStatus == ReceiptStatus.Complete.ToString())
            {
                //MessageBox.Show(PurchaseReceiptLocalizedResources.CanNotModifyMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                CurrentModuleEntity.SetPropertyChangeEventLock(false);
                return;
            }

            base.ActionEdit();
        }

        public override int ActionSave()
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            //ICDepartmentAttributeValuesController objDepartmentAttributeValuesController = new ICDepartmentAttributeValuesController();
            //ICDepartmentAttributeValuesInfo objDepartmentAttributeValuesInfo = new ICDepartmentAttributeValuesInfo();
            ADConfigValuesController objConfigValuesController = new ADConfigValuesController();
            ADConfigValuesInfo objConfigValuesInfo = new ADConfigValuesInfo();
            entity.ReceiptItemsList.EndCurrentEdit();
            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            foreach (ICReceiptItemsInfo objReceiptItemsInfo in entity.ReceiptItemsList)
            {
                objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(objReceiptItemsInfo.FK_ICProductID);
                if (objProductsInfo.ICProductType != ProductType.Service.ToString())
                {
                    if (string.IsNullOrEmpty(objReceiptItemsInfo.ICReceiptItemProductSerialNo))
                    {
                        MessageBox.Show(PurchaseReceiptLocalizedResources.ItemWoodSerieNoIsRequiredMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return 0;
                    }
                }
                //if (objReceiptItemsInfo.ICReceiptItemProductAttribute != string.Empty)
                //{
                //    objConfigValuesInfo = (ADConfigValuesInfo)objConfigValuesController.GetObjectByGroupAndValue(ConfigValueGroup.ReceiptItemProductAttributeKey, objReceiptItemsInfo.ICReceiptItemProductAttribute);
                //    if (objConfigValuesInfo != null)
                //    {
                //        objReceiptItemsInfo.ICReceiptItemProductAttribute = objConfigValuesInfo.ADConfigText;
                //    }
                //}
            }
            if (!CheckExistSerialNo())
            {
                return 0;
            }
            if (!CheckLengthAfterSlit())
            {
                
                MessageBox.Show(BatchReceiptRoundWoodLocalizedResources.CheckLengthAfterSlipt, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return 0;
                    
            }

            UpdateTotalCost();

            ICReceiptsInfo receipt = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            int receiptID = base.ActionSave();
            return receiptID;
        }
        public bool CheckExistSerialNo()
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
            {
                ICProductsController objProductsController = new ICProductsController();
                ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);
                if (objProductsInfo != null)
                {  objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);
                if (objProductsInfo.ICProductType != ProductType.Service.ToString())
                {
                    if (IsExistSerialNo(item.ICReceiptItemProductSerialNo, objProductsInfo.ICProductType))
                    {
                        MessageBox.Show(string.Format(PurchaseReceiptLocalizedResources.IsExistLotNoText, item.ICReceiptItemProductSerialNo), CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return false;
                    }
                }
                    //else if (item.ICReceiptItemProductSerialNo.Trim() == string.Empty)
                    //{
                    //    MessageBox.Show(InvoiceInLocalizedResources.IsLotNoIsNull, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    //    return false;
                    //}
                    //else
                    //{
                    //    int countItem = 0;
                    //    countItem = entity.ReceiptItemsList.Where(x => x.ICReceiptItemProductSerialNo == item.ICReceiptItemProductSerialNo &&
                    //        x.ICReceiptItemProductSerialNo.Trim() != string.Empty).Count();
                    //    if (countItem > 1)
                    //    {
                    //        MessageBox.Show(InvoiceInLocalizedResources.IsExistLotNoInListText, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    //        return false;
                    //    }
                    //}
                }
            }
            return true;
        }
        private void SetDefaultDesc()
        {
            ICReceiptsInfo receipt = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            APSuppliersController objSuppliersController = new APSuppliersController();
            APSuppliersInfo supplier = (APSuppliersInfo)objSuppliersController.GetObjectByID(receipt.FK_APSupplierID);
            if (supplier != null)
            {
                receipt.ICReceiptDesc = receipt.ICReceiptDesc.Replace("{0}", supplier.APSupplierName);
                receipt.ICReceiptDesc = receipt.ICReceiptDesc.Replace("{1}", receipt.ICReceiptPackNo);
            }
        }
        public bool IsExistSerialNo(string serialNo, string productType)
        {
            ICProductSeriesController objProductSeriesController = new ICProductSeriesController();
            ICProductSeriesInfo productSerie = objProductSeriesController.GetSerieBySerieNoAndProductType(serialNo, productType);
            if (productSerie != null && productSerie.ICProductSerieID > 0)
                return true;
            return false;
        }
        public List<ICProductAttributesInfo> GetProductItemAttributeQuality()
        {
            ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
            List<ICProductAttributesInfo> productAttributesList = objProductAttributesController.GetProductAttributesByProductAttributeGroup(ProductAttributeGroup.Quality.ToString());
            if (productAttributesList != null)
            {
                return productAttributesList;
            }
            else
                return null;
        }
        public List<ICProductAttributesInfo> GetProductItemAttributeWoodType()
        {
            ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
            List<ICProductAttributesInfo> productAttributesList = objProductAttributesController.GetProductAttributesByProductAttributeGroup(ProductAttributeGroup.WoodType.ToString());
            if (productAttributesList != null)
            {
                return productAttributesList;
            }
            else
                return null;
        }
        public List<ICProductAttributesInfo> GetProductItemAttributeTTMT()
        {
            ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
            List<ICProductAttributesInfo> productAttributesList = objProductAttributesController.GetProductAttributesByProductAttributeGroup(ProductAttributeGroup.TTMT.ToString());
            if (productAttributesList != null)
            {
                return productAttributesList;
            }
            else
                return null;
        }
        public void ApproveBatchReceiptRoundWood()
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;

            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            if (!CheckExistSerialNo())
            {
                return;
            }
            objReceiptsInfo.ICReceiptStatus = ReceiptStatus.Complete.ToString();
            entity.UpdateMainObject();

            entity.ApprovedReceipt();
            UpdateShipmentItemReference();
            ModuleAfterCompleted();
            EnableControl(false);
        }
        public void UpdateShipmentItemReference()
        {
            ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            Invalidate(objReceiptsInfo.ICReceiptID);
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
            {
                if (item.FK_ICShipmentItemID > 0)
                {
                    ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)objShipmentItemsController.GetObjectByID(item.FK_ICShipmentItemID);
                    if (objShipmentItemsInfo != null)
                    {
                        //objShipmentItemsInfo.ICShipmentItemIsReceiptDryLumber = true;
                        objShipmentItemsController.UpdateObject(objShipmentItemsInfo);
                    }
                }
            }
        }
        public void EnableControl(bool visible)
        {
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, visible);
            ParentScreen.SetEnableOfToolbarButton("ApproveReceiptRoundWood", visible);
        }
        public override void InvalidateToolbar()
        {
            base.InvalidateToolbar();

            ICReceiptsInfo receipt = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            if (receipt.ICReceiptStatus == ReceiptStatus.Complete.ToString())
            {
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
                ParentScreen.SetEnableOfToolbarButton("ApproveReceiptRoundWood", false);
                //ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, true);
                //EnableControl(true);
            }
            else
                ParentScreen.SetEnableOfToolbarButton("ApproveReceiptRoundWood", true);
            //EnableControl(false);
        }
        /// <summary>
        /// Called when user wants to change stock
        /// </summary>
        /// <param name="stockID">Selected stock id</param>
        public void ChangeStock(int stockID)
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.FK_ICStockID = stockID;
            if (!Toolbar.IsNullOrNoneAction())
            {
                if (entity.ReceiptItemsList.Count > 0)
                {
                    if (MessageBox.Show(WoodPurchaseReceiptLocalizedResources.ConfirmChangeItemStockMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                        {
                            item.FK_ICStockID = stockID;
                        }
                        entity.ReceiptItemsList.GridControl.RefreshDataSource();
                    }
                }
            }
        }
        public void ChangeObject(string objectAccessKey)
        {
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo obj = objObjectsController.GetObjectByAccessKey(objectAccessKey);
            ICReceiptsInfo receipt = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            receipt.ACObjectAccessKey = objectAccessKey;
            obj = objObjectsController.GetObjectByIDAndType(obj.ACObjectID, obj.ACObjectType);
            if (obj != null)
            {
                receipt.ICReceiptDeliveryContactName = obj.ACObjectName;
                // receipt.FK_ACObjectID = obj.ACObjectID;
                CurrentModuleEntity.UpdateMainObjectBindingSource();
            }
        }

        /// <summary>
        /// Called when user wants to change stock
        /// </summary>
        /// <param name="stockID">Selected stock id</param>
        public void ChangePackNo()
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;

            if (!Toolbar.IsNullOrNoneAction())
            {
                if (entity.ReceiptItemsList.Count > 0)
                {
                    if (MessageBox.Show(WoodPurchaseReceiptLocalizedResources.ConfirmChangeItemLotNoMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                        {
                            item.ICReceiptItemLotNo = objReceiptsInfo.ICReceiptPackNo;
                        }
                        entity.ReceiptItemsList.GridControl.RefreshDataSource();
                    }
                }
            }
        }
        public bool CheckLengthAfterSlit()
        {
            double LengthAfter = 0;
            double LengthBefor = 0;
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
            {
                LengthAfter += item.ICReceiptItemProductLength;
            }
            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList.BackupList)
            {
                LengthBefor += item.ICReceiptItemProductLength;
            }
            if (LengthAfter != LengthBefor)
            {
                return false;
            }
            else
                return true;

        }

        #region Accounting
        public override int GetDocumentTypeID()
        {
            ACDocumentTypesController objDocumentTypesController = new ACDocumentTypesController();
            int documentTypeID = objDocumentTypesController.GetObjectIDByName(AccDocumentType.NhapKho.ToString());

            return documentTypeID;
        }

        public override void GenerateAccountingData()
        {
            GenerateAccountingData(new string[] { AccDocumentType.NhapKho.ToString() });
        }

        protected override void UpdateDocumentEntries()
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            foreach (ACDocumentEntrysInfo entry in entity.DocumentEntryList)
            {
                if (entry.ACEntryTypeName == AccEntryType.NhapKhoDieuChinh.ToString() ||
                    entry.ACEntryTypeName == AccEntryType.NhapKhoMuaHang.ToString() ||
                    entry.ACEntryTypeName == AccEntryType.NhapKhoHangTra.ToString() ||
                    entry.ACEntryTypeName == AccEntryType.NhapKhoNVL.ToString())
                {
                    entry.ACDocumentEntryAmount = entity.ReceiptItemsList.Sum(i => i.ICReceiptItemInventoryCost * i.ICReceiptItemProductQty);
                    entry.ACDocumentEntryExchangeAmount = entry.ACDocumentEntryAmount * objReceiptsInfo.ICReceiptExchangeRate;
                }
            }
            entity.DocumentEntryList.GridControl.RefreshDataSource();
            foreach (var item in entity.ReceiptItemsList)
            {
                ICProductsController obj = new ICProductsController();
                ICProductsInfo objProductsInfo = (ICProductsInfo)obj.GetObjectByID(item.FK_ICProductID);

                //[NNThinh] [ADD] [16/04/2014] [ACAccountID of product for batch Receipt, will change soon ], START
                ACAccountsController objAccountsController = new ACAccountsController();
                ACAccountsInfo objAccountsInfo = (ACAccountsInfo)objAccountsController.GetObjectByNo(AccAccount.Acc152);

                //if (objAccountsInfo != null)
                //    UpdateDocumentEntryList(objAccountsInfo.ACAccountID, item.ICReceiptItemInventoryCost * item.ICReceiptItemProductQty, entity, objReceiptsInfo.ICReceiptExchangeRate);
                //[NNThinh] [ADD] [16/04/2014] [ACAccountID of product for batch Receipt, will change soon ], END
            }

        }
        #endregion
    }
    #endregion BatchReceiptRoundWoodModule
}