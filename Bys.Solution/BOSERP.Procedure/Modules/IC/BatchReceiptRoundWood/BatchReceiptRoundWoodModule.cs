using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows.Forms;
using System.IO;
using System.Transactions;
using BOSLib;
using BOSCommon;
using Localization;
using BOSComponent;
using BOSERP.Utilities;
using BOSReport;
using DevExpress.XtraReports.UI;
using DevExpress.XtraEditors;
using DevExpress.XtraGrid.Views.Grid;
using System.Linq;
using Localization;
using BOSERP.Modules.IC.BatchReceiptDryLumber.Localization;
using BOSERP.Modules.IC.BatchReceiptRoundWood.Localization;

namespace BOSERP.Modules.BatchReceiptRoundWood
{
    #region BatchReceiptRoundWoodModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ReceiptModule
    //Created Date:Saturday, May 31, 2008
    //-----------------------------------------------------------

    public class BatchReceiptRoundWoodModule : BaseTransactionModule
    {
        #region Constants
        public const string ReceiptItemGridControlName = "fld_dgcReceiptItems";
        public const string DocumentEntryGridControlName = "fld_dgcACDocumentEntrys";
        public static int RoundWoodSplit;
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
        //public const string SearchBranchLookupEditControlName = "fld_lkeFK_BRBranchID";
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], END
        #endregion

        #region Variable
        private List<ICReceiptItemsInfo> OriginalReceiptItemList;
        #endregion

        #region Public properties
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
        //public BOSLookupEdit SearchBranchLookupEditControl;
        //public List<ADDataViewPermissionsInfo> CurrentModuleDataViewPermissionList;
        //public List<BRBranchsInfo> BranchList;
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], END
        ItemLookupEdit ProductLookUpEditControl;


        #endregion

        public BatchReceiptRoundWoodModule()
        {
            Name = "BatchReceiptRoundWood";
            CurrentModuleEntity = new BatchReceiptRoundWoodEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();

            StartGettingInventoryThread();
            //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
            //GetCurrentModuleDataViewPermission();
            // SearchBranchLookupEditControl = (BOSLookupEdit)Controls[SearchBranchLookupEditControlName];
            //SearchBranchLookupEditControl.Properties.DataSource = BranchList;
            //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], END

        }
        protected override DataSet GetSearchData(ref string searchQuery)
        {
            ICReceiptsController objReceiptsController = new ICReceiptsController();
            ICReceiptsInfo searchObject = (ICReceiptsInfo)CurrentModuleEntity.SearchObject;
            DataSet ds = objReceiptsController.GetReceiptList(searchObject.ICReceiptNo,
                                                                    null,
                                                                    null,
                                                                    searchObject.FK_ICStockID,
                                                                    searchObject.FK_HREmployeeID,
                                                                    ReceiptType.SubRoundWood.ToString(),
                                                                    searchObject.ReceiptDateFrom,
                                                                    searchObject.ReceiptDateTo);

            return ds;
        }
        //public void GetCurrentModuleDataViewPermission()
        //{
        //    CurrentModuleDataViewPermissionList = BOSApp.CurrentADDataViewPermissionList.Where(i => i.STModuleName == Name && i.ADDataViewPermissionType == ADDataViewPermissionType.Module).ToList();

        //    List<int> branchIDList = new List<int>();
        //    foreach (ADDataViewPermissionsInfo dataViewPermissionsInfo in CurrentModuleDataViewPermissionList)
        //    {
        //        branchIDList.Add(dataViewPermissionsInfo.FK_BRBranchID);
        //    }

        //    if (branchIDList.Count == 0)
        //    {
        //        BranchList = new List<BRBranchsInfo>();
        //    }
        //    else
        //    {
        //        BRBranchsController objBranchsController = new BRBranchsController();
        //        List<BRBranchsInfo> branchList = objBranchsController.GetAllBranches();

        //        BranchList = branchList.Where(i => branchIDList.IndexOf(i.BRBranchID) > -1).ToList();
        //    }
        //}

        public override void ActionNew()
        {
            base.ActionNew();
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            if (entity.DocumentEntryList.OriginalList != null)
            {
                entity.DocumentEntryList.OriginalList.Clear();
            }
            SetDefaultEmployee();
            SetDefaultStock();
            GenerateAccountingData();
            DisplayLabelText(CurrentModuleEntity.MainObject);
            //ICReceiptItemsGridControl receiptItemGridControl = (ICReceiptItemsGridControl)Controls["fld_dgcReceiptItems"];
            //if (receiptItemGridControl != null)
            //{
            //    receiptItemGridControl.LoadGridViewForLumber();
            //}
        }

        public void SetDefaultStock()
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            ICStocksController objStocksController = new ICStocksController();

            //Kho gỗ tròn
            ICStocksInfo objStockInfo = (ICStocksInfo)objStocksController.GetObjectByNo("K-105");
            if (objStockInfo != null)
                objReceiptsInfo.FK_ICStockID = objStockInfo.ICStockID;

        }

        public void FromBatchShipmentRoundwood()
        {
            ActionNew();
            ShowBatchShipmentRoundwood();
        }

        public void ShowBatchShipmentRoundwood()
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            ICReceiptsInfo oldReceipts = (ICReceiptsInfo)CurrentModuleEntity.MainObject.Clone();
            ICReceiptItemsInfo objReceiptItemsInfo = new ICReceiptItemsInfo();
            ICShipmentsController objShipmentController = new ICShipmentsController();
            ICShipmentsInfo objShipmentsInfo = new ICShipmentsInfo();
            ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
            List<ICShipmentItemsInfo> ShipmentItemList = new List<ICShipmentItemsInfo>();
            ShipmentItemList = objShipmentItemsController.GetBatchShipmentForReceipt(objReceiptsInfo.FK_MMBatchProductID, objReceiptsInfo.FK_ICProductID);
            List<ICShipmentItemsInfo> shipmentItemCheck = new List<ICShipmentItemsInfo>();
            MMBatchProductsInfo objBatchProductsInfo = new MMBatchProductsInfo();
            MMBatchProductsController objBatchProductsController = new MMBatchProductsController();
            DateTime fromdate = DateTime.MinValue;
            guiChooseDate chooseDate = new guiChooseDate();
            chooseDate.Module = this;
            chooseDate.ShowDialog();
            if (chooseDate.DialogResult == DialogResult.OK)
            {
                fromdate = chooseDate.FromDate;
                ShipmentItemList = objShipmentItemsController.GetWoodShipmentItemForReceipt(fromdate);
                if (ShipmentItemList != null)
                {
                    guiFind<ICShipmentItemsInfo> guiFind = new guiFind<ICShipmentItemsInfo>(TableName.ICShipmentItemsTableName,
                                                                                                    ShipmentItemList,
                                                                                                    this,
                                                                                                    true,
                                                                                                    true,
                                                                                                    new string[] { "ICShipmentNo", "ICShipmentContainerNo" },
                                                                                                    null,
                                                                                                    true);
                    guiFind.ShowDialog();
                    if (guiFind.DialogResult == DialogResult.OK)
                    {
                        objShipmentsInfo = (ICShipmentsInfo)objShipmentController.GetObjectByID(guiFind.SelectedObjects[0].FK_ICShipmentID);
                        if (objShipmentsInfo != null)
                        {
                            //objBatchProductsInfo = (MMBatchProductsInfo)objBatchProductsController.GetObjectByID(guiFind.SelectedObjects[0].FK_MMBatchProductID);
                            BOSUtil.CopyObject(objShipmentsInfo, objReceiptsInfo);
                            objReceiptsInfo.ICReceiptStatus = oldReceipts.ICReceiptStatus;
                            objReceiptsInfo.ICReceiptNo = "***NEW***";
                            objReceiptsInfo.ICReceiptTypeCombo = ReceiptType.SubRoundWood.ToString();
                            objReceiptsInfo.FK_ICProductAttributeWoodTypeID = objShipmentsInfo.FK_ICProductAttributeWoodTypeID;
                            objReceiptsInfo.FK_ICProductAttributeTTMTID = objShipmentsInfo.FK_ICProductAttributeTTMTID;
                            objReceiptsInfo.FK_MMBatchProductID = objShipmentsInfo.FK_MMBatchProductID;
                            objReceiptsInfo.FK_ICStockID = objShipmentsInfo.FK_ICStockID;
                            objReceiptsInfo.FK_MMOperationID = objShipmentsInfo.FK_MMOperationID;
                            objReceiptsInfo.FK_GECountryID = objShipmentsInfo.FK_GECountryID;
                            objReceiptsInfo.ICReceiptContainerNo = objShipmentsInfo.ICShipmentContainerNo;
                            DisplayLabelText(objReceiptsInfo);
                            CurrentModuleEntity.UpdateMainObjectBindingSource();
                        }
                        //Choose first sale order as a template
                        List<ICShipmentItemsInfo> selectedShipmentItems = guiFind.SelectedObjects as List<ICShipmentItemsInfo>;
                        if (selectedShipmentItems != null && selectedShipmentItems.Count > 0)
                        {
                            foreach (ICShipmentItemsInfo item in selectedShipmentItems)
                            {
                                GetSelectedItemFromBatchShipmentRoundwood(item);
                            }
                            ICReceiptItemsGridControl receiptItemGridControl = (ICReceiptItemsGridControl)Controls["fld_dgcReceiptItems"];
                            if (receiptItemGridControl != null)
                            {
                                if (objReceiptsInfo.ICReceiptAcceptanceType == ReceiptAcceptanceType.RoundWoodSplit.ToString())
                                {
                                    receiptItemGridControl.LoadGridViewForRoundWood();
                                }
                                else
                                {
                                    receiptItemGridControl.LoadGridViewForLumber();
                                }
                            }
                            entity.ReceiptItemsList.GridControl.RefreshDataSource();
                            entity.ReceiptItemsList.GridControl.RefreshDataSource();
                        }
                        UpdateTotalCost();
                    }
                    else
                        ActionCancel();
                }
            }
            else
                ActionCancel();
        }

        public void ActionNewFromBatchLumber()
        {
            ActionNew();
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            ICReceiptsInfo oldReceipts = (ICReceiptsInfo)CurrentModuleEntity.MainObject.Clone();
            ICShipmentsInfo objShipmentInfo = new ICShipmentsInfo();
            ICShipmentsController objShipmentController = new ICShipmentsController();
            ICShipmentItemsInfo objShipmentItemInfo = new ICShipmentItemsInfo();
            ICShipmentItemsController objShipmentItemController = new ICShipmentItemsController();
            MMBatchProductsInfo objBatchProductsInfo = new MMBatchProductsInfo();
            MMBatchProductsController objBatchProductsController = new MMBatchProductsController();
            List<ICShipmentItemsInfo> listShipmentItem = new List<ICShipmentItemsInfo>();
            listShipmentItem = objShipmentItemController.GetShipmentBatchLumberForReceipt();
            guiFind<ICShipmentItemsInfo> guiItem = new guiFind<ICShipmentItemsInfo>(TableName.ICShipmentItemsTableName,
                                                                                    listShipmentItem,
                                                                                    this,
                                                                                    true,
                                                                                    true,
                                                                                    new string[] { "MMBatchProductNo", "ICShipmentNo" });
            guiItem.ShowDialog();
            if (guiItem.DialogResult == DialogResult.OK)
            {
                List<ICShipmentItemsInfo> templateListShipment = (List<ICShipmentItemsInfo>)guiItem.SelectedObjects;
                if (templateListShipment != null && templateListShipment.Count > 0)
                {
                    listShipmentItem = templateListShipment.Where(x => x.FK_MMBatchProductID != guiItem.SelectedObjects[0].FK_MMBatchProductID).ToList();
                }
                if (listShipmentItem != null && listShipmentItem.Count > 0)
                {
                    MessageBox.Show(BatchReceiptDryLumberLocalizedResources.ChooseMultiBatchProduct,
                                    CommonLocalizedResources.MessageBoxDefaultCaption,
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                    ActionCancel();
                    ActionNewFromBatchLumber();
                }
                else
                {
                    objShipmentInfo = (ICShipmentsInfo)objShipmentController.GetObjectByID(guiItem.SelectedObjects[0].FK_ICShipmentID);
                    if (objShipmentInfo != null)
                    {
                        objBatchProductsInfo = (MMBatchProductsInfo)objBatchProductsController.GetObjectByID(guiItem.SelectedObjects[0].FK_MMBatchProductID);
                        BOSUtil.CopyObject(objShipmentInfo, objReceiptInfo);
                        objReceiptInfo.ICReceiptNo = "***NEW***";
                        objReceiptInfo.ICReceiptTypeCombo = ReceiptType.SubRoundWood.ToString();
                        objReceiptInfo.ICReceiptStatus = oldReceipts.ICReceiptStatus;
                        objReceiptInfo.FK_ICProductAttributeWoodTypeID = objShipmentInfo.FK_ICProductAttributeWoodTypeID;
                        objReceiptInfo.FK_ICProductAttributeTTMTID = objShipmentInfo.FK_ICProductAttributeTTMTID;
                        objReceiptInfo.FK_MMBatchProductID = objShipmentInfo.FK_MMBatchProductID;
                        objReceiptInfo.FK_ICStockID = objShipmentInfo.FK_ICStockID;
                        objReceiptInfo.FK_MMOperationID = objShipmentInfo.FK_MMOperationID;
                        objReceiptInfo.FK_GECountryID = objShipmentInfo.FK_GECountryID;
                        objReceiptInfo.ICReceiptContainerNo = objShipmentInfo.ICShipmentContainerNo;
                        objReceiptInfo.ICReceiptSubTotalCost = objShipmentInfo.ICShipmentSubTotalAmount;
                        objReceiptInfo.ICReceiptTotalCost = objShipmentInfo.ICShipmentTotalAmount;
                        objReceiptInfo.ICReceiptAcceptanceType = objShipmentInfo.ICShipmentAcceptanceType;
                        DisplayLabelText(objReceiptInfo);
                        CurrentModuleEntity.UpdateMainObjectBindingSource();
                    }
                    foreach (ICShipmentItemsInfo item in guiItem.SelectedObjects)
                    {
                        GetSelectedItemFromBatchShipmentRoundwood(item);
                    }
                    ICReceiptItemsGridControl receiptItemGridControl = (ICReceiptItemsGridControl)Controls["fld_dgcReceiptItems"];
                    if (receiptItemGridControl != null)
                    {
                        if (objReceiptInfo.ICReceiptAcceptanceType == ReceiptAcceptanceType.RoundWoodSplit.ToString())
                        {
                            receiptItemGridControl.LoadGridViewForRoundWood();
                        }
                        else
                        {
                            receiptItemGridControl.LoadGridViewForLumber();
                        }
                    }
                    entity.ReceiptItemsList.GridControl.RefreshDataSource();
                    UpdateTotalCost();
                }

            }
            else ActionCancel();


        }

        public void GetSelectedItemFromBatchShipmentRoundwood(ICShipmentItemsInfo objShipmentItemsInfo)
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            //ICProductSeriesController objProductSeriesController = new ICProductSeriesController();
            //ICProductSeriesInfo objProductSeriesInfo;
            if (objShipmentItemsInfo != null)
            {
                ICReceiptItemsInfo objReceiptItemsInfo = new ICReceiptItemsInfo();
                objReceiptItemsInfo.FK_ICProductID = objShipmentItemsInfo.FK_ICProductID;
                objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(objShipmentItemsInfo.FK_ICProductID);
                if (objProductsInfo != null)
                {
                    objReceiptItemsInfo.ICReceiptItemProductDesc = objProductsInfo.ICProductDesc;
                    objReceiptItemsInfo.ICReceiptItemProductType = objProductsInfo.ICProductType;
                    if (objShipmentItemsInfo.FK_ACAccountID == 0)
                    {
                        objReceiptItemsInfo.FK_ACAccountID = objProductsInfo.FK_ACAccountID;
                    }
                    else
                    {
                        objReceiptItemsInfo.FK_ACAccountID = objShipmentItemsInfo.FK_ACAccountID;
                    }
                }

                //objReceiptItemsInfo.ICReceiptItemProductSerialNo = objShipmentItemsInfo.ICShipmentItemProductSerialNo;
                objReceiptItemsInfo.FK_ICStockID = objShipmentItemsInfo.FK_ICStockID;
                objReceiptItemsInfo.ICReceiptItemProductName = objShipmentItemsInfo.ICShipmentItemProductName;
                objReceiptItemsInfo.FK_ICProductAttributeWoodTypeID = objShipmentItemsInfo.FK_ICProductAttributeWoodTypeID;
                objReceiptItemsInfo.FK_ICProductAttributeTTMTID = objShipmentItemsInfo.FK_ICProductAttributeTTMTID;
                objReceiptItemsInfo.FK_GECountryID = objShipmentItemsInfo.FK_GECountryID;
                objReceiptItemsInfo.FK_ICProductAttributeQualityID = objShipmentItemsInfo.FK_ICProductAttributeQualityID;

                objReceiptItemsInfo.ICReceiptItemLotNo = objShipmentItemsInfo.ICShipmentItemLotNo;
                objReceiptItemsInfo.ICReceiptItemWoodQty = objShipmentItemsInfo.ICShipmentItemWoodQty;
                objReceiptItemsInfo.ICReceiptItemLogListNo = objShipmentItemsInfo.ICShipmentItemLoglist;
                objReceiptItemsInfo.ICReceiptItemContainerNo = objShipmentItemsInfo.ICShipmentItemContainerNo;
                objReceiptItemsInfo.FK_MMBatchProductID = objShipmentItemsInfo.FK_MMBatchProductID;
                objReceiptItemsInfo.FK_ICProductSerieID = objShipmentItemsInfo.FK_ICProductSerieID;
                objReceiptItemsInfo.FK_MMOperationID = objShipmentItemsInfo.FK_MMOperationID;
                objReceiptItemsInfo.FK_ICShipmentID = objShipmentItemsInfo.FK_ICShipmentID;
                objReceiptItemsInfo.FK_ICShipmentItemID = objShipmentItemsInfo.ICShipmentItemID;
                objReceiptItemsInfo.FK_ICMeasureUnitID = objShipmentItemsInfo.FK_ICMeasureUnitID;
                objReceiptItemsInfo.ICReceiptItemProductSerialNo = objShipmentItemsInfo.ICShipmentItemProductSerialNo;
                objReceiptItemsInfo.ICReceiptItemProductUnitCost = objShipmentItemsInfo.ICShipmentItemProductUnitPrice;
                objReceiptItemsInfo.ICReceiptItemTotalCost = objShipmentItemsInfo.ICShipmentItemTotalAmount;


                objReceiptItemsInfo.ICReceiptItemProductLength = objShipmentItemsInfo.ICShipmentItemLength;
                objReceiptItemsInfo.ICReceiptItemProductPerimeter = objShipmentItemsInfo.ICShipmentItemPerimeter;
                objReceiptItemsInfo.ICReceiptItemProductWidth = objShipmentItemsInfo.ICShipmentItemWidth;
                objReceiptItemsInfo.ICReceiptItemHeightMax = objShipmentItemsInfo.ICShipmentItemHeightMax;
                objReceiptItemsInfo.ICReceiptItemWidthMax = objShipmentItemsInfo.ICShipmentItemWidthMax;
                objReceiptItemsInfo.ICReceiptItemLenghtMax = objShipmentItemsInfo.ICShipmentItemLengthMax;
                objReceiptItemsInfo.ICReceiptItemProductHeight = objShipmentItemsInfo.ICShipmentItemHeight;
                objReceiptItemsInfo.ICReceiptItemProductQty = objShipmentItemsInfo.ICShipmentItemProductQty;
                objReceiptItemsInfo.ICReceiptItemProductTotalLength = objShipmentItemsInfo.ICShipmentItemLength;

                objReceiptItemsInfo.ICReceiptItemProductQty = Math.Round(objReceiptItemsInfo.ICReceiptItemProductQty, 4, MidpointRounding.AwayFromZero);
                if (!objReceiptInfo.ICReceiptAcceptanceType.Equals(ReceiptAcceptanceType.Acceptance.ToString())) ;
                entity.SetProductPriceByProductUnitPrice(objReceiptItemsInfo);
                objReceiptItemsInfo.ICReceiptItemIsSplitted = false;
                entity.ReceiptItemsList.Add(objReceiptItemsInfo);
            }
        }
        public void ChangeItemSerieNo(ICReceiptItemsInfo item)
        {
            InvalidateItemSerieNo(item, TableName.ICReceiptItemsTableName, "ICReceiptItemProductSerialNo");
            if (BOSApp.CurrentCompanyInfo.CSCostMethod == AccCostMethod.SpecificIdentification.ToString())
            {
                item.ICReceiptItemProductUnitCost = AccountHelper.GetInventoryCost(item.FK_ICProductID, item.FK_ICProductSerieID);
                BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
                entity.SetProductCostByProductUnitCost(item);
                entity.ReceiptItemsList.GridControl.RefreshDataSource();
                UpdateTotalCost();
            }
        }
        public void UpdateTotalCost()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
                entity.UpdateTotalCost();
                UpdateInventoryCost();
                UpdateDocumentEntries();
            }
        }
        public void ChangeGECurrency(string stringID)
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            int id = 0;
            int.TryParse(stringID, out id);
            objReceiptsInfo.FK_GECurrencyID = id;
            UpdateTotalCost();

        }


        private void UpdateInventoryCost()
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            decimal extCost = entity.ReceiptItemsList.Sum(i => i.ICReceiptItemExtCost);
            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
            {
                item.ICReceiptItemInventoryCost = item.ICReceiptItemProductUnitCost;
            }
        }
        public void ChangeItemSize(ICReceiptItemsInfo item)
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            if (objReceiptInfo.ICReceiptAcceptanceType == ReceiptAcceptanceType.None.ToString() || objReceiptInfo.ICReceiptAcceptanceType.Equals(string.Empty) || objReceiptInfo.ICReceiptAcceptanceType == ReceiptAcceptanceType.RoundWoodSplit.ToString())
            {
                item.ICReceiptItemProductQty = item.ICReceiptItemProductLength *
                        item.ICReceiptItemProductPerimeter * item.ICReceiptItemProductPerimeter * Convert.ToDecimal(0.0796 / 1000000000);
                item.ICReceiptItemProductQty = Math.Round(item.ICReceiptItemProductQty, 4, MidpointRounding.AwayFromZero);
                //item.ICReceiptItemProductTotalLength = item.ICReceiptItemProductLength;
                //BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
                entity.SetProductCostByProductUnitCost(item);
                UpdateTotalCost();
            }
            else
            {


                //item.ICReceiptItemProductQty = item.ICReceiptItemProductLength *
                //       item.ICReceiptItemProductPerimeter * item.ICReceiptItemProductPerimeter * 0.0796 / 1000000000;
                //item.ICReceiptItemProductUnitCost = item.ICReceiptItemTotalCost / item.ICReceiptItemProductQty;

                //item.ICReceiptItemProductQty = item.ICReceiptItemProductLength *
                //       item.ICReceiptItemProductPerimeter * item.ICReceiptItemProductPerimeter * 0.0796 / 1000000000;
                //item.ICReceiptItemProductQty = Math.Round(item.ICReceiptItemProductQty, 4, MidpointRounding.AwayFromZero);
                //item.ICReceiptItemProductUnitCost = item.ICReceiptItemTotalCost / item.ICReceiptItemProductQty;

                //item.ICReceiptItemProductQty = Math.Round(item.ICReceiptItemProductQty, 4, MidpointRounding.AwayFromZero);
                ICShipmentItemsInfo objShipmentItemsInfo = new ICShipmentItemsInfo();
                ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
                objShipmentItemsInfo = (ICShipmentItemsInfo)objShipmentItemsController.GetObjectByID(item.FK_ICShipmentItemID);
                if (objShipmentItemsInfo != null)
                {
                    item.ICReceiptItemTotalCost = objShipmentItemsInfo.ICShipmentItemTotalAmount;
                    entity.SetProductCostByProductUnitCostForReceiptAcceptanceType(item);
                    UpdateTotalCost();
                }
                item.ICReceiptItemProductQty = item.ICReceiptItemProductLength *
                item.ICReceiptItemProductPerimeter * item.ICReceiptItemProductPerimeter * Convert.ToDecimal(0.0796 / 1000000000);
                item.ICReceiptItemProductQty = Math.Round(item.ICReceiptItemProductQty, 4, MidpointRounding.AwayFromZero);

            }


            entity.ReceiptItemsList.GridControl.RefreshDataSource();

        }
        public void ChangeItemQty(ICReceiptItemsInfo item)
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            if (objReceiptInfo.ICReceiptAcceptanceType == ReceiptAcceptanceType.Acceptance.ToString())
            {
                //item.ICReceiptItemProductUnitCost = item.ICReceiptItemTotalCost / item.ICReceiptItemProductQty;
                //entity.SetProductCostByProductUnitCost(item);
                //entity.ReceiptItemsList.GridControl.RefreshDataSource();
                //UpdateTotalCost();
            }

        }
        public void ChangeItemFromReceiptItemsList()
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            if (objReceiptInfo.ICReceiptAcceptanceType.Equals(ReceiptAcceptanceType.Acceptance.ToString()))
                entity.SetProductCostByProductUnitCostForReceiptAcceptanceType();
            else
                entity.SetProductCostByProductUnitCost();
            entity.ReceiptItemsList.ChangeObjectFromList();
            UpdateTotalCost();
        }

        public void DeleteItemFromReceiptItemsList()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
                entity.ReceiptItemsList.RemoveSelectedRowObjectFromList();
                UpdateTotalCost();
            }
        }

        public void ChangeQTyFromReceiptItemsList(long receiptItemProductQty)
        {
            guiConfigSerialNo objguiConfigSerialNo = new guiConfigSerialNo();
            objguiConfigSerialNo.Module = this;
            if (objguiConfigSerialNo.ShowDialog() == DialogResult.OK)
            {
                BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
                ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)entity.ReceiptItemsList[entity.ReceiptItemsList.CurrentIndex];
                //Remove
                //objReceiptItemsInfo.ICReceiptItemProductQty = 1;
                //objReceiptItemsInfo.ICReceiptItemProductBlock = 1;
                objReceiptItemsInfo.ICReceiptItemWoodQty = 1;
                objReceiptItemsInfo.ICReceiptItemProductSerialNo = objReceiptsInfo.ICReceiptPrefix + string.Format("{0}", objReceiptsInfo.ICReceiptSerialNoStart);

                entity.SetProductCostByProductUnitCost(objReceiptItemsInfo);
                ICReceiptItemsInfo newICReceiptItemsInfo = null;
                ICReceiptItemsInfo objReceiptItemsInfoClone = new ICReceiptItemsInfo();
                BOSUtil.CopyObject(objReceiptItemsInfo, objReceiptItemsInfoClone);
                for (int i = 1; i < receiptItemProductQty; i++)
                {
                    newICReceiptItemsInfo = new ICReceiptItemsInfo();
                    BOSUtil.CopyObject(objReceiptItemsInfoClone, newICReceiptItemsInfo);
                    newICReceiptItemsInfo.FK_ICProductSerieID = 0;
                    newICReceiptItemsInfo.ICReceiptItemProductSerialNo = objReceiptsInfo.ICReceiptPrefix + string.Format("{0}", objReceiptsInfo.ICReceiptSerialNoStart + i);
                    entity.ReceiptItemsList.Insert(entity.ReceiptItemsList.CurrentIndex + i, newICReceiptItemsInfo);
                }
                objReceiptsInfo.ICReceiptPrefix = string.Empty;
                objReceiptsInfo.ICReceiptSerialNoStart = 0;
            }
        }

        public void ChangeItemFromReceiptItemsList(long receiptItemProductQty)
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;

            objReceiptsInfo.ICReceiptSerialNoStart = 1;
            ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)entity.ReceiptItemsList[entity.ReceiptItemsList.CurrentIndex];
            //NN GIANG ADD START
            objReceiptItemsInfo.ICReceiptItemProductTotalLength = objReceiptItemsInfo.ICReceiptItemProductLength;
            // NN GIANG END
            //entity.ReceiptItemsList.BackupList.Clear();
            //foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
            //{
            //    entity.ReceiptItemsList.BackupList.Add((ICReceiptItemsInfo)item.Clone());
            //}
            if (objReceiptItemsInfo != null)
            {
                objReceiptsInfo.ICReceiptPrefix = objReceiptItemsInfo.ICReceiptItemProductSerialNo;
                objReceiptItemsInfo.ICReceiptItemWoodQty = 1;
                objReceiptItemsInfo.ICReceiptItemIsSplitted = true;
                string noStart = GetStringSerialByNumber(1);
                objReceiptItemsInfo.ICReceiptItemProductSerialNo = objReceiptsInfo.ICReceiptPrefix + string.Format("{0}", noStart);

                ICReceiptItemsInfo newICReceiptItemsInfo = null;
                ICReceiptItemsInfo objReceiptItemsInfoClone = new ICReceiptItemsInfo();
                BOSUtil.CopyObject(objReceiptItemsInfo, objReceiptItemsInfoClone);
                for (int i = 1; i < receiptItemProductQty; i++)
                {
                    noStart = GetStringSerialByNumber(1 + i);
                    newICReceiptItemsInfo = new ICReceiptItemsInfo();
                    BOSUtil.CopyObject(objReceiptItemsInfoClone, newICReceiptItemsInfo);
                    newICReceiptItemsInfo.ICReceiptItemProductTotalLength = 0;
                    newICReceiptItemsInfo.FK_ICProductSerieID = 0;
                    newICReceiptItemsInfo.ICReceiptItemProductSerialNo = objReceiptsInfo.ICReceiptPrefix + string.Format("{0}", noStart);
                    entity.ReceiptItemsList.Insert(entity.ReceiptItemsList.CurrentIndex + i, newICReceiptItemsInfo);
                }
                objReceiptsInfo.ICReceiptPrefix = string.Empty;
                objReceiptsInfo.ICReceiptSerialNoStart = 0;
            }
        }

        public string GetStringSerialByNumber(int start)
        {
            string result = "A";
            switch (start)
            {
                case 1: result = "A";
                    break;
                case 2: result = "B";
                    break;
                case 3: result = "C";
                    break;
                case 4: result = "D";
                    break;
                case 5: result = "E";
                    break;
                case 6: result = "F";
                    break;
                case 7: result = "G";
                    break;
                case 8: result = "H";
                    break;
                case 9: result = "I";
                    break;
                case 10: result = "J";
                    break;
                case 11: result = "K";
                    break;
                case 12: result = "L";
                    break;
                case 13: result = "M";
                    break;
                case 14: result = "N";
                    break;
                case 15: result = "O";
                    break;
                case 16: result = "P";
                    break;
                case 17: result = "Q";
                    break;
                case 18: result = "R";
                    break;
                case 19: result = "S";
                    break;
                case 20: result = "T";
                    break;
                case 21: result = "U";
                    break;
                case 22: result = "V";
                    break;
                case 23: result = "W";
                    break;
                case 24: result = "X";
                    break;
                case 25: result = "Y";
                    break;
                case 26: result = "Z";
                    break;
                default:
                    result = "A";
                    break;
            }
            return result;
        }
        public DataTable GetProductItemAttribute()
        {
            ADConfigValuesController objConfigValuesController = new ADConfigValuesController();
            DataSet ds = objConfigValuesController.GetADConfigValuesByGroup(ConfigValueGroup.ReceiptItemProductAttributeKey);
            if (ds.Tables != null)
                return ds.Tables[0];
            else
                return null;
        }
        public DataTable GetProductItemOrigin()
        {
            ADConfigValuesController objConfigValuesController = new ADConfigValuesController();
            DataSet ds = objConfigValuesController.GetADConfigValuesByGroup(ConfigValueGroup.ReceiptItemProductOrigin);
            if (ds.Tables != null)
                return ds.Tables[0];
            else
                return null;
        }
        public DataTable GetProductItemSource()
        {
            ADConfigValuesController objConfigValuesController = new ADConfigValuesController();
            DataSet ds = objConfigValuesController.GetADConfigValuesByGroup(ConfigValueGroup.ReceiptItemProductFSC);
            if (ds.Tables != null)
                return ds.Tables[0];
            else
                return null;
        }
        public string GetConfigTextByGroupAndValue(string group, string value)
        {
            ADConfigValuesController objConfigValuesController = new ADConfigValuesController();
            ADConfigValuesInfo objADConfigValuesInfo = objConfigValuesController.GetObjectByGroupAndValue(group, value);
            if (objADConfigValuesInfo != null)
                return objADConfigValuesInfo.ADConfigText;
            return string.Empty;
        }
        public void AddItemToReceiptItemsList()
        {
            ICReceiptsController objReceiptsController = new ICReceiptsController();
            ICReceiptsInfo objReceiptsInfo = new ICReceiptsInfo();
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptItemsInfo item = (ICReceiptItemsInfo)entity.ModuleObjects[TableName.ICReceiptItemsTableName];
            if (item.FK_ICProductID > 0)
            {
                ICReceiptsInfo objReceiptInfo = ((ICReceiptsInfo)entity.MainObject);
                //ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)CurrentModuleEntity.MainObject;
                ICProductsController objProductsController = new ICProductsController();
                ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);
                if (objProductsInfo != null)
                {
                    //NN GIANG ADD AccountID WITH PRODUCT - START - 25-04-2016
                    item.FK_ACAccountID = objProductsInfo.FK_ACAccountID;
                    //NN GIANG ADD AccountID WITH PRODUCT - END - 25-04-2016

                }
                if (objReceiptInfo != null)
                {
                    item.FK_MMBatchProductID = objReceiptInfo.FK_MMBatchProductID;
                    item.FK_MMOperationID = objReceiptInfo.FK_MMOperationID;
                    item.FK_ICProductAttributeWoodTypeID = objReceiptInfo.FK_ICProductAttributeWoodTypeID;

                }

                item.ICReceiptItemIsSplitted = false;
                item.ICReceiptItemProductTotalLength = item.ICReceiptItemProductLength;
                entity.SetValuesAfterValidateProduct(item.FK_ICProductID);
                entity.ReceiptItemsList.AddObjectToList();

                //if (objReceiptInfo.ICReceiptReceiptType == ProductType.Roundwood.ToString())
                //{
                objReceiptsInfo = (ICReceiptsInfo)objReceiptsController.GetObjectByID(item.FK_ICProductID);

                if (objReceiptsInfo != null)
                {
                    item.FK_ICProductAttributeWoodTypeID = objReceiptsInfo.FK_ICProductAttributeWoodTypeID;
                    item.FK_GECountryID = objReceiptsInfo.FK_GECountryID;
                    item.FK_MMBatchProductID = objReceiptsInfo.FK_MMBatchProductID;
                    item.FK_ICProductAttributeTTMTID = objReceiptsInfo.FK_ICProductAttributeTTMTID;
                    item.ICReceiptItemWoodQty = objReceiptsInfo.ICReceiptTotalQty;
                    item.ICReceiptItemContainerNo = objReceiptsInfo.ICReceiptContainerNo;
                    item.FK_MMOperationID = objReceiptsInfo.FK_MMOperationID;
                    item.FK_ICStockID = objReceiptsInfo.FK_ICStockID;
                }
                //}
                ResetTotalQuantity();
                UpdateTotalCost();
            }
        }
        public void ResetTotalQuantity()
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            if ((entity.MainObject as ICReceiptsInfo).ICReceiptReceiptType == ProductType.Roundwood.ToString() || (entity.MainObject as ICReceiptsInfo).ICReceiptReceiptType == ProductType.Lumber.ToString())
            {
                objReceiptsInfo.ICReceiptTotalQty = 0;
                foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                {
                    item.ICReceiptItemNotJetExceptBlock = objReceiptsInfo.ICReceiptTotalQty +
                        (item.ICReceiptItemProductLength * item.ICReceiptItemProductPerimeter * item.ICReceiptItemProductPerimeter * Convert.ToDecimal(0.0796 / 1000000000));
                    item.ICReceiptItemProductQty = item.ICReceiptItemNotJetExceptBlock - item.ICReceiptItemExceptedBlock;
                    objReceiptsInfo.ICReceiptTotalQty = objReceiptsInfo.ICReceiptTotalQty + item.ICReceiptItemProductQty;
                }
            }
        }

        public override void ActionEdit()
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            if ((entity.MainObject as ICReceiptsInfo).ICReceiptStatus == ReceiptStatus.Complete.ToString())
            {
                //MessageBox.Show(PurchaseReceiptLocalizedResources.CanNotModifyMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                CurrentModuleEntity.SetPropertyChangeEventLock(false);
                return;
            }

            base.ActionEdit();
        }

        public override int ActionSave()
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            //ICDepartmentAttributeValuesController objDepartmentAttributeValuesController = new ICDepartmentAttributeValuesController();
            //ICDepartmentAttributeValuesInfo objDepartmentAttributeValuesInfo = new ICDepartmentAttributeValuesInfo();
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            ADConfigValuesController objConfigValuesController = new ADConfigValuesController();
            ADConfigValuesInfo objConfigValuesInfo = new ADConfigValuesInfo();
            entity.ReceiptItemsList.EndCurrentEdit();
            CheckPackNo(objReceiptsInfo);



            //TNDLoc [ADD][26/03/2016][totalCost => unitCost],START
            //if (objReceiptsInfo.ICReceiptAcceptanceType == ReceiptAcceptanceType.Acceptance.ToString() )
            //{
            //    if (entity.ReceiptItemsList.Count > 0)
            //    {
            //        ICShipmentsController objShipmentsController = new ICShipmentsController();
            //        ICReceiptItemsInfo receiptFilter = entity.ReceiptItemsList.FirstOrDefault(r=>r.FK_ICShipmentID>0);
            //        if (receiptFilter != null)
            //        {
            //            int shipmentID = receiptFilter.FK_ICShipmentID;
            //            ICShipmentsInfo shipmentsInfo = (ICShipmentsInfo)objShipmentsController.GetObjectByID(shipmentID);
            //            if (shipmentsInfo != null)
            //            {
            //                decimal totalCost = shipmentsInfo.ICShipmentTotalAmount;

            //                decimal totalQty = entity.ReceiptItemsList.Sum(r => r.ICReceiptItemProductQty);
            //                decimal unitCost = totalCost / totalQty;
            //                foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
            //                {
            //                    item.ICReceiptItemProductUnitCost = unitCost;
            //                    entity.SetProductCostByProductUnitCost(item);
            //                }
            //            }
            //        }
            //    }
            //}

            //TNDLoc [ADD][26/03/2016][totalCost => unitCost],END
            if (string.IsNullOrEmpty(objReceiptsInfo.ICReceiptAcceptanceType))
            {
                MessageBox.Show(BatchReceiptRoundWoodLocalizedResources2.AcceptanceIsRequiredMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return 0;
            }
            //ICProductsController objProductsController = new ICProductsController();
            //ICProductsInfo objProductsInfo = new ICProductsInfo();
            //foreach (ICReceiptItemsInfo objReceiptItemsInfo in entity.ReceiptItemsList)
            //{
            //    objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(objReceiptItemsInfo.FK_ICProductID);
            //    if (objProductsInfo.ICProductType != ProductType.Service.ToString() && !objProductsInfo.IsAsset)
            //    {
            //        if (string.IsNullOrEmpty(objReceiptItemsInfo.ICReceiptItemProductSerialNo))
            //        {
            //            MessageBox.Show(PurchaseReceiptLocalizedResources.ItemWoodSerieNoIsRequiredMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            //            return 0;
            //        }
            //    }
            //    //if (objReceiptItemsInfo.ICReceiptItemProductAttribute != string.Empty)
            //    //{
            //    //    objConfigValuesInfo = (ADConfigValuesInfo)objConfigValuesController.GetObjectByGroupAndValue(ConfigValueGroup.ReceiptItemProductAttributeKey, objReceiptItemsInfo.ICReceiptItemProductAttribute);
            //    //    if (objConfigValuesInfo != null)
            //    //    {
            //    //        objReceiptItemsInfo.ICReceiptItemProductAttribute = objConfigValuesInfo.ADConfigText;
            //    //    }
            //    //}
            //}
            if (!CheckExistSerialNo())
            {
                return 0;
            }

            //if (objReceiptsInfo.ICReceiptAcceptanceType != ReceiptAcceptanceType.Acceptance.ToString())
            //{

            //    if (!CheckLengthAfterSlit())
            //    {

            //    MessageBox.Show(BatchReceiptRoundWoodLocalizedResources.CheckLengthAfterSlipt, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            //    return 0;

            //    }
            //}


            //NN Giang ADD -[CHECK QTY IN SHIPMENT ITEM] - Start-14-04-2016
            //if (!CheckQtyInShipmentItem(entity.ReceiptItemsList))
            //{
            //    return 0;
            //}
            //NN Giang ADD -[CHECK QTY IN SHIPMENT ITEM] - End-14-04-2016
            CalculateUnitCostFuntion(false);
            UpdateTotalCost();

            ICReceiptsInfo receipt = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            int receiptID = base.ActionSave();
            ParentScreen.SetEnableOfToolbarButton("CalculateUnitCost", true);
            return receiptID;
        }
        public bool CheckExistSerialNo()
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;

            List<ICReceiptItemsInfo> ListTemp = new List<ICReceiptItemsInfo>();
            List<string> ListString = new List<string>();
            ICInventoryStocksController objInventoryStocksController = new ICInventoryStocksController();
            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
            {
                ICProductsController objProductsController = new ICProductsController();
                ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);
                if (objProductsInfo != null)
                {
                    objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);

                    if (objProductsInfo.ICProductType != ProductType.Service.ToString() && !objProductsInfo.IsAsset)
                    {
                        if (string.IsNullOrEmpty(item.ICReceiptItemProductSerialNo))
                        {
                            MessageBox.Show(PurchaseReceiptLocalizedResources.ItemWoodSerieNoIsRequiredMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return false;
                        }
                        if (IsExistSerialNo(item.ICReceiptItemProductSerialNo, objProductsInfo.ICProductType))
                        {
                            MessageBox.Show(string.Format(PurchaseReceiptLocalizedResources.IsExistLotNoText, item.ICReceiptItemProductSerialNo), CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return false;
                        }
                        //Check unitcost receiptItem and InventoryStock, Start
                        /*Kiểm tra đơn giá nhập và đơn giá tồn kho*/
                        decimal unitcost = objInventoryStocksController.GetInventoryStockUnitCost(item.FK_ICProductID, item.ICReceiptItemProductSerialNo);
                        if (unitcost >= 0)//unitCost < 0 là chưa có đơn gía tồn kho
                        {
                            if (Math.Round(unitcost, 0) != item.ICReceiptItemProductUnitCost)
                            {
                                MessageBox.Show(string.Format(BatchReceiptDryLumberLocalizedResources.UnitCostInventoryStock, item.ICReceiptItemProductName), CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return false;
                            }
                        }
                        //Check unitcost receiptItem and InventoryStock, End
                    }
                    //else if (item.ICReceiptItemProductSerialNo.Trim() == string.Empty)
                    //{
                    //    MessageBox.Show(InvoiceInLocalizedResources.IsLotNoIsNull, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    //    return false;
                    //}
                    //else
                    //{
                    //    int countItem = 0;
                    //    countItem = entity.ReceiptItemsList.Where(x => x.ICReceiptItemProductSerialNo == item.ICReceiptItemProductSerialNo &&
                    //        x.ICReceiptItemProductSerialNo.Trim() != string.Empty).Count();
                    //    if (countItem > 1)
                    //    {
                    //        MessageBox.Show(InvoiceInLocalizedResources.IsExistLotNoInListText, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    //        return false;
                    //    }
                    //}
                }
                //Check length after split

                if (objReceiptsInfo.ICReceiptAcceptanceType != ReceiptAcceptanceType.Acceptance.ToString())
                {
                    if (item.ICReceiptItemIsSplitted == true)
                    {
                        ICReceiptItemsInfo itemtemp = new ICReceiptItemsInfo();
                        string SerialNo_ProductNo = item.ICReceiptItemProductSerialNo.Substring(0, item.ICReceiptItemProductSerialNo.Length - 1) + item.FK_ICProductID;
                        if (!ListString.Contains(SerialNo_ProductNo))
                            ListString.Add(SerialNo_ProductNo);
                        itemtemp = (ICReceiptItemsInfo)item.Clone();
                        itemtemp.ICReceiptItemProductSerialNo = SerialNo_ProductNo;
                        ListTemp.Add(itemtemp);
                    }
                }

            }

            //Check length after split
            if (objReceiptsInfo.ICReceiptAcceptanceType != ReceiptAcceptanceType.Acceptance.ToString())
            {

                if (ListString.Count > 0)
                {
                    foreach (string item in ListString)
                    {
                        ICReceiptItemsInfo receiptItem = ListTemp.FirstOrDefault(x => x.ICReceiptItemProductTotalLength > 0 && x.ICReceiptItemProductSerialNo == item);
                        decimal TotalLenghtFirst = 0;
                        if (receiptItem != null)
                        {
                            TotalLenghtFirst = receiptItem.ICReceiptItemProductTotalLength;
                        }

                        decimal SumLenght = ListTemp.Where(x => x.ICReceiptItemProductSerialNo == item).ToList().Sum(t => t.ICReceiptItemProductLength);
                        if (SumLenght == TotalLenghtFirst)
                        {
                            return true;
                        }
                        else
                        {
                            MessageBox.Show(BatchReceiptRoundWoodLocalizedResources.CheckLengthAfterSlipt, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return false;
                        }
                    }
                }
            }


            return true;
        }
        private void SetDefaultDesc()
        {
            ICReceiptsInfo receipt = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            APSuppliersController objSuppliersController = new APSuppliersController();
            APSuppliersInfo supplier = (APSuppliersInfo)objSuppliersController.GetObjectByID(receipt.FK_APSupplierID);
            if (supplier != null)
            {
                receipt.ICReceiptDesc = receipt.ICReceiptDesc.Replace("{0}", supplier.APSupplierName);
                receipt.ICReceiptDesc = receipt.ICReceiptDesc.Replace("{1}", receipt.ICReceiptPackNo);
            }
        }
        public bool IsExistSerialNo(string serialNo, string productType)
        {
            ICProductSeriesController objProductSeriesController = new ICProductSeriesController();
            ICProductSeriesInfo productSerie = objProductSeriesController.GetSerieBySerieNoAndProductType(serialNo, productType);
            if (productSerie != null && productSerie.ICProductSerieID > 0)
                return true;
            return false;
        }
        public List<ICProductAttributesInfo> GetProductItemAttributeQuality()
        {
            ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
            List<ICProductAttributesInfo> productAttributesList = objProductAttributesController.GetProductAttributesByProductAttributeGroup(ProductAttributeGroup.Quality.ToString());
            if (productAttributesList != null)
            {
                return productAttributesList;
            }
            else
                return null;
        }
        public List<ICProductAttributesInfo> GetProductItemAttributeWoodType()
        {
            ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
            List<ICProductAttributesInfo> productAttributesList = objProductAttributesController.GetProductAttributesByProductAttributeGroup(ProductAttributeGroup.WoodType.ToString());
            if (productAttributesList != null)
            {
                return productAttributesList;
            }
            else
                return null;
        }
        public List<ICProductAttributesInfo> GetProductItemAttributeTTMT()
        {
            ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
            List<ICProductAttributesInfo> productAttributesList = objProductAttributesController.GetProductAttributesByProductAttributeGroup(ProductAttributeGroup.TTMT.ToString());
            if (productAttributesList != null)
            {
                return productAttributesList;
            }
            else
                return null;
        }
        public void ApproveBatchReceiptRoundWood()
        {
            if (Toolbar.IsNullOrNoneAction())
            {
                BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;

                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
                if (!CheckExistSerialNo())
                {
                    return;
                }

                //TNDLoc [ADD][10/08/2016][Tồn kho tối đa, tối thiểu],START
                /* Nếu nhiều hơn tồn kho tối đa thì không cho nhập kho */
                if (entity.ReceiptItemsList.IsInvalidInventoryStockMax(TransactionUtil.cstInventoryReceipt))
                {
                    return;
                }
                //TNDLoc [ADD][10/08/2016][Tồn kho tối đa, tối thiểu],END

                ActionComplete();

                //objReceiptsInfo.ICReceiptStatus = ReceiptStatus.Complete.ToString();
                //entity.UpdateMainObject();

                //entity.ApprovedReceipt();
                //UpdateShipmentItemReference();
                //ModuleAfterCompleted();
                EnableControl(false);
            }
        }
        public void UpdateShipmentItemReference()
        {
            ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            Invalidate(objReceiptsInfo.ICReceiptID);
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
            {
                if (item.FK_ICShipmentItemID > 0)
                {
                    ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)objShipmentItemsController.GetObjectByID(item.FK_ICShipmentItemID);
                    if (objShipmentItemsInfo != null)
                    {
                        //objShipmentItemsInfo.ICShipmentItemIsReceiptDryLumber = true;
                        objShipmentItemsController.UpdateObject(objShipmentItemsInfo);
                    }
                }
            }
        }
        public void EnableControl(bool visible)
        {
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, visible);
            ParentScreen.SetEnableOfToolbarButton("ApproveReceiptRoundWood", visible);
            ParentScreen.SetEnableOfToolbarButton("CalculateUnitCost", visible);
        }
        public override void InvalidateToolbar()
        {


            ICReceiptsInfo receipt = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            ParentScreen.SetEnableOfToolbarButton("CalculateUnitCost", true);
            if (receipt.ICReceiptStatus == ReceiptStatus.Complete.ToString())
            {
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
                ParentScreen.SetEnableOfToolbarButton("ApproveReceiptRoundWood", false);
                //ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, true);
                ParentScreen.SetEnableOfToolbarButton("CalculateUnitCost", false);
                //EnableControl(true);
            }
            else
            {
                ParentScreen.SetEnableOfToolbarButton("ApproveReceiptRoundWood", true);
                if (!Toolbar.IsNullOrNoneAction())
                {
                    ParentScreen.SetEnableOfToolbarButton("CalculateUnitCost", false);
                }
                //else
                //{
                //    ParentScreen.SetEnableOfToolbarButton("CalculateUnitCost", true);
                //}
            }
            base.InvalidateToolbar();
            //EnableControl(false);
        }
        /// <summary>
        /// Called when user wants to change stock
        /// </summary>
        /// <param name="stockID">Selected stock id</param>
        public void ChangeStock(int stockID)
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.FK_ICStockID = stockID;
            if (!Toolbar.IsNullOrNoneAction())
            {
                if (entity.ReceiptItemsList.Count > 0)
                {
                    if (MessageBox.Show(WoodPurchaseReceiptLocalizedResources.ConfirmChangeItemStockMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                        {
                            item.FK_ICStockID = stockID;
                        }
                        entity.ReceiptItemsList.GridControl.RefreshDataSource();
                    }
                }
            }
        }
        public void ChangeObject(string objectAccessKey)
        {
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo obj = objObjectsController.GetObjectByAccessKey(objectAccessKey);
            ICReceiptsInfo receipt = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            receipt.ACObjectAccessKey = objectAccessKey;
            obj = objObjectsController.GetObjectByIDAndType(obj.ACObjectID, obj.ACObjectType);
            if (obj != null)
            {
                receipt.ICReceiptDeliveryContactName = obj.ACObjectName;
                // receipt.FK_ACObjectID = obj.ACObjectID;
                CurrentModuleEntity.UpdateMainObjectBindingSource();
            }
        }

        /// <summary>
        /// Called when user wants to change stock
        /// </summary>
        /// <param name="stockID">Selected stock id</param>
        public void ChangePackNo()
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;

            if (!Toolbar.IsNullOrNoneAction())
            {
                if (entity.ReceiptItemsList.Count > 0)
                {
                    if (MessageBox.Show(WoodPurchaseReceiptLocalizedResources.ConfirmChangeItemLotNoMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                        {
                            item.ICReceiptItemLotNo = objReceiptsInfo.ICReceiptPackNo;
                        }
                        entity.ReceiptItemsList.GridControl.RefreshDataSource();
                    }
                }
            }
        }
        public bool CheckLengthAfterSlit()
        {
            bool flag = true;
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            List<ICReceiptItemsInfo> ListTemp = new List<ICReceiptItemsInfo>();
            List<string> ListString = new List<string>();
            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
            {
                if (item.ICReceiptItemIsSplitted == true)
                {
                    ICReceiptItemsInfo itemtemp = new ICReceiptItemsInfo();
                    string SerialNo_ProductNo = item.ICReceiptItemProductSerialNo.Substring(0, item.ICReceiptItemProductSerialNo.Length - 1) + item.FK_ICProductID;
                    if (!ListString.Contains(SerialNo_ProductNo))
                        ListString.Add(SerialNo_ProductNo);
                    itemtemp = (ICReceiptItemsInfo)item.Clone();
                    itemtemp.ICReceiptItemProductSerialNo = SerialNo_ProductNo;
                    ListTemp.Add(itemtemp);
                }
            }
            if (ListString.Count > 0)
            {
                foreach (string item in ListString)
                {
                    ICReceiptItemsInfo receiptItem = ListTemp.FirstOrDefault(x => x.ICReceiptItemProductTotalLength > 0 && x.ICReceiptItemProductSerialNo == item);
                    decimal TotalLenghtFirst = 0;
                    if (receiptItem != null)
                    {
                        TotalLenghtFirst = receiptItem.ICReceiptItemProductTotalLength;
                    }

                    decimal SumLenght = ListTemp.Where(x => x.ICReceiptItemProductSerialNo == item).ToList().Sum(t => t.ICReceiptItemProductLength);
                    if (SumLenght == TotalLenghtFirst)
                    {
                        flag = true;

                    }
                    else
                    {
                        flag = false;
                        break;
                    }
                }
            }
            return flag;

        }
        public override void ActionPrint()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                BatchReceiptRoundWood.BatchReceiptRoundWoodModule.PrintReceipt(Toolbar.CurrentObjectID);
            }
        }
        public static void PrintReceipt(int receiptID)
        {
            RP_ReceiptForRoundWood report = new RP_ReceiptForRoundWood();
            //report.LoadLayout(BOSCommon.Report.DevReceiptItemReportPath);
            InitReceiptReport(report, receiptID);
            guiReportPreview viewer = new guiReportPreview(report);
            viewer.Show();
        }
        private static void InitReceiptReport(XtraReport report, int receiptID)
        {
            BRBranchsController objBranchsController = new BRBranchsController();
            BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            if (objBranchsInfo != null)
            {
                XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchAddressLine3"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactAddressLine3;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchPhone"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactPhone;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchFax"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactFax;
                }
            }

            ICReceiptsController objReceiptsController = new ICReceiptsController();
            ICReceiptsInfo receipt = (ICReceiptsInfo)objReceiptsController.GetObjectByID(receiptID);
            #region Hạch Toán
            List<ACDocumentEntrysInfo> entries = new List<ACDocumentEntrysInfo>();
            if (receipt != null)
            {
                ACDocumentsController objDocumentsController = new ACDocumentsController();
                ACDocumentEntrysController objDocumentEntrysController = new ACDocumentEntrysController();
                ACDocumentsInfo document = null;
                if (receipt.ICReceiptTypeCombo == ReceiptType.SubRoundWood.ToString())
                {
                    document = objDocumentsController.GetDocumentByTypeAndNo(AccDocumentType.NhapKhoLongCon.ToString(), receipt.ICReceiptNo);
                }
                //else if (receipt.ICReceiptTypeCombo == ReceiptType.PurchaseReceipt.ToString())
                //{
                //    if (!string.IsNullOrEmpty(receipt.ICReceiptReference))
                //    {
                //        document = objDocumentsController.GetDocumentByTypeAndNo(AccDocumentType.NhapKhoMuaHangHoaDon.ToString(), receipt.ICReceiptNo);
                //    }
                //    else
                //    {
                //        document = objDocumentsController.GetDocumentByTypeAndNo(AccDocumentType.NhapKhoMuaHang.ToString(), receipt.ICReceiptNo);
                //    }
                //}
                //else if (receipt.ICReceiptTypeCombo == ReceiptType.EquipmentReceipt.ToString())
                //{
                //    document = objDocumentsController.GetDocumentByTypeAndNo(AccDocumentType.NhapCCDC.ToString(), receipt.ICReceiptNo);
                //}
                if (document != null)
                {
                    entries = objDocumentEntrysController.GetDocumentEntryByDocumentID(document.ACDocumentID);
                }
            }
            XRLabel accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblDebitAccountNo"];
            if (accLabel != null)
            {
                string debitAccountNo = string.Empty;
                foreach (ACDocumentEntrysInfo entry in entries)
                {
                    if (entry.ACDocumentDebitAccount != null)
                    {
                        if (!debitAccountNo.Contains(entry.ACDocumentDebitAccount))
                        {
                            debitAccountNo += string.Format(" {0},", entry.ACDocumentDebitAccount);
                        }
                    }
                }
                if (!string.IsNullOrEmpty(debitAccountNo))
                {
                    debitAccountNo = debitAccountNo.Substring(0, debitAccountNo.Length - 1);
                }
                accLabel.Text = debitAccountNo;
            }

            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblCreditAccountNo"];
            if (accLabel != null)
            {
                string creditAccountNo = string.Empty;
                foreach (ACDocumentEntrysInfo entry in entries)
                {
                    if (entry.ACDocumentCreditAccount != null)
                    {
                        if (entry.ACDocumentCreditAccount != null)
                        {
                            if (!creditAccountNo.Contains(entry.ACDocumentCreditAccount))
                            {
                                creditAccountNo += string.Format(" {0},", entry.ACDocumentCreditAccount);
                            }
                        }
                    }
                }
                if (!string.IsNullOrEmpty(creditAccountNo))
                {
                    creditAccountNo = creditAccountNo.Substring(0, creditAccountNo.Length - 1);
                }
                accLabel.Text = creditAccountNo;
            }
            #endregion
            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xrLabel28"];
            if (accLabel != null)
            {
                accLabel.Text = receipt.ICReceiptDate.ToString("dd/MM/yyyy");
            }
            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xrLabel29"];
            if (accLabel != null)
            {
                accLabel.Text = receipt.ICReceiptDate.ToString("dd/MM/yyyy");
            }
            //accLabel = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xrPageInfo2"];
            //if (accLabel != null)
            //{
            //    string str = DateTime.Now.ToString().Trim();
            //    str = str.Substring(0, 2);
            //    accLabel.Text = str;
            //}
            //accLabel = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xrPageInfo3"];
            //if (accLabel != null)
            //{
            //    string str = DateTime.Now.ToString().Trim();
            //    str = str.Substring(3, 2);
            //    accLabel.Text = str;
            //}
            //accLabel = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xrPageInfo4"];
            //if (accLabel != null)
            //{
            //    string str = DateTime.Now.ToString().Trim();
            //    str = str.Substring(6, 4);
            //    accLabel.Text = str;
            //}
            //GECurrenciesController objCurrenciesController = new GECurrenciesController();
            //GECurrenciesInfo currency = (GECurrenciesInfo)objCurrenciesController.GetObjectByID(receipt.FK_GECurrencyID);
            //accLabel = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xrLabel27"];
            //if (accLabel != null)
            //{
            //    accLabel.Text = ConvertAmountToWord.ReadAmount(receipt.ICReceiptTotalCost.ToString(), currency.GECurrencyID);
            //}



            ADReportsController objReportsController = new ADReportsController();
            decimal Tongsoluong = 0;
            decimal Tongkhoiluong = 0;
            List<ICReceiptItemsInfo> receiptList = objReportsController.GetListReceiptItemByReceiptID(receiptID);
            foreach (ICReceiptItemsInfo item in receiptList)
            {
                if (item != null)
                {
                    item.ICReceiptItemWoodQty = Math.Round(item.ICReceiptItemWoodQty, 0);
                    item.ICReceiptItemProductQty = Math.Round(item.ICReceiptItemProductQty, 4);
                    Tongsoluong += item.ICReceiptItemWoodQty;
                    Tongkhoiluong += item.ICReceiptItemProductQty;
                }
            }
            accLabel = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xrLabel31"];
            if (accLabel != null)
            {
                accLabel.Text = Tongsoluong.ToString();
            }
            accLabel = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xrLabel32"];
            if (accLabel != null)
            {
                accLabel.Text = Tongkhoiluong.ToString();
            }
            report.DataSource = receiptList;
            //report.DataMember = BOSCommon.Report.DevReceiptItemReportName;
        }

        public void UpdateDocument(string AcceptanceType)
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.ICReceiptAcceptanceType = AcceptanceType;
            MMOperationsInfo objOperationsInfo = new MMOperationsInfo();
            MMOperationsController objOperationsController = new MMOperationsController();
            objOperationsInfo = (MMOperationsInfo)objOperationsController.GetObjectByID(objReceiptsInfo.FK_MMOperationID);
            //ACAccountsInfo objAccountsInfo = new ACAccountsInfo();
            //ACAccountsController objAccountsController = new ACAccountsController();
            //objAccountsInfo = (ACAccountsInfo)objAccountsController.GetObjectByNo(AccAccount.Acc62111);
            //ICShipmentItemsInfo objShipmentItemsInfo = new ICShipmentItemsInfo();
            //ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
            //int accountID = 0;
            //if(objAccountsInfo!=null)
            //    accountID =objAccountsInfo.ACAccountID;
            //string CD = string.Empty;
            //if (objOperationsInfo != null)
            //{
            //    CD = objOperationsInfo.MMOperationNo;
            //}


            //if (entity.ReceiptItemsList != null && entity.ReceiptItemsList.Count > 0)
            //{
            //    foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
            //    {
            //        if (CD == OperationNo.Cuaxe.ToString())
            //        {
            //            item.FK_ACAccountID = accountID;
            //        }
            //        //else
            //        {
            //            //if (item.FK_ICShipmentItemID > 0)
            //            //{
            //            //    objShipmentItemsInfo = (ICShipmentItemsInfo)objShipmentItemsController.GetObjectByID(item.FK_ICShipmentItemID);
            //            //    if(objShipmentItemsInfo)
            //            //}
            //        }
            //    }


            //}
            if (entity.DocumentEntryList != null)
            {
                if (!(entity.DocumentEntryList.Count() > 0))
                {
                    GenerateAccountingData();
                }
            }
            UpdateDocumentEntries();
        }
        #region Accounting
        public override int GetDocumentTypeID()
        {
            ACDocumentTypesController objDocumentTypesController = new ACDocumentTypesController();
            int documentTypeID = objDocumentTypesController.GetObjectIDByName(AccDocumentType.NhapKhoLongCon.ToString());
            return documentTypeID;
        }

        public override void GenerateAccountingData()
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            if (objReceiptsInfo.ICReceiptAcceptanceType.Equals(ReceiptAcceptanceType.RoundWoodSplit.ToString()))
            {

            }
            else
            {
                GenerateAccountingData(new string[] { AccDocumentType.NhapKhoLongCon.ToString() });
            }
            //else
            //{
            //    GenerateAccountingData(new string[] { string.Empty });
            //}
        }

        protected override void UpdateDocumentEntries()
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            if (!objReceiptsInfo.ICReceiptAcceptanceType.Equals(ReceiptAcceptanceType.RoundWoodSplit.ToString()))
            {
                //if (objReceiptsInfo.FK_MMOperationID > 0)
                {
                    ICProductsController productController = new ICProductsController();
                    ACDocTypeEntrysController objDocTypeEntrysController = new ACDocTypeEntrysController();
                    string documentType = AccDocumentType.NhapKhoLongCon.ToString();
                    string entryType = AccEntryType.NhapKhoLongCon.ToString();
                    int accountCredit = 0;
                    ACAccountsInfo objACAccountsInfo = new ACAccountsInfo();
                    ACAccountsController objAccountsController = new ACAccountsController();
                    objACAccountsInfo = (ACAccountsInfo)objAccountsController.GetObjectByNo(AccAccount.Acc1384);
                    if (objACAccountsInfo != null)
                    {
                        accountCredit = objACAccountsInfo.ACAccountID;
                    }

                    //H.Anh ADD GET Account ID
                    //ACAccountsInfo objAccountCredit = new ACAccountsInfo();
                    //ACAccountsInfo objAccountDebit = new ACAccountsInfo();
                    //ACAccountsController objAccountsController = new ACAccountsController();
                    //MMOperationsInfo objOperationsInfo = new MMOperationsInfo();
                    //MMOperationsController objOperationsController = new MMOperationsController();
                    //int AccountDebitCXID = 0;
                    //int AccountCreditCXID = 0;
                    //string CD = string.Empty;
                    ////Tài khoản cưa xẻ 
                    //objAccountDebit = (ACAccountsInfo)objAccountsController.GetObjectByNo(AccAccount.Acc62111);
                    //if (objAccountDebit != null)
                    //{
                    //    AccountDebitCXID = objAccountDebit.ACAccountID;
                    //}
                    ////Tài khoản cưa xẻ
                    //objAccountCredit = (ACAccountsInfo)objAccountsController.GetObjectByNo(AccAccount.Acc1521);
                    //if (objAccountCredit != null)
                    //{
                    //    AccountCreditCXID = objAccountCredit.ACAccountID;
                    //}
                    ////Công đoạn MainObject 
                    //objOperationsInfo = (MMOperationsInfo)objOperationsController.GetObjectByID(objReceiptsInfo.FK_MMOperationID);
                    //if (objOperationsInfo != null)
                    //{
                    //    CD = objOperationsInfo.MMOperationNo;
                    //}
                    ACDocTypeEntrysInfo defaultEntry = objDocTypeEntrysController.GetEntryByDocumentTypeAndEntryType(
                                                                            documentType,
                                                                            entryType);
                    Dictionary<ACDocumentEntrysInfo, List<ICReceiptItemsInfo>> documentEntryAccounts = new Dictionary<ACDocumentEntrysInfo, List<ICReceiptItemsInfo>>();
                    List<int> productAccountID = new List<int>();

                    if (entity.ReceiptItemsList != null)
                    {
                        foreach (ICReceiptItemsInfo receiptItem in entity.ReceiptItemsList)
                        {
                            //ICProductsInfo product = productController.GetObjectByID(receiptItem.FK_ICProductID) as ICProductsInfo;
                            ACDocumentEntrysInfo entry = entity.DocumentEntryList.FirstOrDefault(e => e.ACEntryTypeName == entryType
                                                                                && e.FK_ACDebitAccountID == receiptItem.FK_ACAccountID);
                            if (entry != null)
                            {
                                entry.FK_ACDebitAccountID = receiptItem.FK_ACAccountID;
                                entry.FK_ACCreditAccountID = accountCredit;

                            }
                            if (entry == null && defaultEntry != null)
                            {
                                entry = AccountHelper.AddItemToDocumentEntryList(defaultEntry, entity.DocumentEntryList);
                                entry.FK_ACCreditAccountID = accountCredit;
                                entry.FK_ACDebitAccountID = receiptItem.FK_ACAccountID;
                            }
                            if (entry != null && !documentEntryAccounts.ContainsKey(entry))
                            {
                                documentEntryAccounts.Add(entry, new List<ICReceiptItemsInfo>());
                                productAccountID.Add(entry.FK_ACDebitAccountID);
                            }
                            if (entry != null)
                                documentEntryAccounts[entry].Add(receiptItem);
                        }
                    }

                    //update document entry amount
                    if (documentEntryAccounts.Count != 0)
                    {
                        ACDocumentEntrysInfo item = null;
                        foreach (ACDocumentEntrysInfo entry in documentEntryAccounts.Keys)
                        {
                            entry.ACDocumentEntryAmount = documentEntryAccounts[entry].Sum(i => i.ICReceiptItemInventoryCost * i.ICReceiptItemProductQty);
                            entry.ACDocumentEntryExchangeAmount = entry.ACDocumentEntryAmount * objReceiptsInfo.ICReceiptExchangeRate;
                            BOSApp.RoundByCurrency(entry, "ACDocumentEntryExchangeAmount", BOSApp.CurrentCompanyInfo.FK_GECurrencyID);
                            BOSApp.RoundByCurrency(entry, "ACDocumentEntryAmount", objReceiptsInfo.FK_GECurrencyID);
                            item = entry;
                        }


                        ACDocumentsInfo objDocumentsInfo = entity.DocumentList.FirstOrDefault(d => d.ACDocumentTypeName == documentType);
                        if (objDocumentsInfo == null)
                        {
                            objDocumentsInfo = new ACDocumentsInfo();
                            objDocumentsInfo.FK_ACDocumentTypeID = item.FK_ACDocumentTypeID;
                            objDocumentsInfo.ACDocumentTypeName = item.ACDocumentTypeName;
                            entity.DocumentList.Add(objDocumentsInfo);
                        }
                    }

                    //remove the redundance document entries 
                    List<ACDocumentEntrysInfo> removedItems = entity.DocumentEntryList.Where(item => item.ACEntryTypeName == entryType
                                                                                      && !productAccountID.Any(accountID => accountID == item.FK_ACDebitAccountID)).ToList();
                    if (removedItems != null)
                    {
                        foreach (ACDocumentEntrysInfo item in removedItems)
                            entity.DocumentEntryList.Remove(item);
                    }

                }
            }
            else if (objReceiptsInfo.ICReceiptAcceptanceType.Equals(ReceiptAcceptanceType.RoundWoodSplit.ToString()))
            {
                if (!Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
                {
                    entity.DocumentEntryList.Clear();
                    entity.DocumentList.Clear();
                    entity.DocumentEntryList.GridControl.RefreshDataSource();
                }
            }
            entity.DocumentEntryList.GridControl.RefreshDataSource();
        }

        #endregion

        public void CalculateUnitCost()
        {
            CalculateUnitCostFuntion(true);

        }

        public void CalculateUnitCostFuntion(bool IsEdit)
        {
            //if (Toolbar.IsNullOrNoneAction())
            {
                BOSProgressBar.Start("Đang tính lại đơn giá");
                BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
                if (objReceiptsInfo.ICReceiptAcceptanceType == ReceiptAcceptanceType.Acceptance.ToString())
                {
                    if (IsEdit)
                    {
                        ActionEdit();
                    }
                    List<int> ListInt = new List<int>();
                    foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                    {
                        if (!ListInt.Contains(item.FK_ICShipmentItemID))
                            ListInt.Add(item.FK_ICShipmentItemID);
                    }
                    foreach (int number in ListInt)
                    {
                        decimal UnitCostPerOne = 0;
                        ICShipmentItemsInfo objShipmentItemsInfo = new ICShipmentItemsInfo();
                        ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
                        objShipmentItemsInfo = (ICShipmentItemsInfo)objShipmentItemsController.GetObjectByID(number);
                        if (objShipmentItemsInfo != null)
                        {

                            decimal qty = entity.ReceiptItemsList.Where(x => x.FK_ICShipmentItemID == number).Sum(t => t.ICReceiptItemProductQty);
                            if (qty != 0)
                            {
                                //if (objShipmentItemsInfo.ICShipmentItemTotalCost != 0)
                                //{
                                //    UnitCostPerOne = objShipmentItemsInfo.ICShipmentItemTotalCost / qty;
                                //}
                                //else
                                //{
                                UnitCostPerOne = objShipmentItemsInfo.ICShipmentItemTotalAmount / qty;
                                //}

                            }
                            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                            {
                                if (item.FK_ICShipmentItemID == number)
                                {
                                    item.ICReceiptItemProductUnitCost = UnitCostPerOne;
                                    item.ICReceiptItemTotalCost = item.ICReceiptItemProductUnitCost * item.ICReceiptItemProductQty;
                                    entity.SetProductCostByProductUnitCost();
                                    UpdateTotalCost();
                                }
                            }
                        }
                    }
                    entity.ReceiptItemsList.GridControl.RefreshDataSource();
                    BOSProgressBar.Close();

                    // ActionSave();
                }
            }
        }
        public void RoolbackTotalCost(string ICReceiptAcceptanceType)
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            ICShipmentItemsInfo objShipmentItemsInfo = new ICShipmentItemsInfo();
            ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
            ICReceiptItemsGridControl receiptItemGridControl = (ICReceiptItemsGridControl)Controls["fld_dgcReceiptItems"];
            if (ICReceiptAcceptanceType == ReceiptAcceptanceType.Acceptance.ToString())
            {
                foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                {
                    objShipmentItemsInfo = (ICShipmentItemsInfo)objShipmentItemsController.GetObjectByID(item.FK_ICShipmentItemID);
                    if (objShipmentItemsInfo != null && objShipmentItemsInfo.ICShipmentItemTotalCost != 0)
                    {
                        item.ICReceiptItemTotalCost = objShipmentItemsInfo.ICShipmentItemTotalCost;
                    }
                    if (objShipmentItemsInfo != null && objShipmentItemsInfo.ICShipmentItemTotalAmount != 0)
                    {
                        item.ICReceiptItemTotalCost = objShipmentItemsInfo.ICShipmentItemTotalAmount;
                    }

                }
            }
            if (ICReceiptAcceptanceType == ReceiptAcceptanceType.RoundWoodSplit.ToString())
            {
                receiptItemGridControl.LoadGridViewForRoundWood();
            }
            else
            {
                receiptItemGridControl.LoadGridViewForLumber();

            }
            entity.ReceiptItemsList.GridControl.RefreshDataSource();
        }

        public override void Invalidate(int iObjectID)
        {
            base.Invalidate(iObjectID);
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            ICReceiptItemsGridControl receiptItemGridControl = (ICReceiptItemsGridControl)Controls["fld_dgcReceiptItems"];
            if (objReceiptsInfo.ICReceiptAcceptanceType == ReceiptAcceptanceType.RoundWoodSplit.ToString())
            {
                receiptItemGridControl.LoadGridViewForRoundWood();
            }
            else
            {
                receiptItemGridControl.LoadGridViewForLumber();
            }
        }

        public void PrintBatchShipmentRoundWoodTV()
        {
            BatchReceiptRoundWoodEntities entity = (BatchReceiptRoundWoodEntities)CurrentModuleEntity;
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)CurrentModuleEntity.MainObject;
            object[] arParam = new object[1];
            arParam[0] = objShipmentsInfo.ICShipmentID;
            ViewReportByTemplate("RPShipmentTV", "GetDataSourceForRPShipmentTV", arParam);
        }
    }
    #endregion BatchReceiptRoundWoodModule
}