using BOSCommon;
using BOSCommon.Constants;
using BOSComponent;
using BOSERP.GenaralLeadger;
using BOSLib;
using Localization;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows.Forms;


namespace BOSERP.Modules.AssemblyShipment
{
    #region AssemblyShipmentModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:AssemblyShipmentModule
    //Created Date:Monday, April 14, 2008
    //-----------------------------------------------------------

    public class AssemblyShipmentModule : GLShipmentModule
    {
        #region Constants
        public const string ShipmentItemGridControlName = "fld_dgcICShipmentItems";

        public const string DocumentEntryGridControlName = "fld_dgcACDocumentEntrys";

        public const string SearchBranchLookupEditControlName = "fld_lkeFK_BRBranchID";

        public const string ProductLookupEditControlName = "fld_lkeFK_ICProductID";

        #endregion

        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
        public BOSLookupEdit SearchBranchLookupEditControl = null;

        public List<ADDataViewPermissionsInfo> CurrentModuleDataViewPermissionList;

        public List<BRBranchsInfo> BranchList;

        public List<ICStocksInfo> stockList = null;

        public ICShipmentItemsGridControl ShipmentItemGridControl;

        public BOSLookupEdit ProductLookupEditControl;
        public AssemblyShipmentModule()
        {
            Name = "AssemblyShipment";
            CurrentModuleEntity = new AssemblyShipmentEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();
            GetCurrentModuleDataViewPermission();
            SearchBranchLookupEditControl = (BOSLookupEdit)Controls[SearchBranchLookupEditControlName];
            SearchBranchLookupEditControl.Properties.DataSource = BranchList;

            ShipmentItemGridControl = (ICShipmentItemsGridControl)Controls[ShipmentItemGridControlName];
            stockList = new List<ICStocksInfo>();

            ProductLookupEditControl = (BOSLookupEdit)Controls[ProductLookupEditControlName];
            ProductLookupEditControl.Properties.DataSource = GetDataSourceForProductLookupEdit();
        }

        public List<ICProductsInfo> GetDataSourceForProductLookupEdit()
        {
            ICProductsController objProductsController = new ICProductsController();
            List<ICProductsInfo> productList = objProductsController.GetProductByDepartmentNo(BOSApp.GetDisplayTextFromConfigText(ConfigValueGroup.DepartmentGroup, DepartmentGroup.IngredientNo.ToString()));
            if (productList == null)
                productList = new List<ICProductsInfo>();
            productList.Insert(0, new ICProductsInfo());
            return productList;
        }

        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
        public void GetCurrentModuleDataViewPermission()
        {
            CurrentModuleDataViewPermissionList = BOSApp.CurrentADDataViewPermissionList.Where(i => i.STModuleName == Name && i.ADDataViewPermissionType == ADDataViewPermissionType.Module).ToList();

            List<int> branchIDList = new List<int>();
            foreach (ADDataViewPermissionsInfo dataViewPermissionsInfo in CurrentModuleDataViewPermissionList)
            {
                branchIDList.Add(dataViewPermissionsInfo.FK_BRBranchID);
            }

            if (branchIDList.Count == 0)
            {
                BranchList = new List<BRBranchsInfo>();
            }
            else
            {
                BRBranchsController objBranchsController = new BRBranchsController();
                List<BRBranchsInfo> branchList = objBranchsController.GetAllBranches();

                BranchList = branchList.Where(i => branchIDList.IndexOf(i.BRBranchID) > -1).ToList();
            }
        }

        protected override DataSet GetSearchData(ref string searchQuery)
        {
            ICShipmentsController objShipmentsController = new ICShipmentsController();
            ACObjectsController objObjectsController = new ACObjectsController();
            ICShipmentsInfo searchObject = (ICShipmentsInfo)CurrentModuleEntity.SearchObject;
            searchObject.ICShipmentTypeCombo = ShipmentType.AssemblyShipment.ToString();
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByAccessKey(searchObject.ACObjectAccessKey);
            DataSet ds;
            if (SearchBranchLookupEditControl.EditValue.ToString() == "" || SearchBranchLookupEditControl.EditValue.ToString() == "0")
            {
                if (BranchList.Count == 0)
                {
                    ds = objShipmentsController.GetDataSetByID(-1);
                }
                else
                {
                    ds = objShipmentsController.GetShipmentListAllType(searchObject.ICShipmentNo,
                                                                       BranchList,
                                                                       objObjectsInfo.ACObjectID,
                                                                       objObjectsInfo.ACObjectType,
                                                                       searchObject.FK_ICStockID,
                                                                       searchObject.FK_HREmployeeID,
                                                                       searchObject.ICShipmentTypeCombo,
                                                                       null,
                                                                       searchObject.ShipmentDateFrom,
                                                                       searchObject.ShipmentDateTo);
                }
            }
            else
            {
                ds = objShipmentsController.GetShipmentListAllType(searchObject.ICShipmentNo,
                                                                   searchObject.FK_BRBranchID,
                                                                   objObjectsInfo.ACObjectID,
                                                                   objObjectsInfo.ACObjectType,
                                                                   searchObject.FK_ICStockID,
                                                                   searchObject.FK_HREmployeeID,
                                                                   searchObject.ICShipmentTypeCombo,
                                                                   null,
                                                                   searchObject.ShipmentDateFrom,
                                                                   searchObject.ShipmentDateTo);
            }
            return ds;
        }

        public override void ResetSearchObject()
        {
            base.ResetSearchObject();

            ICShipmentsInfo searchObject = (ICShipmentsInfo)CurrentModuleEntity.SearchObject;
            searchObject.ICShipmentTypeCombo = ShipmentType.AssemblyShipment.ToString();
        }

        public override void InvalidateToolbar()
        {
            base.InvalidateToolbar();
            AssemblyShipmentEntities entity = (AssemblyShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objICShipmentsInfo = (ICShipmentsInfo)entity.MainObject;
            if (objICShipmentsInfo != null && objICShipmentsInfo.ICShipmentStatus == ShipmentStatus.Complete.ToString())
            {
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
            }
        }

        public void AddItemToShipmentItemsList()
        {
            AssemblyShipmentEntities entity = (AssemblyShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objICShipmentsInfo = (ICShipmentsInfo)entity.MainObject;
            ICShipmentItemsInfo item = (ICShipmentItemsInfo)entity.ModuleObjects[TableName.ICShipmentItemsTableName];
            ICProductsController objProductsController = new ICProductsController();
            if (item.FK_ICProductID == 0)
                return;

            entity.SetValuesAfterValidateProduct(item.FK_ICProductID);
            ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);
            if (objProductsInfo != null)
            {
                item.FK_ACAccountID = objProductsInfo.FK_ACAccountID;
                item.FK_ICImportAndExportReasonID = objICShipmentsInfo.FK_ICImportAndExportReasonID;
                item.ICShipmentItemProductType = objProductsInfo.ICProductType;
            }
            entity.ShipmentItemList.AddObjectToList();
            UpdateTotalAmount();
        }

        public void ChangeItemFromShipmentItemsList()
        {
            AssemblyShipmentEntities entity = (AssemblyShipmentEntities)CurrentModuleEntity;
            entity.SetProductPriceByProductUnitPrice();
            entity.ShipmentItemList.ChangeObjectFromList();
            UpdateTotalAmount();
        }

        public void DeleteItemFromShipmentItemsList()
        {
            AssemblyShipmentEntities entity = (AssemblyShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)entity.MainObject;
            entity.ShipmentItemList.RemoveSelectedRowObjectFromList();
            UpdateTotalAmount();
        }

        public void ChangeStock(int stockID)
        {
            if (Toolbar.IsNullOrNoneAction())
                return;

            AssemblyShipmentEntities entity = (AssemblyShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)entity.MainObject;
            objShipmentsInfo.FK_ICStockID = stockID;
            if (entity.ShipmentItemList.Count() == 0)
                return;

            DialogResult rs = MessageBox.Show(ShipmentLocalizedResources.ConfirmChangeItemStockMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (rs != DialogResult.Yes)
                return;

            foreach (ICShipmentItemsInfo item in entity.ShipmentItemList)
            {
                item.FK_ICStockID = stockID;
            }
            entity.ShipmentItemList.GridControl.RefreshDataSource();
            UpdateTotalAmount();
        }

        public void ChangeObject(string objectAccessKey)
        {
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo obj = objObjectsController.GetObjectByAccessKey(objectAccessKey);
            ICShipmentsInfo mainobject = (ICShipmentsInfo)CurrentModuleEntity.MainObject;
            mainobject.ACObjectAccessKey = objectAccessKey;
            obj = objObjectsController.GetObjectByIDAndType(obj.ACObjectID, obj.ACObjectType);
            if (obj != null)
            {
                mainobject.ICShipmentDeliveryContactName = obj.ACObjectName;
                CurrentModuleEntity.UpdateMainObjectBindingSource();
            }
        }

        public override int ActionSave()
        {
            AssemblyShipmentEntities entity = (AssemblyShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo shipment = (ICShipmentsInfo)CurrentModuleEntity.MainObject;
            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            entity.ShipmentItemList.EndCurrentEdit();
            foreach (ICShipmentItemsInfo objShipmentItemsInfo in entity.ShipmentItemList)
            {
                objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(objShipmentItemsInfo.FK_ICProductID);
                if (objProductsInfo.ICProductType != ProductType.Service.ToString()
                    && !objProductsInfo.IsAsset
                    && objProductsInfo.ICPriceCalculationMethodMethod != PriceCalculationMethod.Average.ToString())
                {
                    if (objShipmentItemsInfo.FK_ICProductSerieID == 0)
                    {
                        MessageBox.Show(string.Format(ShipmentLocalizedResources.ItemSerieNoIsRequiredMessage, objShipmentItemsInfo.ICShipmentItemProductDesc), CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return 0;
                    }
                }
            }
            UpdateTotalAmount();
            int shipmentID = base.ActionSave();
            return shipmentID;
        }

        public void UpdateTotalAmount()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                AssemblyShipmentEntities entity = (AssemblyShipmentEntities)CurrentModuleEntity;
                entity.UpdateTotalAmount();
                UpdateDocumentEntries();
            }
        }

        #region Accounting
        protected override void UpdateDocumentEntries()
        {
            AssemblyShipmentEntities entity = (AssemblyShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)entity.MainObject;
            entity.DocumentEntryList.Clear();
            ICProductsController productController = new ICProductsController();
            ACDocTypeEntrysController objDocTypeEntrysController = new ACDocTypeEntrysController();
            ICImportAndExportReasonsController objImportAndExportReasonsController = new ICImportAndExportReasonsController();
            ICImportAndExportReasonsInfo objImportAndExportReasonsInfo = objImportAndExportReasonsController.GetObjectByID(objShipmentsInfo.FK_ICImportAndExportReasonID) as ICImportAndExportReasonsInfo;
            string documentType = AccDocumentType.XuatKhoLapRap.ToString();
            string entryType = AccEntryType.XuatKhoLapRap.ToString();

            ACDocTypeEntrysInfo defaultEntry = objDocTypeEntrysController.GetEntryByDocumentTypeAndEntryType(documentType, entryType);
            Dictionary<ACDocumentEntrysInfo, List<ICShipmentItemsInfo>> documentEntryAccounts = new Dictionary<ACDocumentEntrysInfo, List<ICShipmentItemsInfo>>();

            if (entity.ShipmentItemList != null)
            {
                foreach (ICShipmentItemsInfo shipmentItem in entity.ShipmentItemList)
                {
                    int debitAccountID = 0;
                    ICStocksController objICStocksController = new ICStocksController();
                    int creditAccountID = 0;
                    ICStocksInfo objICStocksInfo = stockList.FirstOrDefault(o => o.ICStockID == shipmentItem.FK_ICStockID);
                    if (objICStocksInfo != null && objICStocksInfo.FK_ACAccountID > 0)
                        creditAccountID = objICStocksInfo.FK_ACAccountID;
                    else
                    {
                        objICStocksInfo = (ICStocksInfo)objICStocksController.GetObjectByID(shipmentItem.FK_ICStockID);
                        if (objICStocksInfo != null && objICStocksInfo.FK_ACAccountID > 0)
                        {
                            creditAccountID = objICStocksInfo.FK_ACAccountID;
                            stockList.Add(objICStocksInfo);
                        }
                        if (creditAccountID == 0)
                        {
                            ICProductsController objICProductsController = new ICProductsController();
                            ICProductsInfo objICProductsInfo = (ICProductsInfo)objICProductsController.GetObjectByID(shipmentItem.FK_ICProductID);
                            if (objICProductsInfo != null && objICProductsInfo.FK_ACAccountID > 0)
                                creditAccountID = objICProductsInfo.FK_ACAccountID;
                        }
                    }

                    ACDocumentEntrysInfo entry = entity.DocumentEntryList.FirstOrDefault(e => e.ACEntryTypeName == entryType
                                                                                         && e.FK_ACCreditAccountID == creditAccountID);
                    if (entry == null && defaultEntry != null)
                    {
                        entry = AccountHelper.AddItemToDocumentEntryList(defaultEntry, entity.DocumentEntryList);
                        if (creditAccountID > 0)
                            entry.FK_ACCreditAccountID = creditAccountID;
                    }
                    if (objImportAndExportReasonsInfo != null && objImportAndExportReasonsInfo.FK_ACAcountID > 0)
                        entry.FK_ACDebitAccountID = objImportAndExportReasonsInfo.FK_ACAcountID;
                    if (entry != null && !documentEntryAccounts.ContainsKey(entry))
                    {
                        documentEntryAccounts.Add(entry, new List<ICShipmentItemsInfo>());
                    }
                    documentEntryAccounts[entry].Add(shipmentItem);
                }
            }

            if (documentEntryAccounts.Count != 0)
            {
                ACDocumentEntrysInfo item = null;
                foreach (ACDocumentEntrysInfo entry in documentEntryAccounts.Keys)
                {
                    entry.ACDocumentEntryAmount = documentEntryAccounts[entry].Sum(i => i.ICShipmentItemProductUnitPrice * i.ICShipmentItemProductQty);
                    entry.ACDocumentEntryExchangeAmount = entry.ACDocumentEntryAmount * objShipmentsInfo.ICShipmentExchangeRate;
                    BOSApp.RoundByCurrency(entry, "ACDocumentEntryExchangeAmount", BOSApp.CurrentCompanyInfo.FK_GECurrencyID);
                    BOSApp.RoundByCurrency(entry, "ACDocumentEntryAmount", objShipmentsInfo.FK_GECurrencyID);
                    item = entry;
                }


                ACDocumentsInfo objDocumentsInfo = entity.DocumentList.FirstOrDefault(d => d.ACDocumentTypeName == documentType);
                if (objDocumentsInfo == null)
                {
                    objDocumentsInfo = new ACDocumentsInfo();
                    objDocumentsInfo.FK_ACDocumentTypeID = item.FK_ACDocumentTypeID;
                    objDocumentsInfo.ACDocumentTypeName = item.ACDocumentTypeName;
                    entity.DocumentList.Add(objDocumentsInfo);
                }
            }

            //remove the redundance document entries
            foreach (ACDocumentEntrysInfo item in entity.DocumentEntryList.ToList())
            {
                if (item.ACDocumentEntryAmount == 0)
                    entity.DocumentEntryList.Remove(item);
            }
            entity.DocumentEntryList.GridControl.RefreshDataSource();
        }

        public override void Invalidate(int iObjectID)
        {
            base.Invalidate(iObjectID);

            AssemblyShipmentEntities entity = (AssemblyShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)entity.MainObject;
        }

        public void ChangeImportAndExportReason(int importAndExportReasonID)
        {
            AssemblyShipmentEntities entity = (AssemblyShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)entity.MainObject;
            objShipmentsInfo.FK_ICImportAndExportReasonID = importAndExportReasonID;
            if (!Toolbar.IsNullOrNoneAction())
            {
                if (entity.ShipmentItemList.Count > 0)
                {
                    entity.ShipmentItemList.ForEach(o => o.FK_ICImportAndExportReasonID = importAndExportReasonID);
                    entity.ShipmentItemList.GridControl.RefreshDataSource();
                }
            }
            UpdateTotalAmount();
        }

        public void ChangeItemSerieNo(ICShipmentItemsInfo item)
        {
            AssemblyShipmentEntities entity = (AssemblyShipmentEntities)CurrentModuleEntity;
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)entity.MainObject;
            item.ICShipmentItemProductUnitCost = AccountHelper.GetProductUnitCost(item.FK_ICStockID, item.FK_ICProductID, item.ICShipmentItemProductSerialNo, objShipmentsInfo.ICShipmentDate) * item.ICShipmentItemProductFactor;
            item.ICShipmentItemProductQty = Math.Round(item.ICShipmentItemProductQty, 4, MidpointRounding.AwayFromZero);
            entity.SetProductPriceByProductUnitPrice(item);
            BOSApp.RoundByCurrency(item, objShipmentsInfo.FK_GECurrencyID);
            entity.ShipmentItemList.GridControl.RefreshDataSource();
            UpdateTotalAmount();
        }

        //public override void InvalidateSerieColumn(GridColumn column, BusinessObject item, string itemTableName)
        //{
        //    ICProductSeriesController objProductSeriesController = new ICProductSeriesController();
        //    ICShipmentItemsInfo objShipmentItemsInfo = item as ICShipmentItemsInfo;
        //    if (objShipmentItemsInfo == null)
        //        return;
        //    List<ICProductSeriesInfo> series = new List<ICProductSeriesInfo>();
        //    if (objShipmentItemsInfo.ICShipmentItemProductType == ProductType.Lumber.ToString())
        //        series = objProductSeriesController.GetProductSeriesByProductHeight(objShipmentItemsInfo.FK_ICProductID
        //                                                                           , objShipmentItemsInfo.FK_ICStockID
        //                                                                           , objShipmentItemsInfo.ICShipmentItemHeight);
        //    else
        //        series = objProductSeriesController.GetProductSeriesByProductSize(objShipmentItemsInfo.FK_ICProductID
        //                                                                        , objShipmentItemsInfo.FK_ICStockID
        //                                                                        , objShipmentItemsInfo.ICShipmentItemLength
        //                                                                        , objShipmentItemsInfo.ICShipmentItemWidth
        //                                                                        , objShipmentItemsInfo.ICShipmentItemHeight);
        //    if (series.Count > 0)
        //    {
        //        series.Insert(0, new ICProductSeriesInfo());
        //    }
        //    RepositoryItemComboBox rep = new RepositoryItemComboBox();
        //    foreach (ICProductSeriesInfo serie in series)
        //    {
        //        rep.Items.Add(serie.ICProductSerieNo);
        //    }
        //    column.ColumnEdit = rep;
        //}

        #endregion
    }
    #endregion
}