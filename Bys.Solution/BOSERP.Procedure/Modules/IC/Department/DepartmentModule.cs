using BOSLib;
using Localization;
using System;
using System.Data;
using System.Linq;
using System.Windows.Forms;
using System.Drawing;
using System.IO;
using System.Collections.Generic;
using System.Reflection;
using System.Data.OleDb;
using Excel = Microsoft.Office.Interop.Excel;
using BOSCommon.Extensions;
using BOSCommon.Constants;
using DevExpress.XtraEditors;

namespace BOSERP.Modules.Department
{
    #region DepartmentModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:DepartmentModule
    //Created Date:Monday, March 01, 2010
    //-----------------------------------------------------------

    public class DepartmentModule : BaseModuleERP
    {
        #region Declare Constant
        public const String cstICDepartmentsObjectName = "ICDepartments";
        public const String cstICProductGroupsObjectName = "ICProductGroups";
        public const String cstICDepartmentAttributesObjectName = "ICDepartmentAttributes";
        public const String cstICDepartmentAttributeValuesObjectName = "ICDepartmentAttributeValues";
        public const String cstICDepartmentNameColumnName = "ICDepartmentName";
        public const String cstICProductGroupIDColumnName = "ICProductGroupID";
        public const String cstICProductGroupNameColumnName = "ICProductGroupName";
        public const String cstICDepartmentAttributeIDColumnName = "ICDepartmentAttributeID";
        public const String cstICDepartmentAttributeNameColumnName = "ICDepartmentAttributeName";
        public const String cstICDepartmentAttributesComboboxControlName = "fld_cmbAttributes";
        #endregion

        #region Variables
        private int PrevSelectedIndex = 0;
        private string FilePath { get; set; }
        #endregion

        public DepartmentModule()
        {
            Name = "Department";
            CurrentModuleEntity = new DepartmentEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();

            //Init attribute combobox
            DevExpress.XtraEditors.ComboBoxEdit cmb = (DevExpress.XtraEditors.ComboBoxEdit)Controls[DepartmentModule.cstICDepartmentAttributesComboboxControlName];
            cmb.Properties.TextEditStyle = DevExpress.XtraEditors.Controls.TextEditStyles.DisableTextEditor;
            cmb.SelectedIndexChanged += new EventHandler(Combobox_SelectedIndexChanged);

            //Init combobox data source
            InitComboboxDataSource();
        }

        public override void Invalidate(int iObjectID)
        {
            base.Invalidate(iObjectID);

            InitComboboxDataSource();
        }

        #region Product group
        public void AddProductGroupToTreeList()
        {
            DepartmentEntities entity = (DepartmentEntities)CurrentModuleEntity;
            ICProductGroupsInfo objProductGroupsInfo = (ICProductGroupsInfo)entity.ModuleObjects[DepartmentModule.cstICProductGroupsObjectName];
            ICProductGroupsInfo objSelProductGroupsInfo = (ICProductGroupsInfo)entity.ICProductGroupsList.CurrentObject;

            //Generate category number auto
            if (string.IsNullOrEmpty(objProductGroupsInfo.ICProductGroupNo))
            {
                if (objSelProductGroupsInfo.SubList == null)
                    objSelProductGroupsInfo.SubList = new BOSTreeList();
                String number = Convert.ToString(objSelProductGroupsInfo.SubList.Count + 1);
                while (number.Length < 2)
                    number = '0' + number;
                objProductGroupsInfo.ICProductGroupNo = number;
            }

            //Check valid input
            if (String.IsNullOrEmpty(objProductGroupsInfo.ICProductGroupNo))
            {
                MessageBox.Show(ICDepartmentLocalizedResources.CategoryNumberRequiredMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            if (String.IsNullOrEmpty(objProductGroupsInfo.ICProductGroupName))
            {
                MessageBox.Show(ICDepartmentLocalizedResources.CategoryNameRequiredMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            if(objSelProductGroupsInfo.SubList != null)
            {
                //ICProductGroupsInfo objExistingProductGroupsInfo = (ICProductGroupsInfo)entity.ICProductGroupsList.GetObjectByPropertyNameAndValue("ICProductGroupNo", objProductGroupsInfo.ICProductGroupNo);
                ICProductGroupsInfo objExistingProductGroupsInfo = (ICProductGroupsInfo)objSelProductGroupsInfo.SubList.GetObjectByPropertyNameAndValue("ICProductGroupNo", objProductGroupsInfo.ICProductGroupNo);
                if (objExistingProductGroupsInfo != null)
                {
                    MessageBox.Show(ICDepartmentLocalizedResources.CategoryNumberExistsMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }

            objProductGroupsInfo.FK_ICDepartmentID = 0;
            entity.ICProductGroupsList.AddObjectToList();
            MessageBox.Show(ICDepartmentLocalizedResources.AddProductGroupIsSuccess, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void ChangeProductGroupToTreeList(ICProductGroupsInfo objParentProductGroupsInfo)
        {
            DepartmentEntities entity = (DepartmentEntities)CurrentModuleEntity;
            ICProductGroupsInfo objProductGroupsInfo = (ICProductGroupsInfo)entity.ModuleObjects[DepartmentModule.cstICProductGroupsObjectName];
            //Check valid Number
            if (String.IsNullOrEmpty(objProductGroupsInfo.ICProductGroupNo))
            {
                MessageBox.Show(ICDepartmentLocalizedResources.CategoryNumberRequiredMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            //BOSTreeList lst = entity.ICProductGroupsList;
            if (objParentProductGroupsInfo != null)
            {
                foreach (BOSTreeListObject childObject in objParentProductGroupsInfo.SubList)
                {
                    if ((childObject as ICProductGroupsInfo).ICProductGroupNo == objProductGroupsInfo.ICProductGroupNo && childObject != entity.ICProductGroupsList.CurrentObject)
                    {
                        MessageBox.Show(ICDepartmentLocalizedResources.CategoryNumberExistsMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                }
            }

            if (objProductGroupsInfo.ICProductGroupParentID == 0)
            {
                if (entity.ICProductGroupsList.ToList().Count(o1 => ((ICProductGroupsInfo)o1).ICProductGroupNo == objProductGroupsInfo.ICProductGroupNo && o1 != entity.ICProductGroupsList.CurrentObject) > 0)
                {
                    MessageBox.Show(ICDepartmentLocalizedResources.CategoryNumberExistsMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }

            if (String.IsNullOrEmpty(objProductGroupsInfo.ICProductGroupName))
            {
                MessageBox.Show(ICDepartmentLocalizedResources.CategoryNameRequiredMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            ((DepartmentEntities)CurrentModuleEntity).ICProductGroupsList.ChangeObjectFromList();
        }

        public void DeleteProductGroupFromTreeList()
        {
            ((DepartmentEntities)CurrentModuleEntity).ICProductGroupsList.RemoveSelectedRowObjectFromList();
        }
        #endregion

        #region Attribute
        public void ChangeAttribute()
        {
            DevExpress.XtraEditors.ComboBoxEdit cmb = (DevExpress.XtraEditors.ComboBoxEdit)Controls[DepartmentModule.cstICDepartmentAttributesComboboxControlName];
            if (cmb.SelectedIndex > 0)
            {
                DepartmentEntities entity = (DepartmentEntities)CurrentModuleEntity;
                ICDepartmentAttributesInfo objDepartmentAttributesInfo = (ICDepartmentAttributesInfo)CurrentModuleEntity.ModuleObjects[DepartmentModule.cstICDepartmentAttributesObjectName];
                guiAttributeInput guiAttributeInput = new guiAttributeInput(objDepartmentAttributesInfo.ICDepartmentAttributeName, objDepartmentAttributesInfo.ICDepartmentAttributeDesc);
                if (guiAttributeInput.ShowDialog() == DialogResult.OK)
                {
                    //Update combobox item
                    cmb.Properties.Items[cmb.SelectedIndex] = guiAttributeInput.fld_txtAttributeName.Text;
                    cmb.Text = guiAttributeInput.fld_txtAttributeName.Text;
                    //Update module object list
                    int pos = entity.ICDepartmentAttributesList.PosOf(DepartmentModule.cstICDepartmentAttributeNameColumnName, objDepartmentAttributesInfo.ICDepartmentAttributeName);
                    if (pos >= 0)
                    {
                        entity.ICDepartmentAttributesList[pos].ICDepartmentAttributeName = guiAttributeInput.fld_txtAttributeName.Text;
                        entity.ICDepartmentAttributesList[pos].ICDepartmentAttributeDesc = guiAttributeInput.fld_txtAttributeDesc.Text;
                    }
                    //Update module object
                    objDepartmentAttributesInfo.ICDepartmentAttributeName = guiAttributeInput.fld_txtAttributeName.Text;
                    objDepartmentAttributesInfo.ICDepartmentAttributeDesc = guiAttributeInput.fld_txtAttributeDesc.Text;

                    //Switch module to edit mode
                    if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
                    {
                        ActionEdit();
                    }
                }
            }
        }

        public void DeleteAttribute()
        {
            DevExpress.XtraEditors.ComboBoxEdit cmb = (DevExpress.XtraEditors.ComboBoxEdit)Controls[DepartmentModule.cstICDepartmentAttributesComboboxControlName];
            if (cmb.SelectedIndex > 0)
            {
                //Remove item from module object list
                DepartmentEntities entity = (DepartmentEntities)CurrentModuleEntity;
                ICDepartmentAttributesInfo objDepartmentAttributesInfo = (ICDepartmentAttributesInfo)CurrentModuleEntity.ModuleObjects[DepartmentModule.cstICDepartmentAttributesObjectName];
                int pos = entity.ICDepartmentAttributesList.PosOf(DepartmentModule.cstICDepartmentAttributeNameColumnName, objDepartmentAttributesInfo.ICDepartmentAttributeName);
                entity.ICDepartmentAttributesList.RemoveAt(pos);

                //Remove item from combobox
                cmb.Properties.Items.RemoveAt(cmb.SelectedIndex);
                PrevSelectedIndex = 0;
                if (cmb.Properties.Items.Count > 1)
                    cmb.SelectedIndex = 1;
                else
                {
                    cmb.Text = String.Empty;
                    ((DepartmentEntities)CurrentModuleEntity).ICDepartmentAttributeValuesList.Invalidate(new DataSet());
                }

                //Switch module to edit mode
                if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
                {
                    ActionEdit();
                }
            }
        }

        public void InitComboboxDataSource()
        {
            DepartmentEntities entity = (DepartmentEntities)CurrentModuleEntity;
            DevExpress.XtraEditors.ComboBoxEdit cmb = (DevExpress.XtraEditors.ComboBoxEdit)Controls[DepartmentModule.cstICDepartmentAttributesComboboxControlName];
            cmb.Properties.Items.Clear();
            cmb.Properties.Items.Add(ICDepartmentLocalizedResources.AddNew);
            foreach (ICDepartmentAttributesInfo objDepartmenAttributesInfo in entity.ICDepartmentAttributesList)
                cmb.Properties.Items.Add(objDepartmenAttributesInfo.ICDepartmentAttributeName);
            PrevSelectedIndex = 0;
            if (cmb.Properties.Items.Count > 1)
            {
                if (cmb.SelectedIndex == 1)
                    Combobox_SelectedIndexChanged(new object(), new EventArgs());
                cmb.SelectedIndex = 1;
            }
            else
            {
                cmb.Text = String.Empty;
                entity.ICDepartmentAttributeValuesList.Clear();
                entity.ICDepartmentAttributeValuesList.GridControl.RefreshDataSource();
            }
        }

        public int GetItemIndex(String itemName)
        {
            DevExpress.XtraEditors.ComboBoxEdit cmb = (DevExpress.XtraEditors.ComboBoxEdit)Controls[DepartmentModule.cstICDepartmentAttributesComboboxControlName];
            return cmb.Properties.Items.IndexOf(itemName);
        }

        protected void Combobox_SelectedIndexChanged(object obj, EventArgs e)
        {
            DepartmentEntities entity = (DepartmentEntities)CurrentModuleEntity;
            DevExpress.XtraEditors.ComboBoxEdit cmb = (DevExpress.XtraEditors.ComboBoxEdit)Controls[DepartmentModule.cstICDepartmentAttributesComboboxControlName];
            if (cmb.SelectedIndex >= 0)
            {
                if (cmb.SelectedIndex == 0)
                {
                    guiAttributeInput guiAttributeInput = new guiAttributeInput();
                    if (guiAttributeInput.ShowDialog() == DialogResult.OK)
                    {
                        ICDepartmentAttributesInfo objDepartmentAttributesInfo = new ICDepartmentAttributesInfo(
                                                                        guiAttributeInput.fld_txtAttributeName.Text,
                                                                        guiAttributeInput.fld_txtAttributeDesc.Text);
                        objDepartmentAttributesInfo.ICDepartmentAttributeValuesList = new BOSList<ICDepartmentAttributeValuesInfo>();
                        entity.ICDepartmentAttributesList.Add(objDepartmentAttributesInfo);
                        cmb.Properties.Items.Add(guiAttributeInput.fld_txtAttributeName.Text);
                        cmb.SelectedIndex = cmb.Properties.Items.Count - 1;

                        //Switch module to edit mode
                        if (IsEditable())
                        {
                            ActionEdit();
                        }
                    }
                    else if (PrevSelectedIndex > 0)
                        cmb.SelectedIndex = PrevSelectedIndex;
                    else
                        cmb.Text = String.Empty;
                }
                else
                {
                    int pos;
                    if (PrevSelectedIndex > 0)
                    {
                        pos = entity.ICDepartmentAttributesList.PosOf(DepartmentModule.cstICDepartmentAttributeNameColumnName, cmb.Properties.Items[PrevSelectedIndex].ToString());
                        if (pos >= 0)
                        {
                            ICDepartmentAttributesInfo objDepartmentAttributesInfo = entity.ICDepartmentAttributesList[pos];
                            objDepartmentAttributesInfo.ICDepartmentAttributeValuesList.Clear();
                            foreach (ICDepartmentAttributeValuesInfo objDepartmentAttributeValuesInfo in entity.ICDepartmentAttributeValuesList)
                                objDepartmentAttributesInfo.ICDepartmentAttributeValuesList.Add((ICDepartmentAttributeValuesInfo)objDepartmentAttributeValuesInfo.Clone());
                        }
                    }

                    pos = entity.ICDepartmentAttributesList.PosOf(DepartmentModule.cstICDepartmentAttributeNameColumnName, cmb.Properties.Items[cmb.SelectedIndex].ToString());
                    if (pos >= 0)
                    {
                        entity.ModuleObjects[DepartmentModule.cstICDepartmentAttributesObjectName] = (ICDepartmentAttributesInfo)entity.ICDepartmentAttributesList[pos].Clone();
                        entity.UpdateModuleObjectsBindingSource();
                        entity.ICDepartmentAttributeValuesList.Invalidate(entity.ICDepartmentAttributesList[pos].ICDepartmentAttributeValuesList);
                    }

                }
                PrevSelectedIndex = cmb.SelectedIndex;
            }
        }

        /// <summary>
        /// Delete the selected value of an attribute
        /// </summary>
        public void DeleteAttributeValue()
        {
            DepartmentEntities entity = (DepartmentEntities)CurrentModuleEntity;
            entity.ICDepartmentAttributeValuesList.RemoveSelectedRowObjectFromList();
        }
        #endregion

        #region Export template
        public void ExportTemplate()
        {
            //try
            //{
            //    string documentPath = Path.Combine(System.Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "BYSERP");
            //    if (!Directory.Exists(documentPath))
            //    {
            //        DirectoryInfo di = Directory.CreateDirectory(documentPath);
            //    }
            //    List<AAColumnAliasInfo> aliasImportsList = BOSApp.LstColumnAlias.Where(o => o.AATableName == "IPProductGroups").ToList();
            //    FilePath = Path.Combine(documentPath,
            //                            string.Format("ImportNhomHang_{0}.xls", DateTimeOffset.Now.ToUnixTimeSeconds()));
            //    object misValue = System.Reflection.Missing.Value;
            //    Excel.Application xlApp = new Excel.Application();
            //    Excel.Workbook workbook = xlApp.Workbooks.Add(Excel.XlWBATemplate.xlWBATWorksheet);
            //    Excel.Worksheet sheetNhom = (Excel.Worksheet)workbook.Sheets[0];
            //    sheetNhom.Name = "ThuocTinhNganhHang";

            //    workbook.Sheets.Add();
            //    Excel.Worksheet sheetThuocTinh = (Excel.Worksheet)workbook.Sheets[1];
            //    xlApp.StandardFont = "Times New Roman";
            //    xlApp.StandardFontSize = 13;

                
            //    PivotTablesCollection pivotTables = sheetNhom.PivotTables;
                
            //    PivotCache cache = workbook.PivotCaches.Add(dataRange);

            //    //// Thêm một PivotTable vào trang tính Excel.
            //    //int index = pivotTables.Add("=Sheet1!A1:C10", "E3", "PivotTable2");

            //    //// Truy cập phiên bản của PivotTable mới được thêm vào.
            //    //PivotTable pivotTable = pivotTables[index];

            //    //// Đang hiển thị tổng số lớn cho các hàng.
            //    //pivotTable.RowGrand = false;
            //    //pivotTable.ColumnGrand = false;

            //    //// Kéo trường đầu tiên vào khu vực hàng.
            //    //pivotTable.AddFieldToArea(PivotFieldType.Row, 1);
            //    //PivotField rowField = pivotTable.RowFields[0];
            //    //rowField.IsAutoSort = true;
            //    //rowField.IsAscendSort = true;



            //    #region Sheet Nhóm hàng
            //    sheetNhom.Name = "NhomHang";
            //    var header = sheetNhom.get_Range("A1", "4");
            //    header.Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.DarkSeaGreen);
            //    header.Font.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Black);
            //    header.Font.Bold = true;
            //    header.Range["A1"].Value = "STT";
            //    header.Range["B1"].Value = "Mã sản phẩm";
            //    header.Range["C1"].Value = "Mã HT cũ";
            //    header.Range["D1"].Value = "Mã SP NCC";
            //    header.Range["E1"].Value = "Tên sản phẩm";
            //    header.Range["F1"].Value = "Diễn giải (Mô tả)";
            //    header.Range["G1"].Value = "Đặc tính";
            //    header.Range["H1"].Value = "Diện tích";
            //    header.Range["I1"].Value = "ĐVT";
            //    header.Range["J1"].Value = "Đơn giá gốc";
            //    header.Range["K1"].Value = "Đơn giá /m2";
            //    header.Range["L1"].Value = "Đơn giá chưa thuế";
            //    header.Range["M1"].Value = "Mã NCC";
            //    header.Range["N1"].Value = "Tên NCC";
            //    header.Range["O1"].Value = "Loại tiền tệ";

            //    var nameSheet = worksheet.get_Range("A2", "O2");
            //    nameSheet.Merge();
            //    nameSheet.Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Yellow);
            //    nameSheet.Font.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Black);
            //    nameSheet.Font.Size = 15;
            //    nameSheet.Font.Bold = true;
            //    nameSheet.HorizontalAlignment = HorizontalAlignment.Center;
            //    nameSheet.VerticalAlignment = TileItemContentAlignment.MiddleCenter;
            //    nameSheet.Borders.get_Item(Excel.XlBordersIndex.xlEdgeLeft).LineStyle = Excel.XlLineStyle.xlContinuous;
            //    nameSheet.Borders.get_Item(Excel.XlBordersIndex.xlEdgeRight).LineStyle = Excel.XlLineStyle.xlContinuous;
            //    nameSheet.Borders.get_Item(Excel.XlBordersIndex.xlEdgeTop).LineStyle = Excel.XlLineStyle.xlContinuous;
            //    nameSheet.Borders.get_Item(Excel.XlBordersIndex.xlEdgeBottom).LineStyle = Excel.XlLineStyle.xlContinuous;
            //    nameSheet.Borders.Color = Color.Black;

            //    worksheet.Range["A:A"].EntireColumn.NumberFormat = "0";
            //    worksheet.Range["B:B"].EntireColumn.NumberFormat = "@";
            //    worksheet.Range["C:C"].EntireColumn.NumberFormat = "@";
            //    worksheet.Range["D:D"].EntireColumn.NumberFormat = "@";
            //    worksheet.Range["E:E"].EntireColumn.NumberFormat = "@";
            //    worksheet.Range["F:F"].EntireColumn.NumberFormat = "@";
            //    worksheet.Range["G:G"].EntireColumn.NumberFormat = "@";
            //    worksheet.Range["H:H"].EntireColumn.NumberFormat = "#,##0.00";
            //    worksheet.Range["I:I"].EntireColumn.NumberFormat = "@";
            //    worksheet.Range["J:J"].EntireColumn.NumberFormat = "#,##0.00";
            //    worksheet.Range["K:K"].EntireColumn.NumberFormat = "#,##0.00";
            //    worksheet.Range["L:L"].EntireColumn.NumberFormat = "#,##0.00";
            //    worksheet.Range["M:M"].EntireColumn.NumberFormat = "@";
            //    worksheet.Range["N:N"].EntireColumn.NumberFormat = "@";
            //    worksheet.Range["O:O"].EntireColumn.NumberFormat = "@";

            //    int index = 5;
            //    int totalItem = ListPriceSheetItems.Count() + 10;
            //    int process = 0;
            //    //ListPriceSheetItems.ForEach(o =>
            //    //{
            //    //    worksheet.Range[$"A{index}"].Value = index - 4;
            //    //    worksheet.Range[$"B{index}"].Value = o.APPriceSheetItemProductNo.Trim();
            //    //    worksheet.Range[$"C{index}"].Value = o.APPriceSheetItemProductNoOfOldSys.Trim();
            //    //    worksheet.Range[$"D{index}"].Value = o.APPriceSheetItemProductSupplierNumber.Trim();
            //    //    worksheet.Range[$"E{index}"].Value = o.APPriceSheetItemProductName.Trim();
            //    //    worksheet.Range[$"F{index}"].Value = o.APPriceSheetItemProductDesc.Trim();
            //    //    worksheet.Range[$"G{index}"].Value = o.ICProdAttPackingMaterialSpecialityName.Trim();
            //    //    worksheet.Range[$"H{index}"].Value = o.ICProductBoxArea;
            //    //    worksheet.Range[$"I{index}"].Value = o.ICMeasureUnitName.Trim();
            //    //    worksheet.Range[$"J{index}"].Value = o.APPriceSheetItemBasicPrice; //Đơn giá gốc
            //    //    worksheet.Range[$"K{index}"].Formula = string.Format("=IFERROR(VLOOKUP(G{0},Sheet2!$A$2:$B$8,2,0),0)", index); //Đơn giá / m2
            //    //    worksheet.Range[$"L{index}"].Formula = string.Format("=IF(H{0}={1}{2},0,H{3}*K{4})", index, (char)(34), (char)(34), index, index); //Đơn giá chưa thuế
            //    //    worksheet.Range[$"M{index}"].Value = o.ACObjectNo.Trim();
            //    //    worksheet.Range[$"N{index}"].Value = o.ACObjectName.Trim();
            //    //    worksheet.Range[$"O{index}"].Value = o.GECurrencyName.Trim();
            //    //    index++;
            //    //    process = 8 + 100 * index / totalItem;
            //    //    if (process >= 90)
            //    //        process = 90;
            //    //    background.ReportProgress(process);
            //    //});
            //    var usedRange = worksheet.get_Range($"A4", $"O{index - 1}");
            //    usedRange.Borders.get_Item(Excel.XlBordersIndex.xlEdgeLeft).LineStyle = Excel.XlLineStyle.xlContinuous;
            //    usedRange.Borders.get_Item(Excel.XlBordersIndex.xlEdgeRight).LineStyle = Excel.XlLineStyle.xlContinuous;
            //    usedRange.Borders.get_Item(Excel.XlBordersIndex.xlEdgeTop).LineStyle = Excel.XlLineStyle.xlContinuous;
            //    usedRange.Borders.get_Item(Excel.XlBordersIndex.xlEdgeBottom).LineStyle = Excel.XlLineStyle.xlContinuous;
            //    usedRange.Borders.Color = Color.Black;
            //    #endregion

            //    #region Ngành hàng
            //    var header2 = worksheet2.get_Range("A1", "B1");
            //    header2.Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.DarkSeaGreen);
            //    header2.Font.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Black);
            //    header2.Font.Bold = true;
            //    header2.Range["A1"].Value = "Mã ngành hàng";
            //    header2.Range["B1"].Value = "Nhóm ngành hàng";

            //    var usedRange2 = worksheet2.get_Range($"A1", $"B10");
            //    usedRange2.Borders.get_Item(Excel.XlBordersIndex.xlEdgeLeft).LineStyle = Excel.XlLineStyle.xlContinuous;
            //    usedRange2.Borders.get_Item(Excel.XlBordersIndex.xlEdgeRight).LineStyle = Excel.XlLineStyle.xlContinuous;
            //    usedRange2.Borders.get_Item(Excel.XlBordersIndex.xlEdgeTop).LineStyle = Excel.XlLineStyle.xlContinuous;
            //    usedRange2.Borders.get_Item(Excel.XlBordersIndex.xlEdgeBottom).LineStyle = Excel.XlLineStyle.xlContinuous;
            //    usedRange2.Borders.Color = Color.Black;

            //    worksheet2.Range["A:A"].EntireColumn.NumberFormat = "@";
            //    worksheet2.Range["B:B"].EntireColumn.NumberFormat = "#,##0.00";
            //    background.ReportProgress(97);

            //    ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
            //    List<ICProductAttributesInfo> listProductAttributes = objProductAttributesController.GetProductAttributesByProductAttributeGroup("PackingMaterialSpeciality");

            //    index = 2;
            //    listProductAttributes.ForEach(o =>
            //    {
            //        worksheet2.Range[$"A{index}"].Value = o.ICProductAttributeValue.Trim();
            //        index++;
            //    });
            //    #endregion

            //    worksheet.get_Range("A4", "O4").EntireColumn.AutoFit();
            //    worksheet2.get_Range("A1", "B1").EntireColumn.AutoFit();
            //    workbook.SaveAs(FilePath);
            //    workbook.Close(true, misValue, misValue);
            //    xlApp.Quit();
            //    ReleaseObject(worksheet);
            //    ReleaseObject(worksheet2);
            //    ReleaseObject(workbook);
            //    ReleaseObject(xlApp);
            //    BOSProgressBar.Close();
            //}
            //catch (Exception ex)
            //{
            //    BOSProgressBar.Close();
            //    MessageBox.Show(ex.ToString(), MESLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            //}
        }
        #endregion

        #region Import
        public void ImportProductGroups()
        {
            string filePath = string.Empty;
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Filter = TransferLocalizedResources.DialogFilter;
            if (dialog.ShowDialog() == DialogResult.Cancel)
                return;
            filePath = dialog.FileName;
            string extension = Path.GetExtension(filePath);
            string connectionString = @"Provider=Microsoft.Jet.OLEDB.4.0;Data Source='" + filePath + "';Extended Properties=\"Excel 8.0;HDR=YES;\"";
            if (extension.Equals(".xlsx"))
            {
                connectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source='" + filePath + "';Extended Properties=\"Excel 12.0;HDR=YES;\"";
            }
            BOSProgressBar.Start("Đang khởi tạo dữ liệu");
            DataSet ds = GetDataFromExcel(filePath, connectionString);
            BOSProgressBar.Close();
            InitializeImport(ds);
        }

        public void InitializeImport(DataSet ds)
        {
            AAColumnAliasController objColumnAliasController = new AAColumnAliasController();
            List<AAColumnAliasInfo> aliasImportsList = BOSApp.LstColumnAlias.Where(o => o.AATableName == "IPProductGroups").ToList();
            List<IPProductGroupsInfo> productGroupsList = new List<IPProductGroupsInfo>();
            List<IPDepartmentAttributesInfo> departmentAttributesList = new List<IPDepartmentAttributesInfo>();
            IPProductGroupsInfo objProductGroupsInfo = new IPProductGroupsInfo();
            IPDepartmentAttributesInfo objDepartmentAttributesInfo = new IPDepartmentAttributesInfo();

            DataTable dt = ds.Tables[0];
            if (dt != null)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    objProductGroupsInfo = (IPProductGroupsInfo)GetObjectFromDataRow(dr, objProductGroupsInfo.GetType(), aliasImportsList);
                    if (objProductGroupsInfo != null && !string.IsNullOrWhiteSpace(objProductGroupsInfo.IPProductGroupNo))
                    {
                        productGroupsList.Add(objProductGroupsInfo);
                    }
                }
            }

            aliasImportsList = BOSApp.LstColumnAlias.Where(o => o.AATableName == "IPDepartmentAttributes").ToList();
            dt = ds.Tables[1];
            if (dt != null)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    objDepartmentAttributesInfo = (IPDepartmentAttributesInfo)GetObjectFromDataRow(dr, objDepartmentAttributesInfo.GetType(), aliasImportsList);
                    if (objDepartmentAttributesInfo != null && !string.IsNullOrWhiteSpace(objDepartmentAttributesInfo.ICDepartmentAttributeValueValue))
                    {
                        departmentAttributesList.Add(objDepartmentAttributesInfo);
                    }
                }
            }

            guiImportProductGroups guiImport = new guiImportProductGroups(productGroupsList, departmentAttributesList);
            guiImport.Module = this;
            DialogResult rs = guiImport.ShowDialog();
            if (rs != DialogResult.OK)
                return;
            BOSProgressBar.Start("Đang lưu dữ liệu");
            SaveImportItemsList(guiImport.ProductGroupsList, guiImport.DepartmentAttributesList);
            BOSProgressBar.Close();
        }

        public void SaveImportItemsList(List<IPProductGroupsInfo> productGroupList, List<IPDepartmentAttributesInfo> attributeList)
        {
            ICDepartmentsInfo mainObject = (ICDepartmentsInfo)CurrentModuleEntity.MainObject;

            #region SaveProductGroups
            BOSList<ICProductGroupsInfo> listProductGroupsInfo = new BOSList<ICProductGroupsInfo>();
            listProductGroupsInfo.InitBOSList(this.CurrentModuleEntity,
                                                TableName.ICDepartmentsTableName,
                                                TableName.ICProductGroupsTableName,
                                                BOSList<ICProductGroupsInfo>.cstRelationForeign);
            listProductGroupsInfo.ItemTableForeignKey = "FK_ICDepartmentID";

            ICProductGroupsInfo item = new ICProductGroupsInfo();
            IPProductGroupsInfo checkGroupParent = new IPProductGroupsInfo();
            productGroupList.ForEach(o =>
            {
                item = new ICProductGroupsInfo();
                item.FK_ICDepartmentID = mainObject.ICDepartmentID;
                item.ICProductGroupNo = o.IPProductGroupNo;
                item.ICProductGroupName = o.IPProductGroupName;
                item.ICProductGroupParentName = o.IPProductGroupParentName;
                item.ICProductGroupConfigStart = o.IPProductGroupConfigStart != null ? o.IPProductGroupConfigStart : 0;
                item.ICProductGroupConfigLength = o.IPProductGroupConfigLength != null ? o.IPProductGroupConfigLength: 0;
                item.ICProductGroupConfigGroupNoLength = o.IPProductGroupConfigGroupNoLength != null ? o.IPProductGroupConfigGroupNoLength : 0;
                item.FK_ICProductTypeAccountConfigID = o.FK_ICProductTypeAccountConfigID;
                item.ICProductGroupParentID = 0;
                listProductGroupsInfo.Add(item);
            });
            listProductGroupsInfo.SaveItemObjects();

            //Save ID nhóm cha
            listProductGroupsInfo.ForEach(o =>
            {
                checkGroupParent = productGroupList.FirstOrDefault(p => p.IPProductGroupNo == o.ICProductGroupNo
                                                                        && p.IPProductGroupName == o.ICProductGroupName);
                if(checkGroupParent != null
                    && !string.IsNullOrWhiteSpace(checkGroupParent.IPProductGroupParentNo))
                {
                    item = listProductGroupsInfo.FirstOrDefault(p => p.ICProductGroupNo == checkGroupParent.IPProductGroupParentNo
                                                                        && p.ICProductGroupName == checkGroupParent.IPProductGroupParentName);
                    if(item != null)
                    {
                        o.ICProductGroupParentID = item.ICProductGroupID;
                    }    
                }    
            });
            listProductGroupsInfo.SaveItemObjects();
            #endregion

            #region SaveDepartmentAttributes
            BOSList<ICDepartmentAttributesInfo> listDepartmentAttributesInfo = new BOSList<ICDepartmentAttributesInfo>();
            listDepartmentAttributesInfo.InitBOSList(this.CurrentModuleEntity,
                                                TableName.ICDepartmentsTableName,
                                                TableName.ICDepartmentAttributesTableName,
                                                BOSList<ICDepartmentAttributesInfo>.cstRelationForeign);
            listDepartmentAttributesInfo.ItemTableForeignKey = "FK_ICDepartmentID";

            BOSList<ICDepartmentAttributeValuesInfo> listAttributeValuesInfo = new BOSList<ICDepartmentAttributeValuesInfo>();
            listAttributeValuesInfo.InitBOSList(this.CurrentModuleEntity,
                                                TableName.ICDepartmentAttributesTableName,
                                                TableName.ICDepartmentAttributeValuesTableName,
                                                BOSList<ICDepartmentAttributeValuesInfo>.cstRelationNone);

            ICDepartmentAttributesInfo itemAttribute = new ICDepartmentAttributesInfo();
            ICDepartmentAttributeValuesInfo itemAttributeValue = new ICDepartmentAttributeValuesInfo();
            //IPProductGroupsInfo checkGroupParent = new IPProductGroupsInfo();
            attributeList.ForEach(o =>
            {
                itemAttribute = new ICDepartmentAttributesInfo();
                itemAttribute.FK_ICDepartmentID = mainObject.ICDepartmentID;
                itemAttribute.ICDepartmentAttributeNo = string.Empty;
                itemAttribute.ICDepartmentAttributeName = o.ICDepartmentAttributeName;
                itemAttribute.ICDepartmentAttributeDesc = o.ICDepartmentAttributeName;
                itemAttribute.ICDepartmentAttributeLevel = listDepartmentAttributesInfo.Count + 1;
                if(listDepartmentAttributesInfo.FirstOrDefault(c => c.ICDepartmentAttributeName.ToLower().Trim() == itemAttribute.ICDepartmentAttributeName.ToLower().Trim()) == null)
                {
                    listDepartmentAttributesInfo.Add(itemAttribute);
                }
            });
            listDepartmentAttributesInfo.SaveItemObjects();

            attributeList.ForEach(o =>
            {
                itemAttributeValue = new ICDepartmentAttributeValuesInfo();
                itemAttributeValue.FK_ICDepartmentID = mainObject.ICDepartmentID;
                itemAttributeValue.ICDepartmentAttributeNo = string.Empty;
                itemAttributeValue.ICDepartmentAttributeName = o.ICDepartmentAttributeName;
                itemAttributeValue.ICDepartmentAttributeDesc = o.ICDepartmentAttributeName;
                itemAttributeValue.ICDepartmentAttributeValueNo = o.ICDepartmentAttributeValueNo;
                itemAttributeValue.ICDepartmentAttributeValueValue = o.ICDepartmentAttributeValueValue;
                itemAttribute = listDepartmentAttributesInfo.FirstOrDefault(c => c.ICDepartmentAttributeName == o.ICDepartmentAttributeName);
                if(itemAttribute != null)
                {
                    itemAttributeValue.FK_ICDepartmentAttributeID = itemAttribute.ICDepartmentAttributeID;
                }    
                listAttributeValuesInfo.Add(itemAttributeValue);
            });
            listAttributeValuesInfo.SaveItemObjects();
            #endregion
            Invalidate(mainObject.ICDepartmentID);
        }

        public DataSet GetDataFromExcel(string filePath, string connectionString)
        {
            DataSet ds = new DataSet();
            try
            {
                List<string> sheetNames = new List<string>();
                OleDbDataAdapter command;

                string commandTemplate = "SELECT * FROM [{0}]";
                string commandRun = string.Empty;
                using (OleDbConnection cn = new OleDbConnection(connectionString))
                {
                    cn.Open();
                    System.Data.DataTable dt = cn.GetSchema("Tables");
                    foreach (DataRow dr in dt.Rows)
                    {
                        sheetNames.Add(dr["TABLE_NAME"].ToString());
                    }
                    sheetNames.ForEach(o =>
                    {
                        commandRun = string.Format(commandTemplate, o);
                        command = new System.Data.OleDb.OleDbDataAdapter(commandRun, cn);
                        command.TableMappings.Add("Table", o);
                        command.Fill(ds);
                    });
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
            return ds;
        }

        public object GetObjectFromDataRow(DataRow row, Type type, List<AAColumnAliasInfo> aliasList)
        {
            object obj = type.InvokeMember("", System.Reflection.BindingFlags.CreateInstance, null, null, null);
            string columnName = string.Empty;
            AAColumnAliasInfo objColumnAliasInfo = new AAColumnAliasInfo();
            decimal decimalValue = 0;
            bool isConverter = false;
            foreach (DataColumn column in row.Table.Columns)
            {
                isConverter = false;
                object objValue = row[column];
                objColumnAliasInfo = aliasList.Where(o => o.AAColumnAliasCaption.ToLower().Trim() == column.ColumnName.ToLower().Trim()).FirstOrDefault();
                if (objColumnAliasInfo == null)
                    continue;

                PropertyInfo property = obj.GetType().GetProperty(objColumnAliasInfo.AAColumnAliasName);
                if (property != null)
                    property.SetValue(obj, ToPropertyDataType(column.DataType, property.PropertyType, objValue), null);
            }
            return obj;
        }

        public object ToPropertyDataType(Type fromType, Type toType, object objValue)
        {
            if (toType.Equals(typeof(string)) || toType.Equals(typeof(String)))
            {
                return objValue == null ? string.Empty : objValue.ToString().Trim();
            }
            if (objValue == null)
                return objValue;

            if (fromType.Equals(toType))
                return objValue;

            if (toType.Equals(typeof(decimal)) || toType.Equals(typeof(Decimal)))
            {
                decimal value = 0;
                Decimal.TryParse(objValue.ToString(), out value);
                return Math.Round(value, 5, MidpointRounding.AwayFromZero);
            }
            if (toType.Equals(typeof(int)))
            {
                decimal value = 0;
                Decimal.TryParse(objValue.ToString(), out value);
                return (int)value;
            }
            if (toType.Equals(typeof(bool)) || toType.Equals(typeof(Boolean)))
            {
                return !string.IsNullOrWhiteSpace(objValue.ToString());
            }
            return objValue;
        }
        #endregion
    }
    #endregion
}