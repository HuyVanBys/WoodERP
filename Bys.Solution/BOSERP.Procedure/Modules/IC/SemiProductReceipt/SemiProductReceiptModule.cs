using BOSCommon;
using BOSCommon.Constants;
using BOSComponent;
using BOSERP.GenaralLeadger;
using BOSERP.Modules.IC.BatchReceiptDryLumber.Localization;
using BOSERP.Procedure.Modules.IC.SemiProductReceipt.ImportInfo;
using BOSLib;
using BOSReport;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraReports.UI;
using Localization;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.OleDb;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Windows.Forms;
using ZXing;
using ZXing.Common;

namespace BOSERP.Modules.SemiProductReceipt
{
    #region SemiProductReceiptModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:SemiProductReceiptModule
    //Created Date:Saturday, May 31, 2008
    //-----------------------------------------------------------

    public class SemiProductReceiptModule : GLReceiptModule
    {
        #region Constants
        public const string ReceiptItemGridControlName = "fld_dgcReceiptItems";
        public const string DocumentEntryGridControlName = "fld_dgcACDocumentEntrys";
        public const string SearchBranchLookupEditControlName = "fld_lkeFK_BRBranchID";
        public const string BatchProductLookupEditControlName = "fld_lkeFK_MMBatchProductID";
        public const string OperationLookupEditControlName = "fld_lkeFK_MMOperationID";
        public const string ProductAddLookupEditControlName = "fld_lkeFK_ICProductID1";
        public const string ShowReceiptButtonName = "fld_btnShowReceiptList";
        public const string DefaultAccountNo = "155";
        public const string UpdatePositionItemsControlName = "fld_lkeMMUpdatePositionItemID";
        #endregion

        #region Variable
        #endregion

        #region Public properties
        public BOSLookupEdit SearchBranchLookupEditControl;
        public List<ADDataViewPermissionsInfo> CurrentModuleDataViewPermissionList;
        public List<BRBranchsInfo> BranchList;
        public BOSLookupEdit BatchProductLookupEditControl = null;
        public BOSLookupEdit OperationLookupEditControl = null;
        public BOSLookupEdit ProductAddLookupEditControl = null;
        public BOSLookupEdit fld_lkeFK_MMWorkShopID = null;
        public BOSLookupEdit fld_lkeFK_LineID = null;
        public BOSButton ShowReceiptButton = null;
        public BOSLookupEdit UpdatePositionItemControl;

        private Microsoft.Office.Interop.Excel.Workbook WorkBook;

        private Microsoft.Office.Interop.Excel.Worksheet WorkSheet;

        private Microsoft.Office.Interop.Excel.Application App;
        #endregion

        public SemiProductReceiptModule()
        {
            Name = "SemiProductReceipt";
            CurrentModuleEntity = new SemiProductReceiptEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();

            StartGettingInventoryThread();
            GetCurrentModuleDataViewPermission();
            SearchBranchLookupEditControl = (BOSLookupEdit)Controls[SearchBranchLookupEditControlName];
            SearchBranchLookupEditControl.Properties.DataSource = BranchList;
            BatchProductLookupEditControl = (BOSLookupEdit)Controls[BatchProductLookupEditControlName];
            BatchProductLookupEditControl.QueryPopUp += new System.ComponentModel.CancelEventHandler(BatchProductLookupEditControl_QueryPopUp);

            OperationLookupEditControl = (BOSLookupEdit)Controls[OperationLookupEditControlName];
            ProductAddLookupEditControl = (BOSLookupEdit)Controls[ProductAddLookupEditControlName];
            ShowReceiptButton = (BOSButton)Controls[ShowReceiptButtonName];

            ChangeProductAddLookupEditDataSource();
            InitializeWorkShoplookupDataSource();
            InitializeLinelookupDataSource();
            InitializeMachineUnitlookupDataSource();

            fld_lkeFK_MMWorkShopID = (BOSLookupEdit)Controls["fld_lkeFK_MMWorkShopID"];
            fld_lkeFK_LineID = (BOSLookupEdit)Controls["fld_lkeFK_LineID"];
            UpdatePositionItemControl = (BOSLookupEdit)Controls[UpdatePositionItemsControlName];
            MMUpdatePositionItemsController objUpdatePosititonsController = new MMUpdatePositionItemsController();
            List<MMUpdatePositionItemsInfo> listUpdatePositions = objUpdatePosititonsController.GetAllLocationName();
            UpdatePositionItemControl.Properties.DataSource = listUpdatePositions;

        }

        void BatchProductLookupEditControl_QueryPopUp(object sender, System.ComponentModel.CancelEventArgs e)
        {
            BatchProductLookupEditControl.Properties.DataSource = GetBatchProductLookupEditDataSource();
        }
        public List<MMBatchProductItemsInfo> GetBatchProductItemSerialDataSource()
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;

            ICProductsController objProductsController = new ICProductsController();
            List<MMBatchProductItemsInfo> BatchProductItemsList = new List<MMBatchProductItemsInfo>();
            BatchProductItemsList.Add(new MMBatchProductItemsInfo());
            if (objReceiptsInfo.FK_MMBatchProductID > 0)
            {
                MMBatchProductItemsController objBatchProductItemsController = new MMBatchProductItemsController();
                BatchProductItemsList = objBatchProductItemsController.GetBatchProductItemByBatchProduct(objReceiptsInfo.FK_MMBatchProductID);
            }
            return BatchProductItemsList;
        }

        public void InitializeOperationlookupDataSource()
        {
            //Công đoạn
            MMOperationsController objOperationsController = new MMOperationsController();
            List<MMOperationsInfo> objOperationsList = objOperationsController.GetOperationsByGroupAndInOutStockCheck("Product", true);
            OperationLookupEditControl.Properties.DataSource = objOperationsList;
        }
        public int ChangeStockReceiptByOperationDetailPlan(int operationID, int lineID, int workShopID, List<MMLineOperationsInfo> ListInfo)
        {
            int result = 0;

            if (ListInfo != null)
            {
                MMLineOperationsInfo obj = ListInfo.Where(l => l.FK_MMOperationID == operationID
                                                           && (l.FK_MMLineID == lineID || lineID == 0)
                                                           && (l.FK_MMWorkShopID == workShopID || workShopID == 0)).FirstOrDefault();
                if (obj != null)
                    result = obj.FK_ICStockID;
            }

            return result;
        }
        public bool SyncReceiptItem(bool isCheckNew = false)
        {
            bool result = true;
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo mainObject = (ICReceiptsInfo)entity.MainObject;
            if (mainObject.ICReceiptSemiProductType == ReceiptSemiProductType.BatchProduct.ToString()) return result; // loại nhập ngoài định mức
            List<ICReceiptItemsInfo> CheckList = entity.ReceiptItemsList.Where(i => i.ICReceiptItemProductQty > 0).ToList();
            MMOperationDetailPlanItemChildsController ctrol = new MMOperationDetailPlanItemChildsController();
            List<MMOperationDetailPlanItemChildsInfo> foundSyncList = ctrol.GetRceiptAvailableSyncData(mainObject.ICReceiptID, isCheckNew);
            if (CheckList != null && CheckList.Count > 0 && foundSyncList != null && foundSyncList.Count > 0)
            {
                foreach (ICReceiptItemsInfo checkItem in CheckList)
                {
                    List<MMOperationDetailPlanItemChildsInfo> found = foundSyncList.Where(o => o.FK_MMBatchProductProductionNormItemID == checkItem.FK_MMBatchProductProductionNormItemID
                                                                                                && o.FK_MMOperationID == checkItem.FK_MMOperationID).ToList();
                    if (found != null && found.Count > 0)
                    {
                        decimal SyncPerCent = 1;
                        decimal canSync = 0;
                        decimal Synched = 0;
                        found.ForEach(o =>
                        {
                            Synched = o.MMOperationDetailPlanCapacityItemSynchedQty;
                            o.MMOperationDetailPlanCapacityItemSynchedQty = Math.Round(
                                                                    (o.MMOperationDetailPlanCapacityItemSynchedQty /
                                                                    (o.MMOperationDetailPlanItemChildBatchProductItemProductQty > 0
                                                                    ? o.MMOperationDetailPlanItemChildBatchProductItemProductQty : o.MMOperationDetailPlanItemChildTotalProductQty))
                                                                    * o.MMOperationDetailPlanItemChildTotalProductQty, 5);

                            canSync = o.MMOperationDetailPlanCapacityItemTotalAvailSync - o.MMOperationDetailPlanCapacityItemSynchedQty;
                            if (canSync / o.MMOperationDetailPlanItemChildTotalProductQty < SyncPerCent)
                                SyncPerCent = (canSync / o.MMOperationDetailPlanItemChildTotalProductQty);

                            checkItem.MMOperationDetailPlanCapacityItemCanSync = Math.Round((SyncPerCent * (o.MMOperationDetailPlanItemChildBatchProductItemProductQty)), 1);
                        });

                        if (//checkItem.MMOperationDetailPlanCapacityItemSyncProductCheck &&
                            checkItem.ICReceiptItemProductQty > checkItem.MMOperationDetailPlanCapacityItemCanSync)
                        {
                            result = false;
                            checkItem.IsError = true;
                        }
                    }
                    else
                    {
                        MMBatchProductProductionNormItemsInfo objBatchProductProductionNormItemsInfo = new MMBatchProductProductionNormItemsInfo();
                        if (checkItem != null && (checkItem.FK_MMBatchProductItemID > 0 || checkItem.FK_MMBatchProductProductionNormItemID > 0))
                        {
                            if (checkItem.FK_MMOperationID == 0 && mainObject.FK_MMOperationID > 0)
                                checkItem.FK_MMOperationID = mainObject.FK_MMOperationID;
                            if (checkItem.FK_MMBatchProductItemID == 0 && mainObject.FK_MMBatchProductItemID > 0)
                                checkItem.FK_MMBatchProductItemID = mainObject.FK_MMBatchProductItemID;
                            MMBatchProductProductionNormItemsController controler = new MMBatchProductProductionNormItemsController();
                            objBatchProductProductionNormItemsInfo
                               = controler.GetItemCanSyncData(checkItem.FK_MMBatchProductItemID
                                                           , checkItem.FK_ICProductForBatchID
                                                           , checkItem.FK_ICProductID
                                                           , checkItem.FK_MMOperationID
                                                           , checkItem.FK_MMBatchProductProductionNormItemID
                                                           , checkItem.Id
                                                           , isCheckNew);
                        }
                        if (checkItem != null && objBatchProductProductionNormItemsInfo.SyncProductCheck)
                            checkItem.MMOperationDetailPlanCapacityItemCanSync = objBatchProductProductionNormItemsInfo.MMBatchProductProductionNormItemQuantity;
                    }
                }
            }
            if (!result)
            {
                BOSApp.ShowMessage("Số lượng nhập lớn hơn số lượng có thể đồng bộ!");
            }
            return result;
        }
        public bool CheckProductionNormQty()
        {
            bool result = true;
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            if (objReceiptsInfo.ICReceiptSemiProductType == ReceiptSemiProductType.BatchProduct.ToString()) return result; // loại nhập ngoài định mức
            List<ICReceiptItemsInfo> ListRemainQty = null;
            if (objReceiptsInfo.ICReceiptID > 0)
                ListRemainQty = (new ICReceiptItemsController()).GetProductionNormRemainQtyBySomeCriteria(objReceiptsInfo.ICReceiptID);
            string mess = string.Empty;
            entity.ReceiptItemsList.ForEach(o =>
            {
                if (o.ICReceiptItemProductQty > o.ICReceiptItemBPProductionNormItemQty && o.ICReceiptItemBPProductionNormItemQty > 0)
                {
                    o.IsError = true;
                    result = false;
                }
                decimal totalReceipt = entity.ReceiptItemsList.Where(it => it.FK_MMBatchProductProductionNormItemID == o.FK_MMBatchProductProductionNormItemID).Sum(i => i.ICReceiptItemProductQty);
                if (totalReceipt > o.ICReceiptItemBPProductionNormItemQty && o.ICReceiptItemBPProductionNormItemQty > 0)
                {
                    o.IsError = true;
                    result = false;
                }
            });
            if (!result)
            {
                BOSApp.ShowMessage("Số lượng nhập kho lớn hơn định mức còn lại!");
                return result;

            }
            if (ListRemainQty != null)
            {
                entity.ReceiptItemsList.ForEach(o =>
                {
                    decimal totalReceipt = entity.ReceiptItemsList.Where(it => it.FK_MMBatchProductProductionNormItemID == o.FK_MMBatchProductProductionNormItemID).Sum(i => i.ICReceiptItemProductQty);
                    if (ListRemainQty != null && ListRemainQty.Count > 0)
                    {
                        ICReceiptItemsInfo found = ListRemainQty.Where(y => y.Id == o.Id).FirstOrDefault();
                        if (found != null)
                        {
                            if (totalReceipt > found.ICReceiptItemProductRemainQty)
                            {
                                o.IsError = true;
                                result = false;
                            }
                        }
                    }

                });
            }
            if (!result)
            {
                BOSApp.ShowMessage("Tổng số lượng nhập kho lớn hơn định mức còn lại!");
                return result;

            }

            return result;
        }
        public bool CheckPackQty(ICReceiptItemsInfo obj)
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            bool result = true;
            List<PackInfo> PackList = new List<PackInfo>();
            if (obj != null)
            {
                if (!string.IsNullOrEmpty(obj.ICReceiptItemLotNo))
                {
                    PackInfo oPack = new PackInfo();
                    oPack.PackNo = obj.ICReceiptItemLotNo;
                    oPack.BatchItemID = obj.FK_MMBatchProductItemID;
                    PackList.Add(oPack);
                }
                else
                    return true;
            }
            else
                PackList = entity.ReceiptItemsList.GroupBy(gr => new { gr.ICReceiptItemLotNo, gr.FK_MMBatchProductItemID, }).
                    Select(p => new PackInfo { PackNo = p.Key.ICReceiptItemLotNo, BatchItemID = p.Key.FK_MMBatchProductItemID }).Distinct().ToList();

            if (PackList != null && PackList.Count > 0)
            {
                ICProductPackageItemsController objController = new ICProductPackageItemsController();
                List<ICProductPackageItemsInfo> listPack = objController.GetPackageItemsListByListPackageNo(string.Join(",", PackList.Select(p => p.PackNo).ToArray()));
                if (listPack != null && obj != null)
                {
                    BOSApp.ShowMessage("Bạn không thể thay đổi số lượng chi tiết trong kiện!");
                    return false;
                }
                if (listPack != null && listPack.Count > 0)
                {
                    string mess1 = string.Empty;
                    string mess2 = string.Empty;
                    foreach (PackInfo pack in PackList)
                    {
                        List<ICProductPackageItemsInfo> listItem = listPack.Where(o => o.ICProductPackageNo == pack.PackNo).ToList();
                        List<ICReceiptItemsInfo> listReceiptItem = entity.ReceiptItemsList.Where(o => o.ICReceiptItemLotNo == pack.PackNo && o.FK_MMBatchProductItemID == pack.BatchItemID).ToList();
                        if (listItem != null)
                        {
                            if (listReceiptItem == null || (listReceiptItem.Count != listItem.Count))
                            {
                                entity.ReceiptItemsList.ForEach(r => { if (r.ICReceiptItemLotNo == pack.PackNo && r.FK_MMBatchProductItemID == pack.BatchItemID) r.IsError1 = true; });
                                result = false;
                                mess1 = "Chi tiết đã nhập khác với cấu trúc kiện đã định nghĩa!";
                                break;
                            }
                            decimal slKien = 0;
                            foreach (ICProductPackageItemsInfo item in listItem)
                            {
                                decimal itemPercent = 0;
                                ICReceiptItemsInfo receiptItem = listReceiptItem.Where(o => o.FK_ICProductID == item.FK_ICProductID && o.ICReceiptItemLotNo == pack.PackNo && o.FK_MMBatchProductItemID == pack.BatchItemID).FirstOrDefault();
                                if (receiptItem != null)
                                {
                                    itemPercent = receiptItem.ICReceiptItemProductQty / item.ICProductPackageItemQty;
                                }
                                //Lấy defualt kiện
                                if (slKien == 0)
                                    slKien = itemPercent;
                                if (slKien != itemPercent)
                                {
                                    mess2 = "Chi tiết đã nhập có số lượng không đồng bộ với SL chi tiết trong kiện!";
                                    if (receiptItem != null)
                                        entity.ReceiptItemsList.ForEach(r => { if (r.ICReceiptItemLotNo == pack.PackNo && r.FK_MMBatchProductItemID == pack.BatchItemID && r.FK_ICProductID == receiptItem.FK_ICProductID) r.IsError1 = true; });
                                    result = false;
                                }

                            }
                        }
                    }
                    if (!result)
                    {
                        string mess = (!string.IsNullOrEmpty(mess1) ? mess1 : "") + Environment.NewLine + (!string.IsNullOrEmpty(mess2) ? mess2 : "");
                        BOSApp.ShowMessage(mess);
                    }
                }
            }
            return result;
        }
        public override void ActionNew()
        {
            base.ActionNew();
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            entity.DocumentList.Clear();
            entity.DocumentEntryList.Clear();
            entity.DocumentEntryList.GridControl.RefreshDataSource();

        }

        public void ChangeProductAddLookupEditDataSource()
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            ICProductsController objProductsController = new ICProductsController();
            List<ICProductsForViewInfo> objProductList = new List<ICProductsForViewInfo>();
            if (objReceiptsInfo.ICReceiptTypeCombo == ReceiptType.SemiProductReceipt.ToString()
                || objReceiptsInfo.ICReceiptTypeCombo == ReceiptType.SemiProductReceiptDC.ToString())
            {
                objProductList = BOSApp.CurrentProductList.Where(p => p.ICProductType == ProductType.SemiProduct.ToString() && p.ICProductActiveCheck).ToList();
            }
            else if (objReceiptsInfo.ICReceiptTypeCombo == ReceiptType.ProductionReceipt.ToString())
            {
                objProductList = BOSApp.CurrentProductList.Where(p => p.ICProductType == ProductType.Product.ToString() && p.ICProductActiveCheck).ToList();
            }
            if (objReceiptsInfo.ICReceiptCreateFrom == CreateFrom.BatchProduct.ToString())
            {
                if (ShowReceiptButton != null)
                {
                    if (objReceiptsInfo.ICReceiptTypeCombo == ReceiptType.SemiProductReceipt.ToString()
                    || objReceiptsInfo.ICReceiptTypeCombo == ReceiptType.SemiProductReceiptDC.ToString())
                    {
                        ShowReceiptButton.Text = SemiProductReceiptLocalizedResources.BatchProductSemiProductButtonName;
                    }
                    else if (objReceiptsInfo.ICReceiptTypeCombo == ReceiptType.ProductionReceipt.ToString())
                    {
                        ShowReceiptButton.Text = SemiProductReceiptLocalizedResources.BatchProductProductButtonName;
                    }
                }
            }
            else
            {
                if (ShowReceiptButton != null)
                    ShowReceiptButton.Text = SemiProductReceiptLocalizedResources.ShipmentButtonName;
            }
            //objProductList = objProductList.Where(p => p.ICProductActiveCheck).ToList();
            if (ProductAddLookupEditControl != null)
                ProductAddLookupEditControl.Properties.DataSource = objProductList;
        }
        public void ActionNewSemiProductReceipt()
        {
            ActionNew();
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo mainobject = (ICReceiptsInfo)entity.MainObject;
            mainobject.ICReceiptSemiProductType = ReceiptSemiProductType.SemiProduct.ToString();
            mainobject.ICReceiptTypeCombo = ReceiptType.SemiProductReceipt.ToString();
            mainobject.ICReceiptCreateFrom = CreateFrom.BatchProduct.ToString();
            ChangeProductAddLookupEditDataSource();
        }
        public void ActionNewSemiProductReceiptOverBOM()
        {
            ActionNew();
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo mainobject = (ICReceiptsInfo)entity.MainObject;
            mainobject.ICReceiptSemiProductType = ReceiptSemiProductType.BatchProduct.ToString(); // nhập ngoài định mức => không kiểm tra đồng bộ/ định mức
            mainobject.ICReceiptTypeCombo = ReceiptType.SemiProductReceipt.ToString();
            mainobject.ICReceiptCreateFrom = CreateFrom.BatchProduct.ToString();
            ChangeProductAddLookupEditDataSource();
        }
        public void ActionNewProductionReceipt()
        {
            ActionNew();
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo mainobject = (ICReceiptsInfo)entity.MainObject;
            mainobject.ICReceiptSemiProductType = ReceiptSemiProductType.Product.ToString();
            mainobject.ICReceiptTypeCombo = ReceiptType.ProductionReceipt.ToString();
            mainobject.ICReceiptCreateFrom = CreateFrom.BatchProduct.ToString();
            ChangeProductAddLookupEditDataSource();
        }

        public void FindPackage(string PackNo, decimal packQty)
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;

                int batchProductID = objReceiptsInfo.FK_MMBatchProductID;
                int operationID = objReceiptsInfo.FK_MMOperationID;

                if (batchProductID == 0)
                {
                    BOSApp.ShowMessage("Vui lòng chọn Lệnh sản xuất");
                    return;
                }

                if (operationID == 0)
                {
                    BOSApp.ShowMessage("Vui lòng chọn Công đoạn");
                    return;
                }
                MMOperationsController objOperationsController = new MMOperationsController();
                MMOperationsInfo objOperationsInfo = new MMOperationsInfo();
                if (objReceiptsInfo.FK_ICProductID == 0)
                {
                    BOSApp.ShowMessage("Vui lòng chọn thành phẩm!");
                    return;
                }

                ICProductPackageItemsController objController = new ICProductPackageItemsController();
                List<ICProductPackageItemsInfo> listItem = objController.GetPackageItemsListByPackageNo(PackNo);
                if (listItem == null || listItem.Count == 0)
                {
                    BOSApp.ShowMessage("Không tìm thấy kiện tương ứng!");
                    return;
                }

                ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
                MMBatchProductItemsController batchProductItemsController = new MMBatchProductItemsController();
                ICProductsInfo objProductsInfo = new ICProductsInfo();
                ICProductsController objProductsController = new ICProductsController();

                #region Acronym
                DataRow row = BOSApp.GetObjectFromCatche("MMOperations", "MMOperationID", objReceiptsInfo.FK_MMOperationID);
                if (row != null)
                    objOperationsInfo = (MMOperationsInfo)objOperationsController.GetObjectFromDataRow(row);
                else
                    objOperationsInfo = (MMOperationsInfo)objOperationsController.GetObjectByID(objReceiptsInfo.FK_MMOperationID);

                //string Acronym = string.Empty;

                int account = 0;
                if (objOperationsInfo != null)
                {
                    account = objOperationsInfo.FK_ACAccountID;
                }
                #endregion
                MMBatchProductProductionNormItemsController objBPPNsController = new MMBatchProductProductionNormItemsController();
                List<MMBatchProductProductionNormItemsInfo> pnList = new List<MMBatchProductProductionNormItemsInfo>();
                pnList = objBPPNsController.GetAllItemByProductTypeAndBatchProductID(ProductType.SemiProduct.ToString(), objReceiptsInfo.FK_MMBatchProductID, objReceiptsInfo.FK_MMOperationID);
                if (objReceiptsInfo.FK_MMBatchProductItemID > 0 && pnList != null)
                {
                    // batchProductItemID = batchProductItemList[0].MMBatchProductItemID;
                    pnList = pnList.Where(t => (t.FK_ICProductForBatchID == objReceiptsInfo.FK_ICProductID || objReceiptsInfo.FK_ICProductID == 0)
                        && (t.FK_MMBatchProductItemID == objReceiptsInfo.FK_MMBatchProductItemID || objReceiptsInfo.FK_MMBatchProductItemID == 0)).ToList();

                    if (listItem != null)
                    {
                        foreach (ICProductPackageItemsInfo packItem in listItem)
                        {
                            packItem.ICProductPackageItemQty = packItem.ICProductPackageItemQty * packQty;
                        }
                    }
                    if (pnList != null && pnList.Count > 0 && listItem != null && listItem.Count > 0)
                    {
                        foreach (MMBatchProductProductionNormItemsInfo item in pnList)
                        {
                            if (item.FK_MMBatchProductID == 0)
                            {
                                item.FK_MMBatchProductID = item.MMBatchProductID;
                            }
                        }
                        pnList = pnList.Where(o => listItem.Any(p => p.FK_ICProductID == o.FK_ICProductID)).ToList();
                    }

                    MMBatchProductsController objBatchProductsController = new MMBatchProductsController();
                    MMBatchProductsInfo objBatchProductsInfo = (MMBatchProductsInfo)objBatchProductsController.GetObjectByID(objReceiptsInfo.FK_MMBatchProductID);

                    if (objBatchProductsInfo != null)
                    {
                        objReceiptsInfo.FK_ARCustomerID = objBatchProductsInfo.FK_ARCustomerID;
                    }
                    foreach (MMBatchProductProductionNormItemsInfo pnItem in pnList)
                    {
                        ICProductPackageItemsInfo packItem = listItem.Where(o => o.FK_ICProductID == pnItem.FK_ICProductID).FirstOrDefault();
                        if (packItem != null)
                        {
                            ICReceiptItemsInfo item = new ICReceiptItemsInfo();

                            entity.SetValuesAfterValidateProduct(pnItem.FK_ICProductID, item);
                            objProductsInfo = BOSApp.GetProductFromCurrentProductList(pnItem.FK_ICProductID);
                            if (objProductsInfo != null)
                            {
                                if (account > 0)
                                    item.FK_ACAccountID = account;
                                else
                                    item.FK_ACAccountID = objProductsInfo.FK_ACAccountID;

                            }
                            item.ICReceiptItemQtyreceived = pnItem.MMBatchProductProductionNormItemRemainQty;
                            item.ICReceiptItemProductQty = packItem.ICProductPackageItemQty;
                            item.ICReceiptItemBPProductionNormItemQty = pnItem.MMBatchProductProductionNormItemQuantity;
                            entity.SetProductPriceByProductUnitPrice(item);
                            if (objReceiptsInfo != null)
                            {
                                item.FK_MMBatchProductID = objReceiptsInfo.FK_MMBatchProductID;
                                item.FK_MMOperationID = objReceiptsInfo.FK_MMOperationID;
                            }
                            item.FK_MMBatchProductProductionNormItemID = pnItem.MMBatchProductProductionNormItemID;
                            item.ICReceiptItemProductLength = pnItem.MMBatchProductProductionNormItemProductLength;
                            item.ICReceiptItemProductWidth = pnItem.MMBatchProductProductionNormItemProductWidth;
                            item.ICReceiptItemProductHeight = pnItem.MMBatchProductProductionNormItemProductHeight;
                            item.ICReceiptItemBlockPerOne = pnItem.MMBatchProductProductionNormItemBlockPerOne;
                            item.FK_ICMeasureUnitID = pnItem.FK_ICMeasureUnitID;
                            if (!string.IsNullOrEmpty(pnItem.MMBatchProductItemProductSerial))
                            {
                                item.ICReceiptItemProductSerialNo = GetSerialNo(pnItem.MMBatchProductItemProductSerial, objOperationsInfo.MMOperationAcronym);
                            }
                            item.ICReceiptItemLotNo = packItem.ICProductPackageNo;
                            item.FK_MMBatchProductItemID = objReceiptsInfo.FK_MMBatchProductItemID;
                            if (string.IsNullOrEmpty(item.ICReceiptItemProductSupplierNo))
                            {
                                item.ICReceiptItemProductSupplierNo = pnItem.MMBatchProductProductionNormItemProductSupplierNumber;
                            }
                            objReceiptsInfo.FK_MMBatchProductItemID = objReceiptsInfo.FK_MMBatchProductItemID;

                            if (pnItem.MMBatchProductProductionNormItemBlockPerOne > 0)
                            {
                                item.ICReceiptItemWoodQty = item.ICReceiptItemProductQty * pnItem.MMBatchProductProductionNormItemBlockPerOne;
                            }

                            entity.ReceiptItemsList.Add(item);
                        }
                    }
                }
                else
                {
                    BOSApp.ShowMessage("Không tìm thấy chi tiết BTP cho kiện này!");
                }
                entity.ReceiptItemsList.GridControl.RefreshDataSource();
                UpdateTotalCost();
            }
        }


        public void ActionNewFromCapacity(List<MMOperationDetailPlanCapacityItemsInfo> selectedCapacityList, string ProductType)
        {
            ActionNew();

            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.ICReceiptSemiProductType = ProductType;
            objReceiptsInfo.ICReceiptTypeCombo = ReceiptType.SemiProductReceipt.ToString();
            objReceiptsInfo.ICReceiptCreateFrom = CreateFrom.BatchProduct.ToString();
            objReceiptsInfo.STToolbarActionName = CreateFrom.BatchProduct.ToString();
            this.ToolbarNewActionName = CreateFrom.BatchProduct.ToString();
            objReceiptsInfo.FK_MMOperationID = selectedCapacityList[0].FK_MMOperationID;
            objReceiptsInfo.FK_MMBatchProductID = selectedCapacityList[0].FK_MMBatchProductID;
            objReceiptsInfo.FK_MMBatchProductItemID = selectedCapacityList[0].FK_MMBatchProductItemID;
            objReceiptsInfo.FK_ICProductID = selectedCapacityList[0].FK_ICProductForBatchID;
            objReceiptsInfo.FK_MMWorkShopID = selectedCapacityList[0].FK_MMWorkShopID;
            objReceiptsInfo.FK_MMLineID = selectedCapacityList[0].FK_MMLineID;
            objReceiptsInfo.FK_HRDepartmentRoomGroupItemID = selectedCapacityList[0].HumanFocusedList != null ? selectedCapacityList[0].HumanFocusedList[0].FK_HRDepartmentRoomGroupItemID : selectedCapacityList[0].FK_HRDepartmentRoomGroupItemID;
            MMLineOperationsController objLineOperationsController = new MMLineOperationsController();
            List<MMLineOperationsInfo> ListInfo = objLineOperationsController.GetLineOperationInfoByOperationIDAndLine(null, null);

            MMOperationsController objOperationsController = new MMOperationsController();
            foreach (MMOperationDetailPlanCapacityItemsInfo pnItem in selectedCapacityList)
            {
                ICProductsInfo objProductsInfo = new ICProductsInfo();
                ICReceiptItemsInfo item = new ICReceiptItemsInfo();
                MMOperationsInfo objOperationsInfo = new MMOperationsInfo();
                entity.SetValuesAfterValidateProduct(pnItem.FK_ICProductID, item);
                DataRow rowOp = BOSApp.GetObjectFromCatche("MMOperations", "MMOperationID", pnItem.FK_MMOperationID);
                int account = 0;
                if (rowOp != null)
                {
                    objOperationsInfo = (MMOperationsInfo)objOperationsController.GetObjectFromDataRow(rowOp);
                    if (objOperationsInfo != null)
                    {
                        account = objOperationsInfo.FK_ACAccountID;
                        if (pnItem.MMOperationDetailPlanCapacityItemProductSerial != null)
                            objReceiptsInfo.ICReceiptPackNo = GetSerialNo(pnItem.MMOperationDetailPlanCapacityItemProductSerial, objOperationsInfo.MMOperationAcronym);
                        if (!string.IsNullOrEmpty(pnItem.MMOperationDetailPlanCapacityItemProductSerial))
                        {
                            item.ICReceiptItemProductSerialNo = GetSerialNo(pnItem.MMOperationDetailPlanCapacityItemProductSerial, objOperationsInfo.MMOperationAcronym);
                            item.ICReceiptItemLotNo = GetSerialNo(pnItem.MMOperationDetailPlanCapacityItemProductSerial, objOperationsInfo.MMOperationAcronym);
                        }
                    }
                }
                int stockID = ChangeStockReceiptByOperationDetailPlan(pnItem.FK_MMOperationID, pnItem.FK_MMLineID, pnItem.FK_MMWorkShopID, ListInfo);
                if (stockID > 0)
                {
                    item.FK_ICStockID = stockID;
                    objReceiptsInfo.FK_ICStockID = stockID;
                }
                objProductsInfo = BOSApp.GetProductFromCurrentProductList(pnItem.FK_ICProductID);
                item.FK_ACAccountID = account > 0 ? account : (objProductsInfo != null ? objProductsInfo.FK_ACAccountID : 0);
                item.ICReceiptItemQtyreceived = pnItem.MMOperationDetailPlanCapacityItemCompletedProductQty;
                item.ICReceiptItemProductQty = pnItem.MMOperationDetailPlanCapacityItemProductQty - pnItem.MMOperationDetailPlanCapacityItemCapacityProductQty;
                item.ICReceiptItemBPProductionNormItemQty = pnItem.MMBatchProductProductionNormItemQuantity;
                entity.SetProductPriceByProductUnitPrice(item);
                item.FK_ICProductForBatchID = pnItem.FK_ICProductForBatchID;
                item.FK_ARSaleOrderID = pnItem.FK_ARSaleOrderID;
                item.FK_MMWorkShopID = pnItem.FK_MMWorkShopID;
                item.FK_MMLineID = pnItem.FK_MMLineID;
                item.FK_ICMeasureUnitID = pnItem.FK_ICMeasureUnitID;
                item.FK_MMBatchProductProductionNormItemID = pnItem.FK_MMBatchProductProductionNormItemID;
                item.ICReceiptItemProductLength = pnItem.MMOperationDetailPlanCapacityItemProductLength;
                item.ICReceiptItemProductWidth = pnItem.MMOperationDetailPlanCapacityItemProductWidth;
                item.ICReceiptItemProductHeight = pnItem.MMOperationDetailPlanCapacityItemProductHeight;
                item.ICReceiptItemBlockPerOne = pnItem.MMOperationDetailPlanCapacityItemBlockPerOne;
                item.FK_MMBatchProductItemID = pnItem.FK_MMBatchProductItemID;
                item.FK_MMBatchProductID = pnItem.FK_MMBatchProductID;
                item.FK_MMOperationDetailPlanCapacityItemID = pnItem.MMOperationDetailPlanCapacityItemID;
                item.FK_MMOperationID = pnItem.FK_MMOperationID;
                item.ICReceiptItemWoodQty = item.ICReceiptItemProductQty * pnItem.MMOperationDetailPlanCapacityItemBlockPerOne;
                entity.ReceiptItemsList.Add(item);
                objProductsInfo.Dispose();
                objOperationsInfo.Dispose();
            }
            entity.ReceiptItemsList.GridControl.RefreshDataSource();
            UpdateTotalCost();
            entity.UpdateMainObjectBindingSource();
        }
        public override void CallFunctionFromAnotherProject(IList selected, string ProductType)
        {
            base.CallFunctionFromAnotherProject(selected, ProductType);
            ActionNewFromCapacity((List<MMOperationDetailPlanCapacityItemsInfo>)selected, ProductType);
        }
        public List<MMBatchProductsInfo> GetBatchProductLookupEditDataSource()
        {
            List<MMBatchProductsInfo> objBatchProductsList = new List<MMBatchProductsInfo>();
            MMBatchProductsController objBatchProductsController = new MMBatchProductsController();
            objBatchProductsList = objBatchProductsController.GetBatchProductForSemiProductReceiptShipment();
            return objBatchProductsList;
        }

        public void CalculateItemBlock(ICReceiptItemsInfo item)
        {
            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objSubProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);
            MMBatchProductProductionNormItemsController objBatchProductProductionNormItemsController = new MMBatchProductProductionNormItemsController();
            if (objSubProductsInfo != null)
            {
                item.FK_ICProductAttributeWoodTypeID = objSubProductsInfo.FK_ICProductAttributeWoodTypeID;
                if (item.ICReceiptItemBlockPerOne != 0)
                    item.ICReceiptItemWoodQty = item.ICReceiptItemProductQty * item.ICReceiptItemBlockPerOne;
                else
                {
                    if (item.FK_MMBatchProductItemID > 0)
                    {
                        MMBatchProductProductionNormItemsInfo objBatchProductProductionNormItemsInfo = objBatchProductProductionNormItemsController.GetItemByBatchProductItemIDAndProductForBatchAndProductID(item.FK_MMBatchProductItemID, item.FK_ICProductForBatchID, item.FK_ICProductID);
                        if (objBatchProductProductionNormItemsInfo != null)
                        {
                            item.ICReceiptItemBlockPerOne = objBatchProductProductionNormItemsInfo.MMBatchProductProductionNormItemBlockPerOne;
                            //item.ICReceiptItemWoodQty = Math.Round(objBatchProductProductionNormItemsInfo.MMBatchProductProductionNormItemBlockPerOne * item.ICReceiptItemProductQty, 4, MidpointRounding.AwayFromZero);
                            item.ICReceiptItemWoodQty = objBatchProductProductionNormItemsInfo.MMBatchProductProductionNormItemBlockPerOne * item.ICReceiptItemProductQty;
                        }
                        else
                        {
                            decimal blockPerOne = ((item.ICReceiptItemProductWidth * item.ICReceiptItemProductLength * item.ICReceiptItemProductHeight) / 1000000000);
                            item.ICReceiptItemWoodQty = item.ICReceiptItemProductQty * blockPerOne;
                        }
                    }
                }

            }
        }

        public void ShowShipmentList()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
                if (!string.IsNullOrEmpty(objReceiptsInfo.ICReceiptTypeCombo))
                {
                    ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
                    MMBatchProductItemsController batchProductItemsController = new MMBatchProductItemsController();
                    ICProductsInfo objProductsInfo = new ICProductsInfo();
                    ICProductsController objProductsController = new ICProductsController();

                    #region Acronym
                    MMOperationsInfo objOperationsInfo = new MMOperationsInfo();
                    MMOperationsController objOperationsController = new MMOperationsController();
                    MMLineOperationsController objLineOperationsController = new MMLineOperationsController();
                    List<MMLineOperationsInfo> ListInfo = objLineOperationsController.GetLineOperationInfoByOperationIDAndLine(null, null);
                    #endregion

                    if (objReceiptsInfo.ICReceiptCreateFrom == CreateFrom.BatchProduct.ToString() && objOperationsInfo != null)
                    {
                        if (objReceiptsInfo.ICReceiptTypeCombo == ReceiptType.SemiProductReceipt.ToString())
                        {
                            MMBatchProductProductionNormItemsController objBPPNsController = new MMBatchProductProductionNormItemsController();
                            List<MMBatchProductProductionNormItemsInfo> pnList = new List<MMBatchProductProductionNormItemsInfo>();
                            if (objReceiptsInfo.ICReceiptSemiProductType != ReceiptSemiProductType.BatchProduct.ToString())// loại nhập định mức
                                pnList = objBPPNsController.GetAllItemByProductTypeAndBatchProductID(null, objReceiptsInfo.FK_MMBatchProductID, objReceiptsInfo.FK_MMOperationID);
                            else
                                pnList = objBPPNsController.GetReceiptOverBomByProductTypeAndBatchProductID(null, objReceiptsInfo.FK_MMBatchProductID, objReceiptsInfo.FK_MMOperationID);

                            pnList = pnList.Where(t => t.FK_ICProductForBatchID == objReceiptsInfo.FK_ICProductID || objReceiptsInfo.FK_ICProductID == 0).ToList();
                            guiFind<MMBatchProductProductionNormItemsInfo> guiSemiProductFind
                                = new guiFind<MMBatchProductProductionNormItemsInfo>(TableName.MMBatchProductProductionNormItemsTableName,
                                                                                     pnList,
                                                                                     this,
                                                                                     true,
                                                                                     true,
                                                                                     null
                                                                                     );
                            if (guiSemiProductFind.ShowDialog() == DialogResult.OK)
                            {
                                foreach (MMBatchProductProductionNormItemsInfo pnItem in guiSemiProductFind.SelectedObjects)
                                {
                                    ICReceiptItemsInfo item = new ICReceiptItemsInfo();
                                    DataRow row = BOSApp.GetObjectFromCatche("MMOperations", "MMOperationID", pnItem.FK_MMOperationID);
                                    if (row != null)
                                        objOperationsInfo = (MMOperationsInfo)objOperationsController.GetObjectFromDataRow(row);
                                    else
                                        objOperationsInfo = (MMOperationsInfo)objOperationsController.GetObjectByID(pnItem.FK_MMOperationID);

                                    if (pnItem.MMBatchProductItemProductSerial != null && objOperationsInfo != null)
                                        objReceiptsInfo.ICReceiptPackNo = GetSerialNo(pnItem.MMBatchProductItemProductSerial, objOperationsInfo.MMOperationAcronym);
                                    int stockID = ChangeStockReceiptByOperationDetailPlan(pnItem.FK_MMOperationID, pnItem.FK_MMLineID, pnItem.FK_MMWorkShopID, ListInfo);
                                    if (stockID > 0)// kho mặc định theo cấu hình
                                    {
                                        item.FK_ICStockID = stockID;
                                        objReceiptsInfo.FK_ICStockID = stockID;
                                    }
                                    entity.SetValuesAfterValidateProduct(pnItem.FK_ICProductID, item);
                                    objProductsInfo = BOSApp.GetProductFromCurrentProductList(pnItem.FK_ICProductID);
                                    item.FK_ACAccountID = objOperationsInfo != null ? objOperationsInfo.FK_ACAccountID : (objProductsInfo != null ? objProductsInfo.FK_ACAccountID : 0);
                                    item.ICReceiptItemQtyreceived = pnItem.MMBatchProductProductionNormItemRemainQty;
                                    item.ICReceiptItemProductQty = pnItem.MMBatchProductProductionNormItemQuantity - item.ICReceiptItemQtyreceived;
                                    item.ICReceiptItemBPProductionNormItemQty = pnItem.MMBatchProductProductionNormItemQuantity;
                                    entity.SetProductPriceByProductUnitPrice(item);
                                    item.FK_MMBatchProductID = pnItem.FK_MMBatchProductID;
                                    item.FK_MMOperationID = pnItem.FK_MMOperationID;
                                    item.SLDM = pnItem.MMBatchProductProductionNormItemQuantityPerOne;
                                    item.FK_MMBatchProductProductionNormItemID = pnItem.MMBatchProductProductionNormItemID;
                                    item.ICReceiptItemProductLength = pnItem.MMBatchProductProductionNormItemProductLength;
                                    item.ICReceiptItemProductWidth = pnItem.MMBatchProductProductionNormItemProductWidth;
                                    item.ICReceiptItemProductHeight = pnItem.MMBatchProductProductionNormItemProductHeight;
                                    item.ICReceiptItemBlockPerOne = pnItem.MMBatchProductProductionNormItemBlockPerOne;
                                    item.ICReceiptItemWoodQty = item.ICReceiptItemProductQty * pnItem.MMBatchProductProductionNormItemBlockPerOne; // m3 phục vụ TGT
                                    item.FK_ICMeasureUnitID = pnItem.FK_ICMeasureUnitID;
                                    item.FK_ICProductForBatchID = pnItem.FK_ICProductForBatchID;
                                    item.FK_MMWorkShopID = pnItem.FK_MMWorkShopID;
                                    item.FK_MMBatchProductItemID = pnItem.FK_MMBatchProductItemID;
                                    item.ICReceiptItemProductSupplierNo = pnItem.MMBatchProductProductionNormItemProductSupplierNumber;
                                    item.ICProductName2 = pnItem.ICProductName2;
                                    item.ICReceiptItemSOName = pnItem.MMBatchProductItemSOName;
                                    if (!string.IsNullOrEmpty(pnItem.MMBatchProductItemProductSerial) && objOperationsInfo != null)
                                    {
                                        item.ICReceiptItemProductSerialNo = GetSerialNo(pnItem.MMBatchProductItemProductSerial, objOperationsInfo.MMOperationAcronym);
                                        item.ICReceiptItemLotNo = GetSerialNo(pnItem.MMBatchProductItemProductSerial, objOperationsInfo.MMOperationAcronym);
                                    }

                                    // Defual main info
                                    objReceiptsInfo.FK_MMBatchProductItemID = pnItem.FK_MMBatchProductItemID;
                                    objReceiptsInfo.FK_ARCustomerID = pnItem.FK_ARCustomerID;
                                    objReceiptsInfo.FK_MMWorkShopID = pnItem.FK_MMWorkShopID;

                                    entity.ReceiptItemsList.Add(item);
                                }
                                objReceiptsInfo.ICReceiptSOName = string.Join(", ", guiSemiProductFind.SelectedObjects.Where(o => !string.IsNullOrWhiteSpace(o.MMBatchProductItemSOName)).Select(o => o.MMBatchProductItemSOName).Distinct().ToArray());
                            }
                        }
                        entity.ReceiptItemsList.GridControl.RefreshDataSource();
                        UpdateTotalCost();
                    }
                }
            }
        }

        public string GetSerialNo(string batchProductSerialNo, string operationPrefix)
        {
            operationPrefix = string.IsNullOrWhiteSpace(operationPrefix) ? string.Empty : operationPrefix;
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            string serialNo = string.Empty;
            DateTime currentDate = GetServerDate();
            /*
             serialNo = Mã lô SX / năm (yyyy) tháng (MM) / công đoạn
             */
            if (DateTime.MinValue.Date != objReceiptsInfo.ICReceiptDate.Date || DateTime.MaxValue.Date != objReceiptsInfo.ICReceiptDate.Date)
                currentDate = objReceiptsInfo.ICReceiptDate;
            serialNo = batchProductSerialNo + "/" + currentDate.ToString("yyyyMM") + operationPrefix;

            return serialNo;
        }
        public override void Invalidate(int iObjectID)
        {
            isNormalNew = false;
            base.Invalidate(iObjectID);
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo mainObject = (ICReceiptsInfo)entity.MainObject;
            mainObject.ICReceiptSOName = string.Join(", ", entity.ReceiptItemsList.Where(o => !string.IsNullOrWhiteSpace(o.ICReceiptItemSOName)).Select(o => o.ICReceiptItemSOName).Distinct().ToArray());
            entity.UpdateMainObjectBindingSource();
            ChangeProductAddLookupEditDataSource();
        }
        #region SearchObject
        public void GetCurrentModuleDataViewPermission()
        {
            CurrentModuleDataViewPermissionList = BOSApp.CurrentADDataViewPermissionList.Where(i => i.STModuleName == Name && i.ADDataViewPermissionType == ADDataViewPermissionType.Module).ToList();

            List<int> branchIDList = new List<int>();
            foreach (ADDataViewPermissionsInfo dataViewPermissionsInfo in CurrentModuleDataViewPermissionList)
            {
                branchIDList.Add(dataViewPermissionsInfo.FK_BRBranchID);
            }

            if (branchIDList.Count == 0)
            {
                BranchList = new List<BRBranchsInfo>();
            }
            else
            {
                BRBranchsController objBranchsController = new BRBranchsController();
                List<BRBranchsInfo> branchList = objBranchsController.GetAllBranches();

                BranchList = branchList.Where(i => branchIDList.IndexOf(i.BRBranchID) > -1).ToList();
            }
        }
        protected override DataSet GetSearchData(ref string searchQuery)
        {
            ICReceiptsController objReceiptsController = new ICReceiptsController();
            ACObjectsController objObjectsController = new ACObjectsController();
            ICReceiptsInfo searchObject = (ICReceiptsInfo)CurrentModuleEntity.SearchObject;
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByAccessKey(searchObject.ACObjectAccessKey);
            DataSet ds;
            if (searchObject.FK_BRBranchID == 0)
            {
                if (BranchList.Count == 0)
                {
                    ds = objReceiptsController.GetDataSetByID(-1);
                }
                else
                {
                    ds = objReceiptsController.GetSemiProductReceiptListOtherAndReturnByListOfBranchID(
                                                           searchObject.ICReceiptNo,
                                                           objObjectsInfo.ACObjectID,
                                                           objObjectsInfo.ACObjectType,
                                                           searchObject.FK_ICStockID,
                                                           searchObject.FK_HREmployeeID,

                                                           searchObject.ReceiptDateFrom,
                                                           searchObject.ReceiptDateTo,
                                                           searchObject.FK_BRBranchID,
                                                           BranchList);
                }
            }
            else
            {
                ds = objReceiptsController.GetSemiProductReceiptListOtherAndReturnByBranchID(
                                                           searchObject.ICReceiptNo,
                                                           objObjectsInfo.ACObjectID,
                                                           objObjectsInfo.ACObjectType,
                                                           searchObject.FK_ICStockID,
                                                           searchObject.FK_HREmployeeID,

                                                           searchObject.ReceiptDateFrom,
                                                           searchObject.ReceiptDateTo,
                                                           searchObject.FK_BRBranchID);
            }
            return ds;
        }

        public override void ResetSearchObject()
        {
            base.ResetSearchObject();

            ICReceiptsInfo searchObject = (ICReceiptsInfo)CurrentModuleEntity.SearchObject;
            searchObject.ICReceiptTypeCombo = ReceiptType.SemiProductReceipt.ToString();
        }
        #endregion
        public override void InvalidateToolbar()
        {
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            ParentScreen.SetEnableOfToolbarButton("Confirmed", false);
            ParentScreen.SetEnableOfToolbarButton("UnConfirmed", false);
            ParentScreen.SetEnableOfToolbarButton("CancelComplete", false);
            ParentScreen.SetEnableOfToolbarButton("ImportReceiptItem", false);
            if (Toolbar.IsNullOrNoneAction())
            {
                ParentScreen.SetEnableOfToolbarButton("ImportReceiptItem", true);
            }
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, false);
            if (objReceiptsInfo.ICReceiptID > 0)
            {
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, true);
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, true);
                ParentScreen.SetEnableOfToolbarButton("Confirmed", true);
                ParentScreen.SetEnableOfToolbarButton("UnConfirmed", false);
                ParentScreen.SetEnableOfToolbarButton(ToolbarButtons.PostedTransactions, false);
                ParentScreen.SetEnableOfToolbarButton(ToolbarButtons.UnPostedTransactions, false);
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, true);
                if (objReceiptsInfo.ICReceiptStatus == ReceiptStatus.Complete.ToString())
                {
                    ParentScreen.SetEnableOfToolbarButton("CancelComplete", true);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, false);
                    ParentScreen.SetEnableOfToolbarButton("Confirmed", false);
                    ParentScreen.SetEnableOfToolbarButton("UnConfirmed", false);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, false);
                    ParentScreen.SetEnableOfToolbarButton(ToolbarButtons.PostedTransactions,
                        objReceiptsInfo.ICReceiptPostedStatus != PostedTransactionStatus.Posted.ToString());
                    ParentScreen.SetEnableOfToolbarButton(ToolbarButtons.UnPostedTransactions,
                        objReceiptsInfo.ICReceiptPostedStatus == PostedTransactionStatus.Posted.ToString());
                }
                else if (objReceiptsInfo.ICReceiptStatus == ReceiptStatus.Confirmed.ToString())
                {
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, true);
                    ParentScreen.SetEnableOfToolbarButton("Confirmed", false);
                    ParentScreen.SetEnableOfToolbarButton("UnConfirmed", true);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, true);
                }
            }

            base.InvalidateToolbar();
        }

        public void AddItemToReceiptItemsList()
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptItemsInfo item = (ICReceiptItemsInfo)entity.ModuleObjects[TableName.ICReceiptItemsTableName];
            if (item.FK_ICProductID > 0)
            {
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
                ICProductsInfo objProductsInfo = new ICProductsInfo();
                ICProductsController objProductsController = new ICProductsController();
                objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);

                if (objReceiptsInfo != null)
                {
                    item.FK_MMBatchProductID = objReceiptsInfo.FK_MMBatchProductID;
                    item.FK_MMOperationID = objReceiptsInfo.FK_MMOperationID;

                    if (objProductsInfo != null)
                    {
                        item.FK_ACAccountID = objProductsInfo.FK_ACAccountID;
                        item.ICReceiptItemProductType = objProductsInfo.ICProductType;
                    }
                }

                entity.SetValuesAfterValidateProduct(item.FK_ICProductID);
                entity.ReceiptItemsList.AddObjectToList();
                UpdateTotalCost();
            }
        }

        public bool CheckValidQuantity(decimal newQty)
        {
            bool isValid = true;

            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            ICReceiptItemsInfo item = entity.ReceiptItemsList[entity.ReceiptItemsList.CurrentIndex];
            if (objReceiptsInfo.ICReceiptSemiProductType == ReceiptSemiProductType.BatchProduct.ToString()) return isValid; // loại nhập ngoài định mức
            decimal totalReceipt = 0;
            if (item != null)
            {
                decimal receiptedQty = 0;
                ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
                if (item.FK_MMBatchProductProductionNormItemID > 0)
                {
                    receiptedQty = objReceiptItemsController.GetReceiptItemRemainQtyByNormItemID(item.FK_ICProductID, objReceiptsInfo.FK_MMBatchProductID, objReceiptsInfo.FK_MMOperationID, item.FK_MMBatchProductProductionNormItemID, item.Id);
                }
                else
                    receiptedQty = objReceiptItemsController.GetReceiptQtyForCheckingSemiProductReceipt(item.FK_ICProductID, objReceiptsInfo.FK_MMBatchProductID, objReceiptsInfo.FK_MMOperationID, item.FK_MMBatchProductItemID);

                MMOperationsInfo objOperationsInfo = new MMOperationsInfo();
                MMOperationsController objOperationsController = new MMOperationsController();
                string CongDoan = string.Empty;
                objOperationsInfo = (MMOperationsInfo)objOperationsController.GetObjectByID(item.FK_MMOperationID);
                if (objOperationsInfo != null)
                    CongDoan = objOperationsInfo.MMOperationNo;
                if (CongDoan == OperationNo.Thanhpham.ToString())
                {
                    if (newQty > item.ICReceiptItemBPProductionNormItemQty)
                    {
                        isValid = false;
                    }
                }
                else
                {
                    if (newQty + receiptedQty > item.ICReceiptItemBPProductionNormItemQty)
                    {
                        totalReceipt = newQty + receiptedQty;
                        isValid = false;
                    }
                }
                if (!isValid)
                {
                    MessageBox.Show("Tồng SL đã nhập: " + totalReceipt + " lớn hơn số lượng định mức:" + item.ICReceiptItemBPProductionNormItemQty, "#message", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            return isValid;
        }

        /// <summary>
        /// Change an item from the item list
        /// </summary>
        public void ChangeItemFromReceiptItemsList()
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptItemsInfo objReceiptItemsInfo = entity.ReceiptItemsList[entity.ReceiptItemsList.CurrentIndex];
            if (objReceiptItemsInfo != null)
            {
                CalculateItemBlock(objReceiptItemsInfo);
            }
            entity.SetProductCostByProductUnitCost();
            // entity.ReceiptItemsList.ChangeObjectFromList();
            UpdateTotalCost();
            entity.ReceiptItemsList.GridControl.RefreshDataSource();
        }

        /// <summary>
        /// Called when the user change the serie no of an item
        /// </summary>
        /// <param name="item">Changed item</param>
        public void ChangeItemSerieNo(ICReceiptItemsInfo item)
        {
            InvalidateItemSerieNo(item, TableName.ICReceiptItemsTableName, "ICReceiptItemProductSerialNo");
            if (BOSApp.CurrentCompanyInfo.CSCostMethod == AccCostMethod.SpecificIdentification.ToString())
            {
                item.ICReceiptItemProductUnitCost = AccountHelper.GetInventoryCost(item.FK_ICProductID, item.FK_ICProductSerieID);
                SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
                entity.SetProductCostByProductUnitCost(item);
                entity.ReceiptItemsList.GridControl.RefreshDataSource();
                UpdateTotalCost();
            }
        }

        /// <summary>
        /// Delete an item from the item list
        /// </summary>
        public void DeleteItemFromReceiptItemsList()
        {
            //if (!Toolbar.IsNullOrNoneAction())
            {
                SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
                entity.ReceiptItemsList.RemoveSelectedRowObjectFromList();
                UpdateTotalCost();
            }
        }

        /// <summary>
        /// Update the total cost of the receipt
        /// </summary>
        public void UpdateTotalCost()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
                entity.UpdateTotalCost();
                UpdateInventoryCost();
                //UpdateDocumentEntries();
            }
        }

        /// <summary>
        /// Update the inventory cost of all items
        /// </summary>
        private void UpdateInventoryCost()
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            decimal extCost = entity.ReceiptItemsList.Sum(i => i.ICReceiptItemExtCost);
            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
            {
                item.ICReceiptItemInventoryCost = item.ICReceiptItemProductUnitCost;
            }
        }
        public bool CheckReceiptDate()
        {
            bool isValid = true;
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;

            List<int> shipmentIDList = new List<int>();


            ICShipmentsController shipmentController = new ICShipmentsController();
            ICShipmentsInfo shipment;
            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
            {
                if (!shipmentIDList.Contains(item.FK_ICShipmentID))
                {
                    shipment = (ICShipmentsInfo)shipmentController.GetObjectByID(item.FK_ICShipmentID);
                    if (shipment != null)
                    {
                        if (shipment.ICShipmentDate.Month != objReceiptsInfo.ICReceiptDate.Month)
                        {
                            isValid = false;
                            MessageBox.Show("Ngày chứng từ của phiếu nhập kho không được khác tháng với phiếu xuất!"
                                            + Environment.NewLine + shipment.ICShipmentNo + " - " + shipment.ICShipmentDate.ToString("dd/MM/yyyy")
                                            , "Thông báo"
                                            , MessageBoxButtons.OK
                                            , MessageBoxIcon.Information);
                            break;
                        }
                    }
                }
            }

            return isValid;
        }
        public override int ActionSave()
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            MMOperationsInfo objOperationsInfo = new MMOperationsInfo();
            MMOperationsController objOperationsController = new MMOperationsController();
            ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
            ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();

            if (objReceiptsInfo.ICReceiptSemiProductType != ReceiptSemiProductType.BatchProduct.ToString())
            {
                if (!CheckProductionNormQty())
                {
                    return 0;
                }
                #region Validate capacity
                if (!CheckCapacityQty(null))
                {
                    return 0;
                }
                #endregion
                if (!IsValidStock())
                {
                    return 0;
                }
                #region Validate Package
                if (!CheckPackQty(null))
                    return 0;

                #endregion
                int countOpertion = entity.ReceiptItemsList.Where(r => r.FK_MMOperationID > 0).Select(o => o.FK_MMOperationID).Count();
                if (objReceiptsInfo.FK_MMOperationID == 0 && countOpertion == 0)
                {
                    MessageBox.Show("Vui lòng chọn công đoạn.", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return 0;
                }
            }
            if (entity.ReceiptItemsList.Exists(r => r.FK_MMOperationID != objReceiptsInfo.FK_MMOperationID))
            {
                MessageBox.Show("Công đoạn ở thông tin chung và danh sách sản phẩm không trùng nhau. Vui lòng kiểm tra lại!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return 0;
            }
            entity.ReceiptItemsList.ForEach(r =>
            {
                r.IsError = false;
                r.IsError1 = false;
                r.IsError2 = false;
            });

            int result = base.ActionSave();
            entity.InvalidateItemComponents();
            return result;

        }

        public bool IsValidStock()
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            string pniRef = string.Join(",", entity.ReceiptItemsList.Where(o => o.FK_MMBatchProductProductionNormItemID > 0)
                                                                    .Select(o => o.FK_MMBatchProductProductionNormItemID).ToArray());
            if (string.IsNullOrWhiteSpace(pniRef))
                return true;

            MMBatchProductProductionNormItemsController pnisController = new MMBatchProductProductionNormItemsController();
            List<MMBatchProductProductionNormItemsInfo> pniList = pnisController.GetEndProcessByPniRef(pniRef);
            MMBatchProductProductionNormItemsInfo itemChecksInfo = new MMBatchProductProductionNormItemsInfo();
            ICStocksController objStocksController = new ICStocksController();
            List<ICStocksInfo> stocksList = objStocksController.GetAllStocks();
            ICStocksInfo currentStock = new ICStocksInfo();
            string messageError = string.Empty;
            entity.ReceiptItemsList.ForEach(item =>
            {
                itemChecksInfo = pniList.Where(o => o.MMBatchProductProductionNormItemID == item.FK_MMBatchProductProductionNormItemID).FirstOrDefault();
                if (itemChecksInfo == null)
                    return;

                currentStock = stocksList.Where(o => o.ICStockID == item.FK_ICStockID).FirstOrDefault();
                if (currentStock == null)
                {
                    messageError += string.Format("Sản phẩm[{0}] chưa chọn kho.", item.ICReceiptItemProductName);
                    messageError += Environment.NewLine;
                    return;
                }
                else if (currentStock.ICStockIsSemiProduct
                && itemChecksInfo.FK_MMOperationID == item.FK_MMOperationID //CD cuối
                && itemChecksInfo.IsProduct
                )
                {
                    messageError += string.Format("Sản phẩm[{0}] không thể nhập vào kho bán thành phẩm.", item.ICReceiptItemProductName);
                    messageError += Environment.NewLine;
                }
                else if (!currentStock.ICStockIsSemiProduct && (itemChecksInfo.FK_MMOperationID != item.FK_MMOperationID || !itemChecksInfo.IsProduct))
                {
                    messageError += string.Format("Sản phẩm[{0}] không thể nhập vào kho thành phẩm.", item.ICReceiptItemProductName);
                    messageError += Environment.NewLine;
                }
            });
            if (string.IsNullOrWhiteSpace(messageError))
                return true;

            messageError += "Vui lòng kiểm tra lại!";
            MessageBox.Show(messageError, BaseLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            return false;
        }

        public bool CheckCapacityQty(ICReceiptItemsInfo checkObj)
        {
            bool result = true;
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            if (objReceiptsInfo.ICReceiptSemiProductType == ReceiptSemiProductType.BatchProduct.ToString()) return result; // loại nhập ngoài định mức
            string listCapacityID = string.Join(",", entity.ReceiptItemsList.Where(r => r.FK_MMOperationDetailPlanCapacityItemID > 0).Select(ri => ri.FK_MMOperationDetailPlanCapacityItemID.ToString()).Distinct().ToArray());
            if (checkObj != null) listCapacityID = checkObj.FK_MMOperationDetailPlanCapacityItemID > 0 ? checkObj.FK_MMOperationDetailPlanCapacityItemID.ToString() : string.Empty;
            if (!string.IsNullOrEmpty(listCapacityID))
            {

                List<ICReceiptItemsInfo> receiptList = new List<ICReceiptItemsInfo>();
                if (objReceiptsInfo.ICReceiptID > 0)
                    receiptList = (new ICReceiptItemsController()).GetListItemByReceiptID(objReceiptsInfo.ICReceiptID);
                List<MMOperationDetailPlanCapacityItemsInfo> listFound = (new MMOperationDetailPlanCapacityItemsController()).GetListDataByListItemID(listCapacityID);
                if (listFound != null)
                {
                    foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                    {
                        if (checkObj == null || checkObj.FK_MMOperationDetailPlanCapacityItemID == item.FK_MMOperationDetailPlanCapacityItemID)
                        {
                            MMOperationDetailPlanCapacityItemsInfo foundItem = listFound.Where(o => item.FK_MMOperationDetailPlanCapacityItemID == o.MMOperationDetailPlanCapacityItemID).FirstOrDefault();
                            if (foundItem != null)
                            {
                                decimal remain = foundItem.MMOperationDetailPlanCapacityItemRemainProductQty;
                                if (item.Id > 0)
                                {
                                    ICReceiptItemsInfo itemOld = receiptList.Where(o => o.Id == item.Id).FirstOrDefault();
                                    remain = foundItem.MMOperationDetailPlanCapacityItemRemainProductQty + (itemOld != null ? itemOld.ICReceiptItemProductQty : 0);
                                }
                                if (item.ICReceiptItemProductQty > remain)
                                {
                                    item.IsError = true;
                                    result = false;
                                }
                            }
                        }
                    }
                }
                if (!result)
                {
                    BOSApp.ShowMessage("Số lượng không thể vượt sản lượng đã nhập và còn lại chưa nhập kho!");
                }
            }
            return result;
        }
        public bool CheckMaterialShipment()
        {
            bool result = true;
            //return result;
            // Chờ confirm giải pháp
            #region Kiểm tra vật tư/ Nguyen liệu theo BTP (tương tự chức năng thay đổi BOM)
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            List<ICReceiptItemsInfo> receiptList = (new ICReceiptItemsController()).GetShipmentMaterialForOperationReceipt(objReceiptsInfo.ICReceiptID);
            entity.ReceiptItemsList.ForEach(r =>
            {
                List<ICReceiptItemsInfo> exitError = receiptList.Count() > 0 ? receiptList.Where(o => o.Id == r.Id).ToList() : null;
                if (exitError == null || exitError.Count() == 0)
                {
                    r.IsError2 = true;
                    result = false;
                }
            });
            if (!result)
                BOSApp.ShowMessage("Bạn chưa xuất vật tư cho LSX đang nhập.");
            return result;
            #endregion
        }
        public override bool ActionComplete()
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = new ICProductsInfo();

            MMOperationsController objOperationsController = new MMOperationsController();
            MMOperationsInfo objOperationsInfo = new MMOperationsInfo();
            objOperationsInfo = (MMOperationsInfo)objOperationsController.GetObjectByID(objReceiptsInfo.FK_MMOperationID);
            if (!CheckProductionNormQty())
            {
                return false;
            }
            //if (!CheckMaterialShipment())
            //    return false;
            #region Validate capacity
            if (!CheckCapacityQty(null))
            {
                return false;
            }
            #endregion
            if (!IsValidStock())
            {
                return false;
            }
            #region Validate Package
            if (!CheckPackQty(null))
                return false;
            #endregion
            #region Check Sync
            if (!SyncReceiptItem())
            {
                return false;
            }
            #endregion
            foreach (ICReceiptItemsInfo objReceiptItemsInfo in entity.ReceiptItemsList)
            {
                objReceiptItemsInfo.IsError = false;
                objReceiptItemsInfo.IsError1 = false;
                objReceiptItemsInfo.IsError2 = false;
                objProductsInfo = BOSApp.GetProductFromCurrentProductList(objReceiptItemsInfo.FK_ICProductID);
                ICInventoryStocksController objInventoryStocksController = new ICInventoryStocksController();
                if (objProductsInfo.ICProductType != ProductType.Service.ToString() && !objProductsInfo.IsAsset)
                {
                    if (string.IsNullOrEmpty(objReceiptItemsInfo.ICReceiptItemProductSerialNo))
                    {
                        MessageBox.Show(string.Format(ReceiptLocalizedResources.ItemSerieNoIsRequiredMessage, objReceiptItemsInfo.ICReceiptItemProductDesc), CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return false;
                    }
                    if (objOperationsInfo != null)
                    {
                        if (objOperationsInfo.MMOperationNo == OperationNo.Thanhpham.ToString())
                        {
                            if (string.IsNullOrEmpty(objReceiptItemsInfo.ICReceiptItemProductSerialNo) || objReceiptItemsInfo.FK_ICProductSerieID == 0)
                            {
                                MessageBox.Show(string.Format(ReceiptLocalizedResources.ItemSerieNoIsRequiredMessage, objReceiptItemsInfo.ICReceiptItemProductDesc), CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return false;
                            }
                        }
                    }
                    //Check unitcost receiptItem and InventoryStock, Start
                    /*Kiểm tra đơn giá nhập và đơn giá tồn kho*/
                    decimal unitcost = objInventoryStocksController.GetInventoryStockUnitCost(objReceiptItemsInfo.FK_ICProductID, objReceiptItemsInfo.ICReceiptItemProductSerialNo);
                    if (unitcost >= 0)//unitCost < 0 là chưa có đơn gía tồn kho
                    {
                        if (Math.Round(unitcost, 0) != objReceiptItemsInfo.ICReceiptItemProductUnitCost)
                        {
                            MessageBox.Show(string.Format(BatchReceiptDryLumberLocalizedResources.UnitCostInventoryStock, objReceiptItemsInfo.ICReceiptItemProductName), CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return false;
                        }
                    }

                }
            }
            entity.ReceiptItemsList.EndCurrentEdit();
            UpdateTotalCost();
            //Update Product Package
            if (entity.ReceiptPackageItemDetailShowList.GridControl != null)
                entity.ReceiptPackageItemDetailShowList.GridControl.RefreshDataSource();

            string packageNumber = "";
            entity.ReceiptPackageItemList.ForEach(o =>
            {
                o.ICReceiptPackageItemProductSerieNo = GetProductSerieNo(o);
                o.ICReceiptPackageItemBarCode = o.ICReceiptPackageItemNo + "-" + o.ICReceiptPackageItemProductSerieNo;
            });
            if (entity.ReceiptPackageItemList.GridControl != null)
                entity.ReceiptPackageItemList.GridControl.RefreshDataSource();

            entity.ReceiptPackageItemList.SaveItemObjects();
            //End Update Product Package
            List<string> PackList = entity.ReceiptItemsList.Select(o => o.ICReceiptItemLotNo).Distinct().ToList();
            if (PackList != null && PackList.Count > 0)
                (new ICProductPackagesController()).UpdateProductPackageStatus(string.Join(",", PackList.ToArray()), BOSApp.CurrentUsersInfo.ADUserName);

            ICProductSeriesController objProductSeriesController = new ICProductSeriesController();
            objProductSeriesController.GenerateProductSerieByReceiptID(objReceiptsInfo.ICReceiptID);
            return base.ActionComplete();
        }

        public string GetProductSerieNo(ICReceiptPackageItemsInfo objReceiptPackageItemsInfo)
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICProductSeriesController objProductSeriesController = new ICProductSeriesController();
            ICReceiptItemsInfo objReceiptItemsInfo = entity.ReceiptItemsList.Where(o => o.FK_ICProductID == objReceiptPackageItemsInfo.FK_ICProductID).FirstOrDefault();
            string productSerieNo = objReceiptItemsInfo == null ? string.Empty : objReceiptItemsInfo.ICReceiptItemProductSerialNo;
            bool hasProductSerieID = false;
            entity.ReceiptPackageItemDetailShowList.ForEach(o =>
            {
                if (hasProductSerieID)
                    return;

                if (o.FK_ICReceiptPackageItemID == objReceiptPackageItemsInfo.ICReceiptPackageItemID)
                {
                    productSerieNo = productSerieNo;
                    hasProductSerieID = true;
                }
            });
            return productSerieNo;
        }

        /// <summary>
        /// Print a receipt
        /// </summary>
        /// <param name="receiptID">Receipt id</param>
        public static void PrintReceipt(int receiptID)
        {
            RP_ReceiptForProduct report = new RP_ReceiptForProduct();
            //report.LoadLayout(BOSCommon.Constants.Report.DevReceiptItemReportPath);
            InitReceiptReport(report, receiptID);
            guiReportPreview viewer = new guiReportPreview(report);
            viewer.Show();
        }

        /// <summary>
        /// Init receipt report for displaying
        /// </summary>
        /// <param name="report">Report</param>
        /// <param name="receiptID">Receipt id</param>
        private static void InitReceiptReport(XtraReport report, int receiptID)
        {
            BRBranchsController objBranchsController = new BRBranchsController();
            BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            if (objBranchsInfo != null)
            {
                XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchAddressLine3"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactAddressLine3;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchPhone"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactPhone;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchFax"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactFax;
                }
            }

            ICReceiptsController objReceiptsController = new ICReceiptsController();
            ICReceiptsInfo receipt = (ICReceiptsInfo)objReceiptsController.GetObjectByID(receiptID);
            List<ACDocumentEntrysInfo> entries = new List<ACDocumentEntrysInfo>();
            if (receipt != null)
            {
                ACDocumentsController objDocumentsController = new ACDocumentsController();
                ACDocumentEntrysController objDocumentEntrysController = new ACDocumentEntrysController();
                ACDocumentsInfo document = null;
                if (receipt.ICReceiptTypeCombo == ReceiptType.SemiProductReceipt.ToString())
                {
                    document = objDocumentsController.GetDocumentByTypeAndNo(AccDocumentType.NhapKhoBTP.ToString(), receipt.ICReceiptNo);
                }
                else if (receipt.ICReceiptTypeCombo == ReceiptType.PurchaseReceipt.ToString())
                {
                    if (!string.IsNullOrEmpty(receipt.ICReceiptReference))
                    {
                        document = objDocumentsController.GetDocumentByTypeAndNo(AccDocumentType.NhapKhoMuaHangHoaDon.ToString(), receipt.ICReceiptNo);
                    }
                    else
                    {
                        document = objDocumentsController.GetDocumentByTypeAndNo(AccDocumentType.NhapKhoMuaHang.ToString(), receipt.ICReceiptNo);
                    }
                }
                else if (receipt.ICReceiptTypeCombo == ReceiptType.EquipmentReceipt.ToString())
                {
                    document = objDocumentsController.GetDocumentByTypeAndNo(AccDocumentType.NhapCCDC.ToString(), receipt.ICReceiptNo);
                }
                if (document != null)
                {
                    entries = objDocumentEntrysController.GetDocumentEntryByDocumentID(document.ACDocumentID);
                }
            }
            XRLabel accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblDebitAccountNo"];
            if (accLabel != null)
            {
                string debitAccountNo = string.Empty;
                foreach (ACDocumentEntrysInfo entry in entries)
                {
                    if (!debitAccountNo.Contains(entry.ACDocumentDebitAccount))
                    {
                        debitAccountNo += string.Format(" {0},", entry.ACDocumentDebitAccount);
                    }
                }
                if (!string.IsNullOrEmpty(debitAccountNo))
                {
                    debitAccountNo = debitAccountNo.Substring(0, debitAccountNo.Length - 1);
                }
                accLabel.Text = debitAccountNo;
            }

            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblCreditAccountNo"];
            if (accLabel != null)
            {
                string creditAccountNo = string.Empty;
                foreach (ACDocumentEntrysInfo entry in entries)
                {
                    if (entry.ACDocumentCreditAccount != null)
                    {
                        if (!creditAccountNo.Contains(entry.ACDocumentCreditAccount))
                        {
                            creditAccountNo += string.Format(" {0},", entry.ACDocumentCreditAccount);
                        }
                    }
                }
                if (!string.IsNullOrEmpty(creditAccountNo))
                {
                    creditAccountNo = creditAccountNo.Substring(0, creditAccountNo.Length - 1);
                }
                accLabel.Text = creditAccountNo;
            }
            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xrLabel28"];
            if (accLabel != null)
            {
                accLabel.Text = receipt.ICReceiptDate.ToString("dd/MM/yyyy");
            }
            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xrLabel29"];
            if (accLabel != null)
            {
                accLabel.Text = receipt.ICReceiptDate.ToString("dd/MM/yyyy");
            }
            ACDocumentEntrysController objDocumentEntryController = new ACDocumentEntrysController();
            List<ACDocumentEntrysInfo> documentEntryList = objDocumentEntryController.GetListEntryForPrintSermiProduct(receiptID);

            String debitNo = String.Join(",", documentEntryList.Select(p => p.DebitAccountNo).Distinct().ToArray());
            String creditNo = String.Join(",", documentEntryList.Select(p => p.CreditAccountNo).Distinct().ToArray());
            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblDebitAccountNo"];
            if (accLabel != null && String.IsNullOrEmpty(accLabel.Text))
            {
                accLabel.Text = debitNo;
            }
            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblCreditAccountNo"];
            if (accLabel != null && String.IsNullOrEmpty(accLabel.Text))
            {
                accLabel.Text = creditNo;
            }

            ADReportsController objReportsController = new ADReportsController();
            List<ICReceiptItemsInfo> receiptItemList = objReportsController.GetListReceiptItemByReceiptID(receiptID);
            decimal sumProductQty = 0;
            receiptItemList.ForEach(p =>
            {
                sumProductQty += p.ICShipmentItemProductQty;
            });
            accLabel = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblSumProductQty"];
            if (accLabel != null)
            {
                accLabel.Text = sumProductQty.ToString();
            }
            report.DataSource = receiptItemList;
            //report.DataMember = BOSCommon.Constants.Report.DevReceiptItemReportName;
        }



        public void PrintStampProduct()
        {
            if (!Toolbar.IsNullOrNoneAction() && !(Toolbar.CurrentObjectID > 0))
                return;
            RPStampProductsForReceipt report = new RPStampProductsForReceipt();
            InitReceiptReport(report);
            guiReportPreview reviewer = new guiReportPreview(report, null, true);
            reviewer.Show();
        }

        private void InitReceiptReport(RPStampProductsForReceipt report)
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo mainObject = (ICReceiptsInfo)entity.MainObject;
            ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
            report.bsReceiptItems.DataSource = objReceiptItemsController.GetAllReceiptItemForRPStampProductsByReceiptID(mainObject.ICReceiptID);
        }

        /// <summary>
        /// Called when user wants to change stock
        /// </summary>
        /// <param name="stockID">Selected stock id</param>
        public void ChangeStock(int stockID)
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.FK_ICStockID = stockID;
            if (!Toolbar.IsNullOrNoneAction())
            {
                if (entity.ReceiptItemsList.Count > 0)
                {
                    if (MessageBox.Show(ReceiptLocalizedResources.ConfirmChangeItemStockMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                        {
                            item.FK_ICStockID = stockID;
                        }
                        entity.ReceiptItemsList.GridControl.RefreshDataSource();
                    }
                }
            }
        }
        public void ChangeOperation(int operationID)
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.FK_MMOperationID = operationID;
            MMOperationsInfo objOperationsInfo = new MMOperationsInfo();
            MMOperationsController objOperationsController = new MMOperationsController();
            ACAccountsInfo objACAccountsInfo = new ACAccountsInfo();
            ACAccountsController objAccountsController = new ACAccountsController();
            DataRow row = BOSApp.GetObjectFromCatche("MMOperations", "MMOperationID", objReceiptsInfo.FK_MMOperationID);
            if (row != null)
                objOperationsInfo = (MMOperationsInfo)objOperationsController.GetObjectFromDataRow(row);
            else
                objOperationsInfo = (MMOperationsInfo)objOperationsController.GetObjectByID(objReceiptsInfo.FK_MMOperationID);

            string Acronym = string.Empty;

            if (objOperationsInfo != null)
            {
                Acronym = objOperationsInfo.MMOperationAcronym;
                if (entity.ReceiptItemsList.Count > 0)
                {
                    if (MessageBox.Show(SemiProductReceiptLocalizedResources.ConfirmChangeOperationMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                        {
                            item.FK_MMOperationID = operationID;
                            item.FK_ACAccountID = objOperationsInfo.FK_ACAccountID;
                        }
                        entity.ReceiptItemsList.GridControl.RefreshDataSource();
                    }

                    if (MessageBox.Show(SemiProductReceiptLocalizedResources.ConfirmChangePackNo, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        string[] PackNo;
                        if (!string.IsNullOrEmpty(objReceiptsInfo.ICReceiptPackNo))
                        {
                            PackNo = objReceiptsInfo.ICReceiptPackNo.Split('/');
                            if (PackNo.Length > 0)
                            {
                                objReceiptsInfo.ICReceiptPackNo = GetSerialNo(PackNo[0], Acronym);
                                entity.UpdateMainObjectBindingSource();
                            }
                        }
                        if (objReceiptsInfo.ICReceiptTypeCombo != ReceiptType.SemiProductReceiptTransfer.ToString())
                        {
                            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                            {
                                if (!string.IsNullOrEmpty(item.ICReceiptItemProductSerialNo))
                                {
                                    PackNo = item.ICReceiptItemProductSerialNo.Split('/');
                                    if (PackNo.Length > 0)
                                    {
                                        item.ICReceiptItemProductSerialNo = GetSerialNo(PackNo[0], Acronym);
                                        item.ICReceiptItemLotNo = GetSerialNo(PackNo[0], Acronym);
                                    }
                                }
                            }
                        }

                        entity.ReceiptItemsList.GridControl.RefreshDataSource();

                    }
                    UpdateDocumentEntries();
                }
            }
        }
        /// <summary>
        /// Change All Item Info
        /// </summary>
        /// <param name="changeID"></param>
        /// <param name="type">
        /// 1: receive operation
        /// 2: workshopID
        /// 3: lineID
        /// 4: room group
        /// 5: machine unit
        /// </param>
        public void ChangeAllItemInfo(int changeID, int type)
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            if (!Toolbar.IsNullOrNoneAction())
            {
                if (entity.ReceiptItemsList.Count > 0)
                {
                    if (MessageBox.Show("Bạn chắc chắn muốn thay đổi cho tất cả các chi tiết?", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        MMLineOperationsController objLineOperationsController = new MMLineOperationsController();
                        List<MMLineOperationsInfo> ListInfo = new List<MMLineOperationsInfo>();
                        if (type == 2 || type == 3)
                            ListInfo = objLineOperationsController.GetLineOperationInfoByOperationIDAndLine(null, changeID);
                        foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                        {
                            if (type == 1)
                                item.FK_MMOperationID = changeID;
                            else if (type == 2)
                            {
                                item.FK_MMWorkShopID = changeID;
                                int stockID = ChangeStockReceiptByOperationDetailPlan(item.FK_MMOperationID, item.FK_MMLineID, item.FK_MMWorkShopID, ListInfo);
                                if (stockID > 0)
                                {
                                    item.FK_ICStockID = stockID;
                                }
                            }
                            else if (type == 3)
                            {
                                int stockID = ChangeStockReceiptByOperationDetailPlan(item.FK_MMOperationID, changeID, item.FK_MMWorkShopID, ListInfo);
                                if (stockID > 0)
                                {
                                    item.FK_ICStockID = stockID;
                                }
                                item.FK_MMLineID = changeID;
                            }
                            else if (type == 4)
                                item.FK_HRDepartmentRoomGroupItemID = changeID;
                            else if (type == 5)
                                item.FK_MMMachineUnitID = changeID;
                        }
                        entity.ReceiptItemsList.GridControl.RefreshDataSource();
                    }
                }
            }
        }
        public void InitializeWorkShoplookupDataSource()
        {
            if (BOSApp.LookupTables.ContainsKey("MMWorkShops"))
            {
                DataSet ds = (DataSet)BOSApp.LookupTables["MMWorkShops"];
                BOSLookupEdit fld_lkeFK_MMWorkShopID = (BOSLookupEdit)Controls["fld_lkeFK_MMWorkShopID"];
                if (fld_lkeFK_MMWorkShopID != null)
                {
                    if (ds != null)
                        fld_lkeFK_MMWorkShopID.Properties.DataSource = ds.Tables[0];
                }
            }
        }
        public void InitializeLinelookupDataSource()
        {
            if (BOSApp.LookupTables.ContainsKey("MMLines"))
            {
                DataSet ds = (DataSet)BOSApp.LookupTables["MMLines"];
                BOSLookupEdit fld_lkeFK_LineID = (BOSLookupEdit)Controls["fld_lkeFK_LineID"];
                if (fld_lkeFK_LineID != null)
                {
                    if (ds != null)
                        fld_lkeFK_LineID.Properties.DataSource = ds.Tables[0];
                }
            }
        }
        public void InitializeMachineUnitlookupDataSource()
        {
            if (!BOSApp.LookupTables.ContainsKey("MMMachineUnits"))
            {
                GELookupTablesInfo lookupTable = BOSApp.LookupTableList.Where(t => t.GELookupTableName == TableName.ICProductsTableName).FirstOrDefault();
                BOSApp.LookupTables.Add("MMMachineUnits", BOSApp.GetLookupTableData("MMMachineUnits"));
                BOSApp.LookupTablesUpdatedDate.Add("MMMachineUnits", BOSApp.MainScreen.ServerDate.AddSeconds(BOSApp.MainScreen.tickTimer));
                BOSApp.LookupTableObjects.Add("MMMachineUnits", lookupTable);
            }
            DataSet ds = (DataSet)BOSApp.LookupTables["MMMachineUnits"];
            BOSLookupEdit fld_lkeFK_MMMachineUnitID = (BOSLookupEdit)Controls["fld_lkeFK_MMMachineUnitID"];
            if (fld_lkeFK_MMMachineUnitID != null)
            {
                if (ds != null)
                    fld_lkeFK_MMMachineUnitID.Properties.DataSource = ds.Tables[0];
            }
        }

        #region Accounting
        public bool isNormalNew = false;
        protected override void UpdateDocumentEntries()
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            ACDocTypeEntrysController objDocTypeEntrysController = new ACDocTypeEntrysController();
            ICProductsInfo objProductsInfo = new ICProductsInfo();


            string documentType = AccDocumentType.NhapKhoBTP.ToString();
            string entryType = AccEntryType.NhapKhoBTP.ToString();

            if (objReceiptsInfo.ICReceiptTypeCombo == ReceiptType.PurchaseReceipt.ToString())
            {
                if (objReceiptsInfo.ICReceiptReference.Length == 0)
                    documentType = AccDocumentType.NhapKhoMuaHang.ToString();
                else
                    documentType = AccDocumentType.NhapKhoMuaHangHoaDon.ToString();
                entryType = AccEntryType.NhapKhoMuaHang.ToString();
            }
            else if (objReceiptsInfo.ICReceiptTypeCombo == ReceiptType.ReturnReceipt.ToString())
            {
                documentType = AccDocumentType.NhapKhoHangTra.ToString();
                entryType = AccEntryType.NhapKhoHangTra.ToString();
            }
            else if (objReceiptsInfo.ICReceiptTypeCombo == ReceiptType.EquipmentReceipt.ToString())
            {
                documentType = AccDocumentType.NhapCCDC.ToString();
                entryType = AccEntryType.NhapCCDC.ToString();
            }
            else if (objReceiptsInfo.ICReceiptTypeCombo == ReceiptType.ProductionReceipt.ToString())
            {
                /*A Chinh kêu đổi*/
                documentType = AccDocumentType.NhapKhoThanhPham.ToString();
                entryType = AccEntryType.NhapKhoThanhPham.ToString();
            }
            ACAccountsInfo objACAccountsInfo = new ACAccountsInfo();

            MMOperationsInfo objOperationsInfo = new MMOperationsInfo();
            MMOperationsController objOperationsController = new MMOperationsController();
            ACDocumentEntrysInfo entry = new ACDocumentEntrysInfo();
            string CD = string.Empty;
            int accountCredit = 0;
            int accountDebit = 0;
            string Group = string.Empty;
            DataRow row = BOSApp.GetObjectFromCatche("MMOperations", "MMOperationID", objReceiptsInfo.FK_MMOperationID);
            if (row != null)
                objOperationsInfo = (MMOperationsInfo)objOperationsController.GetObjectFromDataRow(row);
            else
                objOperationsInfo = (MMOperationsInfo)objOperationsController.GetObjectByID(objReceiptsInfo.FK_MMOperationID);
            if (objOperationsInfo != null)
            {
                CD = objOperationsInfo.MMOperationNo;
                if (objOperationsInfo.FK_ACIngrogressAccountID != 0)
                {
                    accountCredit = objOperationsInfo.FK_ACIngrogressAccountID;
                }
                if (objOperationsInfo.FK_ACAccountID != 0)
                {
                    accountDebit = objOperationsInfo.FK_ACAccountID;
                }
            }

            ACDocTypeEntrysInfo defaultEntry = objDocTypeEntrysController.GetEntryByDocumentTypeAndEntryType(
                                                                        documentType,
                                                                        entryType);
            Dictionary<ACDocumentEntrysInfo, List<ICReceiptItemsInfo>> documentEntryAccounts = new Dictionary<ACDocumentEntrysInfo, List<ICReceiptItemsInfo>>();
            List<int> productAccountID = new List<int>();

            if (entity.ReceiptItemsList != null)
            {
                foreach (ICReceiptItemsInfo receiptItem in entity.ReceiptItemsList)
                {
                    entry = entity.DocumentEntryList.FirstOrDefault(e => e.ACEntryTypeName == entryType
                                                                       && (e.FK_ACDebitAccountID == receiptItem.FK_ACAccountID
                                                                       || e.FK_ACDebitAccountID == accountDebit));
                    if (entry != null && accountDebit > 0 && accountCredit > 0)
                    {
                        //entry.FK_ACDebitAccountID = receiptItem.FK_ACAccountID;
                        entry.FK_ACCreditAccountID = accountCredit;
                        entry.FK_ACDebitAccountID = accountDebit;
                    }
                    if (defaultEntry != null)
                    {
                        //defaultEntry.ACDocTypeEntryAccountDefaultDebit = receiptItem.FK_ACAccountID;
                        defaultEntry.ACDocTypeEntryAccountDefaultCredit = accountCredit;
                        defaultEntry.ACDocTypeEntryAccountDefaultDebit = accountDebit;
                    }

                    if (entry == null && defaultEntry != null)
                    {
                        entry = AccountHelper.AddItemToDocumentEntryList(defaultEntry, entity.DocumentEntryList);

                        if (accountDebit > 0 && accountCredit > 0)
                        {
                            //entry.FK_ACDebitAccountID = receiptItem.FK_ACAccountID;
                            entry.FK_ACCreditAccountID = accountCredit;
                            entry.FK_ACDebitAccountID = accountDebit;
                        }
                        else
                        {
                            entry.FK_ACDebitAccountID = receiptItem.FK_ACAccountID;
                        }
                    }
                    if (entry != null && !documentEntryAccounts.ContainsKey(entry))
                    {
                        documentEntryAccounts.Add(entry, new List<ICReceiptItemsInfo>());
                        productAccountID.Add(entry.FK_ACDebitAccountID);
                    }
                    documentEntryAccounts[entry].Add(receiptItem);
                }
            }

            //update document entry amount
            if (documentEntryAccounts.Count != 0)
            {
                ACDocumentEntrysInfo item = null;
                foreach (ACDocumentEntrysInfo entrys in documentEntryAccounts.Keys)
                {
                    entrys.ACDocumentEntryAmount = documentEntryAccounts[entrys].Sum(i => i.ICReceiptItemInventoryCost * i.ICReceiptItemProductQty);
                    entrys.ACDocumentEntryExchangeAmount = entrys.ACDocumentEntryAmount * objReceiptsInfo.ICReceiptExchangeRate;
                    BOSApp.RoundByCurrency(entrys, "ACDocumentEntryExchangeAmount", BOSApp.CurrentCompanyInfo.FK_GECurrencyID);
                    BOSApp.RoundByCurrency(entrys, "ACDocumentEntryAmount", objReceiptsInfo.FK_GECurrencyID);
                    item = entrys;
                }


                ACDocumentsInfo objDocumentsInfo = entity.DocumentList.FirstOrDefault(d => d.ACDocumentTypeName == documentType);
                if (objDocumentsInfo == null)
                {
                    objDocumentsInfo = new ACDocumentsInfo();
                    objDocumentsInfo.FK_ACDocumentTypeID = item.FK_ACDocumentTypeID;
                    objDocumentsInfo.ACDocumentTypeName = item.ACDocumentTypeName;
                    entity.DocumentList.Add(objDocumentsInfo);
                }
            }

            //remove the redundance document entries 
            List<ACDocumentEntrysInfo> removedItems = entity.DocumentEntryList.Where(item => item.ACEntryTypeName == entryType
                                                                              && !productAccountID.Any(accountID => accountID == item.FK_ACDebitAccountID)).ToList();
            if (removedItems != null)
            {
                foreach (ACDocumentEntrysInfo item in removedItems)
                    entity.DocumentEntryList.Remove(item);
            }
            entity.DocumentEntryList.GridControl.RefreshDataSource();
        }

        #endregion
        public void ChangePackNo()
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;

            if (!Toolbar.IsNullOrNoneAction())
            {
                if (objReceiptsInfo.ICReceiptTypeCombo != ReceiptType.SemiProductReceiptTransfer.ToString())
                {
                    if (entity.ReceiptItemsList.Count > 0)
                    {
                        if (MessageBox.Show(PurchaseReceiptLocalizedResources.ConfirmChangeItemLotNoMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                        {
                            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                            {
                                item.ICReceiptItemLotNo = objReceiptsInfo.ICReceiptPackNo;
                                item.ICReceiptItemProductSerialNo = objReceiptsInfo.ICReceiptPackNo;
                            }
                            entity.ReceiptItemsList.GridControl.RefreshDataSource();
                        }
                    }
                }
            }
        }

        public void ChangeBatchProduct()
        {
            //SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            //if (entity.ReceiptItemsList.Count > 0)
            //{
            //    entity.ReceiptItemsList.Clear();
            //    entity.ReceiptItemsList.GridControl.RefreshDataSource();
            //    UpdateTotalCost();
            //}
        }
        public void ChangeGECurrency(string stringID)
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            int id = 0;
            int.TryParse(stringID, out id);
            objReceiptsInfo.FK_GECurrencyID = id;
            UpdateTotalCost();
        }
        public void ChangeReceiptDate()
        {
            if (Toolbar.IsNullOrNoneAction())
                return;

            string[] PackNo = null;
            string Acronym = string.Empty;
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            //objReceiptsInfo.ICReceiptDate = ValuesTime;

            MMOperationsController objOperationsController = new MMOperationsController();
            List<MMOperationsInfo> operationList = objOperationsController.GetAllAliveOperation();
            MMOperationsInfo objOperationsInfo = new MMOperationsInfo();
            objOperationsInfo = (MMOperationsInfo)objOperationsController.GetObjectByID(objReceiptsInfo.FK_MMOperationID);
            if (!string.IsNullOrEmpty(objReceiptsInfo.ICReceiptPackNo))
                PackNo = objReceiptsInfo.ICReceiptPackNo.Split('/');

            if (objOperationsInfo != null && objOperationsInfo.MMOperationNo != OperationNo.Thanhpham.ToString())
            {
                Acronym = objOperationsInfo.MMOperationAcronym;
                objReceiptsInfo.ICReceiptPackNo = GetSerialNo(PackNo == null ? string.Empty : PackNo.FirstOrDefault(), Acronym); ;
            }
            if (objReceiptsInfo.ICReceiptTypeCombo != ReceiptType.SemiProductReceiptTransfer.ToString())
            {
                entity.ReceiptItemsList.ForEach(item =>
                {
                    objOperationsInfo = operationList.Where(o => o.MMOperationID == item.FK_MMOperationID).FirstOrDefault();
                    Acronym = objOperationsInfo == null ? string.Empty : objOperationsInfo.MMOperationAcronym;
                    PackNo = item.ICReceiptItemProductSerialNo.Split('/');

                    item.ICReceiptItemProductSerialNo = GetSerialNo(PackNo.FirstOrDefault(), Acronym);
                    item.ICReceiptItemLotNo = GetSerialNo(PackNo.FirstOrDefault(), Acronym);
                });
            }
            entity.UpdateMainObjectBindingSource();
            entity.ReceiptItemsList.GridControl.RefreshDataSource();
        }
        public void ActionConfirmed()
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            ICReceiptsController objReceiptsController = new ICReceiptsController();
            if (!CheckProductionNormQty())
            {
                return;
            }
            if (!SyncReceiptItem(true))
            {
                return;
            }
            if (!IsValidStock())
            {
                return;
            }
            //if (!CheckMaterialShipment())
            //    return;

            #region Validate Package
            if (!CheckPackQty(null))
                return;
            #endregion
            entity.ReceiptItemsList.ForEach(r =>
            {
                r.IsError = false;
                r.IsError1 = false;
                r.IsError2 = false;
            });
            objReceiptsInfo.ICReceiptStatus = ReceiptStatus.Confirmed.ToString();
            objReceiptsController.UpdateObject(objReceiptsInfo);
            ActionCancel();
        }
        public void DeleteItemPackage(string ICReceiptItemLotNo)
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
                List<ICReceiptItemsInfo> listReceiptItem = entity.ReceiptItemsList.Where(o => o.ICReceiptItemLotNo == ICReceiptItemLotNo).ToList();
                if (listReceiptItem != null && listReceiptItem.Count > 0)
                {
                    foreach (ICReceiptItemsInfo item in listReceiptItem)
                    {
                        int index = entity.ReceiptItemsList.IndexOf(item);
                        if (index >= 0)
                        {
                            entity.ReceiptItemsList.RemoveAt(index);
                        }
                    }
                    UpdateTotalCost();
                    entity.ReceiptItemsList.GridControl.RefreshDataSource();
                }
            }

        }
        public void ActionUnConfirmed()
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            ICReceiptsController objReceiptsController = new ICReceiptsController();
            objReceiptsInfo.ICReceiptStatus = ReceiptStatus.New.ToString();
            objReceiptsController.UpdateObject(objReceiptsInfo);
            ActionCancel();
        }

        public void BatchProductReceipt()
        {
            ActionNew();
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo mainobject = (ICReceiptsInfo)entity.MainObject;
            mainobject.ICReceiptSemiProductType = ReceiptSemiProductType.BatchProduct.ToString();
            mainobject.ICReceiptTypeCombo = ReceiptType.ProductionReceipt.ToString();
            mainobject.ICReceiptCreateFrom = CreateFrom.BatchProduct.ToString();
            ChangeProductAddLookupEditDataSource();

            MMBatchProductItemsController objBatchProductItemsController = new MMBatchProductItemsController();
            List<MMBatchProductItemsInfo> batchProductItemList = objBatchProductItemsController.GetBatchProductItemForBatchProductReceipt();
            guiChooseBatchProductItems guiFind = new guiChooseBatchProductItems(batchProductItemList);
            guiFind.Module = this;
            if (guiFind.ShowDialog() != DialogResult.OK)
            {
                base.ActionCancel();
                return;
            }
            batchProductItemList = guiFind.SelectedObjects;
            MMBatchProductItemsInfo objBatchProductItemDefaultInfo = guiFind.SelectedObjects.FirstOrDefault();
            if (objBatchProductItemDefaultInfo == null)
                objBatchProductItemDefaultInfo = new MMBatchProductItemsInfo();
            MMBatchProductsController objBatchProductsController = new MMBatchProductsController();
            MMBatchProductsInfo objBatchProductsInfo = (MMBatchProductsInfo)objBatchProductsController.GetObjectByID(objBatchProductItemDefaultInfo.FK_MMBatchProductID);
            if (objBatchProductsInfo == null)
                objBatchProductsInfo = new MMBatchProductsInfo();
            mainobject.FK_MMBatchProductID = objBatchProductItemDefaultInfo.FK_MMBatchProductID;
            mainobject.ICReceiptPackNo = objBatchProductItemDefaultInfo.ICShipmentItemProductSerialNo;
            mainobject.FK_ACObjectID = objBatchProductsInfo.FK_ARCustomerID;
            mainobject.ICObjectType = ObjectType.Customer.ToString();
            mainobject.ACObjectAccessKey = string.Format("{0};{1}", mainobject.FK_ACObjectID, mainobject.ICObjectType);
            mainobject.ICReceiptPackNo = objBatchProductItemDefaultInfo.MMBatchProductItemProductSerial;
            List<ICReceiptItemsInfo> receiptItemList = new List<ICReceiptItemsInfo>();
            ICReceiptItemsInfo objReceiptItemsInfo = new ICReceiptItemsInfo();
            batchProductItemList.ForEach(o =>
            {
                objReceiptItemsInfo = ToShipmentItemFromBatchProductItem(o);
                entity.SetProductCostByProductUnitCost(objReceiptItemsInfo);
                receiptItemList.Add(objReceiptItemsInfo);
            });
            entity.ReceiptItemsList.Invalidate(receiptItemList);
            entity.UpdateMainObjectBindingSource();
            entity.ReceiptItemsList.GridControl.RefreshDataSource();
        }

        public ICReceiptItemsInfo ToShipmentItemFromBatchProductItem(MMBatchProductItemsInfo objBatchProductItemsInfo)
        {
            return new ICReceiptItemsInfo()
            {
                FK_ICProductID = objBatchProductItemsInfo.FK_ICProductID,
                FK_ICMeasureUnitID = objBatchProductItemsInfo.FK_ICMeasureUnitID,
                FK_MMBatchProductItemID = objBatchProductItemsInfo.MMBatchProductItemID,
                FK_MMBatchProductID = objBatchProductItemsInfo.FK_MMBatchProductID,
                FK_ICProductAttributeWoodTypeID = objBatchProductItemsInfo.FK_ICProductAttributeWoodTypeID,
                FK_ICProductAttributeColorID = objBatchProductItemsInfo.FK_ICProductAttributeColorID,
                ICReceiptItemProductAttributeColor = objBatchProductItemsInfo.MMBatchProductItemColorID,
                ICReceiptItemProductAttributeWoodType = objBatchProductItemsInfo.MMBatchProductItemWoodTypeID,

                ICReceiptItemProductHeight = objBatchProductItemsInfo.MMBatchProductItemProductHeight,
                ICReceiptItemProductLength = objBatchProductItemsInfo.MMBatchProductItemProductLength,
                ICReceiptItemProductWidth = objBatchProductItemsInfo.MMBatchProductItemProductWidth,
                ICReceiptItemProductQty = objBatchProductItemsInfo.MMBatchProductItemProductQty,
                ICReceiptItemProductDesc = objBatchProductItemsInfo.MMBatchProductItemProductDesc,
                ICReceiptItemProductName = objBatchProductItemsInfo.MMBatchProductItemProductName,
                FK_ICProductSerieID = objBatchProductItemsInfo.FK_ICProductSerieID,
                ICReceiptItemProductSerialNo = objBatchProductItemsInfo.MMBatchProductItemProductSerial,
                ICReceiptItemBPProductionNormItemQty = objBatchProductItemsInfo.MMBatchProductItemProductQty
            };
        }
        #region package
        public void ShowGuiPackage()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;

                int batchProductID = objReceiptsInfo.FK_MMBatchProductID;
                int operationID = objReceiptsInfo.FK_MMOperationID;

                if (batchProductID == 0)
                {
                    BOSApp.ShowMessage("Vui lòng chọn Lệnh sản xuất");
                    return;
                }

                if (operationID == 0)
                {
                    BOSApp.ShowMessage("Vui lòng chọn Công đoạn");
                    return;
                }
                MMOperationsController objOperationsController = new MMOperationsController();
                MMOperationsInfo objOperationsInfo = new MMOperationsInfo();
                if (objReceiptsInfo.FK_ICProductID == 0)
                {
                    BOSApp.ShowMessage("Vui lòng chọn thành phẩm!");
                    return;
                }
                guiAddProductPackageItems guiPack = new guiAddProductPackageItems();
                guiPack.Module = this;
                guiPack.FK_ICProductID = objReceiptsInfo.FK_ICProductID;
                guiPack.FK_MMOperationID = objReceiptsInfo.FK_MMOperationID;
                guiPack.FK_MMBatchProductID = objReceiptsInfo.FK_MMBatchProductID;
                guiPack.FK_MMBatchProductItemID = objReceiptsInfo.FK_MMBatchProductItemID;

                guiPack.PackNoList = entity.ReceiptItemsList.Select(o => new PackInfo { PackNo = o.ICReceiptItemLotNo, BatchItemID = o.FK_MMBatchProductItemID }).Distinct().ToList();
                if (guiPack.ShowDialog() == DialogResult.OK)
                {

                    MMBatchProductProductionNormItemsController objBPPNsController = new MMBatchProductProductionNormItemsController();
                    List<MMBatchProductProductionNormItemsInfo> pnList = guiPack.Result;
                    if (pnList != null)
                    {

                        #region Acronym
                        DataRow row = BOSApp.GetObjectFromCatche("MMOperations", "MMOperationID", objReceiptsInfo.FK_MMOperationID);
                        if (row != null)
                            objOperationsInfo = (MMOperationsInfo)objOperationsController.GetObjectFromDataRow(row);
                        else
                            objOperationsInfo = (MMOperationsInfo)objOperationsController.GetObjectByID(objReceiptsInfo.FK_MMOperationID);

                        //string Acronym = string.Empty;

                        int account = 0;
                        if (objOperationsInfo != null)
                        {
                            account = objOperationsInfo.FK_ACAccountID;
                        }
                        #endregion
                        foreach (MMBatchProductProductionNormItemsInfo pnItem in pnList)
                        {
                            ICReceiptItemsInfo item = new ICReceiptItemsInfo();

                            entity.SetValuesAfterValidateProduct(pnItem.FK_ICProductID, item);
                            ICProductsInfo objProductsInfo = BOSApp.GetProductFromCurrentProductList(pnItem.FK_ICProductID);
                            if (objProductsInfo != null)
                            {
                                if (account > 0)
                                    item.FK_ACAccountID = account;
                                else
                                    item.FK_ACAccountID = objProductsInfo.FK_ACAccountID;

                            }
                            item.ICReceiptItemQtyreceived = pnItem.MMBatchProductProductionNormItemRemainQty;
                            item.ICReceiptItemProductQty = pnItem.ICReceiptItemProductQty;
                            item.ICReceiptItemBPProductionNormItemQty = pnItem.MMBatchProductProductionNormItemQuantity;
                            entity.SetProductPriceByProductUnitPrice(item);
                            if (objReceiptsInfo != null)
                            {
                                item.FK_MMOperationID = objReceiptsInfo.FK_MMOperationID;
                            }
                            item.FK_MMBatchProductProductionNormItemID = pnItem.MMBatchProductProductionNormItemID;
                            item.ICReceiptItemProductLength = pnItem.MMBatchProductProductionNormItemProductLength;
                            item.ICReceiptItemProductWidth = pnItem.MMBatchProductProductionNormItemProductWidth;
                            item.ICReceiptItemProductHeight = pnItem.MMBatchProductProductionNormItemProductHeight;
                            item.ICReceiptItemBlockPerOne = pnItem.MMBatchProductProductionNormItemBlockPerOne;
                            item.FK_ICMeasureUnitID = pnItem.FK_ICMeasureUnitID;
                            if (!string.IsNullOrEmpty(pnItem.MMBatchProductItemProductSerial))
                            {
                                item.ICReceiptItemProductSerialNo = GetSerialNo(pnItem.MMBatchProductItemProductSerial, objOperationsInfo.MMOperationAcronym);
                            }

                            item.ICReceiptItemLotNo = pnItem.ICProductPackageNo;
                            item.FK_MMBatchProductItemID = pnItem.FK_MMBatchProductItemID;
                            item.FK_ICProductForBatchID = pnItem.FK_ICProductForBatchID;
                            item.FK_MMBatchProductID = pnItem.FK_MMBatchProductID;
                            if (string.IsNullOrEmpty(item.ICReceiptItemProductSupplierNo))
                            {
                                item.ICReceiptItemProductSupplierNo = pnItem.MMBatchProductProductionNormItemProductSupplierNumber;
                            }


                            if (pnItem.MMBatchProductProductionNormItemBlockPerOne > 0)
                            {
                                item.ICReceiptItemWoodQty = item.ICReceiptItemProductQty * pnItem.MMBatchProductProductionNormItemBlockPerOne;
                            }
                            item.ICReceiptItemHasProductPackage = true;
                            entity.ReceiptItemsList.Add(item);
                        }
                    }
                    else
                    {
                        BOSApp.ShowMessage("Không tìm thấy chi tiết BTP cho kiện này!");
                    }
                }
                entity.ReceiptItemsList.GridControl.RefreshDataSource();
                UpdateTotalCost();
            }
        }
        public void PrintBarCodeForSerialNumber(List<ICProductSerialNumbersInfo> productSerialNumbers)
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            RPSerialNumber report = new RPSerialNumber();
            foreach (ICProductSerialNumbersInfo objProductSerialNumbersInfo in productSerialNumbers)
            {
                objProductSerialNumbersInfo.BarcodeImage = (System.Drawing.Image)EncodingBase128(objProductSerialNumbersInfo.ICProductSerialNumberNo);
            }
            report.DataSource = productSerialNumbers;
            guiReportPreview reviewer = new guiReportPreview(report, BOSCommon.Constants.Report.DevInvoiceItemReportPath, false);
            reviewer.ShowDialog();
        }

        public Bitmap EncodingBase128(string inputStringToBarcode)
        {
            BarcodeWriter bw = new BarcodeWriter();
            bw.Format = ZXing.BarcodeFormat.CODE_128;
            EncodingOptions encOptions = new EncodingOptions() { Width = 241, Height = 71, Margin = 0 };
            bw.Options = encOptions;
            if (string.IsNullOrEmpty(inputStringToBarcode))
                inputStringToBarcode = " ";
            Bitmap result = new Bitmap(bw.Write(inputStringToBarcode));
            return result;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="objProductPackageItemsInfo"></param>
        /// <returns></returns>
        public ICReceiptPackageItemsInfo GenReceiptPackageItemFromProductPackageItem(ICProductPackageItemsInfo objProductPackageItemsInfo)
        {

            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            decimal receiptItemProductQty = entity.ReceiptItemsList.Where(o => o.FK_ICProductID == objProductPackageItemsInfo.FK_ICProductID).Select(o => o.ICReceiptItemProductQty).Sum();
            decimal packageItemQty = receiptItemProductQty * objProductPackageItemsInfo.ICProductPackageItemQty;
            packageItemQty = objProductPackageItemsInfo.ICProductPackageProductQty == 0 ? packageItemQty : packageItemQty / objProductPackageItemsInfo.ICProductPackageProductQty;

            ICReceiptPackageItemsInfo objReceiptPackageItemsInfo = new ICReceiptPackageItemsInfo();
            if (objProductPackageItemsInfo != null)
            {
                objReceiptPackageItemsInfo.FK_ICProductPackageItemID = objProductPackageItemsInfo.ICProductPackageItemID;
                objReceiptPackageItemsInfo.ICReceiptPackageItemNo = objProductPackageItemsInfo.ICProductPackageItemNo;
                objReceiptPackageItemsInfo.ICReceiptPackageItemName = objProductPackageItemsInfo.ICProductPackageItemName;
                objReceiptPackageItemsInfo.ICReceiptPackageItemLength = objProductPackageItemsInfo.ICProductPackageItemLength;
                objReceiptPackageItemsInfo.ICReceiptPackageItemWidth = objProductPackageItemsInfo.ICProductPackageItemWidth;
                objReceiptPackageItemsInfo.ICReceiptPackageItemHeight = objProductPackageItemsInfo.ICProductPackageItemHeight;
                objReceiptPackageItemsInfo.ICReceiptPackageItemHasDetail = objProductPackageItemsInfo.ICProductPackageItemHasDetail;
                objReceiptPackageItemsInfo.ICReceiptPackageItemQty = packageItemQty;
                objReceiptPackageItemsInfo.ICProductPackageMethodType = objProductPackageItemsInfo.ICProductPackageMethodType;
                objReceiptPackageItemsInfo.FK_ICProductID = objProductPackageItemsInfo.FK_ICProductID;
            }
            return objReceiptPackageItemsInfo;
        }

        public ICReceiptPackageItemDetailsInfo GenReceiptPackageItemDetailFromProductPackageItemDetail(ICProductPackageItemDetailsInfo objProductPackageItemDetailsInfo, decimal ICReceiptPackageItemQty)
        {
            ICReceiptPackageItemDetailsInfo objReceiptPackageItemDetailsInfo = new ICReceiptPackageItemDetailsInfo();
            if (objProductPackageItemDetailsInfo != null)
            {
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailNo = objProductPackageItemDetailsInfo.ICProductPackageItemDetailNo;
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailName = objProductPackageItemDetailsInfo.ICProductPackageItemDetailName;
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductNo = objProductPackageItemDetailsInfo.ICProductPackageItemDetailFinalProductNo;
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductName = objProductPackageItemDetailsInfo.ICProductPackageItemDetailFinalProductName;
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductDesc = objProductPackageItemDetailsInfo.ICProductPackageItemDetailFinalProductDesc;
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailQty = objProductPackageItemDetailsInfo.ICProductPackageItemDetailQty;
                objReceiptPackageItemDetailsInfo.FK_ICProductID = objProductPackageItemDetailsInfo.FK_ICProductID;
                objReceiptPackageItemDetailsInfo.FK_ICProductDetailID = objProductPackageItemDetailsInfo.FK_ICProductDetailID;
                objReceiptPackageItemDetailsInfo.ICReceiptPackageItemQty = ICReceiptPackageItemQty;
            }
            return objReceiptPackageItemDetailsInfo;
        }

        public bool CheckExistInReceiptItemList(int productID)
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            return entity.ReceiptItemsList.Where(o => o.FK_ICProductID == productID).Count() > 0;
        }

        public void DeleteItemReceiptPackageItemsList()
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptPackageItemsInfo objReceiptPackageItemsInfo = entity.ReceiptPackageItemList[entity.ReceiptPackageItemList.CurrentIndex];
            List<ICReceiptPackageItemDetailsInfo> ReceiptPackageItemDetailShowRemoveList = new List<ICReceiptPackageItemDetailsInfo>();
            if (objReceiptPackageItemsInfo.ICReceiptPackageItemTemporaryID > 0 && objReceiptPackageItemsInfo.ReceiptPackageItemDetailsList != null)
            {
                foreach (ICReceiptPackageItemDetailsInfo objReceiptPackageItemDetailsInfo in objReceiptPackageItemsInfo.ReceiptPackageItemDetailsList)
                {
                    entity.ReceiptPackageItemDetailShowList.ForEach(x =>
                    {
                        if (x.FK_ICReceiptPackageItemID == objReceiptPackageItemDetailsInfo.FK_ICReceiptPackageItemID)
                            entity.ReceiptPackageItemDetailShowList.Remove(x);
                    });
                }
            }
            else
            {
                entity.ReceiptPackageItemDetailShowList.ForEach(x =>
                {
                    if (x.FK_APInvoiceInPackageItemID > 0)
                    {
                        if (x.FK_APInvoiceInPackageItemID == objReceiptPackageItemsInfo.FK_APInvoiceInPackageItemID)
                            ReceiptPackageItemDetailShowRemoveList.Add(x);
                    }
                    else if (x.FK_APPOPackageItemID > 0)
                    {
                        if (x.FK_APPOPackageItemID == objReceiptPackageItemsInfo.FK_APPOPackageItemID)
                            ReceiptPackageItemDetailShowRemoveList.Add(x);
                    }
                    else if (x.FK_ICReceiptPackageItemID == objReceiptPackageItemsInfo.ICReceiptPackageItemID)
                        ReceiptPackageItemDetailShowRemoveList.Add(x);
                });

                ReceiptPackageItemDetailShowRemoveList.ForEach(x =>
                {
                    if (x.FK_APInvoiceInPackageItemID > 0)
                    {
                        if (x.FK_APInvoiceInPackageItemID == objReceiptPackageItemsInfo.FK_APInvoiceInPackageItemID)
                            entity.ReceiptPackageItemDetailShowList.Remove(x);
                    }
                    else if (x.FK_APPOPackageItemID > 0)
                    {
                        if (x.FK_APPOPackageItemID == objReceiptPackageItemsInfo.FK_APPOPackageItemID)
                            entity.ReceiptPackageItemDetailShowList.Remove(x);
                    }
                    else if (x.FK_ICReceiptPackageItemID == objReceiptPackageItemsInfo.ICReceiptPackageItemID)
                        entity.ReceiptPackageItemDetailShowList.Remove(x);
                });
            }
            entity.ReceiptPackageItemList.RemoveSelectedRowObjectFromList();
            if (entity.ReceiptPackageItemList.GridControl != null)
                entity.ReceiptPackageItemDetailShowList.GridControl.RefreshDataSource();
        }

        public void AddProductPackageItemDetails()
        {
            if (IsEditable())
            {
                ActionEdit();
            }
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            ICReceiptPackageItemDetailsController objReceiptPackageItemDetailsController = new ICReceiptPackageItemDetailsController();
            ICProductPackageItemDetailsController objProductPackageItemDetailsController = new ICProductPackageItemDetailsController();
            entity.ReceiptPackageItemDetailList.Clear();
            entity.DeleteReceiptPackageItemDetailList.Clear();
            if (entity.ReceiptPackageItemList.CurrentIndex < 0)
            {
                MessageBox.Show("Vui lòng tạo kiện trước khi thêm chi tiết!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            if (entity.ReceiptPackageItemList[entity.ReceiptPackageItemList.CurrentIndex].ICReceiptPackageItemHasDetail == false)
            {
                MessageBox.Show("Vui lòng tích chọn xác định chi tiết trước khi thêm chi tiết!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            ICReceiptPackageItemsInfo objReceiptPackageItemsInfo = (ICReceiptPackageItemsInfo)entity.ReceiptPackageItemList[entity.ReceiptPackageItemList.CurrentIndex];
            if (objReceiptPackageItemsInfo.ReceiptPackageItemDetailsList == null)
            {
                objReceiptPackageItemsInfo.ReceiptPackageItemDetailsList = new BOSList<ICReceiptPackageItemDetailsInfo>();
                objReceiptPackageItemsInfo.ReceiptPackageItemDetailsList.InitBOSList((SemiProductReceiptEntities)CurrentModuleEntity,
                                               TableName.ICReceiptPackageItemsTableName,
                                               TableName.ICReceiptPackageItemDetailsTableName,
                                               BOSList<ICReceiptPackageItemDetailsInfo>.cstRelationForeign);
                objReceiptPackageItemsInfo.ReceiptPackageItemDetailsList.ItemTableForeignKey = "FK_ICReceiptPackageItemID";
            }
            if (objReceiptPackageItemsInfo.DeleteReceiptPackageItemDetailsList == null)
            {
                objReceiptPackageItemsInfo.DeleteReceiptPackageItemDetailsList = new BOSList<ICReceiptPackageItemDetailsInfo>();
                objReceiptPackageItemsInfo.DeleteReceiptPackageItemDetailsList.InitBOSList((SemiProductReceiptEntities)CurrentModuleEntity,
                                               TableName.ICReceiptPackageItemsTableName,
                                               TableName.ICReceiptPackageItemDetailsTableName,
                                               BOSList<ICReceiptPackageItemDetailsInfo>.cstRelationForeign);
                objReceiptPackageItemsInfo.DeleteReceiptPackageItemDetailsList.ItemTableForeignKey = "FK_ICReceiptPackageItemID";
            }
            List<ICReceiptPackageItemDetailsInfo> ReceiptPackageItemDetailsList = new List<ICReceiptPackageItemDetailsInfo>();
            if (objReceiptPackageItemsInfo.FK_APPOPackageItemID > 0 && objReceiptPackageItemsInfo.ICReceiptPackageItemID == 0)
            {
                entity.ReceiptPackageItemDetailShowList.ForEach(o =>
                {
                    if (o.FK_APPOPackageItemID == objReceiptPackageItemsInfo.FK_APPOPackageItemID)
                        ReceiptPackageItemDetailsList.Add(o);
                });
            }
            else if (objReceiptPackageItemsInfo.FK_APInvoiceInPackageItemID > 0 && objReceiptPackageItemsInfo.ICReceiptPackageItemID == 0)
            {
                entity.ReceiptPackageItemDetailShowList.ForEach(o =>
                {
                    if (o.FK_APInvoiceInPackageItemID == objReceiptPackageItemsInfo.FK_APInvoiceInPackageItemID)
                        ReceiptPackageItemDetailsList.Add(o);
                });
            }
            else if (objReceiptPackageItemsInfo.ICReceiptPackageItemTemporaryID > 0 && objReceiptPackageItemsInfo.ICReceiptPackageItemID == 0)
            {
                entity.ReceiptPackageItemDetailShowList.ForEach(o =>
                {
                    if (o.FK_ICReceiptPackageItemID == objReceiptPackageItemsInfo.ICReceiptPackageItemTemporaryID)
                        ReceiptPackageItemDetailsList.Add(o);
                });
            }
            else
                ReceiptPackageItemDetailsList = (List<ICReceiptPackageItemDetailsInfo>)objReceiptPackageItemDetailsController.GetPackageItemDetailsListByPackageItemID(objReceiptPackageItemsInfo.ICReceiptPackageItemID);
            objReceiptPackageItemsInfo.ReceiptPackageItemDetailsList.Clear();
            ReceiptPackageItemDetailsList.ForEach(o =>
            {
                objReceiptPackageItemsInfo.ReceiptPackageItemDetailsList.Add(o);
            });
            foreach (ICReceiptPackageItemDetailsInfo item in objReceiptPackageItemsInfo.ReceiptPackageItemDetailsList)
            {
                entity.ReceiptPackageItemDetailList.Add(item);
            }
            guiAddProductPackageItemDetails guiFind = new guiAddProductPackageItemDetails(objReceiptPackageItemsInfo.ReceiptPackageItemDetailsList);
            guiFind.Module = this;
            guiFind.ShowDialog();
            entity.RemoveOldReceiptPackageItemDetailItem(objReceiptPackageItemsInfo.ReceiptPackageItemDetailsList);
            objReceiptPackageItemsInfo.ReceiptPackageItemDetailsList.Clear();
            objReceiptPackageItemsInfo.DeleteReceiptPackageItemDetailsList.Clear();
            entity.ReceiptPackageItemDetailList.ForEach(o =>
            {
                if (objReceiptPackageItemsInfo.FK_APPOPackageItemID > 0)
                {
                    o.FK_APPOPackageItemID = objReceiptPackageItemsInfo.FK_APPOPackageItemID;
                }
                else if (objReceiptPackageItemsInfo.FK_APInvoiceInPackageItemID > 0)
                {
                    o.FK_APInvoiceInPackageItemID = objReceiptPackageItemsInfo.FK_APInvoiceInPackageItemID;
                }
                if (objReceiptPackageItemsInfo.ICReceiptPackageItemID > 0)
                    o.FK_ICReceiptPackageItemID = objReceiptPackageItemsInfo.ICReceiptPackageItemID;
                else
                    o.FK_ICReceiptPackageItemID = objReceiptPackageItemsInfo.ICReceiptPackageItemID;
                o.ICReceiptPackageItemQty = objReceiptPackageItemsInfo.ICReceiptPackageItemQty;
                entity.ReceiptPackageItemDetailShowList.Add(o);
            });
            entity.ReceiptPackageItemDetailList.ForEach(o =>
            {
                if (objReceiptPackageItemsInfo.FK_APPOPackageItemID > 0)
                {
                    o.FK_APPOPackageItemID = objReceiptPackageItemsInfo.FK_APPOPackageItemID;
                }
                else if (objReceiptPackageItemsInfo.FK_APInvoiceInPackageItemID > 0)
                {
                    o.FK_APInvoiceInPackageItemID = objReceiptPackageItemsInfo.FK_APInvoiceInPackageItemID;
                }
                if (objReceiptPackageItemsInfo.ICReceiptPackageItemID > 0)
                    o.FK_ICReceiptPackageItemID = objReceiptPackageItemsInfo.ICReceiptPackageItemID;
                else
                    o.FK_ICReceiptPackageItemID = objReceiptPackageItemsInfo.ICReceiptPackageItemID;
                o.ICReceiptPackageItemQty = objReceiptPackageItemsInfo.ICReceiptPackageItemQty;
                objReceiptPackageItemsInfo.ReceiptPackageItemDetailsList.Add(o);
            });
            entity.DeleteReceiptPackageItemDetailList.ForEach(o =>
            {
                if (objReceiptPackageItemsInfo.FK_APPOPackageItemID > 0)
                {
                    o.FK_APPOPackageItemID = objReceiptPackageItemsInfo.FK_APPOPackageItemID;
                }
                else if (objReceiptPackageItemsInfo.FK_APInvoiceInPackageItemID > 0)
                {
                    o.FK_APInvoiceInPackageItemID = objReceiptPackageItemsInfo.FK_APInvoiceInPackageItemID;
                }
                if (objReceiptPackageItemsInfo.ICReceiptPackageItemID > 0)
                    o.FK_ICReceiptPackageItemID = objReceiptPackageItemsInfo.ICReceiptPackageItemID;
                else
                    o.FK_ICReceiptPackageItemID = objReceiptPackageItemsInfo.ICReceiptPackageItemID;
                objReceiptPackageItemsInfo.DeleteReceiptPackageItemDetailsList.Add(o);
            });
            entity.ReceiptPackageItemList[entity.ReceiptPackageItemList.CurrentIndex] = objReceiptPackageItemsInfo;
            if (entity.ReceiptPackageItemList.GridControl != null)
                entity.ReceiptPackageItemDetailShowList.GridControl.RefreshDataSource();
        }

        public void UpdateItemDetailShowListQty(decimal ICReceiptPackageItemQty)
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptPackageItemDetailsController objReceiptPackageItemDetailsController = new ICReceiptPackageItemDetailsController();
            ICReceiptPackageItemsInfo objReceiptPackageItemsInfo = (ICReceiptPackageItemsInfo)entity.ReceiptPackageItemList[entity.ReceiptPackageItemList.CurrentIndex];
            if (objReceiptPackageItemsInfo.FK_APPOPackageItemID > 0 || objReceiptPackageItemsInfo.FK_APInvoiceInPackageItemID > 0 || objReceiptPackageItemsInfo.ReceiptPackageItemDetailsList == null)
            {
                entity.ReceiptPackageItemDetailShowList.ForEach(o =>
                {
                    if (o.FK_APPOPackageItemID > 0 && o.FK_APPOPackageItemID == objReceiptPackageItemsInfo.FK_APPOPackageItemID)
                        o.ICReceiptPackageItemQty = ICReceiptPackageItemQty;
                    else if (o.FK_APInvoiceInPackageItemID > 0 && o.FK_APInvoiceInPackageItemID == objReceiptPackageItemsInfo.FK_APInvoiceInPackageItemID)
                        o.ICReceiptPackageItemQty = ICReceiptPackageItemQty;
                    else if (o.FK_APPOPackageItemID == objReceiptPackageItemsInfo.FK_APPOPackageItemID)
                        o.ICReceiptPackageItemQty = ICReceiptPackageItemQty;
                });
            }
            else if (objReceiptPackageItemsInfo.ReceiptPackageItemDetailsList != null)
            {
                foreach (ICReceiptPackageItemDetailsInfo objReceiptPackageItemDetailsInfo in objReceiptPackageItemsInfo.ReceiptPackageItemDetailsList)
                {
                    entity.ReceiptPackageItemDetailShowList.ForEach(o =>
                    {
                        if (o.FK_ICReceiptPackageItemID == objReceiptPackageItemsInfo.ICReceiptPackageItemTemporaryID)
                            o.ICReceiptPackageItemQty = ICReceiptPackageItemQty;
                    });
                }
            }
            if (entity.ReceiptPackageItemList.GridControl != null)
                entity.ReceiptPackageItemDetailShowList.GridControl.RefreshDataSource();
        }

        public void SetDefaultReceiptPackageItemList()
        {
            if (IsEditable())
            {
                ActionEdit();
            }
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            if (entity.ReceiptPackageItemList.Count > entity.CountItemsInReceiptPackageItemList)
            {
                entity.CountItemsInReceiptPackageItemList++;
                if (entity.ReceiptPackageItemList[entity.ReceiptPackageItemList.CurrentIndex] != null)
                {
                    entity.ReceiptPackageItemList[entity.ReceiptPackageItemList.CurrentIndex].ICReceiptPackageItemTemporaryID = entity.ReceiptPackageItemList.Count;
                }
            }
            if (entity.ReceiptPackageItemList.GridControl != null)
                entity.ReceiptPackageItemList.GridControl.RefreshDataSource();
        }

        public void InvalidateReportList()
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICProductDetailsController objProductDetailsController = new ICProductDetailsController();
            ICProductsController objProductsController = new ICProductsController();
            entity.ReceiptPackageItemDetailReportList.Clear();
            entity.ReceiptItemsList.ForEach(o =>
            {
                if (o.ICReceiptItemHasProductPackage == false)
                    return;
                ICProductsInfo objProductsInfo = BOSApp.GetProductFromCurrentProductList(o.FK_ICProductID);
                List<ICProductDetailsInfo> productDetailsList = objProductDetailsController.GetListProductDetailByProductID(o.FK_ICProductID);
                if (productDetailsList.Count > 0)
                {
                    productDetailsList.ForEach(x =>
                    {
                        ICReceiptPackageItemDetailsInfo objReceiptPackageItemDetailsInfo = new ICReceiptPackageItemDetailsInfo();
                        objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductNo = objProductsInfo.ICProductNo;
                        objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductName = o.ICReceiptItemProductDesc;
                        objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductDesc = o.ICReceiptItemProductDesc;
                        objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailQty = o.ICReceiptItemProductQty * x.ICProductDetailProductQty;
                        objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailNo = x.ICProductDetailProductNo;
                        objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailName = x.ICProductDetailProductName;
                        objReceiptPackageItemDetailsInfo.ICReceiptItemQty = o.ICReceiptItemProductQty * x.ICProductDetailProductQty;
                        objReceiptPackageItemDetailsInfo.ICReceiptItemPackagedQty1 = 0;
                        entity.ReceiptPackageItemDetailShowList.ForEach(i =>
                        {
                            if (i.ICReceiptPackageItemDetailNo == objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailNo && i.ICReceiptPackageItemDetailFinalProductNo == objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductNo)
                                objReceiptPackageItemDetailsInfo.ICReceiptItemPackagedQty1 += i.ICReceiptPackageItemQty * i.ICReceiptPackageItemDetailQty;
                        });
                        entity.ReceiptPackageItemDetailReportList.Add(objReceiptPackageItemDetailsInfo);
                    });
                }
                else
                {
                    ICReceiptPackageItemDetailsInfo objReceiptPackageItemDetailsInfo = new ICReceiptPackageItemDetailsInfo();
                    objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductNo = objProductsInfo.ICProductNo;
                    objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductName = o.ICReceiptItemProductDesc;
                    objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductDesc = o.ICReceiptItemProductDesc;
                    objReceiptPackageItemDetailsInfo.ICReceiptItemPackagedQty1 = 0;
                    objReceiptPackageItemDetailsInfo.ICReceiptItemQty = o.ICReceiptItemProductQty;
                    entity.ReceiptPackageItemDetailShowList.ForEach(i =>
                    {
                        if (i.ICReceiptPackageItemDetailNo == objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailNo && i.ICReceiptPackageItemDetailFinalProductNo == objReceiptPackageItemDetailsInfo.ICReceiptPackageItemDetailFinalProductNo)
                            objReceiptPackageItemDetailsInfo.ICReceiptItemPackagedQty1 += i.ICReceiptPackageItemQty * i.ICReceiptPackageItemDetailQty;
                    });
                    entity.ReceiptPackageItemDetailReportList.Add(objReceiptPackageItemDetailsInfo);
                }
            });
            if (entity.ReceiptPackageItemDetailReportList.GridControl != null)
                entity.ReceiptPackageItemDetailReportList.GridControl.RefreshDataSource();
        }

        public void PrintQRCodePakage()
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo mainObject = (ICReceiptsInfo)entity.MainObject;
            if (mainObject.ICReceiptStatus != ReceiptStatus.Complete.ToString())
            {
                MessageBox.Show("Vui lòng hoàn tất chứng từ trước khi in!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            RPReceiptPackageItemQRCode report = new RPReceiptPackageItemQRCode();
            ICReceiptPackageItemsController objReceiptPackageItemsController = new ICReceiptPackageItemsController();
            List<ICReceiptPackageItemsInfo> selected = objReceiptPackageItemsController.GetReceiptPackageItemByReceiptID(mainObject.ICReceiptID);
            List<ICReceiptPackageItemsInfo> duplicate = new List<ICReceiptPackageItemsInfo>();
            selected.ForEach(o =>
            {
                o.BarcodeImage = (System.Drawing.Image)EncodingQR(250, 250, o.ICReceiptPackageItemBarCode);
                for (int i = 1; i < o.ICReceiptPackageItemQty; i++)
                {
                    ICReceiptPackageItemsInfo objReceiptPackageItemsInfo = (ICReceiptPackageItemsInfo)o.Clone();
                    duplicate.Add(objReceiptPackageItemsInfo);
                }
            });
            selected = selected.Union(duplicate).OrderBy(o => o.ICReceiptPackageItemBarCode).ToList();
            report.bsReceiptPackageItems.DataSource = selected;
            guiReportPreview reviewer = new guiReportPreview(report, BOSCommon.Constants.Report.DevInvoiceItemReportPath, false);
            reviewer.ShowDialog();
        }

        public void PrintQRCodeProduct()
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo mainObject = (ICReceiptsInfo)entity.MainObject;
            string receiptItemRef = string.Join(",", entity.ReceiptItemsList.Where(o => o.ICReceiptItemProductType == ProductType.Product.ToString() && !o.ICReceiptItemHasProductPackage)
                                                           .Select(o => o.Id.ToString()).ToArray());
            if (string.IsNullOrEmpty(receiptItemRef))
            {
                MessageBox.Show("Không có sản phẩm không kiện. Vui lòng kiểm tra lại!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            guiPrintQRCode guiFind = new guiPrintQRCode(entity.ReceiptItemsList.Where(o => !o.ICReceiptItemHasProductPackage).ToList());
            guiFind.Module = this;
            if (guiFind.ShowDialog() != DialogResult.OK)
            {
                return;
            }
            receiptItemRef = string.Join(",", guiFind.SelectedObjects.Select(o => o.Id.ToString()).ToArray());

            RPReceiptPackageItemQRCodeProduct report = new RPReceiptPackageItemQRCodeProduct();

            ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
            List<ICReceiptItemsInfo> selected = objReceiptItemsController.GetReceiptItemQRCodeProductByRef(receiptItemRef);
            List<ICReceiptItemsInfo> duplicate = new List<ICReceiptItemsInfo>();
            selected.ForEach(o =>
            {
                o.BarcodeImage = (System.Drawing.Image)EncodingQR(250, 250, o.ICReceiptItemProductBarcode);
                for (int i = 1; i < o.ICReceiptItemProductQty; i++)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)o.Clone();
                    duplicate.Add(objReceiptItemsInfo);
                }
            });
            selected = selected.Union(duplicate).OrderBy(o => o.ICReceiptItemProductBarcode).ToList();
            report.bsReceiptItems.DataSource = selected;
            guiReportPreview reviewer = new guiReportPreview(report, BOSCommon.Constants.Report.DevInvoiceItemReportPath, false);
            reviewer.ShowDialog();
        }

        public Bitmap EncodingQR(int width, int height, string inputStringToBarcode)
        {
            BarcodeWriter bw = new BarcodeWriter();
            bw.Format = ZXing.BarcodeFormat.QR_CODE;
            EncodingOptions encOptions = new EncodingOptions() { Width = width, Height = height, Margin = 0 };
            bw.Options = encOptions;
            if (string.IsNullOrEmpty(inputStringToBarcode))
                inputStringToBarcode = " ";
            Bitmap result = new Bitmap(bw.Write(inputStringToBarcode));
            return result;
        }

        public void ChangeHasProductPackage()
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptItemsInfo objReceiptItemsInfo = entity.ReceiptItemsList[entity.ReceiptItemsList.CurrentIndex];
            if (objReceiptItemsInfo == null)
                return;

            if (objReceiptItemsInfo.ICReceiptItemHasProductPackage)
                GenerateProductPackageByReceiptItem(objReceiptItemsInfo);
            else
                RemoveReceiptPackageByReceiptItem(objReceiptItemsInfo);
        }

        public void RemoveReceiptPackageByReceiptItem(ICReceiptItemsInfo objReceiptItemsInfo)
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            entity.ReceiptPackageItemList.RemoveAll(o => o.FK_ICProductID == objReceiptItemsInfo.FK_ICProductID);
            if (entity.ReceiptPackageItemList.GridControl != null)
                entity.ReceiptPackageItemList.GridControl.RefreshDataSource();
        }

        public void GenerateProductPackageByReceiptItem(ICReceiptItemsInfo objReceiptItemsInfo)
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;

            ICReceiptPackageItemsInfo objReceiptPackageItemsInfo = entity.ReceiptPackageItemList.Where(o => o.FK_ICProductID == objReceiptItemsInfo.FK_ICProductID).FirstOrDefault();
            if (objReceiptPackageItemsInfo != null)
                return;

            ICReceiptPackageItemsController objReceiptPackageItemsController = new ICReceiptPackageItemsController();
            List<ICReceiptPackageItemsInfo> receiptPackageItemList = objReceiptPackageItemsController.GenerateProductPackageByProductID(objReceiptItemsInfo.FK_ICProductID
                                                                                                                                        , objReceiptItemsInfo.ICReceiptItemProductQty
                                                                                                                                        , objReceiptItemsInfo.FK_ICReceiptID);

            if (receiptPackageItemList.Count() == 0)
                return;

            entity.ReceiptPackageItemList.AddRange(receiptPackageItemList);
            if (entity.ReceiptPackageItemList.GridControl != null)
                entity.ReceiptPackageItemList.GridControl.RefreshDataSource();
        }

        public void PrintSemiProductReceiptTV()
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            object[] arParam = new object[1];
            arParam[0] = objReceiptsInfo.ICReceiptID;
            ViewReportByTemplate("RPReceiptTV", "GetDataSourceForRPReceiptTV", arParam);
        }

        public string ChangeBatchProductItem(int batchProductItemID)
        {
            string result = string.Empty;
            if (!Toolbar.IsNullOrNoneAction())
            {
                SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
                MMBatchProductItemsController objBatchProductItemsController = new MMBatchProductItemsController();
                MMBatchProductItemsInfo objBatchProductItemsInfo = (MMBatchProductItemsInfo)objBatchProductItemsController.GetItemByBathProductItemID(batchProductItemID);
                if (objBatchProductItemsInfo != null)
                {
                    objReceiptsInfo.FK_ICProductID = objBatchProductItemsInfo.FK_ICProductID;
                    objReceiptsInfo.FK_MMBatchProductItemID = objBatchProductItemsInfo.MMBatchProductItemID;
                    if (objBatchProductItemsInfo.FK_ARCustomerID > 0)
                        objReceiptsInfo.FK_ARCustomerID = objBatchProductItemsInfo.FK_ARCustomerID;
                    result = objBatchProductItemsInfo.MMBatchProductItemProductNo;
                }
            }
            return result;
        }
        #endregion
        public override bool ActionCancelComplete()
        {
            if (!base.ActionCancelComplete()) return false;
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo mainObject = (ICReceiptsInfo)entity.MainObject;
            if (new ICReceiptsController().IsValidInOrderToCancelCompleteSemiProductReceipt(mainObject.ICReceiptID))
            {
                entity.SetPropertyChangeEventLock(false);
                ActionUnPosted();
                mainObject.ICReceiptStatus = ReceiptStatus.New.ToString();
                entity.UpdateMainObject();
                entity.SetPropertyChangeEventLock(true);
                entity.InvalidateMainObject(mainObject.ICReceiptID);
                InvalidateToolbar();
                return true;
            }
            else
            {
                MessageBox.Show(SemiProductReceiptLocalizedResources.ThisDocumentHadShipmentOrWasNotEnoughInventoryQuanty
                    , CommonLocalizedResources.MessageBoxDefaultCaption
                    , MessageBoxButtons.OK
                    , MessageBoxIcon.Error);
                return false;
            }
        }
        public override void ActionDelete()
        {
            if (!Toolbar.IsNullOrNoneAction())
                return;

            base.ActionDelete();
        }
        public void ImportSemiProductReceipt()
        {
            string filePath = string.Empty;
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Filter = SemiProductReceiptLocalizedResources.DialogFilter;
            if (dialog.ShowDialog() == DialogResult.Cancel)
                return;

            filePath = dialog.FileName;
            string extension = Path.GetExtension(filePath);
            string connectionString = @"Provider=Microsoft.Jet.OLEDB.4.0;Data Source='" + filePath + "';Extended Properties=\"Excel 8.0;HDR=YES;\"";
            if (extension.Equals(".xlsx"))
            {
                connectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source='" + filePath + "';Extended Properties=\"Excel 12.0;HDR=YES;\"";
            }
            AAColumnAliasController objColumnAliasController = new AAColumnAliasController();
            List<AAColumnAliasInfo> aliasImportsList = BOSApp.LstColumnAlias.Where(o => o.AATableName == "IPReceiptItems").ToList();
            BOSProgressBar.Start("Đang khởi tạo dữ liệu");
            DataSet ds = GetDataFromExcel(filePath, connectionString);
            List<IPReceiptItemsInfo> importItemList = new List<IPReceiptItemsInfo>();
            try
            {
                MappingToProductReceiptItem(ds.Tables[0], importItemList, aliasImportsList);
            }
            catch (Exception e)
            {
                MessageBox.Show("Có lỗi xảy ra trong quá trình đọc dữ liệu.", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                BOSProgressBar.Close();
                return;
            }
            BOSProgressBar.Close();
            if (!importItemList.Any())
            {
                MessageBox.Show("File không có dữ liệu. Vui lòng kiểm tra lại!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (importItemList.Select(o => o.MMBatchProductNo).Distinct().Count() > 1)
            {
                MessageBox.Show("File đang tồn tại nhiều hơn 1 lệnh sản xuất. Vui lòng kiểm tra lại!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            List<IPReceiptItemsInfo> distinctImportData = importItemList.GroupBy(o => new
            {
                o.ICStockNo,
                o.ICReceiptDate,
                o.ICReceiptType,
                o.MMOperationNo,
                o.ARCustomerName,
                o.MMWorkShopNo,
                o.MMLineNo,
                o.HRDepartmentRoomGroupItemNo,
                o.MMBatchProductNo,
                o.MMBatchProductItemProductSerial,
                o.ICProductForBatchNo,
                o.ICProductNo,
                o.FK_MMOperationID,
                o.FK_MMWorkShopID,
                o.FK_MMLineID,
                o.FK_HRDepartmentRoomGroupItemID,
                o.FK_ACAccountID,
                o.FK_ICStockID,
                o.ICReceiptItemProductSerialNo,
                o.ICReceiptItemLotNo
            }).Select(o => new IPReceiptItemsInfo()
            {
                ICStockNo = o.Key.ICStockNo,
                ICReceiptDate = o.Key.ICReceiptDate,
                ICReceiptType = o.Key.ICReceiptType,
                MMOperationNo = o.Key.MMOperationNo,
                ARCustomerName = o.Key.ARCustomerName,
                MMWorkShopNo = o.Key.MMWorkShopNo,
                MMLineNo = o.Key.MMLineNo,
                HRDepartmentRoomGroupItemNo = o.Key.HRDepartmentRoomGroupItemNo,
                MMBatchProductNo = o.Key.MMBatchProductNo,
                MMBatchProductItemProductSerial = o.Key.MMBatchProductItemProductSerial,
                ICProductForBatchNo = o.Key.ICProductForBatchNo,
                ICProductNo = o.Key.ICProductNo,
                FK_MMOperationID = o.Key.FK_MMOperationID,
                FK_MMWorkShopID = o.Key.FK_MMWorkShopID,
                FK_MMLineID = o.Key.FK_MMLineID,
                FK_HRDepartmentRoomGroupItemID = o.Key.FK_HRDepartmentRoomGroupItemID,
                FK_ACAccountID = o.Key.FK_ACAccountID,
                FK_ICStockID = o.Key.FK_ICStockID,
                ICReceiptItemProductSerialNo = o.Key.ICReceiptItemProductSerialNo,
                ICReceiptItemLotNo = o.Key.ICReceiptItemLotNo,
                ICReceiptItemProductQty = o.Sum(r => r.ICReceiptItemProductQty),
                ICReceiptItemProductUnitCost = o.Max(r => r.ICReceiptItemProductUnitCost)
            }).ToList();
            ActionNewFromImportData(distinctImportData);
        }

        public void ActionNewFromImportData(List<IPReceiptItemsInfo> importItemList)
        {
            ActionNew();
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo mainobject = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            //BOSProgressBar.Start("Đang lấy dữ liệu nguồn");
            bool isHasUnitCost = importItemList.Any(o => o.ICReceiptItemProductUnitCost > 0);
            mainobject.ICReceiptTypeCombo = ReceiptType.SemiProductReceipt.ToString();
            mainobject.ICReceiptCreateFrom = isHasUnitCost ? CreateFrom.ImportBalance.ToString() : CreateFrom.BatchProduct.ToString();
            mainobject.STToolbarActionName = CreateFrom.BatchProduct.ToString();
            this.ToolbarNewActionName = CreateFrom.BatchProduct.ToString();

            string batproductNo = importItemList.Select(o => o.MMBatchProductNo).FirstOrDefault();
            MMBatchProductProductionNormItemsController pnisController = new MMBatchProductProductionNormItemsController();
            List<MMBatchProductProductionNormItemsInfo> pniItemList = pnisController.GetSemiProductItemForImportByBatchProductNo(batproductNo);
            if (!pniItemList.Any())
            {
                MessageBox.Show("Lệnh sản xuất không thể nhập kho. Vui lòng kiểm tra lại!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                ActionCancel();
                return;
            }
            MMOperationsController objOperationsController = new MMOperationsController();
            List<MMOperationsInfo> operationList = objOperationsController.GetAllAliveOperation();
            MMOperationsInfo objOperationsInfo = new MMOperationsInfo();

            MMWorkShopsController objWorkShopsController = new MMWorkShopsController();
            List<MMWorkShopsInfo> workShopList = objWorkShopsController.GetAllWorkShops();
            MMWorkShopsInfo objWorkShopsInfo = new MMWorkShopsInfo();

            MMLinesController objLinesController = new MMLinesController();
            List<MMLinesInfo> lineList = objLinesController.GetAllAliveAndActiveLine();
            MMLinesInfo objLinesInfo = new MMLinesInfo();

            HRDepartmentRoomGroupItemsController objDepartmentRoomGroupItemsController = new HRDepartmentRoomGroupItemsController();
            List<HRDepartmentRoomGroupItemsInfo> hrGroupItemList = objDepartmentRoomGroupItemsController.GetAllDepartmentRoomGroupItemList();
            HRDepartmentRoomGroupItemsInfo objHRDepartmentRoomGroupItemsInfo = new HRDepartmentRoomGroupItemsInfo();

            ICStocksController objStocksController = new ICStocksController();
            List<ICStocksInfo> stockList = objStocksController.GetAllStocks();
            ICStocksInfo objStocksInfo = new ICStocksInfo();
            importItemList.ForEach(item =>
            {
                objOperationsInfo = operationList.Where(o => o.MMOperationNo == item.MMOperationNo).FirstOrDefault();
                objWorkShopsInfo = workShopList.Where(o => o.MMWorkShopNo == item.MMWorkShopNo).FirstOrDefault();
                objLinesInfo = lineList.Where(o => o.MMLineNo == item.MMLineNo).FirstOrDefault();
                objHRDepartmentRoomGroupItemsInfo = hrGroupItemList.Where(o => o.HRDepartmentRoomGroupItemNo == item.HRDepartmentRoomGroupItemNo).FirstOrDefault();
                objStocksInfo = stockList.Where(o => o.ICStockNo == item.ICStockNo).FirstOrDefault();

                item.FK_MMOperationID = objOperationsInfo == null ? 0 : objOperationsInfo.MMOperationID;
                item.FK_MMWorkShopID = objWorkShopsInfo == null ? 0 : objWorkShopsInfo.MMWorkShopID;
                item.FK_MMLineID = objLinesInfo == null ? 0 : objLinesInfo.MMLineID;
                item.FK_HRDepartmentRoomGroupItemID = objHRDepartmentRoomGroupItemsInfo == null ? 0 : objHRDepartmentRoomGroupItemsInfo.HRDepartmentRoomGroupItemID;
                item.FK_ICStockID = objStocksInfo == null ? 0 : objStocksInfo.ICStockID;

                if (!string.IsNullOrEmpty(item.MMBatchProductItemProductSerial) && objOperationsInfo != null)
                {
                    item.ICReceiptItemProductSerialNo = GetSerialNo(item.MMBatchProductItemProductSerial, objOperationsInfo.MMOperationAcronym);
                    item.ICReceiptItemLotNo = GetSerialNo(item.MMBatchProductItemProductSerial, objOperationsInfo.MMOperationAcronym);
                }
            });
            List<ICReceiptItemsInfo> receiptItemList = new List<ICReceiptItemsInfo>();
            ICReceiptItemsInfo objReceiptItemsInfo = new ICReceiptItemsInfo();
            List<MMBatchProductProductionNormItemsInfo> dataItemList = new List<MMBatchProductProductionNormItemsInfo>();

            ICProductsInfo objProductsInfo = new ICProductsInfo();

            decimal totalQty = 0;
            decimal allocationQty = 0;
            importItemList.ForEach(item =>
            {
                dataItemList = pniItemList.Where(o => o.MMBatchProductNo == item.MMBatchProductNo
                                                      && o.ICProductFBNo == item.ICProductForBatchNo
                                                      && o.ICProductNo == item.ICProductNo
                                                      && o.MMBatchProductItemProductSerial == item.MMBatchProductItemProductSerial
                                                      && o.MMOperationNo == item.MMOperationNo).ToList();

                if (!dataItemList.Any())
                    return;

                totalQty = item.ICReceiptItemProductQty;
                allocationQty = 0;

                dataItemList.ForEach(pni =>
                {
                    if (totalQty == 0)
                        return;

                    objReceiptItemsInfo = new ICReceiptItemsInfo();
                    entity.SetValuesAfterValidateProduct(pni.FK_ICProductID, objReceiptItemsInfo);
                    objProductsInfo = BOSApp.GetProductFromCurrentProductList(pni.FK_ICProductID);

                    objReceiptItemsInfo.ICReceiptItemQtyreceived = pni.MMBatchProductProductionNormItemRemainQty;
                    objReceiptItemsInfo.ICReceiptItemProductQty = pni.MMBatchProductProductionNormItemQuantity - objReceiptItemsInfo.ICReceiptItemQtyreceived;

                    objReceiptItemsInfo.ICReceiptItemProductQty = Math.Min(totalQty, objReceiptItemsInfo.ICReceiptItemProductQty);
                    totalQty = totalQty - objReceiptItemsInfo.ICReceiptItemProductQty;

                    objReceiptItemsInfo.ICReceiptItemBPProductionNormItemQty = pni.MMBatchProductProductionNormItemQuantity;
                    entity.SetProductPriceByProductUnitPrice(objReceiptItemsInfo);
                    objReceiptItemsInfo.FK_MMBatchProductID = pni.FK_MMBatchProductID;
                    objReceiptItemsInfo.FK_ARCustomerID = pni.FK_ARCustomerID;
                    objReceiptItemsInfo.FK_MMBatchProductProductionNormItemID = pni.MMBatchProductProductionNormItemID;
                    objReceiptItemsInfo.ICReceiptItemProductLength = pni.MMBatchProductProductionNormItemProductLength;
                    objReceiptItemsInfo.ICReceiptItemProductWidth = pni.MMBatchProductProductionNormItemProductWidth;
                    objReceiptItemsInfo.ICReceiptItemProductHeight = pni.MMBatchProductProductionNormItemProductHeight;
                    objReceiptItemsInfo.ICReceiptItemBlockPerOne = pni.MMBatchProductProductionNormItemBlockPerOne;
                    objReceiptItemsInfo.ICReceiptItemWoodQty = objReceiptItemsInfo.ICReceiptItemProductQty * pni.MMBatchProductProductionNormItemBlockPerOne; // m3 phục vụ TGT
                    objReceiptItemsInfo.FK_ICMeasureUnitID = pni.FK_ICMeasureUnitID;
                    objReceiptItemsInfo.FK_ICProductForBatchID = pni.FK_ICProductForBatchID;

                    objReceiptItemsInfo.FK_ACAccountID = item.FK_ACAccountID;
                    objReceiptItemsInfo.FK_MMOperationID = item.FK_MMOperationID;
                    objReceiptItemsInfo.FK_MMWorkShopID = item.FK_MMWorkShopID;
                    objReceiptItemsInfo.FK_MMLineID = item.FK_MMLineID;
                    objReceiptItemsInfo.FK_HRDepartmentRoomGroupItemID = item.FK_HRDepartmentRoomGroupItemID;
                    objReceiptItemsInfo.ICReceiptItemProductSerialNo = item.ICReceiptItemProductSerialNo;
                    objReceiptItemsInfo.ICReceiptItemLotNo = item.ICReceiptItemLotNo;
                    objReceiptItemsInfo.FK_ICStockID = item.FK_ICStockID;
                    objReceiptItemsInfo.ICReceiptItemProductUnitCost = Math.Round(item.ICReceiptItemProductUnitCost, RoundingNumber.FormatN2, MidpointRounding.AwayFromZero);
                    objReceiptItemsInfo.ICReceiptItemTotalCost = item.ICReceiptItemProductUnitCost * objReceiptItemsInfo.ICReceiptItemProductQty;
                    objReceiptItemsInfo.FK_MMBatchProductItemID = pni.FK_MMBatchProductItemID;
                    objReceiptItemsInfo.ICReceiptItemProductSupplierNo = pni.MMBatchProductProductionNormItemProductSupplierNumber;
                    objReceiptItemsInfo.ICProductName2 = pni.ICProductName2;
                    receiptItemList.Add(objReceiptItemsInfo);
                });
            });

            mainobject.FK_MMOperationID = objReceiptItemsInfo.FK_MMOperationID;
            mainobject.FK_MMBatchProductID = objReceiptItemsInfo.FK_MMBatchProductID;
            mainobject.FK_MMWorkShopID = objReceiptItemsInfo.FK_MMWorkShopID;
            mainobject.FK_MMLineID = objReceiptItemsInfo.FK_MMLineID;
            mainobject.FK_ICStockID = objReceiptItemsInfo.FK_ICStockID;
            mainobject.ICReceiptPackNo = importItemList[0].ICReceiptItemProductSerialNo;
            mainobject.ICReceiptDate = importItemList[0].ICReceiptDate;
            mainobject.FK_ARCustomerID = objReceiptItemsInfo.FK_ARCustomerID;
            entity.ReceiptItemsList.AddRange(receiptItemList);
            if (entity.ReceiptItemsList.GridControl != null)
                entity.ReceiptItemsList.GridControl.RefreshDataSource();

            UpdateTotalCost();
            entity.UpdateMainObjectBindingSource();
        }

        public void MappingToProductReceiptItem(DataTable dt, List<IPReceiptItemsInfo> receiptItemList, List<AAColumnAliasInfo> aliasImportsList)
        {
            IPReceiptItemsInfo objReceiptItemsInfo = new IPReceiptItemsInfo();
            foreach (DataRow row in dt.Rows)
            {
                objReceiptItemsInfo = (IPReceiptItemsInfo)GetObjectFromDataRow(row, objReceiptItemsInfo.GetType(), aliasImportsList);
                if (objReceiptItemsInfo != null && !string.IsNullOrWhiteSpace(objReceiptItemsInfo.ICProductNo))
                    receiptItemList.Add(objReceiptItemsInfo);
            }
        }

        public object GetObjectFromDataRow(DataRow row, Type type, List<AAColumnAliasInfo> aliasList)
        {
            object obj = type.InvokeMember("", System.Reflection.BindingFlags.CreateInstance, null, null, null);
            string columnName = string.Empty;
            AAColumnAliasInfo objColumnAliasInfo = new AAColumnAliasInfo();
            decimal decimalValue = 0;
            bool isConverter = false;
            foreach (DataColumn column in row.Table.Columns)
            {
                isConverter = false;
                object objValue = row[column];
                objColumnAliasInfo = aliasList.Where(o => o.AAColumnAliasCaption.ToLower() == column.ColumnName.ToLower()).FirstOrDefault();
                if (objColumnAliasInfo == null)
                    continue;

                PropertyInfo property = obj.GetType().GetProperty(objColumnAliasInfo.AAColumnAliasName);
                if (property != null)
                    property.SetValue(obj, ToPropertyDataType(column.DataType, property.PropertyType, objValue), null);
            }
            return obj;
        }

        public object ToPropertyDataType(Type fromType, Type toType, object objValue)
        {
            if (toType.Equals(typeof(string)) || toType.Equals(typeof(String)))
            {
                return objValue == null ? string.Empty : objValue.ToString().Trim();
            }
            if (toType.Equals(typeof(DateTime)) && (objValue == null || objValue == System.DBNull.Value))
            {
                return DateTime.Now;
            }
            if (objValue == null)
                return objValue;

            if (fromType.Equals(toType))
                return objValue;

            if (toType.Equals(typeof(decimal)) || toType.Equals(typeof(Decimal)))
            {
                decimal value = 0;
                Decimal.TryParse(objValue.ToString(), out value);
                return Math.Round(value, 5, MidpointRounding.AwayFromZero);
            }
            if (toType.Equals(typeof(int)) || toType.Equals(typeof(Int32)))
            {
                decimal value = 0;
                Decimal.TryParse(objValue.ToString(), out value);
                return (int)value;
            }
            if (toType.Equals(typeof(bool)) || toType.Equals(typeof(Boolean)))
            {
                return !string.IsNullOrWhiteSpace(objValue.ToString());
            }
            return objValue;
        }

        public DataSet GetDataFromExcel(string filePath, string connectionString)
        {
            DataSet ds = new DataSet();
            try
            {
                List<string> sheetNames = new List<string>();
                System.Data.OleDb.OleDbDataAdapter command;

                string commandTemplate = "SELECT * FROM [{0}]";
                string commandRun = string.Empty;
                using (OleDbConnection cn = new OleDbConnection(connectionString))
                {
                    cn.Open();
                    DataTable dt = cn.GetSchema("Tables");
                    foreach (DataRow dr in dt.Rows)
                    {
                        sheetNames.Add(dr["TABLE_NAME"].ToString());
                    }
                    sheetNames.ForEach(o =>
                    {
                        commandRun = string.Format(commandTemplate, o);
                        command = new System.Data.OleDb.OleDbDataAdapter(commandRun, cn);
                        command.TableMappings.Add("Table", o);
                        command.Fill(ds);
                    });
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
            return ds;
        }

        public void ExportTemplate()
        {
            try
            {
                System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
                string filePath = System.Windows.Forms.Application.StartupPath + @"\Template\SemiProductReceipt.xlsx";
                App = new Microsoft.Office.Interop.Excel.ApplicationClass();
                WebClient wc = new WebClient();
                wc.DownloadFile("http://61.28.236.126:81/LamViet3_Live/Updates/Template/SemiProductReceipt.xlsx", filePath);

                WorkBook = App.Workbooks.Open(filePath, 0, true, 5, string.Empty, string.Empty, true, Microsoft.Office.Interop.Excel.XlPlatform.xlWindows, "\t", false, false, 0, true, 1, 0);
                WorkSheet = (Microsoft.Office.Interop.Excel.Worksheet)WorkBook.Worksheets.get_Item(1);
                SaveFileDialog saveDialog = new SaveFileDialog();
                saveDialog.Filter = @"Tệp Excel (*.xls)|*.xls|All files (*.*)|*.*";
                saveDialog.FilterIndex = 2;
                saveDialog.FileName = @"SemiProductReceipt.xls";
                if (saveDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    string fullFileName = saveDialog.FileName;

                    WorkBook.SaveAs(fullFileName, Microsoft.Office.Interop.Excel.XlFileFormat.xlXMLSpreadsheet, System.Reflection.Missing.Value, System.Reflection.Missing.Value, false, false, Microsoft.Office.Interop.Excel.XlSaveAsAccessMode.xlNoChange, Microsoft.Office.Interop.Excel.XlSaveConflictResolution.xlUserResolution, true, System.Reflection.Missing.Value, System.Reflection.Missing.Value, System.Reflection.Missing.Value);
                    WorkBook.Saved = true;
                }
                ReleaseDataImport();
                BOSProgressBar.Close();
            }
            catch (Exception ex)
            {
                ReleaseDataImport();
                BOSProgressBar.Close();
                MessageBox.Show(ex.ToString()
                                            , CommonLocalizedResources.MessageBoxDefaultCaption
                                            , MessageBoxButtons.OK
                                            , MessageBoxIcon.Error);
            }
        }

        public void ReleaseDataImport()
        {
            WorkBook.Close(false, null, null);
            App.Quit();
            ReleaseObject(WorkSheet);
            ReleaseObject(WorkBook);
            ReleaseObject(App);
        }

        private void ReleaseObject(object obj)
        {
            try
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(obj);
                obj = null;
            }
            catch (Exception ex)
            {
                obj = null;
                MessageBox.Show(ex.ToString());
            }
            finally
            {
                GC.Collect();
            }
        }
        public void ChangeUpdatePositionLocation(string updatePositionItemLocationName)
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
                objReceiptsInfo.MMUpdatePositionItemPositionName = updatePositionItemLocationName;
                MMUpdatePositionItemsController objUpdatePositionItemsController = new MMUpdatePositionItemsController();
                entity.ReceiptItemsList.ForEach(o =>
                {
                    MMUpdatePositionItemsInfo objUpdatePositionItemsInfo = (MMUpdatePositionItemsInfo)objUpdatePositionItemsController.GetItemByLocationName(updatePositionItemLocationName, o.FK_ICProductID, o.FK_ICStockID, 0);
                    if (objUpdatePositionItemsInfo != null)
                    {
                        o.FK_MMUpdatePositionItemID = objUpdatePositionItemsInfo.MMUpdatePositionItemID;
                    }
                });
                entity.UpdateMainObjectBindingSource();
            }
        }
        public void CreateUpdatePositionsInfo()
        {
            SemiProductReceiptEntities entity = (SemiProductReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objICReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            if (objICReceiptsInfo.FK_ICStockID == 0)
            {
                BOSApp.ShowMessage("Vui lòng chọn mã kho!");
                return;
            }
            guiAddUpdatePositionItems guiAddUpdatePositionItem = new guiAddUpdatePositionItems(objICReceiptsInfo.FK_ICStockID);
            guiAddUpdatePositionItem.Module = this;
            guiAddUpdatePositionItem.ShowDialog();

        }
    }
    public class RowInfo
    {
        public RowInfo(GridView view, int rowHandle)
        {
            this.RowHandle = rowHandle;
            this.View = view;
        }
        public GridView View;
        public int RowHandle;
    }
    #endregion
}