using BOSCommon;
using BOSCommon.Constants;
using BOSComponent;
using BOSERP.GenaralLeadger;
using BOSLib;
using BOSReport;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraReports.UI;
using DevExpress.XtraTab;
using Localization;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows.Forms;

namespace BOSERP.Modules.ConversionProposal
{
    #region ConversionProposalModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ConversionProposalModule
    //Created Date: 23/03/2022
    //-----------------------------------------------------------
    public class ConversionProposalModule : BaseTransactionModule
    {
        #region Constants
        public const string ConversionProposalItemsGridControlName = "fld_dgcICConversionProposalItems";
        public const string TotalConversionProposalItemsGridControlName = "fld_dgcICConversionProposalItemVMs";
        public const string SearchBranchLookupEditControlName = "fld_lkeFK_BRBranchID";
        #endregion

        #region Public Properties
        public BOSLookupEdit SearchBranchLookupEditControl;
        public List<ADDataViewPermissionsInfo> CurrentModuleDataViewPermissionList;
        public List<BRBranchsInfo> BranchList;
        #endregion

        #region Constructor
        public ConversionProposalModule()
        {
            Name = ModuleName.ConversionProposal;
            CurrentModuleEntity = new ConversionProposalEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();

            GetCurrentModuleDataViewPermission();
            SearchBranchLookupEditControl = (BOSLookupEdit)Controls[SearchBranchLookupEditControlName];
            SearchBranchLookupEditControl.Properties.DataSource = BranchList;
        }

        public void GetCurrentModuleDataViewPermission()
        {
            CurrentModuleDataViewPermissionList = BOSApp.CurrentADDataViewPermissionList.Where(i => i.STModuleName == Name && i.ADDataViewPermissionType == ADDataViewPermissionType.Module).ToList();

            List<int> branchIDList = new List<int>();
            foreach (ADDataViewPermissionsInfo dataViewPermissionsInfo in CurrentModuleDataViewPermissionList)
            {
                branchIDList.Add(dataViewPermissionsInfo.FK_BRBranchID);
            }

            if (branchIDList.Count == 0)
            {
                BranchList = new List<BRBranchsInfo>();
            }
            else
            {
                BRBranchsController objBranchsController = new BRBranchsController();
                List<BRBranchsInfo> branchList = objBranchsController.GetAllBranches();
                BranchList = branchList.Where(i => branchIDList.IndexOf(i.BRBranchID) > -1).ToList();
            }
        }
        #endregion

        #region Local
        public void AddItemToTransferItemsList()
        {
            ConversionProposalEntities entity = (ConversionProposalEntities)CurrentModuleEntity;
            ICConversionProposalsInfo mainObject = (ICConversionProposalsInfo)entity.MainObject;

            ICConversionProposalItemsInfo item = (ICConversionProposalItemsInfo)entity.ModuleObjects[TableName.ICConversionProposalItemsTableName];
            ICProductsController objProductsController = new ICProductsController();
            if (item.FK_ICProductID > 0)
            {
                ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);
                if (objProductsInfo != null)
                {
                    item = ToConversionProposalItemsInfo(objProductsInfo);
                    entity.ConversionProposalItemList.Add(item);
                }
            }
            entity.ConversionProposalItemList.GridControl?.RefreshDataSource();
        }

        private ICConversionProposalItemsInfo ToConversionProposalItemsInfo(ICProductsInfo objProductsInfo)
        {
            ConversionProposalEntities entity = (ConversionProposalEntities)CurrentModuleEntity;
            ICConversionProposalsInfo mainObject = (ICConversionProposalsInfo)entity.MainObject;
            ICConversionProposalItemsInfo objConversionProposalItemsInfo = new ICConversionProposalItemsInfo
            {
                FK_ICProductID = objProductsInfo.ICProductID,
            };
            objConversionProposalItemsInfo.ICConversionProposalItemProductType = objProductsInfo.ICProductType;
            objConversionProposalItemsInfo.ICConversionProposalItemProductNo = objProductsInfo.ICProductNo;
            objConversionProposalItemsInfo.ICConversionProposalItemProductName = objProductsInfo.ICProductName;
            objConversionProposalItemsInfo.ICConversionProposalItemProductDesc = objProductsInfo.ICProductDesc;
            objConversionProposalItemsInfo.ICConversionProposalItemProductNoOfOldSys = objProductsInfo.ICProductNoOfOldSys;
            objConversionProposalItemsInfo.FK_ICMeasureUnitID = objProductsInfo.FK_ICProductBasicUnitID;
            objConversionProposalItemsInfo.FK_ICDepartmentID = objProductsInfo.FK_ICDepartmentID;
            objConversionProposalItemsInfo.FK_ICProductGroupID = objProductsInfo.FK_ICProductGroupID;
            objConversionProposalItemsInfo.FK_ICStockID = mainObject.FK_ICStockID;
            objConversionProposalItemsInfo.ICConversionProposalItemSortOrder = entity.ConversionProposalItemList.Count > 0 ? entity.ConversionProposalItemList.Max(p => p.ICConversionProposalItemSortOrder) + 1 : 1;
            return objConversionProposalItemsInfo;
        }

        public void DeleteItemFromConversionProposalItemList()
        {
            ConversionProposalEntities entity = (ConversionProposalEntities)CurrentModuleEntity;
            entity.ConversionProposalItemList.RemoveSelectedRowObjectFromList();
        }
        public void DeleteTotalItemFromConversionProposalItemList()
        {
            ConversionProposalEntities entity = (ConversionProposalEntities)CurrentModuleEntity;
            ICConversionProposalItemVMsInfo item = entity.TotalConversionProposalItemList[entity.TotalConversionProposalItemList.CurrentIndex];
            if (string.IsNullOrWhiteSpace(item.ICConversionProposalItemRef))
                return;

            List<int> itemRef = item.ICConversionProposalItemRef.Split(',').Select(o => Int32.Parse(o)).ToList();
            itemRef.ForEach(o =>
            {
                entity.ConversionProposalItemList.RemoveAll(s => s.ICConversionProposalItemID == o);
            });
            if (entity.ConversionProposalItemList.GridControl != null)
            {
                entity.ConversionProposalItemList.GridControl.RefreshDataSource();
            }
            entity.TotalConversionProposalItemList.RemoveSelectedRowObjectFromList();
        }

        public override void InvalidateToolbar()
        {
            base.InvalidateToolbar();
            ICConversionProposalsInfo mainObject = (ICConversionProposalsInfo)CurrentModuleEntity.MainObject;
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, true);
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, true);
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonCancelComplete, false);
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, false);

            if (mainObject.ICConversionProposalID > 0)
            {
                if (mainObject.ICConversionProposalStatus == ConversionProposalStatus.Completed.ToString())
                {
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, false);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonCancelComplete, true);
                }
                else if (mainObject.ICConversionProposalStatus == ConversionProposalStatus.New.ToString()
                            && Toolbar.IsEditAction())
                {
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, true);
                }
            }
            if (!Toolbar.IsNullOrNoneAction())
            {
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, false);
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonCancelComplete, false);
            }
        }

        public override int ActionSave()
        {
            ConversionProposalEntities entity = (ConversionProposalEntities)CurrentModuleEntity;
            if (entity.ConversionProposalItemList.Count(o1 => o1.FK_ICStockID == 0) > 0)
            {
                MessageBox.Show(ShipmentSaleOrderLocalizedResources.ChooseStockMessage
                                , CommonLocalizedResources.MessageBoxDefaultCaption
                                , MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return 0;
            }
            
            List<string> errorProducts = new List<string>();
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            foreach (ICConversionProposalItemsInfo item in entity.ConversionProposalItemList)
            {
                objProductsInfo = BOSApp.GetProductFromCurrentProductList(item.FK_ICProductID);
                if (objProductsInfo.ICProductType != ProductType.Service.ToString()
                    && !objProductsInfo.IsAsset
                    && objProductsInfo.ICPriceCalculationMethodMethod != PriceCalculationMethod.Average.ToString()
                    && objProductsInfo.ICProductIsFollowInventoryStock)
                {
                    if (item.FK_ICProductSerieID == 0)
                    {
                        errorProducts.Add(item.ICConversionProposalItemProductNo);
                    }
                }
            }

            if (errorProducts.Count() > 0)
            {
                MessageBox.Show(string.Format(SaleOrderLocalizedResources.ProductSerialIsRequierMessages + Environment.NewLine + "-{0}"
                                        , string.Join("\n-", errorProducts.ToArray()))
                                            , CommonLocalizedResources.MessageBoxDefaultCaption
                                            , MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return 0;
            }
            return base.ActionSave();
        }

        protected override DataSet GetSearchData(ref string searchQuery)
        {
            ICConversionProposalsController objConversionProposalsController = new ICConversionProposalsController();
            ICConversionProposalsInfo searchObject = (ICConversionProposalsInfo)CurrentModuleEntity.SearchObject;

            DataSet ds = new DataSet();
            if (SearchBranchLookupEditControl.EditValue.ToString() == "" || SearchBranchLookupEditControl.EditValue.ToString() == "0")
            {
                if (BranchList.Count == 0)
                {
                    ds = objConversionProposalsController.GetDataSetByID(-1);
                }
                else
                {
                    ds = objConversionProposalsController.GetConversionProposalListByListOfBranchID(searchObject.ICConversionProposalNo,
                                                                                                    searchObject.ICConversionProposalEmployeeRecever,
                                                                                                    searchObject.FK_HREmployeeID,
                                                                                                    searchObject.FK_ICStockID,
                                                                                                    searchObject.ICConversionProposalDateFrom,
                                                                                                    searchObject.ICConversionProposalDateTo,
                                                                                                    BranchList);
                }
            }
            else
            {
                ds = objConversionProposalsController.GetConversionProposalList(searchObject.ICConversionProposalNo,
                                                                                searchObject.ICConversionProposalEmployeeRecever,
                                                                                searchObject.FK_HREmployeeID,
                                                                                searchObject.FK_BRBranchID,
                                                                                searchObject.FK_ICStockID,
                                                                                searchObject.ICConversionProposalDateFrom,
                                                                                searchObject.ICConversionProposalDateTo);
            }
            return ds;
        }
        #endregion

        public void ChangeStock(int stockID)
        {
            ConversionProposalEntities entity = (ConversionProposalEntities)CurrentModuleEntity;
            ICConversionProposalsInfo mainObject = (ICConversionProposalsInfo)entity.MainObject;
            mainObject.FK_ICStockID = stockID;
            if (!Toolbar.IsNullOrNoneAction())
            {
                if (entity.ConversionProposalItemList.Count > 0)
                {
                    if (MessageBox.Show(ConversionProposalLocalizedResources.ConfirmChangeItemStockMessage
                                        , CommonLocalizedResources.MessageBoxDefaultCaption
                                        , MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        foreach (ICConversionProposalItemsInfo item in entity.ConversionProposalItemList)
                        {
                            item.FK_ICStockID = stockID;
                        }
                        entity.ConversionProposalItemList.GridControl?.RefreshDataSource();
                    }
                }
            }
        }

        public string CheckForValidQty(ICTransferItemsInfo item, decimal qty)
        {
            string errMsg = string.Empty;
            ICConversionProposalsInfo mainObject = (ICConversionProposalsInfo)CurrentModuleEntity.MainObject;
            //if (transfer.ICTransferType == TransferType.TransferReceipt.ToString())
            //{
            //    if (qty > item.ICTransferItemProductQtyOld)
            //    {
            //        errMsg = TransferLocalizedResources.ReceiptedQtyCannotBeGreaterThanShippedQtyMessage;
            //    }
            //}
            return errMsg;
        }

        public void ShownInventoryStocks(bool isShowDialog)
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                ConversionProposalEntities entity = (ConversionProposalEntities)CurrentModuleEntity;
                ICConversionProposalsInfo mainObject = (ICConversionProposalsInfo)entity.MainObject;
                ICInventoryStocksInfo objInventoryStocksInfo = new ICInventoryStocksInfo();
                ICInventoryStocksController objInventoryStocksController = new ICInventoryStocksController();
                if (isShowDialog)
                {
                    guiShowProductSeries guiShowInventoryStock = new guiShowProductSeries(mainObject.FK_ICStockID > 0 ? mainObject.FK_ICStockID : 0, isShowDialog);
                    guiShowInventoryStock.Module = this;
                    guiShowInventoryStock.ShowDialog();
                    List<ICProductSeriesInfo> SeriesList = guiShowInventoryStock.ProductSeriesInfoList;
                    if (SeriesList.Count > 0)
                    {
                        GetSelectedSeriesList(SeriesList);
                    }
                }
                else
                {
                    guiShowProductSeries guiShowInventoryStock = new guiShowProductSeries(mainObject.FK_ICStockID > 0 ? mainObject.FK_ICStockID : 0, isShowDialog);
                    guiShowInventoryStock.Module = this;
                    guiShowInventoryStock.Show();
                }    
            }
        }

        public void GetSelectedSeriesList(List<ICProductSeriesInfo> SeriesList)
        {
            ConversionProposalEntities entity = (ConversionProposalEntities)CurrentModuleEntity;            
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            ICConversionProposalItemsInfo objConversionProposalItemsInfo = new ICConversionProposalItemsInfo();
            foreach (ICProductSeriesInfo item in SeriesList)
            {
                objConversionProposalItemsInfo = new ICConversionProposalItemsInfo();
                objProductsInfo = BOSApp.GetProductFromCurrentProductList(item.FK_ICProductID);
                if (objProductsInfo != null)
                {
                    objConversionProposalItemsInfo.ICConversionProposalItemProductType = objProductsInfo.ICProductType;
                    objConversionProposalItemsInfo.ICConversionProposalItemProductNo = objProductsInfo.ICProductNo;
                    objConversionProposalItemsInfo.ICConversionProposalItemProductName = objProductsInfo.ICProductName;
                    objConversionProposalItemsInfo.ICConversionProposalItemProductDesc = objProductsInfo.ICProductDesc;
                    objConversionProposalItemsInfo.ICConversionProposalItemProductNoOfOldSys = objProductsInfo.ICProductNoOfOldSys;
                    objConversionProposalItemsInfo.FK_ICMeasureUnitID = objProductsInfo.FK_ICProductBasicUnitID;
                    objConversionProposalItemsInfo.FK_ICDepartmentID = objProductsInfo.FK_ICDepartmentID;
                    objConversionProposalItemsInfo.FK_ICProductGroupID = objProductsInfo.FK_ICProductGroupID;
                    objConversionProposalItemsInfo.FK_ICProductID = objProductsInfo.ICProductID;
                }
                objConversionProposalItemsInfo.FK_ICProductSerieID = item.ICProductSerieID;
                objConversionProposalItemsInfo.ICConversionProposalItemProductQty = item.ICInventoryStockQuantity;
                objConversionProposalItemsInfo.ICConversionProposalItemWoodQty = item.ICInventoryStockWoodQuantity;
                objConversionProposalItemsInfo.FK_ICStockID = item.FK_ICStockID;
                objConversionProposalItemsInfo.ICConversionProposalItemProductSerialNo = item.ICProductSerieNo;
                objConversionProposalItemsInfo.ICConversionProposalItemProductLotNo = item.ICProductSerieLotNo;
                objConversionProposalItemsInfo.ICConversionProposalItemSupplierName = item.APSupplierName;
                objConversionProposalItemsInfo.ICConversionProposalItemProductHeight = item.ICProductSerieProductHeight;
                objConversionProposalItemsInfo.ICConversionProposalItemProductWidth = item.ICProductSerieProductWidth;
                objConversionProposalItemsInfo.ICConversionProposalItemProductLength = item.ICProductSerieProductLength;
                objConversionProposalItemsInfo.ICConversionProposalItemSortOrder = entity.ConversionProposalItemList.Count > 0 ? entity.ConversionProposalItemList.Max(p => p.ICConversionProposalItemSortOrder) + 1 : 1;
                objConversionProposalItemsInfo.ICConversionProposalItemLocation = item.ICProductSeriePositionName;
                entity.ConversionProposalItemList.Add(objConversionProposalItemsInfo);
            }
            entity.ConversionProposalItemList.GridControl?.RefreshDataSource();
        }

        public string GetAttributeText(string productAttributeRefence)
        {
            ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
            List<ICProductAttributesInfo> productAttributeList = objProductAttributesController.GetProductAttributeByProductAttributeReferenceByCharater(productAttributeRefence, ",");
            if (productAttributeList == null)
                productAttributeList = new List<ICProductAttributesInfo>();
            return string.Join(", ", productAttributeList.Select(o => o.ICProductAttributeNo).ToArray());
        }

        public override void ModuleAfterCancelCompleted()
        {
            base.ModuleAfterCancelCompleted();
            InvalidateToolbar();
        }

        public virtual void SelectSeriesNoDefault(ICConversionProposalItemsInfo item)
        {
            ConversionProposalEntities entity = (ConversionProposalEntities)CurrentModuleEntity;
            item.FK_ICProductSerieID = 0;
            item.ICConversionProposalItemProductSerialNo = string.Empty;
            item.ICConversionProposalItemProductLotNo = string.Empty;
            entity.ConversionProposalItemList.GridControl?.RefreshDataSource();
        }
        public virtual void SelectTotalSeriesNoDefault(ICConversionProposalItemVMsInfo item)
        {
            ConversionProposalEntities entity = (ConversionProposalEntities)CurrentModuleEntity;
            item.FK_ICProductSerieID = 0;
            item.ICConversionProposalItemProductSerialNo = string.Empty;
            item.ICConversionProposalItemProductLotNo = string.Empty;
            entity.TotalConversionProposalItemList.GridControl?.RefreshDataSource();
        }

        public virtual void ChangeItemSerieNo(ICConversionProposalItemsInfo item)
        {
            ConversionProposalEntities entity = (ConversionProposalEntities)CurrentModuleEntity;
            ICConversionProposalsInfo mainObject = (ICConversionProposalsInfo)entity.MainObject;

            decimal unitCost = AccountHelper.GetProductUnitCost(item.FK_ICStockID, item.FK_ICProductID, item.ICConversionProposalItemProductSerialNo, mainObject.ICConversionProposalDate);
            
            //BOSApp.RoundByCurrency(item, objShipmentsInfo.FK_GECurrencyID);
            //entity.ShipmentItemList.GridControl?.RefreshDataSource();
        }
        public virtual void ChangeTotalItemSerieNo(ICConversionProposalItemVMsInfo item)
        {
            ConversionProposalEntities entity = (ConversionProposalEntities)CurrentModuleEntity;
            ICConversionProposalsInfo mainObject = (ICConversionProposalsInfo)entity.MainObject;

            decimal unitCost = AccountHelper.GetProductUnitCost(item.FK_ICStockID, item.FK_ICProductID, item.ICConversionProposalItemProductSerialNo, mainObject.ICConversionProposalDate);

            //BOSApp.RoundByCurrency(item, objShipmentsInfo.FK_GECurrencyID);
            //entity.ShipmentItemList.GridControl?.RefreshDataSource();
        }

        public void CalculatedProductQtyByPackageVolumnConfig()
        {
            ConversionProposalEntities entity = (ConversionProposalEntities)CurrentModuleEntity;
            ICConversionProposalItemsInfo item = entity.ConversionProposalItemList[entity.ConversionProposalItemList.CurrentIndex];
            if (item != null)
            {
                ICProductSeriesInfo objProductSeriesInfo = (ICProductSeriesInfo)(new ICProductSeriesController()).GetObjectByID(item.FK_ICProductSerieID);
                if (objProductSeriesInfo != null)
                {
                    item.ICConversionProposalItemProductLength = objProductSeriesInfo.ICProductSerieProductLength;
                    item.ICConversionProposalItemProductHeight = objProductSeriesInfo.ICProductSerieProductHeight;
                    item.ICConversionProposalItemProductWidth = objProductSeriesInfo.ICProductSerieProductWidth;
                }
                List<ICCalculatedPackageVolumnConfigsInfo> listCalculatedPackageVolumnConfigsList = (new ICCalculatedPackageVolumnConfigsController()).GetAllObjectList();
                ICCalculatedPackageVolumnConfigsInfo objCalculatedPackageVolumnConfigsInfo = listCalculatedPackageVolumnConfigsList.FirstOrDefault(o => o.STModuleName == this.Name);
                ICProductsForViewInfo product = BOSApp.CurrentProductList.FirstOrDefault(o => o.ICProductID == item.FK_ICProductID);
                if (product.ICProductType == ProductType.Lumber.ToString()
                    && objCalculatedPackageVolumnConfigsInfo != null
                    && objCalculatedPackageVolumnConfigsInfo.IsActive
                    && item.ICConversionProposalItemProductLength * item.ICConversionProposalItemProductHeight * item.ICConversionProposalItemProductWidth * item.ICConversionProposalItemWoodQty != 0M)
                {
                    item.ICConversionProposalItemProductQty = item.ICConversionProposalItemProductLength * item.ICConversionProposalItemProductHeight * item.ICConversionProposalItemProductWidth * item.ICConversionProposalItemWoodQty / 1000000000;
                    item.ICConversionProposalItemProductQty = Math.Round(item.ICConversionProposalItemProductQty, RoundingNumber.FormatN6, MidpointRounding.AwayFromZero);
                    entity.ConversionProposalItemList.GridControl?.RefreshDataSource();
                }
            }
        }
        public void CalculatedTotalProductQtyByPackageVolumnConfig()
        {
            ConversionProposalEntities entity = (ConversionProposalEntities)CurrentModuleEntity;
            ICConversionProposalItemVMsInfo item = entity.TotalConversionProposalItemList[entity.TotalConversionProposalItemList.CurrentIndex];
            if (item != null)
            {
                ICProductSeriesInfo objProductSeriesInfo = (ICProductSeriesInfo)(new ICProductSeriesController()).GetObjectByID(item.FK_ICProductSerieID);
                if (objProductSeriesInfo != null)
                {
                    item.ICConversionProposalItemProductLength = objProductSeriesInfo.ICProductSerieProductLength;
                    item.ICConversionProposalItemProductHeight = objProductSeriesInfo.ICProductSerieProductHeight;
                    item.ICConversionProposalItemProductWidth = objProductSeriesInfo.ICProductSerieProductWidth;
                }
                List<ICCalculatedPackageVolumnConfigsInfo> listCalculatedPackageVolumnConfigsList = (new ICCalculatedPackageVolumnConfigsController()).GetAllObjectList();
                ICCalculatedPackageVolumnConfigsInfo objCalculatedPackageVolumnConfigsInfo = listCalculatedPackageVolumnConfigsList.FirstOrDefault(o => o.STModuleName == this.Name);
                ICProductsForViewInfo product = BOSApp.CurrentProductList.FirstOrDefault(o => o.ICProductID == item.FK_ICProductID);
                if (product.ICProductType == ProductType.Lumber.ToString()
                    && objCalculatedPackageVolumnConfigsInfo != null
                    && objCalculatedPackageVolumnConfigsInfo.IsActive
                    && item.ICConversionProposalItemProductLength * item.ICConversionProposalItemProductHeight * item.ICConversionProposalItemProductWidth * item.ICConversionProposalItemWoodQty != 0M)
                {
                    item.ICConversionProposalItemProductQty = item.ICConversionProposalItemProductLength * item.ICConversionProposalItemProductHeight * item.ICConversionProposalItemProductWidth * item.ICConversionProposalItemWoodQty / 1000000000;
                    item.ICConversionProposalItemProductQty = Math.Round(item.ICConversionProposalItemProductQty, RoundingNumber.FormatN6, MidpointRounding.AwayFromZero);
                    entity.TotalConversionProposalItemList.GridControl?.RefreshDataSource();
                }
            }
        }
        public void ActionNewFromAllocationPlan()
        {
            ActionNew();
            
            guiAllocationPlanItems guiFind = new guiAllocationPlanItems();
            guiFind.Module = this;
            guiFind.AllocationPlanItemGroup = AllocationPlanItemGroup.Material.ToString();
            guiFind.Show();
        }
        public void AddAllocationItemToItemsList(List<MMAllocationPlanItemsInfo> list)
        {
            ConversionProposalEntities entity = (ConversionProposalEntities)CurrentModuleEntity;
            ICConversionProposalsInfo mainObject = (ICConversionProposalsInfo)entity.MainObject;
            mainObject.FK_ICStockID = list[0].FK_ICStockID;
            List<ICConversionProposalItemsInfo> listConversionProposal = new List<ICConversionProposalItemsInfo>();
            ICConversionProposalItemsInfo objConversionProposalsInfo = new ICConversionProposalItemsInfo();
            list.ForEach(o =>
            {
                objConversionProposalsInfo = ToConversionProposals(o);
                entity.SetProductCostByProductUnitCost(objConversionProposalsInfo);
                listConversionProposal.Add(objConversionProposalsInfo);
            });
            entity.ConversionProposalItemList.AddRange(listConversionProposal);
            if (entity.ConversionProposalItemList.GridControl != null)
            {
                entity.ConversionProposalItemList.GridControl.RefreshDataSource();
            }
            List<ICConversionProposalItemVMsInfo> totalList = entity.GenerateTotalConversionProposals(listConversionProposal);
            entity.TotalConversionProposalItemList.AddRange(totalList);
            if (entity.TotalConversionProposalItemList.GridControl != null)
            {
                entity.TotalConversionProposalItemList.GridControl.RefreshDataSource();
            }
        }
        public ICConversionProposalItemsInfo ToConversionProposals(MMAllocationPlanItemsInfo item)
        {
            ConversionProposalEntities entity = (ConversionProposalEntities)CurrentModuleEntity;
            ICConversionProposalsInfo mainObject = (ICConversionProposalsInfo)entity.MainObject;
            ICConversionProposalItemsInfo objConversionProposalsInfo = new ICConversionProposalItemsInfo();
            ICProductSeriesController objProductSeriesController = new ICProductSeriesController();
            BOSUtil.CopyObject(item, objConversionProposalsInfo);
            objConversionProposalsInfo.FK_ICProductID = item.FK_ICProductID;
            objConversionProposalsInfo.FK_MMAllocationPlanID = item.FK_MMAllocationPlanID;
            objConversionProposalsInfo.FK_MMAllocationPlanItemID = item.Id;
            objConversionProposalsInfo.FK_ICMeasureUnitID = item.FK_ICMeasureUnitID;
            objConversionProposalsInfo.FK_ICStockID = item.FK_ICStockID;
            objConversionProposalsInfo.ICConversionProposalItemProductName = item.MMAllocationPlanItemProductName;
            objConversionProposalsInfo.ICConversionProposalItemProductDesc = item.MMAllocationPlanItemProductDesc;
            objConversionProposalsInfo.ICConversionProposalItemWoodQty = item.MMAllocationPlanItemWoodQty;
            objConversionProposalsInfo.ICConversionProposalItemAllocationPlanWoodQty = item.MMAllocationPlanItemInventoryStock;
            objConversionProposalsInfo.ICConversionProposalItemProductQty = item.MMAllocationPlanItemQty;
            objConversionProposalsInfo.ICConversionProposalItemComment = item.MMAllocationPlanItemSplitComment;
            objConversionProposalsInfo.ICConversionProposalItemProductSerialNo = item.MMAllocationPlanItemProductSerialNo;
            objConversionProposalsInfo.FK_ICProductSerieID = item.FK_ICProductSerieID;
            objConversionProposalsInfo.ICSemiProductSizeAndSpecifiCations = item.ICSemiProductSizeAndSpecifiCations;
            objConversionProposalsInfo.ICProductName2 = item.ICProductName2;
            objConversionProposalsInfo.ICConversionProposalItemRemainQty = item.MMAllocationPlanItemBPNormRemainQty;
            objConversionProposalsInfo.ICConversionProposalItemSplitRate = 1M;
            objConversionProposalsInfo.ICConversionProposalItemAllocationPlanLength = item.MMAllocationPlanItemLength;
            objConversionProposalsInfo.ICConversionProposalItemProductNoOfOldSys = item.ICProductNoOfOldSys;
            objConversionProposalsInfo.ICConversionProposalItemLocation = item.MMAllocationPlanItemPositionName;

            ICProductSeriesInfo objProductSeriesInfo = (ICProductSeriesInfo)objProductSeriesController.GetObjectByID(objConversionProposalsInfo.FK_ICProductSerieID);
            if (objProductSeriesInfo != null)
            {
                objConversionProposalsInfo.ICConversionProposalItemProductLength = objProductSeriesInfo.ICProductSerieProductLength;
                objConversionProposalsInfo.ICConversionProposalItemProductWidth = objProductSeriesInfo.ICProductSerieProductWidth;
                objConversionProposalsInfo.ICConversionProposalItemProductHeight = objProductSeriesInfo.ICProductSerieProductHeight;
                objConversionProposalsInfo.ICConversionProposalItemProductLotNo = objProductSeriesInfo.ICProductSerieLotNo;
                
            }
            //objConversionProposalsInfo.ICConversionProposalItemProductLength = item.MMAllocationPlanItemLength;
            //objConversionProposalsInfo.ICConversionProposalItemProductWidth = item.MMAllocationPlanItemWidth;
            //objConversionProposalsInfo.ICConversionProposalItemProductHeight = item.MMAllocationPlanItemHeight;
            objConversionProposalsInfo.ICConversionProposalItemSupplierName = item.APSupplierName;
            return objConversionProposalsInfo;
        }
        public override void InvalidateSerieColumn(GridColumn column, BusinessObject item, string itemTableName)
        {
            BOSDbUtil dbUtil = new BOSDbUtil();
            String mainTableName = BOSUtil.GetTableNameFromBusinessObject(CurrentModuleEntity.MainObject);

            String columnName = mainTableName.Substring(0, mainTableName.Length - 1) + "Date";
            DateTime date = Convert.ToDateTime(dbUtil.GetPropertyValue(CurrentModuleEntity.MainObject, columnName));
            ICProductSeriesController objProductSeriesController = new ICProductSeriesController();
            int productID = dbUtil.GetPropertyIntValue(item, "FK_ICProductID");
            int stockID = dbUtil.GetPropertyIntValue(item, "FK_ICStockID");

            columnName = itemTableName.Substring(0, itemTableName.Length - 1) + "ProductDesc";
            string desc = dbUtil.GetPropertyStringValue(item, columnName);

            columnName = itemTableName.Substring(0, itemTableName.Length - 1) + "IsSpecificCalculation";
            bool isSpecificCalculation = Convert.ToBoolean(dbUtil.GetPropertyValue(item, columnName));

            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(productID);
            if (objProductsInfo == null)
                return;

            //RepositoryItemComboBox rep = new RepositoryItemComboBox();
            RepositoryItemBOSLookupEdit rep = new RepositoryItemBOSLookupEdit();
            rep.ValueMember = "ICProductSerieNo";
            rep.DisplayMember = "ICProductSerieNo";
            rep.NullText = String.Empty;
            rep.TextEditStyle = TextEditStyles.Standard;
            rep.SearchMode = SearchMode.AutoFilter;

            LookUpColumnInfo colLKE = new LookUpColumnInfo();
            colLKE.FieldName = "ICProductSerieNo";
            AAColumnAliasInfo columnAliasInfo = BOSApp.LstColumnAlias.Where(o => o.AAColumnAliasName == "ICProductSerieNo").FirstOrDefault();
            colLKE.Caption = "Mã lô/ kiện";
            //colLKE.Width = 100;
            rep.Columns.Add(colLKE);

            colLKE = new LookUpColumnInfo();
            colLKE.FieldName = "ICInventoryStockQuantity";
            columnAliasInfo = BOSApp.LstColumnAlias.Where(o => o.AAColumnAliasName == "ICInventoryStockQuantity").FirstOrDefault();
            colLKE.Caption = columnAliasInfo != null ? columnAliasInfo.AAColumnAliasCaption : "Số lượng/ khối lượng";
            //colLKE.Width = 100;
            rep.Columns.Add(colLKE);

            colLKE = new LookUpColumnInfo();
            colLKE.FieldName = "ICInventoryStockWoodQuantity";
            columnAliasInfo = BOSApp.LstColumnAlias.Where(o => o.AAColumnAliasName == "ICInventoryStockWoodQuantity").FirstOrDefault();
            colLKE.Caption = columnAliasInfo != null ? columnAliasInfo.AAColumnAliasCaption : "Số thanh/ tấm";
            //colLKE.Width = 100;
            rep.Columns.Add(colLKE);


            colLKE = new LookUpColumnInfo();
            colLKE.FieldName = "ICProductSerieProductHeight";
            columnAliasInfo = BOSApp.LstColumnAlias.Where(o => o.AAColumnAliasName == "ICProductSerieProductHeight").FirstOrDefault();
            colLKE.Caption = columnAliasInfo != null ? columnAliasInfo.AAColumnAliasCaption : "Dày";
            //colLKE.Width = 100;
            rep.Columns.Add(colLKE);


            colLKE = new LookUpColumnInfo();
            colLKE.FieldName = "ICProductSerieProductWidth";
            columnAliasInfo = BOSApp.LstColumnAlias.Where(o => o.AAColumnAliasName == "ICProductSerieProductWidth").FirstOrDefault();
            colLKE.Caption = columnAliasInfo != null ? columnAliasInfo.AAColumnAliasCaption : "Rộng";
            //colLKE.Width = 100;
            rep.Columns.Add(colLKE);


            colLKE = new LookUpColumnInfo();
            colLKE.FieldName = "ICProductSerieProductLength";
            columnAliasInfo = BOSApp.LstColumnAlias.Where(o => o.AAColumnAliasName == "ICProductSerieProductLength").FirstOrDefault();
            colLKE.Caption = columnAliasInfo != null ? columnAliasInfo.AAColumnAliasCaption : "Dài";
            //colLKE.Width = 100;
            rep.Columns.Add(colLKE);


            if ((objProductsInfo.ICPriceCalculationMethodMethod == PriceCalculationMethod.Average.ToString() && isSpecificCalculation)
                || objProductsInfo.ICPriceCalculationMethodMethod == PriceCalculationMethod.Specific.ToString())
            {
                List<ICProductSeriesInfo> series = objProductSeriesController.GetSeriesByProductIDAndStockID(productID, stockID, desc, date);
                if (series.Count > 0)
                {
                    series.Insert(0, new ICProductSeriesInfo());
                }
                rep.DataSource = series;
            }
            rep.BestFitMode = BestFitMode.BestFitResizePopup;
            rep.BestFit();
            column.ColumnEdit = rep;
        }
        public void ChangeItemVM(ICConversionProposalItemVMsInfo item)
        {
            ConversionProposalEntities entity = (ConversionProposalEntities)CurrentModuleEntity;
            List<int> itemRef = item.ICConversionProposalItemRef.Split(',').Select(o => Int32.Parse(o)).ToList();
            List<ICConversionProposalItemsInfo> shipmentItemList = entity.ConversionProposalItemList.Where(o => itemRef.Contains(o.ICConversionProposalItemID)).ToList();
            ICInventoryStocksController objInventoryStocksController = new ICInventoryStocksController();
            ICInventoryStocksInfo objInventoryStocksInfo = objInventoryStocksController.GetInventoryStockByStockIDAndProductIDAndSerieID(item.FK_ICStockID, item.FK_ICProductID, item.FK_ICProductSerieID);
            SynsItemData(item, shipmentItemList, objInventoryStocksInfo);
            if (entity.ConversionProposalItemList.GridControl != null)
            {
                entity.ConversionProposalItemList.GridControl.RefreshDataSource();
            }
            //UpdateDocumentEntries();
        }
        public void SynsItemData(ICConversionProposalItemVMsInfo item, List<ICConversionProposalItemsInfo> shipmentItemList, ICInventoryStocksInfo objInventoryStocksInfo = null)
        {
            ConversionProposalEntities entity = (ConversionProposalEntities)CurrentModuleEntity;
            ICConversionProposalsInfo mainobject = (ICConversionProposalsInfo)CurrentModuleEntity.MainObject;
            shipmentItemList.ForEach(o =>
            {
                //o.FK_MMWorkShopID = item.FK_MMWorkShopID;
                //o.FK_MMLineID = item.FK_MMLineID;
                //o.FK_HRDepartmentRoomGroupItemID = item.FK_HRDepartmentRoomGroupItemID;
                o.FK_ICMeasureUnitID = item.FK_ICMeasureUnitID;
                o.FK_ICProductSerieID = item.FK_ICProductSerieID;
                o.ICConversionProposalItemProductSerialNo = item.ICConversionProposalItemProductSerialNo;
                o.ICConversionProposalItemComment = item.ICConversionProposalItemComment;
                o.ICConversionProposalItemProductLotNo = item.ICConversionProposalItemProductLotNo;
                if (objInventoryStocksInfo != null && !string.IsNullOrEmpty(o.ICConversionProposalItemProductSerialNo))
                {
                    o.ICConversionProposalItemProductSerialNo = objInventoryStocksInfo.ICProductSerieNo;
                    o.ICConversionProposalItemProductLotNo = objInventoryStocksInfo.ICProductSerieLotNo;

                    o.ICConversionProposalItemProductLength = objInventoryStocksInfo.ICProductSerieProductLength;
                    o.ICConversionProposalItemProductWidth = objInventoryStocksInfo.ICProductSerieProductWidth;
                    o.ICConversionProposalItemProductHeight = objInventoryStocksInfo.ICProductSerieProductHeight;
                }
                o.FK_ICStockID = item.FK_ICStockID;
                entity.SetProductPriceByProductUnitPrice(o);
            });
        }
    }
    #endregion
}