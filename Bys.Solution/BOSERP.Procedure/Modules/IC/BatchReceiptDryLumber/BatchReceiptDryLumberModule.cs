using BOSCommon;
using BOSCommon.Constants;
using BOSComponent;
using BOSERP.GenaralLeadger;
using BOSERP.Modules.IC.BatchReceiptDryLumber.Localization;
using BOSLib;
using BOSReport;
using DevExpress.XtraReports.UI;
using Localization;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows.Forms;
//using BOSERP.Modules.IC.BatchReceiptDryLumber.Localization;
//using BOSERP.Modules.IC.BatchReceiptLumber.Localization;

namespace BOSERP.Modules.BatchReceiptDryLumber
{
    #region BatchReceiptDryLumberModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:BatchReceiptDryLumberModule
    //Created Date:Saturday, May 31, 2008
    //-----------------------------------------------------------

    public class BatchReceiptDryLumberModule : GLReceiptModule
    {
        #region Constants
        public const string ReceiptItemGridControlName = "fld_dgcReceiptItems";
        public const string DocumentEntryGridControlName = "fld_dgcACDocumentEntrys";
        public const string OperationLookupEditControlName = "fld_lkeFK_MMOperationID";
        public const string UpdatePositionItemsControlName = "fld_lkeMMUpdatePositionItemID";
        #endregion

        #region Variable
        #endregion

        #region Public properties
        public BOSLookupEdit OperationLookupEditControl = null;
        public BOSLookupEdit UpdatePositionItemControl;
        //bool flag = false;
        //bool isnewfrom = false;
        #endregion

        public BatchReceiptDryLumberModule()
        {
            Name = "BatchReceiptDryLumber";
            CurrentModuleEntity = new BatchReceiptDryLumberEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();

            InitializeOperationlookupDataSource();
            StartGettingInventoryThread();
            UpdatePositionItemControl = (BOSLookupEdit)Controls[UpdatePositionItemsControlName];
            MMUpdatePositionItemsController objUpdatePosititonsController = new MMUpdatePositionItemsController();
            List<MMUpdatePositionItemsInfo> listUpdatePositions = objUpdatePosititonsController.GetAllLocationName();
            UpdatePositionItemControl.Properties.DataSource = listUpdatePositions;
        }

        public override void ActionNew()
        {
            base.ActionNew();
            BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            objReceiptsInfo.ICReceiptAcceptanceType = ReceiptAcceptanceType.None.ToString();

            SetDefaultEmployee();
            //SetDefaultStock();
            GenerateAccountingData();
            DisplayLabelText(CurrentModuleEntity.MainObject);

            //EnableControl(true);
        }

        private void InitializeOperationlookupDataSource()
        {
            //Công đoạn
            OperationLookupEditControl = (BOSLookupEdit)Controls[OperationLookupEditControlName];
            MMOperationsController objOperationsController = new MMOperationsController();
            List<MMOperationsInfo> objOperationsList = objOperationsController.GetOperationListForProductionCost();
            OperationLookupEditControl.Properties.DataSource = objOperationsList;
        }

        public void ActionNewFromBatchShipmentFreshLumber()
        {
            ActionNew();
            ShowBatchShipmentFreshLumber();
        }
        public override void ActionCancel()
        {
            base.ActionCancel();
            // flag = false;
            //isnewfrom = false;
        }
        protected override DataSet GetSearchData(ref string searchQuery)
        {
            ICReceiptsController objReceiptsController = new ICReceiptsController();
            ICReceiptsInfo searchObject = (ICReceiptsInfo)CurrentModuleEntity.SearchObject;
            DataSet ds = objReceiptsController.GetReceiptListForBatchReceiptDryLumberModule(searchObject.ICReceiptNo,
                                                                    null,
                                                                    null,
                                                                    searchObject.FK_ICStockID,
                                                                    searchObject.FK_HREmployeeID,
                                                                    searchObject.ReceiptDateFrom,
                                                                    searchObject.ReceiptDateTo);
            return ds;
        }
        //Change show Shown From BatchShipmentHeat
        public void ShowBatchShipmentFreshLumber()
        {
            BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            ICReceiptsInfo oldReceipts = (ICReceiptsInfo)CurrentModuleEntity.MainObject.Clone();
            ICReceiptItemsInfo objReceiptItemsInfo = new ICReceiptItemsInfo();
            ICShipmentsController objShipmentController = new ICShipmentsController();
            ICShipmentsInfo objShipmentsInfo = new ICShipmentsInfo();
            ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
            List<ICShipmentItemsInfo> ShipmentItemList = new List<ICShipmentItemsInfo>();
            ShipmentItemList = objShipmentItemsController.GetBatchShipmentForReceipt(objReceiptsInfo.FK_MMBatchProductID, objReceiptsInfo.FK_ICProductID);
            List<ICShipmentItemsInfo> shipmentItemCheck = new List<ICShipmentItemsInfo>();
            MMBatchProductsInfo objBatchProductsInfo = new MMBatchProductsInfo();
            MMBatchProductsController objBatchProductsController = new MMBatchProductsController();
            DateTime fromdate = DateTime.MinValue;
            guiChooseDate chooseDate = new guiChooseDate();
            chooseDate.Module = this;
            chooseDate.ShowDialog();
            if (chooseDate.DialogResult == DialogResult.OK)
            {
                fromdate = chooseDate.FromDate;


                ShipmentItemList = objShipmentItemsController.GetBatchShipmentFreshLumberItemForReceipt(fromdate);

                if (ShipmentItemList != null)
                {
                    guiFind<ICShipmentItemsInfo> guiFind = new guiFind<ICShipmentItemsInfo>(TableName.ICShipmentItemsTableName,
                                                                                                    ShipmentItemList,
                                                                                                    this,
                                                                                                    true,
                                                                                                    true,
                                                                                                    new string[] { "ICShipmentNo" },
                                                                                                    null,
                                                                                                    true);
                    guiFind.ShowDialog();
                    if (guiFind.DialogResult == DialogResult.OK)
                    {
                        objShipmentsInfo = (ICShipmentsInfo)objShipmentController.GetObjectByID(guiFind.SelectedObjects[0].FK_ICShipmentID);
                        if (objShipmentsInfo != null)
                        {
                            objBatchProductsInfo = (MMBatchProductsInfo)objBatchProductsController.GetObjectByID(objShipmentsInfo.FK_MMBatchProductID);
                            int stockID = objReceiptsInfo.FK_ICStockID;
                            BOSUtil.CopyObject(objShipmentsInfo, objReceiptsInfo);
                            objReceiptsInfo.ICReceiptPackNo = App.DefaultPackNo;
                            objReceiptsInfo.FK_ICStockID = stockID;
                            objReceiptsInfo.ICReceiptStatus = oldReceipts.ICReceiptStatus;
                            objReceiptsInfo.FK_ICProductAttributeWoodTypeID = objShipmentsInfo.FK_ICProductAttributeWoodTypeID;
                            objReceiptsInfo.FK_ICProductAttributeTTMTID = objShipmentsInfo.FK_ICProductAttributeTTMTID;
                            objReceiptsInfo.FK_MMBatchProductID = objShipmentsInfo.FK_MMBatchProductID;
                            objReceiptsInfo.FK_MMOperationID = objShipmentsInfo.FK_MMOperationID;
                            objReceiptsInfo.FK_GECountryID = objShipmentsInfo.FK_GECountryID;
                            objReceiptsInfo.ICReceiptContainerNo = objShipmentsInfo.ICShipmentContainerNo;
                            DisplayLabelText(objReceiptsInfo);
                            CurrentModuleEntity.UpdateMainObjectBindingSource();
                        }
                        //Choose first sale order as a template
                        List<ICShipmentItemsInfo> selectedShipmentItems = guiFind.SelectedObjects as List<ICShipmentItemsInfo>;
                        if (selectedShipmentItems != null && selectedShipmentItems.Count > 0)
                        {
                            foreach (ICShipmentItemsInfo item in selectedShipmentItems)
                            {
                                GetSelectedItemFromBatchShipmentFreshLumber(item);
                            }
                            UpdateTotalCost();
                            entity.ReceiptItemsList.GridControl.RefreshDataSource();
                        }
                    }
                    else
                        ActionCancel();
                }
            }
            else
                ActionCancel();
        }

        public void ActionNewFromBatchLumber()
        {
            ActionNew();
            BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            ICReceiptsInfo oldReceipts = (ICReceiptsInfo)CurrentModuleEntity.MainObject.Clone();
            ICShipmentsInfo objShipmentsInfo = new ICShipmentsInfo();
            ICShipmentsController objShipmentController = new ICShipmentsController();
            ICShipmentItemsInfo objShipmentItemInfo = new ICShipmentItemsInfo();
            ICShipmentItemsController objShipmentItemController = new ICShipmentItemsController();
            //  MMBatchProductsInfo objBatchProductsInfo = new MMBatchProductsInfo();
            MMBatchProductsController objBatchProductsController = new MMBatchProductsController();
            List<ICShipmentItemsInfo> listShipmentItem = new List<ICShipmentItemsInfo>();

            listShipmentItem = objShipmentItemController.GetShipment_BatchLumber();
            guiFind<ICShipmentItemsInfo> guiShipmentItem = new guiFind<ICShipmentItemsInfo>(TableName.ICShipmentItemsTableName,
                                                                                            listShipmentItem,
                                                                                            this,
                                                                                            true,
                                                                                            true,
                                                                                            new string[] { "MMBatchProductNo", "ICShipmentNo" });
            guiShipmentItem.ShowDialog();
            if (guiShipmentItem.DialogResult == DialogResult.OK)
            {
                List<ICShipmentItemsInfo> templateListShipment = (List<ICShipmentItemsInfo>)guiShipmentItem.SelectedObjects;
                if (guiShipmentItem.SelectedObjects != null && guiShipmentItem.SelectedObjects.Count > 0)
                {
                    listShipmentItem = templateListShipment.Where(x => x.FK_MMBatchProductID != guiShipmentItem.SelectedObjects[0].FK_MMBatchProductID).ToList();
                }
                if (listShipmentItem != null && listShipmentItem.Count > 0)
                {
                    MessageBox.Show(BatchReceiptDryLumberLocalizedResources.ChooseMultiBatchProduct,
                                    CommonLocalizedResources.MessageBoxDefaultCaption,
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                    ActionCancel();
                    ActionNewFromBatchLumber();
                }
                else
                {
                    objShipmentsInfo = (ICShipmentsInfo)objShipmentController.GetObjectByID(guiShipmentItem.SelectedObjects[0].FK_ICShipmentID);
                    if (objShipmentsInfo != null)
                    {
                        // objBatchProductsInfo = (MMBatchProductsInfo)objBatchProductsController.GetObjectByID(objShipmentsInfo.FK_MMBatchProductID);
                        int stockID = objReceiptsInfo.FK_ICStockID;
                        BOSUtil.CopyObject(objShipmentsInfo, objReceiptsInfo);
                        objReceiptsInfo.ICReceiptNo = "***NEW***";
                        objReceiptsInfo.ICReceiptTypeCombo = ReceiptType.DryLumberReceipt.ToString();
                        objReceiptsInfo.FK_ICStockID = stockID;
                        objReceiptsInfo.ICReceiptStatus = oldReceipts.ICReceiptStatus;
                        objReceiptsInfo.FK_ICProductAttributeWoodTypeID = objShipmentsInfo.FK_ICProductAttributeWoodTypeID;
                        objReceiptsInfo.FK_ICProductAttributeTTMTID = objShipmentsInfo.FK_ICProductAttributeTTMTID;
                        //objReceiptsInfo.FK_MMBatchProductID = objBatchProductsInfo.MMBatchProductID;
                        objReceiptsInfo.FK_MMOperationID = objShipmentsInfo.FK_MMOperationID;
                        objReceiptsInfo.FK_GECountryID = objShipmentsInfo.FK_GECountryID;
                        objReceiptsInfo.ICReceiptContainerNo = objShipmentsInfo.ICShipmentContainerNo;
                        DisplayLabelText(objReceiptsInfo);
                        CurrentModuleEntity.UpdateMainObjectBindingSource();
                    }
                    foreach (ICShipmentItemsInfo item in guiShipmentItem.SelectedObjects)
                    {
                        GetSelectedItemFromBatchShipmentFreshLumber(item);
                    }
                    entity.ReceiptItemsList.GridControl.RefreshDataSource();
                    UpdateTotalCost();
                }
            }
            else ActionCancel();

        }

        public void GetSelectedItemFromBatchShipmentFreshLumber(ICShipmentItemsInfo objShipmentItemsInfo)
        {
            BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            //ICProductSeriesController objProductSeriesController = new ICProductSeriesController();
            //ICProductSeriesInfo objProductSeriesInfo;
            if (objShipmentItemsInfo != null)
            {
                ICReceiptItemsInfo objReceiptItemsInfo = new ICReceiptItemsInfo();
                objReceiptItemsInfo.FK_ICProductID = objShipmentItemsInfo.FK_ICProductID;
                objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(objShipmentItemsInfo.FK_ICProductID);
                if (objProductsInfo != null)
                {
                    objReceiptItemsInfo.ICReceiptItemProductDesc = objProductsInfo.ICProductDesc;
                    //hạt code
                    objReceiptItemsInfo.ICReceiptItemProductType = ReceiptProductType.DryLumber.ToString();
                }
                BOSUtil.CopyObject(objShipmentItemsInfo, objReceiptItemsInfo);
                objReceiptItemsInfo.FK_ICStockID = objReceiptInfo.FK_ICStockID;
                objReceiptItemsInfo.ICReceiptItemProductName = objShipmentItemsInfo.ICShipmentItemProductName;
                objReceiptItemsInfo.FK_ICProductAttributeWoodTypeID = objShipmentItemsInfo.FK_ICProductAttributeWoodTypeID;
                objReceiptItemsInfo.FK_ICProductAttributeTTMTID = objShipmentItemsInfo.FK_ICProductAttributeTTMTID;
                objReceiptItemsInfo.FK_GECountryID = objShipmentItemsInfo.FK_GECountryID;
                objReceiptItemsInfo.FK_ICProductAttributeQualityID = objShipmentItemsInfo.FK_ICProductAttributeQualityID;
                objReceiptItemsInfo.ICReceiptItemProductLength = objShipmentItemsInfo.ICShipmentItemLength;
                objReceiptItemsInfo.ICReceiptItemProductPerimeter = objShipmentItemsInfo.ICShipmentItemPerimeter;
                objReceiptItemsInfo.ICReceiptItemLotNo = objShipmentItemsInfo.ICShipmentItemLotNo;
                objReceiptItemsInfo.ICReceiptItemWoodQty = objShipmentItemsInfo.ICShipmentItemWoodQty;
                objReceiptItemsInfo.ICReceiptItemLogListNo = objShipmentItemsInfo.ICShipmentItemLoglist;
                objReceiptItemsInfo.ICReceiptItemContainerNo = objShipmentItemsInfo.ICShipmentItemContainerNo;
                objReceiptItemsInfo.FK_MMBatchProductID = objShipmentItemsInfo.FK_MMBatchProductID;
                objReceiptItemsInfo.FK_ICProductSerieID = objShipmentItemsInfo.FK_ICProductSerieID;
                objReceiptItemsInfo.FK_MMOperationID = objShipmentItemsInfo.FK_MMOperationID;
                objReceiptItemsInfo.FK_ICShipmentID = objShipmentItemsInfo.FK_ICShipmentID;
                objReceiptItemsInfo.FK_ICShipmentItemID = objShipmentItemsInfo.Id;
                objReceiptItemsInfo.ICReceiptItemProductSerialNo = objShipmentItemsInfo.ICShipmentItemProductSerialNo;

                objReceiptItemsInfo.ICReceiptItemProductHeight = objShipmentItemsInfo.ICShipmentItemHeight;
                objReceiptItemsInfo.ICReceiptItemProductWidth = objShipmentItemsInfo.ICShipmentItemWidth;
                objReceiptItemsInfo.ICReceiptItemWidthMax = objShipmentItemsInfo.ICShipmentItemWidthMax;
                objReceiptItemsInfo.ICReceiptItemLenghtMax = objShipmentItemsInfo.ICShipmentItemLengthMax;
                objReceiptItemsInfo.ICReceiptItemProductUnitCost = objShipmentItemsInfo.ICShipmentItemProductUnitPrice;
                objReceiptItemsInfo.ICReceiptItemTotalCost = objShipmentItemsInfo.ICShipmentItemTotalAmount;
                objReceiptItemsInfo.ICReceiptItemLenghtMin = objShipmentItemsInfo.ICShipmentItemLengthMin;
                objReceiptItemsInfo.ICReceiptItemWidthMin = objShipmentItemsInfo.ICShipmentItemWidthMin;
                //////objReceiptItemsInfo.ICReceiptItemLenghtMin = objShipmentItemsInfo.ICShipmentItemLengthMin;
                //NNGiang   Round Qty 19-05-2016 Start
                objReceiptItemsInfo.ICReceiptItemProductQty = Math.Round(objShipmentItemsInfo.ICShipmentItemProductQty, 4, MidpointRounding.AwayFromZero);
                //NNGiang   Round Qty 19-05-2016 End
                // objReceiptItemsInfo. = objShipmentItemsInfo.ICShipmentItemLengthMin;
                //if (objReceiptItemsInfo.FK_ACAccountID == 0 && objProductsInfo != null)
                //{
                //    objReceiptItemsInfo.FK_ACAccountID = objProductsInfo.FK_ACAccountID;
                //}
                objReceiptItemsInfo.FK_ACAccountID = GeneralAcount();
                if (objReceiptInfo.ICReceiptAcceptanceType.Equals(string.Empty))
                    entity.SetProductCostByProductUnitCost(objReceiptItemsInfo);
                else
                    entity.SetProductCostByProductUnitCostForReceiptAcceptanceType(objReceiptItemsInfo);

                entity.ReceiptItemsList.Add(objReceiptItemsInfo);
            }
        }

        public void AddItemToReceiptItemsList()
        {
            BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;

            ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)entity.ModuleObjects[TableName.ICReceiptItemsTableName];
            if (objReceiptItemsInfo.FK_ICProductID > 0)
            {
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
                ICProductsController objProductsController = new ICProductsController();
                ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(objReceiptItemsInfo.FK_ICProductID);
                if (objProductsInfo != null)
                {
                    entity.SetValuesAfterValidateProduct(objReceiptItemsInfo.FK_ICProductID, objReceiptItemsInfo);
                    objReceiptItemsInfo.FK_ICProductAttributeWoodTypeID = objProductsInfo.FK_ICProductAttributeWoodTypeID;
                    objReceiptItemsInfo.ICReceiptItemProductLength = objProductsInfo.ICProductLength;
                    objReceiptItemsInfo.ICReceiptItemProductHeight = objProductsInfo.ICProductHeight;
                    objReceiptItemsInfo.ICReceiptItemProductWidth = objProductsInfo.ICProductWidth;
                    //NNGiang   Round Qty 19-05-2016 Start
                    objReceiptItemsInfo.ICReceiptItemProductQty = Math.Round((objReceiptItemsInfo.ICReceiptItemProductLength * objReceiptItemsInfo.ICReceiptItemProductPerimeter *
                                                                    objReceiptItemsInfo.ICReceiptItemWoodQty), 4, MidpointRounding.AwayFromZero);
                    //NNGiang   Round Qty 19-05-2016 End
                    objReceiptItemsInfo.FK_ACAccountID = objProductsInfo.FK_ACAccountID;
                }
                if (objReceiptsInfo != null)
                {
                    objReceiptItemsInfo.FK_MMBatchProductID = objReceiptsInfo.FK_MMBatchProductID;
                    objReceiptItemsInfo.FK_MMOperationID = objReceiptsInfo.FK_MMOperationID;
                    //objReceiptItemsInfo.ICReceiptItemLotNo = objReceiptsInfo.ICReceiptPackNo;
                }
                if (objReceiptsInfo.ICReceiptAcceptanceType.Equals(string.Empty))
                    entity.SetProductCostByProductUnitCost(objReceiptItemsInfo);
                else
                    entity.SetProductCostByProductUnitCostForReceiptAcceptanceType(objReceiptItemsInfo);
                entity.ReceiptItemsList.Add(objReceiptItemsInfo);
                UpdateDocumentEntries();
                entity.ReceiptItemsList.GridControl.RefreshDataSource();
            }
        }
        public void ChangeQTyFromReceiptItemsList(long ReceiptItemWoodQty)
        {
            guiConfigSerialNo objguiConfigSerialNo = new guiConfigSerialNo();
            objguiConfigSerialNo.Module = this;
            if (objguiConfigSerialNo.ShowDialog() == DialogResult.OK)
            {
                BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
                ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)entity.ReceiptItemsList[entity.ReceiptItemsList.CurrentIndex];
                objReceiptItemsInfo.ICReceiptItemWoodQty = 1;
                objReceiptItemsInfo.ICReceiptItemProductSerialNo = objReceiptsInfo.ICReceiptPrefix + string.Format("{0}", objReceiptsInfo.ICReceiptSerialNoStart);

                entity.SetProductCostByProductUnitCost(objReceiptItemsInfo);
                ICReceiptItemsInfo newReceiptItemsInfo = null;
                ICReceiptItemsInfo objReceiptItemsInfoClone = new ICReceiptItemsInfo();
                BOSUtil.CopyObject(objReceiptItemsInfo, objReceiptItemsInfoClone);
                for (int i = 1; i < ReceiptItemWoodQty; i++)
                {
                    newReceiptItemsInfo = new ICReceiptItemsInfo();
                    BOSUtil.CopyObject(objReceiptItemsInfoClone, newReceiptItemsInfo);
                    newReceiptItemsInfo.FK_ICProductSerieID = 0;
                    newReceiptItemsInfo.ICReceiptItemProductSerialNo = objReceiptsInfo.ICReceiptPrefix + string.Format("{0}", objReceiptsInfo.ICReceiptSerialNoStart + i);
                    //newReceiptItemsInfo.ICReceiptItemProductQty = objReceiptItemsInfo.ICReceiptItemProductLength * objReceiptItemsInfo.ICReceiptItemProductPerimeter *
                    //                                            objReceiptItemsInfo.ICReceiptItemWoodQty;
                    entity.ReceiptItemsList.Insert(entity.ReceiptItemsList.CurrentIndex + i, newReceiptItemsInfo);
                }
                objReceiptsInfo.ICReceiptPrefix = string.Empty;
                objReceiptsInfo.ICReceiptSerialNoStart = 0;
            }
        }
        public void UpdateTotalCost()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;
                entity.UpdateTotalCost();
                UpdateInventoryCost();
                UpdateDocumentEntries();
            }
        }
        private void UpdateInventoryCost()
        {
            BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            decimal extCost = entity.ReceiptItemsList.Sum(i => i.ICReceiptItemExtCost);
            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
            {
                item.ICReceiptItemInventoryCost = item.ICReceiptItemProductUnitCost;
            }
        }
        public void DeleteItemFromReceiptItemsList()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;
                entity.ReceiptItemsList.RemoveSelectedRowObjectFromList();
                UpdateTotalCost();
            }
        }
        public string GetConfigTextByGroupAndValue(string group, string value)
        {
            ADConfigValuesController objConfigValuesController = new ADConfigValuesController();
            ADConfigValuesInfo objADConfigValuesInfo = objConfigValuesController.GetObjectByGroupAndValue(group, value);
            if (objADConfigValuesInfo != null)
                return objADConfigValuesInfo.ADConfigText;
            return string.Empty;
        }

        public override int ActionSave()
        {
            BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;
            entity.ReceiptItemsList.EndCurrentEdit();
            CalculateUnitCostNew(false);
            UpdateTotalCost();
            ICReceiptsInfo receipt = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            CheckPackNo(receipt);
            //NN Giang ADD -[CHECK QTY IN SHIPMENT ITEM] - Start-14-04-2016
            /* A Chinh kêu bỏ check số lượng nhập không vượt xuất*/
            //if (!CheckQtyInShipmentItem(entity.ReceiptItemsList))
            //{
            //    return 0;
            //}
            //NN Giang ADD -[CHECK QTY IN SHIPMENT ITEM] - End-14-04-2016
            int receiptID = base.ActionSave();
            // flag = false;
            //isnewfrom=false;
            ParentScreen.SetEnableOfToolbarButton("CalculateUnitCost", true);
            return receiptID;
        }
        public void ApproveBatchReceiptDryLumber()
        {
            if (Toolbar.IsNullOrNoneAction())
            {
                BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;
                ICInventoryStocksController objInventoryStocksController = new ICInventoryStocksController();
                foreach (ICReceiptItemsInfo objReceiptItemsInfo in entity.ReceiptItemsList)
                {
                    decimal unitcost = objInventoryStocksController.GetInventoryStockUnitCost(objReceiptItemsInfo.FK_ICProductID, objReceiptItemsInfo.ICReceiptItemProductSerialNo);
                    if (unitcost >= 0)//unitCost < 0 là chưa có đơn gía tồn kho
                    {
                        if (Math.Round(unitcost, 0) != objReceiptItemsInfo.ICReceiptItemProductUnitCost)
                        {
                            MessageBox.Show(string.Format(BatchReceiptDryLumberLocalizedResources.UnitCostInventoryStock, objReceiptItemsInfo.ICReceiptItemProductName), CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return;
                        }
                    }

                }
                ActionComplete();
            }
        }
        public void EnableControl(bool visible)
        {
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, visible);
            ParentScreen.SetEnableOfToolbarButton("ApproveReceiptDryLumber", visible);
            //ParentScreen.SetEnableOfToolbarButton("CalculateUnitCost", visible);
        }
        public void ChangeItemSerieNo(ICReceiptItemsInfo item)
        {
            //InvalidateItemSerieNo(item, TableName.ICReceiptItemsTableName, "ICReceiptItemProductSerialNo");
            if (BOSApp.CurrentCompanyInfo.CSCostMethod == AccCostMethod.SpecificIdentification.ToString())
            {
                item.ICReceiptItemProductUnitCost = AccountHelper.GetInventoryCost(item.FK_ICProductID, item.FK_ICProductSerieID);
                BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
                if (objReceiptsInfo.ICReceiptAcceptanceType.Equals(ReceiptAcceptanceType.Acceptance.ToString()))
                    entity.SetProductCostByProductUnitCostForReceiptAcceptanceType(item);

                else
                    entity.SetProductCostByProductUnitCost(item);
                entity.ReceiptItemsList.GridControl.RefreshDataSource();
                UpdateTotalCost();
            }
        }
        public void ChangeItemFromReceiptItemsList()
        {
            BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            if (objReceiptsInfo.ICReceiptAcceptanceType.Equals(ReceiptAcceptanceType.Acceptance.ToString()))
                entity.SetProductCostByProductUnitCostForReceiptAcceptanceType();
            else
                entity.SetProductCostByProductUnitCost();
            entity.ReceiptItemsList.ChangeObjectFromList();
            UpdateTotalCost();
        }
        public List<ICProductAttributesInfo> GetProductItemAttributeQuality()
        {
            ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
            List<ICProductAttributesInfo> productAttributesList = objProductAttributesController.GetProductAttributesByProductAttributeGroup(ProductAttributeGroup.Quality.ToString());
            if (productAttributesList != null)
            {
                return productAttributesList;
            }
            else
                return null;
        }
        public List<ICProductAttributesInfo> GetProductItemAttributeWoodType()
        {
            ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
            List<ICProductAttributesInfo> productAttributesList = objProductAttributesController.GetProductAttributesByProductAttributeGroup(ProductAttributeGroup.WoodType.ToString());
            if (productAttributesList != null)
            {
                return productAttributesList;
            }
            else
                return null;
        }
        public List<ICProductAttributesInfo> GetProductItemAttributeTTMT()
        {
            ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
            List<ICProductAttributesInfo> productAttributesList = objProductAttributesController.GetProductAttributesByProductAttributeGroup(ProductAttributeGroup.TTMT.ToString());
            if (productAttributesList != null)
            {
                return productAttributesList;
            }
            else
                return null;
        }
        public void ChangeStock(int stockID)
        {
            BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.FK_ICStockID = stockID;
            if (!Toolbar.IsNullOrNoneAction())
            {
                if (entity.ReceiptItemsList.Count > 0)
                {
                    if (MessageBox.Show(BatchReceiptDryLumberLocalizedResources.ConfirmChangeItemStockMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                        {
                            item.FK_ICStockID = stockID;
                        }
                        entity.ReceiptItemsList.GridControl.RefreshDataSource();
                    }
                }
            }
            UpdateDocumentEntries();
        }
        #region Accounting
        protected override void UpdateDocumentEntries()
        {
            BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            entity.DocumentEntryList.Clear();
            ACAccountsInfo objAccountsInfo = new ACAccountsInfo();
            ACAccountsController objAccountsController = new ACAccountsController();

            ICImportAndExportReasonsController objICImportAndExportReasonsController = new ICImportAndExportReasonsController();
            ICImportAndExportReasonsInfo objICImportAndExportReasonsInfo = null;
            int accountCredit = 0;
            if (objReceiptsInfo.FK_ICImportAndExportReasonID > 0)
            {
                objICImportAndExportReasonsInfo = objICImportAndExportReasonsController.GetObjectByID(objReceiptsInfo.FK_ICImportAndExportReasonID) as ICImportAndExportReasonsInfo;
                if (objICImportAndExportReasonsInfo != null && objICImportAndExportReasonsInfo.FK_ACAcountID > 0)
                {
                    accountCredit = objICImportAndExportReasonsInfo.FK_ACAcountID;
                }
            }

            if (!string.IsNullOrEmpty(objReceiptsInfo.ICReceiptAcceptanceType))
            {


                ICProductsController productController = new ICProductsController();
                ACDocTypeEntrysController objDocTypeEntrysController = new ACDocTypeEntrysController();

                string documentType = AccDocumentType.NhapKhoPhachKhoCongDoanSay.ToString();
                string entryType = AccEntryType.NhapKhoPhachKhoCongDoanSay.ToString();

                if (objReceiptsInfo.ICReceiptTypeCombo == ReceiptType.DryLumberReceipt.ToString())
                {
                    documentType = AccDocumentType.NhapKhoPhachKhoCongDoanSay.ToString();
                    entryType = AccEntryType.NhapKhoPhachKhoCongDoanSay.ToString();
                }

                //if (objReceiptsInfo.ICReceiptTypeCombo == ReceiptType.DryLumberReceipt.ToString())
                //{
                //    if (objReceiptsInfo.ICReceiptReference.Length == 0)
                //        documentType = AccDocumentType.NhapKhoMuaHang.ToString();
                //    else
                //        documentType = AccDocumentType.NhapKhoMuaHangHoaDon.ToString();
                //    entryType = AccEntryType.NhapKhoMuaHang.ToString();
                //}
                //else if (objReceiptsInfo.ICReceiptTypeCombo == ReceiptType.ReturnReceipt.ToString())
                //{
                //    documentType = AccDocumentType.NhapKhoHangTra.ToString();
                //    entryType = AccEntryType.NhapKhoHangTra.ToString();
                //}
                //else if (objReceiptsInfo.ICReceiptTypeCombo == ReceiptType.EquipmentReceipt.ToString())
                //{
                //    documentType = AccDocumentType.NhapCCDC.ToString();
                //    entryType = AccEntryType.NhapCCDC.ToString();
                //}
                ACDocTypeEntrysInfo defaultEntry = objDocTypeEntrysController.GetEntryByDocumentTypeAndEntryType(
                                                                            documentType,
                                                                            entryType);
                Dictionary<ACDocumentEntrysInfo, List<ICReceiptItemsInfo>> documentEntryAccounts = new Dictionary<ACDocumentEntrysInfo, List<ICReceiptItemsInfo>>();
                List<int> productAccountID = new List<int>();

                if (entity.ReceiptItemsList != null)
                {
                    foreach (ICReceiptItemsInfo receiptItem in entity.ReceiptItemsList)
                    {

                        int accountDebit = 0;
                        ICStocksController objStocksController = new ICStocksController();
                        ICStocksInfo objStocksInfo = objStocksController.GetObjectByID(objReceiptsInfo.FK_ICStockID) as ICStocksInfo;
                        if (objStocksInfo != null && objStocksInfo.FK_ACAccountID > 0)
                            accountDebit = objStocksInfo.FK_ACAccountID;
                        else
                        {
                            accountDebit = receiptItem.FK_ACAccountID;
                        }
                        //ICProductsInfo product = productController.GetObjectByID(receiptItem.FK_ICProductID) as ICProductsInfo;
                        ACDocumentEntrysInfo entry = entity.DocumentEntryList.FirstOrDefault(e => e.ACEntryTypeName == entryType
                                                                            && e.FK_ACDebitAccountID == accountDebit);
                        if (entry != null)
                        {
                            entry.FK_ACDebitAccountID = accountDebit;
                            if (accountCredit > 0)
                                entry.FK_ACCreditAccountID = accountCredit;

                        }
                        if (entry == null && defaultEntry != null)
                        {
                            entry = AccountHelper.AddItemToDocumentEntryList(defaultEntry, entity.DocumentEntryList);
                            entry.FK_ACDebitAccountID = accountDebit;
                            if (accountCredit > 0)
                                entry.FK_ACCreditAccountID = accountCredit;
                        }
                        if (entry != null && !documentEntryAccounts.ContainsKey(entry))
                        {
                            documentEntryAccounts.Add(entry, new List<ICReceiptItemsInfo>());
                            productAccountID.Add(entry.FK_ACDebitAccountID);
                        }
                        documentEntryAccounts[entry].Add(receiptItem);
                    }
                }

                //update document entry amount
                if (documentEntryAccounts.Count != 0)
                {
                    ACDocumentEntrysInfo item = null;
                    foreach (ACDocumentEntrysInfo entry in documentEntryAccounts.Keys)
                    {
                        entry.ACDocumentEntryAmount = documentEntryAccounts[entry].Sum(i => i.ICReceiptItemInventoryCost * i.ICReceiptItemProductQty);
                        entry.ACDocumentEntryExchangeAmount = entry.ACDocumentEntryAmount * objReceiptsInfo.ICReceiptExchangeRate;
                        BOSApp.RoundByCurrency(entry, "ACDocumentEntryExchangeAmount", BOSApp.CurrentCompanyInfo.FK_GECurrencyID);
                        BOSApp.RoundByCurrency(entry, "ACDocumentEntryAmount", objReceiptsInfo.FK_GECurrencyID);
                        item = entry;
                    }


                    ACDocumentsInfo objDocumentsInfo = entity.DocumentList.FirstOrDefault(d => d.ACDocumentTypeName == documentType);
                    if (objDocumentsInfo == null)
                    {
                        objDocumentsInfo = new ACDocumentsInfo();
                        objDocumentsInfo.FK_ACDocumentTypeID = item.FK_ACDocumentTypeID;
                        objDocumentsInfo.ACDocumentTypeName = item.ACDocumentTypeName;
                        entity.DocumentList.Add(objDocumentsInfo);
                    }
                }

                //remove the redundance document entries 
                List<ACDocumentEntrysInfo> removedItems = entity.DocumentEntryList.Where(item => item.ACEntryTypeName == entryType
                                                                                  && !productAccountID.Any(accountID => accountID == item.FK_ACDebitAccountID)).ToList();
                if (removedItems != null)
                {
                    foreach (ACDocumentEntrysInfo item in removedItems)
                        entity.DocumentEntryList.Remove(item);
                }

                //ReceiptEntities entity = (ReceiptEntities)CurrentModuleEntity;
                //ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;

                //foreach (var item in entity.DocumentEntryList)
                //{
                //    item.ACDocumentEntryAmount = 0;
                //    item.ACDocumentEntryExchangeAmount = 0;
                //}
                //foreach (var item in entity.ReceiptItemsList)
                //{
                //    ICProductsController obj = new ICProductsController();
                //    ICProductsInfo objProductsInfo = (ICProductsInfo)obj.GetObjectByID(item.FK_ICProductID);
                //    if (objProductsInfo != null)
                //    UpdateDocumentEntryList(objProductsInfo.FK_ACAccountID, item.ICReceiptItemInventoryCost * item.ICReceiptItemProductQty, entity, objReceiptsInfo.ICReceiptExchangeRate);
                //}

                entity.DocumentEntryList.GridControl.RefreshDataSource();
            }
        }

        //protected override void UpdateDocumentEntries()
        //{
        //    BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;
        //    ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
        //    foreach (ACDocumentEntrysInfo entry in entity.DocumentEntryList)
        //    {
        //        if (entry.ACEntryTypeName == AccEntryType.NhapKhoDieuChinh.ToString() ||
        //            entry.ACEntryTypeName == AccEntryType.NhapKhoMuaHang.ToString() ||
        //            entry.ACEntryTypeName == AccEntryType.NhapKhoHangTra.ToString() ||
        //            entry.ACEntryTypeName == AccEntryType.NhapKhoNVL.ToString())
        //        {
        //            entry.ACDocumentEntryAmount = entity.ReceiptItemsList.Sum(i => i.ICReceiptItemInventoryCost * i.ICReceiptItemProductQty);
        //            entry.ACDocumentEntryExchangeAmount = entry.ACDocumentEntryAmount * objReceiptsInfo.ICReceiptExchangeRate;
        //        }
        //    }
        //    entity.DocumentEntryList.GridControl.RefreshDataSource();
        //    foreach (var item in entity.ReceiptItemsList)
        //    {
        //        ICProductsController obj = new ICProductsController();
        //        ICProductsInfo objProductsInfo = (ICProductsInfo)obj.GetObjectByID(item.FK_ICProductID);

        //        //[NNThinh] [ADD] [16/04/2014] [ACAccountID of product for batch Receipt, will change soon ], START
        //        ACAccountsController objAccountsController = new ACAccountsController();
        //        ACAccountsInfo objAccountsInfo = (ACAccountsInfo)objAccountsController.GetObjectByNo(AccAccount.Acc152);

        //        //if (objAccountsInfo != null)
        //        //    UpdateDocumentEntryList(objAccountsInfo.ACAccountID, item.ICReceiptItemInventoryCost * item.ICReceiptItemProductQty, entity, objReceiptsInfo.ICReceiptExchangeRate);
        //        //[NNThinh] [ADD] [16/04/2014] [ACAccountID of product for batch Receipt, will change soon ], END
        //    }

        //}
        public override void InvalidateToolbar()
        {
            base.InvalidateToolbar();
            ICReceiptsInfo receipt = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
            ParentScreen.SetEnableOfToolbarButton("ApproveReceiptDryLumber", false);
            ParentScreen.SetEnableOfToolbarButton("CalculateUnitCost", false);

            if (receipt.ICReceiptID > 0)
            {
                if (receipt.ICReceiptStatus == ReceiptStatus.Complete.ToString())
                {
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
                    ParentScreen.SetEnableOfToolbarButton("ApproveReceiptDryLumber", false);
                    ParentScreen.SetEnableOfToolbarButton("CalculateUnitCost", false);
                }
                else
                {
                    ParentScreen.SetEnableOfToolbarButton("ApproveReceiptDryLumber", true);
                    ParentScreen.SetEnableOfToolbarButton("CalculateUnitCost", true);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, true);
                }
            }
        }
        public void ChangePackNo()
        {
            BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;

            if (!Toolbar.IsNullOrNoneAction())
            {
                if (entity.ReceiptItemsList.Count > 0)
                {
                    if (MessageBox.Show(WoodPurchaseReceiptLocalizedResources.ConfirmChangeItemLotNoMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                        {
                            item.ICReceiptItemLotNo = objReceiptsInfo.ICReceiptPackNo;
                            item.ICReceiptItemProductSerialNo = objReceiptsInfo.ICReceiptPackNo;
                        }
                        entity.ReceiptItemsList.GridControl.RefreshDataSource();
                    }
                }
            }
        }
        public override void ActionPrint()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                BatchReceiptDryLumber.BatchReceiptDryLumberModule.PrintReceipt(Toolbar.CurrentObjectID);
            }
        }
        public static void PrintReceipt(int receiptID)
        {
            RP_ReceiptForLumber report = new RP_ReceiptForLumber();
            //report.LoadLayout(BOSCommon.Constants.Report.DevReceiptItemReportPath);
            InitReceiptReport(report, receiptID);
            guiReportPreview viewer = new guiReportPreview(report);
            viewer.Show();
        }
        private static void InitReceiptReport(XtraReport report, int receiptID)
        {
            BRBranchsController objBranchsController = new BRBranchsController();
            BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            if (objBranchsInfo != null)
            {
                XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchAddressLine3"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactAddressLine3;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchPhone"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactPhone;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchFax"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactFax;
                }
            }

            ICReceiptsController objReceiptsController = new ICReceiptsController();
            ICReceiptsInfo receipt = (ICReceiptsInfo)objReceiptsController.GetObjectByID(receiptID);
            #region Hạch Toán
            List<ACDocumentEntrysInfo> entries = new List<ACDocumentEntrysInfo>();
            if (receipt != null)
            {
                ACDocumentsController objDocumentsController = new ACDocumentsController();
                ACDocumentEntrysController objDocumentEntrysController = new ACDocumentEntrysController();
                ACDocumentsInfo document = null;
                if (receipt.ICReceiptTypeCombo == ReceiptType.DryLumberReceipt.ToString())
                {
                    document = objDocumentsController.GetDocumentByTypeAndNo(AccDocumentType.NhapKhoPhachKhoCongDoanSay.ToString(), receipt.ICReceiptNo);
                }
                else if (receipt.ICReceiptTypeCombo == ReceiptType.DryWoodRedundantReceipt.ToString())
                {
                    document = objDocumentsController.GetDocumentByTypeAndNo(AccDocumentType.NhapKhoPhachKhoCongDoanSay.ToString(), receipt.ICReceiptNo);
                }
                else if (receipt.ICReceiptTypeCombo == ReceiptType.DryWoodReturnReceipt.ToString())
                {
                    document = objDocumentsController.GetDocumentByTypeAndNo(AccDocumentType.NhapKhoPhachKhoCongDoanSay.ToString(), receipt.ICReceiptNo);
                }
                if (document != null)
                {
                    entries = objDocumentEntrysController.GetDocumentEntryByDocumentID(document.ACDocumentID);
                }
            }
            XRLabel accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblDebitAccountNo"];
            if (accLabel != null)
            {
                string debitAccountNo = string.Empty;
                foreach (ACDocumentEntrysInfo entry in entries)
                {
                    if (entry.ACDocumentDebitAccount != null)
                    {
                        if (!debitAccountNo.Contains(entry.ACDocumentDebitAccount))
                        {
                            debitAccountNo += string.Format(" {0},", entry.ACDocumentDebitAccount);
                        }
                    }
                }
                if (!string.IsNullOrEmpty(debitAccountNo))
                {
                    debitAccountNo = debitAccountNo.Substring(0, debitAccountNo.Length - 1);
                }
                accLabel.Text = debitAccountNo;
            }

            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblCreditAccountNo"];
            if (accLabel != null)
            {
                string creditAccountNo = string.Empty;
                foreach (ACDocumentEntrysInfo entry in entries)
                {
                    if (entry.ACDocumentCreditAccount != null)
                    {
                        if (!creditAccountNo.Contains(entry.ACDocumentCreditAccount))
                        {
                            creditAccountNo += string.Format(" {0},", entry.ACDocumentCreditAccount);
                        }
                    }
                }
                if (!string.IsNullOrEmpty(creditAccountNo))
                {
                    creditAccountNo = creditAccountNo.Substring(0, creditAccountNo.Length - 1);
                }
                accLabel.Text = creditAccountNo;
            }
            #endregion
            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xrLabel28"];
            if (accLabel != null)
            {
                accLabel.Text = receipt.ICReceiptDate.ToString("dd/MM/yyyy");
            }
            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xrLabel29"];
            if (accLabel != null)
            {
                accLabel.Text = receipt.ICReceiptDate.ToString("dd/MM/yyyy");
            }
            //accLabel = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xrPageInfo2"];
            //if (accLabel != null)
            //{
            //    string str = DateTime.Now.ToString().Trim();
            //    str = str.Substring(0, 2);
            //    accLabel.Text = str;
            //}
            //accLabel = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xrPageInfo3"];
            //if (accLabel != null)
            //{
            //    string str = DateTime.Now.ToString().Trim();
            //    str = str.Substring(3, 2);
            //    accLabel.Text = str;
            //}
            //accLabel = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xrPageInfo4"];
            //if (accLabel != null)
            //{
            //    string str = DateTime.Now.ToString().Trim();
            //    str = str.Substring(6, 4);
            //    accLabel.Text = str;
            //}
            //GECurrenciesController objCurrenciesController = new GECurrenciesController();
            //GECurrenciesInfo currency = (GECurrenciesInfo)objCurrenciesController.GetObjectByID(receipt.FK_GECurrencyID);
            //accLabel = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xrLabel27"];
            //if (accLabel != null)
            //{
            //    accLabel.Text = ConvertAmountToWord.ReadAmount(receipt.ICReceiptTotalCost.ToString(), currency.GECurrencyID);
            //}




            ADReportsController objReportsController = new ADReportsController();
            decimal Tongsoluong = 0;
            foreach (ICReceiptItemsInfo item in objReportsController.GetListReceiptItemByReceiptID(receiptID))
            {
                if (item != null)
                {
                    item.ICReceiptItemWoodQty = Math.Round(item.ICReceiptItemWoodQty, 0);
                    Tongsoluong += item.ICReceiptItemWoodQty;
                }
            }
            accLabel = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xrLabel31"];
            if (accLabel != null)
            {
                accLabel.Text = Tongsoluong.ToString();
            }
            report.DataSource = objReportsController.GetListReceiptItemByReceiptID(receiptID);
            //report.DataMember = BOSCommon.Constants.Report.DevReceiptItemReportName;
        }

        #endregion
        #region ActionNewFromAcceptance
        public void NewFromAcceptance()
        {
            ActionNew();
            BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            List<ICShipmentsInfo> listItem = new List<ICShipmentsInfo>();
            ICShipmentsController objShipmentsController = new ICShipmentsController();
            ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
            listItem = objShipmentsController.GetItemForAcceptance(ShipmentShipmentType.DryLumber.ToString());
            ICShipmentsInfo objShipmentsInfo = new ICShipmentsInfo();

            guiFind<ICShipmentsInfo> guiAcceptance = new guiFind<ICShipmentsInfo>(TableName.ICShipmentsTableName,
                                                      listItem,
                                                      this,
                                                      false);
            if (guiAcceptance.ShowDialog() == DialogResult.OK)
            {
                objShipmentsInfo = (ICShipmentsInfo)objShipmentsController.GetObjectByID(guiAcceptance.SelectedObjects[0].ICShipmentID);
                if (objShipmentsInfo != null)
                {
                    BOSUtil.CopyObject(objShipmentsInfo, objReceiptsInfo);
                    objReceiptsInfo.ICReceiptNo = "***NEW***";
                    //objReceiptsInfo.FK_MMBatchProductID = objBatchProductsInfo.MMBatchProductID;
                    //objReceiptsInfo.FK_ICProductAttributeTTMTID = objBatchProductsInfo.FK_ICProductAttributeTTMTID;
                    objReceiptsInfo.ICReceiptStatus = ReceiptStatus.New.ToString();
                    objReceiptsInfo.ICReceiptTypeCombo = ReceiptType.DryLumberReceipt.ToString();
                    objReceiptsInfo.ICReceiptAcceptanceType = ReceiptAcceptanceType.Acceptance.ToString();
                    objReceiptsInfo.ICReceiptExchangeRate = objShipmentsInfo.ICShipmentExchangeRate;
                    ICStocksController objStockController = new ICStocksController();
                    ICStocksInfo objStockInfo = (ICStocksInfo)objStockController.GetObjectByNo(StockNo.DryLumberStock.ToString());
                    // objReceiptsInfo.ICReceiptDate = DateTime.Now;

                    if (objStockInfo != null)
                        objReceiptsInfo.FK_ICStockID = objStockInfo.ICStockID;



                    DisplayLabelText(objReceiptsInfo);
                    CurrentModuleEntity.UpdateMainObjectBindingSource();
                }
                List<ICShipmentItemsInfo> ItemList = new List<ICShipmentItemsInfo>();
                ItemList = objShipmentItemsController.GetShipmentItemsByFK_ShipmentID(guiAcceptance.SelectedObjects[0].ICShipmentID);
                foreach (ICShipmentItemsInfo item in ItemList)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = new ICReceiptItemsInfo();
                    BOSUtil.CopyObject(item, objReceiptItemsInfo);
                    objReceiptItemsInfo.FK_ACAccountID = GeneralAcount();
                    objReceiptItemsInfo.ICReceiptItemLotNo = objReceiptsInfo.ICReceiptPackNo;
                    objReceiptItemsInfo.FK_ICShipmentItemID = item.Id;
                    objReceiptItemsInfo.ICReceiptItemProductHeight = item.ICShipmentItemHeight;
                    objReceiptItemsInfo.ICReceiptItemProductWidth = item.ICShipmentItemWidth;
                    objReceiptItemsInfo.ICReceiptItemProductLength = item.ICShipmentItemLength;

                    objReceiptItemsInfo.ICReceiptItemWidthMax = item.ICShipmentItemWidthMax;
                    objReceiptItemsInfo.ICReceiptItemLenghtMin = item.ICShipmentItemLengthMin;
                    objReceiptItemsInfo.ICReceiptItemLenghtMax = item.ICShipmentItemLengthMax;
                    objReceiptItemsInfo.ICReceiptItemTotalCost = item.ICShipmentItemTotalAmount;
                    objReceiptItemsInfo.ICReceiptItemProductUnitCost = item.ICShipmentItemProductUnitPrice;
                    objReceiptItemsInfo.ICReceiptItemProductQty = Math.Round(item.ICShipmentItemProductQty, 4, MidpointRounding.AwayFromZero);
                    if (objReceiptsInfo.ICReceiptAcceptanceType.Equals(ReceiptAcceptanceType.Acceptance.ToString()))
                        entity.SetProductCostByProductUnitCostForReceiptAcceptanceType(objReceiptItemsInfo);

                    else
                        entity.SetProductCostByProductUnitCost(objReceiptItemsInfo);
                    entity.ReceiptItemsList.Add(objReceiptItemsInfo);

                }
                UpdateTotalCost();
                //UpdateDocumentEntries();
                entity.ReceiptItemsList.GridControl.RefreshDataSource();


            }
        }
        public void CalculateUnitCost()
        {
            CalculateUnitCostNew(true);
        }


        public void CalculateUnitCostNew(bool IsEdit)
        {
            //if (Toolbar.IsNullOrNoneAction())
            {
                BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
                if (objReceiptsInfo.ICReceiptAcceptanceType == ReceiptAcceptanceType.Acceptance.ToString())
                {
                    if (IsEdit)
                        ActionEdit();
                    List<int> ListInt = new List<int>();
                    foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                    {
                        if (!ListInt.Contains(item.FK_ICShipmentItemID))
                            ListInt.Add(item.FK_ICShipmentItemID);
                    }
                    foreach (int number in ListInt)
                    {
                        decimal UnitCostPerOne = 0;
                        ICShipmentItemsInfo objShipmentItemsInfo = new ICShipmentItemsInfo();
                        ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
                        objShipmentItemsInfo = (ICShipmentItemsInfo)objShipmentItemsController.GetObjectByID(number);
                        if (objShipmentItemsInfo != null)
                        {

                            decimal qty = entity.ReceiptItemsList.Where(x => x.FK_ICShipmentItemID == number).Sum(t => t.ICReceiptItemProductQty);
                            if (qty != 0)
                            {
                                //if (objShipmentItemsInfo.ICShipmentItemTotalCost != 0)
                                //{
                                //    UnitCostPerOne = objShipmentItemsInfo.ICShipmentItemTotalCost / qty;
                                //}
                                //else
                                //{
                                UnitCostPerOne = objShipmentItemsInfo.ICShipmentItemTotalAmount / qty;
                                //}
                            }
                            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                            {
                                if (item.FK_ICShipmentItemID == number)
                                {
                                    item.ICReceiptItemProductUnitCost = UnitCostPerOne;
                                    item.ICReceiptItemInventoryCost = UnitCostPerOne;
                                    item.ICReceiptItemTotalCost = item.ICReceiptItemProductUnitCost * item.ICReceiptItemProductQty;
                                    //entity.SetProductCostByProductUnitCost();

                                }
                            }
                            UpdateTotalCost();
                        }
                    }
                    entity.ReceiptItemsList.GridControl.RefreshDataSource();
                    //ActionSave();

                }
            }
        }
        public int GeneralAcount()
        {
            int account = 0;
            BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            ACAccountsInfo objAccountsInfo = new ACAccountsInfo();
            ACAccountsController objAccountsController = new ACAccountsController();
            objAccountsInfo = (ACAccountsInfo)objAccountsController.GetObjectByNo(AccAccount.Acc15223);
            if (objAccountsInfo != null)
            {
                account = objAccountsInfo.ACAccountID;
            }
            return account;

        }
        public void ChangBatchProduct(int batchproduct)
        {
            BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.FK_MMBatchProductID = batchproduct;
            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
            {
                item.FK_MMBatchProductID = batchproduct;
            }
            UpdateDocumentEntries();
        }

        #endregion

        public void ChangeImportAndExportReason(int importAndExportReasonID)
        {
            BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.FK_ICImportAndExportReasonID = importAndExportReasonID;
            if (!Toolbar.IsNullOrNoneAction())
            {
                if (entity.ReceiptItemsList.Count > 0)
                {
                    entity.ReceiptItemsList.ForEach(o => o.FK_ICImportAndExportReasonID = importAndExportReasonID);
                    entity.ReceiptItemsList.GridControl.RefreshDataSource();
                }
            }
            UpdateDocumentEntries();
        }

        public void PrintBatchReceiptDryLumberTV()
        {
            BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            object[] arParam = new object[1];
            arParam[0] = objReceiptsInfo.ICReceiptID;
            ViewReportByTemplate("RPReceiptTV", "GetDataSourceForRPReceiptTV", arParam);
        }
        public void ChangeUpdatePositionLocation(string updatePositionItemLocationName)
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
                objReceiptsInfo.MMUpdatePositionItemPositionName = updatePositionItemLocationName;
                MMUpdatePositionItemsController objUpdatePositionItemsController = new MMUpdatePositionItemsController();
                entity.ReceiptItemsList.ForEach(o =>
                {
                    MMUpdatePositionItemsInfo objUpdatePositionItemsInfo = (MMUpdatePositionItemsInfo)objUpdatePositionItemsController.GetItemByLocationName(updatePositionItemLocationName, o.FK_ICProductID, o.FK_ICStockID, 0);
                    if (objUpdatePositionItemsInfo != null)
                    {
                        o.FK_MMUpdatePositionItemID = objUpdatePositionItemsInfo.MMUpdatePositionItemID;
                    }
                });
                entity.UpdateMainObjectBindingSource();
            }
        }
        public void CreateUpdatePositionsInfo()
        {
            BatchReceiptDryLumberEntities entity = (BatchReceiptDryLumberEntities)CurrentModuleEntity;
            ICReceiptsInfo objICReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            if (objICReceiptsInfo.FK_ICStockID == 0)
            {
                BOSApp.ShowMessage("Vui lòng chọn mã kho!");
                return;
            }
            guiAddUpdatePositionItems guiAddUpdatePositionItem = new guiAddUpdatePositionItems(objICReceiptsInfo.FK_ICStockID);
            guiAddUpdatePositionItem.Module = this;
            guiAddUpdatePositionItem.ShowDialog();

        }
    }
    #endregion BatchReceiptDryLumberModule
}