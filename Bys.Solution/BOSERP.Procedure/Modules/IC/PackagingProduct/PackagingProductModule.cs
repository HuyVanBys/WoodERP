using BOSCommon;
using BOSCommon.Constants;
using BOSComponent;
using BOSERP.Utilities;
using BOSLib;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraEditors.Repository;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid.Views.Grid;
using Eval;
using Eval3;
using Localization;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows.Forms;

namespace BOSERP.Modules.PackagingProduct
{
    #region ProductModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ProductModule
    //Created Date:Friday, March 21, 2008
    //-----------------------------------------------------------

    public class PackagingProductModule : BaseModuleERP
    {
        #region Constants
        public const string ProductSuppliersTextBox = "fld_txtProductSuppliers";
        public const string ProductGroupsButtonEditName = "fld_bedFK_ICProductGroupID";
        public const string ProductComponentsGridControl = "fld_dgcICProductItems";
        public const string ProductTypeLookUpEditNameMain = "fld_lkeICProductType";
        public const string ProductTypeLookUpEditNameSearch = "fld_lkeICProductType1";
        public const string ICProductPicturePictureBoxName = "fld_ptbICProductPicture";
        public const string ProductBasicUnitLookUpName = "fld_lkeFK_ICProductBasicUnitID";
        #endregion

        /// <summary>
        /// A variable to store the prices differentiated by currency and branch,
        /// is used to be a data source of the grid control
        /// </summary>
        private DataTable ProductBranchPriceTable;
        private BOSLookupEdit ProductTypeLookUpEditMain;
        private BOSLookupEdit ProductTypeLookUpEditSearch;

        // Declare for dynamic formula calculation
        private Eval3.iEvalValue.ValueChangedEventHandler FormulaHandler = null;
        private Eval3.opCode mFormula3;
        private Eval3.opCode mFormulaB;
        private Evaluator ev;
        public event Eval3.iEvalValue.ValueChangedEventHandler ValueChanged;
        public Eval3.EvalVariable D;
        public Eval3.EvalVariable R;
        public Eval3.EvalVariable C;
        public Eval3.EvalVariable A;
        public Eval3.EvalVariable B;


        #region Public properties
        /// <summary>
        /// Gets or sets old product to compare and save to history details
        /// </summary>
        public ICProductsInfo OldProduct { get; set; }

        /// <summary>
        /// Gets or sets old product to compare and save to history details
        /// </summary>
        private List<ICProductBranchPricesInfo> ListNewProductBranchPrices;

        /// <summary>
        /// Gets or sets old product to compare and save to history details
        /// </summary>
        private List<ICProductBranchPricesInfo> ListOldProductBranchPrices;

        /// <summary>
        /// Define product group button edit
        /// </summary>
        private BOSButtonEdit ProductGroupsButtonEdit;

        private PictureBox ProductPicturePictureBox;
        private BOSLookupEdit ProductBasicUnitLookUpControl;
        #endregion

        public PackagingProductModule()
        {
            Name = "PackagingProduct";
            CurrentModuleEntity = new PackagingProductEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();
            OldProduct = new ICProductsInfo();
            ListNewProductBranchPrices = new List<ICProductBranchPricesInfo>();
            ListOldProductBranchPrices = new List<ICProductBranchPricesInfo>();
            ProductGroupsButtonEdit = (BOSButtonEdit)Controls[PackagingProductModule.ProductGroupsButtonEditName];
            ProductTypeLookUpEditMain = (BOSLookupEdit)Controls[PackagingProductModule.ProductTypeLookUpEditNameMain];
            ProductTypeLookUpEditSearch = (BOSLookupEdit)Controls[PackagingProductModule.ProductTypeLookUpEditNameSearch];
            ProductPicturePictureBox = (PictureBox)Controls[ICProductPicturePictureBoxName];
            ProductBasicUnitLookUpControl = (BOSLookupEdit)Controls[ProductBasicUnitLookUpName];
            ProductTypeLookUpEditBindingSource();
        }

        protected override DataSet GetSearchData(ref string searchQuery)
        {
            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo searchObject = (ICProductsInfo)CurrentModuleEntity.SearchObject;
            searchObject.ICProductType = ProductType.IngredientPackaging.ToString();
            ICDepartmentsController objDepartmentsController = new ICDepartmentsController();
            ICDepartmentsInfo objICDepartmentsInfo = (ICDepartmentsInfo)objDepartmentsController.GetObjectByNo(BOSApp.GetDisplayTextFromConfigText(ConfigValueGroup.DepartmentGroup, DepartmentGroup.IngredientPackagingNo.ToString()));
            int departmentID = 0;
            if (objICDepartmentsInfo != null)
                departmentID = objICDepartmentsInfo.ICDepartmentID;
            searchObject.FK_ICDepartmentID = departmentID;

            int companyID = BOSApp.CurrentCompanyInfo.CSCompanyID;
            DataSet ds = objProductsController.GetProductSet(
                                                        companyID,
                                                        searchObject.ICProductNo,
                                                        searchObject.ICProductSupplierNumber,
                                                        searchObject.ICProductType,
                                                        BOSUtil.GetSearchString(searchObject.ICProductDesc),
                                                        searchObject.FK_ICDepartmentID,
                                                        searchObject.FK_ICProductGroupID,
                                                        searchObject.FK_APSupplierID,
                                                        searchObject.ICProductBarCode, null);
            return ds;
        }

        public override void ResetSearchObject()
        {
            base.ResetSearchObject();

            ICProductsInfo searchObject = (ICProductsInfo)CurrentModuleEntity.SearchObject;
            searchObject.FK_ICProductGroupID = 0;
            searchObject.ICProductGroupName = string.Empty;
            CurrentModuleEntity.UpdateSearchObjectBindingSource();
        }
        public string FilterProduct(string getFilterProduct)
        {
            string result = string.Empty;
            ICProductsInfo objProductsInfo = (ICProductsInfo)CurrentModuleEntity.MainObject;
            List<ICProductsForViewInfo> ProductList = new List<ICProductsForViewInfo>();
            ProductList = BOSApp.CurrentProductList.Where(x => (x.ICProductName.ToLower().Contains(getFilterProduct.Trim()) || x.ICProductDesc.ToLower().Contains(getFilterProduct.Trim())) && x.ICProductType == ProductType.IngredientPackaging.ToString()).ToList();
            foreach (ICProductsForViewInfo item in ProductList)
            {
                result += Environment.NewLine + item.ICProductDesc;
            }

            return result;
        }
        public void ProductTypeLookUpEditBindingSource()
        {
            ADConfigValuesController objConfigValuesController = new ADConfigValuesController();
            List<ADConfigValuesInfo> ConfigValuesList = new List<ADConfigValuesInfo>();
            ADConfigValuesInfo objConfigValuesInfo = new ADConfigValuesInfo();
            objConfigValuesInfo.ADConfigValueID = 0;
            DataSet ds = objConfigValuesController.GetADConfigValuesByGroup(ConfigValueGroup.ProductType);
            if (ds.Tables[0] != null && ds.Tables[0].Rows.Count > 0)
            {
                //ConfigValuesList.Add(objConfigValuesInfo);

                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    objConfigValuesInfo = (ADConfigValuesInfo)objConfigValuesController.GetObjectFromDataRow(row);
                    if (objConfigValuesInfo.ADConfigKeyValue == ProductType.IngredientPackaging.ToString())
                        ConfigValuesList.Add(objConfigValuesInfo);
                }
            }
            ProductTypeLookUpEditMain.Properties.Columns.Clear();
            ProductTypeLookUpEditMain.Properties.Columns.Add(new LookUpColumnInfo("ADConfigText", "Loại"));
            ProductTypeLookUpEditSearch.Properties.Columns.Clear();
            ProductTypeLookUpEditSearch.Properties.Columns.Add(new LookUpColumnInfo("ADConfigText", "Loại"));
            if (ConfigValuesList != null)
            {
                ProductTypeLookUpEditMain.BOSDataSource = "";
                ProductTypeLookUpEditMain.BOSDataMember = "";
                ProductTypeLookUpEditMain.Properties.DataSource = ConfigValuesList;
                ProductTypeLookUpEditMain.Properties.DisplayMember = "ADConfigText";
                ProductTypeLookUpEditMain.Properties.ValueMember = "ADConfigKeyValue";

                ProductTypeLookUpEditSearch.BOSDataSource = "";
                ProductTypeLookUpEditSearch.BOSDataMember = "";
                ProductTypeLookUpEditSearch.Properties.DataSource = ConfigValuesList;
                ProductTypeLookUpEditSearch.Properties.DisplayMember = "ADConfigText";
                ProductTypeLookUpEditSearch.Properties.ValueMember = "ADConfigKeyValue";
            }
        }
        public void ValidateProductType()
        {
            ICProductsInfo objProductsInfo = (ICProductsInfo)CurrentModuleEntity.MainObject;
            ProductTypeLookUpEditMain.EditValue = objProductsInfo.ICProductType;
        }
        public override void ActionNew()
        {
            base.ActionNew();

            ICProductsInfo objProductsInfo = (ICProductsInfo)((PackagingProductEntities)CurrentModuleEntity).MainObject;
            ProductTypeLookUpEditBindingSource();
            objProductsInfo.ICProductStockMinDateFrom = DateTime.Now;
            objProductsInfo.ICProductStockMinDateTo = BOSUtil.GetYearEndDate();
            objProductsInfo.ICProductStockMaxDateFrom = DateTime.Now;
            objProductsInfo.ICProductStockMaxDateTo = BOSUtil.GetYearEndDate();
            SetDefaultAccountByProductType();
            if (ProductBasicUnitLookUpControl != null)
            {
                ProductBasicUnitLookUpControl.Properties.ReadOnly = false;
            }
        }
        public void SetDefaultAccountByProductType()
        {

            ICProductsInfo product = (ICProductsInfo)CurrentModuleEntity.MainObject;
            ICProductTypeAccountConfigsController ctacsController = new ICProductTypeAccountConfigsController();
            ICProductTypeAccountConfigsInfo ctac = ctacsController.GetObjectByProductType(product.ICProductType);
            if (ctac != null)
            {
                product.FK_ICProductTypeAccountConfigID = ctac.ICProductTypeAccountConfigID;
                product.FK_ACAccountCostPriceID = ctac.FK_ACAccountCostPriceID;
                product.FK_ACAccountDiscountID = ctac.FK_ACAccountDiscountID;
                product.FK_ACAccountID = ctac.FK_ACAccountID;
                product.FK_ACAccountRevenueID = ctac.FK_ACAccountRevenueID;
                product.FK_ACAccountRevenueInternalID = ctac.FK_ACAccountRevenueInternalID;
                product.FK_ACAccountSaleReturnID = ctac.FK_ACAccountSaleReturnID;
            }
        }
        public override void ActionEdit()
        {
            base.ActionEdit();
        }

        public override void Invalidate(int iObjectID)
        {
            base.Invalidate(iObjectID);
            ICProductsInfo objProductsInfo = (ICProductsInfo)CurrentModuleEntity.MainObject;
            ICProductGroupsController objProductGroupsController = new ICProductGroupsController();
            objProductsInfo.ICProductGroupName = objProductGroupsController.GetObjectNameByID(objProductsInfo.FK_ICProductGroupID);
            ProductGroupsButtonEdit.Text = objProductsInfo.ICProductGroupName;
            InvalidateProductComponentList(iObjectID);
            ValidateProductType();
            objProductsInfo.ICProductPrimaryImage = ApiClientHelper.GetProductPrimaryImage(objProductsInfo.ICProductID);
            ProductPicturePictureBox.Image = objProductsInfo.ICProductPrimaryImage;
            OldProduct = (ICProductsInfo)objProductsInfo.Clone();
            ICTransactionsController objTransactionsController = new ICTransactionsController();
            bool isTransaction = objTransactionsController.GetTransactionByProductID(objProductsInfo.ICProductID);
            ProductBasicUnitLookUpControl.Properties.ReadOnly = isTransaction;
        }

        public override void ActionDuplicate()
        {
            base.ActionDuplicate();

            ICProductsInfo product = (ICProductsInfo)CurrentModuleEntity.MainObject;
            product.ICProductPrice01 = 0;
            product.ICProductBarCode = string.Empty;
        }
        public override int ActionSave()
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            ICProductsInfo objProductsInfo = (ICProductsInfo)CurrentModuleEntity.MainObject;
            if (string.IsNullOrEmpty(objProductsInfo.ICProductGroupName))
            {
                MessageBox.Show("Vui lòng chọn nhóm hàng!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                return 0;
            }
            if (ProductTypeLookUpEditMain.EditValue != null)
            {
                objProductsInfo.ICProductType = ProductTypeLookUpEditMain.EditValue.ToString();
            }
            string productPrimaryPath = objProductsInfo.ICProductPrimaryPath;
            int result = base.ActionSave();
            if (!BOSApp.CurrentProductList.Any(o => o.ICProductID == objProductsInfo.ICProductID))
            {
                ICProductsForViewInfo newObj = new ICProductsForViewInfo();
                BOSUtil.CopyViewObject(objProductsInfo, newObj);
                BOSApp.CurrentProductList.Add(newObj);
            }
            if (result > 0)
            {
                BOSProgressBar.Start("Đang lưu hình ảnh sản phẩm");
                entity.SavePrimaryImage(productPrimaryPath);
                UpdateProductImage();
                BOSProgressBar.Close();
            }

            return result;
        }

        public void UpdateProductImage()
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            ICProductsInfo objProductsInfo = (ICProductsInfo)entity.MainObject;
            objProductsInfo.ICProductPrimaryImage = ApiClientHelper.GetProductPrimaryImage(objProductsInfo.ICProductID);
            ProductPicturePictureBox.Image = objProductsInfo.ICProductPrimaryImage;
            entity.UpdateMainObjectBindingSource();
        }

        /// <summary>
        /// Called when user want to create a new product,
        /// but use the same no of the current one
        /// </summary>
        public void ActionDuplicateSameNo()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                ICProductsInfo objOldProductsInfo = (ICProductsInfo)CurrentModuleEntity.MainObject.Clone();

                base.ActionDuplicate();

                ICProductsInfo objProductsInfo = (ICProductsInfo)CurrentModuleEntity.MainObject;
                objProductsInfo.ICProductNo = objOldProductsInfo.ICProductNo;
                objProductsInfo.ICProductBarCode = string.Empty;
                objProductsInfo.ICProductPrice01 = 0;
            }
        }

        public override int SaveObjectHistory(string strUserAction, int iObjectID)
        {
            int objectHistoryID = base.SaveObjectHistory(strUserAction, iObjectID);
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            ICProductsInfo objProductsInfo = (ICProductsInfo)entity.MainObject;
            if (Toolbar.IsEditAction())
            {
                entity.SaveHistoryDetails(objectHistoryID, OldProduct, objProductsInfo);
                OldProduct = (ICProductsInfo)objProductsInfo.Clone();
            }
            for (int i = 0; i < ListNewProductBranchPrices.Count; i++)
            {
                entity.SaveBranchPriceHistory(objectHistoryID, ListOldProductBranchPrices[i], ListNewProductBranchPrices[i]);
            }
            ListNewProductBranchPrices.Clear();
            ListOldProductBranchPrices.Clear();

            return objectHistoryID;
        }

        public void ShowCategoryTree()
        {
            if (IsEditable())
            {
                ActionEdit();
            }

            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            ICProductsInfo objProductsInfo = (ICProductsInfo)entity.MainObject;
            ICDepartmentsController objDepartmentsController = new ICDepartmentsController();
            ICDepartmentsInfo objICDepartmentsInfo = (ICDepartmentsInfo)objDepartmentsController.GetObjectByNo(BOSApp.GetDisplayTextFromConfigText(ConfigValueGroup.DepartmentGroup, DepartmentGroup.IngredientPackagingNo.ToString()));
            int departmentID = 1;
            if (objICDepartmentsInfo != null)
                departmentID = objICDepartmentsInfo.ICDepartmentID;
            if (objProductsInfo.FK_ICDepartmentID > 0)
                departmentID = objProductsInfo.FK_ICDepartmentID;

            ICProductGroupsController objProductGroupsController = new ICProductGroupsController();
            guiProductGroupTree guiProductGroupTree = new guiProductGroupTree(departmentID, objProductsInfo.FK_ICProductGroupID, objProductsInfo.ICProductType);
            guiProductGroupTree.Module = this;
            if (guiProductGroupTree.ShowDialog() == DialogResult.OK)
            {
                ICProductGroupsInfo objProductGroupsInfo = (ICProductGroupsInfo)guiProductGroupTree.TreeList.GetSelectedObject();
                if (objProductGroupsInfo != null)
                {
                    objProductsInfo.FK_ICDepartmentID = guiProductGroupTree.ICDepartmentID;
                    objProductsInfo.FK_ICProductGroupID = objProductGroupsInfo.ICProductGroupID;
                    objProductsInfo.ICProductGroupNo = objProductGroupsInfo.ICProductGroupNo;
                    objProductsInfo.ICProductGroupName = guiProductGroupTree.GetSelectedProductGroupName();
                    objProductsInfo.FK_ICProductTypeAccountConfigID = objProductGroupsInfo.FK_ICProductTypeAccountConfigID;
                }
                else
                {
                    objProductsInfo.FK_ICProductGroupID = 0;
                    objProductsInfo.ICProductGroupName = string.Empty;
                }
                ChangeProductTypeAccountConfig(objProductsInfo.FK_ICProductTypeAccountConfigID);
                entity.UpdateMainObjectBindingSource();
            }
        }

        /// <summary>
        /// Show category tree for searching
        /// </summary>        
        public void ShowCategoryTreeForSearch()
        {
            ICProductsInfo searchObject = (ICProductsInfo)CurrentModuleEntity.SearchObject;
            guiProductGroupTree guiProductGroupTree = new guiProductGroupTree(searchObject.FK_ICDepartmentID, searchObject.FK_ICProductGroupID);
            guiProductGroupTree.Module = this;
            if (guiProductGroupTree.ShowDialog() == DialogResult.OK)
            {
                ICProductGroupsInfo objProductGroupsInfo = (ICProductGroupsInfo)guiProductGroupTree.TreeList.GetSelectedObject();
                if (objProductGroupsInfo != null)
                {
                    searchObject.FK_ICProductGroupID = objProductGroupsInfo.ICProductGroupID;
                    searchObject.ICProductGroupName = guiProductGroupTree.GetSelectedProductGroupName();
                }
                else
                {
                    searchObject.FK_ICProductGroupID = 0;
                    searchObject.ICProductGroupName = string.Empty;
                }
                CurrentModuleEntity.UpdateSearchObjectBindingSource();
            }
        }



        /// <summary>
        /// Show form edit price.
        /// </summary>
        public void ShowPriceLevelForm()
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            guiEditPrice guiEditPrice = new guiEditPrice(((ICProductsInfo)entity.MainObject).ICProductID, entity.ICProductPricesList);
            guiEditPrice.ShowDialog();
        }

        /// <summary>
        /// Show form to edit the item's attribute
        /// </summary>
        public void ShowEditAttributeForm()
        {
            if (IsEditable())
            {
                ActionEdit();
            }

            ICProductsInfo objProductsInfo = (ICProductsInfo)CurrentModuleEntity.MainObject;
            guiEditAttribute guiEditAttribute = new guiEditAttribute(objProductsInfo);
            guiEditAttribute.Module = this;
            if (guiEditAttribute.ShowDialog() == DialogResult.OK)
            {
                objProductsInfo.ICProductAttributeKey = guiEditAttribute.ICProductAttributeKey;
                objProductsInfo.ICProductAttribute = guiEditAttribute.ICProductAttribute;
                objProductsInfo.ICProductAttributeNo = guiEditAttribute.ICProductAttributeNo;
                CurrentModuleEntity.UpdateMainObjectBindingSource();
            }
        }

        /// <summary>
        /// Show form to choose suppliers for current product
        /// </summary>
        public void ShowSuppliersForm()
        {
            guiChooseSupplier chooseSupplierForm = new guiChooseSupplier();
            chooseSupplierForm.Module = this;
            if (chooseSupplierForm.ShowDialog() == DialogResult.OK)
            {
                BackupProductSuppliers();
            }
            else
            {
                RollbackProductSuppliers();
            }
        }

        /// <summary>
        /// Backup the supplier list of a product and store to its original one
        /// </summary>
        private void BackupProductSuppliers()
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            entity.ICProductSuppliersList.BackupList.Clear();
            foreach (ICProductSuppliersInfo objProductSuppliersInfo in entity.ICProductSuppliersList)
            {
                entity.ICProductSuppliersList.BackupList.Add((ICProductSuppliersInfo)objProductSuppliersInfo.Clone());
            }
        }

        /// <summary>
        /// Rollback the supplier list of a product by its original one to discard all changes
        /// </summary>
        private void RollbackProductSuppliers()
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            entity.ICProductSuppliersList.Clear();
            entity.ICProductSuppliersList.Invalidate(entity.ICProductSuppliersList.BackupList);
        }

        /// <summary>
        /// Show product branch price
        /// </summary>
        public void ShowProductBranchPrice()
        {
            guiShowProductBranchPrice showProductBranchPrice = new guiShowProductBranchPrice();
            showProductBranchPrice.Module = this;
            if (showProductBranchPrice.ShowDialog() == DialogResult.OK)
            {
                BackupProductBranchPrices();
            }
            else
            {
                RollbackProductBranchPrices();
            }
        }

        /// <summary>
        /// Show product branch price history
        /// </summary>
        public void ShowProductBranchPriceHistory()
        {
            guiShowProductBranchPriceHistory showProductBranchPrice = new guiShowProductBranchPriceHistory();
            showProductBranchPrice.Module = this;
            showProductBranchPrice.ShowDialog();
        }

        /// <summary>
        /// Edit purchase price by currency
        /// </summary>
        public void EditPurchasePriceByCurrency()
        {
            guiEditPurchasePriceByCurrency editPurchasePriceByCurrency = new guiEditPurchasePriceByCurrency();
            editPurchasePriceByCurrency.Module = this;
            if (editPurchasePriceByCurrency.ShowDialog() == DialogResult.OK)
            {
                BackupPurchasePrices();
            }
            else
            {
                RollbackPurchasePrices();
            }
        }

        /// <summary>
        /// Backup the purchase price of a product and store to its original one
        /// </summary>
        public void BackupPurchasePrices()
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            entity.ProductPurchasePriceList.BackupList.Clear();
            foreach (ICProductBranchPricesInfo objProductBranchPricesInfo in entity.ProductPurchasePriceList)
            {
                entity.ProductPurchasePriceList.BackupList.Add((ICProductBranchPricesInfo)objProductBranchPricesInfo.Clone());
            }
        }

        /// <summary>
        /// Rollback the purchase prices of a product by its original one to discard all changes
        /// </summary>
        private void RollbackPurchasePrices()
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            entity.ProductPurchasePriceList.Clear();
            entity.ProductPurchasePriceList.Invalidate(entity.ProductPurchasePriceList.BackupList);
        }

        /// <summary>
        /// Backup the branch prices of a product and store to its original one
        /// </summary>
        private void BackupProductBranchPrices()
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            ICProductsInfo objProductsInfo = (ICProductsInfo)entity.MainObject;
            ICProductBranchPricesInfo newProductBranchPrices = new ICProductBranchPricesInfo();
            ListNewProductBranchPrices = new List<ICProductBranchPricesInfo>();
            ListOldProductBranchPrices = new List<ICProductBranchPricesInfo>();
            if (ProductBranchPriceTable != null)
            {
                foreach (DataRow dr in ProductBranchPriceTable.Rows)
                {
                    int branchID = Convert.ToInt32(dr["FK_BRBranchID"]);
                    foreach (DataColumn column in ProductBranchPriceTable.Columns)
                    {
                        if (column.ColumnName != "FK_BRBranchID" && column.ColumnName != "BRBranchName" && column.ColumnName != "ICDefaultProductBranchPrice")
                        {
                            int currencyID = Convert.ToInt32(column.ColumnName.Split('_')[0]);
                            decimal price = 0;
                            if (dr[column.ColumnName] != DBNull.Value)
                            {
                                price = Convert.ToDecimal(dr[column.ColumnName]);
                            }

                            ICProductBranchPricesInfo objProductBranchPricesInfo = entity.ProductBranchPriceList.Where(
                                                                                                        p => p.FK_BRBranchID == branchID &&
                                                                                                        p.FK_GECurrencyID == currencyID &&
                                                                                                        p.ICProductBranchPriceType == ProductBranchPriceType.Sale.ToString())
                                                                                                        .FirstOrDefault();
                            if (objProductBranchPricesInfo == null)
                            {
                                // Add new product branch price to list
                                ICProductBranchPricesInfo objNewProductBranchPricesInfo = new ICProductBranchPricesInfo();
                                objNewProductBranchPricesInfo.FK_BRBranchID = branchID;
                                objNewProductBranchPricesInfo.FK_GECurrencyID = currencyID;
                                objNewProductBranchPricesInfo.FK_ICProductID = objProductsInfo.ICProductID;
                                objNewProductBranchPricesInfo.ICProductBranchPrice = price;
                                objNewProductBranchPricesInfo.ICProductBranchPriceType = ProductBranchPriceType.Sale.ToString();
                                entity.ProductBranchPriceList.Add(objNewProductBranchPricesInfo);

                                if (price > 0)
                                {
                                    objProductBranchPricesInfo = new ICProductBranchPricesInfo();
                                    objProductBranchPricesInfo.FK_BRBranchID = branchID;
                                    objProductBranchPricesInfo.FK_GECurrencyID = currencyID;
                                    objProductBranchPricesInfo.FK_ICProductID = objProductsInfo.ICProductID;
                                    objProductBranchPricesInfo.ICProductBranchPrice = 0;
                                    objProductBranchPricesInfo.ICProductBranchPriceType = ProductBranchPriceType.Sale.ToString();
                                }
                            }

                            if (objProductBranchPricesInfo != null)
                            {
                                if (objProductBranchPricesInfo.ICProductBranchPrice != price)
                                {
                                    ICProductBranchPricesInfo objProductBranchPricesHistoryInfo = (ICProductBranchPricesInfo)objProductBranchPricesInfo.Clone();
                                    ListOldProductBranchPrices.Add(objProductBranchPricesHistoryInfo);

                                    newProductBranchPrices = (ICProductBranchPricesInfo)objProductBranchPricesInfo.Clone();
                                    newProductBranchPrices.ICProductBranchPrice = price;
                                    ListNewProductBranchPrices.Add((ICProductBranchPricesInfo)newProductBranchPrices.Clone());
                                }
                                // Update the existing product branch price
                                objProductBranchPricesInfo.ICProductBranchPrice = price;
                            }
                        }
                    }
                }
            }

            entity.ProductBranchPriceList.BackupList.Clear();
            foreach (ICProductBranchPricesInfo objProductBranchPricesInfo in entity.ProductBranchPriceList)
            {
                entity.ProductBranchPriceList.BackupList.Add((ICProductBranchPricesInfo)objProductBranchPricesInfo.Clone());
            }
        }

        /// <summary>
        /// Rollback the branch prices of a product by its original one to discard all changes
        /// </summary>
        private void RollbackProductBranchPrices()
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            entity.ProductBranchPriceList.Clear();
            entity.ProductBranchPriceList.Invalidate(entity.ProductBranchPriceList.BackupList);
        }

        /// <summary>
        /// Remove selected item from product supplier grid control
        /// </summary>
        public void RemoveSelectedItemFromProductSupplier(ProductSuppliersGridControl productSupplierGridControl)
        {
            BOSList<ICProductSuppliersInfo> productSupplierList = (BOSList<ICProductSuppliersInfo>)((BindingSource)productSupplierGridControl.DataSource).DataSource;
            productSupplierList.GridControl = productSupplierGridControl;
            productSupplierList.RemoveSelectedRowObjectFromList();
        }
        public void RemoveSelectedItemFromPackagingNorm()
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            entity.ICPackagingNormItemsList.RemoveSelectedRowObjectFromList();
        }
        /// <summary>
        /// Remove selected item from product branch price grid control
        /// </summary>
        public void RemoveSelectedItemFromProductBranchPrice()
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            entity.ProductBranchPriceList.RemoveSelectedRowObjectFromList();
        }

        /// <summary>
        /// Remove selected item from product component grid control
        /// </summary>
        public void RemoveSelectedItemFromProductComponent()
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            entity.ICProductItemsList.RemoveSelectedRowObjectFromList();
        }

        /// <summary>
        /// Invalidate product component list by current product id
        /// </summary>
        /// <param name="productID">ID of product</param>
        public void InvalidateProductComponentList(int productID)
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            ICProductItemsController objProductComponentsController = new ICProductItemsController();
            List<ICProductItemsInfo> components = objProductComponentsController.GetProductItemListByProductID(productID);
            entity.ICProductItemsList.Invalidate(components);
        }

        /// <summary>
        /// Set default values to a given component
        /// </summary>
        /// <param name="objProductComponentsInfo">Given component</param>
        public void SetDefaultValuesToComponent(ICProductItemsInfo objProductComponentsInfo)
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            ICProductsInfo objProductsParentInfo = (ICProductsInfo)entity.MainObject;
            ICProductsInfo objProductsChildInfo = new ICProductsInfo();
            ICProductsController objProductsController = new ICProductsController();
            objProductsChildInfo = (ICProductsInfo)objProductsController.GetProductByID(objProductComponentsInfo.FK_ICProductItemChildID);
            if (objProductsChildInfo != null)
            {
                objProductComponentsInfo.ICDepartmentName = objProductsChildInfo.ICDepartmentName;
                objProductComponentsInfo.ICProductDesc = objProductsChildInfo.ICProductDesc;
                objProductComponentsInfo.ICProductGroupName = objProductsChildInfo.ICProductGroupName;
                objProductComponentsInfo.ICProductAttribute = objProductsChildInfo.ICProductAttribute;
                objProductComponentsInfo.ICProductSupplierNo = objProductsChildInfo.ICProductSupplierNumber;
                objProductComponentsInfo.APSupplierName = objProductsChildInfo.APSupplierName;
                objProductComponentsInfo.FK_ICProductItemParentID = objProductsParentInfo.ICProductID;
            }
        }

        /// <summary>
        /// Sort product component list when user click move up or move down button
        /// </summary>
        public void SortProductComponentList(string moveStatus)
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            BOSGridControl productComponentGridControl = (BOSGridControl)Controls[PackagingProductModule.ProductComponentsGridControl];
            GridView gridView = (GridView)productComponentGridControl.MainView;
            int sourceRow = gridView.FocusedRowHandle < 0 ? 0 : gridView.FocusedRowHandle;
            if (moveStatus == "MoveUp")
            {
                if (sourceRow > 0)
                {
                    ICProductItemsInfo objProductComponentsInfoClone = (ICProductItemsInfo)entity.ICProductItemsList[sourceRow].Clone();
                    entity.ICProductItemsList.RemoveAt(sourceRow);
                    entity.ICProductItemsList.Insert(--sourceRow, objProductComponentsInfoClone);
                    gridView.FocusedRowHandle = sourceRow;
                }
            }
            else
            {
                if (sourceRow < entity.ICProductItemsList.Count - 1)
                {
                    ICProductItemsInfo objProductComponentsInfoClone = (ICProductItemsInfo)entity.ICProductItemsList[sourceRow].Clone();
                    entity.ICProductItemsList.RemoveAt(sourceRow);
                    entity.ICProductItemsList.Insert(++sourceRow, objProductComponentsInfoClone);
                    gridView.FocusedRowHandle = sourceRow;
                }
            }
            entity.ICProductItemsList.GridControl.RefreshDataSource();
        }

        #region Units of Measure
        /// <summary>
        /// Show form measure of units.
        /// </summary>
        public void ShowMeasureOfUnits()
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            ICProductsInfo objICProductsInfo = (ICProductsInfo)entity.MainObject;
            if (objICProductsInfo.FK_ICProductBasicUnitID > 0)
            {
                guiMeasureUnit guiMeasureUnit = new guiMeasureUnit();
                guiMeasureUnit.Module = this;
                guiMeasureUnit.ShowDialog();
            }
        }

        /// <summary>
        /// Called when user change the basic unit
        /// </summary>
        public void ChangeBasicUnit(int basicUnitID)
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            ICProductsInfo objProductsInfo = (ICProductsInfo)entity.MainObject;
            //Clear all existing units as they depends on the basic unit
            entity.ICProductUnitsList.Clear();
            //Add new basic unit to product unit list
            ICProductUnitsInfo objProductUnitsInfo = new ICProductUnitsInfo();
            objProductUnitsInfo.FK_ICMeasureUnitID = basicUnitID;
            objProductUnitsInfo.FK_ICProductID = objProductsInfo.ICProductID;
            objProductUnitsInfo.ICProductUnitFactor = 1;
            objProductUnitsInfo.ICProductUnitPrice = objProductsInfo.ICProductPrice01;
            objProductUnitsInfo.ICProductUnitIsBasic = true;
            objProductUnitsInfo.ICProductUnitBarCode = objProductsInfo.ICProductBarCode;
            entity.ICProductUnitsList.Add(objProductUnitsInfo);

        }

        /// <summary>
        /// Delete a selected unit from its list
        /// </summary>
        public void DeleteSelectedUnit()
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            if (entity.ICProductUnitsList.CurrentIndex > 0)
            {
                entity.ICProductUnitsList.RemoveSelectedRowObjectFromList();
            }
            else
            {
                MessageBox.Show(ProductLocalizedResources.CannotDeleteBasicUnitMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        #endregion

        /// <summary>
        /// Set default desc of the current product
        /// </summary>
        public void SetDefaultProductDesc()
        {
            ICProductsInfo objProductsInfo = (ICProductsInfo)CurrentModuleEntity.MainObject;
            objProductsInfo.ICProductDesc = objProductsInfo.ICProductName;
            if (objProductsInfo.ICProductInsideDimensionHeight > 0 || objProductsInfo.ICProductInsideDimensionWidth > 0 || objProductsInfo.ICProductInsideDimensionLength > 0)
            {
                objProductsInfo.ICProductDesc += string.Format(string.IsNullOrEmpty(objProductsInfo.ICProductDesc) ? "{0}" : ", {0}", objProductsInfo.ICProductInsideDimensionLength.ToString("0.#####")) + "x"
                                                                             + objProductsInfo.ICProductInsideDimensionWidth.ToString("0.#####") + "x"
                                                                             + objProductsInfo.ICProductInsideDimensionHeight.ToString("0.#####");
            }
            //if (objProductsInfo.ICProductOverallDimensionHeight > 0 || objProductsInfo.ICProductOverallDimensionWidth > 0 || objProductsInfo.ICProductOverallDimensionLength > 0)
            //{
            //    objProductsInfo.ICProductDesc += string.Format(string.IsNullOrEmpty(objProductsInfo.ICProductDesc) ? "{0}" : ", {0}", objProductsInfo.ICProductOverallDimensionLength.ToString("0.#####")) + "x"
            //                                                                 + objProductsInfo.ICProductOverallDimensionWidth.ToString("0.#####") + "x"
            //                                                                 + objProductsInfo.ICProductOverallDimensionHeight.ToString("0.#####");
            //}
            //if (objProductsInfo.ICProductSizeAndSpecifiCations != string.Empty)
            //{
            //    objProductsInfo.ICProductDesc += string.Format(string.IsNullOrEmpty(objProductsInfo.ICProductDesc) ? "{0}" : ", {0}", objProductsInfo.ICProductSizeAndSpecifiCations);
            //}
            if (objProductsInfo.FK_ICProdAttPackingMaterialSpecialityID > 0)
            {
                ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
                ICProductAttributesInfo objProductAttributesInfo = (ICProductAttributesInfo)objProductAttributesController.GetObjectByID(objProductsInfo.FK_ICProdAttPackingMaterialSpecialityID);
                if (objProductAttributesInfo != null)
                {
                    objProductsInfo.ICProductDesc += string.Format(string.IsNullOrEmpty(objProductsInfo.ICProductDesc) ? "{0}" : ", {0}", objProductAttributesInfo.ICProductAttributeValue);
                }
            }
            if (objProductsInfo.FK_ICProdAttPackingMaterialSizeID > 0)
            {
                ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
                ICProductAttributesInfo objProductAttributesInfo = (ICProductAttributesInfo)objProductAttributesController.GetObjectByID(objProductsInfo.FK_ICProdAttPackingMaterialSizeID);
                if (objProductAttributesInfo != null)
                {
                    objProductsInfo.ICProductDesc += string.Format(string.IsNullOrEmpty(objProductsInfo.ICProductDesc) ? "{0}" : ", {0}", objProductAttributesInfo.ICProductAttributeValue);
                }    
            }    
            if (objProductsInfo.FK_ICProdAttPackingMaterialWeightPerVolumeID > 0)
            {
                ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
                ICProductAttributesInfo objProductAttributesInfo = (ICProductAttributesInfo)objProductAttributesController.GetObjectByID(objProductsInfo.FK_ICProdAttPackingMaterialWeightPerVolumeID);
                if (objProductAttributesInfo != null)
                {
                    objProductsInfo.ICProductDesc += string.Format(string.IsNullOrEmpty(objProductsInfo.ICProductDesc) ? "{0}" : ", {0}", objProductAttributesInfo.ICProductAttributeValue);
                }
            }
            string[] attributeValueIDs = objProductsInfo.ICProductAttributeKey.Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries);
            ICDepartmentAttributeValuesController objDepartmentAttributeValuesController = new ICDepartmentAttributeValuesController();
            ICDepartmentAttributesController objDepartmentAttributesController = new ICDepartmentAttributesController();
            for (int i = 0; i < attributeValueIDs.Length; i++)
            {
                int attributeValueID = Convert.ToInt32(attributeValueIDs[i]);
                ICDepartmentAttributeValuesInfo objDepartmentAttributeValuesInfo = (ICDepartmentAttributeValuesInfo)objDepartmentAttributeValuesController.GetObjectByID(attributeValueID);
                if (objDepartmentAttributeValuesInfo != null)
                {
                    ICDepartmentAttributesInfo objDepartmentAttributesInfo = (ICDepartmentAttributesInfo)objDepartmentAttributesController.GetObjectByID(objDepartmentAttributeValuesInfo.FK_ICDepartmentAttributeID);
                    if (objDepartmentAttributesInfo != null)
                    {
                        objProductsInfo.ICProductDesc += string.Format(", {0}: {1}", objDepartmentAttributesInfo.ICDepartmentAttributeName, objDepartmentAttributeValuesInfo.ICDepartmentAttributeValueValue);
                    }
                }
            }
            CurrentModuleEntity.UpdateMainObjectBindingSource();
        }

        //protected override bool IsValidObjectNo(string objectNo)
        //{
        //    return true;
        //}

        /// <summary>
        /// Invalidate product branch price with currency
        /// </summary>
        /// <param name="productBranchPricesGridControl">The product branch price grid control</param>
        public void InvalidateProductBranchPriceWithCurrency(BOSGridControl productBranchPricesGridControl)
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            ICProductsInfo objProductsInfo = (ICProductsInfo)entity.MainObject;
            GECurrenciesController objCurrenciesController = new GECurrenciesController();
            DataSet ds = objCurrenciesController.GetAllObjects();
            DataTable tableResult = new DataTable();
            tableResult.Columns.Add("FK_BRBranchID", typeof(int));
            tableResult.Columns.Add("BRBranchName", typeof(string));
            SortedList<int, string> columnList = new SortedList<int, string>();
            foreach (DataRow dr in ds.Tables[0].Rows)
            {
                GECurrenciesInfo objCurrenciesInfo = (GECurrenciesInfo)objCurrenciesController.GetObjectFromDataRow(dr);
                columnList.Add(objCurrenciesInfo.GECurrencyID, objCurrenciesInfo.GECurrencyName);
                tableResult.Columns.Add(objCurrenciesInfo.GECurrencyID + "_" + objCurrenciesInfo.GECurrencyName, typeof(decimal));
            }
            BRBranchsController objBranchsController = new BRBranchsController();
            DataSet dsBranch = objBranchsController.GetAllObjects();
            foreach (DataRow dr in dsBranch.Tables[0].Rows)
            {
                DataRow rowResult = tableResult.NewRow();
                BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectFromDataRow(dr);
                rowResult["FK_BRBranchID"] = objBranchsInfo.BRBranchID;
                rowResult["BRBranchName"] = objBranchsInfo.BRBranchName;
                //Get product branch price list by branch id 
                List<ICProductBranchPricesInfo> productBranchPriceList = entity.ProductBranchPriceList
                    .Where(p => p.FK_BRBranchID == objBranchsInfo.BRBranchID && p.ICProductBranchPriceType == ProductBranchPriceType.Sale.ToString()).ToList();

                //Get product branch price by currency id                
                for (int i = 0; i < columnList.Count; i++)
                {
                    int currencyID = columnList.Keys[i];
                    ICProductBranchPricesInfo objProductBranchPricesInfo = productBranchPriceList.Where(p => p.FK_GECurrencyID == columnList.Keys[i]).FirstOrDefault();
                    string columnName = string.Format("{0}_{1}", columnList.Keys[i], columnList.Values[i]);
                    if (objProductBranchPricesInfo != null)
                    {
                        rowResult[columnName] = objProductBranchPricesInfo.ICProductBranchPrice;
                    }
                    else
                    {
                        if (currencyID == BOSApp.CurrentCompanyInfo.FK_GESaleCurrencyID)
                        {
                            rowResult[columnName] = objProductsInfo.ICProductPrice01;
                        }
                        else
                        {
                            rowResult[columnName] = 0;
                        }
                    }
                }
                tableResult.Rows.Add(rowResult);
            }
            productBranchPricesGridControl.DataSource = tableResult;
            GridView gridView = (GridView)productBranchPricesGridControl.MainView;
            gridView.BestFitColumns();
            gridView.Columns.Remove(gridView.Columns["FK_BRBranchID"]);
            foreach (GridColumn column in gridView.Columns)
            {
                if (column.FieldName == "BRBranchName")
                {
                    column.Caption = ProductLocalizedResources.BRBranchName;
                    column.OptionsColumn.AllowEdit = false;
                }
                else
                {
                    column.Tag = column.FieldName.Split('_')[0];
                    column.Caption = column.FieldName.Split('_')[1];
                    RepositoryItemTextEdit rep = new RepositoryItemTextEdit();
                    rep.Mask.MaskType = DevExpress.XtraEditors.Mask.MaskType.Numeric;
                    rep.Mask.EditMask = String.Format("n2");
                    rep.Mask.UseMaskAsDisplayFormat = true;
                    column.ColumnEdit = rep;
                }
            }
            productBranchPricesGridControl.RefreshDataSource();
            ProductBranchPriceTable = tableResult;
        }

        /// <summary>
        /// Called from the screen, when the user changes a price of a branch
        /// </summary>
        /// <param name="gridControl">Grid control raises the event from the screen</param>
        /// <param name="index">Row index of the under data source</param>
        /// <param name="columnName">Name of the changed column</param>
        public void ChangeProductBranchPrice(BOSGridControl gridControl, int index, string columnName)
        {
            DataTable table = (DataTable)gridControl.DataSource;
            BRBranchsController objBranchsController = new BRBranchsController();
            List<BRBranchsInfo> branches = objBranchsController.GetAllBranches();
            int branchID = Convert.ToInt32(table.Rows[index]["FK_BRBranchID"]);
            BRBranchsInfo changedBranch = branches.Where(b => b.BRBranchID == branchID).FirstOrDefault();
            if (changedBranch != null)
            {
                int count = 0;
                for (int i = 0; i < table.Rows.Count; i++)
                {
                    if (i != index)
                    {
                        branchID = Convert.ToInt32(table.Rows[i]["FK_BRBranchID"]);
                        BRBranchsInfo branch = branches.Where(b => b.BRBranchID == branchID).FirstOrDefault();
                        if (branch != null && branch.FK_GELocationID == changedBranch.FK_GELocationID)
                        {
                            count++;
                        }
                    }
                }

                if (count > 0)
                {
                    if (MessageBox.Show(
                                ProductLocalizedResources.ChangeSameLocationPriceMessage,
                                CommonLocalizedResources.MessageBoxDefaultCaption,
                                MessageBoxButtons.YesNo,
                                MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            if (i != index)
                            {
                                branchID = Convert.ToInt32(table.Rows[i]["FK_BRBranchID"]);
                                BRBranchsInfo branch = branches.Where(b => b.BRBranchID == branchID).FirstOrDefault();
                                if (branch != null && branch.FK_GELocationID == changedBranch.FK_GELocationID)
                                {
                                    table.Rows[i][columnName] = table.Rows[index][columnName];
                                }
                            }
                        }
                    }
                }
            }
            gridControl.RefreshDataSource();
        }

        public void ChangeProductID(ICPackagingNormItemsInfo item, int ProductID)
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(ProductID);
            if (objProductsInfo != null)
            {
                item.ICPackagingNormItemProductName = objProductsInfo.ICProductName;
                item.ICPackagingNormItemNo = objProductsInfo.ICProductNo;
                item.ICPackagingNormItemProductDesc = objProductsInfo.ICProductDesc;
                item.FK_ICProductID = objProductsInfo.ICProductID;
                item.FK_ICMeasureUnitID = objProductsInfo.FK_ICProductBasicUnitID;
                item.FK_ICProdAttPackingMaterialSizeID = objProductsInfo.FK_ICProdAttPackingMaterialSizeID;
                item.FK_ICProdAttPackingMaterialSpecialityID = objProductsInfo.FK_ICProdAttPackingMaterialSpecialityID;
                item.FK_ICProdAttPackingMaterialWeightPerVolumeID = objProductsInfo.FK_ICProdAttPackingMaterialWeightPerVolumeID;
                item.ICPackagingNormItemPackagingGW = objProductsInfo.ICProductNetWeight;
                item.ICPackagingNormItemPackagingNW = objProductsInfo.ICProductGrossWeight;
                item.ICPackagingNormItemProductInsideDimensionHeight = objProductsInfo.ICProductInsideDimensionHeight;
                item.ICPackagingNormItemProductInsideDimensionWidth = objProductsInfo.ICProductInsideDimensionWidth;
                item.ICPackagingNormItemProductInsideDimensionLength = objProductsInfo.ICProductInsideDimensionLength;
                item.ICPackagingNormItemProductOverallDimensionHeight = objProductsInfo.ICProductOverallDimensionHeight;
                item.ICPackagingNormItemProductOverallDimensionWidth = objProductsInfo.ICProductOverallDimensionWidth;
                item.ICPackagingNormItemProductOverallDimensionLength = objProductsInfo.ICProductOverallDimensionLength;
                entity.ICPackagingNormItemsList.GridControl.RefreshDataSource();
            }
        }
        /// <summary>
        /// Invalidate product branch price history with currency
        /// </summary>
        /// <param name="productBranchPricesHistoryGridControl">The product branch price grid control</param>
        public void InvalidateProductBranchPriceHistoryWithCurrency(BOSGridControl productBranchPricesHistoryGridControl)
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            ICProductsInfo objProductsInfo = (ICProductsInfo)entity.MainObject;
            GEHistoryDetailOfProductBranchPricesController objHistoryDetailOfProductBranchPricesController = new GEHistoryDetailOfProductBranchPricesController();
            List<GEHistoryDetailOfProductBranchPricesInfo> historyDetailOfProductBranchPricesList = objHistoryDetailOfProductBranchPricesController.GetHistoryByProductIDAndCurrencyNo(objProductsInfo.ICProductID, "VND");

            productBranchPricesHistoryGridControl.DataSource = historyDetailOfProductBranchPricesList;
            GridView gridView = (GridView)productBranchPricesHistoryGridControl.MainView;
            gridView.Columns.Remove(gridView.Columns["FK_BRBranchID"]);
            foreach (GridColumn column in gridView.Columns)
            {
                column.OptionsColumn.AllowEdit = false;
                if (column.FieldName == "BRBranchName")
                {
                    column.Caption = ProductLocalizedResources.BRBranchName;
                    column.GroupIndex = 1;
                    column.BestFit();
                }
                else if (column.FieldName == "ADUserName")
                {
                    column.Caption = ProductLocalizedResources.ADUserName;
                    column.BestFit();
                }
                else if (column.FieldName == "GEObjectHistoryDate")
                {
                    column.Caption = ProductLocalizedResources.GEObjectHistoryDate;
                    RepositoryItemTextEdit rep = new RepositoryItemTextEdit();
                    rep.Mask.MaskType = DevExpress.XtraEditors.Mask.MaskType.DateTime;
                    rep.Mask.EditMask = String.Format("dd/MM/yyyy hh:mm tt");
                    rep.Mask.UseMaskAsDisplayFormat = true;
                    column.ColumnEdit = rep;
                    column.BestFit();
                }
                else if (column.FieldName == "GEHistoryDetailOfProductBranchPriceOldValue" ||
                    column.FieldName == "GEHistoryDetailOfProductBranchPriceNewValue")
                {
                    if (column.FieldName == "GEHistoryDetailOfProductBranchPriceOldValue")
                    {
                        column.Caption = ProductLocalizedResources.ICProductOldBranchPrice;
                    }
                    else if (column.FieldName == "GEHistoryDetailOfProductBranchPriceNewValue")
                    {
                        column.Caption = ProductLocalizedResources.ICProductNewBranchPrice;
                    }
                    RepositoryItemTextEdit rep = new RepositoryItemTextEdit();
                    rep.Mask.MaskType = DevExpress.XtraEditors.Mask.MaskType.Numeric;
                    rep.Mask.EditMask = String.Format("n2");
                    rep.Mask.UseMaskAsDisplayFormat = true;
                    column.ColumnEdit = rep;
                    column.Width = 150;
                }
                else column.Visible = false;
            }
            productBranchPricesHistoryGridControl.RefreshDataSource();
        }

        public void ChangeProductTypeAccountConfig(int customerTypeAccountConfigID)
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            ICProductsInfo product = (ICProductsInfo)entity.MainObject;
            product.FK_ICProductTypeAccountConfigID = customerTypeAccountConfigID;

            ICProductTypeAccountConfigsInfo ctac = new ICProductTypeAccountConfigsInfo();
            ICProductTypeAccountConfigsController ctacsController = new ICProductTypeAccountConfigsController();
            if (customerTypeAccountConfigID > 0)
            {
                ctac = (ICProductTypeAccountConfigsInfo)ctacsController.GetObjectByID(customerTypeAccountConfigID);
                if (ctac != null)
                {
                    product.FK_ACAccountCostPriceID = ctac.FK_ACAccountCostPriceID;
                    product.FK_ACAccountDiscountID = ctac.FK_ACAccountDiscountID;
                    product.FK_ACAccountID = ctac.FK_ACAccountID;
                    product.FK_ACAccountRevenueID = ctac.FK_ACAccountRevenueID;
                    product.FK_ACAccountRevenueInternalID = ctac.FK_ACAccountRevenueInternalID;
                    product.FK_ACAccountSaleReturnID = ctac.FK_ACAccountSaleReturnID;
                }
            }

            entity.UpdateMainObjectBindingSource();
        }

        public decimal CalculateOverallDimension(MMOverallInsideDimensionConfigsInfo objOverallInsideDimensionConfigsInfo, decimal size, bool isInside)
        {
            decimal returnSize = 0;
            if (size > 0)
            {
                int value = objOverallInsideDimensionConfigsInfo.MMOverallInsideDimensionConfigOperationValue;
                if (objOverallInsideDimensionConfigsInfo.MMOverallInsideDimensionConfigOperationType == OperationType.Plus.ToString())
                {
                    if (isInside)
                        returnSize = size + value;
                    else returnSize = size - value;
                }
                else if (objOverallInsideDimensionConfigsInfo.MMOverallInsideDimensionConfigOperationType == OperationType.Minus.ToString())
                {
                    if (isInside)
                        returnSize = size - value;
                    else returnSize = size + value;
                }
                else if (objOverallInsideDimensionConfigsInfo.MMOverallInsideDimensionConfigOperationType == OperationType.Multi.ToString())
                {
                    if (isInside)
                        returnSize = size * value;
                    else
                    {
                        if (value > 0) returnSize = size / value;
                    }
                }
                else if (objOverallInsideDimensionConfigsInfo.MMOverallInsideDimensionConfigOperationType == OperationType.Split.ToString())
                {
                    if (isInside)
                    {
                        if (value != 0) returnSize = size / value;
                    }
                    else returnSize = size * value;

                }
            }
            return returnSize;
        }

        public void CalculateProductionNormItemPackaging(bool isInside)
        {
            if (Toolbar.IsNullOrNoneAction()) ActionEdit();
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;

            ICProductsInfo objProductsInfo = (ICProductsInfo)entity.MainObject;
            if (objProductsInfo != null)
            {
                MMOverallInsideDimensionConfigsController objOverallInsideDimensionConfigsController = new MMOverallInsideDimensionConfigsController();
                List<MMOverallInsideDimensionConfigsInfo> overallInsideDimensionConfigsList = new List<MMOverallInsideDimensionConfigsInfo>();
                MMOverallInsideDimensionConfigsInfo objOverallInsideDimensionConfigsInfo = new MMOverallInsideDimensionConfigsInfo();

                if (objProductsInfo.FK_ICProdAttPackingMaterialSpecialityID > 0)
                {
                    if (isInside)
                    {
                        #region Height
                        overallInsideDimensionConfigsList
                            = objOverallInsideDimensionConfigsController.GetConfigByAttributeIDAndType(objProductsInfo.FK_ICProdAttPackingMaterialSpecialityID, OverallInsideDimensionConfigType.Height.ToString(), objProductsInfo.FK_ICProductGroupID);
                        objOverallInsideDimensionConfigsInfo = overallInsideDimensionConfigsList.FirstOrDefault();
                        if (objOverallInsideDimensionConfigsInfo != null)
                        {
                            objProductsInfo.ICProductOverallDimensionHeight = CalculateOverallDimension(objOverallInsideDimensionConfigsInfo,
                                                                                                               objProductsInfo.ICProductInsideDimensionHeight, isInside);
                        }
                        else
                            objProductsInfo.ICProductOverallDimensionHeight = 0;
                        #endregion
                        #region Width
                        overallInsideDimensionConfigsList
                            = objOverallInsideDimensionConfigsController.GetConfigByAttributeIDAndType(objProductsInfo.FK_ICProdAttPackingMaterialSpecialityID, OverallInsideDimensionConfigType.Width.ToString(), objProductsInfo.FK_ICProductGroupID);
                        objOverallInsideDimensionConfigsInfo = overallInsideDimensionConfigsList.FirstOrDefault();
                        if (objOverallInsideDimensionConfigsInfo != null)
                        {
                            objProductsInfo.ICProductOverallDimensionWidth = CalculateOverallDimension(objOverallInsideDimensionConfigsInfo,
                                                                                                               objProductsInfo.ICProductInsideDimensionWidth, isInside);
                        }
                        else
                            objProductsInfo.ICProductOverallDimensionWidth = 0;
                        #endregion
                        #region Length
                        overallInsideDimensionConfigsList
                            = objOverallInsideDimensionConfigsController.GetConfigByAttributeIDAndType(objProductsInfo.FK_ICProdAttPackingMaterialSpecialityID, OverallInsideDimensionConfigType.Length.ToString(), objProductsInfo.FK_ICProductGroupID);
                        objOverallInsideDimensionConfigsInfo = overallInsideDimensionConfigsList.FirstOrDefault();
                        if (objOverallInsideDimensionConfigsInfo != null)
                        {
                            objProductsInfo.ICProductOverallDimensionLength = CalculateOverallDimension(objOverallInsideDimensionConfigsInfo,
                                                                                                               objProductsInfo.ICProductInsideDimensionLength, isInside);
                        }
                        else
                            objProductsInfo.ICProductOverallDimensionLength = 0;
                        #endregion
                    }
                    else
                    {
                        #region Height
                        overallInsideDimensionConfigsList
                            = objOverallInsideDimensionConfigsController.GetConfigByAttributeIDAndType(objProductsInfo.FK_ICProdAttPackingMaterialSpecialityID, OverallInsideDimensionConfigType.Height.ToString(), objProductsInfo.FK_ICProductGroupID);
                        objOverallInsideDimensionConfigsInfo = overallInsideDimensionConfigsList.FirstOrDefault();
                        if (objOverallInsideDimensionConfigsInfo != null)
                        {
                            objProductsInfo.ICProductInsideDimensionHeight = CalculateOverallDimension(objOverallInsideDimensionConfigsInfo,
                                                                                                               objProductsInfo.ICProductOverallDimensionHeight, isInside);
                        }
                        #endregion
                        #region Width
                        overallInsideDimensionConfigsList
                            = objOverallInsideDimensionConfigsController.GetConfigByAttributeIDAndType(objProductsInfo.FK_ICProdAttPackingMaterialSpecialityID, OverallInsideDimensionConfigType.Width.ToString(), objProductsInfo.FK_ICProductGroupID);
                        objOverallInsideDimensionConfigsInfo = overallInsideDimensionConfigsList.FirstOrDefault();
                        if (objOverallInsideDimensionConfigsInfo != null)
                        {
                            objProductsInfo.ICProductInsideDimensionWidth = CalculateOverallDimension(objOverallInsideDimensionConfigsInfo,
                                                                                                               objProductsInfo.ICProductOverallDimensionWidth, isInside);
                        }
                        #endregion
                        #region Length
                        overallInsideDimensionConfigsList
                            = objOverallInsideDimensionConfigsController.GetConfigByAttributeIDAndType(objProductsInfo.FK_ICProdAttPackingMaterialSpecialityID, OverallInsideDimensionConfigType.Length.ToString(), objProductsInfo.FK_ICProductGroupID);
                        objOverallInsideDimensionConfigsInfo = overallInsideDimensionConfigsList.FirstOrDefault();
                        if (objOverallInsideDimensionConfigsInfo != null)
                        {
                            objProductsInfo.ICProductInsideDimensionLength = CalculateOverallDimension(objOverallInsideDimensionConfigsInfo,
                                                                                                               objProductsInfo.ICProductOverallDimensionLength, isInside);
                        }
                        #endregion
                    }
                    entity.UpdateMainObjectBindingSource();

                }
            }
        }

        public void CalculateBoxArea()
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            ICProductsInfo objProductsInfo = (ICProductsInfo)entity.MainObject;
            ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
            List<ICProductAttributesInfo> ProductAttributesList = objProductAttributesController.GetProductAttributesByProductAttributeGroup("PackingMaterialSpeciality");
            if (objProductsInfo.ICProductOverallDimensionLength > 0 && objProductsInfo.ICProductOverallDimensionWidth > 0 )
            {
                if (objProductsInfo.FK_ICProdAttPackingMaterialSpecialityID > 0)
                {
                    ICProductAttributesInfo objProductAttributesInfo = ProductAttributesList.Where(o => (o.ICProductAttributeID == objProductsInfo.FK_ICProdAttPackingMaterialSpecialityID)).FirstOrDefault();
                    if (objProductAttributesInfo != null)
                    {
                        CalculateFormula(objProductAttributesInfo.ICProductAttributeFormulaCountBarrelA, objProductAttributesInfo.ICProductAttributeFormulaCountBarrelB
                            , objProductAttributesInfo.ICProductAttributeFormulaCountSeparatelyValue
                            , objProductAttributesInfo.ICProductAttributeFormulaCountOperationA, objProductAttributesInfo.ICProductAttributeFormulaCountOperationB);
                    }
                }
            }
        }

        public void CalculateFormula(String formulA, String formulB, decimal separatelyValue, String formulArrA, String formulArrB)
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            ICProductsInfo objProductsInfo = (ICProductsInfo)entity.MainObject;
            try
            {
                decimal AA = 0;
                decimal BB = 0;
                ev = new Evaluator(Eval3.eParserSyntax.cSharp, false);
                ev.AddEnvironmentFunctions(this);
                ev.AddEnvironmentFunctions(new EvalFunctions());
                D = new Eval3.EvalVariable("D", 0.0, "Dai", typeof(decimal));
                R = new Eval3.EvalVariable("R", 0.0, "Rong", typeof(decimal));
                C = new Eval3.EvalVariable("C", 0.0, "Cao", typeof(decimal));

                D.Value = objProductsInfo.ICProductOverallDimensionLength;
                R.Value = objProductsInfo.ICProductOverallDimensionWidth;
                C.Value = objProductsInfo.ICProductOverallDimensionHeight;
                mFormula3 = ev.Parse(formulA);
                AA = Convert.ToDecimal(mFormula3.value.ToString());
                mFormula3 = ev.Parse(formulB);
                BB = Convert.ToDecimal(mFormula3.value.ToString());
                if (formulArrA != string.Empty || formulArrB != string.Empty)
                {
                    if (FormulaHandler != null) mFormula3.ValueChanged -= FormulaHandler;
                    ev = new Evaluator(Eval3.eParserSyntax.cSharp, true);
                    ev.AddEnvironmentFunctions(this);
                    ev.AddEnvironmentFunctions(new EvalFunctions());

                    A = new Eval3.EvalVariable("A", 0.0, "DTA", typeof(decimal));
                    A.Value = AA;
                    B = new Eval3.EvalVariable("B", 0.0, "DTB", typeof(decimal));
                    B.Value = BB;

                    //Reset A
                    if (AA <= separatelyValue)
                    {
                        mFormula3 = ev.Parse(formulArrA.Replace(" ", "").Replace("A", "").Replace("B", "").Replace("=", ""));
                        if (formulArrA.Contains("A"))
                            AA = Convert.ToDecimal(mFormula3.value.ToString());
                        if (formulArrA.Contains("B"))
                            BB = Convert.ToDecimal(mFormula3.value.ToString());
                    }
                    else
                    {
                        mFormula3 = ev.Parse(formulArrB.Replace(" ", "").Replace("A", "").Replace("B", "").Replace("=", ""));
                        if (formulArrB.Contains("A"))
                            AA = Convert.ToDecimal(mFormula3.value.ToString());
                        if (formulArrB.Contains("B"))
                            BB = Convert.ToDecimal(mFormula3.value.ToString());
                    }
                }

                objProductsInfo.ICProductBoxArea = (AA * BB) / 1000000;
                objProductsInfo.ICProductSupplierPrice = objProductsInfo.ICProductBoxUnitPrice * objProductsInfo.ICProductBoxArea;
                objProductsInfo.ICProductSupplierPrice = Math.Round(objProductsInfo.ICProductSupplierPrice, 0);
                entity.UpdateMainObjectBindingSource();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Công thức tính diện tích A/B chưa đúng! \nVui lòng kiểm tra lại cấu hình cho diện tích thùng!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        public void CalculateProductCapacity()
        {
            ICProductsInfo product = (ICProductsInfo)CurrentModuleEntity.MainObject;
            product.ICProductCapacity = product.ICProductInsideDimensionWidth * product.ICProductInsideDimensionLength * product.ICProductInsideDimensionHeight;
            CurrentModuleEntity.UpdateMainObjectBindingSource();
        }

        public void SaveProductMeasureUnitList()
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            ICProductsInfo product = (ICProductsInfo)entity.MainObject;
            if (product.ICProductID > 0)
            {
                if (entity.ProductMeasureUnitList != null)
                {
                    entity.ProductMeasureUnitList.SaveItemObjects();
                }
                MessageBox.Show(ProductLocalizedResources.SaveSuccess, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        public void RemoveProductMeasureUnitList()
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            entity.ProductMeasureUnitList.RemoveSelectedRowObjectFromList();
        }

        public void UpdatePrimaryImage(String path)
        {
            PackagingProductEntities entity = (PackagingProductEntities)CurrentModuleEntity;
            ICProductsInfo objProductsInfo = (ICProductsInfo)CurrentModuleEntity.MainObject;
            objProductsInfo.ICProductPrimaryPath = path;
            entity.UpdateMainObjectBindingSource();
        }
    }
    #endregion

}









