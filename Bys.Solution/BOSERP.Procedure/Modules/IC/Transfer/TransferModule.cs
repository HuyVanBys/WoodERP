using BOSCommon;
using BOSCommon.Constants;
using BOSComponent;
using BOSERP.GenaralLeadger;
using BOSLib;
using BOSReport;
using BOSBase;
using DevExpress.XtraCharts;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraReports.UI;
using DevExpress.XtraTab;
using Localization;
using Microsoft.Office.Interop.Excel;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.OleDb;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading;
using System.Windows.Forms;
using System.ComponentModel;
using Range = Microsoft.Office.Interop.Excel.Range;
using Excel = Microsoft.Office.Interop.Excel;
using System.Drawing;
using System.Diagnostics;

namespace BOSERP.Modules.Transfer
{
    #region TransferModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:TransferModule
    //Created Date:Thursday, June 19, 2008
    //-----------------------------------------------------------

    public class TransferModule : GLTransferModule
    {
        #region Constants
        public const string TransferItemsGridControlName = "fld_dgcICTransferItems";
        public const string ToolbarButtonTransferReceipt = "TransferReceipt";
        public const string ToolbarButtonEditAfterCompleting = "EditAfterCompleting";
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
        public const string SearchBranchLookupEditControlName = "fld_lkeFK_BRBranchID";
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], END
        public const string SaveAccountingButtonName = "fld_btnSaveAccounting";
        public const string EmployeeReceverControlName = "fld_lkeFK_HREmployeeReceverID";

        public BOSButton SaveAccountingButton;
        #endregion

        #region Public Properties
        public BOSLookupEdit SearchBranchLookupEditControl;
        public BOSLookupEdit EmployeeReceverControlNameLookupEditControl;
        public List<ADDataViewPermissionsInfo> CurrentModuleDataViewPermissionList;
        public List<BRBranchsInfo> BranchList;
        BOSComponent.BOSTabControl Tab;
        public bool EditAfterCompleting = false;
        #endregion

        #region Private Properties
        private Workbook WorkBook;
        private Worksheet WorkSheet;
        private Microsoft.Office.Interop.Excel.Application App;
        private BackgroundWorker ExportWorker;
        private string FilePath { get; set; }
        #endregion

        public TransferModule()
        {
            Name = ModuleName.Transfer;
            CurrentModuleEntity = new TransferEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();

            //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
            GetCurrentModuleDataViewPermission();
            SearchBranchLookupEditControl = (BOSLookupEdit)Controls[TransferModule.SearchBranchLookupEditControlName];
            EmployeeReceverControlNameLookupEditControl = (BOSLookupEdit)Controls[TransferModule.EmployeeReceverControlName];
            if (EmployeeReceverControlNameLookupEditControl != null)
                EmployeeReceverControlNameLookupEditControl.Properties.DataSource = GetAllEmployeeForLookupEdit();
            SearchBranchLookupEditControl.Properties.DataSource = BranchList;
            //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], END
            SaveAccountingButton = (BOSButton)Controls[SaveAccountingButtonName];
            StartGettingInventoryThread();
        }

        #region Local
        public void AddItemToTransferItemsList()
        {
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransfersInfo objTransfersInfo = (ICTransfersInfo)entity.MainObject;
            ICTransferItemsInfo item = (ICTransferItemsInfo)entity.ModuleObjects[TableName.ICTransferItemsTableName];
            ICProductsController objProductsController = new ICProductsController();
            if (item.FK_ICProductID > 0)
            {
                ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);
                if (objProductsInfo.HasComponent)
                {
                    List<ICProductsForViewInfo> listProduct = new List<ICProductsForViewInfo>();
                    listProduct = BOSApp.CurrentProductList.Where(o => o.ICProductID == objProductsInfo.ICProductID).ToList();
                    guiShowProductHasComponent<ICProductsInfo> guiProduct = new guiShowProductHasComponent<ICProductsInfo>(listProduct);
                    guiProduct.Module = this;
                    guiProduct.ShowDialog();
                    if (guiProduct.DialogResult == DialogResult.OK)
                    {
                        ICProductsForViewInfo objProduct1 = guiProduct.CollectionItemList.FirstOrDefault();
                        ICProductComponentsController objProductComponentsController = new ICProductComponentsController();
                        List<ICProductComponentsInfo> components = objProductComponentsController.GetProductComponentListByProductID(item.FK_ICProductID);
                        if (components.Count > 0)
                        {
                            foreach (ICProductComponentsInfo component in components)
                            {
                                item = new ICTransferItemsInfo();
                                entity.SetDefaultValuesFromProduct(component.FK_ICProductComponentChildID, item);
                                item.ICTransferItemProductQty = objProduct1.ICProductItemQty * component.ICProductComponentQty;
                                item.ICTransferItemProductExchangeQty = item.ICTransferItemProductQty * item.ICTransferItemProductFactor;
                                entity.SetProductCostByProductUnitCost(item);
                                entity.TransferItemList.Add(item);
                            }
                        }
                    }
                }
                else
                {
                    entity.SetDefaultValuesFromProduct(item.FK_ICProductID, item);
                    item.ICTransferItemProductNoOfOldSys = objProductsInfo.ICProductNoOfOldSys;
                    entity.TransferItemList.AddObjectToList();
                    entity.SetDefaultValuesFromProduct(item.FK_ICProductID);
                }
            }
            entity.TransferItemList.GridControl.RefreshDataSource();
        }
        public List<APPurchaseOrdersInfo> GetPurcharseOrderOfBatchProduct()
        {
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransfersInfo mainobject = (ICTransfersInfo)CurrentModuleEntity.MainObject;

            APPurchaseOrdersController objPurchaseOrdersController = new APPurchaseOrdersController();
            List<APPurchaseOrdersInfo> purchareOrderList = objPurchaseOrdersController.GetPurchaseOrderByBatchProductID(mainobject.FK_MMBatchProductID);
            return purchareOrderList.Where(o => o.APPurchaseOrderType.Contains("OutSourcing") || o.APPurchaseOrderReceiptTypeCombo.Contains("OutSourcing")).ToList();
        }

        public void ChangeItemFromTransferItemsList()
        {
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransfersInfo objTransfersInfo = (ICTransfersInfo)entity.MainObject;
            if (entity.TransferItemList.CurrentIndex < 0)
                return;

            ICTransferItemsInfo objICTransferItemsInfo = (ICTransferItemsInfo)entity.TransferItemList[entity.TransferItemList.CurrentIndex];
            if (objTransfersInfo.ICTransferType == TransferType.Transfer.ToString())
                objICTransferItemsInfo.FK_ICStockID = objICTransferItemsInfo.FK_ICFromStockID;
            else
                objICTransferItemsInfo.FK_ICStockID = objICTransferItemsInfo.FK_ICToStockID;
            entity.SetProductPriceByProductUnitPrice(objICTransferItemsInfo);
            entity.TransferItemList.GridControl.RefreshDataSource();
        }

        public void DeleteItemFromTransferItemsList()
        {
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            entity.TransferItemList.RemoveSelectedRowObjectFromList();
        }


        #endregion

        protected override DataSet GetSearchData(ref string searchQuery)
        {
            ICTransfersController objTransfersController = new ICTransfersController();
            ICTransfersInfo searchObject = (ICTransfersInfo)CurrentModuleEntity.SearchObject;

            DataSet ds = new DataSet();
            if (SearchBranchLookupEditControl.EditValue.ToString() == "" || SearchBranchLookupEditControl.EditValue.ToString() == "0")
            {
                if (BranchList.Count == 0)
                {
                    ds = objTransfersController.GetDataSetByID(-1);
                }
                else
                {
                    ds = objTransfersController.GetTransferListByListOfBranchID(searchObject.ICTransferNo,
                                                            searchObject.ICTransferReference,
                                                            searchObject.ICTransferType,
                                                            searchObject.FK_HREmployeeID,
                                                            searchObject.FK_BRBranchID,
                                                            searchObject.FK_ICFromStockID,
                                                            searchObject.FK_ICToStockID,
                                                            searchObject.TransferDateFrom,
                                                            searchObject.TransferDateTo, BranchList);
                }
            }
            else
            {
                ds = objTransfersController.GetTransferList(searchObject.ICTransferNo,
                                                            searchObject.ICTransferReference,
                                                            searchObject.ICTransferType,
                                                            searchObject.FK_HREmployeeID,
                                                            searchObject.FK_BRBranchID,
                                                            searchObject.FK_ICFromStockID,
                                                            searchObject.FK_ICToStockID,
                                                            searchObject.TransferDateFrom,
                                                            searchObject.TransferDateTo);
            }

            return ds;
        }

        public void GetCurrentModuleDataViewPermission()
        {
            CurrentModuleDataViewPermissionList = BOSApp.CurrentADDataViewPermissionList.Where(i => i.STModuleName == Name && i.ADDataViewPermissionType == ADDataViewPermissionType.Module).ToList();

            List<int> branchIDList = new List<int>();
            foreach (ADDataViewPermissionsInfo dataViewPermissionsInfo in CurrentModuleDataViewPermissionList)
            {
                branchIDList.Add(dataViewPermissionsInfo.FK_BRBranchID);
            }

            if (branchIDList.Count == 0)
            {
                BranchList = new List<BRBranchsInfo>();
            }
            else
            {
                BRBranchsController objBranchsController = new BRBranchsController();
                List<BRBranchsInfo> branchList = objBranchsController.GetAllBranches();

                BranchList = branchList.Where(i => branchIDList.IndexOf(i.BRBranchID) > -1).ToList();
            }
        }

        public override void InvalidateToolbar()
        {
            base.InvalidateToolbar();
            ICTransfersInfo mainobject = (ICTransfersInfo)CurrentModuleEntity.MainObject;
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, true);
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, true);
            ParentScreen.SetEnableOfToolbarButton("CompletedOutSourcing", false);
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonCancelComplete, false);
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, false);
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDuplicate, false);
            if (mainobject.ICTransferStatus == TransferStatus.Complete.ToString() ||
                mainobject.ICTransferStatus == TransferStatus.Incomplete.ToString() ||
                mainobject.ICTransferStatus == TransferStatus.Post.ToString())
            {
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, false);
                ParentScreen.SetEnableOfToolbarButton("CompletedOutSourcing", true);
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonCancelComplete, true);
            }
            if (mainobject.ICTransferStatus == TransferStatus.New.ToString())
            {
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, true);
            }
            ParentScreen.SetEnableOfToolbarButton(TransferModule.ToolbarButtonEditAfterCompleting, false);
            if (mainobject.ICTransferType == TransferType.Transfer.ToString())
            {
                if (mainobject.ICTransferStatus != TransferStatus.New.ToString())
                {
                    ParentScreen.SetEnableOfToolbarButton(TransferModule.ToolbarButtonEditAfterCompleting, true);
                }
                ICTransfersController objTransfersController = new ICTransfersController();
                ICTransfersInfo objTransfersInfo = objTransfersController.GetTransferReceiptByTransferNo(mainobject.ICTransferNo);
                if (objTransfersInfo != null && objTransfersInfo.ICTransferStatus == TransferStatus.Complete.ToString())
                {
                    ParentScreen.SetEnableOfToolbarButton(TransferModule.ToolbarButtonEditAfterCompleting, false);
                }
            }
            if (mainobject.ICTransferType == TransferType.Transfer.ToString() &&
                mainobject.ICTransferTransferType == TransferTransferType.TransferOutsourcing.ToString())
            {
                ParentScreen.SetEnableOfToolbarButton("CompletedOutSourcing", true);
            }
            if (mainobject.ICTransferStatus == TransferStatus.Close.ToString())
            {
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, false);
                ParentScreen.SetEnableOfToolbarButton("CompletedOutSourcing", false);
                ParentScreen.SetEnableOfToolbarButton(TransferModule.ToolbarButtonEditAfterCompleting, false);
            }
            if (mainobject.ICTransferID > 0 && mainobject.ICTransferType == TransferType.Transfer.ToString())
            {
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDuplicate, true);
            }
            if (Toolbar.IsNullOrNoneAction())
            {
                ParentScreen.SetEnableOfToolbarButton(ToolbarButtonTransferReceipt, true);
            }   
        }

        public override void ActionNew()
        {
            base.ActionNew();
            ParentScreen.SetEnableOfToolbarButton(ToolbarButtonTransferReceipt, false);
        }

        public override void ActionCancel()
        {
            base.ActionCancel();
            ParentScreen.SetEnableOfToolbarButton(ToolbarButtonTransferReceipt, true);
        }

        public override void ActionEdit()
        {
            base.ActionEdit();

            if (Toolbar.CurrentObjectID > 0)
            {
                ParentScreen.SetEnableOfToolbarButton(ToolbarButtonTransferReceipt, false);
            }
        }

        public void ActionEditAfterCompleting()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                EditAfterCompleting = true;
                ActionEdit();
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, false);
            }
        }

        public override int ActionSave()
        {
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransfersInfo objTransfersInfo = (ICTransfersInfo)entity.MainObject;
            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            //Check for stock specification
            foreach (ICTransferItemsInfo item in entity.TransferItemList)
            {
                if (item.FK_ICFromStockID == 0 || item.FK_ICToStockID == 0)
                {
                    MessageBox.Show(TransferLocalizedResources.DefineStockForItemMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return 0;
                }
                objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);
                if (objProductsInfo.ICProductType != ProductType.Service.ToString()
                    && !objProductsInfo.IsAsset
                    && (objProductsInfo.ICPriceCalculationMethodMethod != PriceCalculationMethod.Average.ToString()
                        || (objProductsInfo.ICPriceCalculationMethodMethod == PriceCalculationMethod.Average.ToString() && item.ICTransferItemIsSpecificCalculation)))
                {
                    if (item.FK_ICProductSerieID == 0)
                    {
                        MessageBox.Show(string.Format(ShipmentLocalizedResources.ItemSerieNoIsRequiredMessage, item.ICTransferItemProductDesc), CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return 0;
                    }
                }
            }
            //Check for existing products
            if (objTransfersInfo.ICTransferType == TransferType.TransferReceipt.ToString())
            {
                foreach (ICTransferItemsInfo item in entity.TransferItemList)
                {
                    if (!objProductsController.IsExist(item.FK_ICProductID))
                    {
                        MessageBox.Show(string.Format(TransferLocalizedResources.ProductDoesNotExistMessage, item.ICTransferItemProductDesc),
                                        CommonLocalizedResources.MessageBoxDefaultCaption,
                                        MessageBoxButtons.OK,
                                        MessageBoxIcon.Error);
                        return 0;
                    }
                }
            }
            ICTransfersController objTransfersController = new ICTransfersController();
            ICTransfersInfo transferReference = (ICTransfersInfo)objTransfersController.GetObjectByNo(objTransfersInfo.ICTransferReference);
            if (transferReference != null && DateTime.Compare(transferReference.ICTransferDate, objTransfersInfo.ICTransferDate) > 0)
            {
                MessageBox.Show("Ngày chứng từ hiện tại đang nhỏ hơn ngày xuất chuyển kho: \n"
                            + string.Format("{0} - {1}", transferReference.ICTransferNo, transferReference.ICTransferDate.ToShortDateString())
                            , CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return 0;
            }

            if ((objTransfersInfo.ICTransferType == TransferType.Transfer.ToString() && objTransfersInfo.ICTransferDesc == TransferLocalizedResources.TransferDefaultDesc)
                || (objTransfersInfo.ICTransferType == TransferType.TransferReceipt.ToString() && objTransfersInfo.ICTransferDesc == TransferLocalizedResources.TransferReceiptDefaultDesc))
            {
                SetDefaultDesc();
            }

            int objectID = base.ActionSave();
            if (objectID > 0)
            {
                if (EditAfterCompleting)
                {
                    ActionComplete();
                    //ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, true);
                    EditAfterCompleting = false;
                }
                entity.InvalidateItemComponents();
                ParentScreen.SetEnableOfToolbarButton(ToolbarButtonTransferReceipt, true);
            }
            return objectID;
        }

        public override void ActionDelete()
        {
            base.ActionDelete();
        }

        public void ChangeObject(string objectAccessKey)
        {
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByAccessKey(objectAccessKey);
            ICTransfersInfo objTransfersInfo = (ICTransfersInfo)CurrentModuleEntity.MainObject;
            objTransfersInfo.ACObjectAccessKey = objectAccessKey;
            objObjectsInfo = objObjectsController.GetObjectByIDAndType(objObjectsInfo.ACObjectID, objObjectsInfo.ACObjectType);
            if (objObjectsInfo != null)
            {
                objTransfersInfo.ACObjectType = objObjectsInfo.ACObjectType.ToString();
                objTransfersInfo.FK_ACObjectID = objObjectsInfo.ACObjectID;
                CurrentModuleEntity.UpdateMainObjectBindingSource();
            }
            else
            {
                objTransfersInfo.ACObjectType = string.Empty;
                objTransfersInfo.FK_ACObjectID = 0;
            }
            DisplayLabelText(objTransfersInfo);
        }

        private void SetDefaultDesc()
        {
            ICStocksController objStocksController = new ICStocksController();
            ICTransfersInfo transfer = (ICTransfersInfo)CurrentModuleEntity.MainObject;

            if (transfer.ICTransferType == TransferType.Transfer.ToString())
            {
                transfer.ICTransferDesc = TransferLocalizedResources.TransferDefaultDesc;
            }
            else if (transfer.ICTransferType == TransferType.TransferReceipt.ToString())
            {
                transfer.ICTransferDesc = TransferLocalizedResources.TransferReceiptDefaultDesc;
            }
            ICStocksInfo fromStock = (ICStocksInfo)objStocksController.GetObjectByID(transfer.FK_ICFromStockID);
            ICStocksInfo toStock = (ICStocksInfo)objStocksController.GetObjectByID(transfer.FK_ICToStockID);
            transfer.ICTransferDesc = string.Format(transfer.ICTransferDesc,
                                                    fromStock == null ? "{0}" : fromStock.ICStockName,
                                                     toStock == null ? "{1}" : toStock.ICStockName);
        }

        public override bool ActionComplete()
        {
            //Check all items must have serie no
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;

            bool isCompleted = false;
            ICTransfersInfo objTransfersInfo = (ICTransfersInfo)CurrentModuleEntity.MainObject;
            if (objTransfersInfo.ICTransferType == TransferType.Transfer.ToString())
            {
                if (entity.TransferItemList.IsInvalidInventory(TransactionUtil.cstInventoryShipment))
                {
                    return false;
                }
                isCompleted = base.ActionComplete();
            }
            else
            {

                CurrentModuleEntity.SetPropertyChangeEventLock(false);
                isCompleted = entity.CompleteReceipt();
                CurrentModuleEntity.SetPropertyChangeEventLock(true);
                if (isCompleted)
                {
                    if (objTransfersInfo.ICTransferType == TransferType.TransferReceipt.ToString())
                    {
                        entity.UpdateTransferProposalReferenceByTransferReceipt();
                    }
                }
            }

            if (isCompleted)
            {
                //Update the back-up component item list for rolling back
                entity.ComponentTransferItemList.BackupList.Clear();
                foreach (ICTransferItemsInfo item in entity.ComponentTransferItemList)
                {
                    entity.ComponentTransferItemList.BackupList.Add((ICTransferItemsInfo)item.Clone());
                }
            }
            InvalidateToolbar();
            return isCompleted;
        }

        public void ActionTransferReceipt()
        {
            base.ActionNew();

            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonNew, false);
            ParentScreen.SetEnableOfToolbarButton(TransferModule.ToolbarButtonTransferReceipt, false);

            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransfersInfo objTransfersInfo = (ICTransfersInfo)entity.MainObject;
            objTransfersInfo.ICTransferType = TransferType.TransferReceipt.ToString();
            objTransfersInfo.FK_ICFromStockID = 0;
            objTransfersInfo.FK_ICToStockID = BOSApp.CurrentCompanyInfo.FK_ICStockID;
            CurrentModuleEntity.UpdateMainObjectBindingSource();

            guiTransferReceipt guiTransferReceipt = new guiTransferReceipt();
            guiTransferReceipt.Module = this;
            if (guiTransferReceipt.ShowDialog() == DialogResult.OK)
            {
                ICTransfersController objTransfersController = new ICTransfersController();
                ICTransfersInfo existingTransferReceipt = objTransfersController.GetTransferByReference(objTransfersInfo.ICTransferReference);
                if (existingTransferReceipt != null)
                {

                    if (MessageBox.Show(string.Format(TransferLocalizedResources.ConfirmTransferReceiptExistsMessage, objTransfersInfo.ICTransferReference),
                                    CommonLocalizedResources.MessageBoxDefaultCaption,
                                    MessageBoxButtons.YesNo,
                                    MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        ActionCancel();
                        ActionInvalidate(existingTransferReceipt.ICTransferID);
                        return;
                    }
                }
                SetDefaultDesc();
            }
            else
            {
                ActionCancel();
            }
        }

        public void ActionPrintA4()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                RPTransferVMA4 report = new RPTransferVMA4();
                InitRPTransferVMA4Report(report);
                guiReportPreview reviewer = new guiReportPreview(report, BOSCommon.Constants.Report.DevInvoiceItemReportPath, true);
                reviewer.Show();
            }
        }

        public void ActionPrintBorrowSamples()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                RPTransferBorrowSamples report = new RPTransferBorrowSamples();
                InitRPTransferBorrowSamples(report);
                guiReportPreview reviewer = new guiReportPreview(report, BOSCommon.Constants.Report.DevInvoiceItemReportPath, true);
                reviewer.Show();
            }
        }

        public void ActionPrintA5()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                RPTransferVMA5 report = new RPTransferVMA5();
                InitRPTransferVMA5Report(report);
                guiReportPreview reviewer = new guiReportPreview(report, BOSCommon.Constants.Report.DevInvoiceItemReportPath, true);
                reviewer.Show();
            }
        }

        private void InitRPTransferBorrowSamples(RPTransferBorrowSamples report)
        {
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransfersInfo mainobject = (ICTransfersInfo)entity.MainObject;
            ICTransfersController objTransfersController = new ICTransfersController();
            ICTransfersInfo objTransfersInfo = objTransfersController.GetTransferForReportByTransferID(mainobject.ICTransferID);
            report.bsICTransfers.DataSource = objTransfersInfo;
            ICTransferItemsController objTransferItemsController = new ICTransferItemsController();
            List<ICTransferItemsInfo> transferItemList = objTransferItemsController.GetTransferItemForReportByTransferID(mainobject.ICTransferID);
            report.bsICTransferItems.DataSource = transferItemList;
        }

        private void InitRPTransferVMA4Report(RPTransferVMA4 report)
        {
            string creditNos = string.Empty;
            string debitNos = string.Empty;
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransfersInfo mainobject = (ICTransfersInfo)entity.MainObject;
            ICTransfersController objTransfersController = new ICTransfersController();
            ICTransfersInfo objTransfersInfo = objTransfersController.GetTransferForReportByTransferID(mainobject.ICTransferID);
            report.bsICTransfers.DataSource = objTransfersInfo;
            ICTransferItemsController objTransferItemsController = new ICTransferItemsController();
            List<ICTransferItemsInfo> transferItemList = objTransferItemsController.GetTransferItemForReportByTransferID(mainobject.ICTransferID);
            report.bsICTransferItems.DataSource = transferItemList;

            ACAccountsController objAccountsController = new ACAccountsController();
            ACAccountsInfo objAccountsInfo;
            foreach (ACDocumentEntrysInfo documentEntrysInfo in (BOSList<ACDocumentEntrysInfo>)entity.DocumentEntryList)
            {
                if (documentEntrysInfo.FK_ACCreditAccountID != null && documentEntrysInfo.FK_ACCreditAccountID != 0)
                {
                    objAccountsInfo = (ACAccountsInfo)objAccountsController.GetObjectByID(documentEntrysInfo.FK_ACCreditAccountID);
                    if (objAccountsInfo != null && !string.IsNullOrEmpty(objAccountsInfo.ACAccountNo))
                    {
                        if (string.IsNullOrEmpty(creditNos)) creditNos = objAccountsInfo.ACAccountNo;
                        else creditNos = string.Format("{0}, {1}", creditNos, objAccountsInfo.ACAccountNo);
                    }
                }
                if (documentEntrysInfo.FK_ACDebitAccountID != null && documentEntrysInfo.FK_ACDebitAccountID != 0)
                {
                    objAccountsInfo = (ACAccountsInfo)objAccountsController.GetObjectByID(documentEntrysInfo.FK_ACDebitAccountID);
                    if (objAccountsInfo != null && !string.IsNullOrEmpty(objAccountsInfo.ACAccountNo))
                    {
                        if (string.IsNullOrEmpty(debitNos)) debitNos = objAccountsInfo.ACAccountNo;
                        else debitNos = string.Format("{0}, {1}", debitNos, objAccountsInfo.ACAccountNo);
                    }
                }
            }

            XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblTransferToDate"];
            if (label != null)
            {
                label.Text = string.Format(label.Text
                                           , BOSApp.GetCurrentServerDate().Day
                                           , BOSApp.GetCurrentServerDate().Month
                                           , BOSApp.GetCurrentServerDate().Year);
            }
            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblTransferDate"];
            if (label != null)
            {
                label.Text = string.Format(label.Text
                                           , BOSApp.GetCurrentServerDate().Day
                                           , BOSApp.GetCurrentServerDate().Month
                                           , BOSApp.GetCurrentServerDate().Year);
            }
            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblTransferNo"];
            if (label != null)
            {
                label.Text = string.Format("Số: " + mainobject.ICTransferNo);
            }

            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblCreditAccount"];
            if (label != null)
            {
                label.Text = string.Format("Có: {0}", creditNos);
            }

            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblDebitAccount"];
            if (label != null)
            {
                label.Text = string.Format("Nợ: {0}", debitNos);
            }
            BRBranchsController objBranchsController = new BRBranchsController();
            BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            if (objBranchsInfo != null)
            {
                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchAddressLine3"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactAddressLine3;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchPhone"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactPhone;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchFax"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactFax;
                }
            }
        }

        public void InitRPTransferVMA5Report(RPTransferVMA5 report)
        {
            string creditNos = string.Empty;
            string debitNos = string.Empty;
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransfersInfo mainobject = (ICTransfersInfo)entity.MainObject;
            ICTransfersController objTransfersController = new ICTransfersController();
            ICTransfersInfo objTransfersInfo = objTransfersController.GetTransferForReportByTransferID(mainobject.ICTransferID);
            report.bsICTransfers.DataSource = objTransfersInfo;
            ICTransferItemsController objTransferItemsController = new ICTransferItemsController();
            List<ICTransferItemsInfo> transferItemList = objTransferItemsController.GetTransferItemForReportByTransferID(mainobject.ICTransferID);
            report.bsICTransferItems.DataSource = transferItemList;

            ACAccountsController objAccountsController = new ACAccountsController();
            ACAccountsInfo objAccountsInfo;
            foreach (ACDocumentEntrysInfo documentEntrysInfo in (BOSList<ACDocumentEntrysInfo>)entity.DocumentEntryList)
            {
                if (documentEntrysInfo.FK_ACCreditAccountID != null && documentEntrysInfo.FK_ACCreditAccountID != 0)
                {
                    objAccountsInfo = (ACAccountsInfo)objAccountsController.GetObjectByID(documentEntrysInfo.FK_ACCreditAccountID);
                    if (objAccountsInfo != null && !string.IsNullOrEmpty(objAccountsInfo.ACAccountNo))
                    {
                        if (string.IsNullOrEmpty(creditNos)) creditNos = objAccountsInfo.ACAccountNo;
                        else creditNos = string.Format("{0}, {1}", creditNos, objAccountsInfo.ACAccountNo);
                    }
                }
                if (documentEntrysInfo.FK_ACDebitAccountID != null && documentEntrysInfo.FK_ACDebitAccountID != 0)
                {
                    objAccountsInfo = (ACAccountsInfo)objAccountsController.GetObjectByID(documentEntrysInfo.FK_ACDebitAccountID);
                    if (objAccountsInfo != null && !string.IsNullOrEmpty(objAccountsInfo.ACAccountNo))
                    {
                        if (string.IsNullOrEmpty(debitNos)) debitNos = objAccountsInfo.ACAccountNo;
                        else debitNos = string.Format("{0}, {1}", debitNos, objAccountsInfo.ACAccountNo);
                    }
                }
            }

            XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblTransferToDate"];
            if (label != null)
            {
                label.Text = string.Format(label.Text
                                           , BOSApp.GetCurrentServerDate().Day
                                           , BOSApp.GetCurrentServerDate().Month
                                           , BOSApp.GetCurrentServerDate().Year);
            }
            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblTransferDate"];
            if (label != null)
            {
                label.Text = string.Format(label.Text
                                           , BOSApp.GetCurrentServerDate().Day
                                           , BOSApp.GetCurrentServerDate().Month
                                           , BOSApp.GetCurrentServerDate().Year);
            }
            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblTransferNo"];
            if (label != null)
            {
                label.Text = string.Format("Số: " + mainobject.ICTransferNo);
            }

            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblCreditAccount"];
            if (label != null)
            {
                label.Text = string.Format("Có: {0}", creditNos);
            }

            label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblDebitAccount"];
            if (label != null)
            {
                label.Text = string.Format("Nợ: {0}", debitNos);
            }
            BRBranchsController objBranchsController = new BRBranchsController();
            BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            if (objBranchsInfo != null)
            {
                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchAddressLine3"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactAddressLine3;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchPhone"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactPhone;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchFax"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactFax;
                }
            }
        }

        public void PrintOrderGoods()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                String strReportFileName = BOSCommon.Constants.Report.TransferItemsListReportName;
                ReportHelper.FileName = strReportFileName;
                Hashtable reportParams = new Hashtable();
                reportParams.Add("prICTransferID", Toolbar.CurrentObjectID);
                ReportHelper.DisplayReport(reportParams);
                ReportHelper.ReportDoc.PrintToPrinter(1, false, 1, 1);
            }
        }

        public void ShowTransferItemPackage()
        {
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            BOSGridControl transferItemGridControl = (BOSGridControl)Controls[TransferModule.TransferItemsGridControlName];
            GridView gridView = (GridView)transferItemGridControl.MainView;

            if (gridView.FocusedRowHandle >= 0)
            {
                ICTransferItemsInfo objTransferItemsInfo = (ICTransferItemsInfo)gridView.GetRow(gridView.FocusedRowHandle);
                if (objTransferItemsInfo.TransferItemPackageList == null)
                {
                    objTransferItemsInfo.TransferItemPackageList = new BOSList<ICTransferItemPackagesInfo>();
                    objTransferItemsInfo.TransferItemPackageList.InitBOSList(entity,
                                                                                    TableName.ICTransferItemsTableName,
                                                                                    TableName.ICTransferItemPackagesTableName,
                                                                                    BOSList<ICTransferItemPackagesInfo>.cstRelationForeign);
                }
                guiChoosePackage<ICTransferItemPackagesInfo> guiChoosePackage = new guiChoosePackage<ICTransferItemPackagesInfo>(
                                                                                objTransferItemsInfo,
                                                                                TableName.ICTransferItemsTableName,
                                                                                objTransferItemsInfo.TransferItemPackageList);
                guiChoosePackage.Module = this;
                if (guiChoosePackage.ShowDialog() == DialogResult.OK)
                {
                    objTransferItemsInfo.TransferItemPackageList.Clear();
                    if (guiChoosePackage.PackageList.Count > 0)
                    {
                        foreach (ICPackagesInfo objPackagesInfo in guiChoosePackage.PackageList)
                        {
                            ICTransferItemPackagesInfo objTransferItemPackagesInfo = new ICTransferItemPackagesInfo();
                            objTransferItemPackagesInfo.FK_ICStockID = objTransferItemsInfo.FK_ICStockID;
                            objTransferItemPackagesInfo.FK_ICProductID = objTransferItemsInfo.FK_ICProductID;
                            objTransferItemPackagesInfo.FK_ICPackageID = objPackagesInfo.ICPackageID;
                            objTransferItemPackagesInfo.FK_ICTransferItemID = objTransferItemsInfo.ICTransferItemID;
                            objTransferItemPackagesInfo.ICTransferItemPackageQty = objPackagesInfo.ICPackageProductQty;
                            objTransferItemsInfo.TransferItemPackageList.Add(objTransferItemPackagesInfo);
                        }

                        ICPackagesInfo objPackagesInfo1 = guiChoosePackage.PackageList[0];
                        ICProductSeriesController objProductSeriesController = new ICProductSeriesController();
                        ICProductSeriesInfo objProductSeriesInfo = objProductSeriesController.GetSerieByProductIDAndSerieNo(
                                                                            objTransferItemsInfo.FK_ICProductID,
                                                                            objPackagesInfo1.ICPackagePackNo);
                        if (objProductSeriesInfo != null)
                        {
                            objTransferItemsInfo.FK_ICProductSerieID = objProductSeriesInfo.ICProductSerieID;
                            objTransferItemsInfo.ICTransferItemProductSerialNo = objProductSeriesInfo.ICProductSerieNo;
                        }
                    }
                }
            }
        }

        public bool GenerateReceiptTransfer()
        {
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            if (entity.ShipmentTransferList.CurrentIndex >= 0)
            {
                ICTransfersInfo objShipmentTransfersInfo = entity.ShipmentTransferList[entity.ShipmentTransferList.CurrentIndex];
                //If To Stock is not stock of current branch, return false
                ICStocksController objICStocksController = new ICStocksController();
                ICStocksInfo objICToStocksInfo = (ICStocksInfo)objICStocksController.GetObjectByID(objShipmentTransfersInfo.FK_ICToStockID);
                if (objICToStocksInfo != null)
                {
                    if (objICToStocksInfo.FK_BRBranchID != BOSApp.CurrentCompanyInfo.FK_BRBranchID)
                    {
                        MessageBox.Show(TransferLocalizedResources.MismatchTransferMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return false;
                    }
                }

                entity.GenerateReceiptTransferFromShipmentTransfer(objShipmentTransfersInfo);
                return true;
            }
            else
            {
                MessageBox.Show(TransferLocalizedResources.ChooseTransferMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return false;
            }
        }

        public void ShowBranchTransfers(int branchID, string transferNo, DateTime fromDate, DateTime toDate, int fromStock, int toStock)
        {
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransfersController objTransfersController = new ICTransfersController();
            DataSet ds = objTransfersController.GetTransfersForReceipt(branchID, transferNo, fromDate, toDate, fromStock, toStock);
            entity.ShipmentTransferList.Invalidate(ds);
        }

        public void ChangeSourceStock(int stockID)
        {
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransfersInfo objTransfersInfo = (ICTransfersInfo)entity.MainObject;
            objTransfersInfo.FK_ICFromStockID = stockID;
            if (!Toolbar.IsNullOrNoneAction())
            {
                if (entity.TransferItemList.Count > 0)
                {
                    if (MessageBox.Show(TransferLocalizedResources.ConfirmChangeItemStockMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        foreach (ICTransferItemsInfo item in entity.TransferItemList)
                        {
                            item.FK_ICFromStockID = stockID;
                            if (objTransfersInfo.ICTransferType == TransferType.Transfer.ToString())
                            {
                                item.FK_ICStockID = stockID;
                            }
                        }
                        entity.TransferItemList.GridControl.RefreshDataSource();
                    }
                }
            }
        }

        public void ChangeTargetStock(int stockID)
        {
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransfersInfo objTransfersInfo = (ICTransfersInfo)entity.MainObject;
            objTransfersInfo.FK_ICToStockID = stockID;
            if (!Toolbar.IsNullOrNoneAction())
            {
                if (entity.TransferItemList.Count > 0)
                {
                    if (MessageBox.Show(TransferLocalizedResources.ConfirmChangeItemStockMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        foreach (ICTransferItemsInfo item in entity.TransferItemList)
                        {
                            item.FK_ICToStockID = stockID;
                            if (objTransfersInfo.ICTransferType == TransferType.TransferReceipt.ToString())
                            {
                                item.FK_ICStockID = stockID;
                            }
                        }
                        entity.TransferItemList.GridControl.RefreshDataSource();
                    }
                }
            }
        }

        public void ChangeItemStock(ICTransferItemsInfo objTransferItemsInfo)
        {
            ICTransfersInfo objTransfersInfo = (ICTransfersInfo)CurrentModuleEntity.MainObject;
            if (objTransfersInfo.ICTransferType == TransferType.Transfer.ToString())
            {
                objTransferItemsInfo.FK_ICStockID = objTransferItemsInfo.FK_ICFromStockID;
            }
            else
            {
                objTransferItemsInfo.FK_ICStockID = objTransferItemsInfo.FK_ICToStockID;
            }
        }

        public string CheckForValidQty(ICTransferItemsInfo item, decimal qty)
        {
            string errMsg = string.Empty;
            ICTransfersInfo transfer = (ICTransfersInfo)CurrentModuleEntity.MainObject;
            if (transfer.ICTransferType == TransferType.TransferReceipt.ToString())
            {
                if (qty > item.ICTransferItemProductQtyOld)
                {
                    errMsg = TransferLocalizedResources.ReceiptedQtyCannotBeGreaterThanShippedQtyMessage;
                }
            }
            return errMsg;
        }

        public void ChangeOperationItemList(int objMMOperationID)
        {
            MMBatchProductsController objBatchProductsController = new MMBatchProductsController();
            MMBatchProductsInfo objBatchProductsInfo = (MMBatchProductsInfo)objBatchProductsController.GetObjectByID(objMMOperationID);
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransferItemsInfo objTransferItemsInfo = (ICTransferItemsInfo)entity.ModuleObjects[TableName.ICTransferItemsTableName];
            if (objTransferItemsInfo != null)
            {
                foreach (ICTransferItemsInfo item in entity.TransferItemList)
                {
                    item.FK_MMOperationID = objMMOperationID;
                }
                entity.TransferItemList.GridControl.RefreshDataSource();
            }
        }

        public void ChangeBatchProductItemList(int objMMBatchProductID)
        {
            MMBatchProductsController objBatchProductsController = new MMBatchProductsController();
            MMBatchProductsInfo objBatchProductsInfo = (MMBatchProductsInfo)objBatchProductsController.GetObjectByID(objMMBatchProductID);
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransferItemsInfo objTransferItemsInfo = (ICTransferItemsInfo)entity.ModuleObjects[TableName.ICTransferItemsTableName];
            if (objTransferItemsInfo != null)
            {
                foreach (ICTransferItemsInfo item in entity.TransferItemList)
                {
                    item.FK_MMBatchProductID = objMMBatchProductID;
                }
                entity.TransferItemList.GridControl.RefreshDataSource();
            }
        }

        public void ShownInventoryStocks()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                TransferEntities entity = (TransferEntities)CurrentModuleEntity;
                ICTransfersInfo objTransfersInfo = (ICTransfersInfo)entity.MainObject;
                ICInventoryStocksInfo objInventoryStocksInfo = new ICInventoryStocksInfo();
                ICInventoryStocksController objInventoryStocksController = new ICInventoryStocksController();
                guiShowInventoryStock guiShowInventoryStock = new guiShowInventoryStock();
                if (objTransfersInfo.FK_ICFromStockID > 0)
                {
                    guiShowInventoryStock = new guiShowInventoryStock(string.Empty, objTransfersInfo.FK_ICFromStockID);
                }
                else
                {
                    guiShowInventoryStock = new guiShowInventoryStock(string.Empty);
                }
                guiShowInventoryStock.Module = this;
                guiShowInventoryStock.ShowDialog();
                List<ICProductSeriesInfo> SeriesList = new List<ICProductSeriesInfo>();
                SeriesList = guiShowInventoryStock.ProductSeriesInfoList;
                if (SeriesList.Count > 0)
                {
                    GetSelectedSeriesList(SeriesList);
                }
            }
        }

        public void GetSelectedSeriesList(List<ICProductSeriesInfo> SeriesList)
        {
            string type = string.Empty;
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransfersInfo objTransferInfo = (ICTransfersInfo)entity.MainObject;
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            //objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(SeriesList[0].FK_ICProductID);
            foreach (ICProductSeriesInfo item in SeriesList)
            {
                ICTransferItemsInfo objTransferItemsInfo = new ICTransferItemsInfo();
                BOSUtil.CopyObject(item, objTransferItemsInfo);
                objProductsInfo = BOSApp.GetProductFromCurrentProductList(item.FK_ICProductID);
                if (objProductsInfo != null)
                {
                    objTransferItemsInfo.ICTransferItemProductDesc = objProductsInfo.ICProductDesc;
                    objTransferItemsInfo.ICTransferItemProductName = objProductsInfo.ICProductName;
                    objTransferItemsInfo.FK_ICMeasureUnitID = objProductsInfo.FK_ICProductBasicUnitID;
                    objTransferItemsInfo.FK_ICDepartmentID = objProductsInfo.FK_ICDepartmentID;
                    objTransferItemsInfo.FK_ICProductGroupID = objProductsInfo.FK_ICProductGroupID;
                    objTransferItemsInfo.ICTransferItemProductNoOfOldSys = objProductsInfo.ICProductNoOfOldSys;
                    //objTransferItemsInfo.FK_ACAccountID = objProductsInfo.FK_ACAccountID;
                    objTransferItemsInfo.ICTransferItemProductType = objProductsInfo.ICProductType;
                    objTransferItemsInfo.ICTransferItemProductSupplierNo = objProductsInfo.ICProductSupplierNumber;
                }
                objTransferItemsInfo.FK_ICProductSerieID = item.ICProductSerieID;
                // objTransferItemsInfo.ICTransferItemLotNo = item.ICProductSerieLotNo;
                objTransferItemsInfo.ICTransferItemProductQty = item.ICInventoryStockQuantity;
                objTransferItemsInfo.ICTransferItemProductExchangeQty = item.ICInventoryStockQuantity;
                objTransferItemsInfo.ICTransferItemProductFactor = 1;
                objTransferItemsInfo.ICTransferItemQty1 = item.ICInventoryStockWoodQuantity;
                objTransferItemsInfo.FK_MMBatchProductID = objTransferInfo.FK_MMBatchProductID;
                objTransferItemsInfo.FK_MMOperationID = objTransferInfo.FK_MMOperationID;
                objTransferItemsInfo.FK_ICFromStockID = objTransferInfo.FK_ICFromStockID;
                objTransferItemsInfo.FK_ICToStockID = objTransferInfo.FK_ICToStockID;
                objTransferItemsInfo.ICTransferItemProductSerialNo = item.ICProductSerieNo;
                // objTransferItemsInfo.FK_ICProductAttributeTTMTID = objShipmentInfo.FK_ICProductAttributeTTMTID;
                //objShipmentItemsInfo.ICShipmentItemProductType = objShipmentInfo.ICShipmentShipmentType;
                if (objProductsInfo.ICProductType == ProductType.IngredientPackaging.ToString())
                {
                    objTransferItemsInfo.ICTransferItemProductDesc = item.ICProductSerieProductDesc;
                }
                objTransferItemsInfo.ICTransferItemProductUnitCost = AccountHelper.GetProductUnitCost(objTransferItemsInfo.FK_ICStockID, objTransferItemsInfo.FK_ICProductID, objTransferItemsInfo.ICTransferItemProductSerialNo, objTransferInfo.ICTransferDate) * objTransferItemsInfo.ICTransferItemProductFactor;
                objTransferItemsInfo.ICTransferItemTotalCost = objTransferItemsInfo.ICTransferItemProductUnitCost * objTransferItemsInfo.ICTransferItemProductQty;

                entity.TransferItemList.Add(objTransferItemsInfo);
            }
            entity.TransferItemList.GridControl.RefreshDataSource();

        }

        public void GenerateTransferReceipt()
        {
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransfersInfo objTransfersInfo = (ICTransfersInfo)entity.MainObject;
            objTransfersInfo.ICTransferType = TransferType.TransferReceipt.ToString();
            objTransfersInfo.FK_ICFromStockID = 0;
            objTransfersInfo.FK_ICToStockID = BOSApp.CurrentCompanyInfo.FK_ICStockID;
            CurrentModuleEntity.UpdateMainObjectBindingSource();

            guiTransferReceipt guiTransferReceipt = new guiTransferReceipt();
            guiTransferReceipt.Module = this;
            if (guiTransferReceipt.ShowDialog() == DialogResult.OK)
            {
                ICTransfersController objTransfersController = new ICTransfersController();
                ICTransfersInfo existingTransferReceipt = objTransfersController.GetTransferByReference(objTransfersInfo.ICTransferReference);
                if (existingTransferReceipt != null)
                {

                    if (MessageBox.Show(string.Format(TransferLocalizedResources.ConfirmTransferReceiptExistsMessage, objTransfersInfo.ICTransferReference),
                                    CommonLocalizedResources.MessageBoxDefaultCaption,
                                    MessageBoxButtons.YesNo,
                                    MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        ActionCancel();
                        ActionInvalidate(existingTransferReceipt.ICTransferID);
                        return;
                    }
                }
                SetDefaultDesc();
            }
            else
            {
                ActionCancel();
            }
        }

        public void AccountingForTransfer()
        {
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransfersInfo objTransfersInfo = (ICTransfersInfo)entity.MainObject;
            foreach (XtraTabPage tab in Tab.TabPages)
            {
                if (tab.Name == "fld_tabHardware")
                    tab.PageVisible = false;
                if (tab.Name == "fld_tabWoodProduct")
                    tab.PageVisible = true;
                if (tab.Name == "fld_TabRoundWood")
                    tab.PageVisible = false;
            }
        }

        public void GenerateDocument()
        {
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransfersInfo objTransfersInfo = (ICTransfersInfo)entity.MainObject;
            if (!Toolbar.IsNewAction())
            {
                ACDocumentsController objDocumentsController = new ACDocumentsController();
                ACDocumentsInfo objDocumentsInfo = (ACDocumentsInfo)objDocumentsController.GetObjectByNo(objTransfersInfo.ICTransferNo);
                if (objDocumentsInfo != null)
                {
                    MessageBox.Show("Chứng từ đã có hạch toán", "#message", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    SaveAccountingButton.Enabled = true;
                    GenerateAccountingData();
                    ACDocTypeEntrysController objDocTypeEntrysController = new ACDocTypeEntrysController();

                    string entryType = string.Empty;
                    if (objTransfersInfo.ICTransferType == TransferType.Transfer.ToString())
                    {
                        entryType = AccEntryType.XuatChuyenKho.ToString();
                    }
                    else
                    {
                        entryType = AccEntryType.NhapChuyenKho.ToString();
                    }

                    ACEntryTypesController objEntryTypesController = new ACEntryTypesController();
                    ACEntryTypesInfo entryTypesIfno = (ACEntryTypesInfo)objEntryTypesController.GetObjectByName(entryType);

                    ACDocumentEntrysInfo entry = new ACDocumentEntrysInfo();
                    if (entryTypesIfno != null)
                    {
                        entry.FK_ACEntryTypeID = entryTypesIfno.ACEntryTypeID;
                        entry.ACDocumentEntryDesc = entryTypesIfno.ACEntryTypeDesc;
                    }
                    entry.ACDocumentEntryAmount = entity.TransferItemList.Sum(i => i.ICTransferItemProductUnitCost * i.ICTransferItemProductQty);
                    entry.ACDocumentEntryExchangeAmount = entry.ACDocumentEntryAmount;

                    entity.DocumentEntryList.Clear();
                    entity.DocumentEntryList.Add(entry);
                    entity.DocumentEntryList.GridControl.RefreshDataSource();



                }
            }
        }

        #region Accounting
        public void SaveAccounting()
        {
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransfersInfo objTransfersInfo = (ICTransfersInfo)entity.MainObject;
            if (objTransfersInfo.ICTransferID == 0)
                return;

            foreach (ACDocumentsInfo objDocumentsInfo in entity.DocumentList)
            {
                BOSUtil.CopyObject(objTransfersInfo, objDocumentsInfo);
            }
            ACDocumentsController objDocumentsController = new ACDocumentsController();
            ACDocumentEntrysController objDocumentEntrysController = new ACDocumentEntrysController();
            ACDocumentsInfo document = entity.DocumentList.FirstOrDefault();
            if (document != null)
            {
                int documentID = objDocumentsController.CreateObject(document);
                if (documentID > 0)
                {
                    foreach (ACDocumentEntrysInfo entry in entity.DocumentEntryList)
                    {
                        entry.FK_ACDocumentID = documentID;
                        objDocumentEntrysController.CreateObject(entry);
                    }
                    MessageBox.Show("Lưu thành công", "#message", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            SaveAccountingButton.Enabled = false;
        }
        #endregion

        public override void Invalidate(int iObjectID)
        {
            base.Invalidate(iObjectID);
            SaveAccountingButton.Enabled = false;
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransfersInfo objTransfersInfo = (ICTransfersInfo)entity.MainObject;
            objTransfersInfo.ACObjectAccessKey = objTransfersInfo.FK_ACObjectID + ";" + objTransfersInfo.ACObjectType;
            entity.UpdateMainObjectBindingSource();
        }

        public void ActionNewFromManual()
        {
            ActionNew();
        }

        public void ActionNewFromTransferProposal()
        {
            ActionNew();
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransfersInfo objTransfersInfo = (ICTransfersInfo)entity.MainObject;
            List<ICTransferProposalItemsInfo> transferProposalItemList = new List<ICTransferProposalItemsInfo>();
            guiChooseTransferProposalItems guiFind = new guiChooseTransferProposalItems();
            guiFind.Module = this;
            DialogResult rs = guiFind.ShowDialog();
            if (rs != DialogResult.OK)
            {
                ActionCancel();
                return;
            }
            List<ICTransferItemsInfo> transferItemList = new List<ICTransferItemsInfo>();
            ICTransferItemsInfo objTransferItemsInfo = new ICTransferItemsInfo();
            transferProposalItemList = guiFind.SelectedObjects;
            ICTransferProposalItemsInfo objTransferProposalItemsInfo = transferProposalItemList.FirstOrDefault();
            if (objTransferProposalItemsInfo == null)
                objTransferProposalItemsInfo = new ICTransferProposalItemsInfo();
            transferProposalItemList.ForEach(o =>
            {
                objTransferItemsInfo = ToTransferItemFromTransferProposalItem(o);
                entity.SetProductPriceByProductUnitPrice(objTransferItemsInfo);
                transferItemList.Add(objTransferItemsInfo);
            });
            ICTransferProposalsController objTransferProposalsController = new ICTransferProposalsController();
            ICTransferProposalsInfo objTransferProposalsInfo = (ICTransferProposalsInfo)objTransferProposalsController.GetObjectByID(objTransferProposalItemsInfo.FK_ICTransferProposalID);
            if (objTransferProposalsInfo != null)
            {
                objTransfersInfo.FK_ICFromStockID = objTransferProposalsInfo.FK_ICFromStockID;
                objTransfersInfo.FK_ICToStockID = objTransferProposalsInfo.FK_ICToStockID;
                objTransfersInfo.FK_ICTransitStockID = objTransferProposalsInfo.FK_ICTransitStockID;
                objTransfersInfo.ICTransferExpiredDate = objTransferProposalsInfo.ICTransferProposalExpiredDate;
                objTransfersInfo.ICTransferStatus = TransferStatus.New.ToString();
                objTransfersInfo.ICTransferDesc = objTransferProposalsInfo.ICTransferProposalDesc;
            }
            entity.TransferItemList.Invalidate(transferItemList);
            entity.TransferItemList.GridControl.RefreshDataSource();
            entity.UpdateMainObjectBindingSource();
        }

        public ICTransferItemsInfo ToTransferItemFromTransferProposalItem(ICTransferProposalItemsInfo objTransferProposalItemsInfo)
        {
            ICProductsController controller = new ICProductsController();
            ICProductsInfo productsInfo = BOSApp.GetProductFromCurrentProductList(objTransferProposalItemsInfo.FK_ICProductID);
            return new ICTransferItemsInfo()
            {
                FK_ICStockID = objTransferProposalItemsInfo.FK_ICFromStockID,
                FK_ICFromStockID = objTransferProposalItemsInfo.FK_ICFromStockID,
                FK_ICToStockID = objTransferProposalItemsInfo.FK_ICToStockID,
                FK_ICTransitStockID = objTransferProposalItemsInfo.FK_ICTransitStockID,
                FK_ICProductID = objTransferProposalItemsInfo.FK_ICProductID,
                FK_ICProductGroupID = objTransferProposalItemsInfo.FK_ICProductGroupID,
                FK_ICProductSerieID = objTransferProposalItemsInfo.FK_ICProductSerieID,
                FK_ICDepartmentID = objTransferProposalItemsInfo.FK_ICDepartmentID,
                FK_ARSaleOrderID = objTransferProposalItemsInfo.FK_ARSaleOrderID,
                FK_ARSaleOrderItemID = objTransferProposalItemsInfo.FK_ARSaleOrderItemID,
                FK_ICMeasureUnitID = objTransferProposalItemsInfo.FK_ICMeasureUnitID,
                FK_ICTransferProposalID = objTransferProposalItemsInfo.FK_ICTransferProposalID,
                FK_ICTransferProposalItemID = objTransferProposalItemsInfo.ICTransferProposalItemID,
                ICTransferItemProductSerialNo = objTransferProposalItemsInfo.ICTransferProposalItemProductSerialNo,
                ICTransferItemProductQty = objTransferProposalItemsInfo.ICTransferProposalItemProductQty,
                ICTransferItemProductName = objTransferProposalItemsInfo.ICTransferProposalItemProductName,
                ICTransferItemProductDesc = objTransferProposalItemsInfo.ICTransferProposalItemProductDesc,
                ICTransferItemProductType = objTransferProposalItemsInfo.ICTransferProposalItemProductType,
                ICTransferItemProductUnitCost = objTransferProposalItemsInfo.ICTransferProposalItemProductUnitCost,
                ICTransferItemProductUnitPrice = productsInfo.ICProductPrice01,
                ICTransferItemProductNoOfOldSys = productsInfo.ICProductNoOfOldSys,
                ICTransferItemProductExchangeQty = objTransferProposalItemsInfo.ICTransferProposalItemProductQty,
                ICTransferItemProductFactor = 1,
                ICTransferItemStatus = TransferStatus.New.ToString(),
                ICTransferItemComment = objTransferProposalItemsInfo.ICTransferProposalItemComment,
                ICTransferItemPrice = productsInfo.ICProductPrice01 * objTransferProposalItemsInfo.ICTransferProposalItemProductQty,
            };
        }

        public string GetAttributeText(string productAttributeRefence)
        {
            ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
            List<ICProductAttributesInfo> productAttributeList = objProductAttributesController.GetProductAttributeByProductAttributeReferenceByCharater(productAttributeRefence, ",");
            if (productAttributeList == null)
                productAttributeList = new List<ICProductAttributesInfo>();
            return string.Join(", ", productAttributeList.Select(o => o.ICProductAttributeNo).ToArray());
        }

        public List<HREmployeesInfo> GetAllEmployeeForLookupEdit()
        {
            HREmployeesController objEmployeesController = new HREmployeesController();
            return objEmployeesController.GetAllEmployeeForLookupEdit();
        }

        public void ActionNewFromPOItemOutSourcing()
        {
            ActionNew();
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransfersInfo mainobject = (ICTransfersInfo)entity.MainObject;
            List<APPurchaseOrderItemOutSourcingsInfo> purchaseOrderItemOutSourcingsList = new List<APPurchaseOrderItemOutSourcingsInfo>();
            using (guiChoosePurchaseOrderItemOutSourcing guiFind = new guiChoosePurchaseOrderItemOutSourcing())
            {
                guiFind.Module = this;
                DialogResult rs = guiFind.ShowDialog();
                if (rs != DialogResult.OK)
                {
                    ActionCancel();
                    return;
                }
                purchaseOrderItemOutSourcingsList = guiFind.SelectedObjects;
            }

            APPurchaseOrderItemOutSourcingsInfo objFirstObjectsInfo = purchaseOrderItemOutSourcingsList.FirstOrDefault();
            if (objFirstObjectsInfo == null)
                objFirstObjectsInfo = new APPurchaseOrderItemOutSourcingsInfo();

            mainobject.FK_MMBatchProductID = objFirstObjectsInfo.FK_MMBatchProductID;
            mainobject.ICTransferTransferType = TransferTransferType.TransferOutsourcing.ToString();
            List<ICTransferItemsInfo> transferItemsList = new List<ICTransferItemsInfo>();
            ICTransferItemsInfo objTransferItemsInfo = new ICTransferItemsInfo();
            purchaseOrderItemOutSourcingsList.ForEach(o =>
            {
                objTransferItemsInfo = ToTransferItems(o);
                entity.SetProductPriceByProductUnitPrice(objTransferItemsInfo);
                transferItemsList.Add(objTransferItemsInfo);
            });

            entity.TransferItemList.Invalidate(transferItemsList);
            entity.UpdateMainObjectBindingSource();
        }

        public ICTransferItemsInfo ToTransferItems(APPurchaseOrderItemOutSourcingsInfo item)
        {
            ICProductsForViewInfo objProductsInfo = BOSApp.CurrentProductList.Where(o => o.ICProductID == item.FK_ICProductID).FirstOrDefault();
            if (objProductsInfo == null)
                objProductsInfo = new ICProductsForViewInfo();

            ICTransferItemsInfo objTransferItemsInfo = new ICTransferItemsInfo();
            BOSUtil.CopyObject(objProductsInfo, objTransferItemsInfo);

            objTransferItemsInfo.FK_APPurchaseOrderID = item.FK_APPurchaseOrderID;
            objTransferItemsInfo.FK_MMBatchProductID = item.FK_MMBatchProductID;
            objTransferItemsInfo.FK_MMBatchProductItemID = item.FK_MMBatchProductItemID;
            objTransferItemsInfo.FK_MMBatchProductProductionNormItemID = item.FK_MMBatchProductProductionNormItemID;
            objTransferItemsInfo.FK_APPurchaseOrderItemOutSourcingID = item.APPurchaseOrderItemOutSourcingID;
            objTransferItemsInfo.FK_ICProductID = item.FK_ICProductID;
            objTransferItemsInfo.FK_ICMeasureUnitID = item.FK_ICMeasureUnitID;
            objTransferItemsInfo.ICTransferItemProductName = item.APPurchaseOrderItemOutSourcingProductName;
            objTransferItemsInfo.ICTransferItemProductDesc = item.APPurchaseOrderItemOutSourcingProductDesc;
            objTransferItemsInfo.ICTransferItemProductQty = item.APPurchaseOrderItemOutSourcingProductQty;
            objTransferItemsInfo.ICTransferItemProductUnitPrice = item.APPurchaseOrderItemOutSourcingProductUnitPrice;
            objTransferItemsInfo.ICTransferItemProductHeight = item.APPurchaseOrderItemOutSourcingProductHeight;
            objTransferItemsInfo.ICTransferItemProductWidth = item.APPurchaseOrderItemOutSourcingProductWidth;
            objTransferItemsInfo.ICTransferItemProductLength = item.APPurchaseOrderItemOutSourcingProductLength;
            return objTransferItemsInfo;
        }

        public void CompletedOutSourcing()
        {
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransfersInfo mainobject = (ICTransfersInfo)entity.MainObject;
            if (mainobject.ICTransferTransferType != TransferTransferType.TransferOutsourcing.ToString())
                return;

            DialogResult rs = MessageBox.Show("Bạn có chắc chắn muốn hoàn tất phiếu xuất này không?", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (rs != DialogResult.Yes)
                return;

            ICTransfersController objTransfersController = new ICTransfersController();
            objTransfersController.CompletedOutSourcing(mainobject.ICTransferID);
            mainobject.ICTransferStatus = TransferStatus.Close.ToString();
            entity.UpdateMainObjectBindingSource();
            InvalidateToolbar();
        }

        public void PrintReceiptTransfer()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                RP_TransferReceipt report = new RP_TransferReceipt();
                InitTransferReport(report, Toolbar.CurrentObjectID);
                guiReportPreview viewer = new guiReportPreview(report);
                viewer.Show();
            }
        }

        public void PrintShipmentTransfer()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                RP_TransferShipment report = new RP_TransferShipment();
                InitTransferReport(report, Toolbar.CurrentObjectID);
                guiReportPreview viewer = new guiReportPreview(report);
                viewer.Show();
            }
        }

        private void InitTransferReport(XtraReport report, int transferID)
        {

            BRBranchsController objBranchsController = new BRBranchsController();
            BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            if (objBranchsInfo != null)
            {
                XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchAddressLine3"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactAddressLine3;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchPhone"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactPhone;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchFax"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactFax;
                }
            }

            ICTransfersController objTransfersController = new ICTransfersController();
            ICTransfersInfo transfer = (ICTransfersInfo)objTransfersController.GetObjectByID(transferID);

            ADReportsController objReportsController = new ADReportsController();
            List<ICTransferItemsInfo> transferList = objReportsController.GetListTransferItemByTransferID(transferID);

            XRLabel accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xrLabel28"];
            if (accLabel != null)
            {
                accLabel.Text = transfer.ICTransferDate.ToString("dd/MM/yyyy");
            }

            report.DataSource = transferList;
        }

        public override bool ActionCancelComplete()
        {
            if (!Toolbar.IsNullOrNoneAction())
                return false;

            ICTransfersInfo mainobject = (ICTransfersInfo)CurrentModuleEntity.MainObject;
            ICTransfersController objTransfersController = new ICTransfersController();
            if (mainobject.ICTransferType == TransferType.Transfer.ToString())
            {
                List<ICTransfersInfo> listTransfer = objTransfersController.GetShipmentReferenceByTransferReceipt(mainobject.ICTransferID);
                if (listTransfer.Count() > 0)
                {
                    MessageBox.Show("Chứng từ này đã tạo chứng từ nhập chuyển kho hoặc số lượng tồn kho hiện tại không đủ."
                       + Environment.NewLine
                        + string.Join(",", listTransfer.Select(o => o.ICTransferNo).Distinct().ToArray())
                        , CommonLocalizedResources.MessageBoxDefaultCaption
                       , MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return false;
                }
                else
                {
                    if (!base.ActionCancelComplete()) return false;
                    CurrentModuleEntity.SetPropertyChangeEventLock(false);
                    GLHelper.UnPostedTransactions(this.Name, mainobject.ICTransferID, ModulePostingType.Accounting, ModulePostingType.Stock, ModulePostingType.SaleOrder, ModulePostingType.Purchase, ModulePostingType.Allocation, ModulePostingType.TransitIn, ModulePostingType.TransitOut);
                    mainobject.ICTransferStatus = TransferStatus.New.ToString();
                    CurrentModuleEntity.UpdateMainObject();
                    CurrentModuleEntity.SetPropertyChangeEventLock(true);
                    
                }
            }
            if (mainobject.ICTransferType == TransferType.TransferReceipt.ToString())
            {
                ICTransactionsController objTransactionsController = new ICTransactionsController();
                List<ICTransactionsInfo> listShipment = objTransactionsController.GetShipmentReferenceByReceiptID(mainobject.ICTransferID, TableName.ICTransferItemsTableName);
                if (listShipment.Count() > 0)
                {
                    MessageBox.Show(PurchaseReceiptLocalizedResources.CancelCompleteExistsShipment + Environment.NewLine 
                                    + string.Join(",", listShipment.Select(o => o.ICTransactionReferenceNo).Distinct().ToArray())
                                    , CommonLocalizedResources.MessageBoxDefaultCaption
                                    , MessageBoxButtons.OK
                                    , MessageBoxIcon.Error);
                    return false;
                }
                if (!base.ActionCancelComplete()) return false;
                CurrentModuleEntity.SetPropertyChangeEventLock(false);
                GLHelper.UnPostedTransactions(this.Name, mainobject.ICTransferID, ModulePostingType.Accounting, ModulePostingType.Stock, ModulePostingType.SaleOrder, ModulePostingType.Purchase, ModulePostingType.Allocation, ModulePostingType.TransitIn, ModulePostingType.TransitOut);
                mainobject.ICTransferStatus = TransferStatus.New.ToString();
                CurrentModuleEntity.UpdateMainObject();
                CurrentModuleEntity.SetPropertyChangeEventLock(true);                
                
            }
            InvalidateToolbar();
            return true;
        }

        public override void ActionDuplicate()
        {
            base.ActionDuplicate();

            ICTransfersInfo mainObject = (ICTransfersInfo)CurrentModuleEntity.MainObject;
            mainObject.ICTransferStatus = TransferStatus.New.ToString();
            mainObject.ICTransferPostedStatus = PostedTransactionStatus.UnPosted.ToString();
            mainObject.FK_HREmployeeID = BOSApp.CurrentUsersInfo.FK_HREmployeeID;
            mainObject.AACreatedUser = BOSApp.CurrentUser;
            mainObject.AACreatedDate = BOSApp.GetCurrentServerDate();
            mainObject.AAUpdatedDate = DateTime.MaxValue;
            mainObject.AAUpdatedUser = string.Empty;
            mainObject.STToolbarActionName = "Manual";
            ToolbarNewActionName = mainObject.STToolbarActionName;
        }

        #region Import
        public void ImportTransferItem()
        {
            if (Toolbar.IsNullOrNoneAction())
                return;

            string filePath = string.Empty;
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Filter = TransferLocalizedResources.DialogFilter;
            if (dialog.ShowDialog() == DialogResult.Cancel)
                return;
            filePath = dialog.FileName;
            string extension = Path.GetExtension(filePath);
            string connectionString = @"Provider=Microsoft.Jet.OLEDB.4.0;Data Source='" + filePath + "';Extended Properties=\"Excel 8.0;HDR=YES;\"";
            if (extension.Equals(".xlsx"))
            {
                connectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source='" + filePath + "';Extended Properties=\"Excel 12.0;HDR=YES;\"";
            }
            BOSProgressBar.Start("Đang khởi tạo dữ liệu");
            DataSet ds = GetDataFromExcel(filePath, connectionString);
            System.Data.DataTable dt = ds.Tables[0];
            BOSProgressBar.Close();
            InitializeImportTransferItem(dt);
        }

        public void InitializeImportTransferItem(System.Data.DataTable dt)
        {
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransfersInfo mainObject = (ICTransfersInfo)entity.MainObject;
            AAColumnAliasController objColumnAliasController = new AAColumnAliasController();
            List<AAColumnAliasInfo> aliasImportsList = BOSApp.LstColumnAlias.Where(o => o.AATableName == "IPProducts")
                                                                           .ToList();
            List<IPProductsInfo> productList = new List<IPProductsInfo>();
            IPProductsInfo objProductsInfo = new IPProductsInfo();
            if (dt == null)
                return;
            foreach (DataRow dr in dt.Rows)
            {
                objProductsInfo = (IPProductsInfo)GetObjectFromDataRow(dr, objProductsInfo.GetType(), aliasImportsList);
                if (objProductsInfo != null && !string.IsNullOrWhiteSpace(objProductsInfo.IPProductNo))
                    productList.Add(objProductsInfo);
            }
            //bool isShipment = true;
            //if (mainObject.ICTransferType == TransferType.TransferReceipt.ToString())
            //    isShipment = false;
            guiImportProductItems guiFind = new guiImportProductItems(productList, true);
            guiFind.Module = this;
            DialogResult rs = guiFind.ShowDialog();
            if (rs != DialogResult.OK)
                return;
            BOSProgressBar.Start("Đang lưu dữ liệu");
            SaveItemToTransferItemsList(guiFind.ProductsList);
            BOSProgressBar.Close();

        }

        public void SaveItemToTransferItemsList(List<IPProductsInfo> productList)
        {
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransfersInfo mainObject = (ICTransfersInfo)entity.MainObject;
            ICProductsController objProductsController = new ICProductsController();
            ICProductMeasureUnitsController controller = new ICProductMeasureUnitsController();
            productList.ForEach(o =>
            {
                ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByNo(o.IPProductNo);
                ICTransferItemsInfo item = new ICTransferItemsInfo();
                item.FK_ICProductID = objProductsInfo.ICProductID;
                entity.SetDefaultValuesFromProduct(item.FK_ICProductID, item);
                item.ICTransferItemProductNoOfOldSys = objProductsInfo.ICProductNoOfOldSys;
                item.FK_ICStockID = o.FK_ICStockID;
                item.FK_ICFromStockID = item.FK_ICStockID;
                item.ICTransferItemProductSerialNo = string.IsNullOrWhiteSpace(o.IPProductSerieNo) ? string.Empty : o.IPProductSerieNo;
                item.FK_ICProductSerieID = o.FK_ICProductSerieID;
                item.FK_ICMeasureUnitID = o.FK_ICMeasureUnitID;
                ICProductMeasureUnitsInfo measureUnit = controller.GetProductMeasureUnitByProductIDAndMeasureUnitID(item.FK_ICProductID, item.FK_ICMeasureUnitID);
                item.ICTransferItemProductFactor = (measureUnit != null && measureUnit.ICProductMeasureUnitFactor > 0)
                                                    ? measureUnit.ICProductMeasureUnitFactor
                                                    : 1;
                item.ICTransferItemProductQty = Math.Round(o.IPProductQuantity,4);
                item.ICTransferItemProductUnitCost = AccountHelper.GetProductUnitCost(item.FK_ICStockID, item.FK_ICProductID, item.ICTransferItemProductSerialNo, mainObject.ICTransferDate) * item.ICTransferItemProductFactor;
                entity.SetProductPriceByProductUnitPrice(item);
                entity.TransferItemList.Add(item);

            });
            entity.TransferItemList.GridControl?.RefreshDataSource();
        }

        public DataSet GetDataFromExcel(string filePath, string connectionString)
        {
            DataSet ds = new DataSet();
            try
            {
                List<string> sheetNames = new List<string>();
                System.Data.OleDb.OleDbDataAdapter command;

                string commandTemplate = "SELECT * FROM [{0}]";
                string commandRun = string.Empty;
                using (OleDbConnection cn = new OleDbConnection(connectionString))
                {
                    cn.Open();
                    System.Data.DataTable dt = cn.GetSchema("Tables");
                    foreach (DataRow dr in dt.Rows)
                    {
                        sheetNames.Add(dr["TABLE_NAME"].ToString());
                    }
                    sheetNames.ForEach(o =>
                    {
                        commandRun = string.Format(commandTemplate, o);
                        command = new System.Data.OleDb.OleDbDataAdapter(commandRun, cn);
                        command.TableMappings.Add("Table", o);
                        command.Fill(ds);
                    });
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
            return ds;
        }

        public object GetObjectFromDataRow(DataRow row, Type type, List<AAColumnAliasInfo> aliasList)
        {
            object obj = type.InvokeMember("", System.Reflection.BindingFlags.CreateInstance, null, null, null);
            string columnName = string.Empty;
            AAColumnAliasInfo objColumnAliasInfo = new AAColumnAliasInfo();
            decimal decimalValue = 0;
            bool isConverter = false;
            foreach (DataColumn column in row.Table.Columns)
            {
                isConverter = false;
                object objValue = row[column];
                objColumnAliasInfo = aliasList.Where(o => o.AAColumnAliasCaption.ToLower() == column.ColumnName.ToLower()).FirstOrDefault();
                if (objColumnAliasInfo == null)
                    continue;

                PropertyInfo property = obj.GetType().GetProperty(objColumnAliasInfo.AAColumnAliasName);
                if (property != null)
                    property.SetValue(obj, ToPropertyDataType(column.DataType, property.PropertyType, objValue), null);
            }
            return obj;
        }

        public object ToPropertyDataType(Type fromType, Type toType, object objValue)
        {
            if (toType.Equals(typeof(string)) || toType.Equals(typeof(String)))
            {
                return objValue == null ? string.Empty : objValue.ToString().Trim();
            }
            if (objValue == null)
                return objValue;

            if (fromType.Equals(toType))
                return objValue;

            if (toType.Equals(typeof(decimal)) || toType.Equals(typeof(Decimal)))
            {
                decimal value = 0;
                Decimal.TryParse(objValue.ToString(), out value);
                return Math.Round(value, 5, MidpointRounding.AwayFromZero);
            }
            if (toType.Equals(typeof(int)))
            {
                decimal value = 0;
                Decimal.TryParse(objValue.ToString(), out value);
                return (int)value;
            }
            if (toType.Equals(typeof(bool)) || toType.Equals(typeof(Boolean)))
            {
                return !string.IsNullOrWhiteSpace(objValue.ToString());
            }
            return objValue;
        }
        #endregion

        #region Export template
        public void ExportPriceSheetTemplate()
        {
            try
            {
                BOSProgressBar.Start("Đang Export dữ liệu");
                ExportWorker_DoWork();
                BOSProgressBar.Close();
                if (File.Exists(FilePath))
                {
                    Process.Start(FilePath);
                }
            }
            catch (Exception ex)
            {
                BOSProgressBar.Close();
                MessageBox.Show(ex.ToString()
                                , CommonLocalizedResources.MessageBoxDefaultCaption
                                , MessageBoxButtons.OK
                                , MessageBoxIcon.Error);
            }
        }

        private void ExportWorker_DoWork()
        {
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransfersInfo mainObject = (ICTransfersInfo)entity.MainObject;
            List<ICTransferItemsInfo> listExport = entity.TransferItemList.ToList();

            List<ICMeasureUnitsInfo> listMeasureUnitsInfo = new List<ICMeasureUnitsInfo>();
            if (BOSApp.LookupTables.Contains("ICMeasureUnits"))
            {
                listMeasureUnitsInfo = (List<ICMeasureUnitsInfo>)(new ICMeasureUnitsController()).GetListFromDataSet((DataSet)BOSApp.LookupTables["ICMeasureUnits"]);
            }
            else
            {
                listMeasureUnitsInfo = (new ICMeasureUnitsController()).GetAllAliveMeasureUnit();
            }

            List<ICStocksInfo> listStocksInfo = new List<ICStocksInfo>();
            if (BOSApp.LookupTables.Contains("ICStocks"))
            {
                listStocksInfo = (List<ICStocksInfo>)(new ICStocksController()).GetListFromDataSet((DataSet)BOSApp.LookupTables["ICStocks"]);
            }
            else
            {
                listStocksInfo = (new ICStocksController()).GetListRealStock();
            }
            ICMeasureUnitsInfo objMeasureUnitsInfo = new ICMeasureUnitsInfo();
            ICStocksInfo objStocksInfo = new ICStocksInfo();
            ICProductsForViewInfo objProductsInfo = new ICProductsForViewInfo();

            string documentPath = Path.Combine(System.Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "BYSERP");
            if (!Directory.Exists(documentPath))
            {
                DirectoryInfo di = Directory.CreateDirectory(documentPath);
            }
            FilePath = Path.Combine(documentPath,
                                    String.Format("ChuyenKho_{0}_Ngay_{1}_{2}.xlsx",
                                    mainObject.ICTransferNo,
                                    mainObject.ICTransferDate.ToString("yyyy_MM_dd"),
                                    DateTimeOffset.Now.ToUnixTimeSeconds()));
            object misValue = System.Reflection.Missing.Value;
            Excel.Application xlApp = new Excel.Application();
            Excel.Workbook workbook = xlApp.Workbooks.Add(Excel.XlWBATemplate.xlWBATWorksheet);
            Excel.Worksheet worksheet = (Excel.Worksheet)workbook.ActiveSheet;
            xlApp.StandardFont = "Times New Roman";
            xlApp.StandardFontSize = 13;
            var header = worksheet.get_Range("A1", "J1");
            header.Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.FromArgb(9, 132, 227));
            header.Font.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.White);
            header.Font.Bold = true;
            header.Range["A1"].Value = "STT";
            header.Range["B1"].Value = "Mã sản phẩm (*)";
            header.Range["C1"].Value = "Mã sp đối tác";
            header.Range["D1"].Value = "Mã hệ thống cũ";
            header.Range["E1"].Value = "Tên sản phẩm";
            header.Range["F1"].Value = "Mô tả";
            header.Range["G1"].Value = "Đơn vị tính";
            header.Range["H1"].Value = "Số lượng";
            header.Range["I1"].Value = "Mã kho";
            header.Range["J1"].Value = "Mã lô hàng/Mã kiện";
            worksheet.Range["A:A"].EntireColumn.NumberFormat = "0";
            worksheet.Range["B:B"].EntireColumn.NumberFormat = "@";
            worksheet.Range["C:C"].EntireColumn.NumberFormat = "@";
            worksheet.Range["D:D"].EntireColumn.NumberFormat = "@";
            worksheet.Range["E:E"].EntireColumn.NumberFormat = "@";
            worksheet.Range["F:F"].EntireColumn.NumberFormat = "@";
            worksheet.Range["G:G"].EntireColumn.NumberFormat = "@";
            worksheet.Range["H:H"].EntireColumn.NumberFormat = "#,##0.00";
            worksheet.Range["I:I"].EntireColumn.NumberFormat = "@";
            worksheet.Range["J:J"].EntireColumn.NumberFormat = "@";
            
            int index = 2;
            int totalItem = listExport.Count() + 10;
            listExport.ForEach(o =>
            {
                worksheet.Range[$"A{index}"].Value = index - 1;
                objProductsInfo = BOSApp.CurrentProductList.FirstOrDefault(a => a.ICProductID == o.FK_ICProductID);
                if (objProductsInfo != null)
                {
                    worksheet.Range[$"B{index}"].Value = objProductsInfo.ICProductNo.Trim();
                }
                else
                {
                    worksheet.Range[$"B{index}"].Value = string.Empty;
                }

                worksheet.Range[$"C{index}"].Value = o.ICTransferItemProductSupplierNo.Trim();
                worksheet.Range[$"D{index}"].Value = o.ICTransferItemProductNoOfOldSys.Trim();
                worksheet.Range[$"E{index}"].Value = o.ICTransferItemProductName.Trim();
                worksheet.Range[$"F{index}"].Value = o.ICTransferItemProductDesc.Trim();

                objMeasureUnitsInfo = listMeasureUnitsInfo.FirstOrDefault(a => a.ICMeasureUnitID == o.FK_ICMeasureUnitID);
                if (objMeasureUnitsInfo != null)
                {
                    worksheet.Range[$"G{index}"].Value = objMeasureUnitsInfo.ICMeasureUnitName.Trim();
                }
                else
                {
                    worksheet.Range[$"G{index}"].Value = string.Empty;
                }

                worksheet.Range[$"H{index}"].Value = o.ICTransferItemProductQty;

                objStocksInfo = listStocksInfo.FirstOrDefault(a => a.ICStockID == o.FK_ICStockID);
                if (objStocksInfo != null)
                {
                    worksheet.Range[$"I{index}"].Value = objStocksInfo.ICStockName.Trim();
                }
                else
                {
                    worksheet.Range[$"I{index}"].Value = string.Empty;
                }
                worksheet.Range[$"J{index}"].Value = o.ICTransferItemProductSerialNo.Trim();
                index++;
            });
            var usedRange = worksheet.get_Range($"A1", $"J{index - 1}");
            usedRange.Borders.get_Item(Excel.XlBordersIndex.xlEdgeLeft).LineStyle = Excel.XlLineStyle.xlContinuous;
            usedRange.Borders.get_Item(Excel.XlBordersIndex.xlEdgeRight).LineStyle = Excel.XlLineStyle.xlContinuous;
            usedRange.Borders.get_Item(Excel.XlBordersIndex.xlEdgeTop).LineStyle = Excel.XlLineStyle.xlContinuous;
            usedRange.Borders.get_Item(Excel.XlBordersIndex.xlEdgeBottom).LineStyle = Excel.XlLineStyle.xlContinuous;
            usedRange.Borders.Color = Color.Black;
            worksheet.get_Range("A1", "J1").EntireColumn.AutoFit();
            workbook.SaveAs(FilePath);
            workbook.Close(true, misValue, misValue);
            xlApp.Quit();
            ReleaseObject(worksheet);
            ReleaseObject(workbook);
            ReleaseObject(xlApp);
        }

        private void ReleaseObject(object obj)
        {
            try
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(obj);
                obj = null;
            }
            catch (Exception ex)
            {
                obj = null;
                MessageBox.Show(ex.ToString());
            }
            finally
            {
                GC.Collect();
            }
        }
        #endregion
        public void AutoSelectProductSerialNo()
        {
            if (Toolbar.IsNullOrNoneAction())
                return;
            TransferEntities entity = (TransferEntities)CurrentModuleEntity;
            ICTransfersInfo mainObject = (ICTransfersInfo)entity.MainObject;
            if (mainObject.ICTransferType == TransferType.TransferReceipt.ToString())
                return;
            if (entity.TransferItemList.Count <= 0)
            {
                MessageBox.Show("Vui lòng thêm sản phẩm xuất chuyển kho để gắn mã lô!"
                                , CommonLocalizedResources.MessageBoxDefaultCaption,
                                MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            List<ICShipmentItemsInfo> listShipmentItems = new List<ICShipmentItemsInfo>();
            entity.TransferItemList.ForEach(o =>
            {
                ICShipmentItemsInfo objShipmentItemsInfo = new ICShipmentItemsInfo();
                objShipmentItemsInfo.FK_ICProductID = o.FK_ICProductID;
                objShipmentItemsInfo.FK_ICStockID = o.FK_ICFromStockID;
                objShipmentItemsInfo.ICShipmentItemProductExchangeQty = o.ICTransferItemProductExchangeQty;
                objShipmentItemsInfo.ICShipmentDate = mainObject.ICTransferDate;
                listShipmentItems.Add(objShipmentItemsInfo);
            });
            ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
            listShipmentItems = objShipmentItemsController.GetListInventoryStockSerialNoForShipment(listShipmentItems);
            listShipmentItems = listShipmentItems.OrderBy(o => o.ICProductSerieReceiptDate).ToList();
            ICShipmentItemsInfo shipmentQtyInfo = new ICShipmentItemsInfo();
            foreach (ICTransferItemsInfo item in entity.TransferItemList)
            {
                shipmentQtyInfo = listShipmentItems.FirstOrDefault(o => o.FK_ICProductID == item.FK_ICProductID && o.ICShipmentItemProductExchangeQty >= item.ICTransferItemProductExchangeQty);
                if (shipmentQtyInfo != null)
                {
                    item.FK_ICFromStockID = shipmentQtyInfo.FK_ICStockID;
                    item.FK_ICStockID = shipmentQtyInfo.FK_ICStockID;
                    item.FK_ICProductSerieID = shipmentQtyInfo.FK_ICProductSerieID;
                    item.ICTransferItemProductSerialNo = shipmentQtyInfo.ICShipmentItemProductSerialNo;
                    item.ICTransferItemLotNo = shipmentQtyInfo.ICShipmentItemLotNo;
                    shipmentQtyInfo.ICShipmentItemProductExchangeQty -= item.ICTransferItemProductExchangeQty;
                    ChangeItemSerieNo(item);
                }    
            }    
        }    
    }
    #endregion
}