using BOSCommon;
using BOSCommon.Constants;
using BOSComponent;
using BOSERP.GenaralLeadger;
using BOSERP.Modules.IC.BatchReceiptDryLumber.Localization;
using BOSLib;
using BOSReport;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraReports.UI;
using Localization;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows.Forms;

namespace BOSERP.Modules.MaterialReceipt
{
    #region MaterialReceiptModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ReceiptModule
    //Created Date:Saturday, May 31, 2008
    //-----------------------------------------------------------

    public class MaterialReceiptModule : GLReceiptModule
    {
        #region Constants
        public const string ReceiptItemGridControlName = "fld_dgcReceiptItems";
        public const string DocumentEntryGridControlName = "fld_dgcACDocumentEntrys";
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
        //public const string SearchBranchLookupEditControlName = "fld_lkeFK_BRBranchID";
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], END
        public const string ICProductLookupEditControlName = "fld_lkeFK_ICProductID1";
        public const string MMOperationLookupEditControlName = "fld_lkeFK_MMOperationID";

        #endregion

        #region Variable
        private List<ICReceiptItemsInfo> OriginalReceiptItemList;
        BOSComponent.BOSLookupEdit ProductLookupEditControl;
        BOSComponent.BOSLookupEdit MMOperationLookupEditControl;
        private string defaultBosSelectedTypeValue;
        #endregion

        #region Public properties
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
        //public BOSLookupEdit SearchBranchLookupEditControl;
        public List<ADDataViewPermissionsInfo> CurrentModuleDataViewPermissionList;
        //public List<BRBranchsInfo> BranchList;
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], END
        ItemLookupEdit ProductLookUpEditControl;
        public List<BRBranchsInfo> BranchList;
        public ICReceiptItemsGridControl ReceiptItemGridControl;

        #endregion

        public MaterialReceiptModule()
        {
            Name = "MaterialReceipt";
            CurrentModuleEntity = new MaterialReceiptEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();
            GetCurrentModuleDataViewPermission();

            StartGettingInventoryThread();
            //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
            //GetCurrentModuleDataViewPermission();
            // SearchBranchLookupEditControl = (BOSLookupEdit)Controls[SearchBranchLookupEditControlName];
            //SearchBranchLookupEditControl.Properties.DataSource = BranchList;
            //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], END
            ProductLookupEditControl = (BOSComponent.BOSLookupEdit)Controls[MaterialReceiptModule.ICProductLookupEditControlName];
            //defaultBosSelectedTypeValue = ProductLookupEditControl.BOSSelectTypeValue;
            MMOperationLookupEditControl = (BOSComponent.BOSLookupEdit)Controls[MaterialReceiptModule.MMOperationLookupEditControlName];

            ReceiptItemGridControl = (ICReceiptItemsGridControl)Controls[ReceiptItemGridControlName];
            InitializeOperationlookupDataSource();
        }

        public void GetCurrentModuleDataViewPermission()
        {
            CurrentModuleDataViewPermissionList = BOSApp.CurrentADDataViewPermissionList.Where(i => i.STModuleName == Name && i.ADDataViewPermissionType == ADDataViewPermissionType.Module).ToList();

            List<int> branchIDList = new List<int>();
            foreach (ADDataViewPermissionsInfo dataViewPermissionsInfo in CurrentModuleDataViewPermissionList)
            {
                branchIDList.Add(dataViewPermissionsInfo.FK_BRBranchID);
            }

            if (branchIDList.Count == 0)
            {
                BranchList = new List<BRBranchsInfo>();
            }
            else
            {
                BRBranchsController objBranchsController = new BRBranchsController();
                List<BRBranchsInfo> branchList = objBranchsController.GetAllBranches();

                BranchList = branchList.Where(i => branchIDList.IndexOf(i.BRBranchID) > -1).ToList();
            }
        }

        protected override DataSet GetSearchData(ref string searchQuery)
        {
            ICReceiptsController objReceiptsController = new ICReceiptsController();
            ICReceiptsInfo searchObject = (ICReceiptsInfo)CurrentModuleEntity.SearchObject;
            DataSet ds;
            if (searchObject.FK_BRBranchID == 0)
            {
                if (BranchList.Count == 0)
                {
                    ds = objReceiptsController.GetDataSetByID(-1);
                }
                else
                {
                    ds = objReceiptsController.GetReceiptListForMaterialReceiptModuleOfBranchList(searchObject.ICReceiptNo,
                                                                                                  searchObject.FK_MMBatchProductID,
                                                                                                  searchObject.FK_ICStockID,
                                                                                                  searchObject.FK_ICProductAttributeTTMTID,
                                                                                                  searchObject.FK_HREmployeeID,
                                                                                                  searchObject.ReceiptDateFrom,
                                                                                                  searchObject.ReceiptDateTo,
                                                                                                  BranchList);
                }
            }
            else
            {
                ds = objReceiptsController.GetReceiptListForMaterialReceiptModule(searchObject.ICReceiptNo,
                                                                                  searchObject.FK_MMBatchProductID,
                                                                                  searchObject.FK_ICStockID,
                                                                                  searchObject.FK_ICProductAttributeTTMTID,
                                                                                  searchObject.FK_HREmployeeID,
                                                                                  searchObject.ReceiptDateFrom,
                                                                                  searchObject.ReceiptDateTo,
                                                                                  searchObject.FK_BRBranchID);
            }
            return ds;
        }

        private void InitializeOperationlookupDataSource()
        {
            //Công đoạn
            MMOperationsController objOperationsController = new MMOperationsController();
            List<MMOperationsInfo> objOperationsList = new List<MMOperationsInfo>();
            if (BOSApp.LookupTables.ContainsKey(TableName.MMOperationsTableName))
            {
                DataSet ds = (DataSet)BOSApp.LookupTables[TableName.MMOperationsTableName];
                if (ds != null)
                {
                    objOperationsList = (List<MMOperationsInfo>)objOperationsController.GetListFromDataSet(ds);
                }
            }
            MMOperationsInfo item = new MMOperationsInfo();
            objOperationsList.Insert(0, item);
            MMOperationLookupEditControl.Properties.DataSource = objOperationsList;
        }
        public void ChangeItemSerieNo(ICReceiptItemsInfo item)
        {
            //InvalidateItemSerieNo(item, TableName.ICReceiptItemsTableName, "ICReceiptItemProductSerialNo");
            if (BOSApp.CurrentCompanyInfo.CSCostMethod == AccCostMethod.SpecificIdentification.ToString())
            {
                item.ICReceiptItemProductUnitCost = AccountHelper.GetInventoryCost(item.FK_ICProductID, item.FK_ICProductSerieID);
                MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
                entity.SetProductCostByProductUnitCost(item);
                entity.ReceiptItemsList.GridControl.RefreshDataSource();
                UpdateTotalCost();
            }
        }
        public void ChangeItemFromReceiptItemsList()
        {
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            entity.SetProductCostByProductUnitCost();
            entity.ReceiptItemsList.ChangeObjectFromList();
            UpdateTotalCost();
        }
        public void DeleteItemFromReceiptItemsList()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
                entity.ReceiptItemsList.RemoveSelectedRowObjectFromList();
                UpdateTotalCost();
            }
        }
        public void UpdateTotalCost()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
                entity.UpdateTotalCost();
                UpdateInventoryCost();
                UpdateDocumentEntries();
            }
        }
        private void UpdateInventoryCost()
        {
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            decimal extCost = entity.ReceiptItemsList.Sum(i => i.ICReceiptItemExtCost);
            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
            {
                item.ICReceiptItemInventoryCost = item.ICReceiptItemProductUnitCost;
                BOSApp.RoundByCurrency(item, objReceiptsInfo.FK_GECurrencyID);
            }
        }
        public List<ICProductAttributesInfo> GetProductItemAttributeQuality()
        {
            ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
            List<ICProductAttributesInfo> productAttributesList = objProductAttributesController.GetProductAttributesByProductAttributeGroup(ProductAttributeGroup.Quality.ToString());
            if (productAttributesList != null)
            {
                return productAttributesList;
            }
            else
                return null;
        }
        public List<ICProductAttributesInfo> GetProductItemAttributeWoodType()
        {
            ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
            List<ICProductAttributesInfo> productAttributesList = objProductAttributesController.GetProductAttributesByProductAttributeGroup(ProductAttributeGroup.WoodType.ToString());
            if (productAttributesList != null)
            {
                return productAttributesList;
            }
            else
                return null;
        }
        public List<ICProductAttributesInfo> GetProductItemAttributeTTMT()
        {
            ICProductAttributesController objProductAttributesController = new ICProductAttributesController();
            List<ICProductAttributesInfo> productAttributesList = objProductAttributesController.GetProductAttributesByProductAttributeGroup(ProductAttributeGroup.TTMT.ToString());
            if (productAttributesList != null)
            {
                return productAttributesList;
            }
            else
                return null;
        }
        public void AddItemToReceiptItemsList()
        {
            ICReceiptsController objReceiptsController = new ICReceiptsController();
            ICReceiptsInfo objReceiptsInfo = new ICReceiptsInfo();
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptItemsInfo item = (ICReceiptItemsInfo)entity.ModuleObjects[TableName.ICReceiptItemsTableName];
            bool isFirstAddItem = entity.ReceiptItemsList.Count() == 0;
            if (item.FK_ICProductID > 0)
            {
                ICReceiptsInfo objReceiptInfo = ((ICReceiptsInfo)entity.MainObject);
                ICProductsController objProductsController = new ICProductsController();
                ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);

                if (objReceiptInfo != null)
                {
                    //if (new MMBatchProductProductionNormItemsController().IsValidQuantyCheckedBaseOnBatchProduct(objReceiptInfo.FK_MMBatchProductID, Convert.ToDecimal(1), item.FK_ICProductID))
                    //    item.FK_MMBatchProductID = objReceiptInfo.FK_MMBatchProductID;
                    //else
                    //    item.FK_MMBatchProductID = 0;
                    item.FK_MMBatchProductID = objReceiptInfo.FK_MMBatchProductID;
                    item.FK_MMOperationID = objReceiptInfo.FK_MMOperationID;
                    item.FK_ICProductAttributeWoodTypeID = objReceiptInfo.FK_ICProductAttributeWoodTypeID;
                    item.FK_ICImportAndExportReasonID = objReceiptInfo.FK_ICImportAndExportReasonID;
                }
                if (objProductsInfo != null)
                {
                    item.FK_ACAccountID = objProductsInfo.FK_ACAccountID;
                    item.FK_ACAccountID = GetAccountByStock(item.FK_ICStockID, item.FK_ACAccountID);
                    ICProductTypeAccountConfigsController objProductTypeAccountConfigsController = new ICProductTypeAccountConfigsController();
                    ICProductTypeAccountConfigsInfo objProductTypeAccountConfigsInfo = (ICProductTypeAccountConfigsInfo)objProductTypeAccountConfigsController.GetObjectByID(objProductsInfo.FK_ICProductTypeAccountConfigID);
                    if (objProductTypeAccountConfigsInfo != null && objProductTypeAccountConfigsInfo.FK_ACAccountID != 0)
                    {
                        foreach (ACDocumentEntrysInfo entry in entity.DocumentEntryList)
                        {
                            entry.FK_ACDebitAccountID = objProductTypeAccountConfigsInfo.FK_ACAccountID;
                        }
                    }
                }
                entity.SetValuesAfterValidateProduct(item.FK_ICProductID);
                entity.SetProductCostByProductUnitCost(item);
                entity.ReceiptItemsList.AddObjectToList();
                objReceiptsInfo = (ICReceiptsInfo)objReceiptsController.GetObjectByID(item.FK_ICReceiptID);
                if (objReceiptsInfo != null)
                {
                    item.FK_ICProductAttributeWoodTypeID = objReceiptsInfo.FK_ICProductAttributeWoodTypeID;
                    item.FK_GECountryID = objReceiptsInfo.FK_GECountryID;
                    item.FK_MMBatchProductID = objReceiptsInfo.FK_MMBatchProductID;
                    item.FK_ICProductAttributeTTMTID = objReceiptsInfo.FK_ICProductAttributeTTMTID;
                    item.ICReceiptItemWoodQty = objReceiptsInfo.ICReceiptTotalQty;
                    item.ICReceiptItemContainerNo = objReceiptsInfo.ICReceiptContainerNo;
                    item.FK_MMOperationID = objReceiptsInfo.FK_MMOperationID;
                    item.FK_ICStockID = objReceiptsInfo.FK_ICStockID;
                }
                ResetTotalQuantity();
                UpdateTotalCost();
                if (isFirstAddItem)
                    ChangeDisplayAndDataItemListGridView();
            }
        }
        public void ResetTotalQuantity()
        {
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            if ((entity.MainObject as ICReceiptsInfo).ICReceiptReceiptType == ProductType.Roundwood.ToString() || (entity.MainObject as ICReceiptsInfo).ICReceiptReceiptType == ProductType.Lumber.ToString())
            {
                objReceiptsInfo.ICReceiptTotalQty = 0;
                foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                {
                    item.ICReceiptItemNotJetExceptBlock = objReceiptsInfo.ICReceiptTotalQty +
                        (item.ICReceiptItemProductLength * item.ICReceiptItemProductPerimeter * item.ICReceiptItemProductPerimeter * Convert.ToDecimal(0.0796 / 1000000000));
                    //item.ICReceiptItemProductQty = item.ICReceiptItemNotJetExceptBlock - item.ICReceiptItemExceptedBlock;
                    objReceiptsInfo.ICReceiptTotalQty = objReceiptsInfo.ICReceiptTotalQty + item.ICReceiptItemProductQty;
                }
            }
        }
        public override void ActionNew()
        {
            base.ActionNew();
            SetDefaultEmployee();
            //SetDefaultStock();
            GenerateAccountingData();
            DisplayLabelText(CurrentModuleEntity.MainObject);
            ReceiptItemGridControl.LoadGridview(ReceiptType.MaterialReceipt.ToString());
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo mainObject = (ICReceiptsInfo)entity.MainObject;
            mainObject.STToolbarActionName = "Manual";
            ChangeDisplayAndDataItemListGridView();
        }

        public void NewFromHardwareReturnReceipt()
        {
            ActionNew();
            //ActionNewFromMaterialType(AllocationPlanType.Hardware.ToString());
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.ICReceiptTypeCombo = ReceiptType.MaterialReturnReceipt.ToString();
            objReceiptsInfo.ICReceiptReceiptType = AllocationPlanType.Hardware.ToString();
            ReceiptItemGridControl.LoadGridview(objReceiptsInfo.ICReceiptTypeCombo);
        }
        public void NewFromIngredientPaintReturnReceipt()
        {
            ActionNew();
            //ActionNewFromMaterialType(AllocationPlanType.IngredientPaint.ToString());
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.ICReceiptTypeCombo = ReceiptType.MaterialReturnReceipt.ToString();
            objReceiptsInfo.ICReceiptReceiptType = AllocationPlanType.IngredientPaint.ToString();
            ReceiptItemGridControl.LoadGridview(objReceiptsInfo.ICReceiptTypeCombo);
        }
        public void NewFromIngredientPackagingReturnReceipt()
        {
            ActionNew();
            //ActionNewFromMaterialType(AllocationPlanType.IngredientPackaging.ToString());
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.ICReceiptTypeCombo = ReceiptType.MaterialReturnReceipt.ToString();
            objReceiptsInfo.ICReceiptReceiptType = AllocationPlanType.IngredientPackaging.ToString();
            ReceiptItemGridControl.LoadGridview(objReceiptsInfo.ICReceiptTypeCombo);
        }
        public void NewFromOtherReturnReceipt()
        {
            ActionNew();
            //ActionNewFromMaterialType(AllocationPlanType.Other.ToString());
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.ICReceiptTypeCombo = ReceiptType.MaterialReturnReceipt.ToString();
            objReceiptsInfo.ICReceiptReceiptType = AllocationPlanType.Other.ToString();
            ReceiptItemGridControl.LoadGridview(objReceiptsInfo.ICReceiptTypeCombo);
        }


        public void NewFromHardwareRedundantReceipt()
        {
            ActionNew();
            //ActionNewFromMaterialType(AllocationPlanType.Hardware.ToString());
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.ICReceiptTypeCombo = ReceiptType.MaterialRedundantReceipt.ToString();
            objReceiptsInfo.ICReceiptReceiptType = AllocationPlanType.Hardware.ToString();
            ReceiptItemGridControl.LoadGridview(objReceiptsInfo.ICReceiptTypeCombo);
        }
        public void NewFromIngredientPaintRedundantReceipt()
        {
            ActionNew();
            //ActionNewFromMaterialType(AllocationPlanType.IngredientPaint.ToString());
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.ICReceiptTypeCombo = ReceiptType.MaterialRedundantReceipt.ToString();
            objReceiptsInfo.ICReceiptReceiptType = AllocationPlanType.IngredientPaint.ToString();
            ReceiptItemGridControl.LoadGridview(objReceiptsInfo.ICReceiptTypeCombo);
        }
        public void NewFromIngredientPackagingRedundantReceipt()
        {
            ActionNew();
            //ActionNewFromMaterialType(AllocationPlanType.IngredientPackaging.ToString());
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.ICReceiptTypeCombo = ReceiptType.MaterialRedundantReceipt.ToString();
            objReceiptsInfo.ICReceiptReceiptType = AllocationPlanType.IngredientPackaging.ToString();
            ReceiptItemGridControl.LoadGridview(objReceiptsInfo.ICReceiptTypeCombo);
        }
        public void NewFromOtherRedundantReceipt()
        {
            ActionNew();
            //ActionNewFromMaterialType(AllocationPlanType.Other.ToString());
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.ICReceiptTypeCombo = ReceiptType.MaterialRedundantReceipt.ToString();
            objReceiptsInfo.ICReceiptReceiptType = AllocationPlanType.Other.ToString();
            ReceiptItemGridControl.LoadGridview(objReceiptsInfo.ICReceiptTypeCombo);
        }

        public void GenerateAllocationProposalFromMaterialReceipt()
        {
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            ICReceiptItemsInfo objReceiptItemsInfo = new ICReceiptItemsInfo();
            MMAllocationProposalItemsInfo objAllocationProposalItemsInfo = new MMAllocationProposalItemsInfo();
            MMAllocationProposalItemsController objAllocationProposalItemsController = new MMAllocationProposalItemsController();
            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
            {
                objAllocationProposalItemsInfo = (MMAllocationProposalItemsInfo)objAllocationProposalItemsController.GetObjectByID(item.FK_MMAllocationProposalItemID);
                if (objAllocationProposalItemsInfo != null)
                {
                    objAllocationProposalItemsInfo.MMAllocationProposalItemShippedQty -= item.ICReceiptItemProductQty;
                    objAllocationProposalItemsController.UpdateObject(objAllocationProposalItemsInfo);
                }
            }
        }
        public override void ActionEdit()
        {
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            if ((entity.MainObject as ICReceiptsInfo).ICReceiptStatus == ReceiptStatus.Complete.ToString())
            {
                MessageBox.Show(PurchaseReceiptLocalizedResources.CanNotModifyMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                CurrentModuleEntity.SetPropertyChangeEventLock(false);
                return;
            }

            base.ActionEdit();
        }
        public override int ActionSave()
        {
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo mainObject = (ICReceiptsInfo)entity.MainObject;
            entity.ReceiptItemsList.EndCurrentEdit();
            UpdateTotalCost();
            ICReceiptsInfo receipt = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            //NN Giang ADD -[CHECK QTY IN SHIPMENT ITEM] - Start-14-04-2016
            if (!CheckQtyInShipmentItem(entity.ReceiptItemsList))
            {
                return 0;
            }
            if (entity.ReceiptItemsList.Where(o => o.FK_ICStockID == 0).Count() > 0)
            {
                MessageBox.Show("Vui lòng chọn đầy đủ kho cho tất cả các sản phẩm !", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return 0;
            }
            if (mainObject.FK_ICImportAndExportReasonID == 0)
            {
                MessageBox.Show("Vui lòng chọn lý do nhập xuất kho!",
                                  CommonLocalizedResources.MessageBoxDefaultCaption,
                                   MessageBoxButtons.OK, MessageBoxIcon.Error);
                return 0;
            }
            if (entity.ReceiptItemsList.Where(o => o.ICReceiptItemProductUnitCost == 0).Count() > 0)
            {
                string mess = string.Join(Environment.NewLine, entity.ReceiptItemsList.Where(o => o.ICReceiptItemProductUnitCost == 0).Select(o => o.ICReceiptItemProductDesc).Distinct().ToArray());
                if (MessageBox.Show("Giá vốn sản phẩm sau = 0, bạn có muốn lưu không !" + Environment.NewLine + mess
                    , CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    return 0;
            }

            List<string> productError = new List<string>();
            foreach (ICReceiptItemsInfo objReceiptItemsInfo in entity.ReceiptItemsList)
            {
                /*Check SerialNo*/
                List<ICReceiptItemsInfo> listValidateItems = entity.ReceiptItemsList.Where(p => p.FK_ICProductID == objReceiptItemsInfo.FK_ICProductID
                                                                                   && p.ICReceiptItemProductSerialNo == objReceiptItemsInfo.ICReceiptItemProductSerialNo).ToList();
                if (listValidateItems.Count > 1)
                {
                    productError.Add(objReceiptItemsInfo.ICReceiptItemProductDesc);
                }
            }
            if (productError.Count > 0)
            {
                MessageBox.Show(string.Format("Mã lô/ Mã kiện (Mã đầu lóng) của sản phẩm trùng nhau: \n-{0}", string.Join("\n-", productError.Distinct().ToArray()))
                                 + Environment.NewLine + "Vui lòng kiểm tra lại!"
                                , CommonLocalizedResources.MessageBoxDefaultCaption
                                , MessageBoxButtons.OK
                                , MessageBoxIcon.Exclamation);
                return 0;
            }

            List<ICTransactionsInfo> invalidSerialNoList = entity.ReceiptItemsList.GetInvalidSerialNo();
            if (invalidSerialNoList.Count() > 0)
            {
                // chỉ cho trùng lô trong trường hợp nhập vào lô cũ
                invalidSerialNoList = invalidSerialNoList.Where(s => entity.ReceiptItemsList.Any(r => r.ICReceiptItemProductSerialNo == s.ICTransactionReceiptSerialNo
                                                                                                    && (r.FK_ICProductSerieID != s.FK_ICProductSerieID
                                                                                                        || r.ICReceiptItemExchangeUnitCost != s.ICTransactionExchangeUnitCost))).ToList();
                if (invalidSerialNoList.Count() > 0)
                {
                    MessageBox.Show(string.Format("Mã lô hàng/ mã kiện của các sản phẩm sau đã tồn tại:\n- {0}",
                                                    string.Join("\n- ", invalidSerialNoList.Select(o1 => string.Format("{0}: {1}", o1.ICProductNo, o1.ICTransactionReceiptSerialNo))
                                                                                         .ToArray())),
                       CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return 0;
                }
            }
            int receiptID = base.ActionSave();
            return receiptID;
        }
        public void ShowBatchShipmentForReceipt()
        {
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            ICReceiptsInfo oldReceipts = (ICReceiptsInfo)CurrentModuleEntity.MainObject.Clone();
            ICReceiptItemsInfo objReceiptItemsInfo = new ICReceiptItemsInfo();
            ICShipmentsController objShipmentController = new ICShipmentsController();
            ICShipmentsInfo objShipmentsInfo = new ICShipmentsInfo();
            ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
            List<ICShipmentItemsInfo> ShipmentItemList = new List<ICShipmentItemsInfo>();
            ShipmentItemList = objShipmentItemsController.GetBatchShipmentForReceipt(objReceiptsInfo.FK_MMBatchProductID, objReceiptsInfo.FK_ICProductID);
            List<ICShipmentItemsInfo> shipmentItemCheck = new List<ICShipmentItemsInfo>();
            MMBatchProductsInfo objBatchProductsInfo = new MMBatchProductsInfo();
            MMBatchProductsController objBatchProductsController = new MMBatchProductsController();
            if (ShipmentItemList != null)
            {
                guiFind<ICShipmentItemsInfo> guiFind = new guiFind<ICShipmentItemsInfo>(TableName.ICShipmentItemsTableName,
                                                                                                ShipmentItemList,
                                                                                                this,
                                                                                                true,
                                                                                                true,
                                                                                                new string[] { "ICShipmentNo" },
                                                                                                null,
                                                                                                true);

                guiFind.ShowDialog();
                if (guiFind.DialogResult == DialogResult.OK)
                {
                    objShipmentsInfo = (ICShipmentsInfo)objShipmentController.GetObjectByID(guiFind.SelectedObjects[0].FK_ICShipmentID);
                    if (objShipmentsInfo != null)
                    {
                        objBatchProductsInfo = (MMBatchProductsInfo)objBatchProductsController.GetObjectByID(objShipmentsInfo.FK_MMBatchProductID);
                        BOSUtil.CopyObject(objShipmentsInfo, objReceiptsInfo);
                        objReceiptsInfo.ICReceiptStatus = oldReceipts.ICReceiptStatus;
                        objReceiptsInfo.ICReceiptNo = oldReceipts.ICReceiptNo;
                        objReceiptsInfo.ICReceiptReference = objShipmentsInfo.ICShipmentNo;
                        objReceiptsInfo.ICReceiptTypeCombo = oldReceipts.ICReceiptTypeCombo;
                        objReceiptsInfo.FK_ICProductAttributeWoodTypeID = objShipmentsInfo.FK_ICProductAttributeWoodTypeID;
                        objReceiptsInfo.FK_ICProductAttributeTTMTID = objShipmentsInfo.FK_ICProductAttributeTTMTID;
                        objReceiptsInfo.FK_MMBatchProductID = objShipmentsInfo.FK_MMBatchProductID;
                        objReceiptsInfo.FK_ICStockID = objShipmentsInfo.FK_ICStockID;
                        objReceiptsInfo.FK_MMOperationID = objShipmentsInfo.FK_MMOperationID;
                        objReceiptsInfo.FK_GECountryID = objShipmentsInfo.FK_GECountryID;
                        objReceiptsInfo.ICReceiptContainerNo = objShipmentsInfo.ICShipmentContainerNo;
                        DisplayLabelText(objReceiptsInfo);
                        CurrentModuleEntity.UpdateMainObjectBindingSource();
                    }
                    //Choose first sale order as a template
                    List<ICShipmentItemsInfo> selectedShipmentItems = guiFind.SelectedObjects as List<ICShipmentItemsInfo>;
                    if (selectedShipmentItems != null && selectedShipmentItems.Count > 0)
                    {
                        foreach (ICShipmentItemsInfo item in selectedShipmentItems)
                        {
                            GetBatchShipment(item);
                        }
                        entity.ReceiptItemsList.GridControl.RefreshDataSource();
                    }
                }
                else
                    ActionCancel();
            }
        }
        public void GetBatchShipment(ICShipmentItemsInfo objShipmentItemsInfo)
        {
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            //ICProductSeriesController objProductSeriesController = new ICProductSeriesController();
            //ICProductSeriesInfo objProductSeriesInfo;
            if (objShipmentItemsInfo != null)
            {
                ICReceiptItemsInfo objReceiptItemsInfo = new ICReceiptItemsInfo();
                objReceiptItemsInfo.FK_ICProductID = objShipmentItemsInfo.FK_ICProductID;
                objProductsInfo = BOSApp.GetProductFromCurrentProductList(objShipmentItemsInfo.FK_ICProductID);
                if (objProductsInfo != null)
                {
                    objReceiptItemsInfo.ICReceiptItemProductDesc = objProductsInfo.ICProductDesc;
                    objReceiptItemsInfo.ICReceiptItemProductType = objProductsInfo.ICProductType;
                }
                objReceiptItemsInfo.FK_ICStockID = objShipmentItemsInfo.FK_ICStockID;
                objReceiptItemsInfo.ICReceiptItemProductName = objShipmentItemsInfo.ICShipmentItemProductName;
                objReceiptItemsInfo.FK_ICProductAttributeWoodTypeID = objShipmentItemsInfo.FK_ICProductAttributeWoodTypeID;
                objReceiptItemsInfo.FK_ICProductAttributeTTMTID = objShipmentItemsInfo.FK_ICProductAttributeTTMTID;
                objReceiptItemsInfo.FK_GECountryID = objShipmentItemsInfo.FK_GECountryID;
                objReceiptItemsInfo.FK_ICProductAttributeQualityID = objShipmentItemsInfo.FK_ICProductAttributeQualityID;
                objReceiptItemsInfo.ICReceiptItemProductLength = objShipmentItemsInfo.ICShipmentItemLength;
                objReceiptItemsInfo.ICReceiptItemProductPerimeter = objShipmentItemsInfo.ICShipmentItemPerimeter;
                objReceiptItemsInfo.ICReceiptItemLotNo = objShipmentItemsInfo.ICShipmentItemLotNo;
                objReceiptItemsInfo.ICReceiptItemProductSerialNo = objShipmentItemsInfo.ICShipmentItemProductSerialNo;
                objReceiptItemsInfo.ICReceiptItemWoodQty = objShipmentItemsInfo.ICShipmentItemWoodQty;
                objReceiptItemsInfo.ICReceiptItemProductQty = objShipmentItemsInfo.ICShipmentItemProductQty;
                objReceiptItemsInfo.ICReceiptItemLogListNo = objShipmentItemsInfo.ICShipmentItemLoglist;
                objReceiptItemsInfo.ICReceiptItemContainerNo = objShipmentItemsInfo.ICShipmentItemContainerNo;
                objReceiptItemsInfo.FK_MMBatchProductID = objShipmentItemsInfo.FK_MMBatchProductID;
                objReceiptItemsInfo.FK_MMBatchProductItemID = objShipmentItemsInfo.FK_MMBatchProductItemID;
                objReceiptItemsInfo.FK_ICProductForBatchID = objShipmentItemsInfo.FK_ICProductForBatchID;
                objReceiptItemsInfo.FK_ICProductSerieID = objShipmentItemsInfo.FK_ICProductSerieID;
                objReceiptItemsInfo.FK_MMOperationID = objShipmentItemsInfo.FK_MMOperationID;
                objReceiptItemsInfo.FK_MMWorkShopID = objShipmentItemsInfo.FK_MMWorkShopID;
                objReceiptItemsInfo.FK_MMLineID = objShipmentItemsInfo.FK_MMLineID;
                objReceiptItemsInfo.FK_ICMeasureUnitID = objShipmentItemsInfo.FK_ICMeasureUnitID;
                objReceiptItemsInfo.FK_ICShipmentID = objShipmentItemsInfo.FK_ICShipmentProposalID;
                objReceiptItemsInfo.FK_ICShipmentItemID = objShipmentItemsInfo.FK_ICShipmentProposalItemID;
                objReceiptItemsInfo.ICReceiptItemProductUnitCost = objShipmentItemsInfo.ICShipmentItemProductUnitCost;
                objReceiptItemsInfo.ICReceiptItemProductUnitPrice = objShipmentItemsInfo.ICShipmentItemProductUnitCost;
                entity.SetProductCostByProductUnitCost(objReceiptItemsInfo);
                entity.ReceiptItemsList.Add(objReceiptItemsInfo);
            }
        }
        public void ChangeBatchProductItemList(int objMMBatchProductID)
        {
            //MMBatchProductsController objBatchProductsController = new MMBatchProductsController();
            //MMBatchProductsInfo objBatchProductsInfo = (MMBatchProductsInfo)objBatchProductsController.GetObjectByID(objMMBatchProductID);
            //MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            //ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)entity.ModuleObjects[TableName.ICReceiptItemsTableName];
            //if (objReceiptItemsInfo != null)
            //{
            //    List<ICProductsInfo> errorProductList = new List<ICProductsInfo>();
            //    ICProductsInfo objProductsInfo = new ICProductsInfo();
            //    foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
            //    {
            //        if (new MMBatchProductProductionNormItemsController().IsValidQuantyCheckedBaseOnBatchProduct(objMMBatchProductID, item.ICReceiptItemProductQty, item.FK_ICProductID))
            //            item.FK_MMBatchProductID = objMMBatchProductID;
            //        else
            //        {
            //            objProductsInfo = BOSApp.GetProductFromCurrentProductList(item.FK_ICProductID);
            //            errorProductList.Add(objProductsInfo);
            //        }
            //    }
            //    entity.ReceiptItemsList.GridControl.RefreshDataSource();

            //    if (errorProductList.Count() > 0)
            //    {
            //        guiInventoryStatus guiStatus = new guiInventoryStatus();
            //        guiStatus.Module = this;
            //        guiStatus.Text = "Danh sách sản phẩm có số lượng lớn hơn lệnh sản xuất";
            //        guiStatus.LabelStatus.Text = "Vui lòng xem xét lại, số lượng nhập lớn hơn lệnh sản xuất bạn vừa chọn!";
            //        guiStatus.InventoryStatusGridControl.DataSource = errorProductList;
            //        guiStatus.ShowDialog();
            //    }
            //}

            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
            {
                item.FK_MMBatchProductID = objMMBatchProductID;
            }
            entity.ReceiptItemsList.GridControl.RefreshDataSource();
        }
        public void ChangeOperationItemList(int objMMOperationID)
        {
            MMBatchProductsController objBatchProductsController = new MMBatchProductsController();
            MMBatchProductsInfo objBatchProductsInfo = (MMBatchProductsInfo)objBatchProductsController.GetObjectByID(objMMOperationID);
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)entity.ModuleObjects[TableName.ICReceiptItemsTableName];
            if (objReceiptItemsInfo != null)
            {
                foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                {
                    item.FK_MMOperationID = objMMOperationID;
                }
                entity.ReceiptItemsList.GridControl.RefreshDataSource();
            }
        }
        public void ChangeWoodTypeItemList(int objWoodType)
        {
            MMBatchProductsController objBatchProductsController = new MMBatchProductsController();
            MMBatchProductsInfo objBatchProductsInfo = (MMBatchProductsInfo)objBatchProductsController.GetObjectByID(objWoodType);
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)entity.ModuleObjects[TableName.ICReceiptItemsTableName];
            if (objReceiptItemsInfo != null)
            {
                foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                {
                    item.FK_ICProductAttributeWoodTypeID = objWoodType;
                }
                entity.ReceiptItemsList.GridControl.RefreshDataSource();
            }
        }
        public List<MMBatchProductItemsInfo> GetBatchProductItemSerialDataSource()
        {
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;

            ICProductsController objProductsController = new ICProductsController();
            List<MMBatchProductItemsInfo> BatchProductItemsList = new List<MMBatchProductItemsInfo>();
            BatchProductItemsList.Add(new MMBatchProductItemsInfo());
            if (objReceiptsInfo.FK_MMBatchProductID > 0)
            {
                MMBatchProductItemsController objBatchProductItemsController = new MMBatchProductItemsController();
                BatchProductItemsList = objBatchProductItemsController.GetBatchProductItemByBatchProduct(objReceiptsInfo.FK_MMBatchProductID);
            }
            return BatchProductItemsList;
        }
        public string ChangeBatchProductItem(int batchProductItemID)
        {
            string result = string.Empty;
            if (!Toolbar.IsNullOrNoneAction())
            {
                MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
                MMBatchProductItemsController objBatchProductItemsController = new MMBatchProductItemsController();
                MMBatchProductItemsInfo objBatchProductItemsInfo = (MMBatchProductItemsInfo)objBatchProductItemsController.GetItemByBathProductItemID(batchProductItemID);
                if (objBatchProductItemsInfo != null)
                {
                    objReceiptsInfo.FK_ICProductID = objBatchProductItemsInfo.FK_ICProductID;
                    objReceiptsInfo.FK_MMBatchProductItemID = objBatchProductItemsInfo.MMBatchProductItemID;
                    if (objBatchProductItemsInfo.FK_ARCustomerID > 0)
                        objReceiptsInfo.FK_ARCustomerID = objBatchProductItemsInfo.FK_ARCustomerID;
                    result = objBatchProductItemsInfo.MMBatchProductItemProductNo;
                }
            }
            return result;
        }
        /// <summary>
        /// Change All Item Info
        /// </summary>
        /// <param name="changeID"></param>
        /// <param name="type">
        /// 1: receive operation
        /// 2: workshopID
        /// 3: lineID
        /// 4: room group
        /// 5: machine unit
        /// </param>
        public void ChangeAllItemInfo(int changeID, int type)
        {
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            if (!Toolbar.IsNullOrNoneAction())
            {
                if (entity.ReceiptItemsList.Count > 0)
                {
                    if (MessageBox.Show("Bạn chắc chắn muốn thay đổi cho tất cả các chi tiết?", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        MMLineOperationsController objLineOperationsController = new MMLineOperationsController();
                        List<MMLineOperationsInfo> ListInfo = new List<MMLineOperationsInfo>();
                        if (type == 2 || type == 3)
                            ListInfo = objLineOperationsController.GetLineOperationInfoByOperationIDAndLine(null, changeID);
                        foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                        {
                            if (type == 1)
                                item.FK_MMOperationID = changeID;
                            else if (type == 2)
                            {
                                item.FK_MMWorkShopID = changeID;
                            }
                            else if (type == 3)
                            {
                                item.FK_MMLineID = changeID;
                            }
                            else if (type == 4)
                                item.FK_HRDepartmentRoomGroupItemID = changeID;
                            else if (type == 5)
                                item.FK_MMMachineUnitID = changeID;
                        }
                        entity.ReceiptItemsList.GridControl.RefreshDataSource();
                    }
                }
            }
        }
        public void ApproveMaterialReceipt()
        {
            if (!Toolbar.IsNullOrNoneAction())
                return;

            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;

            ICProductsController objProductsController = new ICProductsController();
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            ICInventoryStocksController objInventoryStocksController = new ICInventoryStocksController();
            foreach (ICReceiptItemsInfo objReceiptItemsInfo in entity.ReceiptItemsList)
            {
                objProductsInfo = BOSApp.GetProductFromCurrentProductList(objReceiptItemsInfo.FK_ICProductID);
                if (objProductsInfo.ICProductType != ProductType.Service.ToString() && !objProductsInfo.IsAsset)
                {
                    if (string.IsNullOrEmpty(objReceiptItemsInfo.ICReceiptItemProductSerialNo)
                        && objProductsInfo.ICPriceCalculationMethodMethod == PriceCalculationMethod.Specific.ToString()
                        && !objReceiptItemsInfo.ICReceiptItemIsAverageCalculation)
                    {
                        MessageBox.Show(string.Format(BatchReceiptDryLumberLocalizedResources.ItemSerieNoIsRequiredMessage, objReceiptItemsInfo.ICReceiptItemProductDesc), CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                    //decimal unitcost = objInventoryStocksController.GetInventoryStockUnitCost(objReceiptItemsInfo.FK_ICProductID, objReceiptItemsInfo.ICReceiptItemProductSerialNo);
                    //if (unitcost >= 0) //unitCost < 0 là chưa có đơn gía tồn kho
                    //{
                    //    if (Math.Round(unitcost, 0) != objReceiptItemsInfo.ICReceiptItemProductUnitCost)
                    //    {
                    //        MessageBox.Show(string.Format(BatchReceiptDryLumberLocalizedResources.UnitCostInventoryStock, objReceiptItemsInfo.ICReceiptItemProductName), CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    //        return;
                    //    }
                    //}
                }
            }
            ICProductSeriesController objProductSeriesController = new ICProductSeriesController();
            objProductSeriesController.GenerateProductSerieByReceiptID(objReceiptsInfo.ICReceiptID);
            ActionComplete();
        }
        public override void ActionPrint()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                PrintReceipt(Toolbar.CurrentObjectID);
            }
        }
        public static void PrintReceipt(int receiptID)
        {
            RP_MaterialReceipt report = new RP_MaterialReceipt();
            //report.LoadLayout(BOSCommon.Constants.Report.DevReceiptItemReportPath);
            InitReceiptReport(report, receiptID);
            guiReportPreview viewer = new guiReportPreview(report);
            viewer.Show();
        }
        private static void InitReceiptReport(XtraReport report, int receiptID)
        {
            BRBranchsController objBranchsController = new BRBranchsController();
            BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            if (objBranchsInfo != null)
            {
                XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchAddressLine3"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactAddressLine3;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchPhone"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactPhone;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchFax"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactFax;
                }
            }

            ICReceiptsController objReceiptsController = new ICReceiptsController();
            ICReceiptsInfo receipt = (ICReceiptsInfo)objReceiptsController.GetObjectByID(receiptID);
            #region Hạch Toán
            List<ACDocumentEntrysInfo> entries = new List<ACDocumentEntrysInfo>();
            if (receipt != null)
            {
                ACDocumentsController objDocumentsController = new ACDocumentsController();
                ACDocumentEntrysController objDocumentEntrysController = new ACDocumentEntrysController();
                ACDocumentsInfo document = null;
                if (receipt.ICReceiptTypeCombo == ReceiptType.MaterialReceipt.ToString())
                {
                    document = objDocumentsController.GetDocumentByTypeAndNo(AccDocumentType.NhapKhoVatTu.ToString(), receipt.ICReceiptNo);
                }
                else if (receipt.ICReceiptTypeCombo == ReceiptType.MaterialReturnReceipt.ToString())
                {
                    document = objDocumentsController.GetDocumentByTypeAndNo(AccDocumentType.NhapKhoVatTu.ToString(), receipt.ICReceiptNo);
                }
                else if (receipt.ICReceiptTypeCombo == ReceiptType.MaterialRedundantReceipt.ToString())
                {
                    document = objDocumentsController.GetDocumentByTypeAndNo(AccDocumentType.NhapKhoVatTu.ToString(), receipt.ICReceiptNo);
                }
                else if (receipt.ICReceiptTypeCombo == ReceiptType.PurchaseReceipt.ToString())
                {
                    document = objDocumentsController.GetDocumentByTypeAndNo(AccDocumentType.NhapKhoMuaHangHoaDon.ToString(), receipt.ICReceiptNo);
                    if (document == null)
                    {
                        document = objDocumentsController.GetDocumentByTypeAndNo(AccDocumentType.NhapKhoMuaHang.ToString(), receipt.ICReceiptNo);
                    }
                }
                if (document != null)
                {
                    entries = objDocumentEntrysController.GetDocumentEntryByDocumentID(document.ACDocumentID);
                }
            }
            XRLabel accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblDebitAccountNo"];
            if (accLabel != null)
            {
                string debitAccountNo = string.Empty;
                foreach (ACDocumentEntrysInfo entry in entries)
                {
                    if (entry.ACDocumentDebitAccount != null)
                    {
                        if (!debitAccountNo.Contains(entry.ACDocumentDebitAccount))
                        {
                            debitAccountNo += string.Format(" {0},", entry.ACDocumentDebitAccount);
                        }
                    }
                }
                if (!string.IsNullOrEmpty(debitAccountNo))
                {
                    debitAccountNo = debitAccountNo.Substring(0, debitAccountNo.Length - 1);
                }
                accLabel.Text = debitAccountNo;
            }

            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblCreditAccountNo"];
            if (accLabel != null)
            {
                string creditAccountNo = string.Empty;
                foreach (ACDocumentEntrysInfo entry in entries)
                {
                    if (entry.ACDocumentCreditAccount != null)
                    {
                        if (!creditAccountNo.Contains(entry.ACDocumentCreditAccount))
                        {
                            creditAccountNo += string.Format(" {0},", entry.ACDocumentCreditAccount);
                        }
                    }
                }
                if (!string.IsNullOrEmpty(creditAccountNo))
                {
                    creditAccountNo = creditAccountNo.Substring(0, creditAccountNo.Length - 1);
                }
                accLabel.Text = creditAccountNo;
            }
            #endregion
            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xrLabel28"];
            if (accLabel != null)
            {
                accLabel.Text = receipt.ICReceiptDate.ToString("dd/MM/yyyy");
            }
            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xrLabel29"];
            if (accLabel != null)
            {
                accLabel.Text = receipt.ICReceiptDate.ToString("dd/MM/yyyy");
            }

            ADReportsController objReportsController = new ADReportsController();
            List<ICReceiptItemsInfo> receiptItemList = objReportsController.GetListReceiptItemByReceiptID(receiptID);
            decimal sumProductQty = 0;
            receiptItemList.ForEach(p =>
            {
                sumProductQty += p.ICReceiptItemProductQty;
            });
            accLabel = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblSumProductQty"];
            if (accLabel != null)
            {
                accLabel.Text = sumProductQty.ToString();
            }
            report.DataSource = receiptItemList;
            //report.DataMember = BOSCommon.Constants.Report.DevReceiptItemReportName;
        }
        public override void InvalidateToolbar()
        {
            base.InvalidateToolbar();

            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            ParentScreen.SetEnableOfToolbarButton("ApproveMaterialReceipt", false);
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, false);
            ParentScreen.SetEnableOfToolbarButton("CancelComplete", false);
            if (objReceiptsInfo.ICReceiptID > 0)
            {
                ParentScreen.SetEnableOfToolbarButton(ToolbarButtons.PostedTransactions, false);
                ParentScreen.SetEnableOfToolbarButton(ToolbarButtons.UnPostedTransactions, false);
                if (objReceiptsInfo.ICReceiptStatus == ReceiptStatus.Complete.ToString())
                {
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
                    ParentScreen.SetEnableOfToolbarButton("ApproveMaterialReceipt", false);
                    ParentScreen.SetEnableOfToolbarButton(ToolbarButtons.PostedTransactions,
                        objReceiptsInfo.ICReceiptPostedStatus != PostedTransactionStatus.Posted.ToString());
                    ParentScreen.SetEnableOfToolbarButton(ToolbarButtons.UnPostedTransactions,
                        objReceiptsInfo.ICReceiptPostedStatus == PostedTransactionStatus.Posted.ToString());
                    ParentScreen.SetEnableOfToolbarButton("CancelComplete", true);
                }
                else
                {
                    ParentScreen.SetEnableOfToolbarButton("ApproveMaterialReceipt", true);
                }
                if (Toolbar.IsEditAction())
                {
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, true);
                }
            }
        }

        public void UpdateProductLookupEditControlDataSource(string receiptType)
        {
            ICReceiptsInfo receipt = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            ICProductsController objICProductsController = new ICProductsController();
            List<ICProductsForViewInfo> productList = new List<ICProductsForViewInfo>();
            if (receiptType == ProductType.Roundwood.ToString())
            {
                productList = BOSApp.CurrentProductList.Where(o => o.ICProductType == ProductType.Roundwood.ToString()).ToList();
            }
            else if (receiptType == ProductType.Lumber.ToString()
                || receiptType == ProductType.Verneer.ToString()
                || receiptType == ProductType.ArtificialBoard.ToString())
            {
                //productList = objICProductsController.GetProductByProductWoodType();
                productList = BOSApp.CurrentProductList.Where(o => o.ICProductType == ProductType.Lumber.ToString() ||
                 o.ICProductType == ProductType.Verneer.ToString() ||
                  o.ICProductType == ProductType.ArtificialBoard.ToString()
                 ).ToList();
            }
            else if (receiptType == ProductType.Hardware.ToString())
            {
                productList = BOSApp.CurrentProductList.Where(o => o.ICProductType == ProductType.Hardware.ToString()).ToList();
            }
            else if (receiptType == ProductType.IngredientPaint.ToString())
            {
                productList = BOSApp.CurrentProductList.Where(o => o.ICProductType == ProductType.IngredientPaint.ToString()).ToList();
            }
            else if (receiptType == ProductType.IngredientPackaging.ToString())
            {
                productList = BOSApp.CurrentProductList.Where(o => o.ICProductType == ProductType.IngredientPackaging.ToString()).ToList();
            }
            else if (receiptType == ProductType.Equipment.ToString())
            {
                productList = BOSApp.CurrentProductList.Where(o => o.ICProductType == ProductType.Equipment.ToString()).ToList();
            }
            else
            {
                // productList = objICProductsController.GetProductByProductIngredientType();
                //'Hardware','IngredientPackaging','IngredientPaint','Equipment','Electric','ElecWater'
                productList = BOSApp.CurrentProductList.Where(o => o.ICProductType == ProductType.Hardware.ToString()
                                                                    || o.ICProductType == ProductType.IngredientPackaging.ToString()
                                                                    || o.ICProductType == ProductType.IngredientPaint.ToString()
                                                                    || o.ICProductType == ProductType.Equipment.ToString()
                                                                    || o.ICProductType == ProductType.Electric.ToString()
                                                                    || o.ICProductType == ProductType.ElecWater.ToString()
                                                                    ).ToList();
            }
            //ProductLookupEditControl.Properties.DataSource = productList;
            //if (!string.IsNullOrEmpty(receiptType))
            //{
            //    //ProductLookupEditControl.BOSSelectTypeValue = receiptType;
            //    ProductLookupEditControl.Properties.DataSource = BOSApp.CurrentProductList.Where(o => o.ICProductType == receiptType);
            //}
            //else
            //    ProductLookupEditControl.Properties.DataSource = BOSApp.CurrentProductList;
        }
        public void ChangeStock(int stockID)
        {
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.FK_ICStockID = stockID;
            if (!Toolbar.IsNullOrNoneAction())
            {
                if (entity.ReceiptItemsList.Count > 0)
                {
                    if (MessageBox.Show(MaterialReceiptLocalizedResources1.ConfirmChangeItemStockMessage,
                                    CommonLocalizedResources.MessageBoxDefaultCaption,
                                    MessageBoxButtons.YesNo,
                                    MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                        {
                            item.FK_ICStockID = stockID;
                            item.FK_ACAccountID = GetAccountByStock(stockID, item.FK_ACAccountID);
                        }
                        entity.ReceiptItemsList.GridControl.RefreshDataSource();
                    }
                }
            }
            UpdateDocumentEntries();
        }
        public void ChangeGECurrency(string stringID)
        {
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            int id = 0;
            int.TryParse(stringID, out id);
            objReceiptsInfo.FK_GECurrencyID = id;
            UpdateTotalCost();
        }

        #region Accounting
        protected override void UpdateDocumentEntries()
        {
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;

            ICProductsController productController = new ICProductsController();
            ACDocTypeEntrysController objDocTypeEntrysController = new ACDocTypeEntrysController();
            ACDocTypeEntrysInfo defaultEntry = objDocTypeEntrysController.GetEntryByDocumentTypeAndEntryType(
                                                                        AccDocumentType.NhapKhoVatTu.ToString(),
                                                                        AccEntryType.NhapKhoVatTu.ToString());
            Dictionary<ACDocumentEntrysInfo, List<ICReceiptItemsInfo>> documentEntryAccounts = new Dictionary<ACDocumentEntrysInfo, List<ICReceiptItemsInfo>>();
            List<int> productAccountID = new List<int>();

            foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
            {
                if (item.FK_ACAccountID > 0)
                {
                    ACDocumentEntrysInfo entry = entity.DocumentEntryList.FirstOrDefault(e => e.ACEntryTypeName == AccEntryType.NhapKhoVatTu.ToString()
                                                                        && e.FK_ACDebitAccountID == item.FK_ACAccountID);
                    if (entry == null && defaultEntry != null)
                    {
                        entry = AccountHelper.AddItemToDocumentEntryList(defaultEntry, entity.DocumentEntryList);
                        entry.FK_ACDebitAccountID = item.FK_ACAccountID;
                    }
                    if (entry != null && !documentEntryAccounts.ContainsKey(entry))
                    {
                        documentEntryAccounts.Add(entry, new List<ICReceiptItemsInfo>());
                        productAccountID.Add(entry.FK_ACDebitAccountID);
                    }
                    documentEntryAccounts[entry].Add(item);
                }
            }
            List<ACDocumentEntrysInfo> removedItems = entity.DocumentEntryList.Where(item => item.ACEntryTypeName == AccEntryType.NhapKhoVatTu.ToString()
                                                                              && !productAccountID.Any(accountID => accountID == item.FK_ACDebitAccountID)).ToList();
            if (removedItems != null)
            {
                foreach (ACDocumentEntrysInfo item in removedItems)
                    entity.DocumentEntryList.Remove(item);
            }

            foreach (ACDocumentEntrysInfo entry in entity.DocumentEntryList)
            {
                if (entry.ACEntryTypeName == AccEntryType.NhapKhoVatTu.ToString())
                {
                    entry.ACDocumentEntryAmount = entity.ReceiptItemsList.Where(i => i.FK_ACAccountID == entry.FK_ACDebitAccountID).Sum(i => i.ICReceiptItemInventoryCost * i.ICReceiptItemProductQty);
                    entry.ACDocumentEntryExchangeAmount = entry.ACDocumentEntryAmount * objReceiptsInfo.ICReceiptExchangeRate;
                    BOSApp.RoundByCurrency(entry, "ACDocumentEntryExchangeAmount", BOSApp.CurrentCompanyInfo.FK_GECurrencyID);
                    BOSApp.RoundByCurrency(entry, "ACDocumentEntryAmount", objReceiptsInfo.FK_GECurrencyID);
                }
                ICStocksController objStocksController = new ICStocksController();
                ICStocksInfo objStocksInfo = (ICStocksInfo)objStocksController.GetObjectByID(objReceiptsInfo.FK_ICStockID);
                if (objStocksInfo != null && objStocksInfo.FK_ACAccountID != 0)
                {
                    entry.FK_ACDebitAccountID = objStocksInfo.FK_ACAccountID;
                }
                ICImportAndExportReasonsController objImportAndExportReasonsController = new ICImportAndExportReasonsController();
                ICImportAndExportReasonsInfo objImportAndExportReasonsInfo = (ICImportAndExportReasonsInfo)objImportAndExportReasonsController.GetObjectByID(objReceiptsInfo.FK_ICImportAndExportReasonID);
                if (objImportAndExportReasonsInfo != null && objImportAndExportReasonsInfo.FK_ACAcountID != 0)
                {
                    entry.FK_ACCreditAccountID = objImportAndExportReasonsInfo.FK_ACAcountID;
                }
            }
            entity.DocumentEntryList.GridControl.RefreshDataSource();
        }
        #endregion
        public void ChangeStockInItem(ICReceiptItemsInfo item)
        {
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            item.FK_ACAccountID = GetAccountByStock(item.FK_ICStockID, item.FK_ACAccountID);
            entity.ReceiptItemsList.GridControl.RefreshDataSource();
        }


        public override void Invalidate(int iObjectID)
        {
            base.Invalidate(iObjectID);

            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;

            ReceiptItemGridControl.LoadGridview(objReceiptsInfo.ICReceiptTypeCombo);
            bool isWoodType = BOSApp.IsWoodTypeDocument(objReceiptsInfo.ICReceiptReceiptType, entity.ReceiptItemsList.FirstOrDefault());

            ChangeDisplayColumnByWoodType(entity.ReceiptItemsList.GridControl, isWoodType);

            objReceiptsInfo.ICReceiptSOName = string.Join(", ", entity.ReceiptItemsList.Where(o => !string.IsNullOrWhiteSpace(o.ICReceiptItemSOName)).Select(o => o.ICReceiptItemSOName).Distinct().ToArray());
            entity.UpdateMainObjectBindingSource();
        }

        public void PrintMaterialReceiptTV()
        {
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
            object[] arParam = new object[1];
            arParam[0] = objReceiptsInfo.ICReceiptID;
            ViewReportByTemplate("RPReceiptTV", "GetDataSourceForRPReceiptTV", arParam);
        }

        public void ActionNewFromMaterialShipment()
        {
            ActionNew();

            guiChooseShipmentItems guiFind = new guiChooseShipmentItems();
            guiFind.Module = this;
            DialogResult rs = guiFind.ShowDialog();
            if (rs != DialogResult.OK)
            {
                ActionCancel();
                return;
            }

            List<ICShipmentItemsInfo> shipmentItemList = guiFind.SelectedObjects;

            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.STToolbarActionName = "NewFromMaterialShipment";
            objReceiptsInfo.ICReceiptTypeCombo = ReceiptType.MaterialReturnReceipt.ToString();
            objReceiptsInfo.ICReceiptSOName = string.Join(", ", shipmentItemList.Where(o => !string.IsNullOrWhiteSpace(o.ICShipmentItemSOName)).Select(o => o.ICShipmentItemSOName).Distinct().ToArray());
            ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)(new ICShipmentsController()).GetObjectByID(shipmentItemList.FirstOrDefault().FK_ICShipmentID);
            if (objShipmentsInfo != null)
            {
                objReceiptsInfo.FK_ACObjectID = objShipmentsInfo.FK_ACObjectID;
                objReceiptsInfo.ICObjectType = objShipmentsInfo.ICObjectType;
                objReceiptsInfo.ACObjectAccessKey = string.Join(";", new string[] { objReceiptsInfo.FK_ACObjectID.ToString(), objReceiptsInfo.ICObjectType });
                objReceiptsInfo.FK_GECurrencyID = objShipmentsInfo.FK_GECurrencyID;
                objReceiptsInfo.ICReceiptExchangeRate = objShipmentsInfo.ICShipmentExchangeRate;
                objReceiptsInfo.ICReceiptReceiptType = (objShipmentsInfo.ICShipmentShipmentType.Equals(AllocationPlanType.Hardware.ToString())
                    || objShipmentsInfo.ICShipmentShipmentType.Equals(AllocationPlanType.IngredientPackaging.ToString())
                    || objShipmentsInfo.ICShipmentShipmentType.Equals(AllocationPlanType.DryLumber.ToString()))
                    ? objShipmentsInfo.ICShipmentShipmentType
                    : AllocationPlanType.Other.ToString();
                objReceiptsInfo.FK_MMOperationID = objShipmentsInfo.FK_MMOperationID;
                objReceiptsInfo.FK_ICStockID = objShipmentsInfo.FK_ICStockID;
                //objReceiptsInfo.FK_ICImportAndExportReasonID = objShipmentsInfo.FK_ICImportAndExportReasonID;
                objReceiptsInfo.FK_ICProductID = objShipmentsInfo.FK_ICProductID;
            }

            entity.GenerateEntitiesFromShipment(shipmentItemList);

            bool isWoodType = BOSApp.IsWoodTypeDocument(objReceiptsInfo.ICReceiptReceiptType, entity.ReceiptItemsList.FirstOrDefault());
            ChangeDisplayColumnByWoodType(entity.ReceiptItemsList.GridControl, isWoodType);
            entity.ReceiptItemsList.GridControl.RefreshDataSource();
        }

        public override bool ActionCancelComplete()
        {
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo mainobject = (ICReceiptsInfo)entity.MainObject;

            DialogResult rs = MessageBox.Show("Bạn có chắc chắn muốn mở chứng từ này không?", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (rs != DialogResult.Yes)
                return false;

            if (entity.ReceiptItemsList.IsInvalidInventory(TransactionUtil.cstInventoryShipment))
            {
                return false;
            }
            return base.ActionCancelComplete();
        }

        public override void ModuleAfterCancelCompleted()
        {
            base.ModuleAfterCancelCompleted();
            ActionUnPosted();
        }

        public override void ActionDelete()
        {
            base.ActionDelete();
        }

        public void PrintMaterialReceipt()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                RPMaterialReceipt report = new RPMaterialReceipt();
                InitMaterialReceipt(report, Toolbar.CurrentObjectID);
                guiReportPreview viewer = new guiReportPreview(report);
                viewer.Show();
            }
        }

        private void InitMaterialReceipt(XtraReport report, int receiptID)
        {

            BRBranchsController objBranchsController = new BRBranchsController();
            BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            if (objBranchsInfo != null)
            {
                XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchAddressLine3"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactAddressLine3;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchPhone"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactPhone;
                }

                label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchFax"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactFax;
                }
            }

            ICReceiptsController objReceiptsController = new ICReceiptsController();
            ICReceiptsInfo receipt = (ICReceiptsInfo)objReceiptsController.GetObjectByID(receiptID);

            ADReportsController objReportsController = new ADReportsController();
            List<ICReceiptItemsInfo> receiptList = objReportsController.GetListReceiptItemByReceiptIDForMaterialReceipt(receiptID);

            #region Hạch Toán
            XRLabel accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblDebitAccountNo"];
            if (accLabel != null)
            {
                string debitAccountNo = string.Empty;

                foreach (ICReceiptItemsInfo item in receiptList)
                {
                    if (!debitAccountNo.Contains(item.DebitAccountNo))
                    {
                        debitAccountNo += string.Format(" {0},", item.DebitAccountNo);
                    }
                }
                if (!string.IsNullOrEmpty(debitAccountNo))
                {
                    debitAccountNo = debitAccountNo.Substring(0, debitAccountNo.Length - 1);
                }
                accLabel.Text = debitAccountNo;
            }

            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblCreditAccountNo"];
            if (accLabel != null)
            {
                string creditAccountNo = string.Empty;
                foreach (ICReceiptItemsInfo item in receiptList)
                {
                    if (item.CreditAccountNo != null)
                    {
                        if (!creditAccountNo.Contains(item.CreditAccountNo))
                        {
                            creditAccountNo += string.Format(" {0},", item.CreditAccountNo);
                        }
                    }
                }
                if (!string.IsNullOrEmpty(creditAccountNo))
                {
                    creditAccountNo = creditAccountNo.Substring(0, creditAccountNo.Length - 1);
                }
                accLabel.Text = creditAccountNo;
            }

            #endregion
            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xrLabel28"];
            if (accLabel != null)
            {
                accLabel.Text = receipt.ICReceiptDate.ToString("dd/MM/yyyy");
            }
            accLabel = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xrLabel29"];
            if (accLabel != null)
            {
                accLabel.Text = receipt.ICReceiptDate.ToString("dd/MM/yyyy");
            }

            report.DataSource = receiptList;
        }
        public void ChangeDisplayAndDataItemListGridView()
        {
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;

            bool isWoodType = BOSApp.IsWoodTypeDocument(objReceiptsInfo.ICReceiptReceiptType, entity.ReceiptItemsList.FirstOrDefault());

            ChangeDisplayColumnByWoodType(entity.ReceiptItemsList.GridControl, isWoodType);
            if (!isWoodType)
                entity.ReceiptItemsList.ForEach(o1 => o1.ICReceiptItemLotNo = string.Empty);
        }
        public override void ChangeDisplayColumnByWoodType(BOSGridControl gridControl, bool isWoodType)
        {
            base.ChangeDisplayColumnByWoodType(gridControl, isWoodType);
            if (gridControl == null)
                return;
            GridView gridView = (GridView)gridControl.MainView;
            if (gridView == null)
                return;
            GridColumn qtycolumn = gridView.Columns["ICReceiptItemProductQty"];
            GridColumn column = gridView.Columns["ICReceiptItemWoodQty"];
            if (isWoodType)
            {
                if (column == null)
                {
                    column = new GridColumn();
                    column.FieldName = "ICReceiptItemWoodQty";
                    column.Caption = CommonLocalizedResources.WoodQtyText;
                    column.OptionsColumn.AllowEdit = true;
                    column.VisibleIndex = qtycolumn != null ? qtycolumn.VisibleIndex : 999;
                    gridView.Columns.Add(column);
                }
                else
                {
                    column.Caption = CommonLocalizedResources.WoodQtyText;
                    column.OptionsColumn.AllowEdit = true;
                    column.VisibleIndex = qtycolumn != null ? qtycolumn.VisibleIndex : 999;
                }
            }
            if (!isWoodType && column != null)
            {
                gridView.Columns.Remove(column);
            }
        }
        public void ChangeReceiptReceiptType(string receiptReceiptType)
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)CurrentModuleEntity.MainObject;
                objReceiptsInfo.ICReceiptReceiptType = receiptReceiptType;
                entity.UpdateMainObjectBindingSource();
                ChangeDisplayAndDataItemListGridView();
            }
        }

        public void ChangeImportAndExportReason(int importAndExportReasonID)
        {
            MaterialReceiptEntities entity = (MaterialReceiptEntities)CurrentModuleEntity;
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)entity.MainObject;
            objReceiptsInfo.FK_ICImportAndExportReasonID = importAndExportReasonID;
            if (!Toolbar.IsNullOrNoneAction())
            {
                if (entity.ReceiptItemsList.Count > 0)
                {
                    foreach (ICReceiptItemsInfo item in entity.ReceiptItemsList)
                    {
                        item.FK_ICImportAndExportReasonID = importAndExportReasonID;
                    }
                    entity.ReceiptItemsList.GridControl.RefreshDataSource();
                }
            }
        }
    }
    #endregion BatchReceiptRoundWoodModule
}