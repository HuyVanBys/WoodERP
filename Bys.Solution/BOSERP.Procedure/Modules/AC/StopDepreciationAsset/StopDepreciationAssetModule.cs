using BOSCommon;
using BOSCommon.Constants;
using BOSComponent;
using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows.Forms;

namespace BOSERP.Modules.StopDepreciationAsset
{
    #region StopDepreciationAssetModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:StopDepreciationAssetModule
    //Created Date:Thursday, April 26, 2018
    //-----------------------------------------------------------

    public class StopDepreciationAssetModule : BaseModuleERP
    {
        #region Constants
        public const string SearchBranchLookupEditControlName = "fld_lkeFK_BRBranchID";

        public const string AssetLookupEditControlName = "fld_lkeFK_ACAssetID1";
        #endregion

        #region Public properties
        public BOSLookupEdit SearchBranchLookupEditControl;
        public BOSLookupEdit AssetLookupEditControl;
        public List<ADDataViewPermissionsInfo> CurrentModuleDataViewPermissionList;
        public List<BRBranchsInfo> BranchList;
        #endregion

        public StopDepreciationAssetModule()
        {
            Name = "StopDepreciationAsset";
            CurrentModuleEntity = new StopDepreciationAssetEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();
            GetCurrentModuleDataViewPermission();
            SearchBranchLookupEditControl = (BOSLookupEdit)Controls[SearchBranchLookupEditControlName];
            AssetLookupEditControl = (BOSLookupEdit)Controls[AssetLookupEditControlName];
            SearchBranchLookupEditControl.Properties.DataSource = BranchList;
            BindingDataSourceForAssetLookupEdit();
        }

        public void GetCurrentModuleDataViewPermission()
        {
            CurrentModuleDataViewPermissionList = BOSApp.CurrentADDataViewPermissionList.Where(i => i.STModuleName == Name && i.ADDataViewPermissionType == ADDataViewPermissionType.Module).ToList();
            List<int> branchIDList = new List<int>();
            foreach (ADDataViewPermissionsInfo dataViewPermissionsInfo in CurrentModuleDataViewPermissionList)
            {
                branchIDList.Add(dataViewPermissionsInfo.FK_BRBranchID);
            }
            if (branchIDList.Count == 0)
            {
                BranchList = new List<BRBranchsInfo>();
            }
            else
            {
                BRBranchsController objBranchsController = new BRBranchsController();
                List<BRBranchsInfo> branchList = objBranchsController.GetAllBranches();
                BranchList = branchList.Where(i => branchIDList.IndexOf(i.BRBranchID) > -1).ToList();
            }
        }

        protected override DataSet GetSearchData(ref string searchQuery)
        {
            ACStopDepreciationAssetsController objStopDepreciationAssetsController = new ACStopDepreciationAssetsController();
            ACStopDepreciationAssetsInfo searchObject = (ACStopDepreciationAssetsInfo)CurrentModuleEntity.SearchObject;
            DataSet ds;
            if (SearchBranchLookupEditControl.EditValue.ToString() == "" || SearchBranchLookupEditControl.EditValue.ToString() == "0")
            {
                if (BranchList.Count == 0)
                {
                    ds = objStopDepreciationAssetsController.GetDataSetByID(-1);
                }
                else
                {

                    ds = objStopDepreciationAssetsController.GetStopDepreciationAssetListByListOfBranchID(
                                                                searchObject.ACStopDepreciationAssetNo,
                                                                searchObject.FK_ACAssetID,
                                                                searchObject.ACStopDepreciationAssetStartDate,
                                                                searchObject.ACStopDepreciationAssetFinishedDate,
                                                                searchObject.FK_BRBranchID,
                                                                BranchList);
                }
            }
            else
            {
                ds = objStopDepreciationAssetsController.GetStopDepreciationAssetByBranchID(
                                                                searchObject.ACStopDepreciationAssetNo,
                                                                searchObject.FK_ACAssetID,
                                                                searchObject.ACStopDepreciationAssetStartDate,
                                                                searchObject.ACStopDepreciationAssetFinishedDate,
                                                                searchObject.FK_BRBranchID);
            }
            return ds;
        }

        public void BindingDataSourceForAssetLookupEdit()
        {
            ACAssetsController controller = new ACAssetsController();
            List<ACAssetsInfo> assets = controller.GetAssetsForStopDepreciationAsset();
            AssetLookupEditControl.Properties.DataSource = assets;
        }

        public override void Invalidate(int iObjectID)
        {
            ACAssetsController controller = new ACAssetsController();
            List<ACAssetsInfo> assets = (List<ACAssetsInfo>)controller.GetListFromDataSet(controller.GetAllObjects());
            AssetLookupEditControl.Properties.DataSource = assets;
            base.Invalidate(iObjectID);
        }
        public override void InvalidateToolbar()
        {
            base.InvalidateToolbar();
            StopDepreciationAssetEntities entity = (StopDepreciationAssetEntities)CurrentModuleEntity;
            ACStopDepreciationAssetsInfo mainObject = (ACStopDepreciationAssetsInfo)entity.MainObject;
            ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, true);
            if (mainObject.ACStopDepreciationAssetID > 0)
            {
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
            }
        }

        public override int ActionSave()
        {
            StopDepreciationAssetEntities entity = (StopDepreciationAssetEntities)CurrentModuleEntity;
            ACStopDepreciationAssetsInfo mainObject = (ACStopDepreciationAssetsInfo)entity.MainObject;
            if (mainObject.FK_ACAssetID == 0)
            {
                MessageBox.Show("Vui lòng chọn tài sản.", "#message", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return 0;
            }
            ACAssetsController objAssetsController = new ACAssetsController();
            ACAssetsInfo objAssetsInfo = objAssetsController.GetObjectByID(mainObject.FK_ACAssetID) as ACAssetsInfo;

            if (objAssetsInfo != null)
            {
                if ((objAssetsInfo.ACAssetStatus == AssetStatus.SuspendedDepreciation.ToString()
                    || objAssetsInfo.ACAssetStatus == AssetStatus.Shipped.ToString()
                    || objAssetsInfo.ACAssetStatus == AssetStatus.SuspendedDepreciation.ToString())
                    && mainObject.ACStopDepreciationAssetType == StopDepreciationAssetType.Stop.ToString())
                {
                    
                    MessageBox.Show(string.Format("Tài sản đang {0}", BOSApp.GetDisplayTextFromConfigValue("AssetStatus", objAssetsInfo.ACAssetStatus)), "#message", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return 0;
                }
                if (objAssetsInfo.ACAssetStatus != AssetStatus.SuspendedDepreciation.ToString() && mainObject.ACStopDepreciationAssetType == StopDepreciationAssetType.Continue.ToString())
                {
                    MessageBox.Show(string.Format("Tài sản đang {0}", BOSApp.GetDisplayTextFromConfigValue("AssetStatus", objAssetsInfo.ACAssetStatus)), "#message", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return 0;
                }
            }
            int isSuccess = base.ActionSave();

            if (isSuccess > 0)
                UpdateACAssets();

            return isSuccess;
        }

        public void UpdateACAssets()
        {
            StopDepreciationAssetEntities entity = (StopDepreciationAssetEntities)CurrentModuleEntity;
            ACStopDepreciationAssetsInfo mainObject = (ACStopDepreciationAssetsInfo)entity.MainObject;
            ACAssetsController objAssetsController = new ACAssetsController();
            ACAssetsInfo objAssetsInfo = objAssetsController.GetObjectByID(mainObject.FK_ACAssetID) as ACAssetsInfo;
            DateTime currentDate = GetServerDate();
            if (objAssetsInfo == null)
                return;
            if ((mainObject.ACStopDepreciationAssetType == StopDepreciationAssetType.Stop.ToString() && mainObject.ACStopDepreciationAssetDateStop.Date <= currentDate.Date)
                || (mainObject.ACStopDepreciationAssetType == StopDepreciationAssetType.Continue.ToString() && mainObject.ACStopDepreciationAssetDateStop.Date >= currentDate.Date))
                objAssetsInfo.ACAssetStatus = AssetStatus.SuspendedDepreciation.ToString();
            else if (mainObject.ACStopDepreciationAssetType == StopDepreciationAssetType.Continue.ToString())
            {
                if (objAssetsInfo.ACAssetRemainedAmount > 0)
                    objAssetsInfo.ACAssetStatus = AssetStatus.Using.ToString();
                else
                    objAssetsInfo.ACAssetStatus = AssetStatus.UsingWithoutDepreciation.ToString();
            }
            objAssetsController.UpdateObject(objAssetsInfo);
        }
    }
    #endregion
}