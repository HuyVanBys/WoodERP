using BOSCommon;
using BOSCommon.Constants;
using BOSComponent;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace BOSERP.Modules.StopAllocationEquipment
{
    #region StopAllocationEquipmentModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:StopAllocationEquipmentModule
    //Created Date:Thursday, April 26, 2018
    //-----------------------------------------------------------

    public class StopAllocationEquipmentModule : BaseModuleERP
    {
        #region Constants
        public const string SearchBranchLookupEditControlName = "fld_lkeFK_BRBranchID";
        public const string ProductIdentifiedEquipmentLookupEditControlName = "fld_lkeFK_ICProductIdentifiedEquipmentID";
        public const string ProductLookupEditControlName = "fld_lkeFK_ICProductID";
        public const string StopAllocationEquipmentModuleName = "StopAllocationEquipment";
        #endregion

        #region Public properties
        public BOSLookupEdit SearchBranchLookupEditControl;
        public BOSLookupEdit ProductIdentifiedEquipmentLookupEditControl;
        public BOSLookupEdit ProductLookupEditControl;
        public List<ADDataViewPermissionsInfo> CurrentModuleDataViewPermissionList;
        public List<BRBranchsInfo> BranchList;
        #endregion

        public StopAllocationEquipmentModule()
        {
            Name = StopAllocationEquipmentModuleName;
            CurrentModuleEntity = new StopAllocationEquipmentEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();
            SearchBranchLookupEditControl = (BOSLookupEdit)Controls[SearchBranchLookupEditControlName];
            SearchBranchLookupEditControl.Properties.DataSource = BranchList;
            ProductIdentifiedEquipmentLookupEditControl = (BOSLookupEdit)Controls[ProductIdentifiedEquipmentLookupEditControlName];
            ProductLookupEditControl = (BOSLookupEdit)Controls[ProductLookupEditControlName];
            GetCurrentModuleDataViewPermission();
            GetDataSourceEquipment();
        }

        public void GetCurrentModuleDataViewPermission()
        {
            CurrentModuleDataViewPermissionList = BOSApp.CurrentADDataViewPermissionList.Where(i => i.STModuleName == Name && i.ADDataViewPermissionType == ADDataViewPermissionType.Module).ToList();
            List<int> branchIDList = new List<int>();
            foreach (ADDataViewPermissionsInfo dataViewPermissionsInfo in CurrentModuleDataViewPermissionList)
            {
                branchIDList.Add(dataViewPermissionsInfo.FK_BRBranchID);
            }

            if (branchIDList.Count == 0)
            {
                BranchList = new List<BRBranchsInfo>();
            }
            else
            {
                BRBranchsController objBranchsController = new BRBranchsController();
                List<BRBranchsInfo> branchList = objBranchsController.GetAllBranches();
                BranchList = branchList.Where(i => branchIDList.IndexOf(i.BRBranchID) > -1).ToList();
            }
        }

        protected override DataSet GetSearchData(ref string searchQuery)
        {
            ACStopAllocationEquipmentsController objStopAllocationEquipmentsController = new ACStopAllocationEquipmentsController();
            ACStopAllocationEquipmentsInfo searchObject = (ACStopAllocationEquipmentsInfo)CurrentModuleEntity.SearchObject;
            DataSet ds;
            if (SearchBranchLookupEditControl.EditValue.ToString() == "" || SearchBranchLookupEditControl.EditValue.ToString() == "0")
            {
                if (BranchList.Count == 0)
                {
                    ds = objStopAllocationEquipmentsController.GetDataSetByID(-1);
                }
                else
                {
                    ds = objStopAllocationEquipmentsController.GetStopAllocationEquipmentListByListOfBranchID(
                                                                searchObject.ACStopAllocationEquipmentNo,
                                                                searchObject.FK_ICProductID,
                                                                searchObject.FK_ICProductIdentifiedEquipmentID,
                                                                searchObject.ACStopAllocationEquipmentStartDate,
                                                                searchObject.ACStopAllocationEquipmentFinishedDate,
                                                                searchObject.FK_BRBranchID,
                                                                BranchList);
                }
            }
            else
            {
                ds = objStopAllocationEquipmentsController.GetStopAllocationEquipmentByBranchID(
                                                                searchObject.ACStopAllocationEquipmentNo,
                                                                searchObject.FK_ICProductID,
                                                                searchObject.FK_ICProductIdentifiedEquipmentID,
                                                                searchObject.ACStopAllocationEquipmentStartDate,
                                                                searchObject.ACStopAllocationEquipmentFinishedDate,
                                                                searchObject.FK_BRBranchID);
            }
            return ds;
        }

        public void GetDataSourceEquipment()
        {
            StopAllocationEquipmentEntities entity = (StopAllocationEquipmentEntities)CurrentModuleEntity;
            ACStopAllocationEquipmentsInfo objStopAllocationEquipmentsInfo = (ACStopAllocationEquipmentsInfo)entity.MainObject;
            ICProductsController objProductsController = new ICProductsController();
            List<ICProductsInfo> products =
                objProductsController.GetEquipmentForStopAllocationEquipment(ProductType.Equipment.ToString()).ToList();
            if (products.Count() > 0)
            {
                ProductLookupEditControl.Properties.DataSource = products;
            }
        }

        public List<ICProductIdentifiedEquipmentsInfo> ChangeProductIdentifiedEquipment()
        {
            StopAllocationEquipmentEntities entity = (StopAllocationEquipmentEntities)CurrentModuleEntity;
            ACStopAllocationEquipmentsInfo objStopAllocationEquipmentsInfo = (ACStopAllocationEquipmentsInfo)entity.MainObject;
            ICProductIdentifiedEquipmentsController objProductIdentifiedEquipmentsController = new ICProductIdentifiedEquipmentsController();
            List<ICProductIdentifiedEquipmentsInfo> productIdentifiedEquipments = objProductIdentifiedEquipmentsController.GetDataItemByIdentifiedEquipmentStatus(ProductIdentifiedEquipmentStatus.Using.ToString(), objStopAllocationEquipmentsInfo.FK_ICProductID).ToList();
            return productIdentifiedEquipments;
        }
    }
    #endregion
}