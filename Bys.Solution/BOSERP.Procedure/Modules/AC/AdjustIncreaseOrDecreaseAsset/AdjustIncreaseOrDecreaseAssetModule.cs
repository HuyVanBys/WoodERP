using BOSCommon;
using BOSCommon.Constants;
using BOSLib;
using Localization;
using System.Data;
using System.Windows.Forms;

namespace BOSERP.Modules.AdjustIncreaseOrDecreaseAsset
{
    #region AdjustIncreaseOrDecreaseAssetModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:AdjustIncreaseOrDecreaseAssetModule
    //Created Date:10 Tháng Chín 2018
    //-----------------------------------------------------------

    public class AdjustIncreaseOrDecreaseAssetModule : BaseTransactionModule
    {
        #region Constants
        public const string DocumentEntryGridControlName = "fld_dgcACDocumentEntrys";
        #endregion

        public AdjustIncreaseOrDecreaseAssetModule()
        {
            Name = "AdjustIncreaseOrDecreaseAsset";
            CurrentModuleEntity = new AdjustIncreaseOrDecreaseAssetEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();
        }

        public override void ActionNew()
        {
            base.ActionNew();

        }
        public void ActionNewIncrease()
        {
            base.ActionNew();
            AdjustIncreaseOrDecreaseAssetEntities entity = (AdjustIncreaseOrDecreaseAssetEntities)CurrentModuleEntity;
            ACAdjustIncreaseOrDecreaseAssetsInfo objAdjustIncreaseOrDecreaseAssetsInfo = (ACAdjustIncreaseOrDecreaseAssetsInfo)entity.MainObject;
            objAdjustIncreaseOrDecreaseAssetsInfo.ACAdjustIncreaseOrDecreaseAssetType = AdjustIncreaseOrDecreaseAssetType.Increase.ToString();
            ChangeDocumentEntrys(objAdjustIncreaseOrDecreaseAssetsInfo.ACAdjustIncreaseOrDecreaseAssetType);
        }
        public void ActionNewDecrease()
        {
            base.ActionNew();
            AdjustIncreaseOrDecreaseAssetEntities entity = (AdjustIncreaseOrDecreaseAssetEntities)CurrentModuleEntity;
            ACAdjustIncreaseOrDecreaseAssetsInfo objAdjustIncreaseOrDecreaseAssetsInfo = (ACAdjustIncreaseOrDecreaseAssetsInfo)entity.MainObject;
            objAdjustIncreaseOrDecreaseAssetsInfo.ACAdjustIncreaseOrDecreaseAssetType = AdjustIncreaseOrDecreaseAssetType.Decrease.ToString();
            ChangeDocumentEntrys(objAdjustIncreaseOrDecreaseAssetsInfo.ACAdjustIncreaseOrDecreaseAssetType);
        }
        public void AddItemToAdjustIncreaseOrDecreaseAssetItemsList()
        {
            AdjustIncreaseOrDecreaseAssetEntities entity = (AdjustIncreaseOrDecreaseAssetEntities)CurrentModuleEntity;
            ACAdjustIncreaseOrDecreaseAssetsInfo objAdjustIncreaseOrDecreaseAssetsInfo = (ACAdjustIncreaseOrDecreaseAssetsInfo)entity.MainObject;
            if (objAdjustIncreaseOrDecreaseAssetsInfo.ACAdjustIncreaseOrDecreaseAssetType == string.Empty)
            {
                MessageBox.Show("Chưa chọn loại chứng từ!");
            }
            else
            {
                ACAdjustIncreaseOrDecreaseAssetItemsInfo item = (ACAdjustIncreaseOrDecreaseAssetItemsInfo)entity.ModuleObjects[TableName.ACAdjustIncreaseOrDecreaseAssetItemsTableName];
                if (item.FK_ACAssetID > 0)
                {
                    entity.SetValuesAfterValidateAsset(item.FK_ACAssetID, entity.ModuleObjects[TableName.ACAdjustIncreaseOrDecreaseAssetItemsTableName]);
                    entity.AdjustIncreaseOrDecreaseAssetItemsList.AddObjectToList();
                }
                AddItemToDocumentEntries(item);
            }
        }

        public void AddItemToDocumentEntries(ACAdjustIncreaseOrDecreaseAssetItemsInfo item)
        {
            AdjustIncreaseOrDecreaseAssetEntities entity = (AdjustIncreaseOrDecreaseAssetEntities)CurrentModuleEntity;
            ACAdjustIncreaseOrDecreaseAssetsInfo objAdjustIncreaseOrDecreaseAssetsInfo = (ACAdjustIncreaseOrDecreaseAssetsInfo)entity.MainObject;
            ACAssetsController objAssetsController = new ACAssetsController();
            ACAssetsInfo objAssetsInfo = (ACAssetsInfo)objAssetsController.GetObjectByID(item.FK_ACAssetID);
            if (objAssetsInfo == null)
                return;
            if (entity.DocumentEntryList.Count == 0)
                return;
            UpdateDocumentEntries();
        }

        public void ChangeObject(string objectAccessKey)
        {
            AdjustIncreaseOrDecreaseAssetEntities entity = (AdjustIncreaseOrDecreaseAssetEntities)CurrentModuleEntity;
            ACAdjustIncreaseOrDecreaseAssetsInfo objAdjustIncreaseOrDecreaseAssetsInfo = (ACAdjustIncreaseOrDecreaseAssetsInfo)entity.MainObject;
            objAdjustIncreaseOrDecreaseAssetsInfo.ACObjectAccessKey = objectAccessKey;
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByAccessKey(objectAccessKey);
            objObjectsInfo = objObjectsController.GetObjectByIDAndType(objObjectsInfo.ACObjectID, objObjectsInfo.ACObjectType);
            if (objObjectsInfo != null)
            {
                objAdjustIncreaseOrDecreaseAssetsInfo.FK_ACObjectID = objObjectsInfo.ACObjectID;
                objAdjustIncreaseOrDecreaseAssetsInfo.ACObjectType = objObjectsInfo.ACObjectType;
                objAdjustIncreaseOrDecreaseAssetsInfo.ACObjectContactAddressLine3 = objObjectsInfo.ACObjectContactAddress;
                objAdjustIncreaseOrDecreaseAssetsInfo.ACObjectTaxNumber = objObjectsInfo.ACObjectTaxNumber;
                objAdjustIncreaseOrDecreaseAssetsInfo.FK_ACAccountPurchaseID = objObjectsInfo.FK_ACAccountPurchaseID;
            }
            if (objAdjustIncreaseOrDecreaseAssetsInfo.ACAdjustIncreaseOrDecreaseAssetType == "Increase")
            {
                if (objObjectsInfo.FK_ACAccountPurchaseID > 0)
                {
                    UpdateDocumentEntriesAlongObject(objObjectsInfo.FK_ACAccountPurchaseID);
                }
            }
            entity.UpdateMainObjectBindingSource();
            entity.DocumentEntryList.GridControl.RefreshDataSource();
        }

        public void UpdateDocumentEntriesAlongObject(int fk_ACCreditAccountID)
        {
            AdjustIncreaseOrDecreaseAssetEntities entity = (AdjustIncreaseOrDecreaseAssetEntities)CurrentModuleEntity;
            entity.DocumentEntryList.ForEach(o => o.FK_ACCreditAccountID = fk_ACCreditAccountID);
        }

        public void DeleteItemFromAIODAItemsList()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                AdjustIncreaseOrDecreaseAssetEntities entity = (AdjustIncreaseOrDecreaseAssetEntities)CurrentModuleEntity;
                ACAdjustIncreaseOrDecreaseAssetItemsInfo objAdjustIncreaseOrDecreaseAssetItemsInfo = (ACAdjustIncreaseOrDecreaseAssetItemsInfo)entity.AdjustIncreaseOrDecreaseAssetItemsList[entity.AdjustIncreaseOrDecreaseAssetItemsList.CurrentIndex];
                entity.AdjustIncreaseOrDecreaseAssetItemsList.RemoveSelectedRowObjectFromList();
                UpdateDocumentEntriesCost();
            }
        }

        public void ChangeDocumentEntrys(string adjustIODAssetType)
        {
            if (adjustIODAssetType == "Increase")
            {
                GenerateAccountingData(new string[] { AccDocumentType.DieuChinhTang.ToString() });
                AdjustIncreaseOrDecreaseAssetEntities entity = (AdjustIncreaseOrDecreaseAssetEntities)CurrentModuleEntity;
                ACAdjustIncreaseOrDecreaseAssetsInfo objAdjustIncreaseOrDecreaseAssetsInfo = (ACAdjustIncreaseOrDecreaseAssetsInfo)entity.MainObject;
                if (string.IsNullOrEmpty(objAdjustIncreaseOrDecreaseAssetsInfo.ACObjectAccessKey))
                    return;

                ACObjectsController objObjectsController = new ACObjectsController();
                ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByAccessKey(objAdjustIncreaseOrDecreaseAssetsInfo.ACObjectAccessKey);
                objObjectsInfo = objObjectsController.GetObjectByIDAndType(objObjectsInfo.ACObjectID, objObjectsInfo.ACObjectType);
                if (objObjectsInfo == null)
                    return;

                if (objObjectsInfo.FK_ACAccountPurchaseID > 0)
                {
                    UpdateDocumentEntriesAlongObject(objObjectsInfo.FK_ACAccountPurchaseID);
                }
            }

            if (adjustIODAssetType == "Decrease")
            {
                GenerateAccountingData(new string[] { AccDocumentType.DieuChinhGiam.ToString() });
            }
        }

        public void UpdateDocumentEntriesCost()
        {
            AdjustIncreaseOrDecreaseAssetEntities entity = (AdjustIncreaseOrDecreaseAssetEntities)CurrentModuleEntity;
            entity.DocumentEntryList.ForEach(o => o.ACDocumentEntryAmount = 0);
            entity.AdjustIncreaseOrDecreaseAssetItemsList.ForEach(o => AddItemToDocumentEntries(o));
            entity.DocumentEntryList.GridControl.RefreshDataSource();
        }

        protected override DataSet GetSearchData(ref string searchQuery)
        {
            ACAdjustIncreaseOrDecreaseAssetsInfo searchObject = (ACAdjustIncreaseOrDecreaseAssetsInfo)CurrentModuleEntity.SearchObject;
            ACAdjustIncreaseOrDecreaseAssetsController objAdjustIncreaseOrDecreaseAssetsController = new ACAdjustIncreaseOrDecreaseAssetsController();
            DataSet ds = new DataSet();
            ds = objAdjustIncreaseOrDecreaseAssetsController.GetAdjustIODAssetListBySomeCriteria(searchObject.ACAdjustIncreaseOrDecreaseAssetNo,
                                                                            searchObject.FK_ACObjectID,
                                                                            searchObject.FK_BRBranchID,
                                                                            searchObject.ACAdjustIODAssetDateFrom,
                                                                            searchObject.ACAdjustIODAssetDateTo);
            return ds;
        }

        public override void ModuleAfterSaved(int iObjectID)
        {
            base.ModuleAfterSaved(iObjectID);
            ActionPosted();
        }

        public void ActionPosted()
        {
            if (!CheckLock()) return;
            AdjustIncreaseOrDecreaseAssetEntities entity = (AdjustIncreaseOrDecreaseAssetEntities)CurrentModuleEntity;
            ACAdjustIncreaseOrDecreaseAssetsInfo mainObject = (ACAdjustIncreaseOrDecreaseAssetsInfo)entity.MainObject;
            CurrentModuleEntity.SetPropertyChangeEventLock(false);
            mainObject.ACAdjustIncreaseOrDecreaseAssetPostedStatus = PostedTransactionStatus.Posted.ToString();
            string tableName = mainObject.ToString().Replace("BOSERP.", string.Empty).Replace("Info", string.Empty);
            GLHelper.UpdatePostedStatus(this.Name, tableName, mainObject.ACAdjustIncreaseOrDecreaseAssetID, PostedTransactionStatus.Posted.ToString());
            CurrentModuleEntity.SetPropertyChangeEventLock(true);
            GLHelper.PostedTransactions(this.Name, mainObject.ACAdjustIncreaseOrDecreaseAssetID, ModulePostingType.Accounting, ModulePostingType.InvoiceInTrans);
            InvalidateAccountingEntries();
            InvalidateToolbar();
        }

        public void ActionUnPosted()
        {
            if (!CheckLock()) return;
            AdjustIncreaseOrDecreaseAssetEntities entity = (AdjustIncreaseOrDecreaseAssetEntities)CurrentModuleEntity;
            ACAdjustIncreaseOrDecreaseAssetsInfo mainObject = (ACAdjustIncreaseOrDecreaseAssetsInfo)entity.MainObject;
            CurrentModuleEntity.SetPropertyChangeEventLock(false);
            mainObject.ACAdjustIncreaseOrDecreaseAssetPostedStatus = PostedTransactionStatus.UnPosted.ToString();
            string tableName = mainObject.ToString().Replace("BOSERP.", string.Empty).Replace("Info", string.Empty);
            GLHelper.UpdatePostedStatus(this.Name, tableName, mainObject.ACAdjustIncreaseOrDecreaseAssetID, PostedTransactionStatus.UnPosted.ToString());
            CurrentModuleEntity.SetPropertyChangeEventLock(true);
            GLHelper.UnPostedTransactions(this.Name, mainObject.ACAdjustIncreaseOrDecreaseAssetID, ModulePostingType.Accounting, ModulePostingType.InvoiceInTrans);
            InvalidateAccountingEntries();
            InvalidateToolbar();
        }
        public override void InvalidateToolbar()
        {
            AdjustIncreaseOrDecreaseAssetEntities entity = (AdjustIncreaseOrDecreaseAssetEntities)CurrentModuleEntity;
            ACAdjustIncreaseOrDecreaseAssetsInfo mainObject = (ACAdjustIncreaseOrDecreaseAssetsInfo)entity.MainObject;
            ParentScreen.SetEnableOfToolbarButton(ToolbarButtons.PostedTransactions, false);
            ParentScreen.SetEnableOfToolbarButton(ToolbarButtons.UnPostedTransactions, false);
            if (mainObject.ACAdjustIncreaseOrDecreaseAssetID > 0)
            {
                if (mainObject.ACAdjustIncreaseOrDecreaseAssetPostedStatus != PostedTransactionStatus.Posted.ToString())
                {
                    ParentScreen.SetEnableOfToolbarButton(ToolbarButtons.PostedTransactions, true);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, true);
                }
                else if (mainObject.ACAdjustIncreaseOrDecreaseAssetPostedStatus == PostedTransactionStatus.Posted.ToString())
                {
                    ParentScreen.SetEnableOfToolbarButton(ToolbarButtons.UnPostedTransactions, true);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
                }
            }
        }
        protected override void UpdateDocumentEntries()
        {
            AdjustIncreaseOrDecreaseAssetEntities entity = (AdjustIncreaseOrDecreaseAssetEntities)CurrentModuleEntity;
            ACAdjustIncreaseOrDecreaseAssetsInfo mainObject = (ACAdjustIncreaseOrDecreaseAssetsInfo)entity.MainObject;
            ACAssetsController objAssetsController = new ACAssetsController();
            ACObjectsController objObjectsController = new ACObjectsController();
            foreach (ACDocumentEntrysInfo entry in entity.DocumentEntryList)
            {
                if (entry.ACEntryTypeName == AccEntryType.ThueGTGTDuocKhauTru.ToString())
                {
                    ACObjectsInfo objObjectsInfo = (ACObjectsInfo)objObjectsController.GetObjectByIDAndType(mainObject.FK_ACObjectID, mainObject.ACObjectType);
                    if (objObjectsInfo != null && objObjectsInfo.FK_ACAccountPurchaseID != 0)
                    {
                        entry.FK_ACCreditAccountID = objObjectsInfo.FK_ACAccountPurchaseID;
                    }
                    foreach (ACAdjustIncreaseOrDecreaseAssetItemsInfo item in entity.AdjustIncreaseOrDecreaseAssetItemsList)
                    {
                        entry.ACDocumentEntryAmount += item.ACAdjustIncreaseOrDecreaseAssetItemTaxAmount;
                        entry.ACDocumentEntryExchangeAmount = entry.ACDocumentEntryAmount * mainObject.ACAdjustIncreaseOrDecreaseAssetExchangeRate;
                    }
                }
                else if (entry.ACEntryTypeName == AccEntryType.DieuChinhTang.ToString())
                {
                    ACObjectsInfo objObjectsInfo = (ACObjectsInfo)objObjectsController.GetObjectByIDAndType(mainObject.FK_ACObjectID, mainObject.ACObjectType);
                    if (objObjectsInfo != null && objObjectsInfo.FK_ACAccountPurchaseID != 0)
                    {
                        entry.FK_ACCreditAccountID = objObjectsInfo.FK_ACAccountPurchaseID;
                    }
                    foreach (ACAdjustIncreaseOrDecreaseAssetItemsInfo item in entity.AdjustIncreaseOrDecreaseAssetItemsList)
                    {
                        ACAssetsInfo objAssetsInfo = (ACAssetsInfo)objAssetsController.GetObjectByID(item.FK_ACAssetID);
                        entry.FK_ACDebitAccountID = objAssetsInfo.FK_ACAccountID;
                        entry.ACDocumentEntryAmount += item.ACAdjustIncreaseOrDecreaseAssetItemAmount;
                        entry.ACDocumentEntryExchangeAmount = entry.ACDocumentEntryAmount * mainObject.ACAdjustIncreaseOrDecreaseAssetExchangeRate;
                    }
                }
                else if (entry.ACEntryTypeName == AccEntryType.DieuChinhGiam.ToString())
                {
                    foreach (ACAdjustIncreaseOrDecreaseAssetItemsInfo item in entity.AdjustIncreaseOrDecreaseAssetItemsList)
                    {
                        ACAssetsInfo objAssetsInfo = (ACAssetsInfo)objAssetsController.GetObjectByID(item.FK_ACAssetID);
                        entry.FK_ACCreditAccountID = objAssetsInfo.FK_ACAccountID;
                        entry.ACDocumentEntryAmount += item.ACAdjustIncreaseOrDecreaseAssetItemAmount;
                        entry.ACDocumentEntryExchangeAmount = entry.ACDocumentEntryAmount * mainObject.ACAdjustIncreaseOrDecreaseAssetExchangeRate;
                    }
                }
            }
            entity.DocumentEntryList.GridControl.RefreshDataSource();
        }
        public void ChangeCurrency(int currency)
        {
            AdjustIncreaseOrDecreaseAssetEntities entity = (AdjustIncreaseOrDecreaseAssetEntities)CurrentModuleEntity;
            ACAdjustIncreaseOrDecreaseAssetsInfo mainObject = (ACAdjustIncreaseOrDecreaseAssetsInfo)entity.MainObject;

            mainObject.FK_GECurrencyID = currency;
            decimal dCurrencyExchangeRate = BOSApp.RealTimeExchageRateByCurrencyAndDate(mainObject.FK_GECurrencyID, mainObject.ACAdjustIncreaseOrDecreaseAssetDate);
            mainObject.ACAdjustIncreaseOrDecreaseAssetExchangeRate = (dCurrencyExchangeRate > 0)
                                                               ? dCurrencyExchangeRate
                                                               : 1;
            foreach (ACAdjustIncreaseOrDecreaseAssetItemsInfo item in entity.AdjustIncreaseOrDecreaseAssetItemsList)
            {
                item.ACAdjustIncreaseOrDecreaseAssetItemTotalAmount = (item.ACAdjustIncreaseOrDecreaseAssetItemTaxAmount + item.ACAdjustIncreaseOrDecreaseAssetItemAmount) * mainObject.ACAdjustIncreaseOrDecreaseAssetExchangeRate;
            }
            entity.AdjustIncreaseOrDecreaseAssetItemsList.GridControl.RefreshDataSource();
            UpdateDocumentEntriesCost();
        }

        public override int ActionSave()
        {
            AdjustIncreaseOrDecreaseAssetEntities entity = (AdjustIncreaseOrDecreaseAssetEntities)CurrentModuleEntity;
            ACAdjustIncreaseOrDecreaseAssetsInfo mainObject = (ACAdjustIncreaseOrDecreaseAssetsInfo)entity.MainObject;
            entity.AdjustIncreaseOrDecreaseAssetItemsList.EndCurrentEdit();
            if (mainObject.ACAdjustIncreaseOrDecreaseAssetType == AdjustIncreaseOrDecreaseAssetType.Decrease.ToString())
            {
                ACAssetsController objAssetsController = new ACAssetsController();
                ACAssetsInfo objAssetsInfo;
                foreach (ACAdjustIncreaseOrDecreaseAssetItemsInfo item in entity.AdjustIncreaseOrDecreaseAssetItemsList)
                {
                    objAssetsInfo = (ACAssetsInfo)objAssetsController.GetObjectByID(item.FK_ACAssetID);
                    if (objAssetsInfo.ACAssetRemainedAmount < item.ACAdjustIncreaseOrDecreaseAssetItemAmount)
                    {
                        MessageBox.Show(string.Format("Số tiền điều chỉnh giảm của tài sản {0} vượt quá Giá trị còn lại {1}", objAssetsInfo.ACAssetNo, objAssetsInfo.ACAssetRemainedAmount.ToString("n0"))
                                        , CommonLocalizedResources.MessageBoxDefaultCaption
                                        , MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return 0;
                    }
                }
            }
            return base.ActionSave();
        }
    }
    #endregion
}