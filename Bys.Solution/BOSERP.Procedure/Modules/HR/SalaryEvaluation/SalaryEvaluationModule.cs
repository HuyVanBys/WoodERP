using BOSCommon;
using BOSLib;
using DevExpress.XtraGrid.Views.BandedGrid;
using Localization;
using System;
using System.Data;
using System.Windows.Forms;

namespace BOSERP.Modules.SalaryEvaluation
{
    #region SalaryEvaluationModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:DepartmentModule
    //Created Date:Thursday, February 17, 2011
    //-----------------------------------------------------------

    public class SalaryEvaluationModule : BaseModuleERP
    {
        public SalaryEvaluationModule()
        {
            Name = "SalaryEvaluation";
            CurrentModuleEntity = new SalaryEvaluationEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();
        }

        #region GetSearchData
        protected override DataSet GetSearchData(ref string searchQuery)
        {
            HRSalaryEvaluationsInfo objSalaryEvaluationsInfo = (HRSalaryEvaluationsInfo)CurrentModuleEntity.SearchObject;
            HRSalaryEvaluationsController objSalaryEvaluationsController = new HRSalaryEvaluationsController();

            DataSet ds = new DataSet();
            ds = objSalaryEvaluationsController.GetListForSearch(
                                                        objSalaryEvaluationsInfo.HRSalaryEvaluationNo,
                                                        objSalaryEvaluationsInfo.HRSalaryEvaluationName,
                                                        objSalaryEvaluationsInfo.HRSalaryEvaluationFromDate,
                                                        objSalaryEvaluationsInfo.HRSalaryEvaluationToDate);

            return ds;
        }
        #endregion
        /// <summary>
        /// Remove an item from the room list of the current department
        /// </summary>
        public void RemoveItemFromList()
        {
            SalaryEvaluationEntities entity = (SalaryEvaluationEntities)CurrentModuleEntity;
            entity.EmployeeSalaryEvaluationList.RemoveSelectedRowObjectFromList();
        }

        public override int ActionSave()
        {
            return base.ActionSave();
        }

        #region Invalidate Toolbar
        public override void InvalidateToolbar()
        {
            base.InvalidateToolbar();
            SalaryEvaluationEntities entity = (SalaryEvaluationEntities)CurrentModuleEntity;
            HRSalaryEvaluationsInfo objSalaryEvaluationsInfo = (HRSalaryEvaluationsInfo)entity.MainObject;
            ParentScreen.SetEnableOfToolbarButton("Apply", false);
            if (objSalaryEvaluationsInfo.HRSalaryEvaluationID > 0)
            {
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, true);
                ParentScreen.SetEnableOfToolbarButton("Apply", true);
                if (objSalaryEvaluationsInfo.HRSalaryEvaluationStatus == SalaryEvaluationStatus.Apply.ToString())
                {
                    ParentScreen.SetEnableOfToolbarButton("Apply", false);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
                }
            }
        }
        #endregion 

        public void RemoveEmployeeFromTimeSheetList()
        {
            SalaryEvaluationEntities entity = (SalaryEvaluationEntities)CurrentModuleEntity;
            BandedGridView bandedView = (BandedGridView)entity.EmployeeSalaryEvaluationList.GridControl.MainView;
            if (bandedView.FocusedRowHandle >= 0)
            {
                int index = bandedView.GetDataSourceRowIndex(bandedView.FocusedRowHandle);
                entity.EmployeeSalaryEvaluationList.RemoveAt(index);
                bandedView.RefreshData();
            }
        }

        public void AddEmployeeToSalaryEvaluation()
        {
            try
            {
                guiSearchEmployee guiEmployee = new guiSearchEmployee();
                guiEmployee.Module = this;
                if (guiEmployee.ShowDialog() == DialogResult.OK)
                {
                    SalaryEvaluationEntities entity = (SalaryEvaluationEntities)CurrentModuleEntity;
                    HRSalaryEvaluationsInfo objSalaryEvaluationsInfo = (HRSalaryEvaluationsInfo)entity.MainObject;
                    guiEmployee.SelectedEmployeeList.ForEach(o =>
                    {
                        if (!entity.EmployeeSalaryEvaluationList.Exists(x => x.FK_HREmployeeID == o.HREmployeeID))
                        {
                            HREmployeeSalaryEvaluationsInfo objEmployeeSalaryEvaluationsInfo = new HREmployeeSalaryEvaluationsInfo();
                            objEmployeeSalaryEvaluationsInfo.HREmployeeName = o.HREmployeeName;
                            objEmployeeSalaryEvaluationsInfo.HREmployeeNo = o.HREmployeeNo;
                            objEmployeeSalaryEvaluationsInfo.FK_HREmployeeID = o.HREmployeeID;
                            objEmployeeSalaryEvaluationsInfo.HREmployeeStartWorkingDate = o.HREmployeeStartWorkingDate;

                            objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationSlrAmtBefore = o.HREmployeeContractSlrAmt;
                            objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationWorkingSlrAmtBefore = o.HREmployeeWorkingSlrAmt;
                            objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationSlrAmtAfter = objSalaryEvaluationsInfo.HRSalaryEvaluationSlrAmt;
                            objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationWorkingSlrAmtAfter = objSalaryEvaluationsInfo.HRSalaryEvaluationWorkingSlrAmt;

                            objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationSlrAmtIncrease = objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationSlrAmtAfter - objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationSlrAmtBefore;
                            objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationWorkingSlrAmtIncrease = objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationWorkingSlrAmtAfter - objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationWorkingSlrAmtBefore;
                            objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationSlrAmtPercent = objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationSlrAmtBefore > 0
                                                                                                        ? objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationSlrAmtIncrease
                                                                                                        / objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationSlrAmtBefore * 100
                                                                                                        : 0;
                            objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationWorkingSlrAmtPercent = objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationSlrAmtAfter > 0
                                                                                                        ? objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationWorkingSlrAmtIncrease
                                                                                                        / objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationWorkingSlrAmtBefore * 100
                                                                                                        : 0;
                            objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationIncurredDate = DateTime.MaxValue;
                            objEmployeeSalaryEvaluationsInfo.HREmployeeSeniorityYear = Math.Floor((decimal)(BOSApp.GetCurrentServerDate() - o.HREmployeeStartWorkingDate).TotalDays / 365);
                            entity.EmployeeSalaryEvaluationList.Add(objEmployeeSalaryEvaluationsInfo);
                        }
                    });
                    entity.EmployeeSalaryEvaluationList.GridControl.RefreshDataSource();
                }
            }
            catch (Exception e)
            { }
        }

        public void ChangeEmployeeSalaryEvaluationAfter(HREmployeeSalaryEvaluationsInfo objEmployeeSalaryEvaluationsInfo)
        {
            SalaryEvaluationEntities entity = (SalaryEvaluationEntities)CurrentModuleEntity;

            objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationSlrAmtIncrease = objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationSlrAmtAfter - objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationSlrAmtBefore;
            objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationWorkingSlrAmtIncrease = objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationWorkingSlrAmtAfter - objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationWorkingSlrAmtBefore;
            objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationSlrAmtPercent = objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationSlrAmtBefore > 0
                                                                                        ? objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationSlrAmtIncrease
                                                                                        / objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationSlrAmtBefore * 100
                                                                                        : 0;
            objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationWorkingSlrAmtPercent = objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationSlrAmtAfter > 0
                                                                                        ? objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationWorkingSlrAmtIncrease
                                                                                        / objEmployeeSalaryEvaluationsInfo.HREmployeeSalaryEvaluationWorkingSlrAmtBefore * 100
                                                                                        : 0;
            entity.EmployeeSalaryEvaluationList.GridControl.RefreshDataSource();
        }

        public void Apply()
        {
            SalaryEvaluationEntities entity = (SalaryEvaluationEntities)CurrentModuleEntity;
            HREmployeesController objEmployeesController = new HREmployeesController();
            if (MessageBox.Show("Bạn có muốn áp dụng chứng từ không?", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                entity.SetPropertyChangeEventLock(false);
                HRSalaryEvaluationsInfo objSalaryEvaluationsInfo = (HRSalaryEvaluationsInfo)entity.MainObject;
                HREmployeeSalaryEvaluationsController objEmployeeSalaryEvaluationsController = new HREmployeeSalaryEvaluationsController();
                objSalaryEvaluationsInfo.HRSalaryEvaluationStatus = SalaryEvaluationStatus.Apply.ToString();
                entity.UpdateMainObject();

                entity.EmployeeSalaryEvaluationList.ForEach(o =>
                {
                    HREmployeesInfo objEmployeesInfo = new HREmployeesInfo();
                    objEmployeesInfo = (HREmployeesInfo)objEmployeesController.GetObjectByID(o.FK_HREmployeeID);
                    if (objEmployeesInfo != null)
                    {
                        objEmployeesInfo.HREmployeeContractSlrAmt = o.HREmployeeSalaryEvaluationSlrAmtAfter;
                        objEmployeesInfo.HREmployeeWorkingSlrAmt = o.HREmployeeSalaryEvaluationWorkingSlrAmtAfter;
                        objEmployeesController.UpdateObject(objEmployeesInfo);
                    }
                    o.HREmployeeSalaryEvaluationIncurredDate = BOSApp.GetCurrentServerDate();
                    objEmployeeSalaryEvaluationsController.UpdateObject(o);
                });

                InvalidateToolbar();
            }
            else
            {
                return;
            }
        }
    }
    #endregion
}
