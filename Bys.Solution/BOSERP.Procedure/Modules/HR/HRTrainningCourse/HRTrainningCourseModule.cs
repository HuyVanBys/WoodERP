using BOSCommon;
using BOSCommon.Constants;
using BOSComponent;
using BOSLib;
using BOSReport;
using DevExpress.XtraReports.UI;
using Localization;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows.Forms;


namespace BOSERP.Modules.HRTrainningCourse
{
    #region HRTrainningCourseModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:TrainningCourseModule
    //Created Date:Thursday, February 17, 2011
    //-----------------------------------------------------------

    public class HRTrainningCourseModule : BaseModuleERP
    {
        #region Constant
        public const string TrainningClassGridControlName = "fld_dgcHRTrainningClass";
        public const string ClassSchedulesGridControlName = "fld_dgcHRClassSchedules";
        public const string TrainningEmployeeLookupEditName = "fld_lkeFK_HREmployeeID";
        public const string TranningCourseStartDateName = "fld_dteHRTranningCourseStartDate";
        public const string TranningCourseEndDateName = "fld_dteHRTrainningCourseEndDate";
        #endregion

        #region variable
        /// <summary>
        /// The list of all trainning schedules in all trainning courses
        /// </summary>
        private List<HRTrainningSchedulesInfo> AllTrainningScheduleList = new List<HRTrainningSchedulesInfo>();
        /// <summary>
        /// Gets or sets a value for check trainning employee name.
        /// </summary>
        public bool IsCheck { get; set; }
        #endregion

        #region Constructor
        public HRTrainningCourseModule()
        {
            Name = "HRTrainningCourse";
            CurrentModuleEntity = new HRTrainningCourseEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();
            IsCheck = false;
        }
        #endregion

        #region Methods
        public override int ActionSave()
        {
            HRTrainningCourseEntities entity = (HRTrainningCourseEntities)CurrentModuleEntity;
            foreach (HRTrainningEmployeesInfo objTrainningEmployeesInfo in entity.HRTrainningEmployeesList)
            {
                objTrainningEmployeesInfo.HRTrainningEmployeeType = TrainningEmployee.Teacher.ToString();
                objTrainningEmployeesInfo.FK_HRTrainningClassID = 0;
            }
            if (IsSameTrainningSchedules())
            {
                MessageBox.Show(TrainningCourseLocalizedResources.SchedulesTeacherIsSameErrorMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return 0;
            }
            return base.ActionSave();
        }
        /// <summary>
        /// Invalidate start date and end date
        /// </summary>
        public void InvalidateDatetime()
        {
            BOSComponent.BOSDateEdit dateEditTranningCourseStartDate = (BOSComponent.BOSDateEdit)Controls[TranningCourseStartDateName];
            BOSComponent.BOSDateEdit dateEditTranningCourseEndDate = (BOSComponent.BOSDateEdit)Controls[TranningCourseEndDateName];
            if (dateEditTranningCourseStartDate.DateTime > dateEditTranningCourseEndDate.DateTime)
            {
                BOSERP.Modules.HRTrainningCourse.UI.DMHRTC100.IsError = true;
                dateEditTranningCourseStartDate.InvalidValue += new DevExpress.XtraEditors.Controls.InvalidValueExceptionEventHandler(DateEditInvalidValue);
                dateEditTranningCourseEndDate.InvalidValue += new DevExpress.XtraEditors.Controls.InvalidValueExceptionEventHandler(DateEditInvalidValue);
            }
            else
            {
                BOSERP.Modules.HRTrainningCourse.UI.DMHRTC100.IsError = false;
            }
        }
        /// <summary>
        /// Show errors message when start date > end date  
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void DateEditInvalidValue(object sender, DevExpress.XtraEditors.Controls.InvalidValueExceptionEventArgs e)
        {
            e.ExceptionMode = DevExpress.XtraEditors.Controls.ExceptionMode.DisplayError;
            BOSComponent.BOSDateEdit dateEdit = (BOSComponent.BOSDateEdit)sender;
            if (dateEdit.Name.Equals(TranningCourseEndDateName))
                e.ErrorText = TrainningCourseLocalizedResources.TranningCourseEndDateErrorMessage;
            else
                e.ErrorText = TrainningCourseLocalizedResources.TranningCourseStartDateErrorMessage;
        }

        public override void ActionPrint()
        {
            HRTrainningCourseEntities entity = (HRTrainningCourseEntities)CurrentModuleEntity;
            HRTrainningCoursesInfo objTrainningCoursesInfo = (HRTrainningCoursesInfo)entity.MainObject;
            ADReportsController objReportsController = new ADReportsController();
            RPTrainningCourse report = new RPTrainningCourse();
            //report.LoadLayout(BOSCommon.Constants.Report.DevTrainningCourseReportPath);

            //Set current branch
            BRBranchsController objBranchsController = new BRBranchsController();
            BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            XRLabel branchAddressLine3 = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchAddressLine3"];
            if (branchAddressLine3 != null)
                branchAddressLine3.Text = objBranchsInfo.BRBranchContactAddressLine3;
            XRLabel branchPhone = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchPhone"];
            if (branchPhone != null)
                branchPhone.Text = objBranchsInfo.BRBranchContactPhone;
            XRLabel branchFax = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchFax"];
            if (branchFax != null)
                branchFax.Text = objBranchsInfo.BRBranchContactFax;

            report.DataSource = objReportsController.GetTrainningSchedulesByTrainningCourseID(objTrainningCoursesInfo.HRTrainningCourseID);
            report.DataMember = BOSCommon.Constants.Report.DevTrainningCourseReportName;
            guiReportPreview reviewer = new guiReportPreview(report, BOSCommon.Constants.Report.DevTrainningCourseReportPath, true);
            reviewer.Show();
        }
        #endregion

        #region local
        /// <summary>
        /// Delete selected item from class schedules grid control
        /// </summary>
        public void DelectSelectedClassScheduleItem()
        {
            HRTrainningCourseEntities entity = (HRTrainningCourseEntities)CurrentModuleEntity;
            BOSGridControl classScheduleGridControl = (BOSGridControl)Controls[HRTrainningCourseModule.ClassSchedulesGridControlName];
            BOSList<HRClassSchedulesInfo> classScheduleList = (BOSList<HRClassSchedulesInfo>)((BindingSource)classScheduleGridControl.DataSource).DataSource;
            classScheduleList.RemoveSelectedRowObjectFromList();
        }

        /// <summary>
        /// Delete selected item from trainning employee grid control
        /// </summary>
        public void DeleteSelectedTrainningEmployeeItem()
        {
            HRTrainningCourseEntities entity = (HRTrainningCourseEntities)CurrentModuleEntity;
            entity.HRTrainningEmployeesList.RemoveSelectedRowObjectFromList();
        }

        /// <summary>
        /// Delete selected trainning class item from list of trainning class
        /// </summary>
        public void DeleteSelectedTrainningClassItem()
        {
            HRTrainningCourseEntities entity = (HRTrainningCourseEntities)CurrentModuleEntity;
            BOSGridControl trainningClassGridControl = (BOSGridControl)Controls[HRTrainningCourseModule.TrainningClassGridControlName];
            BOSList<HRTrainningClassInfo> trainningClassList = (BOSList<HRTrainningClassInfo>)((BindingSource)trainningClassGridControl.DataSource).DataSource;
            trainningClassList.RemoveSelectedRowObjectFromList();
        }

        /// <summary>
        /// Creates the schedules when user click the "Create Schedules" button
        /// </summary>
        public void CreateSchedules()
        {
            HRTrainningCourseEntities entity = (HRTrainningCourseEntities)CurrentModuleEntity;
            HRTrainningCoursesInfo objTrainningCoursesInfo = new HRTrainningCoursesInfo();
            objTrainningCoursesInfo = (HRTrainningCoursesInfo)entity.MainObject;
            entity.InvalidateTrainningSchedules(objTrainningCoursesInfo.HRTrainningCourseID);
        }

        /// <summary>
        /// Checks an employee whether to be a student
        /// </summary>
        /// <param name="employeeID">The employee ID.</param>
        public bool CheckEmployeeIsStudent(int employeeID)
        {
            bool isExist = false;

            HRTrainningEmployeesController objTrainningEmployeesController = new HRTrainningEmployeesController();
            DataSet ds = objTrainningEmployeesController.GetTrainningEmployeeByEmployeeID(employeeID, TrainningEmployee.Student.ToString());
            if (ds.Tables[0].Rows.Count > 0)
            {
                isExist = true;
            }
            return isExist;
        }
        #endregion

        #region Arrange Schedules

        /// <summary>
        /// Auto arrange schedules
        /// </summary>
        public void ArrangeSchedules()
        {
            HRTrainningCourseEntities entity = (HRTrainningCourseEntities)CurrentModuleEntity;
            HRTrainningCoursesInfo objTrainningCoursesInfo = new HRTrainningCoursesInfo();
            objTrainningCoursesInfo = (HRTrainningCoursesInfo)entity.MainObject;

            List<SchedulesNode> schedulesNodeList = new List<SchedulesNode>();

            // Get all trainning schedule list
            HRTrainningSchedulesController objTrainningSchedulesController = new HRTrainningSchedulesController();
            DataSet dsAllTrainningSchedules = objTrainningSchedulesController.GetAllTrainningSchedules();
            AllTrainningScheduleList.Clear();
            foreach (DataRow drTrainningSchedule in dsAllTrainningSchedules.Tables[0].Rows)
            {
                HRTrainningSchedulesInfo objTrainningSchedulesInfoItem = new HRTrainningSchedulesInfo();
                objTrainningSchedulesInfoItem = (HRTrainningSchedulesInfo)objTrainningSchedulesController.GetObjectFromDataRow(drTrainningSchedule);
                objTrainningSchedulesInfoItem.HRTrainningScheduleDay = entity.CalculateDate(objTrainningSchedulesInfoItem.HRTranningCourseStartDate,
                                                                                                objTrainningSchedulesInfoItem.HRDayOfWeek);
                AllTrainningScheduleList.Add(objTrainningSchedulesInfoItem);
            }

            // Get trainning schedules list of a trainning course
            List<HRTrainningSchedulesInfo> trainningSchedulesList = new List<HRTrainningSchedulesInfo>();
            DataSet dsTrainningSchedulesOfTrainningCourse = objTrainningSchedulesController.GetTrainningSchedulesByTrainningCourseID(objTrainningCoursesInfo.HRTrainningCourseID);
            foreach (DataRow drTrainningSchedulesOfTrainningCourse in dsTrainningSchedulesOfTrainningCourse.Tables[0].Rows)
            {
                HRTrainningSchedulesInfo objTrainningSchedulesInfoTemp = new HRTrainningSchedulesInfo();
                objTrainningSchedulesInfoTemp = (HRTrainningSchedulesInfo)objTrainningSchedulesController.GetObjectFromDataRow(drTrainningSchedulesOfTrainningCourse);
                objTrainningSchedulesInfoTemp.FK_HREmployeeID = 0;
                objTrainningSchedulesInfoTemp.HRTrainningScheduleDay = entity.CalculateDate(objTrainningCoursesInfo.HRTranningCourseStartDate,
                                                                                                objTrainningSchedulesInfoTemp.HRDayOfWeek);
                trainningSchedulesList.Add(objTrainningSchedulesInfoTemp);
            }
            for (int i = 0; i < entity.HRTrainningSchedulesList.Count; i++)
            {
                schedulesNodeList.Clear();
                foreach (HRTrainningSchedulesInfo objTrainningSchedulesInfoCurrent in trainningSchedulesList)
                {
                    if (objTrainningSchedulesInfoCurrent.FK_HREmployeeID == 0)
                    {
                        List<int> teacherIdList = new List<int>();
                        teacherIdList = GetNumberOfTeacherHasFreeTime(objTrainningSchedulesInfoCurrent);
                        if (teacherIdList.Count > 0)
                        {
                            SchedulesNode node = new SchedulesNode(teacherIdList, objTrainningSchedulesInfoCurrent);
                            schedulesNodeList.Add(node);
                        }
                        else
                        {
                            MessageBox.Show(TrainningCourseLocalizedResources.NoHasTeachersMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return;
                        }
                    }
                }
                HRTrainningSchedulesInfo objTrainningSchedulesInfoMax = SetTrainningTeacherForTrainningSchedules(schedulesNodeList);
                // Update employee id for trainning schedules in list of trainning schedule of a trainning course
                foreach (HRTrainningSchedulesInfo objTrainningSchedulesInfoItem in trainningSchedulesList)
                {
                    if (objTrainningSchedulesInfoItem.FK_HRClassScheduleID == objTrainningSchedulesInfoMax.FK_HRClassScheduleID)
                    {
                        objTrainningSchedulesInfoItem.FK_HREmployeeID = objTrainningSchedulesInfoMax.FK_HREmployeeID;
                    }
                }
                // Update employee id for all trainning schedules in list of trainning schedules of all trainning course
                foreach (HRTrainningSchedulesInfo objTrainningSchedulesInfoItem in AllTrainningScheduleList)
                {
                    if (objTrainningSchedulesInfoItem.FK_HRClassScheduleID == objTrainningSchedulesInfoMax.FK_HRClassScheduleID)
                    {
                        objTrainningSchedulesInfoItem.FK_HREmployeeID = objTrainningSchedulesInfoMax.FK_HREmployeeID;
                    }
                }
            }
            entity.HRTrainningSchedulesList.Invalidate(trainningSchedulesList);
        }

        /// <summary>
        /// Set trainning teacher for a schedules
        /// </summary>
        /// <param name="schedulesNodeList">The list of schedules node</param>
        public HRTrainningSchedulesInfo SetTrainningTeacherForTrainningSchedules(List<SchedulesNode> schedulesNodeList)
        {
            HRTrainningCourseEntities entity = (HRTrainningCourseEntities)CurrentModuleEntity;
            int max = 0;
            int index = 0;
            for (int i = 0; i < schedulesNodeList.Count; i++)
            {
                if (schedulesNodeList[i].TeacherIds.Count > max)
                {
                    max = schedulesNodeList[i].TeacherIds.Count;
                    index = i;
                }
            }
            Random random = new Random();
            int teacherIdsIndex = random.Next(0, schedulesNodeList[index].TeacherIds.Count);
            schedulesNodeList[index].ObjTrainningSchedulesInfo.FK_HREmployeeID = schedulesNodeList[index].TeacherIds[teacherIdsIndex];
            return schedulesNodeList[index].ObjTrainningSchedulesInfo;
        }

        /// <summary>
        /// Get list of teacher has free time for a schedule
        /// </summary>
        /// <param name="objTrainningSchedulesInfo">The schedule</param>
        /// <returns>List of teacher ids</returns>
        public List<int> GetNumberOfTeacherHasFreeTime(HRTrainningSchedulesInfo objTrainningSchedulesInfoCurrent)
        {
            HRTrainningCourseEntities entity = (HRTrainningCourseEntities)CurrentModuleEntity;
            List<int> teacherIds = new List<int>();
            if (entity.HRTrainningEmployeesList.Count > 0)
            {
                foreach (HRTrainningEmployeesInfo objTrainningEmployeesInfo in entity.HRTrainningEmployeesList)
                {
                    int employeeID = objTrainningEmployeesInfo.FK_HREmployeeID;
                    foreach (HRTrainningSchedulesInfo objTrainningSchedulesInfoItem in AllTrainningScheduleList)
                    {
                        if (objTrainningSchedulesInfoItem.FK_HRClassScheduleID == objTrainningSchedulesInfoCurrent.FK_HRClassScheduleID)
                        {
                            teacherIds.Add(employeeID);
                        }
                        else
                        {
                            if (objTrainningSchedulesInfoItem.FK_HREmployeeID == employeeID)
                            {
                                if (IsSameSchedules(objTrainningSchedulesInfoCurrent, objTrainningSchedulesInfoItem))
                                {
                                    if (IsExistTeacher(teacherIds, employeeID))
                                    {
                                        teacherIds.Remove(employeeID);
                                    }
                                    break;
                                }
                            }
                            else
                            {
                                if (!IsExistTeacher(teacherIds, employeeID))
                                {
                                    teacherIds.Add(employeeID);
                                }
                            }
                        }
                    }
                }
            }
            return teacherIds;
        }

        /// <summary>
        /// Check whether exists teacher id in the list of teacher id
        /// </summary>
        /// <param name="teacherIds">The list of teacher id</param>
        /// <param name="teacherId">teacher id is checked</param>
        /// <returns>true if teacherId is exist in list teacherIds</returns>
        public bool IsExistTeacher(List<int> teacherIds, int teacherId)
        {
            foreach (int item in teacherIds)
            {
                if (item == teacherId)
                    return true;
            }
            return false;
        }

        /// <summary>
        /// Check whether same time
        /// </summary>
        /// <param name="sourceFromTime">The source from time</param>
        /// <param name="sourceToTime">The source to time</param>
        /// <param name="desFromTime">The des from time</param>
        /// <param name="desToTime">The des to time</param>
        /// <returns>false if the source time and destime is not same</returns>
        public bool IsSameTime(DateTime sourceFromTime, DateTime sourceToTime, DateTime desFromTime, DateTime desToTime)
        {
            if (desFromTime.Subtract(sourceFromTime).TotalMinutes == 0)
            {
                return true;
            }
            if ((desFromTime.Subtract(sourceFromTime).TotalMinutes < 0) && (desToTime.Subtract(sourceToTime).TotalMinutes >= 0))
            {
                return true;
            }
            if ((desFromTime.Subtract(sourceFromTime).TotalMinutes > 0) && (desToTime.Subtract(sourceToTime).TotalMinutes <= 0))
            {
                return true;
            }
            if ((desFromTime.Subtract(sourceFromTime).TotalMinutes < 0) && (desToTime.Subtract(sourceFromTime).TotalMinutes > 0))
            {
                return true;
            }
            if ((desFromTime.Subtract(sourceFromTime).TotalMinutes > 0) && (desFromTime.Subtract(sourceToTime).TotalMinutes < 0))
            {
                return true;
            }
            return false;
        }
        /// <summary>
        /// Check whether same schedules of two trainning schedules
        /// </summary>
        /// <param name="objTrainningSchedulesInfoSource">trainning schedules source</param>
        /// <param name="objTrainningSchedulesInfoDesk">trainning scheudules des</param>
        /// <returns>True if schedules sources and schedules des is same time</returns>
        public bool IsSameSchedules(HRTrainningSchedulesInfo objTrainningSchedulesInfoSource, HRTrainningSchedulesInfo objTrainningSchedulesInfoDesk)
        {
            if ((int)objTrainningSchedulesInfoDesk.HRTrainningScheduleDay.Subtract(objTrainningSchedulesInfoSource.HRTrainningScheduleDay).TotalDays == 0)
            {
                if (IsSameTime(objTrainningSchedulesInfoSource.HRClassScheduleFromTime,
                                objTrainningSchedulesInfoSource.HRClassScheduleToTime,
                                objTrainningSchedulesInfoDesk.HRClassScheduleFromTime,
                                objTrainningSchedulesInfoDesk.HRClassScheduleToTime))
                {
                    return true;
                }
            }
            return false;
        }
        #endregion

        #region CheckTrainningSchedules
        /// <summary>
        /// Check whether same time of trainning schedules before action save
        /// </summary>
        /// <returns>[True] if have a teacher teaches two or more same schedules</returns>
        public bool IsSameTrainningSchedules()
        {
            HRTrainningCourseEntities entity = (HRTrainningCourseEntities)CurrentModuleEntity;

            if (entity.HRTrainningSchedulesList.Count > 0)
            {
                foreach (HRTrainningSchedulesInfo objTrainningSchedulesInfoCurrent in entity.HRTrainningSchedulesList)
                {
                    objTrainningSchedulesInfoCurrent.HRTrainningScheduleDay = entity.CalculateDate(objTrainningSchedulesInfoCurrent.HRTranningCourseStartDate,
                                                                                                        objTrainningSchedulesInfoCurrent.HRDayOfWeek);
                    // Get all trainning schedule list
                    HRTrainningSchedulesController objTrainningSchedulesController = new HRTrainningSchedulesController();
                    DataSet dsAllTrainningSchedules = objTrainningSchedulesController.GetAllTrainningSchedules();

                    foreach (DataRow drTrainningSchedule in dsAllTrainningSchedules.Tables[0].Rows)
                    {
                        HRTrainningSchedulesInfo objTrainningSchedulesInfoTemplate = new HRTrainningSchedulesInfo();
                        objTrainningSchedulesInfoTemplate = (HRTrainningSchedulesInfo)objTrainningSchedulesController.GetObjectFromDataRow(drTrainningSchedule);
                        objTrainningSchedulesInfoTemplate.HRTrainningScheduleDay = entity.CalculateDate(objTrainningSchedulesInfoTemplate.HRTranningCourseStartDate,
                                                                                                            objTrainningSchedulesInfoTemplate.HRDayOfWeek);
                        if (objTrainningSchedulesInfoCurrent.FK_HRClassScheduleID != objTrainningSchedulesInfoTemplate.FK_HRClassScheduleID)
                        {
                            if (objTrainningSchedulesInfoCurrent.FK_HREmployeeID == objTrainningSchedulesInfoTemplate.FK_HREmployeeID)
                            {
                                if (IsSameSchedules(objTrainningSchedulesInfoCurrent, objTrainningSchedulesInfoTemplate))
                                {
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
            return false;
        }
        #endregion

        #region Invalidate GridControls

        /// <summary>
        /// Invalidate trainning employee grid control to set employee no when user change employee name
        /// </summary>
        /// <param name="employeeID">ID of employee</param>
        public void InvalidateTrainningEmployeeGridControl(int employeeID)
        {
            HRTrainningCourseEntities entity = (HRTrainningCourseEntities)CurrentModuleEntity;
            HREmployeesController objEmployeesController = new HREmployeesController();
            HREmployeesInfo objEmployeesInfo = (HREmployeesInfo)objEmployeesController.GetObjectByID(employeeID);
            HRTrainningEmployeesInfo objTrainningEmployeesInfo = (HRTrainningEmployeesInfo)entity.ModuleObjects[TableName.HRTrainningEmployeesTableName];
            objTrainningEmployeesInfo.HREmployeeNo = objEmployeesInfo.HREmployeeNo;
            objTrainningEmployeesInfo.FK_HREmployeeID = employeeID;
            entity.HRTrainningEmployeesList.ChangeObjectFromList();
        }

        /// <summary>
        /// Check employee is existed before insert employee into trainning employee list
        /// </summary>
        /// <param name="employeeID">ID of employee</param>
        /// <returns>Existing of emloyee in trainning employee list</returns>
        public bool CheckExistEmployeeInGridControl(int employeeID)
        {
            HRTrainningCourseEntities entity = (HRTrainningCourseEntities)CurrentModuleEntity;
            if (entity.HRTrainningEmployeesList.Where(e => e.FK_HREmployeeID == employeeID).FirstOrDefault() != null)
                return true;
            return false;
        }

        #endregion
    }
    #endregion

    public class SchedulesNode
    {
        /// <summary>
        /// Gets or sets list of teacher who has free time
        /// </summary>
        public List<int> TeacherIds { get; set; }
        /// <summary>
        /// Gets or sets the trainning schedules info object
        /// </summary>
        public HRTrainningSchedulesInfo ObjTrainningSchedulesInfo { get; set; }
        public SchedulesNode()
        {
            TeacherIds = new List<int>();
            ObjTrainningSchedulesInfo = new HRTrainningSchedulesInfo();
        }
        public SchedulesNode(List<int> teacherIds, HRTrainningSchedulesInfo objTrainningSchedulesInfo)
            : this()
        {
            TeacherIds = teacherIds;
            BOSUtil.CopyObject(objTrainningSchedulesInfo, ObjTrainningSchedulesInfo);
            ObjTrainningSchedulesInfo.HRClassScheduleFromTime = objTrainningSchedulesInfo.HRClassScheduleFromTime;
            ObjTrainningSchedulesInfo.HRClassScheduleToTime = objTrainningSchedulesInfo.HRClassScheduleToTime;
            ObjTrainningSchedulesInfo.HRDayOfWeek = objTrainningSchedulesInfo.HRDayOfWeek;
            ObjTrainningSchedulesInfo.HRTrainningClassName = objTrainningSchedulesInfo.HRTrainningClassName;
        }
    }
}
