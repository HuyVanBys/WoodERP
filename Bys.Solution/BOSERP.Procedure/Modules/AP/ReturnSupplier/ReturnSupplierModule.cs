using BOSCommon;
using BOSCommon.Constants;
using BOSComponent;
using BOSLib;
using BOSReport;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraReports.UI;
using Localization;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows.Forms;

namespace BOSERP.Modules.ReturnSupplier
{
    #region ReturnSupplierModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ReturnSupplierModule
    //Created Date:Saturday, May 31, 2008
    //-----------------------------------------------------------

    public class ReturnSupplierModule : BaseTransactionModule
    {
        #region Constant for ReturnSupplier
        public const string DocumentEntryGridControlName = "fld_dgcACDocumentEntrys";
        public const string APReturnSupplierItemsGridControlName = "fld_dgcAPReturnSupplierItems";
        public const string SearchBranchLookupEditControlName = "fld_lkeFK_BRBranchID";
        public const string ProductPicturePictureBoxName = "fld_pteAPReturnSupplierItemProductPicture";
        #endregion

        #region Public properties
        public APReturnSupplierItemsGridControl APReturnSupplierItemsGridControl { get; set; }
        public BOSLookupEdit SearchBranchLookupEditControl;
        public List<BRBranchsInfo> BranchList;
        private BOSPictureEdit ProductPicturePictureBox;
        #endregion

        public ReturnSupplierModule()
        {
            Name = "ReturnSupplier";
            CurrentModuleEntity = new ReturnSupplierEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();
            GetCurrentModuleDataViewPermission();
            SearchBranchLookupEditControl = (BOSLookupEdit)Controls[SearchBranchLookupEditControlName];
            if(SearchBranchLookupEditControl != null)
            {
                SearchBranchLookupEditControl.Properties.DataSource = BranchList;
            }

            APReturnSupplierItemsGridControl = (APReturnSupplierItemsGridControl)Controls[APReturnSupplierItemsGridControlName];
            ProductPicturePictureBox = (BOSPictureEdit)Controls[ProductPicturePictureBoxName];
        }

        public override int ActionSave()
        {
            ReturnSupplierEntities entity = (ReturnSupplierEntities)CurrentModuleEntity;
            APReturnSuppliersInfo mainObject = (APReturnSuppliersInfo)CurrentModuleEntity.MainObject;
            entity.ReturnSupplierItemsList.EndCurrentEdit();
            if (string.IsNullOrEmpty(mainObject.APReturnSupplierReceiptType))
            {
                MessageBox.Show("Vui lòng chọn Loại hàng hóa trước khi lưu!",
                                CommonLocalizedResources.MessageBoxDefaultCaption,
                                MessageBoxButtons.OK, MessageBoxIcon.Error);
                return 0;
            }
            foreach (APReturnSupplierItemsInfo item in entity.ReturnSupplierItemsList)
            {
                if (item.APReturnSupplierItemProductQty <= 0)
                {
                    MessageBox.Show(ReturnSupplierLocalizedResources.ErrorCountItems, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return 0;
                }
                if (item.APReturnSupplierItemProductSerialNo == String.Empty)
                {
                    ICPriceCalculationMethodsController objPriceCalculationMethodsController = new ICPriceCalculationMethodsController();
                    if (objPriceCalculationMethodsController.IsSpecificMethodByProductID(item.FK_ICProductID))
                    {
                        MessageBox.Show(ReturnSupplierLocalizedResources.CannotNullPackNo + Environment.NewLine
                                    + item.APReturnSupplierItemProductDesc
                                    , CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return 0;
                    }
                }
                if (item.FK_ICStockID == 0)
                {
                    MessageBox.Show("Vui lòng chọn kho !",
                                      CommonLocalizedResources.MessageBoxDefaultCaption,
                                       MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return 0;
                }

                ICTransactionsController controller = new ICTransactionsController();
                decimal qty = controller.GetInventoryQtyByProductIDAndStockID(item.FK_ICProductID, item.FK_ICStockID, BOSApp.CurrentUsersInfo.ADUserGroupID);
                if (item.APReturnSupplierItemProductQty > qty)
                {
                    MessageBox.Show("Số lượng không được vượt quá số lượng sản phẩm tồn kho hiện có. Vui lòng kiểm tra lại!.",
                                      CommonLocalizedResources.MessageBoxDefaultCaption,
                                       MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return 0;
                }
            }
            UpdateTotalCost();
            return base.ActionSave();
        }

        public override bool ActionComplete()
        {
            if (Toolbar.CurrentObjectID > 0)
            {
                ReturnSupplierEntities entity = (ReturnSupplierEntities)CurrentModuleEntity;
                APReturnSuppliersInfo mainObject = (APReturnSuppliersInfo)CurrentModuleEntity.MainObject;
                if (((APReturnSuppliersInfo)entity.MainObject).APReturnSupplierStatusCombo == ReturnSupplierStatus.Complete.ToString())
                {
                    MessageBox.Show(ReturnSupplierLocalizedResources.CompletedMessager, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return false;
                }
                if (MessageBox.Show(ReturnSupplierLocalizedResources.DoYouWantReturn, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
                {
                    return false;
                }
                entity.ReturnSupplierItemsList.EndCurrentEdit();
                UpdateTotalCost();
                if (entity.ReturnSupplierItemsList.IsInvalidInventoryStockQty())
                {
                    return false;
                }
                base.ActionComplete();
            }
            return false;
        }

        public override void ActionEdit()
        {
            ReturnSupplierEntities entity = (ReturnSupplierEntities)CurrentModuleEntity;
            if (((APReturnSuppliersInfo)entity.MainObject).APReturnSupplierStatusCombo == ReturnSupplierStatus.Complete.ToString())
            {
                MessageBox.Show(ReturnSupplierLocalizedResources.NotEdit, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                DevExpress.XtraBars.BarButtonItem btnEdit = (DevExpress.XtraBars.BarButtonItem)ParentScreen.GetToolbarButton(BaseToolbar.ToolbarButtonEdit);
                if (btnEdit != null)
                    btnEdit.Down = false;
                CurrentModuleEntity.SetPropertyChangeEventLock(false);
                return;
            }
            base.ActionEdit();
        }

        public override void InvalidateToolbar()
        {
            APReturnSuppliersInfo objSaleReturnsInfo = (APReturnSuppliersInfo)CurrentModuleEntity.MainObject;
            if (objSaleReturnsInfo.APReturnSupplierID > 0)
            {
                ParentScreen.SetEnableOfToolbarButton(ToolbarButtons.PostedTransactions, false);
                ParentScreen.SetEnableOfToolbarButton(ToolbarButtons.UnPostedTransactions, false);
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, true);
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, true);
                if (objSaleReturnsInfo.APReturnSupplierStatusCombo == ReturnSupplierStatus.Complete.ToString())
                {
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, false);
                    ParentScreen.SetEnableOfToolbarButton(ToolbarButtons.PostedTransactions,
                        objSaleReturnsInfo.APReturnSupplierPostedStatus != PostedTransactionStatus.Posted.ToString());
                    ParentScreen.SetEnableOfToolbarButton(ToolbarButtons.UnPostedTransactions,
                        objSaleReturnsInfo.APReturnSupplierPostedStatus == PostedTransactionStatus.Posted.ToString());
                }
            }
            base.InvalidateToolbar();
        }

        public override void Invalidate(int iObjectID)
        {
            APReturnSuppliersController objReturnSuppliersController = new APReturnSuppliersController();
            APReturnSuppliersInfo mainObject = (APReturnSuppliersInfo)objReturnSuppliersController.GetObjectByID(iObjectID);
            ReturnSupplierEntities entity = (ReturnSupplierEntities)CurrentModuleEntity;
            if (mainObject.APReturnSupplierTypeCombo == ReturnSupplierType.FromReceipt.ToString())
            {
                AllowEditReturnSupplierItemGridControl(false);
            }
            else
            {
                AllowEditReturnSupplierItemGridControl(true);
            }
            if(APReturnSupplierItemsGridControl != null)
            {
                APReturnSupplierItemsGridControl.LoadGridViewByProductType(mainObject);
            }
            base.Invalidate(iObjectID);
            bool isWoodType = BOSApp.IsWoodTypeDocument(mainObject.APReturnSupplierReceiptType, entity.ReturnSupplierItemsList.FirstOrDefault());
            ChangeDisplayColumnByWoodType(entity.ReturnSupplierItemsList.GridControl, isWoodType);
        }

        public override void ActionNew()
        {
            base.ActionNew();
            AllowEditReturnSupplierItemGridControl(true);
        }

        public void ActionNewFromReceipt()
        {
            base.ActionNew();

            ReturnSupplierEntities entity = (ReturnSupplierEntities)CurrentModuleEntity;
            APReturnSuppliersInfo mainObject = (APReturnSuppliersInfo)entity.MainObject;
            mainObject.APReturnSupplierTypeCombo = ReturnSupplierType.FromReceipt.ToString();
            String searchCriteria = String.Format("ICReceiptStatus = '{0}'", ReceiptStatus.Complete.ToString());
            ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
            List<ICReceiptItemsInfo> receiptItemsList = objReceiptItemsController.GetReceiptItemForReturnSuplier(mainObject.FK_ACObjectID, mainObject.APObjectType, BOSApp.GetCurrentServerDate().AddDays(-7), BOSApp.GetCurrentServerDate());
            guiChooseReceiptItems guifind = new guiChooseReceiptItems(receiptItemsList);
            guifind.Module = this;
            guifind.ShowDialog();
            if (guifind.DialogResult != DialogResult.OK)
            {
                ActionCancel();
                return;
            }
            List<ICReceiptItemsInfo> receiptItemList = (List<ICReceiptItemsInfo>)guifind.SelectedObjects;
            ICReceiptItemsInfo objReceiptItemsInfo = receiptItemList.FirstOrDefault();

            ICReceiptsController objICReceiptsController = new ICReceiptsController();
            ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)objICReceiptsController.GetObjectByID(objReceiptItemsInfo.FK_ICReceiptID);
            if (objReceiptsInfo == null)
                objReceiptsInfo = new ICReceiptsInfo();

            mainObject.APReturnSupplierTypeCombo = ReturnSupplierType.FromReceipt.ToString();
            mainObject.APReturnSupplierReference = objReceiptsInfo.ICReceiptNo;
            mainObject.FK_ACObjectID = objReceiptsInfo.FK_ACAssObjectID;
            mainObject.APObjectType = objReceiptsInfo.ICAssObjectType;
            mainObject.ACObjectAccessKey = objReceiptsInfo.FK_ACAssObjectID + ";" + objReceiptsInfo.ICAssObjectType;
            mainObject.ACObjectName = objReceiptsInfo.ACAssObjectName;
            mainObject.FK_GECurrencyID = objReceiptsInfo.FK_GECurrencyID;
            mainObject.APReturnSupplierExchangeRate = objReceiptsInfo.ICReceiptExchangeRate;
            mainObject.APReturnSupplierDesc = ReturnSupplierLocalizedResources.DefaultDesc + objReceiptsInfo.ICReceiptDesc;
            mainObject.FK_APPurchaseContractID = objReceiptsInfo.FK_APPurchaseContractID;
            mainObject.APReturnSupplierReceiptType = objReceiptsInfo.ICReceiptReceiptType;
            mainObject.APReturnSupplierTaxPercent = objReceiptsInfo.ICReceiptTaxPercent;
            mainObject.APReturnSupplierDiscountPerCent = objReceiptsInfo.ICReceiptDiscountPerCent;

            //Thông tin VAT
            APInvoiceInsController objInvoiceInsController = new APInvoiceInsController();
            if (objReceiptItemsInfo.FK_APInvoiceInID > 0)
            {
                APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)objInvoiceInsController.GetObjectByID(objReceiptItemsInfo.FK_APInvoiceInID);
                if (objInvoiceInsInfo != null)
                {
                    mainObject.APInvoiceInSupplierNo = objInvoiceInsInfo.APInvoiceInSupplierNo;
                    mainObject.APInvoiceInVATDate = objInvoiceInsInfo.APInvoiceInVATDate;
                }
            }

            ICInventoryStocksController objInventoryStocksController = new ICInventoryStocksController();
            List<APReturnSupplierItemsInfo> returnSupplierList = new List<APReturnSupplierItemsInfo>();
            APReturnSupplierItemsInfo objReturnSupplierItemsInfo = new APReturnSupplierItemsInfo();
            receiptItemList.ForEach(o =>
            {
                objReturnSupplierItemsInfo = new APReturnSupplierItemsInfo();
                BOSUtil.CopyObject(o, objReturnSupplierItemsInfo);
                objReturnSupplierItemsInfo.FK_ICMeasureUnitID = o.FK_ICMeasureUnitID;
                objReturnSupplierItemsInfo.FK_ICReciptID = o.FK_ICReceiptID;
                objReturnSupplierItemsInfo.FK_ICReciptItemID = o.Id;
                objReturnSupplierItemsInfo.FK_ICStockID = o.FK_ICStockID;
                objReturnSupplierItemsInfo.APReturnSupplierItemProductQty = o.ICReceiptItemProductQty;
                objReturnSupplierItemsInfo.APReturnSupplierItemWoodQty = o.ICReceiptItemWoodQty;
                objReturnSupplierItemsInfo.APReturnSupplierItemProductFactor = o.ICReceiptItemProductFactor;
                objReturnSupplierItemsInfo.APReturnSupplierItemProductDiscount = o.ICReceiptItemProductDiscount;
                objReturnSupplierItemsInfo.APReturnSupplierItemDiscountAmount = o.ICReceiptItemDiscountAmount;
                entity.SetProductCostByProductUnitCost(objReturnSupplierItemsInfo);
                returnSupplierList.Add(objReturnSupplierItemsInfo);
            });
            entity.ReturnSupplierItemsList.Invalidate(returnSupplierList);
            entity.UpdateMainObjectBindingSource();
            UpdateTotalCost();
            if(APReturnSupplierItemsGridControl != null)
            {
                APReturnSupplierItemsGridControl.LoadGridViewByProductType(mainObject);
            }
            ChangeDisplayAndDataItemListGridView();
            AllowEditReturnSupplierItemGridControl(false);
        }

        public void UpdateTotalCost()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                ReturnSupplierEntities entity = (ReturnSupplierEntities)CurrentModuleEntity;
                entity.UpdateTotalCost();
                UpdateDocumentEntries();
            }
        }

        public void ChangeACEInvoiceTypeNo(int invoiceID)
        {
            ReturnSupplierEntities entity = (ReturnSupplierEntities)CurrentModuleEntity;
            APReturnSuppliersInfo objReturnSuppliersInfo = (APReturnSuppliersInfo)entity.MainObject;
            ACEInvoiceTypesController objEInvoiceTypesController = new ACEInvoiceTypesController();
            ACEInvoiceTypesInfo objEInvoiceTypesInfo = (ACEInvoiceTypesInfo)objEInvoiceTypesController.GetObjectByID(invoiceID);
            if (objEInvoiceTypesInfo != null)
            {
                objReturnSuppliersInfo.APReturnSupplierVATFormNo = objEInvoiceTypesInfo.ACEInvoiceTypeTemplateCode;
                objReturnSuppliersInfo.APReturnSupplierVATSymbol = objEInvoiceTypesInfo.ACEInvoiceTypeSeries;
            }
            else
            {
                objReturnSuppliersInfo.APReturnSupplierVATFormNo = string.Empty;
                objReturnSuppliersInfo.APReturnSupplierVATSymbol = string.Empty;
            }
            entity.UpdateMainObjectBindingSource();
        }

        public void ChangeCurrency(int currencyID)
        {
            APReturnSuppliersInfo mainObject = (APReturnSuppliersInfo)CurrentModuleEntity.MainObject;
            mainObject.FK_GECurrencyID = currencyID;
            GECurrencyExchangeRatesController objCurrencyExchangeRatesController = new GECurrencyExchangeRatesController();
            decimal exchangeRateValue = objCurrencyExchangeRatesController.GetCurrencyExchangeRateByCurrencyIDAndDate(currencyID, mainObject.APReturnSupplierDate);
            if (exchangeRateValue > 0)
            {
                mainObject.APReturnSupplierExchangeRate = exchangeRateValue;
            }
            CurrentModuleEntity.UpdateMainObjectBindingSource();
        }

        public void AllowEditReturnSupplierItemGridControl(bool isAllow)
        {
            GridView gridView = (GridView)APReturnSupplierItemsGridControl.MainView;
            if(gridView != null)
            {
                foreach (GridColumn column in gridView.Columns)
                {
                    if (column.FieldName == "FK_ICStockID"
                            || column.FieldName == "FK_ICProductSerieID"
                            || column.FieldName == "APReturnSupplierItemProductSerialNo")
                    {
                        column.OptionsColumn.AllowEdit = isAllow;
                    }
                    else if (column.FieldName == "APReturnSupplierItemLotNo")
                    {
                        column.OptionsColumn.AllowEdit = false;
                    }   
                }
            }
        }

        public void ChangeSaleReturnProductType(string returnSupplierReceiptType)
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                APReturnSuppliersInfo mainObject = (APReturnSuppliersInfo)CurrentModuleEntity.MainObject;
                mainObject.APReturnSupplierReceiptType = returnSupplierReceiptType;
                CurrentModuleEntity.UpdateMainObjectBindingSource();
                ChangeDisplayAndDataItemListGridView();
            }
        }

        public void ChangeDisplayAndDataItemListGridView()
        {
            ReturnSupplierEntities entity = (ReturnSupplierEntities)CurrentModuleEntity;
            APReturnSuppliersInfo mainObject = (APReturnSuppliersInfo)entity.MainObject;
            bool isWoodType = BOSApp.IsWoodTypeDocument(mainObject.APReturnSupplierReceiptType, entity.ReturnSupplierItemsList.FirstOrDefault());
            ChangeDisplayColumnByWoodType(entity.ReturnSupplierItemsList.GridControl, isWoodType);
            if (mainObject.APReturnSupplierTypeCombo != ReturnSupplierType.FromReceipt.ToString())
            {
                entity.ReturnSupplierItemsList.ForEach(o1 =>
                {
                    o1.APReturnSupplierItemLotNo = string.Empty;
                    o1.APReturnSupplierItemProductSerialNo = string.Empty;
                    o1.FK_ICProductSerieID = 0;
                });
            }
            entity.ReturnSupplierItemsList.GridControl?.RefreshDataSource();
        }

        public void UpdateLotNoItem(APReturnSupplierItemsInfo objReturnSupplierItemsInfo)
        {
            ReturnSupplierEntities entity = (ReturnSupplierEntities)CurrentModuleEntity;
            APReturnSuppliersInfo mainObject = (APReturnSuppliersInfo)entity.MainObject;
            if (BOSApp.IsWoodTypeDocument(mainObject.APReturnSupplierReceiptType, entity.ReturnSupplierItemsList.FirstOrDefault()) && mainObject.APReturnSupplierTypeCombo != ReturnSupplierType.FromReceipt.ToString())
            {
                ICProductSeriesController objProductSeriesController = new ICProductSeriesController();
                ICProductSeriesInfo objProductSeriesInfo = (ICProductSeriesInfo)objProductSeriesController.GetObjectByID(objReturnSupplierItemsInfo.FK_ICProductSerieID);
                if (objProductSeriesInfo != null)
                {
                    objReturnSupplierItemsInfo.APReturnSupplierItemLotNo = objProductSeriesInfo.ICProductSerieLotNo;
                }
                else
                {
                    objReturnSupplierItemsInfo.APReturnSupplierItemLotNo = string.Empty;
                }
            }
        }

        #region Local
        public void AddItemToReturnSupplierItemsList()
        {
            if (Toolbar.IsNullOrNoneAction())
                return;
            ReturnSupplierEntities entity = (ReturnSupplierEntities)CurrentModuleEntity;
            APReturnSupplierItemsInfo objAPReturnSupplierItemsInfo = (APReturnSupplierItemsInfo)entity.ModuleObjects[TableName.APReturnSupplierItemsTableName];
            ICProductsController controller = new ICProductsController();
            ICProductsInfo objProductsInfo;
            if (objAPReturnSupplierItemsInfo.FK_ICProductID > 0)
            {
                objProductsInfo = (ICProductsInfo)controller.GetObjectByID(objAPReturnSupplierItemsInfo.FK_ICProductID);
                entity.SetDefaultValuesFromProduct(objAPReturnSupplierItemsInfo.FK_ICProductID);
                objAPReturnSupplierItemsInfo.FK_ICMeasureUnitID = objProductsInfo.FK_ICProductBasicUnitID;
                entity.SetProductCostByProductUnitCost();
                entity.ReturnSupplierItemsList.AddObjectToList();
                UpdateTotalCost();
                ChangeDisplayAndDataItemListGridView();
                entity.ReturnSupplierItemsList.GridControl?.RefreshDataSource();
            }
        }

        public void ChangeItemFromReturnSupplierItemsList()
        {
            ReturnSupplierEntities entity = (ReturnSupplierEntities)CurrentModuleEntity;
            APReturnSupplierItemsInfo objAPReturnSupplierItemsInfo = (APReturnSupplierItemsInfo)entity.ModuleObjects[TableName.APReturnSupplierItemsTableName];
            entity.SetProductCostByProductUnitCost();
            entity.ReturnSupplierItemsList.ChangeObjectFromList();
            UpdateTotalCost();
        }

        public void DeleteItemFromReturnSupplierItemsList()
        {
            ReturnSupplierEntities entity = (ReturnSupplierEntities)CurrentModuleEntity;
            entity.ReturnSupplierItemsList.RemoveSelectedRowObjectFromList();
            UpdateTotalCost();
        }

        public void ChangeFee()
        {
            UpdateTotalCost();
        }
        #endregion

        #region Accounting
        public void ActionPosted()
        {
            if (!CheckLock()) return;
            ReturnSupplierEntities entity = (ReturnSupplierEntities)CurrentModuleEntity;
            APReturnSuppliersInfo mainObject = (APReturnSuppliersInfo)entity.MainObject;
            if (entity.ReturnSupplierItemsList.IsInvalidInventory(TransactionUtil.cstInventoryShipment))
                return;

            entity.SetPropertyChangeEventLock(false);
            mainObject.APReturnSupplierPostedStatus = PostedTransactionStatus.Posted.ToString();
            string tableName = mainObject.ToString().Replace("BOSERP.", string.Empty).Replace("Info", string.Empty);
            GLHelper.UpdatePostedStatus(this.Name, tableName, mainObject.APReturnSupplierID, PostedTransactionStatus.Posted.ToString());
            entity.SetPropertyChangeEventLock(true);
            GLHelper.PostedTransactions(this.Name, mainObject.APReturnSupplierID, ModulePostingType.Stock, ModulePostingType.Accounting, ModulePostingType.InvoiceInTrans);
            InvalidateToolbar();
        }

        public void ActionUnPosted()
        {
            if (!CheckLock()) return;
            ReturnSupplierEntities entity = (ReturnSupplierEntities)CurrentModuleEntity;
            APReturnSuppliersInfo mainObject = (APReturnSuppliersInfo)entity.MainObject;
            entity.SetPropertyChangeEventLock(false);
            mainObject.APReturnSupplierPostedStatus = PostedTransactionStatus.UnPosted.ToString();
            string tableName = mainObject.ToString().Replace("BOSERP.", string.Empty).Replace("Info", string.Empty);
            GLHelper.UpdatePostedStatus(this.Name, tableName, mainObject.APReturnSupplierID, PostedTransactionStatus.UnPosted.ToString());
            entity.SetPropertyChangeEventLock(true);
            GLHelper.UnPostedTransactions(this.Name, mainObject.APReturnSupplierID, ModulePostingType.Stock, ModulePostingType.Accounting, ModulePostingType.InvoiceInTrans);
            InvalidateToolbar();
        }

        public override void ModuleAfterCompleted()
        {
            ReturnSupplierEntities entity = (ReturnSupplierEntities)CurrentModuleEntity;
            APReturnSuppliersInfo mainObject = (APReturnSuppliersInfo)entity.MainObject;
            entity.SetPropertyChangeEventLock(false);
            mainObject.APReturnSupplierPostedStatus = PostedTransactionStatus.Posted.ToString();
            entity.UpdateMainObject();
            entity.SetPropertyChangeEventLock(true);
            GLHelper.PostedTransactions(this.Name, mainObject.APReturnSupplierID, ModulePostingType.Stock, ModulePostingType.Accounting, ModulePostingType.InvoiceInTrans);
            base.ModuleAfterCompleted();
        }

        public virtual void ChangeItemMeasureUnit(APReturnSupplierItemsInfo item)
        {
            ICProductMeasureUnitsController controller = new ICProductMeasureUnitsController();
            ICProductMeasureUnitsInfo measureUnit = controller.GetProductMeasureUnitByProductIDAndMeasureUnitID(item.FK_ICProductID, item.FK_ICMeasureUnitID);
            item.APReturnSupplierItemProductFactor = (measureUnit != null && measureUnit.ICProductMeasureUnitFactor > 0)
                                                ? measureUnit.ICProductMeasureUnitFactor
                                                : 1;

            ReturnSupplierEntities entity = (ReturnSupplierEntities)CurrentModuleEntity;
            entity.SetProductCostByProductUnitCost(item);
            entity.ReturnSupplierItemsList.GridControl?.RefreshDataSource();
        }
        #endregion

        #region ActionPrint
        public override void ActionPrint()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                PrintShipment(Toolbar.CurrentObjectID);
            }
        }

        public static void PrintShipment(int shipmentID)
        {
            RPRetrunSupplier report = new RPRetrunSupplier();
            InitShipmentReport(report, shipmentID);
            guiReportPreview viewer = new guiReportPreview(report);
            viewer.Show();
        }

        private static void InitShipmentReport(RPRetrunSupplier report, int shipmentID)
        {
            BRBranchsController objBranchsController = new BRBranchsController();
            BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            SetDefaultCurrentBranchAndTitle(report, BOSApp.CurrentCompanyInfo.FK_BRBranchID);

            APReturnSuppliersController objShipmentsController = new APReturnSuppliersController();
            APReturnSuppliersInfo shipment = (APReturnSuppliersInfo)objShipmentsController.GetObjectByID(shipmentID);
            ADReportsController objReportsController = new ADReportsController();
            DataSet ds = objReportsController.GetDSReturnSupplierItemsByReturnSupplierID(shipmentID);
            report.DataSource = ds;
        }

        public static void SetDefaultCurrentBranchAndTitle(XtraReport report, int branchID)
        {
            CSCompanysController objCompanysController = new CSCompanysController();
            CSCompanysInfo objCompanyInfo = (CSCompanysInfo)objCompanysController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);

            if (objCompanyInfo != null)
            {

                XRTableCell tablecell = (XRTableCell)report.Bands[BandKind.ReportHeader].Controls["xrTbcompany"].Controls["xrtbrThue"].Controls["xr_tbcThue"];
                if (tablecell != null)
                {
                    tablecell.Text += objCompanyInfo.CSCompanyTaxNumber;
                }
                tablecell = (XRTableCell)report.Bands[BandKind.ReportHeader].Controls["xrTbcompany"].Controls["xrtbrdchd"].Controls["xrtbcdiachihoadon"];
                if (tablecell != null)
                {
                    tablecell.Text += objCompanyInfo.CSCompanyAddressLine1;
                }
                tablecell = (XRTableCell)report.Bands[BandKind.ReportHeader].Controls["xrTbcompany"].Controls["xrtbrAddress"].Controls["xrtbcdiachinhamay"];
                if (tablecell != null)
                {
                    tablecell.Text += objCompanyInfo.CSCompanyAddressLine2;
                }

                tablecell = (XRTableCell)report.Bands[BandKind.ReportHeader].Controls["xrTbcompany"].Controls["xrtbrWeb"].Controls["xr_tbcWebsite"];
                if (tablecell != null)
                {
                    tablecell.Text += objCompanyInfo.CSCompanyWebsite;
                }

                tablecell = (XRTableCell)report.Bands[BandKind.ReportHeader].Controls["xrTbcompany"].Controls["xrtbrEmail"].Controls["xr_tbcEmail"];
                if (tablecell != null)
                {
                    tablecell.Text += objCompanyInfo.CSCompanyEmail;
                }
                tablecell = (XRTableCell)report.Bands[BandKind.ReportHeader].Controls["xrTbcompany"].Controls["xrtbrCellphone"].Controls["xr_tbcCellphone"];
                if (tablecell != null)
                {
                    tablecell.Text = objCompanyInfo.CSCompanyCellPhone;
                }

                tablecell = (XRTableCell)report.Bands[BandKind.ReportHeader].Controls["xrTbcompany"].Controls["xrtbrCompanyphone"].Controls["xr_tbcCompanyphone"];
                if (tablecell != null)
                {
                    tablecell.Text += objCompanyInfo.CSCompanyPhone;
                }
                tablecell = (XRTableCell)report.Bands[BandKind.ReportHeader].Controls["xrTbcompany"].Controls[0].Controls[0];
                if (tablecell != null)
                {
                    tablecell.Text = objCompanyInfo.CSCompanyDesc;
                }

            }
        }
        #endregion

        public void ChangeItemProductUnitCost(APReturnSupplierItemsInfo item)
        {
            ReturnSupplierEntities entity = (ReturnSupplierEntities)CurrentModuleEntity;
            ICInventoryStocksController objInventoryStocksController = new ICInventoryStocksController();
            ICInventoryStocksInfo objInventoryStocksInfo = objInventoryStocksController.GetInventoryStockByStockIDAndProductIDAndSerieID(item.FK_ICStockID, item.FK_ICProductID, item.FK_ICProductSerieID);

            item.APReturnSupplierItemWoodQty = objInventoryStocksInfo != null && !string.IsNullOrEmpty(item.APReturnSupplierItemProductSerialNo)
                                            ? objInventoryStocksInfo.ICInventoryStockWoodQuantity : 0;
        }
        public override void ChangeDisplayColumnByWoodType(BOSGridControl gridControl, bool isWoodType)
        {
            base.ChangeDisplayColumnByWoodType(gridControl, isWoodType);
            if (gridControl == null)
                return;
            GridView gridView = (GridView)gridControl.MainView;
            if (gridView == null)
                return;
            GridColumn column1 = gridView.Columns["APReturnSupplierItemProductQty"];
            GridColumn column = gridView.Columns["APReturnSupplierItemProductExchangeQty"];
            if (isWoodType)
            {
                SetColumnFormat(column1, "n5");
                SetColumnFormat(column, "n5");
            }
            else
            {
                SetColumnFormat(column1, "n4");
                SetColumnFormat(column, "n4");
            }
        }
        public void SetColumnFormat(GridColumn column, string formatType)
        {
            DevExpress.XtraEditors.Repository.RepositoryItem rep = column.ColumnEdit;

            DevExpress.XtraEditors.Repository.RepositoryItemTextEdit repText = (DevExpress.XtraEditors.Repository.RepositoryItemTextEdit)rep;

            repText.Mask.EditMask = formatType;
            repText.Mask.UseMaskAsDisplayFormat = true;

            repText.DisplayFormat.FormatString = formatType;
        }

        public void GetCurrentModuleDataViewPermission()
        {
            CurrentModuleDataViewPermissionList = BOSApp.CurrentADDataViewPermissionList.Where(i => i.STModuleName == Name && i.ADDataViewPermissionType == ADDataViewPermissionType.Module).ToList();

            List<int> branchIDList = new List<int>();
            foreach (ADDataViewPermissionsInfo dataViewPermissionsInfo in CurrentModuleDataViewPermissionList)
            {
                branchIDList.Add(dataViewPermissionsInfo.FK_BRBranchID);
            }

            if (branchIDList.Count == 0)
            {
                BranchList = new List<BRBranchsInfo>();
            }
            else
            {
                BRBranchsController objBranchsController = new BRBranchsController();
                List<BRBranchsInfo> branchList = objBranchsController.GetAllBranches();

                BranchList = branchList.Where(i => branchIDList.IndexOf(i.BRBranchID) > -1).ToList();
            }
        }

        protected override DataSet GetSearchData(ref string searchQuery)
        {
            APReturnSuppliersController objReturnSuppliersController = new APReturnSuppliersController();
            APReturnSuppliersInfo searchObject = (APReturnSuppliersInfo)CurrentModuleEntity.SearchObject;

            DataSet ds;
            if (SearchBranchLookupEditControl.EditValue.ToString() == "" || SearchBranchLookupEditControl.EditValue.ToString() == "0")
            {
                if (BranchList.Count == 0)
                {
                    ds = objReturnSuppliersController.GetDataSetByID(-1);
                }
                else
                {
                    ds = objReturnSuppliersController.GetReturnSupplierListDataSetByListOfBranchID(searchObject.APReturnSupplierNo,
                                                                            searchObject.FK_APSupplierID,
                                                                            searchObject.FK_BRBranchID,
                                                                            searchObject.FK_HREmployeeID,
                                                                            searchObject.ReturnSupplierFromDate,
                                                                            searchObject.ReturnSupplierToDate,
                                                                            BranchList);
                }
            }
            else
            {
                ds = objReturnSuppliersController.GetReturnSupplierListDataSet(searchObject.APReturnSupplierNo,
                                                            searchObject.FK_APSupplierID,
                                                            searchObject.FK_BRBranchID,
                                                            searchObject.FK_HREmployeeID,
                                                            searchObject.ReturnSupplierFromDate,
                                                            searchObject.ReturnSupplierToDate);
            }

            return ds;
        }

        public void InitProductPictureImage(int productID)
        {
            if (productID > 0 && ProductPicturePictureBox != null)
            {
                ProductPicturePictureBox.Image = BOSApp.GetProductPictureImageByProductID(productID);
                ProductPicturePictureBox.Properties.SizeMode = DevExpress.XtraEditors.Controls.PictureSizeMode.Zoom;
            }
        }
    }
    #endregion
}
