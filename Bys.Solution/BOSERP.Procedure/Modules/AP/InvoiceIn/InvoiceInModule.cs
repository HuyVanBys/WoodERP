using BOSCommon;
using BOSCommon.Constants;
using BOSComponent;
using BOSERP.Utilities;
using BOSLib;
using BOSReport;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraReports.UI;
using Localization;
using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;

namespace BOSERP.Modules.InvoiceIn
{
    #region InvoiceInModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:InvoiceInModule
    //Created Date:Thursday, May 29, 2008
    //-----------------------------------------------------------

    public class InvoiceInModule : BaseTransactionModule
    {
        #region Constants
        public const string NewNo = "***NEW***";
        public const string DocumentEntryGridControlName = "fld_dgcACDocumentEntrys";
        public const string SearchBranchLookupEditControlName = "fld_lkeFK_BRBranchID1";
        public const string InvoiceInItemGridControlName = "fld_dgcAPInvoiceInItems";
        public const string ProductItemLookUpEditName = "fld_lkeFK_ICProductAttributeID";
        public const string APInvoiceInLogListNoControlName = "fld_txtAPInvoiceInLogListNo";
        public const string APInvoiceInTotalQuantityControlName = "fld_txtAPInvoiceInTotalQuantity";
        public const string APInvoiceInPackingListControlName = "fld_txtAPInvoiceInPackingList";
        public const string APInvoiceInBillOfLandingControlName = "fld_txtAPInvoiceInBillOfLanding";
        public const string GECountryIDControlName = "fld_lkeFK_GECountryID";
        public const string APInvoiceInChannelLookUpEditName = "fld_lkeAPInvoiceInChannel";
        public const string InvoiceInContractDateEditName = "fld_dteAPInvoiceInContractDate";
        public const string InvoiceInContractNoTextBoxName = "fld_txtAPInvoiceInContractNo";
        public const string ProductPicturePictureBoxName = "fld_pteAPInvoiceInItemProductPicture";
        #endregion

        #region Public Properties
        public BOSLookupEdit SearchBranchLookupEditControl;
        public List<ADDataViewPermissionsInfo> CurrentModuleDataViewPermissionList;
        public List<BRBranchsInfo> BranchList;
        public BOSTextBox APInvoiceInLogListNoControl;
        public BOSTextBox APInvoiceInTotalQuantityControl;
        public BOSTextBox APInvoiceInPackingListControl;
        public BOSTextBox APInvoiceInBillOfLandingControl;
        public BOSLookupEdit GECountryIDControl;
        APInvoiceInItemsGridControl InvoiceInItemGridControl;
        BOSLookupEdit ProductItemLookUpEdit;
        BOSLookupEdit APInvoiceInChannelLookUpEdit;
        BOSDateEdit InvoiceInContractDateEdit;
        BOSTextBox InvoiceInContractNoTextBox;
        private BOSPictureEdit ProductPicturePictureBox;
        #endregion
        //Boolean isFromPurchaseOrder = false;
        //Boolean IsFromPurchaseOrderServiceHinterLand = false;
        public InvoiceInModule()
        {
            Name = ModuleName.InvoiceIn;
            CurrentModuleEntity = new InvoiceInEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();

            StartGettingInventoryThread();
            GetCurrentModuleDataViewPermission();
            SearchBranchLookupEditControl = (BOSLookupEdit)Controls[SearchBranchLookupEditControlName];
            SearchBranchLookupEditControl.Properties.DataSource = BranchList;
            //isFromPurchaseOrder = false;

            APInvoiceInLogListNoControl = (BOSTextBox)Controls[APInvoiceInLogListNoControlName];
            APInvoiceInTotalQuantityControl = (BOSTextBox)Controls[APInvoiceInTotalQuantityControlName];
            APInvoiceInPackingListControl = (BOSTextBox)Controls[APInvoiceInPackingListControlName];
            APInvoiceInBillOfLandingControl = (BOSTextBox)Controls[APInvoiceInBillOfLandingControlName];
            GECountryIDControl = (BOSLookupEdit)Controls[GECountryIDControlName];
            InvoiceInItemGridControl = (APInvoiceInItemsGridControl)Controls[InvoiceInItemGridControlName];
            ProductItemLookUpEdit = (BOSLookupEdit)Controls[ProductItemLookUpEditName];
            APInvoiceInChannelLookUpEdit = (BOSLookupEdit)Controls[APInvoiceInChannelLookUpEditName];
            ProductPicturePictureBox = (BOSPictureEdit)Controls[ProductPicturePictureBoxName];

            InvoiceInContractDateEdit = (BOSDateEdit)Controls[InvoiceInContractDateEditName];
            if (InvoiceInContractDateEdit != null)
            {
                InvoiceInContractDateEdit.Enabled = true;
                InvoiceInContractDateEdit.Properties.ReadOnly = true;
            }
            InvoiceInContractNoTextBox = (BOSTextBox)Controls[InvoiceInContractNoTextBoxName];
            if (InvoiceInContractNoTextBox != null)
            {
                InvoiceInContractNoTextBox.Enabled = true;
                InvoiceInContractNoTextBox.Properties.ReadOnly = true;
            }
        }
        //TNDLoc [ADD] [23/11/2015] [Enable/Disable Control By InvoiceIn Type],START
        public void EnableInvoiceInProductControls(bool isReadOnly)
        {
            APInvoiceInLogListNoControl.Properties.ReadOnly = isReadOnly;
            APInvoiceInTotalQuantityControl.Properties.ReadOnly = isReadOnly;
            APInvoiceInPackingListControl.Properties.ReadOnly = isReadOnly;
            APInvoiceInBillOfLandingControl.Properties.ReadOnly = isReadOnly;
            GECountryIDControl.Properties.ReadOnly = isReadOnly;
            Color color = Color.FromArgb(255, 255, 255);
            APInvoiceInLogListNoControl.BackColor = color;
            APInvoiceInTotalQuantityControl.BackColor = color;
            APInvoiceInPackingListControl.BackColor = color;
            APInvoiceInBillOfLandingControl.BackColor = color;
            GECountryIDControl.BackColor = color;
        }

        public override void Invalidate(int iObjectID)
        {
            base.Invalidate(iObjectID);
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)entity.MainObject;
            if (objInvoiceInsInfo != null)
            {
                EnableInvoiceInProductControls((objInvoiceInsInfo.APInvoiceInChannel == InvoiceInChannel.HinterLand.ToString()));
            }
            ChangeDisplayAndDataItemListGridView();
            ChangeColumnEditAbleGridViewByActionCreateFrom();
            //IsCreateFromPurchaseReceipt = false;
        }
        //TNDLoc [ADD] [23/11/2015] [Enable/Disable Control By InvoiceIn Type],END
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
        public void GetCurrentModuleDataViewPermission()
        {
            CurrentModuleDataViewPermissionList = BOSApp.CurrentADDataViewPermissionList.Where(i => i.STModuleName == Name && i.ADDataViewPermissionType == ADDataViewPermissionType.Module).ToList();

            List<int> branchIDList = new List<int>();
            foreach (ADDataViewPermissionsInfo dataViewPermissionsInfo in CurrentModuleDataViewPermissionList)
            {
                branchIDList.Add(dataViewPermissionsInfo.FK_BRBranchID);
            }

            if (branchIDList.Count == 0)
            {
                BranchList = new List<BRBranchsInfo>();
            }
            else
            {
                BRBranchsController objBranchsController = new BRBranchsController();
                List<BRBranchsInfo> branchList = objBranchsController.GetAllBranches();

                BranchList = branchList.Where(i => branchIDList.IndexOf(i.BRBranchID) > -1).ToList();
            }
        }
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], END

        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
        protected override DataSet GetSearchData(ref string searchQuery)
        {
            APInvoiceInsController objInvoiceInsController = new APInvoiceInsController();
            APInvoiceInsInfo searchObject = (APInvoiceInsInfo)CurrentModuleEntity.SearchObject;

            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByAccessKey(searchObject.ACAssObjectAccessKey);

            DataSet ds;
            if (SearchBranchLookupEditControl.EditValue.ToString() == "" || SearchBranchLookupEditControl.EditValue.ToString() == "0")
            {
                if (BranchList.Count == 0)
                {
                    ds = objInvoiceInsController.GetDataSetByID(-1);
                }
                else
                {
                    ds = objInvoiceInsController.GetInvoiceInListByListOfBranchID(
                                                                            searchObject.APInvoiceInNo,
                                                                            searchObject.APInvoiceInSupplierNo,
                                                                            objObjectsInfo.ACObjectID,
                                                                            objObjectsInfo.ACObjectType,
                                                                            searchObject.FK_HREmployeeID,
                                                                            searchObject.FK_BRBranchID,
                                                                            searchObject.InvoiceInDateFrom,
                                                                            searchObject.InvoiceInDateTo,
                                                                            BranchList);
                }
            }
            else
            {
                ds = objInvoiceInsController.GetInvoiceInListByBranchID(
                                                                            searchObject.APInvoiceInNo,
                                                                            searchObject.APInvoiceInSupplierNo,
                                                                            objObjectsInfo.ACObjectID,
                                                                            objObjectsInfo.ACObjectType,
                                                                            searchObject.FK_HREmployeeID,
                                                                            searchObject.FK_BRBranchID,
                                                                            searchObject.InvoiceInDateFrom,
                                                                            searchObject.InvoiceInDateTo);
            }
            return ds;
        }
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], END
        public override void ActionNew()
        {
            this.NewInvoiceIn(InvoiceInChannel.HinterLand.ToString());
        }

        public override int ActionSave()
        {
            SetDefaultDesc();
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)entity.MainObject;
            APPurchaseOrdersController objPurchaseOrdersController = new APPurchaseOrdersController();

            if (string.IsNullOrEmpty(objInvoiceInsInfo.ACAssObjectAccessKey))
            {
                MessageBox.Show(InvoiceInLocalizedResources.ObjectIDIsNullMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return 0;
            }
            if (entity.InvoiceInItemsList.Where(o => o.FK_APPurchaseOrderID > 0).Count() > 0)
            {
                APPurchaseOrdersInfo objPurchaseOrdersInfo = (APPurchaseOrdersInfo)objPurchaseOrdersController.GetObjectByID(entity.InvoiceInItemsList.Where(o => o.FK_APPurchaseOrderID > 0).FirstOrDefault().FK_APPurchaseOrderID);
                if (objInvoiceInsInfo.ACAssObjectAccessKey != objPurchaseOrdersInfo.FK_ACObjectID + ";" + objPurchaseOrdersInfo.APObjectType)
                {
                    MessageBox.Show("Nhà cung cấp bạn chọn khác với nhà cung cấp của chứng từ mua", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return 0;
                }
            }
            entity.InvoiceInItemsList.EndCurrentEdit();

            foreach (APInvoiceInItemsInfo item in entity.InvoiceInItemsList)
            {
                if (item.APInvoiceInItemProductQty == 0)
                {
                    MessageBox.Show("Vui lòng nhập số lượng trước khi lưu!", "Thông báo", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return 0;
                }
            }
            APInvoiceInTransactionsController objInvoiceInTransactions = new APInvoiceInTransactionsController();
            List<APInvoiceInTransactionsInfo> transactionList = objInvoiceInTransactions.CheckAvailableVATInfo(objInvoiceInsInfo.APInvoiceInSupplierNo, objInvoiceInsInfo.APInvoiceInVATDate, objInvoiceInsInfo.APInvoiceInVATSymbol, objInvoiceInsInfo.APInvoiceInTaxNumber);
            if (transactionList != null && transactionList.Count() > 0)
            {
                if (MessageBox.Show(String.Format("Hoá đơn kê khai đã tồn tại (Số hoá đơn: {0}, số seri: {1}, mã số thuế: {2}), có lưu lại chứng từ không?", objInvoiceInsInfo.APInvoiceInSupplierNo
                                                                                                                                                           , objInvoiceInsInfo.APInvoiceInVATSymbol
                                                                                                                                                           , objInvoiceInsInfo.APInvoiceInTaxNumber)
                                                                        , CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
                    return 0;
            }
            UpdateTotalCost();
            UpdateTotalQuantity();
            APPurchaseOrdersController objPurchaseOrderController = new APPurchaseOrdersController();
            //if (!string.IsNullOrEmpty(objInvoiceInsInfo.APInvoiceInReference))
            //{
            //    APPurchaseOrdersInfo objPurchaseOrder = (APPurchaseOrdersInfo)objPurchaseOrderController.GetObjectByNo(objInvoiceInsInfo.APInvoiceInReference);

            //    if (objPurchaseOrder != null)
            //    {
            //        APPurchaseOrderItemsController objPurchaseOrderItemsController = new APPurchaseOrderItemsController();
            //        List<APPurchaseOrderItemsInfo> purchaseOrderItemList = (List<APPurchaseOrderItemsInfo>)objPurchaseOrderItemsController.GetPurchaseOrderItemsByPurchaseOrderID(objPurchaseOrder.APPurchaseOrderID);
            //        APInvoiceInItemsController objInvoiceInItemsController = new APInvoiceInItemsController();
            //        APInvoiceInItemsInfo objInvoiceInItemsInfo = new APInvoiceInItemsInfo();
            //        bool flag = false;
            //        foreach (APPurchaseOrderItemsInfo itemPurchaseOrder in purchaseOrderItemList)
            //        {
            //            //objInvoiceInItemsInfo = (APInvoiceInItemsInfo)objInvoiceInItemsController.GetObjectByID(item.FK_APPurchaseOrderID);
            //            foreach (APInvoiceInItemsInfo itemInvoiceInItem in entity.InvoiceInItemsList)
            //            {
            //                if (itemInvoiceInItem.FK_APPurchaseOrderItemID == itemPurchaseOrder.APPurchaseOrderItemID)
            //                {
            //                    if (itemInvoiceInItem.APInvoiceInItemProductExchangeQty > itemPurchaseOrder.APPurchaseOrderItemProductExchangeQty)
            //                    {
            //                        if (MessageBox.Show(InvoiceInLocalizedResources.QualityPIMoreThanPOQualityMessage,
            //                                    CommonLocalizedResources.MessageBoxDefaultCaption,
            //                                    MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
            //                        {
            //                            return 0;
            //                        }
            //                        else
            //                        {
            //                            flag = true;
            //                            break;
            //                        }
            //                    }
            //                }
            //            }
            //            if (flag)
            //                break;
            //        }
            //    }
            //}
            if (SupplierIsActiveLocked())
                return 0;
            if (ProductIsActiveLocked())
                return 0;
            if (!CheckValidQty())
                return 0;
            if (!CheckAvailablePurchaseDocumentDate())
                return 0;

            int invoiceID = base.ActionSave();

            if (invoiceID > 0)
            {
                if (!string.IsNullOrEmpty(objInvoiceInsInfo.APInvoiceInReference))
                {
                    APPurchaseOrdersController objPurchaseORdersController = new APPurchaseOrdersController();
                    objPurchaseOrderController.UpdateReferencePurchaseOrdersAndItemByInvoiceInID(invoiceID);
                }

                ICReceiptsController objReceiptsController = new ICReceiptsController();
                objReceiptsController.UpdateReferencesReceiptAndItemByInvoiceInID(invoiceID);
            }
            return invoiceID;
        }
        public bool SupplierIsActiveLocked()
        {
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)CurrentModuleEntity.MainObject;
            APSuppliersInfo objSuppliersInfo = new APSuppliersInfo();
            APSuppliersController objSuppliersController = new APSuppliersController();
            objSuppliersInfo = (APSuppliersInfo)objSuppliersController.GetObjectByID(objInvoiceInsInfo.FK_APSupplierID);
            if (objSuppliersInfo != null)
            {
                if (!objSuppliersInfo.APSupplierActiveCheck)
                {
                    if (MessageBox.Show(PurchaseOrderLocalizedResources.IsActiveLockedErrorMessage, CommonLocalizedResources.MessageBoxDefaultCaption,
                                                                    MessageBoxButtons.YesNo, MessageBoxIcon.Error) == DialogResult.Yes)
                    {
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
            }
            return false;
        }
        public bool ProductIsActiveLocked()
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            //APPurchaseOrdersInfo objPurchaseOrdersInfo = (APPurchaseOrdersInfo)CurrentModuleEntity.MainObject;
            ICProductsInfo objProductsInfo = new ICProductsInfo();
            ICProductsController objProductsController = new ICProductsController();
            List<String> ListProductDesc = new List<string>();
            foreach (APInvoiceInItemsInfo item in entity.InvoiceInItemsList)
            {
                objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(item.FK_ICProductID);
                if (objProductsInfo != null)
                {
                    if (!objProductsInfo.ICProductActiveCheck)
                    {
                        if (!ListProductDesc.Contains(objProductsInfo.ICProductDesc))
                            ListProductDesc.Add(objProductsInfo.ICProductDesc);
                    }
                }
            }
            if (ListProductDesc.Count() > 0)
            {

                string message = string.Empty;
                message = PurchaseOrderLocalizedResources.IsProductLockedErrorMessage;
                foreach (string Item in ListProductDesc)
                {
                    message += Environment.NewLine + Item;
                }
                message += Environment.NewLine + PurchaseOrderLocalizedResources.ContinueNo;
                if (MessageBox.Show(message, CommonLocalizedResources.MessageBoxDefaultCaption,
                                                                        MessageBoxButtons.YesNo, MessageBoxIcon.Error) == DialogResult.Yes)
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }
            return false;
        }
        public void UpdateReferencesReceiptAndDocument()
        {
            ICReceiptsController objReceiptsController = new ICReceiptsController();
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)entity.MainObject;
            List<int> receiptIDs = new List<int>();
            List<ICReceiptsInfo> receiptsInfo = new List<ICReceiptsInfo>();
            foreach (APInvoiceInItemsInfo item in entity.InvoiceInItemsList)
            {
                if (!receiptIDs.Contains(item.FK_ICReceiptID))
                {
                    receiptIDs.Add(item.FK_ICReceiptID);
                    ICReceiptsInfo receipt = (ICReceiptsInfo)objReceiptsController.GetObjectByID(item.FK_ICReceiptID);
                    if (receipt != null)
                    {
                        receiptsInfo.Add(receipt);
                    }
                }
            }

            foreach (ICReceiptsInfo objReceiptsInfo in receiptsInfo)
            {
                objReceiptsInfo.ICReceiptReference = objInvoiceInsInfo.APInvoiceInNo;
                objReceiptsController.UpdateObject(objReceiptsInfo);
            }
        }

        public DataTable CheckValidColumn()
        {
            DataTable dt = new DataTable();
            DataColumn column = new DataColumn("ErrorColumn");
            dt.Columns.Add(column);
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)entity.MainObject;
            AAColumnAliasController objColumnAliasController = new AAColumnAliasController();
            if (string.IsNullOrEmpty(objInvoiceInsInfo.APInvoiceInNo))
            {
                AAColumnAliasInfo objColumnAliasInfo = objColumnAliasController.GetAAColumnAliasByColumnNameAndTableName("APInvoiceInNo", TableName.APInvoiceInsTableName);
                if (objColumnAliasInfo != null)
                {
                    string errorColumn = objColumnAliasInfo.AAColumnAliasCaption;
                    DataRow row = dt.NewRow();
                    row["ErrorColumn"] = errorColumn;
                    dt.Rows.Add(row);

                }
            }
            if (objInvoiceInsInfo.FK_ACAssObjectID == 0)
            {
                AAColumnAliasInfo objColumnAliasInfo = objColumnAliasController.GetAAColumnAliasByColumnNameAndTableName("FK_APSupplierID", TableName.APInvoiceInsTableName);
                if (objColumnAliasInfo != null)
                {
                    string errorColumn = objColumnAliasInfo.AAColumnAliasCaption;
                    DataRow row = dt.NewRow();
                    row["ErrorColumn"] = errorColumn;
                    dt.Rows.Add(row);
                }
            }
            if (objInvoiceInsInfo.FK_GECurrencyID == 0)
            {
                AAColumnAliasInfo objColumnAliasInfo = objColumnAliasController.GetAAColumnAliasByColumnNameAndTableName("FK_GECurrencyID", TableName.APInvoiceInsTableName);
                if (objColumnAliasInfo != null)
                {
                    string errorColumn = objColumnAliasInfo.AAColumnAliasCaption;
                    DataRow row = dt.NewRow();
                    row["ErrorColumn"] = errorColumn;
                    dt.Rows.Add(row);
                }
            }
            if (string.IsNullOrEmpty(objInvoiceInsInfo.APInvoiceInType))
            {
                AAColumnAliasInfo objColumnAliasInfo = objColumnAliasController.GetAAColumnAliasByColumnNameAndTableName("APInvoiceInType", TableName.APInvoiceInsTableName);
                if (objColumnAliasInfo != null)
                {
                    string errorColumn = objColumnAliasInfo.AAColumnAliasCaption;
                    DataRow row = dt.NewRow();
                    row["ErrorColumn"] = errorColumn;
                    dt.Rows.Add(row);
                }
            }
            if (string.IsNullOrEmpty(objInvoiceInsInfo.APInvoiceInSupplierNo))
            {
                AAColumnAliasInfo objColumnAliasInfo = objColumnAliasController.GetAAColumnAliasByColumnNameAndTableName("APInvoiceInSupplierNo", TableName.APInvoiceInsTableName);
                if (objColumnAliasInfo != null)
                {
                    string errorColumn = objColumnAliasInfo.AAColumnAliasCaption;
                    DataRow row = dt.NewRow();
                    row["ErrorColumn"] = errorColumn;
                    dt.Rows.Add(row);
                }
            }
            if (string.IsNullOrEmpty(objInvoiceInsInfo.APInvoiceInVATSymbol))
            {
                AAColumnAliasInfo objColumnAliasInfo = objColumnAliasController.GetAAColumnAliasByColumnNameAndTableName("APInvoiceInVATSymbol", TableName.APInvoiceInsTableName);
                if (objColumnAliasInfo != null)
                {
                    string errorColumn = objColumnAliasInfo.AAColumnAliasCaption;
                    DataRow row = dt.NewRow();
                    row["ErrorColumn"] = errorColumn;
                    dt.Rows.Add(row);
                }
            }
            return dt;
        }
        /// <summary>
        /// Set the default description for the invoice
        /// </summary>
        private void SetDefaultDesc()
        {
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)CurrentModuleEntity.MainObject;
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByAccessKey(objInvoiceInsInfo.ACAssObjectAccessKey);
            objObjectsInfo = objObjectsController.GetObjectByIDAndType(objObjectsInfo.ACObjectID, objObjectsInfo.ACObjectType);
            if (objObjectsInfo != null)
            {
                objInvoiceInsInfo.APInvoiceInDesc = objInvoiceInsInfo.APInvoiceInDesc.Replace("{0}", objInvoiceInsInfo.APInvoiceInReference);
                objInvoiceInsInfo.APInvoiceInDesc = objInvoiceInsInfo.APInvoiceInDesc.Replace("{1}", objObjectsInfo.ACObjectName);
            }
        }

        public override void InvalidateToolbar()
        {
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)CurrentModuleEntity.MainObject;
            if (objInvoiceInsInfo.APInvoiceInID > 0)
            {
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, true);
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, true);
                ParentScreen.SetEnableOfToolbarButton(ToolbarButtons.PostedTransactions, false);
                ParentScreen.SetEnableOfToolbarButton(ToolbarButtons.UnPostedTransactions, false);
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonCancelComplete, false);
                ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, false);
                APInvoiceInChannelLookUpEdit.Properties.ReadOnly = true;
                if (objInvoiceInsInfo.APInvoiceInStatus == InvoiceInStatus.Completed.ToString() ||
                    objInvoiceInsInfo.APInvoiceInStatus == InvoiceInStatus.Incompleted.ToString())
                {
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonEdit, false);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonCancelComplete, true);
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonComplete, false);
                    ParentScreen.SetEnableOfToolbarButton(ToolbarButtons.PostedTransactions,
                        objInvoiceInsInfo.APInvoiceInPostedStatus != PostedTransactionStatus.Posted.ToString());
                    ParentScreen.SetEnableOfToolbarButton(ToolbarButtons.UnPostedTransactions,
                        objInvoiceInsInfo.APInvoiceInPostedStatus == PostedTransactionStatus.Posted.ToString());
                }

                if (Toolbar.IsEditAction())
                {
                    ParentScreen.SetEnableOfToolbarButton(BaseToolbar.ToolbarButtonDelete, true);
                }
            }

            base.InvalidateToolbar();
        }

        #region Local
        /// <summary>
        /// Add item into current invoice in item list
        /// </summary>
        public void AddItemToInvoiceInItemsList()
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInItemsInfo item = (APInvoiceInItemsInfo)entity.ModuleObjects[TableName.APInvoiceInItemsTableName];
            if (item.FK_ICProductID > 0)
            {
                ICProductsController objProductsController = new ICProductsController();
                ICProductsInfo objProductsInfo = objProductsController.GetObjectByID(item.FK_ICProductID) as ICProductsInfo;
                if (objProductsInfo != null)
                {
                    item.FK_ACAccountID = objProductsInfo.FK_ACAccountID;
                    item.FK_ICProductAttributeWoodTypeID = objProductsInfo.FK_ICProductAttributeWoodTypeID;
                }
                ICProductComponentsController objProductComponentsController = new ICProductComponentsController();
                List<ICProductComponentsInfo> components = objProductComponentsController.GetProductComponentListByProductID(item.FK_ICProductID);
                if (components.Count > 0)
                {
                    foreach (ICProductComponentsInfo component in components)
                    {
                        item = new APInvoiceInItemsInfo();
                        entity.SetValuesAfterValidateProduct(component.FK_ICProductComponentChildID, item);
                        item.APInvoiceInItemProductQty = item.APInvoiceInItemProductQty * component.ICProductComponentQty;
                        entity.InvoiceInItemsList.Add(item);
                    }
                    entity.InvoiceInItemsList.GridControl.RefreshDataSource();
                }
                else
                {
                    entity.SetValuesAfterValidateProduct(item.FK_ICProductID);
                    entity.InvoiceInItemsList.AddObjectToList();
                }
                UpdateTotalCost();
                ChangeDisplayAndDataItemListGridView();
            }
        }

        /// <summary>
        /// Change item from the current invoice in item list
        /// </summary>
        public void ChangeItemFromInvoiceInItemsList()
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            entity.SetProductCostByProductUnitCost();
            entity.InvoiceInItemsList.ChangeObjectFromList();
            UpdateTotalCost();
        }

        /// <summary>
        /// Remove the selected item from the current invoice in item list
        /// </summary>
        public void DeleteItemFromInvoiceInItemsList()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
                entity.InvoiceInItemsList.RemoveSelectedRowObjectFromList();
                UpdateTotalCost();
            }
        }

        private void NewInvoiceIn(string channel)
        {
            base.ActionNew();
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)entity.MainObject;
            objInvoiceInsInfo.APInvoiceInStatus = InvoiceInStatus.New.ToString();
            objInvoiceInsInfo.APInvoiceInChannel = channel;
            APInvoiceInChannelLookUpEdit.Properties.ReadOnly = false;
            if (objInvoiceInsInfo.APInvoiceInType == InvoiceInType.Roundwood.ToString() || (objInvoiceInsInfo.APInvoiceInType == InvoiceInType.Lumber.ToString()))
            {
                objInvoiceInsInfo.APInvoiceInPackNo = entity.GetProductWoodLotNo();
            }
            else
                objInvoiceInsInfo.APInvoiceInPackNo = entity.GetProductLotNo();
            this.GenerateAccountingData();
            this.EnableInvoiceInProductControls(objInvoiceInsInfo.APInvoiceInChannel == InvoiceInChannel.HinterLand.ToString());
        }

        /// <summary>
        /// Action new invoice in from sale order
        /// </summary>
        public void ActionNewFromPurchaseOrder()
        {
            this.NewInvoiceIn(InvoiceInChannel.Import.ToString());

            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)entity.MainObject;
            //APInvoiceInChannelLookUpEdit.Properties.ReadOnly = true;
            APPurchaseOrdersController objPurchaseOrdersController = new APPurchaseOrdersController();
            //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
            //List<APPurchaseOrdersInfo> purchaseOrderList = objPurchaseOrdersController.GetPurchaseOrdersForInvoicing();
            List<APPurchaseOrdersInfo> purchaseOrderList = objPurchaseOrdersController.GetPurchaseOrdersForInvoicingByUserPermission(BOSApp.CurrentUsersInfo.ADUserID,
                                                                                                                                        ModuleName.PurchaseOrder,
                                                                                                                                        ADDataViewPermissionType.Module);

            //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], END

            //TNDLoc [ADD] [20/01/2016] [PurchaseOrder Channel Filter],START
            if (purchaseOrderList != null && purchaseOrderList.Count > 0)
            {
                purchaseOrderList = purchaseOrderList.Where(i => (i.APPurchaseOrderChannel == PurchaseOrderChannel.Import.ToString()) ||
                                                                    (i.APPurchaseOrderType == PurchaseOrderType.Service.ToString() ||
                                                                    i.APPurchaseOrderType == PurchaseOrderType.OutSourcingService.ToString() ||
                                                                    i.APPurchaseOrderReceiptTypeCombo == ProductType.Rent.ToString())).ToList();
            }
            //TNDLoc [ADD] [20/01/2016] [PurchaseOrder Channel Filter],END

            guiFind<APPurchaseOrdersInfo> guiFind = new guiFind<APPurchaseOrdersInfo>(TableName.APPurchaseOrdersTableName, purchaseOrderList, this, true, true, new string[] { "APPurchaseOrderReceiptTypeCombo" });
            guiFind.ShowDialog();
            if (guiFind.DialogResult == DialogResult.OK)
            {
                if (guiFind.SelectedObjects.Count > 0)
                {
                    APPurchaseOrdersInfo objPurchaseOrdersInfo = (APPurchaseOrdersInfo)guiFind.SelectedObjects[0];
                    //Copy supplier info                    
                    objInvoiceInsInfo.FK_APSupplierID = objPurchaseOrdersInfo.FK_APSupplierID;
                    objInvoiceInsInfo.APInvoiceInType = objPurchaseOrdersInfo.APPurchaseOrderReceiptTypeCombo;
                    //TKChinh Add PO No
                    objInvoiceInsInfo.APInvoiceInPONo = objPurchaseOrdersInfo.APPurchaseOrderPONo;
                    objInvoiceInsInfo.FK_APPurchaseContractID = objPurchaseOrdersInfo.FK_APPurchaseContractID;
                    objInvoiceInsInfo.APInvoiceInSupplierNo = objPurchaseOrdersInfo.APPurchaseOrderContractNo;
                    objInvoiceInsInfo.APInvoiceInContractNo = objPurchaseOrdersInfo.APPurchaseOrderContractNo;
                    objInvoiceInsInfo.APInvoiceInContractDate = objPurchaseOrdersInfo.APPurchaseOrderContractDate;                    
                    SetDefaultValuesFromSupplier();

                    //Generate entity from the selected purchase orders
                    entity.GenerateEntitiesFromPurchaseOrders(objPurchaseOrdersInfo, guiFind.SelectedObjects);

                    objInvoiceInsInfo.FK_ACAssObjectID = objPurchaseOrdersInfo.FK_ACObjectID;
                    objInvoiceInsInfo.APAssObjectType = objPurchaseOrdersInfo.APObjectType;
                    objInvoiceInsInfo.ACAssObjectAccessKey = objInvoiceInsInfo.FK_ACAssObjectID > 0 ? objInvoiceInsInfo.FK_ACAssObjectID + ";" + objInvoiceInsInfo.APAssObjectType : string.Empty;
                    objInvoiceInsInfo.ACObjectName = objPurchaseOrdersInfo.ACObjectName;
                    objInvoiceInsInfo.APInvoiceInType = objPurchaseOrdersInfo.APPurchaseOrderReceiptTypeCombo;
                    objInvoiceInsInfo.APInvoiceInChannel = objPurchaseOrdersInfo.APPurchaseOrderChannel;
                    objInvoiceInsInfo.APInvoiceInDeliveryAddressLine3 = objPurchaseOrdersInfo.APPurchaseOrderDeliveryAddressLine3;
                    objInvoiceInsInfo.FK_ICProductAttributeTTMTID = objPurchaseOrdersInfo.FK_ICProductAttributeTTMTID;
                    objInvoiceInsInfo.APInvoiceInProject = string.Join(", ", guiFind.SelectedObjects.Where(o => !String.IsNullOrWhiteSpace(o.APPurchaseOrderProject)).Select(o => o.APPurchaseOrderProject).Distinct().ToArray());
                    APSuppliersController objSuppliersController = new APSuppliersController();
                    APSuppliersInfo objSuppliersInfo = (APSuppliersInfo)objSuppliersController.GetObjectByID(objInvoiceInsInfo.FK_APSupplierID);
                    if (objSuppliersInfo != null)
                    {
                        objInvoiceInsInfo.APInvoiceInTaxNumber = objSuppliersInfo.APSupplierTaxNumber;
                    }
                    UpdateTotalCost();
                    DisplayLabelText(objInvoiceInsInfo);
                    ChangedInputType(objInvoiceInsInfo.APInvoiceInType);
                    entity.InvoiceInItemsList.GridControl.RefreshDataSource();
                    if (entity.InvoiceInItemsList.Count > 0)
                    {
                        entity.InvoiceInItemsList.GridControl.InvalidateLookupEditColumns();
                        entity.InvoiceInItemsList.GridViewFocusRow(0);
                    }
                    //isFromPurchaseOrder = true;

                    EnableInvoiceInProductControls(objInvoiceInsInfo.APInvoiceInChannel == InvoiceInChannel.HinterLand.ToString());
                    if (objInvoiceInsInfo.APInvoiceInType == InvoiceInType.Roundwood.ToString() || (objInvoiceInsInfo.APInvoiceInType == InvoiceInType.Lumber.ToString()))
                    {
                        objInvoiceInsInfo.APInvoiceInPackNo = entity.GetProductWoodLotNo();

                    }
                    else
                        objInvoiceInsInfo.APInvoiceInPackNo = entity.GetProductLotNo();
                    //isFromPurchaseOrder = true;
                    ResetInvoiceItemPackNo();
                    if (objPurchaseOrdersInfo.APPurchaseOrderType == PurchaseOrderType.Service.ToString())
                    {
                        objInvoiceInsInfo.APInvoiceInType = InvoiceInType.Service.ToString();
                        objInvoiceInsInfo.APInvoiceInChannel = InvoiceInChannel.HinterLand.ToString();
                        GenerateAccountingData();
                    }
                    UpdateTotalCost();
                    APPOPackageItemsController objPOPackageItemsController = new APPOPackageItemsController();
                    APPOPackageItemDetailsController objPOPackageItemDetailsController = new APPOPackageItemDetailsController();
                    List<APPOPackageItemsInfo> POPackageItemsList = objPOPackageItemsController.GetPackageItemsListByPurchaseOrderID(objPurchaseOrdersInfo.APPurchaseOrderID);
                    POPackageItemsList.ForEach(o =>
                    {
                        APInvoiceInPackageItemsInfo objInvoiceInPackageItemsInfo = GenInvoiceInPackageItemFromPOPackageItem(o);
                        if (objInvoiceInPackageItemsInfo != null)
                            entity.InvoiceInPackageItemList.Add(objInvoiceInPackageItemsInfo);
                        List<APPOPackageItemDetailsInfo> POPackageItemDetailsList = objPOPackageItemDetailsController.GetPackageItemDetailsListByPackageItemID(o.APPOPackageItemID);
                        POPackageItemDetailsList.ForEach(x =>
                        {
                            APInvoiceInPackageItemDetailsInfo objInvoiceInPackageItemDetailsInfo = GenInvoiceInPackageItemDetailFromPOPackageItemDetail(x);
                            if (objInvoiceInPackageItemDetailsInfo != null)
                                entity.InvoiceInPackageItemDetailShowList.Add(objInvoiceInPackageItemDetailsInfo);

                        });
                    });
                    ChangeDisplayAndDataItemListGridView();
                    if (InvoiceInItemGridControl != null)
                    {
                        GridView gridView = (GridView)InvoiceInItemGridControl.MainView;
                        if (gridView != null)
                        {
                            GridColumn qtyColumn = gridView.Columns["APInvoiceInItemProductUnitCost"];
                            if (qtyColumn != null)
                            {
                                qtyColumn.OptionsColumn.AllowEdit = false;
                            }
                        }
                    }
                }
            }
            else
                ActionCancel();
        }

        public override bool CheckSelectedSearchObjects(string tableName, object objects)
        {
            if (tableName == TableName.APPurchaseOrdersTableName)
            {
                List<APPurchaseOrdersInfo> purchaseOrders = (List<APPurchaseOrdersInfo>)objects;
                if (purchaseOrders.Count > 0)
                {
                    int supplierID = purchaseOrders[0].FK_APSupplierID;
                    foreach (APPurchaseOrdersInfo objPurchaseOrdersInfo in purchaseOrders)
                    {
                        if (objPurchaseOrdersInfo.FK_APSupplierID != supplierID)
                        {
                            MessageBox.Show(InvoiceInLocalizedResources.PurchaseOrdersHaveNotSameSupplierMessage,
                                            CommonLocalizedResources.MessageBoxDefaultCaption,
                                            MessageBoxButtons.OK,
                                            MessageBoxIcon.Error);
                            return false;
                        }
                    }
                }
            }
            return true;
        }

        /// <summary>
        /// Change infomation of shipping
        /// </summary>
        public void ChangeShippingInfo()
        {
            guiShippingInfo guiShippingInfo = new guiShippingInfo();
            guiShippingInfo.Module = this;
            if (guiShippingInfo.ShowDialog() == DialogResult.OK)
            {
                DisplayLabelText(CurrentModuleEntity.MainObject);
            }
        }


        /// <summary>
        /// Change supplier 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void ChangeSupplier(object sender, DevExpress.XtraEditors.Controls.CloseUpEventArgs e)
        {
            BOSComponent.BOSLookupEdit lke = (BOSComponent.BOSLookupEdit)sender;
            if (e.Value != lke.OldEditValue)
            {
                InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
                APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)entity.MainObject;
                objInvoiceInsInfo.FK_APSupplierID = Convert.ToInt32(e.Value);
                if (!Toolbar.IsNullOrNoneAction())
                {
                    APSuppliersController objSuppliersController = new APSuppliersController();
                    APSuppliersInfo objSuppliersInfo = (APSuppliersInfo)objSuppliersController.GetObjectByID(objInvoiceInsInfo.FK_APSupplierID);
                    if (objSuppliersInfo != null)
                    {
                        objInvoiceInsInfo.APInvoiceInTaxNumber = objSuppliersInfo.APSupplierTaxNumber;
                    }
                    SetDefaultValuesFromSupplier();
                }
            }
        }

        /// <summary>
        /// Called when user changes the currency of the invoice
        /// </summary>
        /// <param name="currencyID">Target currency id</param>
        public void ChangeCurrency(int currencyID)
        {
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)CurrentModuleEntity.MainObject;
            objInvoiceInsInfo.FK_GECurrencyID = currencyID;
            GECurrencyExchangeRatesController objCurrencyExchangeRatesController = new GECurrencyExchangeRatesController();
            decimal exchangeRateValue = objCurrencyExchangeRatesController.GetCurrencyExchangeRateByCurrencyIDAndDate(currencyID, objInvoiceInsInfo.APInvoiceInDate);
            if (exchangeRateValue > 0)
            {
                objInvoiceInsInfo.APInvoiceInExchangeRate = exchangeRateValue;
            }
            CurrentModuleEntity.UpdateMainObjectBindingSource();
        }

        /// <summary>
        /// Change payment term
        /// </summary>
        public void ChangePaymentTerm()
        {
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)CurrentModuleEntity.MainObject;
            guiPaymentTerm guiPayment = new guiPaymentTerm();
            guiPayment.Module = this;
            if (guiPayment.ShowDialog() == DialogResult.OK)
            {
                objInvoiceInsInfo.APInvoiceInPaymentTerm = guiPayment.Tag.ToString();
                CurrentModuleEntity.UpdateMainObjectBindingSource();
            }
        }

        /// <summary>
        /// Called when user changes the discount percent of the purchase order
        /// </summary>
        public void ChangeDiscountPercent()
        {
            UpdateTotalCost();
        }

        /// <summary>
        /// Called when user changes the discount amount of the purchase order 
        /// </summary>
        public void ChangeDiscountAmount()
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo objInvoiceInInfo = (APInvoiceInsInfo)entity.MainObject;
            if (objInvoiceInInfo.APInvoiceInSubTotalCost > 0)
                objInvoiceInInfo.APInvoiceInDiscountPerCent = objInvoiceInInfo.APInvoiceInDiscountFix / objInvoiceInInfo.APInvoiceInSubTotalCost * 100;
            UpdateTotalCost();
        }

        /// <summary>
        /// Called when user changes the tax percent of the purchase order
        /// </summary>
        public void ChangeTaxPercent()
        {
            UpdateTotalCost();
        }

        /// <summary>
        /// Called when user changes the tax amount of the purchase order
        /// </summary>
        public void ChangeTaxAmount()
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo objInvoiceInInfo = (APInvoiceInsInfo)entity.MainObject;
            decimal subTotalCost = objInvoiceInInfo.APInvoiceInSubTotalCost -
                                    objInvoiceInInfo.APInvoiceInDiscountFix +
                                    objInvoiceInInfo.APInvoiceInShippingFees +
                                    objInvoiceInInfo.APInvoiceInShippingExtraFees;
            if (subTotalCost > 0)
                objInvoiceInInfo.APInvoiceInTaxPercent = objInvoiceInInfo.APInvoiceInTaxAmount / subTotalCost * 100;
            UpdateTotalCost();
        }

        /// <summary>
        /// Called when user changes the shipping fee
        /// </summary>
        public void ChangeShippingFee()
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            UpdateTotalCost();
        }
        #endregion

        /// <summary>
        /// Called when user changes the deposit balance
        /// </summary>
        public void ChangeDepositBalance()
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            UpdateTotalCost();
        }

        /// <summary>
        /// Show form to compare product unit cost over time
        /// </summary>
        public void CompareUnitCost()
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo objInvoicesInfo = (APInvoiceInsInfo)entity.MainObject;
            APInvoiceInItemsInfo objInvoiceItemsInfo = (APInvoiceInItemsInfo)entity.ModuleObjects[TableName.APInvoiceInItemsTableName];
            guiProductUnitCostComparison guiProductUnitCostComparison = new guiProductUnitCostComparison(
                                                                                                objInvoiceItemsInfo.FK_ICProductID,
                                                                                                objInvoiceItemsInfo.APInvoiceInItemProductDesc,
                                                                                                objInvoicesInfo.FK_APSupplierID,
                                                                                                objInvoicesInfo.FK_GECurrencyID);
            guiProductUnitCostComparison.Module = this;
            guiProductUnitCostComparison.Show();
        }

        /// <summary>
        /// Update the total costs of the invoice
        /// </summary>
        public void UpdateTotalCost()
        {
            if (!Toolbar.IsNullOrNoneAction())
            {
                InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
                entity.UpdateTotalCost();
            }
        }

        public void UpdateTotalAmountForPayment()
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            entity.UpdateTotalCost();
        }

        public void updateTotalAmountbyCurrecy()
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)entity.MainObject;
            foreach (APInvoiceInItemsInfo item in entity.InvoiceInItemsList)
            {
                BOSApp.RoundByCurrency(item, objInvoiceInsInfo.FK_GECurrencyID);
            }
            BOSApp.RoundByCurrency(objInvoiceInsInfo, objInvoiceInsInfo.FK_GECurrencyID);
            entity.InvoiceInItemsList.GridControl.RefreshDataSource();
            entity.UpdateMainObjectBindingSource();
        }

        //TNDLoc [ADD][17/11/2015][Issue New From PurchaseReceipt],START
        //public bool IsCreateFromPurchaseReceipt = false;
        public void ActionNewFromPurchaseReceipt()
        {
            this.NewInvoiceIn(InvoiceInChannel.HinterLand.ToString());
            ShowPurchaseReceipt();
            ResetInvoiceItemPackNo();
            UpdateTotalCost();
            ChangeDisplayAndDataItemListGridView();

        }

        public void ShowPurchaseReceipt()
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)entity.MainObject;
            ICReceiptsController objReceiptsController = new ICReceiptsController();
            List<ICReceiptsInfo> objReceiptsList = objReceiptsController.GetReceiptForInvoicing();

            ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
            //APPurchaseOrdersController objPurchaseOrdersController = new APPurchaseOrdersController();
            guiChooseReceipt guiFind = new guiChooseReceipt(objReceiptsList);
            guiFind.Module = this;

            if (guiFind.ShowDialog() != DialogResult.OK)
            {
                ActionCancel();
                return;
            }
            objReceiptsList = guiFind.SelectedObjects;
            ICReceiptsInfo objReceiptsInfo = objReceiptsList.FirstOrDefault();

            List<ICReceiptItemsInfo> selectedReceiptItemsList = new List<ICReceiptItemsInfo>();
            List<int> purchaseOrderID = objReceiptsList.Select(o => o.FK_APPurchaseOrderID).ToList();

            string strRefNo = string.Empty;
            string strPONo = string.Empty;
            string strPOContractNo = string.Empty;
            string strPOProject = string.Empty;
            
            strRefNo = string.Join(", ", objReceiptsList.Select(o => o.APPurchaseOrderNo).Distinct().ToArray());
            strRefNo += string.Join(", ", objReceiptsList.Select(o => o.ICReceiptNo).Distinct().ToArray());

            strPONo = string.Join(", ", objReceiptsList.Select(o => o.APPurchaseOrderPONo).Distinct().ToArray());
            strPONo += string.Join(", ", objReceiptsList.Select(o => o.ICReceiptPONo).Distinct().ToArray());

            strPOContractNo += string.Join(", ", objReceiptsList.Select(o => o.APPurchaseOrderContractNo).Distinct().ToArray());
            strPOProject += string.Join(", ", objReceiptsList.Select(o => o.APPurchaseOrderProject).Distinct().ToArray());

            selectedReceiptItemsList = objReceiptItemsController.GetReceiptItemsForInvoicingByRef(string.Join(",", objReceiptsList.Select(o => o.ICReceiptID.ToString()).ToArray()));
            APPurchaseOrderItemsController objAPPurchaseOrderItemsController = new APPurchaseOrderItemsController();
            List<APPurchaseOrderItemsInfo> purchaseOrderItemsList = new List<APPurchaseOrderItemsInfo>();
            List<APPurchaseOrderItemsInfo> purchaseOrderItemSubList = new List<APPurchaseOrderItemsInfo>();
            foreach (int itemID in purchaseOrderID)
            {
                purchaseOrderItemSubList = objAPPurchaseOrderItemsController.GetAllItemsByPurchaseOrderID(itemID);
                purchaseOrderItemSubList = purchaseOrderItemSubList.Where(o => o.APPurchaseOrderItemProductType == ProductType.Work.ToString()
                                                || o.APPurchaseOrderItemProductType == ProductType.Service.ToString()).ToList();
                if (purchaseOrderItemSubList.Count > 0)
                    purchaseOrderItemsList.AddRange(purchaseOrderItemSubList);
            }
            List<ICReceiptItemsInfo> receiptItemWorkAndService = entity.ToPurchaseReceiptList(purchaseOrderItemsList);
            if (receiptItemWorkAndService.Count > 0)
                selectedReceiptItemsList.AddRange(receiptItemWorkAndService);
            //BOSUtil.CopyObject(objReceiptsInfo, objInvoiceInsInfo);
            objInvoiceInsInfo.APInvoiceInReference = strRefNo;
            //objInvoiceInsInfo.APInvoiceInNo = NewNo;
            objInvoiceInsInfo.APInvoiceInPONo = strPONo;
            objInvoiceInsInfo.APInvoiceInPONo = strPONo;
            //objInvoiceInsInfo.APInvoiceInSupplierNo = strPOContractNo;

            objInvoiceInsInfo.APInvoiceInContractNo = strPOContractNo;
            objInvoiceInsInfo.APInvoiceInContractDate = objReceiptsList.FirstOrDefault().APPurchaseOrderContractDate;
            objInvoiceInsInfo.APInvoiceInProject = strPOProject;
            objInvoiceInsInfo.APInvoiceInDesc = InvoiceInLocalizedResources.InvoiceDefaultDesc;
            objInvoiceInsInfo.FK_PMProjectID = objReceiptsInfo.FK_PMProjectID;
            objInvoiceInsInfo.FK_APPurchaseContractID = objReceiptsInfo.FK_APPurchaseContractID;
            objInvoiceInsInfo.FK_ICProductAttributeTTMTID = objReceiptsInfo.FK_ICProductAttributeTTMTID;
            //Copy supplier info                    

            SetDefaultValuesFromSupplier();
            //Generate entity from the selected purchase orders
            entity.GenerateEntitiesFromPurchaseReceipts(objReceiptsInfo, selectedReceiptItemsList);
            APSuppliersController objSuppliersController = new APSuppliersController();
            APSuppliersInfo objSuppliersInfo = (APSuppliersInfo)objSuppliersController.GetObjectByID(objInvoiceInsInfo.FK_APSupplierID);
            if (objSuppliersInfo != null)
            {
                objInvoiceInsInfo.APInvoiceInTaxNumber = objSuppliersInfo.APSupplierTaxNumber;
            }
            SetDefaultDesc();
            SetDefaultDepositBalance(purchaseOrderID);
            UpdateTotalCost();
            DisplayLabelText(objInvoiceInsInfo);
            ChangedInputType(objInvoiceInsInfo.APInvoiceInType);
            entity.InvoiceInItemsList.GridControl.RefreshDataSource();
            if (entity.InvoiceInItemsList.Count > 0)
            {
                entity.InvoiceInItemsList.GridControl.InvalidateLookupEditColumns();
                entity.InvoiceInItemsList.GridViewFocusRow(0);
            }
            objInvoiceInsInfo.FK_APSupplierID = objReceiptsInfo.FK_APSupplierID;
            objInvoiceInsInfo.APAssObjectType = objReceiptsInfo.ICAssObjectType;
            objInvoiceInsInfo.FK_ACAssObjectID = objReceiptsInfo.FK_ACAssObjectID;
            objInvoiceInsInfo.ACAssObjectAccessKey = objInvoiceInsInfo.FK_ACAssObjectID > 0 ? objInvoiceInsInfo.FK_ACAssObjectID + ";" + objInvoiceInsInfo.APAssObjectType : string.Empty;
            objInvoiceInsInfo.ACObjectName = objInvoiceInsInfo.ACObjectName;
            objInvoiceInsInfo.APInvoiceInDesc = objInvoiceInsInfo.APInvoiceInDesc + "; " + objReceiptsInfo.ICReceiptNo;
            if (InvoiceInItemGridControl != null)
            {
                GridView gridView = (GridView)InvoiceInItemGridControl.MainView;
                if (gridView != null)
                {
                    GridColumn qtyColumn = gridView.Columns["APInvoiceInItemProductQty"];
                    if (qtyColumn != null)
                    {
                        qtyColumn.OptionsColumn.AllowEdit = false;

                    }
                }
            }
        }

        public void SetDefaultDepositBalance(List<int> item)
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)entity.MainObject;

            APPurchaseOrdersController objPurchaseOrderController = new APPurchaseOrdersController();
            for (int i = 0; i < item.Count; i++)
            {
                APPurchaseOrdersInfo objPurchaseOrder = (APPurchaseOrdersInfo)objPurchaseOrderController.GetPurchaseOrdersForInvoiceInID(item[i]).FirstOrDefault();
                if (objPurchaseOrder != null)
                {
                    objInvoiceInsInfo.APInvoiceInDepositBalance += objPurchaseOrder.APPurchaseOrderPaidAmount;
                }
            }
        }

        public void ResetInvoiceItemPackNo()
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)entity.MainObject;
            if (entity.InvoiceInItemsList.Count > 0)
            {
                if (objInvoiceInsInfo.APInvoiceInPackNo != string.Empty)
                {
                    foreach (APInvoiceInItemsInfo item in entity.InvoiceInItemsList)
                    {
                        if (item.APInvoiceInItemLotNo == string.Empty)
                            item.APInvoiceInItemLotNo = objInvoiceInsInfo.APInvoiceInPackNo;
                    }
                }
            }
        }

        public void UpdateTotalQuantity()
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo ObjInvoiceInsInfo = (APInvoiceInsInfo)CurrentModuleEntity.MainObject;
            decimal totalQuantity = 0;
            int totalCountQuantity = 0;
            if (ObjInvoiceInsInfo.APInvoiceInType == InvoiceInType.Roundwood.ToString() ||
                ObjInvoiceInsInfo.APInvoiceInType == InvoiceInType.Lumber.ToString())
            {
                foreach (APInvoiceInItemsInfo item in entity.InvoiceInItemsList)
                {
                    //set wood block value
                    if (item.APInvoiceInItemProductQty == 0)
                    {
                        item.APInvoiceInItemProductQty = ((item.APInvoiceInItemProductLength) * ((item.APInvoiceInItemProductPerimeter * item.APInvoiceInItemProductPerimeter) / Convert.ToDecimal(1000000000 * 0.0796)));
                    }
                }

                foreach (APInvoiceInItemsInfo item in entity.InvoiceInItemsList)
                {
                    //set wood block value

                    totalQuantity = totalQuantity + item.APInvoiceInItemProductQty;
                    totalCountQuantity = Convert.ToInt32(totalCountQuantity + item.APInvoiceInItemWoodQty);
                }
                ObjInvoiceInsInfo.APInvoiceInTotalQuantity = totalQuantity;
                ObjInvoiceInsInfo.APInvoiceInRoundWoodQty = totalCountQuantity;

            }
            else
            {
                ObjInvoiceInsInfo.APInvoiceInRoundWoodQty = 0;
                int total = 0;
                foreach (APInvoiceInItemsInfo item in entity.InvoiceInItemsList)
                {
                    int.TryParse(item.APInvoiceInItemProductQty.ToString(), out total);
                    ObjInvoiceInsInfo.APInvoiceInRoundWoodQty += total;
                }

            }
            //Mis case for InvoiceInType Lumber
        }
        public void ChangedInputType(string inputType)
        {
            APInvoiceInsInfo mainObject = (APInvoiceInsInfo)CurrentModuleEntity.MainObject;
            ICProductsController objICProductsController = new ICProductsController();
            List<ICProductsForViewInfo> productList = new List<ICProductsForViewInfo>();
            if (inputType == ProductType.Roundwood.ToString())
            {
                productList = BOSApp.CurrentProductList.Where(p => p.ICProductType == ProductType.Roundwood.ToString()).ToList();
            }
            else if (inputType == ProductType.Lumber.ToString()
                || inputType == ProductType.Verneer.ToString()
                || inputType == ProductType.ArtificialBoard.ToString())
            {
                productList = BOSApp.CurrentProductList.Where(p => p.ICProductType != ProductType.SemiProduct.ToString()).ToList();
            }
            else
            {
                productList = BOSApp.CurrentProductList.Where(p => p.ICProductType != ProductType.SemiProduct.ToString() && p.ICProductType != ProductType.Section.ToString()).ToList();
            }
            ChangeDisplayAndDataItemListGridView();
            ProductItemLookUpEdit.Properties.DataSource = productList;
        }
        public void ResetModelDetail(APInvoiceInItemsInfo item)
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            ICModelDetailsController objModelDetailsController = new ICModelDetailsController();
            List<ICModelDetailsInfo> ModelDetailsList = new List<ICModelDetailsInfo>();
            if (item != null)
            {
                ModelDetailsList = objModelDetailsController.GetModelDetailByModelID(item.FK_ICModelID);
            }
            if (ModelDetailsList.Count > 0)
            {
                item.FK_ICModelDetailID = ModelDetailsList.FirstOrDefault().ICModelDetailID;
            }
            else
            {
                item.FK_ICModelDetailID = 0;
            }
            entity.InvoiceInItemsList.GridControl.RefreshDataSource();
        }
        public void ChangInvoiceInVATDate()
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo ObjInvoiceInsInfo = (APInvoiceInsInfo)CurrentModuleEntity.MainObject;
            int PurchaseOderID = 0;
            if (entity.InvoiceInItemsList.FirstOrDefault() != null)
            {
                PurchaseOderID = entity.InvoiceInItemsList.FirstOrDefault().FK_APPurchaseOrderID;
            }
            ObjInvoiceInsInfo.APInvoiceInValidateDate = entity.GetDateForPayment(PurchaseOderID);
            entity.UpdateMainObjectBindingSource();
        }
        //[NKVung]  [Fillter Model Detail By Model] [END]

        public void ChangeObject(string objectAccessKey)
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)CurrentModuleEntity.MainObject;
            objInvoiceInsInfo.ACAssObjectAccessKey = objectAccessKey;
            ACObjectsController objObjectsController = new ACObjectsController();
            ACObjectsInfo objObjectsInfo = objObjectsController.GetObjectByAccessKey(objectAccessKey);
            objObjectsInfo = objObjectsController.GetObjectByIDAndType(objObjectsInfo.ACObjectID, objObjectsInfo.ACObjectType);
            if (objObjectsInfo != null)
            {
                objInvoiceInsInfo.ACObjectName = objObjectsInfo.ACObjectName;
                if (objObjectsInfo.ACObjectType == ObjectType.Supplier.ToString())
                    objInvoiceInsInfo.FK_APSupplierID = objObjectsInfo.ACObjectID;
                objInvoiceInsInfo.APInvoiceInTaxNumber = objObjectsInfo.ACObjectTaxNumber;
            }
        }

        public void Payment()
        {
            if (Toolbar.IsNullOrNoneAction())
            {
                //InvoiceEntities entity = (InvoiceEntities)CurrentModuleEntity;
                //ARInvoicesInfo objInvoicesInfo = (ARInvoicesInfo)CurrentModuleEntity.MainObject;

                //if (objInvoicesInfo.ARInvoiceStatus == InvoiceStatus.Complete.ToString())
                //{
                guiPayment payment = new guiPayment();
                payment.Module = this;
                payment.ShowDialog();
                //}
            }
        }

        public void DeleteItemFromPaymentItemsList()
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            entity.PaymentDetailList.RemoveSelectedRowObjectFromList();
        }

        public void UpdateCountryForInvoiceItemIn()
        {
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)CurrentModuleEntity.MainObject;
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            entity.InvoiceInItemsList.ForEach(o => o.FK_GECountryID = objInvoiceInsInfo.FK_GECountryID);
            entity.InvoiceInItemsList.GridControl.RefreshDataSource();
        }

        public void CopyItemToNewRow()
        {
            if (IsEditable())
            {
                ActionEdit();
            }
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            if (entity.InvoiceInItemsList.CurrentIndex >= 0)
            {
                APInvoiceInItemsInfo objInvoiceInItemsInfo = entity.InvoiceInItemsList[entity.InvoiceInItemsList.CurrentIndex];
                APInvoiceInItemsInfo objCopyInvoiceInItemsInfo = (APInvoiceInItemsInfo)objInvoiceInItemsInfo.Clone();
                objCopyInvoiceInItemsInfo.APInvoiceInItemID = 0;
                entity.InvoiceInItemsList.Add(objCopyInvoiceInItemsInfo);
                entity.InvoiceInItemsList.GridControl.RefreshDataSource();
                UpdateTotalCost();
            }
        }

        public void AddProductPackageItemDetails()
        {
            if (IsEditable())
            {
                ActionEdit();
            }
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)CurrentModuleEntity.MainObject;
            APInvoiceInPackageItemDetailsController objInvoiceInPackageItemDetailsController = new APInvoiceInPackageItemDetailsController();
            ICProductPackageItemDetailsController objProductPackageItemDetailsController = new ICProductPackageItemDetailsController();
            entity.InvoiceInPackageItemDetailList.Clear();
            entity.DeleteInvoiceInPackageItemDetailList.Clear();
            if (entity.InvoiceInPackageItemList.CurrentIndex < 0)
            {
                MessageBox.Show("Vui lòng tạo kiện trước khi thêm chi tiết!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            if (entity.InvoiceInPackageItemList[entity.InvoiceInPackageItemList.CurrentIndex].APInvoiceInPackageItemHasDetail == false)
            {
                MessageBox.Show("Vui lòng tích chọn xác định chi tiết trước khi thêm chi tiết!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            APInvoiceInPackageItemsInfo objInvoiceInPackageItemsInfo = (APInvoiceInPackageItemsInfo)entity.InvoiceInPackageItemList[entity.InvoiceInPackageItemList.CurrentIndex];
            if (objInvoiceInPackageItemsInfo.InvoiceInPackageItemDetailsList == null)
            {
                objInvoiceInPackageItemsInfo.InvoiceInPackageItemDetailsList = new BOSList<APInvoiceInPackageItemDetailsInfo>();
                objInvoiceInPackageItemsInfo.InvoiceInPackageItemDetailsList.InitBOSList((InvoiceInEntities)CurrentModuleEntity,
                                               TableName.APInvoiceInPackageItemsTableName,
                                               TableName.APInvoiceInPackageItemDetailsTableName,
                                               BOSList<APInvoiceInPackageItemDetailsInfo>.cstRelationForeign);
                objInvoiceInPackageItemsInfo.InvoiceInPackageItemDetailsList.ItemTableForeignKey = "FK_APInvoiceInPackageItemID";
            }
            if (objInvoiceInPackageItemsInfo.DeleteInvoiceInPackageItemDetailsList == null)
            {
                objInvoiceInPackageItemsInfo.DeleteInvoiceInPackageItemDetailsList = new BOSList<APInvoiceInPackageItemDetailsInfo>();
                objInvoiceInPackageItemsInfo.DeleteInvoiceInPackageItemDetailsList.InitBOSList((InvoiceInEntities)CurrentModuleEntity,
                                               TableName.APInvoiceInPackageItemsTableName,
                                               TableName.APInvoiceInPackageItemDetailsTableName,
                                               BOSList<APInvoiceInPackageItemDetailsInfo>.cstRelationForeign);
                objInvoiceInPackageItemsInfo.DeleteInvoiceInPackageItemDetailsList.ItemTableForeignKey = "FK_APInvoiceInPackageItemID";
            }
            List<APInvoiceInPackageItemDetailsInfo> InvoiceInPackageItemDetailsList = new List<APInvoiceInPackageItemDetailsInfo>();
            if (objInvoiceInPackageItemsInfo.FK_APPOPackageItemID > 0 && objInvoiceInPackageItemsInfo.APInvoiceInPackageItemID == 0)
            {
                entity.InvoiceInPackageItemDetailShowList.ForEach(o =>
                {
                    if (o.FK_APPOPackageItemID == objInvoiceInPackageItemsInfo.FK_APPOPackageItemID)
                        InvoiceInPackageItemDetailsList.Add(o);
                });
            }
            else if (objInvoiceInPackageItemsInfo.APInvoiceInPackageItemTemporaryID > 0 && objInvoiceInPackageItemsInfo.APInvoiceInPackageItemID == 0)
            {
                entity.InvoiceInPackageItemDetailShowList.ForEach(o =>
                {
                    if (o.FK_APInvoiceInPackageItemID == objInvoiceInPackageItemsInfo.APInvoiceInPackageItemTemporaryID)
                        InvoiceInPackageItemDetailsList.Add(o);
                });
            }
            else
                InvoiceInPackageItemDetailsList = (List<APInvoiceInPackageItemDetailsInfo>)objInvoiceInPackageItemDetailsController.GetPackageItemDetailsListByPackageItemID(objInvoiceInPackageItemsInfo.APInvoiceInPackageItemID);
            objInvoiceInPackageItemsInfo.InvoiceInPackageItemDetailsList.Clear();
            InvoiceInPackageItemDetailsList.ForEach(o =>
            {
                objInvoiceInPackageItemsInfo.InvoiceInPackageItemDetailsList.Add(o);
            });
            foreach (APInvoiceInPackageItemDetailsInfo item in objInvoiceInPackageItemsInfo.InvoiceInPackageItemDetailsList)
            {
                entity.InvoiceInPackageItemDetailList.Add(item);
            }
            guiAddProductPackageItemDetails guiFind = new guiAddProductPackageItemDetails(objInvoiceInPackageItemsInfo.InvoiceInPackageItemDetailsList);
            guiFind.Module = this;
            guiFind.ShowDialog();
            entity.RemoveOldInvoiceInPackageItemDetailItem(objInvoiceInPackageItemsInfo.InvoiceInPackageItemDetailsList);
            objInvoiceInPackageItemsInfo.InvoiceInPackageItemDetailsList.Clear();
            objInvoiceInPackageItemsInfo.DeleteInvoiceInPackageItemDetailsList.Clear();
            entity.InvoiceInPackageItemDetailList.ForEach(o =>
            {
                if (objInvoiceInPackageItemsInfo.APInvoiceInPackageItemID != 0)
                    o.FK_APInvoiceInPackageItemID = objInvoiceInPackageItemsInfo.APInvoiceInPackageItemID;
                else
                    o.FK_APInvoiceInPackageItemID = objInvoiceInPackageItemsInfo.APInvoiceInPackageItemTemporaryID;
                o.APInvoiceInPackageItemQty = objInvoiceInPackageItemsInfo.APInvoiceInPackageItemQty;
                entity.InvoiceInPackageItemDetailShowList.Add(o);
            });
            entity.InvoiceInPackageItemDetailList.ForEach(o =>
            {
                if (objInvoiceInPackageItemsInfo.APInvoiceInPackageItemID != 0)
                    o.FK_APInvoiceInPackageItemID = objInvoiceInPackageItemsInfo.APInvoiceInPackageItemID;
                else
                    o.FK_APInvoiceInPackageItemID = objInvoiceInPackageItemsInfo.APInvoiceInPackageItemTemporaryID;
                objInvoiceInPackageItemsInfo.InvoiceInPackageItemDetailsList.Add(o);
            });
            entity.DeleteInvoiceInPackageItemDetailList.ForEach(o =>
            {
                if (objInvoiceInPackageItemsInfo.APInvoiceInPackageItemID != 0)
                    o.FK_APInvoiceInPackageItemID = objInvoiceInPackageItemsInfo.APInvoiceInPackageItemID;
                else
                    o.FK_APInvoiceInPackageItemID = objInvoiceInPackageItemsInfo.APInvoiceInPackageItemTemporaryID;
                objInvoiceInPackageItemsInfo.DeleteInvoiceInPackageItemDetailsList.Add(o);
            });
            entity.InvoiceInPackageItemList[entity.InvoiceInPackageItemList.CurrentIndex] = objInvoiceInPackageItemsInfo;
            entity.InvoiceInPackageItemDetailShowList.GridControl.RefreshDataSource();
        }

        public APInvoiceInPackageItemsInfo GenInvoiceInPackageItemFromProductPackageItem(ICProductPackageItemsInfo objProductPackageItemsInfo)
        {
            APInvoiceInPackageItemsInfo objInvoiceInPackageItemsInfo = new APInvoiceInPackageItemsInfo();
            if (objProductPackageItemsInfo != null)
            {
                objInvoiceInPackageItemsInfo.APInvoiceInPackageItemNo = objProductPackageItemsInfo.ICProductPackageItemNo;
                objInvoiceInPackageItemsInfo.APInvoiceInPackageItemName = objProductPackageItemsInfo.ICProductPackageItemName;
                objInvoiceInPackageItemsInfo.APInvoiceInPackageItemLength = objProductPackageItemsInfo.ICProductPackageItemLength;
                objInvoiceInPackageItemsInfo.APInvoiceInPackageItemWidth = objProductPackageItemsInfo.ICProductPackageItemWidth;
                objInvoiceInPackageItemsInfo.APInvoiceInPackageItemHeight = objProductPackageItemsInfo.ICProductPackageItemHeight;
                objInvoiceInPackageItemsInfo.APInvoiceInPackageItemHasDetail = objProductPackageItemsInfo.ICProductPackageItemHasDetail;
                objInvoiceInPackageItemsInfo.APInvoiceInPackageItemQty = objProductPackageItemsInfo.ICProductPackageItemQty;
                objInvoiceInPackageItemsInfo.APProductPackageMethodType = objProductPackageItemsInfo.ICProductPackageMethodType;
            }
            return objInvoiceInPackageItemsInfo;
        }

        public APInvoiceInPackageItemDetailsInfo GenInvoiceInPackageItemDetailFromProductPackageItemDetail(ICProductPackageItemDetailsInfo objProductPackageItemDetailsInfo, decimal APInvoiceInPackageItemQty)
        {
            APInvoiceInPackageItemDetailsInfo objInvoiceInPackageItemDetailsInfo = new APInvoiceInPackageItemDetailsInfo();
            if (objProductPackageItemDetailsInfo != null)
            {
                objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailNo = objProductPackageItemDetailsInfo.ICProductPackageItemDetailNo;
                objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailName = objProductPackageItemDetailsInfo.ICProductPackageItemDetailName;
                objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailFinalProductNo = objProductPackageItemDetailsInfo.ICProductPackageItemDetailFinalProductNo;
                objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailFinalProductName = objProductPackageItemDetailsInfo.ICProductPackageItemDetailFinalProductName;
                objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailFinalProductDesc = objProductPackageItemDetailsInfo.ICProductPackageItemDetailFinalProductDesc;
                objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailQty = objProductPackageItemDetailsInfo.ICProductPackageItemDetailQty;
                objInvoiceInPackageItemDetailsInfo.FK_ICProductID = objProductPackageItemDetailsInfo.FK_ICProductID;
                objInvoiceInPackageItemDetailsInfo.FK_ICProductDetailID = objProductPackageItemDetailsInfo.FK_ICProductDetailID;
                objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemQty = APInvoiceInPackageItemQty;
            }
            return objInvoiceInPackageItemDetailsInfo;
        }

        public void SetDefaultInvoiceInPackageItemList()
        {
            if (IsEditable())
            {
                ActionEdit();
            }
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)CurrentModuleEntity.MainObject;
            if (entity.InvoiceInPackageItemList.Count > entity.CountItemsInInvoiceInPackageItemList)
            {
                entity.CountItemsInInvoiceInPackageItemList++;
                if (entity.InvoiceInPackageItemList[entity.InvoiceInPackageItemList.CurrentIndex] != null)
                {
                    entity.InvoiceInPackageItemList[entity.InvoiceInPackageItemList.CurrentIndex].APInvoiceInPackageItemTemporaryID = entity.InvoiceInPackageItemList.Count;
                }
            }
            entity.InvoiceInPackageItemList.GridControl.RefreshDataSource();
        }

        public void DeleteItemInvoiceInPackageItemsList()
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInPackageItemsInfo objInvoiceInPackageItemsInfo = entity.InvoiceInPackageItemList[entity.InvoiceInPackageItemList.CurrentIndex];
            List<APInvoiceInPackageItemDetailsInfo> InvoiceInPackageItemDetailShowRemoveList = new List<APInvoiceInPackageItemDetailsInfo>();
            if (objInvoiceInPackageItemsInfo.APInvoiceInPackageItemTemporaryID > 0 && objInvoiceInPackageItemsInfo.InvoiceInPackageItemDetailsList != null)
            {
                foreach (APInvoiceInPackageItemDetailsInfo objInvoiceInPackageItemDetailsInfo in objInvoiceInPackageItemsInfo.InvoiceInPackageItemDetailsList)
                {
                    entity.InvoiceInPackageItemDetailShowList.ForEach(x =>
                    {
                        if (x.FK_APInvoiceInPackageItemID == objInvoiceInPackageItemDetailsInfo.FK_APInvoiceInPackageItemID)
                            entity.InvoiceInPackageItemDetailShowList.Remove(x);
                    });
                }
            }
            else
            {
                entity.InvoiceInPackageItemDetailShowList.ForEach(x =>
                {
                    if (x.FK_APPOPackageItemID > 0)
                    {
                        if (x.FK_APPOPackageItemID == objInvoiceInPackageItemsInfo.FK_APPOPackageItemID)
                            InvoiceInPackageItemDetailShowRemoveList.Add(x);
                    }
                    else if (x.FK_APInvoiceInPackageItemID == objInvoiceInPackageItemsInfo.APInvoiceInPackageItemID)
                        InvoiceInPackageItemDetailShowRemoveList.Add(x);
                });
                InvoiceInPackageItemDetailShowRemoveList.ForEach(x =>
                {
                    if (x.FK_APPOPackageItemID > 0)
                    {
                        if (x.FK_APPOPackageItemID == objInvoiceInPackageItemsInfo.FK_APPOPackageItemID)
                            entity.InvoiceInPackageItemDetailShowList.Remove(x);
                    }
                    else if (x.FK_APInvoiceInPackageItemID == objInvoiceInPackageItemsInfo.APInvoiceInPackageItemID)
                        entity.InvoiceInPackageItemDetailShowList.Remove(x);
                });
            }
            entity.InvoiceInPackageItemList.RemoveSelectedRowObjectFromList();
            entity.InvoiceInPackageItemDetailShowList.GridControl.RefreshDataSource();
        }

        public void InvalidateReportList()
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            ICProductDetailsController objProductDetailsController = new ICProductDetailsController();
            ICProductsController objProductsController = new ICProductsController();
            entity.InvoiceInPackageItemDetailReportList.Clear();
            entity.InvoiceInItemsList.ForEach(o =>
            {
                if (o.APInvoiceInItemHasProductPackage == false)
                    return;
                ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(o.FK_ICProductID);
                List<ICProductDetailsInfo> productDetailsList = objProductDetailsController.GetListProductDetailByProductID(o.FK_ICProductID);
                if (productDetailsList.Count > 0)
                {
                    productDetailsList.ForEach(x =>
                    {
                        APInvoiceInPackageItemDetailsInfo objInvoiceInPackageItemDetailsInfo = new APInvoiceInPackageItemDetailsInfo();
                        objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailFinalProductNo = objProductsInfo.ICProductNo;
                        objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailFinalProductName = o.APInvoiceInItemProductDesc;
                        objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailFinalProductDesc = o.APInvoiceInItemProductDesc;
                        objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailQty = o.APInvoiceInItemProductQty * x.ICProductDetailProductQty;
                        objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailNo = x.ICProductDetailProductNo;
                        objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailName = x.ICProductDetailProductName;
                        objInvoiceInPackageItemDetailsInfo.APInvoiceInItemQty = o.APInvoiceInItemProductQty * x.ICProductDetailProductQty;
                        objInvoiceInPackageItemDetailsInfo.APInvoiceInItemPackagedQty1 = 0;
                        entity.InvoiceInPackageItemDetailShowList.ForEach(i =>
                        {
                            if (i.APInvoiceInPackageItemDetailNo == objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailNo && i.APInvoiceInPackageItemDetailFinalProductNo == objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailFinalProductNo)
                                objInvoiceInPackageItemDetailsInfo.APInvoiceInItemPackagedQty1 += i.APInvoiceInPackageItemQty * i.APInvoiceInPackageItemDetailQty;
                        });
                        entity.InvoiceInPackageItemDetailReportList.Add(objInvoiceInPackageItemDetailsInfo);
                    });
                }
                else
                {
                    APInvoiceInPackageItemDetailsInfo objInvoiceInPackageItemDetailsInfo = new APInvoiceInPackageItemDetailsInfo();
                    objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailFinalProductNo = objProductsInfo.ICProductNo;
                    objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailFinalProductName = o.APInvoiceInItemProductDesc;
                    objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailFinalProductDesc = o.APInvoiceInItemProductDesc;
                    objInvoiceInPackageItemDetailsInfo.APInvoiceInItemPackagedQty1 = 0;
                    objInvoiceInPackageItemDetailsInfo.APInvoiceInItemQty = o.APInvoiceInItemProductQty;
                    entity.InvoiceInPackageItemDetailShowList.ForEach(i =>
                    {
                        if (i.APInvoiceInPackageItemDetailNo == objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailNo && i.APInvoiceInPackageItemDetailFinalProductNo == objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailFinalProductNo)
                            objInvoiceInPackageItemDetailsInfo.APInvoiceInItemPackagedQty1 += i.APInvoiceInPackageItemQty * i.APInvoiceInPackageItemDetailQty;
                    });
                    entity.InvoiceInPackageItemDetailReportList.Add(objInvoiceInPackageItemDetailsInfo);
                }
            });
            entity.InvoiceInPackageItemDetailReportList.GridControl.RefreshDataSource();
        }

        public void UpdateItemDetailShowListQty(decimal APInvoiceInPackageItemQty)
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInPackageItemDetailsController objInvoiceInPackageItemDetailsController = new APInvoiceInPackageItemDetailsController();
            APInvoiceInPackageItemsInfo objInvoiceInPackageItemsInfo = (APInvoiceInPackageItemsInfo)entity.InvoiceInPackageItemList[entity.InvoiceInPackageItemList.CurrentIndex];
            if (objInvoiceInPackageItemsInfo.APInvoiceInPackageItemID == 0 && objInvoiceInPackageItemsInfo.FK_APPOPackageItemID > 0)
            {
                entity.InvoiceInPackageItemDetailShowList.ForEach(o =>
                {
                    if (o.FK_APPOPackageItemID == objInvoiceInPackageItemsInfo.FK_APPOPackageItemID)
                        o.APInvoiceInPackageItemQty = APInvoiceInPackageItemQty;
                });
            }
            else if (objInvoiceInPackageItemsInfo.APInvoiceInPackageItemID == 0 && objInvoiceInPackageItemsInfo.InvoiceInPackageItemDetailsList != null)
            {
                foreach (APInvoiceInPackageItemDetailsInfo objInvoiceInPackageItemDetailsInfo in objInvoiceInPackageItemsInfo.InvoiceInPackageItemDetailsList)
                {
                    entity.InvoiceInPackageItemDetailShowList.ForEach(o =>
                    {
                        if (o.FK_APInvoiceInPackageItemID == objInvoiceInPackageItemsInfo.APInvoiceInPackageItemTemporaryID)
                            o.APInvoiceInPackageItemQty = APInvoiceInPackageItemQty;
                    });
                }
            }
            else if (objInvoiceInPackageItemsInfo.APInvoiceInPackageItemID > 0)
            {
                List<APInvoiceInPackageItemDetailsInfo> PackageItemDetailList = objInvoiceInPackageItemDetailsController.GetPackageItemDetailsListByPackageItemID(objInvoiceInPackageItemsInfo.APInvoiceInPackageItemID);
                PackageItemDetailList.ForEach(x =>
                {
                    entity.InvoiceInPackageItemDetailShowList.ForEach(o =>
                    {
                        if (o.FK_APInvoiceInPackageItemID == x.FK_APInvoiceInPackageItemID)
                            o.APInvoiceInPackageItemQty = APInvoiceInPackageItemQty;
                    });
                });
            }
            entity.InvoiceInPackageItemDetailShowList.GridControl.RefreshDataSource();
        }

        public bool ApprovedInvoiceIn()
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)CurrentModuleEntity.MainObject;
            ICProductDetailsController objProductDetailsController = new ICProductDetailsController();
            APInvoiceInPackageItemDetailsController objInvoiceInPackageItemDetailsController = new APInvoiceInPackageItemDetailsController();
            ICProductsController objProductsController = new ICProductsController();
            bool isValid = true;
            entity.InvoiceInItemsList.ForEach(o =>
            {
                if (o.APInvoiceInItemHasProductPackage == false)
                    return;
                if (isValid == false)
                    return;
                ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectByID(o.FK_ICProductID);
                List<ICProductDetailsInfo> productDetailsList = objProductDetailsController.GetListProductDetailByProductID(o.FK_ICProductID);
                if (productDetailsList != null)
                {
                    productDetailsList.ForEach(x =>
                    {
                        if (isValid == false)
                            return;
                        entity.InvoiceInPackageItemDetailShowList.ForEach(i =>
                        {
                            if (i.FK_ICProductID == x.FK_ICProductID && i.FK_ICProductDetailID == x.Id && isValid == true)
                            {
                                x.APInvoiceInItemPackagedQty1Compare += i.APInvoiceInPackageItemQty * i.APInvoiceInPackageItemDetailQty;
                                x.APInvoiceInPackageItemDetailFinalProductName = i.APInvoiceInPackageItemDetailFinalProductName;
                            }
                        });
                        if (o.APInvoiceInItemProductQty * x.ICProductDetailProductQty != x.APInvoiceInItemPackagedQty1Compare)
                        {
                            isValid = false;
                            DialogResult result = MessageBox.Show("Số lượng chi tiết " + x.ICProductDetailProductName + " của thành phẩm " + x.APInvoiceInPackageItemDetailFinalProductName + " hiện đang bị chênh lệch so với trong cấu hình chi tiết Module thành phẩm!\nVui lòng điều chỉnh lại!", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return;
                        }
                    });
                }
            });
            return isValid;
        }

        public APInvoiceInPackageItemsInfo GenInvoiceInPackageItemFromPOPackageItem(APPOPackageItemsInfo objPOPackageItemsInfo)
        {
            APInvoiceInPackageItemsInfo objInvoiceInPackageItemsInfo = new APInvoiceInPackageItemsInfo();
            if (objPOPackageItemsInfo != null)
            {
                objInvoiceInPackageItemsInfo.APInvoiceInPackageItemNo = objPOPackageItemsInfo.APPOPackageItemNo;
                objInvoiceInPackageItemsInfo.APInvoiceInPackageItemName = objPOPackageItemsInfo.APPOPackageItemName;
                objInvoiceInPackageItemsInfo.APInvoiceInPackageItemLength = objPOPackageItemsInfo.APPOPackageItemLength;
                objInvoiceInPackageItemsInfo.APInvoiceInPackageItemWidth = objPOPackageItemsInfo.APPOPackageItemWidth;
                objInvoiceInPackageItemsInfo.APInvoiceInPackageItemHeight = objPOPackageItemsInfo.APPOPackageItemHeight;
                objInvoiceInPackageItemsInfo.APInvoiceInPackageItemHasDetail = objPOPackageItemsInfo.APPOPackageItemHasDetail;
                objInvoiceInPackageItemsInfo.APInvoiceInPackageItemQty = objPOPackageItemsInfo.APPOPackageItemQty;
                objInvoiceInPackageItemsInfo.APProductPackageMethodType = objPOPackageItemsInfo.APProductPackageMethodType;
                objInvoiceInPackageItemsInfo.FK_APPOPackageItemID = objPOPackageItemsInfo.APPOPackageItemID;

            }
            return objInvoiceInPackageItemsInfo;
        }

        public APInvoiceInPackageItemDetailsInfo GenInvoiceInPackageItemDetailFromPOPackageItemDetail(APPOPackageItemDetailsInfo objPOPackageItemDetailsInfo)
        {
            APInvoiceInPackageItemDetailsInfo objInvoiceInPackageItemDetailsInfo = new APInvoiceInPackageItemDetailsInfo();
            if (objInvoiceInPackageItemDetailsInfo != null)
            {
                objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailNo = objPOPackageItemDetailsInfo.APPOPackageItemDetailNo;
                objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailName = objPOPackageItemDetailsInfo.APPOPackageItemDetailName;
                objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailFinalProductNo = objPOPackageItemDetailsInfo.APPOPackageItemDetailFinalProductNo;
                objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailFinalProductName = objPOPackageItemDetailsInfo.APPOPackageItemDetailFinalProductName;
                objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailFinalProductDesc = objPOPackageItemDetailsInfo.APPOPackageItemDetailFinalProductDesc;
                objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemDetailQty = objPOPackageItemDetailsInfo.APPOPackageItemDetailQty;
                objInvoiceInPackageItemDetailsInfo.FK_ICProductID = objPOPackageItemDetailsInfo.FK_ICProductID;
                objInvoiceInPackageItemDetailsInfo.FK_ICProductDetailID = objPOPackageItemDetailsInfo.FK_ICProductDetailID;
                objInvoiceInPackageItemDetailsInfo.APInvoiceInPackageItemQty = objPOPackageItemDetailsInfo.APPOPackageItemQty;
                objInvoiceInPackageItemDetailsInfo.FK_APPOPackageItemID = objPOPackageItemDetailsInfo.FK_APPOPackageItemID;
            }
            return objInvoiceInPackageItemDetailsInfo;
        }

        public bool CheckExistInInvoiceInItemList(int productID)
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            return entity.InvoiceInItemsList.Where(o => o.FK_ICProductID == productID).Count() > 0;
        }

        public void ChangeProject(int projectID)
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo mainObject = (APInvoiceInsInfo)CurrentModuleEntity.MainObject;
            mainObject.FK_PMProjectID = projectID;
        }

        public void ActionPosted()
        {
            if (!CheckLock()) return;
            APInvoiceInsInfo mainObject = (APInvoiceInsInfo)CurrentModuleEntity.MainObject;
            CurrentModuleEntity.SetPropertyChangeEventLock(false);
            mainObject.APInvoiceInPostedStatus = PostedTransactionStatus.Posted.ToString();
            string tableName = mainObject.ToString().Replace("BOSERP.", string.Empty).Replace("Info", string.Empty);
            GLHelper.UpdatePostedStatus(this.Name, tableName, mainObject.APInvoiceInID, PostedTransactionStatus.Posted.ToString());
            GLHelper.PostedTransactions(this.Name, mainObject.APInvoiceInID, ModulePostingType.Accounting, ModulePostingType.Stock, ModulePostingType.Purchase, ModulePostingType.TransitIn, ModulePostingType.InvoiceInTrans);
            Invalidate(mainObject.APInvoiceInID);
            CurrentModuleEntity.SetPropertyChangeEventLock(true);
            InvalidateToolbar();
        }

        public void ActionUnPosted()
        {
            if (!CheckLock()) return;
            APInvoiceInsInfo mainObject = (APInvoiceInsInfo)CurrentModuleEntity.MainObject;
            CurrentModuleEntity.SetPropertyChangeEventLock(false);
            mainObject.APInvoiceInPostedStatus = PostedTransactionStatus.UnPosted.ToString();
            string tableName = mainObject.ToString().Replace("BOSERP.", string.Empty).Replace("Info", string.Empty);
            GLHelper.UpdatePostedStatus(this.Name, tableName, mainObject.APInvoiceInID, PostedTransactionStatus.UnPosted.ToString());
            GLHelper.UnPostedTransactions(this.Name, mainObject.APInvoiceInID, ModulePostingType.Accounting, ModulePostingType.Stock, ModulePostingType.Purchase, ModulePostingType.TransitIn, ModulePostingType.InvoiceInTrans);
            Invalidate(mainObject.APInvoiceInID);
            CurrentModuleEntity.SetPropertyChangeEventLock(true);
            InvalidateToolbar();
        }

        public override void ModuleAfterCompleted()
        {
            ActionPosted();
            base.ModuleAfterCompleted();
        }

        public void ActionPrintInvoiceInAccount()
        {
            if (Toolbar.IsNullOrNoneAction() && Toolbar.CurrentObjectID > 0)
            {
                RPInvoiceIn report = new RPInvoiceIn();
                InitInvoiceInReport(report);
                guiReportPreview reviewer = new guiReportPreview(report);
                reviewer.Show();
            }
        }

        public void InitInvoiceInReport(XtraReport report)
        {
            BRBranchsController objBranchsController = new BRBranchsController();
            BRBranchsInfo objBranchsInfo = (BRBranchsInfo)objBranchsController.GetObjectByID(BOSApp.CurrentCompanyInfo.FK_BRBranchID);
            if (objBranchsInfo != null)
            {
                XRLabel label = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xr_lblBRBranchAddressLine3"];
                if (label != null)
                {
                    label.Text = objBranchsInfo.BRBranchContactAddressLine3;
                }
            }

            APInvoiceInsController objInvoiceInsController = new APInvoiceInsController();
            report.DataSource = objInvoiceInsController.GetInvoiceInsByInvoiceInID(Toolbar.CurrentObjectID);
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)objInvoiceInsController.GetObjectByID(Toolbar.CurrentObjectID);
            if (objInvoiceInsInfo.APInvoiceInTotalCost != 0)
            {
                XRLabel amountWord = (XRLabel)report.Bands[BandKind.ReportFooter].Controls["xr_lblAmountWord"];
                if (amountWord != null)
                    amountWord.Text = ConvertAmountToWord.ReadAmount(objInvoiceInsInfo.APInvoiceInTotalCost.ToString(), objInvoiceInsInfo.FK_GECurrencyID);
            }

            XRLabel CompanyBankName = (XRLabel)report.Bands[BandKind.ReportHeader].Controls["xrLabel3"];
            if (CompanyBankName != null)
                CompanyBankName.Text = BOSApp.CurrentCompanyInfo.CSCompanyDesc.ToString();
        }

        public virtual void ChangeItemMeasureUnit(APInvoiceInItemsInfo item)
        {
            ICProductMeasureUnitsController controller = new ICProductMeasureUnitsController();
            ICProductMeasureUnitsInfo measureUnit = controller.GetProductMeasureUnitByProductIDAndMeasureUnitID(item.FK_ICProductID, item.FK_ICMeasureUnitID);
            item.APInvoiceInItemProductFactor = (measureUnit != null && measureUnit.ICProductMeasureUnitFactor > 0)
                                                ? measureUnit.ICProductMeasureUnitFactor
                                                : 1;

            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            entity.SetProductPriceByProductUnitPrice(item);
            entity.InvoiceInItemsList.GridControl.RefreshDataSource();
        }

        public void ChangeACEInvoiceTypeNo(int invoiceID)
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)CurrentModuleEntity.MainObject;
            ACEInvoiceTypesController objEInvoiceTypesController = new ACEInvoiceTypesController();
            ACEInvoiceTypesInfo objEInvoiceTypesInfo = (ACEInvoiceTypesInfo)objEInvoiceTypesController.GetObjectByID(invoiceID);
            if (objEInvoiceTypesInfo != null)
            {
                objInvoiceInsInfo.APInvoiceInVATFormNo = objEInvoiceTypesInfo.ACEInvoiceTypeTemplateCode;
                objInvoiceInsInfo.APInvoiceInVATSymbol = objEInvoiceTypesInfo.ACEInvoiceTypeSeries;
            }
            entity.UpdateMainObjectBindingSource();
        }

        public void ChangeInvoiceInType(string invoiceInType)
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)CurrentModuleEntity.MainObject;
            objInvoiceInsInfo.APInvoiceInType = invoiceInType;
            entity.UpdateMainObjectBindingSource();
            ChangeDisplayAndDataItemListGridView();
        }

        public void ChangeDisplayAndDataItemListGridView()
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)entity.MainObject;

            bool isWoodType = BOSApp.IsWoodTypeDocument(objInvoiceInsInfo.APInvoiceInType, entity.InvoiceInItemsList.FirstOrDefault());
            ChangeDisplayColumnByWoodType(entity.InvoiceInItemsList.GridControl, isWoodType);

            if (!isWoodType)
                entity.InvoiceInItemsList.ForEach(o1 => o1.APInvoiceInItemLotNo = string.Empty);
        }

        public void ChangeColumnEditAbleGridViewByActionCreateFrom()
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)entity.MainObject;

            if (InvoiceInItemGridControl != null && objInvoiceInsInfo != null)
            {
                GridView gridView = (GridView)InvoiceInItemGridControl.MainView;
                if (gridView != null)
                {
                    GridColumn qtyColumn = gridView.Columns["APInvoiceInItemProductUnitCost"];
                    if (qtyColumn != null)
                    {
                        if (objInvoiceInsInfo.STToolbarActionName == "FromPurchaseOrder")
                            qtyColumn.OptionsColumn.AllowEdit = false;
                        else
                            qtyColumn.OptionsColumn.AllowEdit = true;
                    }
                }
            }
        }

        public void UpdateProductAttributeTTMTForInvoiceInItem()
        {
            APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)CurrentModuleEntity.MainObject;
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            entity.InvoiceInItemsList.ForEach(o => o.FK_ICProductAttributeTTMTID = objInvoiceInsInfo.FK_ICProductAttributeTTMTID);
            entity.InvoiceInItemsList.GridControl.RefreshDataSource();
        }

        public void ChangePackNo()
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo mainObject = (APInvoiceInsInfo)CurrentModuleEntity.MainObject;

            if (!Toolbar.IsNullOrNoneAction())
            {
                if (entity.InvoiceInItemsList.Count > 0)
                {
                    if (MessageBox.Show(PurchaseReceiptLocalizedResources.ConfirmChangeItemLotNoMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        foreach (APInvoiceInItemsInfo item in entity.InvoiceInItemsList)
                        {
                            if (BOSApp.IsWoodTypeDocument(mainObject.APInvoiceInType, entity.InvoiceInItemsList.FirstOrDefault()))
                                item.APInvoiceInItemLotNo = mainObject.APInvoiceInPackNo;
                            else
                                item.APInvoiceInItemProductSerialNo = mainObject.APInvoiceInPackNo;
                        }
                        entity.InvoiceInItemsList.GridControl.RefreshDataSource();
                    }
                }
            }
        }
        public override void ChangeDisplayColumnByWoodType(BOSGridControl gridControl, bool isWoodType)
        {
            base.ChangeDisplayColumnByWoodType(gridControl, isWoodType);
            if (gridControl == null)
                return;
            GridView gridView = (GridView)gridControl.MainView;
            if (gridView == null)
                return;
            if (InvoiceInItemGridControl != null)
            {
                InvoiceInItemGridControl.LoadGridViewForRoundWood(isWoodType);
            }
        }

        public void SetColumnFormat(GridColumn column, string formatType)
        {
            DevExpress.XtraEditors.Repository.RepositoryItem rep = column.ColumnEdit;

            DevExpress.XtraEditors.Repository.RepositoryItemTextEdit repText = (DevExpress.XtraEditors.Repository.RepositoryItemTextEdit)rep;

            repText.Mask.EditMask = formatType;
            repText.Mask.UseMaskAsDisplayFormat = true;

            repText.DisplayFormat.FormatString = formatType;
        }

        public override bool ActionCancelComplete()
        {
            if (!CheckLock()) return false;
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo mainObject = (APInvoiceInsInfo)CurrentModuleEntity.MainObject;

            ACDocumentsController objDocumentsController = new ACDocumentsController();
            List<ACDocumentsInfo> documentsList = objDocumentsController.GetRelativeDocumentListByInvoiceInID(mainObject.APInvoiceInID);

            if (documentsList.Count() > 0)
            {
                MessageBox.Show(string.Format("Không thể mở chứng từ này do đã tạo các chứng từ sau: -{0}", string.Join("\n-", documentsList.Select(o => o.ACDocumentNo).ToArray())), CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false;
            }

            ActionUnPosted();

            bool isComplete = base.ActionCancelComplete();
            if (isComplete)
            {
                InvalidateToolbar();
            }
            return isComplete;
        }

        public override void ModuleAfterCancelCompleted()
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            entity.ModuleAfterCancelCompleted();
        }

        public override void ActionDelete()
        {

            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo mainObject = (APInvoiceInsInfo)CurrentModuleEntity.MainObject.Clone();

            ACDocumentsController objDocumentsController = new ACDocumentsController();
            List<ACDocumentsInfo> documentsList = objDocumentsController.GetRelativeDocumentListByInvoiceInID(mainObject.APInvoiceInID);

            if (documentsList.Count() > 0)
            {
                MessageBox.Show(string.Format("Không thể mở chứng từ này do đã tạo các chứng từ sau: -{0}", string.Join("\n-", documentsList.Select(o => o.ACDocumentNo).ToArray())), CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            ActionUnPosted();

            base.ActionDelete();
        }

        public bool IsEditableObject()
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            bool isCreateFromManual = entity.InvoiceInItemsList.Count(o1 => o1.FK_APPurchaseOrderItemID > 0 || o1.FK_ICReceiptItemID > 0) == 0;
            return isCreateFromManual;
        }

        public override void SetValuesFromAccountingObject()
        {
            BOSDbUtil dbUtil = new BOSDbUtil();
            string mainTableName = BOSUtil.GetTableNameFromBusinessObject(CurrentModuleEntity.MainObject);
            string mainTablePrefix = mainTableName.Substring(0, 2);
            ACObjectsController objObjectsController = new ACObjectsController();
            string objectKey = dbUtil.GetPropertyStringValue(CurrentModuleEntity.MainObject, "ACObjectAccessKey");
            if (!string.IsNullOrEmpty(objectKey))
            {
                ACObjectsInfo obj = objObjectsController.GetObjectByAccessKey(objectKey);
                obj = objObjectsController.GetObjectByIDAndType(obj.ACObjectID, obj.ACObjectType);
                if (obj != null)
                {
                    dbUtil.SetPropertyValue(CurrentModuleEntity.MainObject, "FK_ACObjectID", obj.ACObjectID);
                    dbUtil.SetPropertyValue(CurrentModuleEntity.MainObject, mainTablePrefix + "ObjectType", obj.ACObjectType);
                }
                else
                {
                    dbUtil.SetPropertyValue(CurrentModuleEntity.MainObject, "FK_ACObjectID", 0);
                    dbUtil.SetPropertyValue(CurrentModuleEntity.MainObject, mainTablePrefix + "ObjectType", string.Empty);
                }
            }
            objectKey = dbUtil.GetPropertyStringValue(CurrentModuleEntity.MainObject, "ACAssObjectAccessKey");
            if (!string.IsNullOrEmpty(objectKey))
            {
                ACObjectsInfo obj = objObjectsController.GetObjectByAccessKey(objectKey);
                obj = objObjectsController.GetObjectByIDAndType(obj.ACObjectID, obj.ACObjectType);
                if (obj != null)
                {
                    dbUtil.SetPropertyValue(CurrentModuleEntity.MainObject, "FK_ACAssObjectID", obj.ACObjectID);
                    dbUtil.SetPropertyValue(CurrentModuleEntity.MainObject, mainTablePrefix + "AssObjectType", obj.ACObjectType);
                    dbUtil.SetPropertyValue(CurrentModuleEntity.MainObject, "ACObjectName", obj.ACObjectName);
                }
                else
                {
                    dbUtil.SetPropertyValue(CurrentModuleEntity.MainObject, "FK_ACAssObjectID", 0);
                    dbUtil.SetPropertyValue(CurrentModuleEntity.MainObject, mainTablePrefix + "AssObjectType", string.Empty);
                    dbUtil.SetPropertyValue(CurrentModuleEntity.MainObject, "ACObjectName", string.Empty);
                }
            }
        }

        public void InitProductPictureImage(int productID)
        {
            if (productID > 0 && ProductPicturePictureBox != null)
            {
                ProductPicturePictureBox.Image = BOSApp.GetProductPictureImageByProductID(productID);
                ProductPicturePictureBox.Properties.SizeMode = DevExpress.XtraEditors.Controls.PictureSizeMode.Zoom;
            }
        }
        public bool CheckValidQty()
        {
            bool isValid = true;
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo mainObject = (APInvoiceInsInfo)entity.MainObject;
            ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
            APPurchaseOrderItemsController objPurchaseOrderItemsController = new APPurchaseOrderItemsController();
            List<APInvoiceInItemsInfo> mergeList;
            String message = String.Empty;
            if (mainObject.APInvoiceInChannel == InvoiceInChannel.Import.ToString())
            {
                List<APPurchaseOrderItemsInfo> listPurchaseOrderItems = objPurchaseOrderItemsController.GetRemainPurchaseOrderItemForInvoiceIn(string.Join(",", entity.InvoiceInItemsList.Select(o => o.FK_APPurchaseOrderItemID.ToString()).Distinct().ToArray()), mainObject.APInvoiceInID);
                if (listPurchaseOrderItems != null && listPurchaseOrderItems.Count > 0)
                {
                    mergeList = entity.InvoiceInItemsList.Where(o => o.FK_APPurchaseOrderItemID > 0)
                                                       .GroupBy(o => new { o.FK_APPurchaseOrderItemID, o.APInvoiceInItemProductDesc })
                                                       .Select(o => new APInvoiceInItemsInfo()
                                                       {
                                                           FK_APPurchaseOrderItemID = o.Key.FK_APPurchaseOrderItemID,
                                                           APInvoiceInItemProductDesc = o.Key.APInvoiceInItemProductDesc,
                                                           APInvoiceInItemProductExchangeQty = o.Sum(o1 => o1.APInvoiceInItemProductExchangeQty)
                                                       }).ToList();
                    message = "Các sản phẩm sau có số lượng vượt quá đơn mua hàng:";
                    APPurchaseOrderItemsInfo objPurchaseOrderitemsInfo;
                    mergeList.ForEach(o =>
                    {
                        objPurchaseOrderitemsInfo = listPurchaseOrderItems.FirstOrDefault(o1 => o1.APPurchaseOrderItemID == o.FK_APPurchaseOrderItemID);
                        if (objPurchaseOrderitemsInfo != null && objPurchaseOrderitemsInfo.APPurchaseOrderItemProductExchangeQty < Math.Round(o.APInvoiceInItemProductExchangeQty,5))
                        {
                            message += Environment.NewLine + "-" + o.APInvoiceInItemProductDesc + ". Số lượng có thể làm hoá đơn là: " + objPurchaseOrderitemsInfo.APPurchaseOrderItemProductExchangeQty;
                            isValid = false;
                        }
                    });
                }
            }
            else if (mainObject.APInvoiceInChannel == InvoiceInChannel.HinterLand.ToString())
            {
                List<ICReceiptItemsInfo> listReceiptItems = objReceiptItemsController.GetRemainReceiptItemForInvoiceIn(string.Join(",", entity.InvoiceInItemsList.Select(o => o.FK_ICReceiptItemID.ToString()).Distinct().ToArray()), mainObject.APInvoiceInID);
                if (listReceiptItems != null && listReceiptItems.Count > 0)
                {
                    mergeList = entity.InvoiceInItemsList.Where(o => o.FK_ICReceiptItemID > 0)
                                                       .GroupBy(o => new { o.FK_ICReceiptItemID, o.APInvoiceInItemProductDesc })
                                                       .Select(o => new APInvoiceInItemsInfo()
                                                       {
                                                           FK_ICReceiptItemID = o.Key.FK_ICReceiptItemID,
                                                           APInvoiceInItemProductDesc = o.Key.APInvoiceInItemProductDesc,
                                                           APInvoiceInItemProductExchangeQty = o.Sum(o1 => o1.APInvoiceInItemProductExchangeQty)
                                                       }).ToList();
                    message = "Các sản phẩm sau có số lượng vượt quá nhập kho mua hàng:";
                    ICReceiptItemsInfo objReceiptItemsInfo;
                    mergeList.ForEach(o =>
                    {
                        objReceiptItemsInfo = listReceiptItems.FirstOrDefault(o1 => o1.Id == o.FK_ICReceiptItemID);
                        if (objReceiptItemsInfo != null && Math.Round(objReceiptItemsInfo.ICReceiptItemProductExchangeQty,5) < Math.Round(o.APInvoiceInItemProductExchangeQty, 5))
                        {
                            message += Environment.NewLine + "-" + o.APInvoiceInItemProductDesc + ". Số lượng có thể làm hoá đơn là: " + objReceiptItemsInfo.ICReceiptItemProductExchangeQty;
                            isValid = false;
                        }
                    });
                }
            }
            if (!isValid)
            {
                MessageBox.Show(message, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return isValid;
            }
            return isValid;
        }

        public bool CheckAvailablePurchaseDocumentDate()
        {
            InvoiceInEntities entity = (InvoiceInEntities)CurrentModuleEntity;
            APInvoiceInsInfo mainObject = (APInvoiceInsInfo)entity.MainObject;

            ACDocumentsController objDocumentsController = new ACDocumentsController();
            List<ACDocumentsInfo> documentsList = objDocumentsController.CheckAvailablePurchaseDocumentDate(mainObject.APInvoiceInDate,
                                                                                                            string.Join(",", entity.InvoiceInItemsList.Select(o1 => o1.FK_ICReceiptItemID.ToString()).ToArray()),                                                                                    
                                                                                                            string.Join(",", entity.InvoiceInItemsList.Select(o1 => o1.FK_APPurchaseOrderItemID.ToString()).ToArray()));
            if (documentsList.Count() > 0)
            {
                MessageBox.Show("Ngày chứng từ hiện tại đang nhỏ hơn các chứng từ sau: \n+"
                            + string.Join("+", documentsList.Select(o1 => string.Format("{0}:{1}\n", o1.ACDocumentNo, o1.ACDocumentDate.ToShortDateString())).ToArray()), CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }

            documentsList = objDocumentsController.CheckAvailablePurchaseDocumentDate(mainObject.APInvoiceInVATDate,
                                                                                                            string.Join(",", entity.InvoiceInItemsList.Select(o1 => o1.FK_ICReceiptItemID.ToString()).ToArray()),
                                                                                                            string.Join(",", entity.InvoiceInItemsList.Select(o1 => o1.FK_APPurchaseOrderItemID.ToString()).ToArray()));
            if (documentsList.Count() > 0)
            {
                MessageBox.Show("Ngày hóa đơn hiện tại đang nhỏ hơn các chứng từ sau: \n+"
                            + string.Join("+", documentsList.Select(o1 => string.Format("{0}:{1}\n", o1.ACDocumentNo, o1.ACDocumentDate.ToShortDateString())).ToArray()), CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }
            return true;
        }
    }
    #endregion
}
