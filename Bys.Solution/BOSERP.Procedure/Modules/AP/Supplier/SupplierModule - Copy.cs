using BOSCommon;
using BOSCommon.Constants;
using BOSComponent;
using BOSLib;
using DevExpress.XtraEditors;
using Localization;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows.Forms;
using System.Drawing;
using System.IO;
using System.Collections.Generic;
using System.Reflection;
using System.Data.OleDb;
using Excel = Microsoft.Office.Interop.Excel;
using BOSCommon.Extensions;
using BOSCommon.Constants;
using DevExpress.XtraEditors;

namespace BOSERP.Modules.Supplier
{
    #region SupplierModule
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:SupplierModule
    //Created Date:Friday, March 14, 2008
    //-----------------------------------------------------------

    public class SupplierModule : BaseModuleERP
    {
        #region Constants
        public const string cstSupplierTypeStandard = "Standard";
        public const string cstSupplierTypeAlternative = "Alternative";

        public const string cstOwingInvoiceGridControlName = "fld_dgcOwingInvoices";
        public const string cstPaymentDetailsGridControlName = "fld_dgcInvoicePaymentDetails";
        public const string SupplierContactsGridControlName = "fld_dgcAPSupplierContacts";
        public const string OwingByCurrencyGridControlName = "fld_dgcOwingByCurrency";
        public const string SupplierPaymentsGridControlName = "fld_dgcSupplierPayments";
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
        public const string SearchBranchLookupEditControlName = "fld_lkeFK_BRBranchID1";
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], END

        public const string CountryLookupEditControlName = "fld_lkeFK_GECountryID";
        public const string CountryPersonContactLookupEditControlName = "fld_lkeFK_GECountryID1";

        //NHANH [ADD] [27/10/2015] START
        public const string SupplierDepartmentControlName = "fld_dgcAPSupplierDepartments";
        //NHANH [ADD] [27/10/2015] END
        #endregion

        public List<GECountrysInfo> CountryList = new List<GECountrysInfo>();
        public List<GEStateProvincesInfo> ProvinceList = new List<GEStateProvincesInfo>();
        public int PreNativeStateProvinceSelected = 0;
        public int PreIDCardStateProvinceSelected = 0;
        public int PreStateProvinceSelected = 0;
        public int PreDisctrictSelected = 0;
        public int PreCountrySelected = 0;
        public int PreNationalitySelected = 0;
        public int PreReligionSelected = 0;
        private string FilePath { get; set; }

        #region Variables
        private DateEdit HistorySearchFrom;
        private DateEdit HistorySearchTo;
        private BOSGridControl PurchaseOrderHistoryGridControl;
        private BOSGridControl ReceiptHistoryGridControl;
        private BOSGridControl ReturnHistoryGridControl;
        private BOSDateEdit OwingSearchFromDateEdit;
        private BOSDateEdit OwingSearchToDateEdit;
        private BOSTextBox OwingInvoiceNoTextEdit;
        private BOSTextBox OwingSupplierInvoiceNoTextEdit;

        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
        public BOSLookupEdit SearchBranchLookupEditControl;
        public List<ADDataViewPermissionsInfo> CurrentModuleDataViewPermissionList;
        public List<BRBranchsInfo> BranchList;
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], END

        #endregion

        public SupplierModule()
        {
            Name = "Supplier";
            CurrentModuleEntity = new SupplierEntities();
            CurrentModuleEntity.Module = this;
            InitializeModule();

            HistorySearchFrom = (DateEdit)Controls["fld_dteHistoryDateFrom"];
            if (HistorySearchFrom != null)
                HistorySearchFrom.DateTime = BOSUtil.GetYearBeginDate();
            HistorySearchTo = (DateEdit)Controls["fld_dteHistoryDateTo"];
            if (HistorySearchTo != null)
                HistorySearchTo.DateTime = BOSUtil.GetYearEndDate();
            PurchaseOrderHistoryGridControl = (BOSGridControl)Controls["fld_dgcAPPurchaseOrders"];
            ReceiptHistoryGridControl = (BOSGridControl)Controls["fld_dgcICReceipts"];
            ReturnHistoryGridControl = (BOSGridControl)Controls["fld_dgcAPReturnSuppliers"];

            OwingSearchFromDateEdit = (BOSDateEdit)Controls["fld_dteOwingDateFrom"];
            if (OwingSearchFromDateEdit != null)
                OwingSearchFromDateEdit.DateTime = BOSUtil.GetYearBeginDate();
            OwingSearchToDateEdit = (BOSDateEdit)Controls["fld_dteOwingDateTo"];
            if (OwingSearchToDateEdit != null)
                OwingSearchToDateEdit.DateTime = BOSUtil.GetYearEndDate();
            OwingInvoiceNoTextEdit = (BOSTextBox)Controls["fld_txtAPInvoiceInNo"];
            if (OwingInvoiceNoTextEdit != null)
                OwingSupplierInvoiceNoTextEdit = (BOSTextBox)Controls["fld_txtAPInvoiceInSupplierReference"];

            //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
            GetCurrentModuleDataViewPermission();
            SearchBranchLookupEditControl = (BOSLookupEdit)Controls[SearchBranchLookupEditControlName];
            SearchBranchLookupEditControl.Properties.DataSource = BranchList;
            //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], END
        }

        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], START
        public void GetCurrentModuleDataViewPermission()
        {
            CurrentModuleDataViewPermissionList = BOSApp.CurrentADDataViewPermissionList.Where(i => i.STModuleName == Name && i.ADDataViewPermissionType == ADDataViewPermissionType.Module).ToList();

            List<int> branchIDList = new List<int>();
            foreach (ADDataViewPermissionsInfo dataViewPermissionsInfo in CurrentModuleDataViewPermissionList)
            {
                branchIDList.Add(dataViewPermissionsInfo.FK_BRBranchID);
            }

            if (branchIDList.Count == 0)
            {
                BranchList = new List<BRBranchsInfo>();
            }
            else
            {
                BRBranchsController objBranchsController = new BRBranchsController();
                List<BRBranchsInfo> branchList = objBranchsController.GetAllBranches();

                BranchList = branchList.Where(i => branchIDList.IndexOf(i.BRBranchID) > -1).ToList();
            }
        }
        //NUThao [ADD] [08/04/2014] [DB centre] [Search document by BRBranchID], END

        protected override DataSet GetSearchData(ref string searchQuery)
        {
            APSuppliersController objSuppliersController = new APSuppliersController();
            APSuppliersInfo searchObject = (APSuppliersInfo)CurrentModuleEntity.SearchObject;
            //DataSet ds = objSuppliersController.GetSupplierList(searchObject.APSupplierNo,
            //                                                    BOSUtil.GetSearchString(searchObject.APSupplierName),
            //                                                    searchObject.APSupplierTypeCombo,
            //                                                    searchObject.APSupplierContactPhone,
            //                                                    BOSUtil.GetSearchString(searchObject.APSupplierContactAddressLine3),
            //                                                    searchObject.FK_BRBranchID);

            DataSet ds;
            if (SearchBranchLookupEditControl.EditValue.ToString() == "" || SearchBranchLookupEditControl.EditValue.ToString() == "0")
            {
                if (BranchList.Count == 0)
                {
                    ds = objSuppliersController.GetDataSetByID(-1);
                }
                else
                {
                    ds = objSuppliersController.GetSupplierListByListOfBranchID(searchObject.APSupplierNo,
                                                                BOSUtil.GetSearchString(searchObject.APSupplierName),
                                                                searchObject.APSupplierTypeCombo,
                                                                searchObject.APSupplierContactPhone,
                                                                BOSUtil.GetSearchString(searchObject.APSupplierContactAddressLine3),
                                                                BranchList);
                }
            }
            else
            {
                ds = objSuppliersController.GetSupplierList(searchObject.APSupplierNo,
                                                                BOSUtil.GetSearchString(searchObject.APSupplierName),
                                                                searchObject.APSupplierTypeCombo,
                                                                searchObject.APSupplierContactPhone,
                                                                BOSUtil.GetSearchString(searchObject.APSupplierContactAddressLine3),
                                                                searchObject.FK_BRBranchID);
            }

            return ds;
        }

        public override void ResetSearchObject()
        {
            base.ResetSearchObject();

            APSuppliersInfo searchObject = (APSuppliersInfo)CurrentModuleEntity.SearchObject;
            searchObject.FK_BRBranchID = BOSApp.CurrentCompanyInfo.FK_BRBranchID;
        }

        public override void Invalidate(int iObjectID)
        {
            base.Invalidate(iObjectID);
            if (HistorySearchFrom != null)
                ShowSupplierHistory();

            ShowOwingDetails();
            if (OwingSearchFromDateEdit != null)
                ShowOwingInvoices();
            if (OwingSearchFromDateEdit != null)
                ShowSupplierPayments();

        }

        public void ShowPaymentTerm()
        {
            APSuppliersInfo objSuppliersInfo = (APSuppliersInfo)CurrentModuleEntity.MainObject;
            guiPaymentTerm guiPaymentTerm = new guiPaymentTerm();
            guiPaymentTerm.Module = this;
            if (guiPaymentTerm.ShowDialog() == DialogResult.OK)
            {
                objSuppliersInfo.APSupplierPaymentTerm = guiPaymentTerm.Tag.ToString();
                CurrentModuleEntity.UpdateMainObjectBindingSource();
            }
        }
        //delete RemoveSelectSupplierDepartment    
        public void RemoveSelectSupplierDepartment()
        {
            SupplierEntities entity = (SupplierEntities)CurrentModuleEntity;
            entity.SupplierDepartmentList.RemoveSelectedRowObjectFromList();
        }

        public override void ActionNew()
        {
            base.ActionNew();
            List<APSupplierPaymentsInfo> supplierPayments = new List<APSupplierPaymentsInfo>();
            SupplierPaymentsGridControl gridControl = (SupplierPaymentsGridControl)Controls[SupplierModule.SupplierPaymentsGridControlName];
            if (gridControl != null)
                gridControl.DataSource = supplierPayments;

            if (PurchaseOrderHistoryGridControl != null)
                PurchaseOrderHistoryGridControl.DataSource = null;

            List<ICReceiptsInfo> receipts = new List<ICReceiptsInfo>();
            if (ReceiptHistoryGridControl != null)
                ReceiptHistoryGridControl.DataSource = receipts;

            List<OwingDetailsInfo> owingDetails = new List<OwingDetailsInfo>();
            OwingByCurrencyGridControl gridControl1 = (OwingByCurrencyGridControl)Controls[SupplierModule.OwingByCurrencyGridControlName];
            if (gridControl1 != null)
                gridControl1.DataSource = owingDetails;
        }
        // Save 
        public override int ActionSave()
        {
            // Save APSupplierTaxNumber
            APSuppliersInfo objSuppliersInfo = (APSuppliersInfo)CurrentModuleEntity.MainObject;
            APSupplierTypeAccountConfigsController objSupplierTypeAccountConfigsController = new APSupplierTypeAccountConfigsController();
            APSupplierTypeAccountConfigsInfo objSupplierTypeAccountConfigsInfo = objSupplierTypeAccountConfigsController.GetSupplierTypeAccountConfigByTypeND();
            if (objSupplierTypeAccountConfigsInfo != null && objSuppliersInfo.FK_APSupplierTypeAccountConfigID == objSupplierTypeAccountConfigsInfo.APSupplierTypeAccountConfigID)
            {
                bool isAccept = true;
                string value = ADConfigValueUtility.GetConfigTextByGroupAndValue("SupplierTaxNumber", "true");
                isAccept = bool.Parse(value != string.Empty? value : "false");
                if (isAccept)
                {
                    MessageBox.Show(SupplierLocalizedResources.TaxCodeNotEmpty, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return 0;
                }
            }
            APSuppliersController objSuppliersController = new APSuppliersController();
            List<APSuppliersInfo> SupplierList = new List<APSuppliersInfo>();
            SupplierList = objSuppliersController.GetAllSuppliers();

            if (!string.IsNullOrEmpty(objSuppliersInfo.APSupplierTaxNumber))
            {
                bool isInvalid = false;
                foreach (APSuppliersInfo item in SupplierList)
                {
                    if (objSuppliersInfo.APSupplierID == 0)
                    {
                        if (objSuppliersInfo.APSupplierTaxNumber == item.APSupplierTaxNumber && objSuppliersInfo.APSupplierTaxNumber.Length != 0)
                        {
                            isInvalid = true;
                            break;
                        }
                    }
                    else
                    {
                        if (objSuppliersInfo.APSupplierTaxNumber == item.APSupplierTaxNumber && objSuppliersInfo.APSupplierID != item.APSupplierID)
                        {
                            isInvalid = true;
                            break;
                        }
                    }
                }
                if (isInvalid)
                {
                    MessageBox.Show(SupplierLocalizedResources.SaveFailedMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return 0;
                }
            }
            GEStateProvincesController objStateProvincesController = new GEStateProvincesController();
            DataSet dsStateProvince;
            dsStateProvince = objStateProvincesController.GetAllDataByForeignColumn("FK_GECountryID", objSuppliersInfo.FK_GECountryID);
            List<GEStateProvincesInfo> provincesList = (List<GEStateProvincesInfo>)objStateProvincesController.GetListFromDataSet(dsStateProvince);
            if (provincesList.Count <= 0)
            {
                MessageBox.Show(SupplierLocalizedResources.ErrorStateProvinceIsNull, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return 0;
            }
            else
            {
                return base.ActionSave();
            }
        }

        #region History
        /// <summary>
        /// Show the history of a supplier by date range
        /// </summary>
        public void ShowSupplierHistory()
        {
            if (HistorySearchFrom == null) return;
            APSuppliersController objSuppliersController = new APSuppliersController();
            APSuppliersInfo objSuppliersInfo = (APSuppliersInfo)CurrentModuleEntity.MainObject;
            objSuppliersController.GetPurchaseOrderSummary(objSuppliersInfo, HistorySearchFrom.DateTime, HistorySearchTo.DateTime);
            objSuppliersController.GetInvoiceSummary(objSuppliersInfo, HistorySearchFrom.DateTime, HistorySearchTo.DateTime);
            DisplayLabelText(objSuppliersInfo);

            ShowPurchaseOrderHistory();
            ShowReceiptHistory();
        }

        /// <summary>
        /// Show the purchase order history of a supplier
        /// </summary>
        public void ShowPurchaseOrderHistory()
        {
            APPurchaseOrdersController objPurchaseOrdersController = new APPurchaseOrdersController();
            APSuppliersInfo objSuppliersInfo = (APSuppliersInfo)CurrentModuleEntity.MainObject;
            DataSet ds = objPurchaseOrdersController.GetPurchaseOrderList(objSuppliersInfo.APSupplierID, HistorySearchFrom.DateTime, HistorySearchTo.DateTime);
            if (ds.Tables.Count > 0)
            {
                PurchaseOrderHistoryGridControl.DataSource = ds.Tables[0];
            }
            else
            {
                PurchaseOrderHistoryGridControl.DataSource = null;
            }
        }

        /// <summary>
        /// Show the receipt history of a supplier
        /// </summary>
        public void ShowReceiptHistory()
        {
            ICReceiptsController objReceiptsController = new ICReceiptsController();
            APSuppliersInfo objSuppliersInfo = (APSuppliersInfo)CurrentModuleEntity.MainObject;
            List<ICReceiptsInfo> receipts = objReceiptsController.GetReceiptList(objSuppliersInfo.APSupplierID, HistorySearchFrom.DateTime, HistorySearchTo.DateTime);
            ReceiptHistoryGridControl.DataSource = receipts;
        }

        /// <summary>
        /// Show the return history of a supplier
        /// </summary>
        public void ShowReturnHistory()
        {
            APReturnSuppliersController objReturnSuppliersController = new APReturnSuppliersController();
            APSuppliersInfo objSuppliersInfo = (APSuppliersInfo)CurrentModuleEntity.MainObject;
            DataSet ds = objReturnSuppliersController.GetSupplierReturnList(objSuppliersInfo.APSupplierID, HistorySearchFrom.DateTime, HistorySearchTo.DateTime);
            if (ds.Tables.Count > 0)
            {
                ReturnHistoryGridControl.DataSource = ds.Tables[0];
            }
            else
            {
                ReturnHistoryGridControl.DataSource = null;
            }
        }
        #endregion

        #region Owing Management
        /// <summary>
        /// Called when user view supplier owing info by their search criteria        
        /// </summary>
        public void ShowSupplierOwing()
        {
            ShowOwingInvoices();
            ShowSupplierPayments();
        }

        /// <summary>
        /// Show owing details of the current supplier
        /// </summary>
        public void ShowOwingDetails()
        {
            OwingByCurrencyGridControl gridControl = (OwingByCurrencyGridControl)Controls[SupplierModule.OwingByCurrencyGridControlName];
            if (gridControl == null) return;
            APSuppliersInfo objSuppliersInfo = (APSuppliersInfo)CurrentModuleEntity.MainObject;
            APSuppliersController objSuppliersController = new APSuppliersController();
            List<OwingDetailsInfo> result = objSuppliersController.GetOwingDetailsByCurrency(objSuppliersInfo.APSupplierID);
            GECurrenciesController objCurrencyController = new GECurrenciesController();
            List<GECurrenciesInfo> currencys = objCurrencyController.GetAllCurrencys();
            List<OwingDetailsInfo> owingDetails = new List<OwingDetailsInfo>();
            foreach (GECurrenciesInfo objCurrencyInfo in currencys)
            {
                OwingDetailsInfo objOwingDetailsInfo = new OwingDetailsInfo();
                objOwingDetailsInfo.GECurrencyName = objCurrencyInfo.GECurrencyName;
                objOwingDetailsInfo.DueAmount = result.Where(od => od.FK_GECurrencyID == objCurrencyInfo.GECurrencyID).Sum(od => od.DueAmount);
                owingDetails.Add(objOwingDetailsInfo);
            }
            
            gridControl.DataSource = owingDetails;
        }

        /// <summary>
        /// Show owing invoices to the current supplier
        /// </summary>
        public void ShowOwingInvoices()
        {
            APInvoiceInsController objInvoiceInsController = new APInvoiceInsController();
            APSuppliersInfo objSuppliersInfo = (APSuppliersInfo)CurrentModuleEntity.MainObject;
            List<APInvoiceInsInfo> owingInvoices = objInvoiceInsController.GetInvoiceList(
                                                                    objSuppliersInfo.APSupplierID,
                                                                    OwingInvoiceNoTextEdit.Text,
                                                                    OwingSupplierInvoiceNoTextEdit.Text,
                                                                    null,
                                                                    OwingSearchFromDateEdit.DateTime,
                                                                    OwingSearchToDateEdit.DateTime);
            SupplierEntities entity = (SupplierEntities)CurrentModuleEntity;
            entity.OwingInvoiceList.Invalidate(owingInvoices);
            entity.OwingInvoiceList.GridControl.RefreshDataSource();
        }

        /// <summary>
        /// Show the payment details of an invoice
        /// </summary>
        /// <param name="objInvoiceInsInfo"></param>
        public void ShowPaymentDetails(APInvoiceInsInfo objInvoiceInsInfo)
        {
            APDocumentPaymentsController objDocumentPaymentsController = new APDocumentPaymentsController();
            List<APDocumentPaymentsInfo> payments = objDocumentPaymentsController.GetDocumentPaymentList(objInvoiceInsInfo.APInvoiceInID);
            SupplierEntities entity = (SupplierEntities)CurrentModuleEntity;
            entity.DocumentPaymentList.Invalidate(payments);
            entity.DocumentPaymentList.GridControl.RefreshDataSource();
        }

        /// <summary>
        /// Show the payments to the supplier
        /// </summary>
        public void ShowSupplierPayments()
        {
            SupplierPaymentsGridControl gridControl = (SupplierPaymentsGridControl)Controls[SupplierModule.SupplierPaymentsGridControlName];
            if (gridControl == null) return;
            APSupplierPaymentsController objSupplierPaymentsController = new APSupplierPaymentsController();
            APSuppliersInfo objSuppliersInfo = (APSuppliersInfo)CurrentModuleEntity.MainObject;
            List<APSupplierPaymentsInfo> supplierPayments = objSupplierPaymentsController.GetSupplierPaymentList(
                                                                    objSuppliersInfo.APSupplierID,
                                                                    OwingSearchFromDateEdit.DateTime,
                                                                    OwingSearchToDateEdit.DateTime);
            foreach (APSupplierPaymentsInfo objSupplierPaymentsInfo in supplierPayments)
            {
                if (objSuppliersInfo.APSupplierID == objSupplierPaymentsInfo.FK_APAssociatedSupplierID)
                {
                    objSupplierPaymentsInfo.FK_GECurrencyID = objSupplierPaymentsInfo.FK_GEAssCurrencyID;
                    objSupplierPaymentsInfo.APSupplierPaymentTotalAmount = objSupplierPaymentsInfo.APSupplierPaymentAssTotalAmount;
                }
            }

            
            gridControl.DataSource = supplierPayments;
        }

        /// <summary>
        /// Take payment for all owing invoices
        /// </summary>
        public void TakePayment()
        {
            SupplierEntities entity = (SupplierEntities)CurrentModuleEntity;
            entity.TakePayment();
            if (entity.OwingInvoiceList.CurrentIndex >= 0)
            {
                ShowPaymentDetails(entity.OwingInvoiceList[entity.OwingInvoiceList.CurrentIndex]);
            }
            MessageBox.Show("Take payment successfully", CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        #endregion

        #region Supplier Contact
        /// <summary>
        /// Remove selected supplier contact from grid control
        /// </summary>
        public void RemoveSelectedItemFromSupplierContactList()
        {
            SupplierEntities entity = (SupplierEntities)CurrentModuleEntity;
            entity.SupplierContactsList.RemoveSelectedRowObjectFromList();
        }

        /// <summary>
        /// Add supplier contact item to supplier contact list
        /// </summary>
        public void AddItemToSupplierContactList()
        {
            SupplierEntities entity = (SupplierEntities)CurrentModuleEntity;
            APSupplierContactsInfo objSupplierContactsInfo = (APSupplierContactsInfo)entity.ModuleObjects[TableName.APSupplierContactsTableName];
            if (string.IsNullOrEmpty(objSupplierContactsInfo.APSupplierContactName))
            {
                MessageBox.Show(SupplierLocalizedResources.ContactNameIsRequiredMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            objSupplierContactsInfo.APSupplierContactAddressLine3 = BOSUtil.GenerateFullAddress(objSupplierContactsInfo, "APSupplier", AddressType.Contact.ToString());
            entity.SupplierContactsList.AddObjectToList();
        }

        /// <summary>
        /// Change supplier contact from supplier contact grid control
        /// </summary>
        public void ChangeSelectedItemFromSupplierContactList()
        {
            SupplierEntities entity = (SupplierEntities)CurrentModuleEntity;
            entity.SupplierContactsList.ChangeObjectFromList();
        }
        #endregion

        #region Address
        public int CreateNewCountryList()
        {
            int result = -1;
            GECountrysController objGECountrysController = new GECountrysController();
            guiAddCountry guiAddCountry = new guiAddCountry();
            if (guiAddCountry.ShowDialog() == DialogResult.OK)
            {
                if (String.IsNullOrEmpty(guiAddCountry.fld_txtAttributeName.Text.Trim()))
                {
                    MessageBox.Show(SupplierLocalizedResources.CountryNameRequiredMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return result;
                }
                GECountrysInfo newGECountrysInfo = new GECountrysInfo();
                newGECountrysInfo.GECountryCode = guiAddCountry.fld_txtAttributeCode.Text;
                newGECountrysInfo.GECountryName = guiAddCountry.fld_txtAttributeName.Text;
                result = objGECountrysController.CreateObject(newGECountrysInfo);
                InvalidateCountryList();
            }
            return result;
        }
        public void InvalidateCountryList()
        {
            BOSLookupEdit CountryLookupEdit = (BOSLookupEdit)Controls[SupplierModule.CountryLookupEditControlName];
            //BOSLookupEdit CountryPersonContactLookupEdit = (BOSLookupEdit)Controls[SupplierModule.CountryPersonContactLookupEditControlName];

            // invalidate country and province
            GECountrysController objGECountrysController = new GECountrysController();
            GECountrysInfo objGECountryAddnewInfo = new GECountrysInfo();
            objGECountryAddnewInfo.GECountryID = -1;
            objGECountryAddnewInfo.GECountryName = Localization.SupplierLocalizedResources.AddNew;

            //GECountrysInfo objGECountryDummyInfo = new GECountrysInfo();
            //objGECountryDummyInfo.GECountryID = 0;
            //objGECountryDummyInfo.GECountryName = "";
            DataSet dscountry = objGECountrysController.GetAllObjects();
            List<GECountrysInfo> countrysList = (List<GECountrysInfo>)objGECountrysController.GetListFromDataSet(dscountry);
            if (dscountry.Tables.Count == 0)
            {
                countrysList = new List<GECountrysInfo>();
            }
            //countrysList.Insert(0, objGECountryDummyInfo);
            countrysList.Insert(0, objGECountryAddnewInfo);
            CountryList = countrysList;
            CountryLookupEdit.Properties.DataSource = CountryList;
            //CountryPersonContactLookupEdit.Properties.DataSource = CountryList;
        }
        public List<GEStateProvincesInfo> GetProvinceListByCountry(int countryID)
        {
            SupplierEntities entity = (SupplierEntities)CurrentModuleEntity;
            APSuppliersInfo supplier = (APSuppliersInfo)entity.MainObject;
            GEStateProvincesController objGEStateProvincesController = new GEStateProvincesController();
            GEStateProvincesInfo objGEStateProvinceAddnewInfo = new GEStateProvincesInfo();
            objGEStateProvinceAddnewInfo.GEStateProvinceID = -1;
            objGEStateProvinceAddnewInfo.GEStateProvinceName = SupplierLocalizedResources.AddNew;

            //GEStateProvincesInfo objGEStateProvinceDummyInfo = new GEStateProvincesInfo();
            //objGEStateProvinceDummyInfo.GEStateProvinceID = 0;
            //objGEStateProvinceDummyInfo.GEStateProvinceName = "";
            DataSet dsStateProvince;
            dsStateProvince = objGEStateProvincesController.GetAllDataByForeignColumn("FK_GECountryID", countryID);
            List<GEStateProvincesInfo> provincesList = (List<GEStateProvincesInfo>)objGEStateProvincesController.GetListFromDataSet(dsStateProvince);
            if (provincesList != null)
            {
                if (dsStateProvince.Tables.Count > 0)
                {
                    provincesList = (List<GEStateProvincesInfo>)objGEStateProvincesController.GetListFromDataSet(dsStateProvince);
                    if (provincesList.Count > 0)
                    {
                        supplier.FK_GEStateProvinceID = provincesList[0].GEStateProvinceID;
                    }
                }
                // provincesList.Insert(0, objGEStateProvinceDummyInfo);
                provincesList.Insert(0, objGEStateProvinceAddnewInfo);
            }
            return provincesList;

        }
        public int CreateNewSateProvinceList()
        {
            int result = -1;
            GEStateProvincesController objGEStateProvincesController = new GEStateProvincesController();
            List<GEStateProvincesInfo> StateProvinceList = new List<GEStateProvincesInfo>();
            guiAddStateProvince guiAddStateProvince = new guiAddStateProvince();
        Stamp:
            if (guiAddStateProvince.ShowDialog() == DialogResult.OK)
            {
                if (String.IsNullOrEmpty(guiAddStateProvince.fld_txtName.Text.Trim()))
                {
                    MessageBox.Show(SupplierLocalizedResources.StateProvinceNameRequiredMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return result;
                }
                GEStateProvincesInfo newGEStateProvincesInfo = new GEStateProvincesInfo();

                GECountrysController objGECountrysController = new GECountrysController();
                int newGECountrysInfo;
                newGECountrysInfo = objGECountrysController.GetObjectIDByName(guiAddStateProvince.fld_cmbCountry.Text);

                newGEStateProvincesInfo.FK_GECountryID = newGECountrysInfo;
                newGEStateProvincesInfo.GEStateProvinceCode = guiAddStateProvince.fld_txtCode.Text;
                newGEStateProvincesInfo.GEStateProvinceName = guiAddStateProvince.fld_txtName.Text;
                List<GEStateProvincesInfo> listGEStateProvince = objGEStateProvincesController.getAllAliveStateProvinces();
                bool isExist = false;
                foreach (var state in listGEStateProvince)
                {

                    if (newGEStateProvincesInfo.GEStateProvinceName == state.GEStateProvinceName ||
                        newGEStateProvincesInfo.GEStateProvinceCode == state.GEStateProvinceCode)
                    {
                        isExist = true;
                        break;
                    }
                }
                if (isExist)
                {
                    MessageBox.Show("Tỉnh/TP đã tồn tại", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    goto Stamp;
                }
                result = objGEStateProvincesController.CreateObject(newGEStateProvincesInfo);
                InvalidateStateProvinceList();
            }
            return result;
        }
        public void InvalidateStateProvinceList()
        {
            // invalidate country and province

            GEStateProvincesController objGEStateProvincesController = new GEStateProvincesController();
            GEStateProvincesInfo objGEStateProvinceAddnewInfo = new GEStateProvincesInfo();
            objGEStateProvinceAddnewInfo.GEStateProvinceID = -1;
            objGEStateProvinceAddnewInfo.GEStateProvinceName = Localization.SupplierLocalizedResources.AddNew;

            //GEStateProvincesInfo objGEStateProvinceDummyInfo = new GEStateProvincesInfo();
            //objGEStateProvinceDummyInfo.GEStateProvinceID = 0;
            //objGEStateProvinceDummyInfo.GEStateProvinceName = "";
            DataSet dsStateProvince;
            dsStateProvince = objGEStateProvincesController.GetAllObjects();
            List<GEStateProvincesInfo> provincesList = (List<GEStateProvincesInfo>)objGEStateProvincesController.GetListFromDataSet(dsStateProvince);
            if (dsStateProvince.Tables.Count == 0)
            {
                provincesList = new List<GEStateProvincesInfo>();

            }
            //provincesList.Insert(0, objGEStateProvinceDummyInfo);
            provincesList.Insert(0, objGEStateProvinceAddnewInfo);
            ProvinceList = provincesList;
        }
        public List<GEDistrictsInfo> GetDistrictListByStateProvinceID(int provinceID)
        {
            SupplierEntities entity = (SupplierEntities)CurrentModuleEntity;
            GEDistrictsController objGEDistrictsController = new GEDistrictsController();

            GEDistrictsInfo objGEDistrictAddnewInfo = new GEDistrictsInfo();
            objGEDistrictAddnewInfo.GEDistrictID = -1;
            objGEDistrictAddnewInfo.GEDistrictName = SupplierLocalizedResources.AddNew;

            GEDistrictsInfo objGEDistrictDummyInfo = new GEDistrictsInfo();
            objGEDistrictDummyInfo.GEDistrictID = 0;
            objGEDistrictDummyInfo.GEDistrictName = "";

            DataSet dsDisctrict = objGEDistrictsController.GetAllDataByForeignColumn("FK_GEStateProvinceID", provinceID);

            List<GEDistrictsInfo> districtsList = (List<GEDistrictsInfo>)objGEDistrictsController.GetListFromDataSet(dsDisctrict);
            if (dsDisctrict.Tables.Count == 0)
            {
                districtsList = new List<GEDistrictsInfo>();

            }
            districtsList.Insert(0, objGEDistrictDummyInfo);
            districtsList.Insert(1, objGEDistrictAddnewInfo);
            return districtsList;
        }
        public int CreateNewDistrictList()
        {
            int result = -1;
            GEDistrictsController objGEDistrictsController = new GEDistrictsController();
            guiAddDistrict guiAddDistrict = new guiAddDistrict();
            if (guiAddDistrict.ShowDialog() == DialogResult.OK)
            {
                if (String.IsNullOrEmpty(guiAddDistrict.fld_txtName.Text.Trim()))
                {
                    MessageBox.Show(SupplierLocalizedResources.DisctrictNameRequiredMessage, CommonLocalizedResources.MessageBoxDefaultCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return result;
                }
                GEDistrictsInfo newGEDistrictsInfo = new GEDistrictsInfo();

                GEStateProvincesController objGEStateProvincesController = new GEStateProvincesController();
                int newGEStateProvincesInfoID;
                newGEStateProvincesInfoID = objGEStateProvincesController.GetObjectIDByName(guiAddDistrict.fld_cmbStateProvince.Text);

                newGEDistrictsInfo.GEDistrictCode = guiAddDistrict.fld_txtCode.Text;
                newGEDistrictsInfo.GEDistrictName = guiAddDistrict.fld_txtName.Text;
                newGEDistrictsInfo.FK_GEStateProvinceID = newGEStateProvincesInfoID;
                result = objGEDistrictsController.CreateObject(newGEDistrictsInfo);
                //result = true;
            }
            return result;

        }
        #endregion


        public void ChangeSupplierTypeAccountConfig(int customerTypeAccountConfigID)
        {
            SupplierEntities entity = (SupplierEntities)CurrentModuleEntity;
            APSuppliersInfo objSuppliersInfo = (APSuppliersInfo)entity.MainObject;
            objSuppliersInfo.FK_APSupplierTypeAccountConfigID = customerTypeAccountConfigID;

            APSupplierTypeAccountConfigsInfo ctac = new APSupplierTypeAccountConfigsInfo();
            APSupplierTypeAccountConfigsController ctacsController = new APSupplierTypeAccountConfigsController();
            if (customerTypeAccountConfigID > 0)
            {
                ctac = (APSupplierTypeAccountConfigsInfo)ctacsController.GetObjectByID(customerTypeAccountConfigID);
                if (ctac != null)
                {
                    objSuppliersInfo.FK_ACAccountDepositID = ctac.FK_ACAccountDepositID;
                    objSuppliersInfo.FK_ACAccountPurchaseID = ctac.FK_ACAccountPurchaseID;
                    objSuppliersInfo.FK_ACAccountSaleID = ctac.FK_ACAccountSaleID;
                }
            }

            entity.UpdateMainObjectBindingSource();
        }

        #region Import
        public void ImportSuppliers()
        {
            string filePath = string.Empty;
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Filter = TransferLocalizedResources.DialogFilter;
            if (dialog.ShowDialog() == DialogResult.Cancel)
                return;
            filePath = dialog.FileName;
            string extension = Path.GetExtension(filePath);
            string connectionString = @"Provider=Microsoft.Jet.OLEDB.4.0;Data Source='" + filePath + "';Extended Properties=\"Excel 8.0;HDR=YES;\"";
            if (extension.Equals(".xlsx"))
            {
                connectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source='" + filePath + "';Extended Properties=\"Excel 12.0;HDR=YES;\"";
            }
            BOSProgressBar.Start("Đang khởi tạo dữ liệu");
            DataSet ds = GetDataFromExcel(filePath, connectionString);
            BOSProgressBar.Close();
            InitializeImport(ds);
        }

        public void InitializeImport(DataSet ds)
        {
            AAColumnAliasController objColumnAliasController = new AAColumnAliasController();
            List<AAColumnAliasInfo> aliasImportsList = BOSApp.LstColumnAlias.Where(o => o.AATableName == "IPSuppliers").ToList();
            List<IPSuppliersInfo> suppliersList = new List<IPSuppliersInfo>();
            //List<IPDepartmentAttributesInfo> departmentAttributesList = new List<IPDepartmentAttributesInfo>();
            IPSuppliersInfo objSuppliersInfo = new IPSuppliersInfo();
            //IPDepartmentAttributesInfo objDepartmentAttributesInfo = new IPDepartmentAttributesInfo();

            DataTable dt = ds.Tables[0];
            if (dt != null)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    objSuppliersInfo = (IPSuppliersInfo)GetObjectFromDataRow(dr, objSuppliersInfo.GetType(), aliasImportsList);
                    if (objSuppliersInfo != null && !string.IsNullOrWhiteSpace(objSuppliersInfo.IPSupplierNo))
                    {
                        suppliersList.Add(objSuppliersInfo);
                    }
                }
            }

            //aliasImportsList = BOSApp.LstColumnAlias.Where(o => o.AATableName == "IPDepartmentAttributes").ToList();
            //dt = ds.Tables[1];
            //if (dt != null)
            //{
            //    foreach (DataRow dr in dt.Rows)
            //    {
            //        objDepartmentAttributesInfo = (IPDepartmentAttributesInfo)GetObjectFromDataRow(dr, objDepartmentAttributesInfo.GetType(), aliasImportsList);
            //        if (objDepartmentAttributesInfo != null && !string.IsNullOrWhiteSpace(objDepartmentAttributesInfo.ICDepartmentAttributeValueValue))
            //        {
            //            departmentAttributesList.Add(objDepartmentAttributesInfo);
            //        }
            //    }
            //}

            guiImportSuppliers guiImport = new guiImportSuppliers(suppliersList);
            guiImport.Module = this;
            DialogResult rs = guiImport.ShowDialog();
            if (rs != DialogResult.OK)
                return;
            BOSProgressBar.Start("Đang lưu dữ liệu");
            SaveImportItemsList(guiImport.SuppliersList);
            BOSProgressBar.Close();
        }

        public void SaveImportItemsList(List<IPSuppliersInfo> listImportSuppliersInfo)
        {
            APSuppliersController objSuppliersController = new APSuppliersController();
            //BRBranchsController objBranchsController = new BRBranchsController();
            //GECountrysController objCountrysController = new GECountrysController();
            //GEStateProvincesController objStateProvincesController = new GEStateProvincesController();
            //GEDistrictsController objDistrictsController = new GEDistrictsController();
            //APSupplierTypeAccountConfigsController objSupplierTypeAccountConfigsController = new APSupplierTypeAccountConfigsController();
            //ACAccountsController objAccountsController = new ACAccountsController();
            //GECurrenciesController objCurrenciesController = new GECurrenciesController();
            //GEPaymentTermsController objPaymentTermsController = new GEPaymentTermsController();
            //ADConfigValuesController objConfigValuesController = new ADConfigValuesController();

            //List<BRBranchsInfo> listBranchsInfo = new List<BRBranchsInfo>();
            //List<GECountrysInfo> listCountrysInfo = new List<GECountrysInfo>();
            //List<GEStateProvincesInfo> listStateProvincesInfo = new List<GEStateProvincesInfo>();
            //List<GEDistrictsInfo> listDistrictsInfo = new List<GEDistrictsInfo>();
            //List<APSupplierTypeAccountConfigsInfo> listSupplierTypeAccountConfigsInfo = new List<APSupplierTypeAccountConfigsInfo>();
            //List<ACAccountsInfo> listAccountsInfo = new List<ACAccountsInfo>();
            //List<GECurrenciesInfo> listCurrenciesInfo = new List<GECurrenciesInfo>();
            //List<GEPaymentTermsInfo> listPaymentTermsInfo = new List<GEPaymentTermsInfo>();
            //List<ADConfigValuesInfo> listConfigValuesInfo = new List<ADConfigValuesInfo>();

            //listBranchsInfo = objBranchsController.GetAllBranches();
            //listCountrysInfo = objCountrysController.GetAllCountryAlive();
            //listStateProvincesInfo = objStateProvincesController.getAllAliveStateProvinces();
            //listDistrictsInfo = objDistrictsController.GetAllDistricts();
            //listSupplierTypeAccountConfigsInfo = objSupplierTypeAccountConfigsController.GetAllAliveSupplierTypeAccountConfig();
            //listAccountsInfo = objAccountsController.GetAllAccountList();
            //listCurrenciesInfo = objCurrenciesController.GetAllCurrencys();
            //listPaymentTermsInfo = objPaymentTermsController.GetAllPaymentTerms();
            //listConfigValuesInfo = objConfigValuesController.GetAllConfigValues();

            //listImportSuppliersInfo.ForEach(o => {
            //    o.BRBranchID = !String.IsNullOrWhiteSpace(o.FK_BRBranchID) && listBranchsInfo.Exists(x => x.BRBranchName == o.FK_BRBranchID) ? listBranchsInfo.Where(x => x.BRBranchName == o.FK_BRBranchID).FirstOrDefault().BRBranchID : 0;
            //    o.GECountryID = !String.IsNullOrWhiteSpace(o.FK_GECountryID) && listCountrysInfo.Exists(x => x.GECountryName == o.FK_GECountryID) ? listCountrysInfo.Where(x => x.GECountryName == o.FK_GECountryID).FirstOrDefault().GECountryID : 0;
            //    o.GEStateProvinceID = !String.IsNullOrWhiteSpace(o.FK_GEStateProvinceID) && listStateProvincesInfo.Exists(x => x.GEStateProvinceName == o.FK_GEStateProvinceID) ? listStateProvincesInfo.Where(x => x.GEStateProvinceName == o.FK_GEStateProvinceID).FirstOrDefault().GEStateProvinceID : 0;
            //    o.GEDistrictID = !String.IsNullOrWhiteSpace(o.FK_GEDistrictID) && listDistrictsInfo.Exists(x => x.GEDistrictName == o.FK_GEDistrictID) ? listDistrictsInfo.Where(x => x.GEDistrictName == o.FK_GEDistrictID).FirstOrDefault().GEDistrictID : 0;
            //    o.APSupplierTypeAccountConfigID = !String.IsNullOrWhiteSpace(o.FK_APSupplierTypeAccountConfigID) && listSupplierTypeAccountConfigsInfo.Exists(x => x.APSupplierTypeAccountConfigName == o.FK_APSupplierTypeAccountConfigID) ? listSupplierTypeAccountConfigsInfo.Where(x => x.APSupplierTypeAccountConfigName == o.FK_APSupplierTypeAccountConfigID).FirstOrDefault().APSupplierTypeAccountConfigID : 0;
            //    o.ACAccountID = !String.IsNullOrWhiteSpace(o.FK_ACAccountID) && listAccountsInfo.Exists(x => x.ACAccountNo == o.FK_ACAccountID) ? listAccountsInfo.Where(x => x.ACAccountNo == o.FK_ACAccountID).FirstOrDefault().ACAccountID : 0;
            //    o.GECurrencyID = !String.IsNullOrWhiteSpace(o.FK_GECurrencyID) && listCurrenciesInfo.Exists(x => x.GECurrencyNo == o.FK_GECurrencyID) ? listCurrenciesInfo.Where(x => x.GECurrencyNo == o.FK_GECurrencyID).FirstOrDefault().GECurrencyID : 0;
            //    o.GEPaymentTermID = !String.IsNullOrWhiteSpace(o.FK_GEPaymentTermID) && listPaymentTermsInfo.Exists(x => x.GEPaymentTermName == o.FK_GEPaymentTermID) ? listPaymentTermsInfo.Where(x => x.GEPaymentTermName == o.FK_GEPaymentTermID).FirstOrDefault().GEPaymentTermID : 0;
            //    o.ACAccountSaleID = !String.IsNullOrWhiteSpace(o.FK_ACAccountSaleID) && listAccountsInfo.Exists(x => x.ACAccountNo == o.FK_ACAccountSaleID) ? listAccountsInfo.Where(x => x.ACAccountNo == o.FK_ACAccountSaleID).FirstOrDefault().ACAccountID : 0;
            //    o.ACAccountPurchaseID = !String.IsNullOrWhiteSpace(o.FK_ACAccountPurchaseID) && listAccountsInfo.Exists(x => x.ACAccountNo == o.FK_ACAccountPurchaseID) ? listAccountsInfo.Where(x => x.ACAccountNo == o.FK_ACAccountPurchaseID).FirstOrDefault().ACAccountID : 0;
            //    o.SupplierBankAccountCurrency1 = !String.IsNullOrWhiteSpace(o.IPSupplierBankAccountCurrency1) && listCurrenciesInfo.Exists(x => x.GECurrencyNo == o.IPSupplierBankAccountCurrency1) ? listCurrenciesInfo.Where(x => x.GECurrencyNo == o.IPSupplierBankAccountCurrency1).FirstOrDefault().GECurrencyID : 0;
            //    o.SupplierBankAccountCurrency2 = !String.IsNullOrWhiteSpace(o.IPSupplierBankAccountCurrency2) && listCurrenciesInfo.Exists(x => x.GECurrencyNo == o.IPSupplierBankAccountCurrency2) ? listCurrenciesInfo.Where(x => x.GECurrencyNo == o.IPSupplierBankAccountCurrency2).FirstOrDefault().GECurrencyID : 0;
            //    o.SupplierOtherType = !String.IsNullOrWhiteSpace(o.IPSupplierOtherType) && listConfigValuesInfo.Exists(x => x.ADConfigKeyGroup == ConfigValueGroup.SupplierOtherType.ToString() && x.ADConfigText == o.IPSupplierOtherType) ? listConfigValuesInfo.Where(x => x.ADConfigKeyGroup == ConfigValueGroup.SupplierOtherType.ToString() && x.ADConfigText == o.IPSupplierOtherType).FirstOrDefault().ADConfigKeyValue : "";
            //    o.SupplierTypeCombo = !String.IsNullOrWhiteSpace(o.IPSupplierTypeCombo) && listConfigValuesInfo.Exists(x => x.ADConfigKeyGroup == ConfigValueGroup.SupplierType.ToString() && x.ADConfigText == o.IPSupplierTypeCombo) ? listConfigValuesInfo.Where(x => x.ADConfigKeyGroup == ConfigValueGroup.SupplierType.ToString() && x.ADConfigText == o.IPSupplierTypeCombo).FirstOrDefault().ADConfigKeyValue : "";
            //    o.PaymentMethodCombo = !String.IsNullOrWhiteSpace(o.APPaymentMethodCombo) && listConfigValuesInfo.Exists(x => x.ADConfigKeyGroup == ConfigValueGroup.PaymentMethod.ToString() && x.ADConfigText == o.APPaymentMethodCombo) ? listConfigValuesInfo.Where(x => x.ADConfigKeyGroup == ConfigValueGroup.PaymentMethod.ToString() && x.ADConfigText == o.APPaymentMethodCombo).FirstOrDefault().ADConfigKeyValue : "";
            //});
            #region Savesuppliers
            //listSuppliersInfo.InitBOSList(this.CurrentModuleEntity,
            //                                    TableName.ICDepartmentsTableName,
            //                                    TableName.ICsuppliersTableName,
            //                                    BOSList<APSuppliersInfo>.cstRelationForeign);
            //listSuppliersInfo.ItemTableForeignKey = "FK_ICDepartmentID";

            APSuppliersInfo item = new APSuppliersInfo();
            IPSuppliersInfo checkGroupParent = new IPSuppliersInfo();

            listImportSuppliersInfo.ForEach(o =>
            {
                item = new APSuppliersInfo();
                item.APSupplierNo = o.IPSupplierNo;
                item.APSupplierName = o.IPSupplierName;
                item.APSupplierOtherType = o.SupplierOtherType;
                item.APSupplierTypeCombo = o.SupplierTypeCombo;
                item.APSupplierStartDate = o.IPSupplierStartDate;
                item.APSupplierContactPhone = o.IPSupplierContactPhone;
                item.APSupplierContactPhone1 = o.IPSupplierContactPhone1;
                item.APSupplierContactFax = o.IPSupplierContactFax;
                item.FK_BRBranchID = o.BRBranchID;
                item.APSupplierWebsite = o.IPSupplierWebsite;
                item.FK_GECountryID = o.GECountryID;
                item.FK_GEStateProvinceID = o.GEStateProvinceID;
                item.FK_GEDistrictID = o.GEDistrictID;
                item.APSupplierContactAddressPostalCode = o.IPSupplierContactAddressPostalCode;
                item.APSupplierActiveCheck = o.IPSupplierActiveCheck;
                item.APSuppliersDiscountType = o.IPSuppliersDiscountType;
                item.APSupplierNoOfOldSys = o.IPSupplierNoOfOldSys;
                item.APSupplierSWIFTCode = o.IPSupplierSWIFTCode;
                item.FK_APSupplierTypeAccountConfigID = o.APSupplierTypeAccountConfigID;
                item.FK_ACAccountID = o.ACAccountID;
                item.FK_ACAccountSaleID = o.ACAccountSaleID;
                item.FK_ACAccountPurchaseID = o.ACAccountPurchaseID;
                item.APPaymentMethodCombo = o.PaymentMethodCombo;
                item.APSupplierContactAddressLine1 = o.IPSupplierContactAddressLine1;
                item.APSupplierContactEmail1 = o.IPSupplierContactEmail1;
                item.APSupplierTaxNumber = o.IPSupplierTaxNumber;
                item.FK_GECurrencyID = o.GECurrencyID;
                item.APSupplierDueDays = o.IPSupplierDueDays;
                item.FK_GEPaymentTermID = o.GEPaymentTermID;
                item.APSupplierBankName = o.IPSupplierBankName;
                item.APSupplierBankCode = o.IPSupplierBankCode;
                item.APSupplierBankAccount1 = o.IPSupplierBankAccount1;
                item.APSupplierBankAccount2 = o.IPSupplierBankAccount2;
                item.APSupplierBankAccountCurrency1 = o.SupplierBankAccountCurrency1;
                item.APSupplierBankAccountCurrency2 = o.SupplierBankAccountCurrency2;
                item.IsPaymentLocked = o.IsPaymentLocked;
                item.IsBuyingLocked = o.IsBuyingLocked;
                objSuppliersController.CreateObject(item);
            });
            #endregion
        }

        public DataSet GetDataFromExcel(string filePath, string connectionString)
        {
            DataSet ds = new DataSet();
            try
            {
                List<string> sheetNames = new List<string>();
                OleDbDataAdapter command;

                string commandTemplate = "SELECT * FROM [{0}]";
                string commandRun = string.Empty;
                using (OleDbConnection cn = new OleDbConnection(connectionString))
                {
                    cn.Open();
                    System.Data.DataTable dt = cn.GetSchema("Tables");
                    foreach (DataRow dr in dt.Rows)
                    {
                        sheetNames.Add(dr["TABLE_NAME"].ToString());
                    }
                    sheetNames.ForEach(o =>
                    {
                        commandRun = string.Format(commandTemplate, o);
                        command = new System.Data.OleDb.OleDbDataAdapter(commandRun, cn);
                        command.TableMappings.Add("Table", o);
                        command.Fill(ds);
                    });
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
            return ds;
        }

        public object GetObjectFromDataRow(DataRow row, Type type, List<AAColumnAliasInfo> aliasList)
        {
            object obj = type.InvokeMember("", System.Reflection.BindingFlags.CreateInstance, null, null, null);
            string columnName = string.Empty;
            AAColumnAliasInfo objColumnAliasInfo = new AAColumnAliasInfo();
            decimal decimalValue = 0;
            bool isConverter = false;
            foreach (DataColumn column in row.Table.Columns)
            {
                isConverter = false;
                object objValue = row[column];
                objColumnAliasInfo = aliasList.Where(o => o.AAColumnAliasCaption.ToLower().Trim() == column.ColumnName.ToLower().Trim()).FirstOrDefault();
                if (objColumnAliasInfo == null)
                    continue;

                PropertyInfo property = obj.GetType().GetProperty(objColumnAliasInfo.AAColumnAliasName);
                if (property != null)
                    property.SetValue(obj, ToPropertyDataType(column.DataType, property.PropertyType, objValue), null);
            }
            return obj;
        }

        public object ToPropertyDataType(Type fromType, Type toType, object objValue)
        {
            if (toType.Equals(typeof(string)) || toType.Equals(typeof(String)))
            {
                return objValue == null ? string.Empty : objValue.ToString().Trim();
            }
            if (objValue == null)
                return objValue;

            if (fromType.Equals(toType))
                return objValue;

            if (toType.Equals(typeof(decimal)) || toType.Equals(typeof(Decimal)))
            {
                decimal value = 0;
                Decimal.TryParse(objValue.ToString(), out value);
                return Math.Round(value, 5, MidpointRounding.AwayFromZero);
            }
            if (toType.Equals(typeof(int)))
            {
                decimal value = 0;
                Decimal.TryParse(objValue.ToString(), out value);
                return (int)value;
            }
            if (toType.Equals(typeof(bool)) || toType.Equals(typeof(Boolean)))
            {
                return !string.IsNullOrWhiteSpace(objValue.ToString());
            }
            return objValue;
        }
        #endregion
    }
    #endregion
}