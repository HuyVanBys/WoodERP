using System;
using System.Collections.Generic;
using System.Data;


namespace BOSLib
{
    #region ADConfigValues
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ADConfigValuesController
    //Created Date:Samstag, 2. Juni 2007
    //-----------------------------------------------------------

    public class ADConfigValuesController : BaseBusinessController
    {
        public ADConfigValuesController()
        {
            dal = new DALBaseProvider("ADConfigValues", typeof(ADConfigValuesInfo));
        }

        public DataSet GetADConfigValuesByGroup(String strADConfigKeyGroup)
        {
            return dal.GetDataSet("ADConfigValues_SelectByADConfigKeyGroup", strADConfigKeyGroup);
        }

        public List<String> GetADConfigValueGroups()
        {
            List<String> lstADConfigValueGroups = new List<string>();
            DataSet ds = dal.GetDataSet("ADConfigValues_SelectADConfigValueGroups");
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    lstADConfigValueGroups.Add(row["ADConfigKeyGroup"].ToString());
                }
            }
            ds.Dispose();
            return lstADConfigValueGroups;
        }

        public ADConfigValuesInfo GetObjectByConfigKey(String configKey)
        {
            String sql = String.Format("SELECT * FROM ADConfigValues WHERE AAStatus = 'Alive' AND ADConfigKey = N'{0}'", configKey);
            DataSet ds = dal.GetDataSet(sql);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ADConfigValuesInfo objConfigValuesInfo = (ADConfigValuesInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                ds.Dispose();
                return objConfigValuesInfo;
            }
            return null;
        }

        /// <summary>
        /// Get ADConfigValuesInfo by the group and value
        /// </summary>
        /// <param name="group">ADConfigKeyGroup</param>
        /// <param name="value">ADConfigValue</param>
        /// <returns></returns>
        public ADConfigValuesInfo GetObjectByGroupAndValue(string group, string value)
        {
            DataSet ds = dal.GetDataSet("ADConfigValues_GetObjectByGroupAndValue", group, value);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ADConfigValuesInfo objConfigValuesInfo = (ADConfigValuesInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                ds.Dispose();
                return objConfigValuesInfo;
            }
            return null;
        }

        /// <summary>
        /// Get a config value by its key
        /// </summary>
        /// <returns>Config value</returns>
        public object GetValueByConfigKey(string configKey)
        {
            ADConfigValuesInfo configValue = GetObjectByConfigKey(configKey);
            if (configValue != null)
            {
                return configValue.ADConfigKeyValue;
            }
            return null;
        }

        public string GetKeyValueByConfigKey(string configKey)
        {
            ADConfigValuesInfo configValue = GetObjectByConfigKey(configKey);
            if (configValue != null)
            {
                return configValue.ADConfigKeyValue;
            }
            return null;
        }

        public DataSet GetActiveConfigValuesByADConfigKeyGroup(String strADConfigKeyGroup)
        {
            return dal.GetDataSet("ADConfigValues_GetConfigValuesByADConfigKeyGroup", strADConfigKeyGroup);
        }
        public DataSet GetAllActiveConfigValues()
        {
            return dal.GetDataSet("SELECT * FROM ADConfigValues WHERE AAStatus = 'Alive' AND IsActive = 1 ");
        }

        public void RemoveConfigValuesByConfigKeyGroup(String strADConfigKeyGroup)
        {
            dal.ExecuteStoredProcedure("ADConfigValues_RemoveConfigValuesByConfigKeyGroup", strADConfigKeyGroup);
        }

        public List<ADConfigValuesInfo> GetADConfigValuesByKeyGroup(String strADConfigKeyGroup)
        {
            DataSet ds = dal.GetDataSet("ADConfigValues_SelectByADConfigKeyGroup", strADConfigKeyGroup);
            return (List<ADConfigValuesInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ADConfigValuesInfo> list = new List<ADConfigValuesInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADConfigValuesInfo objConfigValuesInfo = (ADConfigValuesInfo)GetObjectFromDataRow(row);
                    list.Add(objConfigValuesInfo);
                }
            }
            ds.Dispose();
            return list;
        }

        public ADConfigValuesInfo GetADConfigValuesByText(String text)
        {
            DataSet ds = dal.GetDataSet("ADConfigValues_GetADConfigValuesByText", text);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ADConfigValuesInfo objConfigValuesInfo = (ADConfigValuesInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                ds.Dispose();
                return objConfigValuesInfo;
            }
            return null;
        }

        public ADConfigValuesInfo GetADConfigValuesByKeyValue(String keyValue)
        {
            DataSet ds = dal.GetDataSet("ADConfigValues_GetADConfigValuesByKeyValue", keyValue);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ADConfigValuesInfo objConfigValuesInfo = (ADConfigValuesInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                ds.Dispose();
                return objConfigValuesInfo;
            }
            return null;
        }

        public List<ADConfigValuesInfo> GetADConfigValuesForSaleOrderTypeLookUp(string actionNewFrom)
        {
            DataSet ds = dal.GetDataSet("ADConfigValues_GetADConfigValuesForSaleOrderTypeLookUp", actionNewFrom);
            return (List<ADConfigValuesInfo>)GetListFromDataSet(ds);
        }

        public List<ADConfigValuesInfo> GetListByGroupAndValue(string group, string value)
        {
            DataSet ds = dal.GetDataSet("ADConfigValues_GetObjectByGroupAndValue", group, value);
            return (List<ADConfigValuesInfo>)GetListFromDataSet(ds);
        }
        public List<ADConfigValuesInfo> GetADConfigValuesByDefaultProductType()
        {
            DataSet ds = dal.GetDataSet("ADConfigValues_GetADConfigValuesByDefaultProductType");
            return (List<ADConfigValuesInfo>)GetListFromDataSet(ds);
        }
        public List<ADConfigValuesInfo> GetAllConfigValues()
        {
            DataSet ds = GetAllObjects();
            return (List<ADConfigValuesInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}