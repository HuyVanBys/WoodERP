using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace BOSLib
{
    #region STToolbars
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:STToolbarsController
    //Created Date:Tuesday, March 27, 2007
    //-----------------------------------------------------------

    public class STToolbarsController : BaseBusinessController
    {
        private readonly string spGetSTToolbarsBySTModuleIDAndSTUserGroupIDAndSTToolbarGroup =
                                "STToolbars_SelectBySTModuleIDAndSTUserGroupIDAndSTToolbarGroup";
        private readonly string spGetSTToolbarsBySTModuleIDAndSTUserGroupIDAndSTToolbarGroupAndSTToolbarTag =
                                "STToolbars_SelectBySTModuleIDAndSTUserGroupIDAndSTToolbarGroupAndSTToolbarTag";
        private readonly string spGetSTToolbarsBySTModuleIDAndSTUserGroupID =
                                "STToolbars_SelectBySTModuleIDAndSTUserGroupID";
        private readonly string spDeleteSTToolbarsBySTModuleIDAndSTUserGroupID =
                                "STToolbars_DeleteBySTModuleIDAndSTUserGroupID";

        public STToolbarsController()
        {
            dal = new DALBaseProvider("STToolbars", typeof(STToolbarsInfo));
        }

        public DataSet GetSTToolbarsBySTModuleIDAndSTUserGroupIDAndSTToolbarGroup(
                        int iSTModuleID, int iSTUserGroupID, String strSTToolbarGroup)
        {
            return (DataSet)dal.GetDataSet(spGetSTToolbarsBySTModuleIDAndSTUserGroupIDAndSTToolbarGroup, iSTModuleID, iSTUserGroupID, strSTToolbarGroup);
        }

        public STToolbarsInfo GetSTToolbarsBySTModuleIDAndSTUserGroupIDAndSTToolbarGroupAndSTToolbarTag(
                                int iSTModuleID, int iSTUserGroupID, String strSTToolbarGroup, String strSTToolbarTag)
        {
            return (STToolbarsInfo)dal.GetDataObject(spGetSTToolbarsBySTModuleIDAndSTUserGroupIDAndSTToolbarGroupAndSTToolbarTag,
                                                        iSTModuleID, iSTUserGroupID, strSTToolbarGroup, strSTToolbarTag);
        }

        public DataSet GetSTToolbarsBySTModuleIDAndSTUserGroupID(int iSTModuleID, int iSTUserGroupID)
        {
            return (DataSet)dal.GetDataSet(spGetSTToolbarsBySTModuleIDAndSTUserGroupID, iSTModuleID, iSTUserGroupID);
        }

        public void DeleteSTToolbarsBySTModuleIDAndSTUserGroupID(int iSTModuleID, int iSTUserGroupID)
        {
            dal.GetDataSet(spDeleteSTToolbarsBySTModuleIDAndSTUserGroupID, iSTModuleID, iSTUserGroupID);
        }

        /// <summary>
        /// Get toolbar by module and toolbar group
        /// </summary>
        /// <param name="iSTModuleID"></param>
        /// <param name="strSTToolbarGroup"></param>
        /// <returns></returns>
        public DataSet GetSTToolbarsBySTModuleIDAndSTToolbarGroup(
                        int iSTModuleID, String strSTToolbarGroup)
        {
            String query = String.Format("SELECT * FROM STToolbars WHERE AAStatus='Alive' AND STModuleID={0} AND STToolbarGroup={1}", iSTModuleID, strSTToolbarGroup);
            return GetDataSet(query);
        }

        /// <summary>
        /// Get all root toolbar (toolbar has STToolbarParentID = NULL) by module, user, and toolbar group
        /// </summary>
        /// <param name="toolbarID"></param>
        /// <param name="userGroupID"></param>
        /// <param name="toolbarGroupID"></param>
        /// <returns></returns>
        public DataSet GetAllRootSTToolbarsBySTModuleIDAndSTUserGroupIDAndSTToolbarGroup(int toolbarID, int userGroupID, String toolbarGroupID)
        {
            String query = String.Format("SELECT * FROM STToolbars WHERE STModuleID={0} AND STUserGroupID={1} AND STToolbarGroup='{2}' AND (STToolbarParentID IS NULL OR STToolbarParentID = 0)", toolbarID, userGroupID, toolbarGroupID);
            return GetDataSet(query);
        }

        public override DataSet GetAllObjectsByObjectParentID(int iObjectParentID)
        {
            String TableName = "STToolbars";
            String strPrimaryKey = SqlDatabaseHelper.GetPrimaryKeyColumn(TableName);
            String strParentObjectIDForeignKey = strPrimaryKey.Substring(0, strPrimaryKey.Length - 2) + "ParentID";
            String strQuery = String.Format("Select *,c.TheNumberOfChild From [{0}] s OUTER APPLY ( SELECT COUNT(1) AS TheNumberOfChild  FROM [STToolbars] tc WHERE tc.STToolbarParentID = s.STToolbarID AND tc.AAStatus ='Alive') c Where ([{1}]={2}) And ({2}>0) AND AAStatus ='Alive'", TableName, strParentObjectIDForeignKey, iObjectParentID);
            return GetDataSet(strQuery);
        }

        public DataSet GetMainToolbar()
        {
            DataSet ds = dal.GetDataSet("STToolbars_GetMainToolbar");
            return ds;
        }

        public override DataSet GetAllDataByForeignColumn(string strForeignColumnName, object objForeignColumnValue)
        {
            if (strForeignColumnName == "STModuleID")
            {
                DataSet ds = dal.GetDataSet("STToolbars_GetToolbarsByModuleID", objForeignColumnValue);
                return ds;
            }
            else
            {
                return base.GetAllDataByForeignColumn(strForeignColumnName, objForeignColumnValue);
            }
        }

        /// <summary>
        /// Get toolbar by module and toolbar group
        /// </summary>
        /// <param name="iSTModuleID"></param>
        /// <param name="strSTToolbarGroup"></param>
        /// <returns></returns>
        public DataSet GetAllSTToolbarsSortOrder()
        {
            String query = String.Format("SELECT * FROM STToolbars WHERE AAStatus='Alive' ORDER BY STModuleID, STToolbarOrder");
            return GetDataSet(query);
        }

        public List<string> GetColumnByTableName(string tableName)
        {
            List<string> colList = new List<string>();
            DataSet ds = dal.GetDataSet("STBosTables_GetColumnByTableName", tableName);
            List<STToolbarsInfo> resultList = (List<STToolbarsInfo>)GetListFromDataSet(ds);
            if (resultList != null)
            {
                colList = resultList.Select(t => t.ColumnName).Distinct().ToList();
            }
            ds.Dispose();
            return colList;
        }
        public List<string> UserDefinedTableTypeColumnName(string tableName)
        {
            List<string> colList = new List<string>();
            DataSet ds = dal.GetDataSet("STBosTables_UserDefinedTableTypeColumnName", tableName);
            List<STToolbarsInfo> resultList = (List<STToolbarsInfo>)GetListFromDataSet(ds);
            if (resultList != null)
            {
                colList = resultList.Select(t => t.ColumnName).Distinct().ToList();
            }
            ds.Dispose();
            return colList;
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<STToolbarsInfo> obj = new List<STToolbarsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    STToolbarsInfo info = (STToolbarsInfo)GetObjectFromDataRow(row);
                    obj.Add(info);
                }
            }
            ds.Dispose();
            return obj;
        }
    }
    #endregion
}