using Localization;
using System;
using System.Collections.Generic;
using System.Data;

namespace BOSLib
{
    #region AAColumnAlias
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:AAColumnAliasController
    //Created Date:Sunday, April 15, 2007
    //-----------------------------------------------------------

    public class AAColumnAliasController : BaseBusinessController
    {
        private readonly string spGetAAColumnAliasByColumnNameAndTableName =
                                    "AAColumnAlias_SelectByColumnNameAndTableName";

        private readonly string spGetAAColumnAliasByTableName = "AAColumnAlias_SelectByTableName";

        public AAColumnAliasController()
        {
            dal = new DALBaseProvider("AAColumnAlias", typeof(AAColumnAliasInfo));
        }

        public AAColumnAliasInfo GetAAColumnAliasByColumnNameAndTableName(String strColumnName, String strTableName)
        {
            return (AAColumnAliasInfo)dal.GetDataObject(spGetAAColumnAliasByColumnNameAndTableName, strColumnName, strTableName);
        }

        public DataSet GetAAColumnAliasByTableName(String strTableName)
        {
            return (DataSet)dal.GetDataSet(spGetAAColumnAliasByTableName, strTableName);
        }

        /// <summary>
        /// Get column caption of all language by table name
        /// </summary>
        /// <param name="tableName">Name of table</param>
        /// <returns></returns>
        public DataTable GetColumnCaptionOfTable(string tableName)
        {
            DataTable result = new DataTable();
            GELanguagesController objLanguagesController = new GELanguagesController();
            DataSet dsLanguages = objLanguagesController.GetAllObjects();
            SortedList<int, string> columnList = new SortedList<int, string>();
            AAColumnAliasController objColumnAliasController = new AAColumnAliasController();
            DataSet dsColumnAlias = new DataSet();

            foreach (DataRow dr in dsLanguages.Tables[0].Rows)
            {
                GELanguagesInfo objLanguagesInfo = new GELanguagesInfo();
                objLanguagesInfo = (GELanguagesInfo)objLanguagesController.GetObjectFromDataRow(dr);
                columnList.Add(objLanguagesInfo.GELanguageID, objLanguagesInfo.GELanguageDesc);
                DataSet ds = objColumnAliasController
                                        .GetColumnAliasByLanguageAndTableName(objLanguagesInfo.GELanguageID, tableName);
                ds.Tables[0].TableName = objLanguagesInfo.GELanguageDesc;
                dsColumnAlias.Tables.Add(ds.Tables[0].Copy());

            }
            // Construct column alias table
            result = ConstructColumnAliasTable(dsColumnAlias, columnList);
            dsLanguages.Dispose();
            dsColumnAlias.Dispose();
            return result;
        }

        /// <summary>
        /// Construct column alias of table
        /// </summary>
        /// <param name="dsColumnAlias">Data set of clumn alias</param>
        /// <param name="columnList">List of table column</param>
        /// <returns></returns>
        private DataTable ConstructColumnAliasTable(DataSet dsColumnAlias, SortedList<int, string> columnList)
        {
            DataTable result = new DataTable();
            result.Columns.Add(CommonLocalizedResources.ColumnName, typeof(string));
            GELanguagesController objLanguagesController = new GELanguagesController();
            for (int i = 0; i < columnList.Count; i++)
            {
                result.Columns.Add(string.Format("{0}_{1}", columnList.Keys[i], columnList.Values[i]), typeof(string));
            }
            // Add data row
            for (int j = 0; j < columnList.Count; j++)
            {
                for (int i = 0; i < dsColumnAlias.Tables[columnList.Values[j]].Rows.Count; i++)
                {
                    DataRow row = dsColumnAlias.Tables[columnList.Values[j]].Rows[i];
                    if (i == result.Rows.Count)
                    {
                        result.Rows.Add(result.NewRow());
                    }
                    if (row["AAColumnAliasName"] != DBNull.Value)
                        result.Rows[i][0] = row["AAColumnAliasName"].ToString();
                    if (row["AAColumnAliasCaption"] != DBNull.Value)
                        result.Rows[i][string.Format("{0}_{1}", columnList.Keys[j], columnList.Values[j])] = row["AAColumnAliasCaption"].ToString();
                }
            }
            return result;
        }

        /// <summary>
        /// Get column alias by language id and table name
        /// </summary>
        /// <param name="languageID">ID of language</param>
        /// <param name="tableName">Name of table</param>
        /// <returns>Data column alias</returns>
        public DataSet GetColumnAliasByLanguageAndTableName(int languageID, string tableName)
        {
            return dal.GetDataSet("AAColumnAlias_GetColumnAliasByLanguageAndTableName", languageID, tableName);
        }

        /// <summary>
        /// Get column alias by language id and table name and column alias name
        /// </summary>
        /// <param name="languageID">ID of language</param>
        /// <param name="tableName">Name of table</param>
        /// <param name="columnAliasName">Name of column alias</param>
        /// <returns>Column alias object</returns>
        public AAColumnAliasInfo GetColumnAliasByLanguageAndTableNameAndColumnAliasName(int languageID,
                                                                            string tableName, string columnAliasName)
        {
            AAColumnAliasInfo objColumnAliasInfo = new AAColumnAliasInfo();
            AAColumnAliasController objColumnAliasController = new AAColumnAliasController();
            DataSet ds = dal.GetDataSet("AAColumnAlias_GetColumnAliasByLanguageAndTableNameAndColumnAliasName"
                                                                            , languageID, tableName, columnAliasName);
            if (ds.Tables[0].Rows.Count > 0)
            {
                objColumnAliasInfo = (AAColumnAliasInfo)objColumnAliasController.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                ds.Dispose();
                return objColumnAliasInfo;
            }
            return null;
        }

        /// <summary>
        /// Get column alias by table name to set permission for it
        /// </summary>
        /// <param name="tableName">Table name</param>
        /// <returns>Column alias list</returns>
        public DataSet GetColumnPermissionByTableName(string tableName)
        {
            return dal.GetDataSet("AAColumnAlias_GetColumnPermissionByTableName", tableName);
        }

        /// <summary>
        /// Get displayed columns of a table for an user group in a module
        /// </summary>
        /// <param name="moduleName">Module name</param>
        /// <param name="tableName">Table name</param>
        /// <param name="userGroupID">User group id</param>
        /// <returns>List of columns</returns>
        public DataSet GetDisplayedColumnsByModuleNameAndTableNameAndUserGroupID(string moduleName, string tableName, int userGroupID)
        {
            return dal.GetDataSet("AAColumnAlias_GetDisplayedColumnsByModuleNameAndTableNameAndUserGroupID", moduleName, tableName, userGroupID);
        }
        public DataSet GetColumnAliasCollection(String strTableName)
        {
            return (DataSet)dal.GetDataSet("AAColumnAlias_GetColumnAliasCollection", strTableName);
        }

        public List<AAColumnAliasInfo> GetColumnAliasByTableName(string tableName)
        {
            DataSet ds = GetAAColumnAliasByTableName(tableName);
            return (List<AAColumnAliasInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<AAColumnAliasInfo> columnAliasList = new List<AAColumnAliasInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    AAColumnAliasInfo columnAlias = (AAColumnAliasInfo)GetObjectFromDataRow(row);
                    columnAliasList.Add(columnAlias);
                }
            }
            ds.Dispose();
            return columnAliasList;
        }
    }
    #endregion
}