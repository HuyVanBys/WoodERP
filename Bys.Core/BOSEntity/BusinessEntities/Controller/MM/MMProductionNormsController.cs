using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region MMProductionNorms
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMProductionNormsController
    //Created Date:Wednesday, October 21, 2015
    //-----------------------------------------------------------

    public class MMProductionNormsController : BaseBusinessController
    {
        public MMProductionNormsController()
        {
            dal = new DALBaseProvider("MMProductionNorms", typeof(MMProductionNormsInfo));
        }
        public DataSet GetAllProductionNormForLookupControl()
        {

            DataSet ds = dal.GetDataSet("MMProductionNorms_GetAllMMProductionNormsForLookupControl");
            return ds;
        }
        public List<MMProductionNormsInfo> GetProductionNormByOriginNo(string originNo)
        {
            DataSet ds = dal.GetDataSet("MMProductionNorms_GetProductionNormByOriginNo", originNo);
            List<MMProductionNormsInfo> productionNormsList = new List<MMProductionNormsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionNormsInfo objProductionNormsInfo = (MMProductionNormsInfo)GetObjectFromDataRow(row);
                    productionNormsList.Add(objProductionNormsInfo);
                }
            }
            ds.Dispose();
            return productionNormsList;
        }

        public int GetNextProductionNormVersionByOriginNo(string originNo)
        {
            int count = (int)dal.GetSingleValue("MMProductionNorms_GetNextProductionNormVersionByOriginNo", originNo);
            return count;
        }


        public List<MMProductionNormsInfo> GetApprovedProductionNormByProductID(int productID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNorms_GetApprovedProductionNormByProductID", productID);
            List<MMProductionNormsInfo> productionNormsList = new List<MMProductionNormsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionNormsInfo objProductionNormsInfo = (MMProductionNormsInfo)GetObjectFromDataRow(row);
                    productionNormsList.Add(objProductionNormsInfo);
                }
            }
            ds.Dispose();
            return productionNormsList;
        }
        public List<MMProductionNormsInfo> GetProductionNormListData(int? productID)
        {
            return GetProductionNormListData(productID, null);
        }
        public List<MMProductionNormsInfo> GetProductionNormListData(int? productID, int? customerID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNorms_GetProductionNormListData", productID, customerID);
            List<MMProductionNormsInfo> productionNormsList = new List<MMProductionNormsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionNormsInfo objProductionNormsInfo = (MMProductionNormsInfo)GetObjectFromDataRow(row);
                    productionNormsList.Add(objProductionNormsInfo);
                }
            }
            ds.Dispose();
            return productionNormsList;
        }
        public List<MMProductionNormsInfo> GetAllAliveProductionNorm()
        {
            DataSet ds = dal.GetDataSet("MMProductionNorms_GetAllAliveProductionNorm");
            List<MMProductionNormsInfo> productionNormsList = new List<MMProductionNormsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionNormsInfo objProductionNormsInfo = (MMProductionNormsInfo)GetObjectFromDataRow(row);
                    productionNormsList.Add(objProductionNormsInfo);
                }
            }
            ds.Dispose();
            return productionNormsList;
        }
        public List<MMProductionNormsInfo> GetProductionNormByProductID(int productID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNorms_GetProductionNormByProductID", productID);
            List<MMProductionNormsInfo> productionNormsList = new List<MMProductionNormsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionNormsInfo objProductionNormsInfo = (MMProductionNormsInfo)GetObjectFromDataRow(row);
                    productionNormsList.Add(objProductionNormsInfo);
                }
            }
            ds.Dispose();
            return productionNormsList;
        }

        public DataSet GetProductionNormsBySomeCriteria(string productionNormNo,
                                                        string productionNormName,
                                                        int productID,
                                                        string productionNormOldProductNo,
                                                        int productionNormVersion,
                                                        DateTime fromDate,
                                                        DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("MMProductionNorms_GetProductionNormsBySomeCriteria",
                                                            productionNormNo,
                                                            productionNormName,
                                                            productID,
                                                            productionNormOldProductNo,
                                                            productionNormVersion,
                                                            fromDate,
                                                            toDate);
            return ds;
        }

        //NKHLam04/08/2017
        public List<MMProductionNormsInfo> GetByProductID(int productID, string type, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("MMProductionNorms_GetProductionNormbyProducIDAndShipmentType", productID, type, fromDate, toDate);
            return (List<MMProductionNormsInfo>)GetListFromDataSet(ds);

        }

        public List<MMProductionNormsInfo> GetAllProductionNormByProductIDAndSaleOrderItemID(int productID, int saleOrderItemID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNorms_GetAllProductionNormByProductIDAndSaleOrderItemID", productID, saleOrderItemID);
            return (List<MMProductionNormsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormsInfo> GetAllProductionNormByProductIDAndStyle(int productID, decimal width, decimal hight, decimal length)
        {
            DataSet ds = dal.GetDataSet("MMProductionNorms_GetAllProductionNormByProductIDAndStyle", productID, width, hight, length);
            return (List<MMProductionNormsInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<MMProductionNormsInfo> invoiceList = new List<MMProductionNormsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionNormsInfo objInvoicesInfo = (MMProductionNormsInfo)GetObjectFromDataRow(row);
                    invoiceList.Add(objInvoicesInfo);
                }
            }
            ds.Dispose();
            return invoiceList;
        }
        public MMProductionNormsInfo GetObjectProductionNormByProductID(int productID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNorms_GetProductionNormByProductID", productID);
            List<MMProductionNormsInfo> productionNormsList = new List<MMProductionNormsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionNormsInfo objProductionNormsInfo = (MMProductionNormsInfo)GetObjectFromDataRow(row);
                    ds.Dispose();
                    return objProductionNormsInfo;
                }
            }
            ds.Dispose();
            return null;
        }
        public MMProductionNormsInfo GetProductionNormByProductIDAndProductionNormID(int productID, int ProductionNormID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNorms_GetProductionNormByProductIDAndProductionNormID", productID, ProductionNormID);
            List<MMProductionNormsInfo> productionNormsList = new List<MMProductionNormsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionNormsInfo objProductionNormsInfo = (MMProductionNormsInfo)GetObjectFromDataRow(row);
                    ds.Dispose();
                    return objProductionNormsInfo;
                }
            }
            ds.Dispose();
            return null;
        }

        public List<MMProductionNormsInfo> GetApprovedProductionNormForBatchProductByProductID(int productID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNorms_GetApprovedProductionNormForBatchProductByProductID", productID);
            List<MMProductionNormsInfo> productionNormsList = new List<MMProductionNormsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionNormsInfo objProductionNormsInfo = (MMProductionNormsInfo)GetObjectFromDataRow(row);
                    productionNormsList.Add(objProductionNormsInfo);
                }
            }
            return productionNormsList;
        }

        public MMProductionNormsInfo GetProductionNormsForReportByProductionNormByID(int productionNormID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNorms_GetProductionNormsForReportByProductionNormByID", productionNormID);
            List<MMProductionNormsInfo> productionNormsList = new List<MMProductionNormsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionNormsInfo objProductionNormsInfo = (MMProductionNormsInfo)GetObjectFromDataRow(row);
                    return objProductionNormsInfo;
                }
            }
            return null;
        }

        public List<MMProductionNormsInfo> GetApprovedProductionNormForBatchProductByProductIDAndStyle(int productID, decimal width, decimal hight, decimal length)
        {
            DataSet ds = dal.GetDataSet("MMProductionNorms_GetApprovedProductionNormForBatchProductByProductIDAndStyle", productID, width, hight, length);
            List<MMProductionNormsInfo> productionNormsList = new List<MMProductionNormsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionNormsInfo objProductionNormsInfo = (MMProductionNormsInfo)GetObjectFromDataRow(row);
                    productionNormsList.Add(objProductionNormsInfo);
                }
            }
            return productionNormsList;
        }

        public List<MMProductionNormsInfo> GetProductionNormForLookupEditByProductID(int productID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNorms_GetProductionNormForLookupEditByProductID", productID);
            List<MMProductionNormsInfo> productionNormsList = new List<MMProductionNormsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionNormsInfo objProductionNormsInfo = (MMProductionNormsInfo)GetObjectFromDataRow(row);
                    productionNormsList.Add(objProductionNormsInfo);
                }
            }
            return productionNormsList;
        }
        public List<MMProductionNormsInfo> GetProductionNormByListID(string ItemListID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNorms_GetProductionNormByListID", ItemListID);
            return (List<MMProductionNormsInfo>)GetListFromDataSet(ds);
        }

        public MMProductionNormsInfo GetBOMByProductIDReferences(int productID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNorms_GetBOMByProductIDReferences", productID);
            List<MMProductionNormsInfo> productionNormsList = new List<MMProductionNormsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionNormsInfo objProductionNormsInfo = (MMProductionNormsInfo)GetObjectFromDataRow(row);
                    ds.Dispose();
                    return objProductionNormsInfo;
                }
            }
            ds.Dispose();
            return null;
        }

        public void UpdateBOMStatus(string type, string oldStatus, string newStatus, string userName, int productionNormID)
        {
            dal.ExecuteStoredProcedure("MMProductionNorms_UpdateBOMStatus", type, oldStatus, newStatus, userName, productionNormID);
        }
        public void ApprovedAllBOM(string userName, int productionNormID)
        {
            dal.ExecuteStoredProcedure("MMProductionNorms_ApprovedAllBOM", userName, productionNormID);
        }


        public void InsertApproveChangeLog(string userName, DateTime updateDate, int productionNormID, string desc, string type, decimal productionNormBlock, string updateType, string bpID)
        {
            dal.ExecuteStoredProcedure("MMProductionNorms_InsertApproveChangeLog", userName, updateDate, productionNormID, desc, type, productionNormBlock, updateType, bpID);
        }

        public MMProductionNormsInfo GetProductionNormOfCarcassByProductID(int productID)
        {
            return (MMProductionNormsInfo)dal.GetDataObject("MMProductionNorms_GetProductionNormOfCarcassByProductID", productID); ;
        }

        public void CopyBOMVersion(int productID, int productionNormID, string username, int employeeID, int branchID)
        {
            dal.ExecuteStoredProcedure("MMProductionNorms_CopyBOMVersion", productID, productionNormID, username, employeeID, branchID);
        }
        public void CopyBOM(int productID, int FromProductionNormID, int ToProductionNormID, string username, int employeeID, int branchID)
        {
            dal.ExecuteStoredProcedure("MMProductionNorms_CopyBOM", productID, FromProductionNormID, ToProductionNormID, username, employeeID, branchID);
        }
        public List<MMProductionNormsInfo> GetProductionNormByProductCarcassID(int carcassID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNorms_GetProductionNormByProductCarcassID", carcassID);
            return (List<MMProductionNormsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormsInfo> GenerateProductItemForProductionNorm(int carcassID, int productionNormID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNorms_GenerateProductItemForProductionNorm", carcassID, productionNormID);
            return (List<MMProductionNormsInfo>)GetListFromDataSet(ds);
        }

        public MMProductionNormsInfo GetSignatureProductionNormByID(int productionNormID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNorms_GetSignatureProductionNormByID", productionNormID);
            if (ds != null)
                return (MMProductionNormsInfo)dal.GetSingleObject(ds.Tables[0]);
            else
                return new MMProductionNormsInfo();
        }

        public string CheckValidProductItemCode(int productionNormID)
        {
            return (string)dal.GetSingleValue("MMProductionNorms_CheckValidProductItemCode", productionNormID);
        }
    }
    #endregion
}