using BOSLib;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region MMExchangeRateConfigs
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMExchangeRateConfigsController
    //Created Date:Thursday, October 22, 2015
    //-----------------------------------------------------------

    public class MMExchangeRateConfigsController : BaseBusinessController
    {
        public MMExchangeRateConfigsController()
        {
            dal = new DALBaseProvider("MMExchangeRateConfigs", typeof(MMExchangeRateConfigsInfo));
        }
        public MMExchangeRateConfigsInfo GetExchangeRateConfigSomeCriteria(int productGroupID, int woodType, string configLumberType)
        {
            DataSet ds = dal.GetDataSet("MMExchangeRateConfigs_GetExchangeRateConfigSomeCriteria", productGroupID, woodType, configLumberType);
            if (ds.Tables[0].Rows.Count > 0)
            {
                MMExchangeRateConfigsInfo objExchangeRateConfigsInfo = (MMExchangeRateConfigsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                ds.Dispose();
                return objExchangeRateConfigsInfo;
            }
            ds.Dispose();
            return null;
        }
        public MMExchangeRateConfigsInfo GetByWoodTypeAndSpeciality(int woodTypeID, int SpecialityID)
        {
            DataSet ds = dal.GetDataSet("MMExchangeRateConfigs_GetByWoodTypeAndSpeciality", woodTypeID, SpecialityID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                MMExchangeRateConfigsInfo objExchangeRateConfigsInfo = (MMExchangeRateConfigsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                ds.Dispose();
                return objExchangeRateConfigsInfo;
            }
            ds.Dispose();
            return null;
        }

        public MMExchangeRateConfigsInfo GetExchangeRateConfigLumberByThick(decimal Thick)
        {
            DataSet ds = dal.GetDataSet("MMExchangeRateConfigs_GetExchangeRateConfigLumberByThick", Thick);
            if (ds.Tables[0].Rows.Count > 0)
            {
                MMExchangeRateConfigsInfo objExchangeRateConfigsInfo = (MMExchangeRateConfigsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                ds.Dispose();
                return objExchangeRateConfigsInfo;
            }
            ds.Dispose();
            return null;
        }

        public MMExchangeRateConfigsInfo GetExchangeRateConfigByProductGroupIDAndProductAttributeIDAndThick(int? productGroupID, int woodType, decimal Thick)
        {
            DataSet ds = dal.GetDataSet("MMExchangeRateConfigs_GetExchangeRateConfigByProductGroupIDAndProductAttributeIDAndThick", productGroupID, woodType, Thick);
            if (ds.Tables[0].Rows.Count > 0)
            {
                MMExchangeRateConfigsInfo objExchangeRateConfigsInfo = (MMExchangeRateConfigsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objExchangeRateConfigsInfo;
            }
            return null;
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<MMExchangeRateConfigsInfo> ExchangeRateConfigs = new List<MMExchangeRateConfigsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMExchangeRateConfigsInfo objExchangeRateConfigsInfo = (MMExchangeRateConfigsInfo)GetObjectFromDataRow(row);
                    ExchangeRateConfigs.Add(objExchangeRateConfigsInfo);
                }
            }
            ds.Dispose();
            return ExchangeRateConfigs;
        }

        public MMExchangeRateConfigsInfo GetExchangeRateConfigSteel(int woodTypeID)
        {
            return (MMExchangeRateConfigsInfo)dal.GetDataObject("MMExchangeRateConfigs_GetExchangeRateConfigSteel", woodTypeID);
        }
    }
    #endregion
}