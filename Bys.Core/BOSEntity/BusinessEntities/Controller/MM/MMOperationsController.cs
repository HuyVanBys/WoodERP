using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;

namespace BOSERP
{
    #region MMOperations
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMOperationsController
    //Created Date:Tuesday, November 03, 2015
    //-----------------------------------------------------------

    public class MMOperationsController : BaseBusinessController
    {
        public MMOperationsController()
        {
            dal = new DALBaseProvider("MMOperations", typeof(MMOperationsInfo));
        }

        public List<MMOperationsInfo> GetAllOperationsByParentID(int parentID)
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetAllOperationByParentIDs", parentID);
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);

        }

        public List<MMOperationsInfo> GetAllOperationsByOperationGroup(string group)
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetAllOperationsByOperationGroup", group);
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);

        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<MMOperationsInfo> products = new List<MMOperationsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMOperationsInfo objProductsInfo = (MMOperationsInfo)GetObjectFromDataRow(row);
                    products.Add(objProductsInfo);
                }
            }
            ds.Dispose();
            return products;
        }
        public List<MMOperationsInfo> GetOperationListByBatchProductID(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetOperationListByBatchProductID", batchProductID);
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);

        }

        public List<MMOperationsInfo> GetAllOperationByParentIDAndOperationID(int parentID)
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetAllOperationByParentIDAndOperationID", parentID);
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);

        }

        public DataSet GetOperationByBatch(int batchID)
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetOperationByBatch", batchID);
            return ds;
        }

        public List<MMOperationsInfo> GetOperationListForProductionCost()
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetOperationListForProductionCost");
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);

        }

        public List<MMOperationsInfo> GetOperationListForProductionCostProductAndMaterial()
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetOperationListForProductionCostProductAndMaterial");
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);

        }

        public List<MMOperationsInfo> GetOperationListForProductionCost2()
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetOperationListForProductionCost2");
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);

        }
        public List<MMOperationsInfo> GetOperationListForStatistic(bool hasReceiptShipment, int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetOperationListForStatistic", hasReceiptShipment, batchProductID);
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);
        }
        public List<MMOperationsInfo> GetOperationListForProductionCostWood()
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetOperationListForProductionCostWood");
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);

        }
        public List<MMOperationsInfo> GetOperationsByGroupAndInOutStockCheck(string operationGroup, bool InOutStockCheck)
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetOperationsByGroupAndInOutStockCheck", operationGroup, InOutStockCheck);
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);

        }
        public List<MMOperationsInfo> GetOperationsByGroupAndIsPlan(string operationGroup, bool IsPlan)
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetOperationsByGroupAndIsPlan", operationGroup, IsPlan);
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);

        }
        public List<MMOperationsInfo> GetPlanOperationsByUserID(int? branchID, int? userID)
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetPlanOperationsByUserID", branchID, userID);
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);
        }
        public List<MMOperationsInfo> GetAllOperationsByGroupAndIsPlan(string operationGroup, bool IsPlan)
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetAllOperationsByGroupAndIsPlan", operationGroup, IsPlan);
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);

        }
        public List<MMOperationsInfo> GetOperationForSynchronousBatchReport()
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetOperationForSynchronousBatchReport");
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);

        }
        public List<MMOperationsInfo> GetOperationOnCapacity()
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetOperationOnCapacity");
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);

        }
        public List<MMOperationsInfo> GetAllAliveOperation()
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetAllAliveOperation");
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);

        }

        public List<MMOperationsInfo> GetOperationWithReference()
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetOperationWithReference");
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);

        }


        public List<MMOperationsInfo> GetAliveOperationAndSortOrder()
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetAllAliveOperation");

            List<MMOperationsInfo> OperationList = new List<MMOperationsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMOperationsInfo objProductsInfo = (MMOperationsInfo)GetObjectFromDataRow(row);
                    OperationList.Add(objProductsInfo);
                }
            }
            List<MMOperationsInfo> OperationResultList = new List<MMOperationsInfo>();
            List<MMOperationsInfo> OperationParentList = OperationList.Where(x => x.MMOperationParentID == 0).ToList();
            if (OperationParentList != null)
            {
                OperationParentList = OperationParentList.OrderBy(x => x.MMOperationOrder).ToList();


                int period = 0;
                foreach (var item in OperationParentList)
                {

                    List<MMOperationsInfo> OperationChildList = OperationList.Where(x => x.MMOperationParentID == item.MMOperationID).ToList();
                    if (OperationChildList != null)
                    {
                        OperationChildList = OperationChildList.OrderBy(x => x.MMOperationOrder).ToList();
                        foreach (var itemChild in OperationChildList)
                        {
                            period++;
                            itemChild.MMOperationPeriodOrder = period;
                            OperationResultList.Add(itemChild);
                        }
                    }
                    period++;
                    item.MMOperationPeriodOrder = period;
                    OperationResultList.Add(item);
                }

            }
            else
                OperationResultList = OperationList;

            ds.Dispose();
            return OperationResultList;

        }

        public DataSet GetDataSetOperationAndSortPeriod(int branchID)
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetAllAliveOperation", branchID);

            List<MMOperationsInfo> OperationList = new List<MMOperationsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMOperationsInfo objProductsInfo = (MMOperationsInfo)GetObjectFromDataRow(row);
                    OperationList.Add(objProductsInfo);
                }
            }
            List<MMOperationsInfo> OperationResultList = new List<MMOperationsInfo>();
            List<MMOperationsInfo> OperationParentList = OperationList.Where(x => x.MMOperationParentID == 0).ToList();
            if (OperationParentList != null)
            {
                OperationParentList = OperationParentList.OrderBy(x => x.MMOperationOrder).ToList();


                int period = 0;
                foreach (var item in OperationParentList)
                {

                    List<MMOperationsInfo> OperationChildList = OperationList.Where(x => x.MMOperationParentID == item.MMOperationID).ToList();
                    if (OperationChildList != null)
                    {
                        OperationChildList = OperationChildList.OrderBy(x => x.MMOperationOrder).ToList();
                        foreach (var itemChild in OperationChildList)
                        {
                            period++;
                            itemChild.MMOperationPeriodOrder = period;
                            OperationResultList.Add(itemChild);
                        }
                    }
                    period++;
                    item.MMOperationPeriodOrder = period;
                    OperationResultList.Add(item);
                }

            }
            else
                OperationResultList = OperationList;

            DataSet data = ListToDataSet(OperationResultList);

            ds.Dispose();
            return data;

        }

        public List<MMOperationsInfo> GetReceipOperationAndSortPeriod()
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetAllOperationsByOperationGroup", "Product");

            List<MMOperationsInfo> OperationList = new List<MMOperationsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMOperationsInfo objOperationsInfo = (MMOperationsInfo)GetObjectFromDataRow(row);
                    OperationList.Add(objOperationsInfo);
                }
            }
            List<MMOperationsInfo> OperationResultList = new List<MMOperationsInfo>();
            List<MMOperationsInfo> OperationParentList = OperationList.Where(x => x.MMOperationParentID == 0).ToList();
            if (OperationParentList != null)
            {
                OperationParentList = OperationParentList.OrderBy(x => x.MMOperationOrder).ToList();


                int period = 0;
                foreach (var item in OperationParentList)
                {

                    List<MMOperationsInfo> OperationChildList = OperationList.Where(x => x.MMOperationParentID == item.MMOperationID).ToList();
                    if (OperationChildList != null)
                    {
                        OperationChildList = OperationChildList.OrderBy(x => x.MMOperationOrder).ToList();
                        foreach (var itemChild in OperationChildList)
                        {
                            if (itemChild.MMOperationInOutStockCheck)
                            {
                                period++;
                                itemChild.MMOperationPeriodOrder = period;
                                OperationResultList.Add(itemChild);
                            }
                        }
                    }
                    if (item.MMOperationInOutStockCheck)
                    {
                        period++;
                        item.MMOperationPeriodOrder = period;
                        OperationResultList.Add(item);
                    }
                }

            }
            else
                OperationResultList = OperationList;
            ds.Dispose();
            return OperationResultList;
        }

        /// <summary>
        /// Convert our List to a DataSet
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="list"></param>
        /// <returns>DataSet</returns>
        public DataSet ListToDataSet(List<MMOperationsInfo> list)
        {
            Type elementType = typeof(MMOperationsInfo);
            using (DataSet ds = new DataSet())
            {
                using (DataTable t = new DataTable())
                {
                    ds.Tables.Add(t);
                    //add a column to table for each public property on T
                    PropertyInfo[] _props = elementType.GetProperties();
                    foreach (PropertyInfo propInfo in _props)
                    {
                        Type _pi = propInfo.PropertyType;
                        Type ColType = Nullable.GetUnderlyingType(_pi) ?? _pi;
                        if (!ColType.Name.Contains("Image"))
                            t.Columns.Add(propInfo.Name, ColType);
                    }
                    //go through each property on T and add each value to the table
                    foreach (MMOperationsInfo item in list)
                    {
                        DataRow row = t.NewRow();
                        foreach (PropertyInfo propInfo in _props)
                        {
                            if (row.Table.Columns[propInfo.Name] != null)
                                row[propInfo.Name] = propInfo.GetValue(item, null) ?? DBNull.Value;
                        }
                        t.Rows.Add(row);
                    }
                }
                return ds;
            }
        }

        public List<MMOperationsInfo> GetWithDefaultMachineGroup()
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetWithDefaultMachineGroup");
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);

        }
        public List<MMOperationsInfo> GetOperationByProductionCostFormulaID(int productionCostFormulaID)
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetOperationByProductionCostFormulaID", productionCostFormulaID);
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);
        }
        public MMOperationsInfo GetFirstOperation()
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetFirstOperation");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                MMOperationsInfo objOperationsInfo = (MMOperationsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                ds.Dispose();
                return objOperationsInfo;
            }
            return null;
        }

        public List<MMOperationsInfo> GetForCapacityByBatchProductID(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetForCapacityByBatchProductID", batchProductID);
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);

        }

        public List<MMOperationsInfo> GetOperationForGeneralPlanByBatchProductID(int batchProductID, int batchProductItemID)
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetOperationForGeneralPlanByBatchProductID", batchProductID, batchProductItemID);
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);
        }
        public void UpdateOperationIsPlanByID(int OperationID, bool IsPlan, string updateUser)
        {
            dal.ExecuteStoredProcedure("MMOperations_UpdateOperationIsPlanByID", OperationID, IsPlan, updateUser);
        }

        public DataSet GetDataSetOfBranch(string operationNo, string operationName, string operationGroup, string operationType, int branchID)
        {
            return dal.GetDataSet("MMOperations_GetDataSetOfBranch", operationNo, operationName, operationGroup, operationType, branchID);
        }

        public DataSet GetDataSetOfBranchList(string operationNo, string operationName, string operationGroup, string operationType, List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetDataSetOfBranch(operationNo, operationName, operationGroup, operationType, ojbBranchsInfo.BRBranchID);
                rtn.Merge(ds);
            }
            return rtn;
        }

        public List<MMOperationsInfo> GetOperationByBPPNItemID(string group, int bpItemID, int bpPniItemID)
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetOperationByBPPNItemID", group, bpItemID, bpPniItemID);
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);
        }

        public List<MMOperationsInfo> GetOperationByBPOutSourcingItemID(int outSourcingItemID)
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetOperationByBPOutSourcingItemID", outSourcingItemID);
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);
        }

        public List<MMOperationsInfo> GetOperationByProposalItemID(int proposalItemID)
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetOperationByProposalItemID", proposalItemID);
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);
        }

        public List<MMOperationsInfo> GetOperationListByFormulaID(int productionCostFormulaID)
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetOperationListByFormulaID", productionCostFormulaID);
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);
        }

        public List<MMOperationsInfo> GetAllOperationByParentIDAndalculationCheck(int parentID, bool isCalculationCheck)
        {
            DataSet ds = dal.GetDataSet("MMOperations_GetAllOperationByParentIDAndalculationCheck", parentID, isCalculationCheck);
            return (List<MMOperationsInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}