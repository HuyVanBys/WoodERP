using BOSLib;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region MMBatchProductProductionNormItemPaints
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMBatchProductProductionNormItemPaintsController
    //Created Date:Thursday, May 24, 2018
    //-----------------------------------------------------------

    public class MMBatchProductProductionNormItemPaintsController : BaseBusinessController
    {
        public MMBatchProductProductionNormItemPaintsController()
        {
            dal = new DALBaseProvider("MMBatchProductProductionNormItemPaints", typeof(MMBatchProductProductionNormItemPaintsInfo));
        }

        public List<MMBatchProductProductionNormItemPaintsInfo> GetBatchProductProductionNormItemPaintByForeign(int batchProductProductionNormItemID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItemPaints_SelectByFK_MMBatchProductProductionNormItemID", batchProductProductionNormItemID);
            List<MMBatchProductProductionNormItemPaintsInfo> BatchProductProductionNormItemPaintList = new List<MMBatchProductProductionNormItemPaintsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemPaintsInfo objBatchProductProductionNormItemPaintsInfo = (MMBatchProductProductionNormItemPaintsInfo)GetObjectFromDataRow(row);
                    BatchProductProductionNormItemPaintList.Add(objBatchProductProductionNormItemPaintsInfo);
                }
            }
            return BatchProductProductionNormItemPaintList;
        }

        public void InsertPaintDetail(int batchProductID, string createdUser)
        {
            dal.ExecuteStoredProcedure("MMBatchProductProductionNormItemPaints_InsertPaintFromProductionNormItem", batchProductID, createdUser);
        }
        public void DeletePaintDetail(int batchProductID, string updateUser)
        {
            dal.ExecuteStoredProcedure("MMBatchProductProductionNormItemPaints_DeletePaintDetail", batchProductID, updateUser);
        }

        public List<MMBatchProductProductionNormItemPaintsInfo> GetBatchProductItemPaintsForReportByBatchProductID(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItemPaints_GetBatchProductItemPaintsForReportByBatchProductID", batchProductID);
            return (List<MMBatchProductProductionNormItemPaintsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemPaintsInfo> GetBatchProductItemPaintsForReportByBPProductionNormItemRef(string productionNormItemRef)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItemPaints_GetBatchProductItemPaintsForReportByBPProductionNormItemRef", productionNormItemRef);
            return (List<MMBatchProductProductionNormItemPaintsInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<MMBatchProductProductionNormItemPaintsInfo> batchProductProductionNormItemPaintsList = new List<MMBatchProductProductionNormItemPaintsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemPaintsInfo objBatchProductProductionNormItemPaintsInfo = (MMBatchProductProductionNormItemPaintsInfo)GetObjectFromDataRow(row);
                    batchProductProductionNormItemPaintsList.Add(objBatchProductProductionNormItemPaintsInfo);
                }
            }
            ds.Dispose();
            return batchProductProductionNormItemPaintsList;
        }


    }
    #endregion
}