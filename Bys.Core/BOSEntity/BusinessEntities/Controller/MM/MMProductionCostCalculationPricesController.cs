using BOSLib;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region MMProductionCostCalculationPrices
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMProductionCostCalculationPricesController
    //Created Date:Wednesday, January 23, 2019
    //-----------------------------------------------------------

    public class MMProductionCostCalculationPricesController : BaseBusinessController
    {
        public MMProductionCostCalculationPricesController()
        {
            dal = new DALBaseProvider("MMProductionCostCalculationPrices", typeof(MMProductionCostCalculationPricesInfo));
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<MMProductionCostCalculationPricesInfo> list = new List<MMProductionCostCalculationPricesInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionCostCalculationPricesInfo obj = (MMProductionCostCalculationPricesInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMProductionCostCalculationPricesInfo> GetPricesByProductionCostCalculationID(int productionCostCalculationID)
        {
            DataSet ds = dal.GetDataSet("MMProductionCostCalculationPrices_GetPricesByProductionCostCalculationID", productionCostCalculationID);
            return (List<MMProductionCostCalculationPricesInfo>)GetListFromDataSet(ds);
        }
        public List<MMProductionCostCalculationPricesInfo> GetPricesBySomeCreteria(string productionCostCalculationNo, string serialNo, int batchID, int productID)
        {
            DataSet ds = dal.GetDataSet("MMProductionCostCalculationPrices_GetPricesBySomeCreteria", productionCostCalculationNo, serialNo, batchID, productID);
            return (List<MMProductionCostCalculationPricesInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}