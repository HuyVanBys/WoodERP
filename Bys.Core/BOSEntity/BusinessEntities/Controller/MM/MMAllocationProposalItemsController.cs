using BOSLib;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region MMAllocationProposalItems
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMAllocationProposalItemsController
    //Created Date:Tuesday, November 24, 2015
    //-----------------------------------------------------------

    public class MMAllocationProposalItemsController : BaseBusinessController
    {
        public MMAllocationProposalItemsController()
        {
            dal = new DALBaseProvider("MMAllocationProposalItems", typeof(MMAllocationProposalItemsInfo));
        }
        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<MMAllocationProposalItemsInfo> products = new List<MMAllocationProposalItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMAllocationProposalItemsInfo objProductsInfo = (MMAllocationProposalItemsInfo)GetObjectFromDataRow(row);
                    products.Add(objProductsInfo);
                }
            }
            ds.Dispose();
            return products;
        }

        public List<MMAllocationProposalItemsInfo> MMAllocationProposalItems_GetItemsByFK(int FK_MMAllocationProposalID)
        {
            DataSet ds = dal.GetDataSet("MMAllocationProposalItems_GetitemAllocationProposalbyFK", FK_MMAllocationProposalID);
            List<MMAllocationProposalItemsInfo> components = new List<MMAllocationProposalItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMAllocationProposalItemsInfo objAllocationPlanItemsInfo = (MMAllocationProposalItemsInfo)GetObjectFromDataRow(row);
                    components.Add(objAllocationPlanItemsInfo);
                }
            }
            ds.Dispose();
            return components;
        }

        public List<MMAllocationProposalItemsInfo> MMAllocationProposalItems_GetItemsbyFK_MMAllocationProposalID(int FK_MMAllocationProposalID)
        {
            DataSet ds = dal.GetDataSet("MMAllocationProposalItems_GetItemsbyFK_MMAllocationProposalID", FK_MMAllocationProposalID);
            List<MMAllocationProposalItemsInfo> components = new List<MMAllocationProposalItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMAllocationProposalItemsInfo objAllocationPlanItemsInfo = (MMAllocationProposalItemsInfo)GetObjectFromDataRow(row);
                    components.Add(objAllocationPlanItemsInfo);
                }
            }
            ds.Dispose();
            return components;
        }


        public List<MMAllocationProposalItemsInfo> GetNewProposalFromWood(string MMAllocationProposalType, int userID, string moduleName, string dataViewPermissionType, int branchID)
        {
            DataSet ds = dal.GetDataSet("MMAllocationProposalItems_GetNewProposalFromWood", MMAllocationProposalType, userID, moduleName, dataViewPermissionType, branchID);
            List<MMAllocationProposalItemsInfo> allocationProposalItems = new List<MMAllocationProposalItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMAllocationProposalItemsInfo objAllocationProposalItemsInfo = (MMAllocationProposalItemsInfo)GetObjectFromDataRow(row);
                    allocationProposalItems.Add(objAllocationProposalItemsInfo);
                }
            }
            ds.Dispose();
            return allocationProposalItems;
        }
        public List<MMAllocationProposalItemsInfo> GetNewProposalFromAllocationProposalDryLumber(string MMAllocationProposalType)
        {
            DataSet ds = dal.GetDataSet("MMAllocationProposalItems_GetNewProposalFromAllocationProposalDryLumber", MMAllocationProposalType);
            List<MMAllocationProposalItemsInfo> allocationProposalItems = new List<MMAllocationProposalItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMAllocationProposalItemsInfo objAllocationProposalItemsInfo = (MMAllocationProposalItemsInfo)GetObjectFromDataRow(row);
                    allocationProposalItems.Add(objAllocationProposalItemsInfo);
                }
            }
            ds.Dispose();
            return allocationProposalItems;
        }
        public List<MMAllocationProposalItemsInfo> GetAllocationProposalItemsfromAllocationProposalID(int AllocationProposalID)
        {
            DataSet ds = dal.GetDataSet("MMAllocationProposalItems_GetNewProposalID", AllocationProposalID);
            return (List<MMAllocationProposalItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMAllocationProposalItemsInfo> GetQtyMissAllocationProposalItems()
        {
            DataSet ds = dal.GetDataSet("MMAllocationProposalItems_GetQtyMissAllocationProposalItems");
            return (List<MMAllocationProposalItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMAllocationProposalItemsInfo> GetItemForFreshLumberShipment()
        {
            DataSet ds = dal.GetDataSet("MMAllocationProposalItems_GetItemForFreshLumberShipment");
            return (List<MMAllocationProposalItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMAllocationProposalItemsInfo> GetNewProposalFromRoundwood(string MMAllocationProposalType)
        {
            DataSet ds = dal.GetDataSet("MMAllocationProposalItems_GetNewProposalFromRoundwood", MMAllocationProposalType);
            List<MMAllocationProposalItemsInfo> allocationProposalItems = new List<MMAllocationProposalItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMAllocationProposalItemsInfo objAllocationProposalItemsInfo = (MMAllocationProposalItemsInfo)GetObjectFromDataRow(row);
                    allocationProposalItems.Add(objAllocationProposalItemsInfo);
                }
            }
            return allocationProposalItems;
        }

        public List<MMAllocationProposalItemsInfo> GetAllocationProposalWoodItemForReport(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMAllocationProposalItems_GetAllocationProposalWoodItemForReport", batchProductID);
            List<MMAllocationProposalItemsInfo> allocationProposalItems = new List<MMAllocationProposalItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMAllocationProposalItemsInfo objAllocationProposalItemsInfo = (MMAllocationProposalItemsInfo)GetObjectFromDataRow(row);
                    allocationProposalItems.Add(objAllocationProposalItemsInfo);
                }
            }
            ds.Dispose();
            return allocationProposalItems;
        }
        public List<MMAllocationProposalItemsInfo> GetAllocationProposalWoodItemDetailForReport(int batchProductID, int ProductForBatchID)
        {
            DataSet ds = dal.GetDataSet("MMAllocationProposalItems_GetAllocationProposalWoodItemDetailForReport", batchProductID, ProductForBatchID);
            List<MMAllocationProposalItemsInfo> allocationProposalItems = new List<MMAllocationProposalItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMAllocationProposalItemsInfo objAllocationProposalItemsInfo = (MMAllocationProposalItemsInfo)GetObjectFromDataRow(row);
                    allocationProposalItems.Add(objAllocationProposalItemsInfo);
                }
            }
            ds.Dispose();
            return allocationProposalItems;
        }
        public List<MMAllocationProposalItemsInfo> GetAllocationProposalPackagingItemForReport(int batchProductItemID)
        {
            DataSet ds = dal.GetDataSet("MMAllocationProposalItems_GetAllocationProposalPackagingItemForReport", batchProductItemID);
            List<MMAllocationProposalItemsInfo> allocationProposalItems = new List<MMAllocationProposalItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMAllocationProposalItemsInfo objAllocationProposalItemsInfo = (MMAllocationProposalItemsInfo)GetObjectFromDataRow(row);
                    allocationProposalItems.Add(objAllocationProposalItemsInfo);
                }
            }
            ds.Dispose();
            return allocationProposalItems;
        }
        public List<MMAllocationProposalItemsInfo> GetAllocationProposalItemForReport(int batchProductItemID)
        {
            DataSet ds = dal.GetDataSet("MMAllocationProposalItems_GetAllocationProposalItemForReport", batchProductItemID);
            List<MMAllocationProposalItemsInfo> allocationProposalItems = new List<MMAllocationProposalItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMAllocationProposalItemsInfo objAllocationProposalItemsInfo = (MMAllocationProposalItemsInfo)GetObjectFromDataRow(row);
                    allocationProposalItems.Add(objAllocationProposalItemsInfo);
                }
            }
            ds.Dispose();
            return allocationProposalItems;
        }

        public List<MMAllocationProposalItemsInfo> GetReceiptDryLumberFromAllocationProposal()
        {
            DataSet ds = dal.GetDataSet("MMAllocationProposalItems_GetReceiptDryLumberFromAllocationProposal");
            List<MMAllocationProposalItemsInfo> allocationProposalItems = new List<MMAllocationProposalItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMAllocationProposalItemsInfo objAllocationProposalItemsInfo = (MMAllocationProposalItemsInfo)GetObjectFromDataRow(row);
                    allocationProposalItems.Add(objAllocationProposalItemsInfo);
                }
            }
            ds.Dispose();
            return allocationProposalItems;
        }
        public List<MMAllocationProposalItemsInfo> GetMaterialReceiptByAllocationProposalType(string MMAllocationProposalType, int batchProductID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetMaterialReceiptByAllocationProposalType", MMAllocationProposalType, batchProductID);
            return (List<MMAllocationProposalItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMAllocationProposalItemsInfo> GetAllicationProposalItemForCancel()
        {
            DataSet ds = dal.GetDataSet("MMAllocationProposalItems_GetAllicationProposalItemForCancel");
            return (List<MMAllocationProposalItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMAllocationProposalItemsInfo> GetItemForMaterialShipment(string MMAllocationProposalType, int batchproduct, int productID, int alocationProposalId)
        {
            DataSet ds = dal.GetDataSet("MMAllocationProposalItems_GetItemForMaterialShipment", MMAllocationProposalType, batchproduct, productID, alocationProposalId);
            return (List<MMAllocationProposalItemsInfo>)GetListFromDataSet(ds);
        }
        public decimal GetQtyInAllocationProposal(int BatchProductID, int productID, int allocationPlanItemID, int allocationProposalItemID)
        {
            decimal qty = 0;
            MMAllocationProposalItemsInfo objAllocationProposalItemsInfo = new MMAllocationProposalItemsInfo();
            objAllocationProposalItemsInfo = (MMAllocationProposalItemsInfo)dal.GetDataObject("MMAllocationProposalItems_GetQtyInAllocationProposal", BatchProductID, productID, allocationPlanItemID, allocationProposalItemID);
            if (objAllocationProposalItemsInfo != null)
            {
                qty = objAllocationProposalItemsInfo.MMAllocationProposalItemQty;
            }
            return qty;
        }
        public decimal GetAllocationProposalByOperationAndSomeCriteria(int BatchProductID, int productID, int allocationPlanItemID, int? allocationProposalItemID, int? operationID)
        {
            decimal qty = 0;
            MMAllocationProposalItemsInfo objAllocationProposalItemsInfo = new MMAllocationProposalItemsInfo();
            objAllocationProposalItemsInfo = (MMAllocationProposalItemsInfo)dal.GetDataObject("MMAllocationPlanItems_GetAllocationProposalByOperationAndSomeCriteria"
                , BatchProductID, productID, allocationPlanItemID, allocationProposalItemID, operationID);
            if (objAllocationProposalItemsInfo != null)
            {
                qty = objAllocationProposalItemsInfo.MMAllocationProposalItemQty;
            }
            return qty;
        }
        public List<MMAllocationProposalItemsInfo> GetListFromMaintainProposal()
        {
            DataSet ds = dal.GetDataSet("MMAllocationProposalItems_GetListFromMaintainProposal");
            return (List<MMAllocationProposalItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMAllocationProposalItemsInfo> GetListItemByAllocationProposalID(int allocationProposalID)
        {
            DataSet ds = dal.GetDataSet("MMAllocationProposalItems_GetListItemByAllocationProposalID", allocationProposalID);
            return (List<MMAllocationProposalItemsInfo>)GetListFromDataSet(ds);
        }

        public decimal GetRemainAllocationProposalItemQty(int allocationProposalItemID, int shipmentItemID)
        {
            return (decimal)dal.GetSingleValue("MMAllocationProposalItems_GetRemainAllocationProposalItemQty", allocationProposalItemID, shipmentItemID);
        }
    }
    #endregion
}