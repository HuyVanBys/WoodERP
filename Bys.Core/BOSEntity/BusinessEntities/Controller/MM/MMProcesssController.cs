using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region MMProcesss
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMProcesssController
    //Created Date:Monday, October 29, 2018
    //-----------------------------------------------------------

    public class MMProcesssController : BaseBusinessController
    {
        public MMProcesssController()
        {
            dal = new DALBaseProvider("MMProcesss", typeof(MMProcesssInfo));
        }
        public List<MMProcesssInfo> GetProcessListData(int? productID)
        {
            DataSet ds = dal.GetDataSet("MMProcesss_GetProcessListData", productID);
            List<MMProcesssInfo> ProcesssList = new List<MMProcesssInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProcesssInfo objProcesssInfo = (MMProcesssInfo)GetObjectFromDataRow(row);
                    ProcesssList.Add(objProcesssInfo);
                }
            }
            ds.Dispose();
            return ProcesssList;
        }

        public List<MMProcesssInfo> GetAllAliveProcess()
        {
            DataSet ds = dal.GetDataSet("MMProcesss_GetAllAliveProcess");
            List<MMProcesssInfo> ProcesssList = new List<MMProcesssInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProcesssInfo objProcesssInfo = (MMProcesssInfo)GetObjectFromDataRow(row);
                    ProcesssList.Add(objProcesssInfo);
                }
            }
            ds.Dispose();
            return ProcesssList;
        }

        public DataSet GetAllProcessesForLookupControl(int branchID)
        {
            DataSet ds = dal.GetDataSet("MMOperationDetailPlans_GetProcessForLookupControl", branchID);
            return ds;
        }

        public DataSet GetDataSetOfBranch(string processNo, int? employeeID, string processType, string processStatus, DateTime dateFrom, DateTime dateTo, int branchID)
        {
            return dal.GetDataSet("MMProcesss_GetDataSetOfBranch", processNo, employeeID, processType, processStatus, dateFrom, dateTo, branchID);
        }

        public DataSet GetDataSetOfBranchList(string processNo, int? employeeID, string processType, string processStatus, DateTime dateFrom, DateTime dateTo, List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetDataSetOfBranch(processNo, employeeID, processType, processStatus, dateFrom, dateTo, ojbBranchsInfo.BRBranchID);
                rtn.Merge(ds);
            }
            return rtn;
        }
        
        public List<MMProcesssInfo> GetAllRelativeByProcessID(int processID)
        {
            DataSet ds = dal.GetDataSet("MMProcesss_GetAllRelativeByProcessID", processID);
            List<MMProcesssInfo> ProcesssList = new List<MMProcesssInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProcesssInfo objProcesssInfo = (MMProcesssInfo)GetObjectFromDataRow(row);
                    ProcesssList.Add(objProcesssInfo);
                }
            }
            ds.Dispose();
            return ProcesssList;
        }
    }
    #endregion
}