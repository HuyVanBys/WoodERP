using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;

namespace BOSERP
{
    #region MMProductionCostCalculations
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMProductionCostCalculationsController
    //Created Date:Thursday, October 04, 2018
    //-----------------------------------------------------------

    public class MMProductionCostCalculationsController : BaseBusinessController
    {
        public MMProductionCostCalculationsController()
        {
            dal = new DALBaseProvider("MMProductionCostCalculations", typeof(MMProductionCostCalculationsInfo));
        }

        public void UpdateReffReceipts(int productionCostCalculationID)
        {
            dal.ExecuteStoredProcedure("MMProductionCostCalculations_UpdateReffReceipts", productionCostCalculationID);
        }

        public void UpdateReffInProgressStatistics(int productionCostCalculationID)
        {
            dal.ExecuteStoredProcedure("MMProductionCostCalculations_UpdateReffInProgressStatistics", productionCostCalculationID);
        }
        public void UpdateReffShipments(int productionCostCalculationID)
        {
            dal.ExecuteStoredProcedure("MMProductionCostCalculations_UpdateReffShipments", productionCostCalculationID);
        }

        public void DeleteReference(int productionCostCalculationID, string userNmare)
        {
            dal.ExecuteStoredProcedure("MMProductionCostCalculations_DeleteReference", productionCostCalculationID, userNmare);
        }
        public MMProductionCostCalculationsInfo GetProductionCostByOperationIDAndDate(int? OperationID,  DateTime date )
        {
            List<MMProductionCostCalculationsInfo> invoices = new List<MMProductionCostCalculationsInfo>();
            DataSet ds = dal.GetDataSet("MMProductionCostCalculations_GetProductionCostByOperationIDAndDate", OperationID, date);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionCostCalculationsInfo objInfo = (MMProductionCostCalculationsInfo)GetObjectFromDataRow(row);
                    return objInfo;
                }
            }
            return new MMProductionCostCalculationsInfo();
        }
        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<MMProductionCostCalculationsInfo> productionCosts = new List<MMProductionCostCalculationsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionCostCalculationsInfo objInfo = (MMProductionCostCalculationsInfo)GetObjectFromDataRow(row);
                    productionCosts.Add(objInfo);
                }
            }
            ds.Dispose();
            return productionCosts;
        }
    }
    #endregion
}