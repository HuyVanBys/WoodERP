using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region MMProposals
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMProposalsController
    //Created Date:Tuesday, November 03, 2015
    //-----------------------------------------------------------

    public class MMProposalsController : BaseBusinessController
    {
        public MMProposalsController()
        {
            dal = new DALBaseProvider("MMProposals", typeof(MMProposalsInfo));
        }
        public DataSet GetAllMMProposalsForLookupControl()
        {
            DataSet ds = dal.GetDataSet("MMProposals_GetAllMMProposalsForLookupControl");
            return ds;
        }
        /// <summary>
        /// Get sale order item by sale order status and sale order batch status
        /// </summary>
        /// <returns>List proposalItemsInfo</returns>
        public List<MMProposalsInfo> GetProposalsBySomeCriteria(string proposalNo, string proposalName, string productionNormProposalType,
                                                                    string productionNormProposalStatus, string proposalType)
        {
            DataSet ds = dal.GetDataSet("MMProposals_GetProposalsBySomeCriteria", proposalNo, proposalName, productionNormProposalType,
                                                                                productionNormProposalStatus, proposalType);
            List<MMProposalsInfo> proposalItems = GetListFromDataSet(ds) as List<MMProposalsInfo>;
            return proposalItems;
        }

        /// <summary>
        /// Get sale order item by sale order status and sale order batch status
        /// </summary>
        /// <returns>List proposalItemsInfo</returns>
        public List<MMProposalsInfo> GetBatchProposalsBySomeCriteria(string proposalNo, string proposalName, string productionNormProposalType,
                                                                    string batchProposalStatus, string proposalType)
        {
            DataSet ds = dal.GetDataSet("MMProposals_GetBatchProposalsBySomeCriteria", proposalNo, proposalName, productionNormProposalType,
                                                                                batchProposalStatus, proposalType);
            List<MMProposalsInfo> proposalItems = GetListFromDataSet(ds) as List<MMProposalsInfo>;
            return proposalItems;
        }
        /// <summary>
        /// Get sale order item by sale order status and sale order batch status
        /// </summary>
        /// <returns>List proposalItemsInfo</returns>
        public List<MMProposalsInfo> GetBatchProposalsNewOrApproved(string proposalNo, string proposalName, string productionNormProposalType, string proposalType)
        {
            DataSet ds = dal.GetDataSet("MMProposals_GetBatchProposalsNewOrApproved", proposalNo, proposalName, productionNormProposalType,
                                                                                 proposalType);
            List<MMProposalsInfo> proposalItems = GetListFromDataSet(ds) as List<MMProposalsInfo>;
            return proposalItems;
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<MMProposalsInfo> proposalList = new List<MMProposalsInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProposalsInfo objProposalsInfo = (MMProposalsInfo)GetObjectFromDataRow(row);
                    proposalList.Add(objProposalsInfo);
                }
            }
            ds.Dispose();
            return proposalList;
        }

        /// <summary>
        /// Get sale order item by sale order status and sale order batch status
        /// </summary>
        /// <returns>List proposalItemsInfo</returns>
        public List<MMProposalsInfo> GetProposalsForBatchProduct()
        {
            DataSet ds = dal.GetDataSet("MMProposals_GetProposalsForBatchProduct");
            List<MMProposalsInfo> proposalList = new List<MMProposalsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProposalsInfo obj = (MMProposalsInfo)GetObjectFromDataRow(row);
                    proposalList.Add(obj);
                }
            }
            return proposalList;
        }

        public List<MMProposalsInfo> GetProposalsForBatchLumber()
        {
            DataSet ds = dal.GetDataSet("MMProposals_GetProposalsForBatchLumber");
            List<MMProposalsInfo> proposalList = new List<MMProposalsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProposalsInfo obj = (MMProposalsInfo)GetObjectFromDataRow(row);
                    proposalList.Add(obj);
                }
            }
            return proposalList;
        }

        public DataSet GetProposalByBatch(int batchID)
        {
            DataSet ds = dal.GetDataSet("MMProposals_GetProposalByBatch", batchID);
            return ds;
        }
        public DataSet GetProposalDataSet(string MMProposalNo,
                                            string MMProposalName,
                                            string MMProposalType,
                                            int? FK_ARCustomerID,
                                            int? FK_ARSaleOrderID,
                                            int? FK_HREmployeeID,
                                            string MMProposalBatchStatus,
                                            DateTime fromDate,
                                            DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("MMProposals_GetProposalDataSet",
                                                                    MMProposalNo,
                                                                    MMProposalName,
                                                                    MMProposalType,
                                                                    FK_ARCustomerID,
                                                                    FK_ARSaleOrderID,
                                                                    FK_HREmployeeID,
                                                                    MMProposalBatchStatus,
                                                                    fromDate,
                                                                    toDate);
            return ds;
        }

        public DataSet GetBatchProposalDataSet(string MMProposalNo,
                                            string MMProposalName,
                                            string MMProposalType,
                                            int? FK_ACObjectID,
                                            string ACObjectType,
                                            int? FK_ARSaleOrderID,
                                            int? FK_HREmployeeID,
                                            string MMProposalBatchStatus,
                                            DateTime fromDate,
                                            DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("MMProposals_GetBatchProposalDataSet",
                                                                    MMProposalNo,
                                                                    MMProposalName,
                                                                    MMProposalType,
                                                                    FK_ACObjectID,
                                                                    ACObjectType,
                                                                    FK_ARSaleOrderID,
                                                                    FK_HREmployeeID,
                                                                    MMProposalBatchStatus,
                                                                    fromDate,
                                                                    toDate);
            return ds;
        }

        public List<MMProposalsInfo> ShowAllBatchProposalForHome(DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("MMProposals_ShowAllBatchProposalForHome", fromDate, toDate);
            return (List<MMProposalsInfo>)GetListFromDataSet(ds);
        }

        public MMProposalsInfo GetProposalByProposalID(int proposalID)
        {
            MMProposalsInfo objProposalsInfo = dal.GetDataObject("MMProposals_GetProposalByProposalID", proposalID) as MMProposalsInfo;
            return objProposalsInfo;
        }
    }
    #endregion
}