using BOSLib;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region MMBatchProductProductionNormItemProcesss
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMBatchProductProductionNormItemProcesssController
    //Created Date:Wednesday, February 13, 2019
    //-----------------------------------------------------------

    public class MMBatchProductProductionNormItemProcesssController : BaseBusinessController
    {
        public MMBatchProductProductionNormItemProcesssController()
        {
            dal = new DALBaseProvider("MMBatchProductProductionNormItemProcesss", typeof(MMBatchProductProductionNormItemProcesssInfo));
        }

        public List<MMBatchProductProductionNormItemProcesssInfo> GetByItemID(int itemID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItemProcesss_GetByItemID", itemID);
            List<MMBatchProductProductionNormItemProcesssInfo> BatchProductProductionNormItemProcessList = new List<MMBatchProductProductionNormItemProcesssInfo>();
            foreach (DataRow row in ds.Tables[0].Rows)
            {
                MMBatchProductProductionNormItemProcesssInfo objBatchProductProductionNormItemProcesssInfo = (MMBatchProductProductionNormItemProcesssInfo)GetObjectFromDataRow(row);
                BatchProductProductionNormItemProcessList.Add(objBatchProductProductionNormItemProcesssInfo);
            }
            ds.Dispose();
            return BatchProductProductionNormItemProcessList;
        }
        public List<MMBatchProductProductionNormItemProcesssInfo> GetListForPrintRouting(int batchProductID, int ProductID, bool isOperationSyncProductCheck)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItemProcesssInfo_GetListForPrintRouting", batchProductID, ProductID, isOperationSyncProductCheck);
            return (List<MMBatchProductProductionNormItemProcesssInfo>)GetListFromDataSet(ds);
        }
        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<MMBatchProductProductionNormItemProcesssInfo> BatchProducts = new List<MMBatchProductProductionNormItemProcesssInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {

                    MMBatchProductProductionNormItemProcesssInfo objBatchProductsInfo = (MMBatchProductProductionNormItemProcesssInfo)GetObjectFromDataRow(row);
                    BatchProducts.Add(objBatchProductsInfo);
                }
            }
            ds.Dispose();
            return BatchProducts;
        }
        public List<MMBatchProductProductionNormItemProcesssInfo> GetProcessOperationByBatchProductIDForCapacity(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItemProcesss_GetProcessOperationByBatchProductIDForCapacity", batchProductID);
            return (List<MMBatchProductProductionNormItemProcesssInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemProcesssInfo> GetProcessOperationByBatchProductID(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItemProcesss_GetProcessOperationByBatchProductID", batchProductID);
            return (List<MMBatchProductProductionNormItemProcesssInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemProcesssInfo> GetListBomChangeProcessBySomeCriteria(int fromNormID, int toBatchItemID)
        {
            DataSet ds = dal.GetDataSet("[MMBatchProductProductionNormItemProcesss_GetListBomChangeProcessBySomeCriteria]", fromNormID, toBatchItemID);
            return (List<MMBatchProductProductionNormItemProcesssInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductProductionNormItemProcesssInfo> GetChangeProcessOperationByBatchQtyAndSomeCriteria(int fromNormID, int toBatchItemID, decimal qty)
        {
            DataSet ds = dal.GetDataSet("[MMBatchProductProductionNormItemProcesss_GetChangeProcessOperationByBatchQtyAndSomeCriteria]", fromNormID, toBatchItemID, qty);
            return (List<MMBatchProductProductionNormItemProcesssInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}