using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;


namespace BOSERP
{
    #region MMQuantityAllocationPercentConfigs
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMQuantityAllocationPercentConfigsController
    //Created Date:Monday, March 27, 2017
    //-----------------------------------------------------------

    public class MMQuantityAllocationPercentConfigsController : BaseBusinessController
    {
        public MMQuantityAllocationPercentConfigsController()
        {
            dal = new DALBaseProvider("MMQuantityAllocationPercentConfigs", typeof(MMQuantityAllocationPercentConfigsInfo));
        }
        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<MMQuantityAllocationPercentConfigsInfo> QuantityAllocationPercentConfigs = new List<MMQuantityAllocationPercentConfigsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMQuantityAllocationPercentConfigsInfo objQuantityAllocationPercentConfigsInfo = (MMQuantityAllocationPercentConfigsInfo)GetObjectFromDataRow(row);
                    QuantityAllocationPercentConfigs.Add(objQuantityAllocationPercentConfigsInfo);
                }
            }
            ds.Dispose();
            return QuantityAllocationPercentConfigs;
        }
        public MMQuantityAllocationPercentConfigsInfo GetDataForReportLabourProductivity(string labouringConfigDateType, DateTime searchFromDate, DateTime searchToDate)
        {

            List<MMQuantityAllocationPercentConfigsInfo> QuantityAllocationPercentConfigList = new List<MMQuantityAllocationPercentConfigsInfo>();
            DataSet ds = dal.GetDataSet("MMQuantityAllocationPercentConfigs_GetDataForReportLabourProductivity", labouringConfigDateType
                , searchFromDate, searchToDate);

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMQuantityAllocationPercentConfigsInfo objQuantityAllocationPercentConfigsInfo = (MMQuantityAllocationPercentConfigsInfo)GetObjectFromDataRow(row);
                    ds.Dispose();
                    return objQuantityAllocationPercentConfigsInfo;
                }
            }
            ds.Dispose();
            return null;
        }
        public MMQuantityAllocationPercentConfigsInfo GetDataForReportLabourProductivityByMonth(int? workShopID, int month, int year)
        {

            List<MMQuantityAllocationPercentConfigsInfo> QuantityAllocationPercentConfigList = new List<MMQuantityAllocationPercentConfigsInfo>();
            DataSet ds = dal.GetDataSet("MMQuantityAllocationPercentConfigs_GetDataForReportLabourProductivityByMonth", workShopID, month, year);

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMQuantityAllocationPercentConfigsInfo QuantityAllocationPercentConfigsInfo = (MMQuantityAllocationPercentConfigsInfo)GetObjectFromDataRow(row);
                    QuantityAllocationPercentConfigList.Add(QuantityAllocationPercentConfigsInfo);
                }
                if (QuantityAllocationPercentConfigList != null && QuantityAllocationPercentConfigList.Count > 0)
                {
                    MMQuantityAllocationPercentConfigsInfo objQuantityAllocationPercentConfigsInfo = new MMQuantityAllocationPercentConfigsInfo();
                    objQuantityAllocationPercentConfigsInfo.MMQuantityAllocationPercentConfigSoChe =
                        QuantityAllocationPercentConfigList.Sum(x => x.MMQuantityAllocationPercentConfigSoChe) / QuantityAllocationPercentConfigList.Count;
                    objQuantityAllocationPercentConfigsInfo.MMQuantityAllocationPercentConfigDinhHinh =
                       QuantityAllocationPercentConfigList.Sum(x => x.MMQuantityAllocationPercentConfigDinhHinh) / QuantityAllocationPercentConfigList.Count;
                    objQuantityAllocationPercentConfigsInfo.MMQuantityAllocationPercentConfigLapRap =
                       QuantityAllocationPercentConfigList.Sum(x => x.MMQuantityAllocationPercentConfigLapRap) / QuantityAllocationPercentConfigList.Count;
                    objQuantityAllocationPercentConfigsInfo.MMQuantityAllocationPercentConfigSon =
                       QuantityAllocationPercentConfigList.Sum(x => x.MMQuantityAllocationPercentConfigSon) / QuantityAllocationPercentConfigList.Count;
                    objQuantityAllocationPercentConfigsInfo.MMQuantityAllocationPercentConfigDongGoi =
                       QuantityAllocationPercentConfigList.Sum(x => x.MMQuantityAllocationPercentConfigDongGoi) / QuantityAllocationPercentConfigList.Count;
                    ds.Dispose();
                    return objQuantityAllocationPercentConfigsInfo;
                }
                else
                {
                    ds.Dispose();
                    return null;
                }
            }
            ds.Dispose();
            return null;
        }
        public MMQuantityAllocationPercentConfigsInfo GetDataForReportLabourProductivityNearMonth(int? workShopID, int year)
        {

            List<MMQuantityAllocationPercentConfigsInfo> QuantityAllocationPercentConfigList = new List<MMQuantityAllocationPercentConfigsInfo>();
            DataSet ds = dal.GetDataSet("MMQuantityAllocationPercentConfigs_GetDataForReportLabourProductivityNearMonth", workShopID, year);

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMQuantityAllocationPercentConfigsInfo QuantityAllocationPercentConfigsInfo = (MMQuantityAllocationPercentConfigsInfo)GetObjectFromDataRow(row);
                    QuantityAllocationPercentConfigList.Add(QuantityAllocationPercentConfigsInfo);
                }
                if (QuantityAllocationPercentConfigList != null && QuantityAllocationPercentConfigList.Count > 0)
                {
                    MMQuantityAllocationPercentConfigsInfo objQuantityAllocationPercentConfigsInfo = new MMQuantityAllocationPercentConfigsInfo();
                    objQuantityAllocationPercentConfigsInfo.MMQuantityAllocationPercentConfigSoChe =
                        QuantityAllocationPercentConfigList.Sum(x => x.MMQuantityAllocationPercentConfigSoChe) / QuantityAllocationPercentConfigList.Count;
                    objQuantityAllocationPercentConfigsInfo.MMQuantityAllocationPercentConfigDinhHinh =
                       QuantityAllocationPercentConfigList.Sum(x => x.MMQuantityAllocationPercentConfigDinhHinh) / QuantityAllocationPercentConfigList.Count;
                    objQuantityAllocationPercentConfigsInfo.MMQuantityAllocationPercentConfigLapRap =
                       QuantityAllocationPercentConfigList.Sum(x => x.MMQuantityAllocationPercentConfigLapRap) / QuantityAllocationPercentConfigList.Count;
                    objQuantityAllocationPercentConfigsInfo.MMQuantityAllocationPercentConfigSon =
                       QuantityAllocationPercentConfigList.Sum(x => x.MMQuantityAllocationPercentConfigSon) / QuantityAllocationPercentConfigList.Count;
                    objQuantityAllocationPercentConfigsInfo.MMQuantityAllocationPercentConfigDongGoi =
                       QuantityAllocationPercentConfigList.Sum(x => x.MMQuantityAllocationPercentConfigDongGoi) / QuantityAllocationPercentConfigList.Count;
                    ds.Dispose();
                    return objQuantityAllocationPercentConfigsInfo;
                }
                else
                {
                    ds.Dispose();
                    return null;
                }
            }
            ds.Dispose();
            return null;
        }

        public MMQuantityAllocationPercentConfigsInfo GetDataForReportLabourProductivityByYear(int? workShopID, int year)
        {

            List<MMQuantityAllocationPercentConfigsInfo> QuantityAllocationPercentConfigList = new List<MMQuantityAllocationPercentConfigsInfo>();
            DataSet ds = dal.GetDataSet("MMQuantityAllocationPercentConfigs_GetDataForReportLabourProductivityByYear", workShopID, year);

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMQuantityAllocationPercentConfigsInfo objQuantityAllocationPercentConfigsInfo = (MMQuantityAllocationPercentConfigsInfo)GetObjectFromDataRow(row);
                    QuantityAllocationPercentConfigList.Add(objQuantityAllocationPercentConfigsInfo);
                }
                if (QuantityAllocationPercentConfigList != null && QuantityAllocationPercentConfigList.Count > 0)
                {
                    MMQuantityAllocationPercentConfigsInfo objQuantityAllocationPercentConfigsInfo = new MMQuantityAllocationPercentConfigsInfo();
                    objQuantityAllocationPercentConfigsInfo.MMQuantityAllocationPercentConfigSoChe =
                        QuantityAllocationPercentConfigList.Sum(x => x.MMQuantityAllocationPercentConfigSoChe) / QuantityAllocationPercentConfigList.Count;
                    objQuantityAllocationPercentConfigsInfo.MMQuantityAllocationPercentConfigDinhHinh =
                       QuantityAllocationPercentConfigList.Sum(x => x.MMQuantityAllocationPercentConfigDinhHinh) / QuantityAllocationPercentConfigList.Count;
                    objQuantityAllocationPercentConfigsInfo.MMQuantityAllocationPercentConfigLapRap =
                       QuantityAllocationPercentConfigList.Sum(x => x.MMQuantityAllocationPercentConfigLapRap) / QuantityAllocationPercentConfigList.Count;
                    objQuantityAllocationPercentConfigsInfo.MMQuantityAllocationPercentConfigSon =
                       QuantityAllocationPercentConfigList.Sum(x => x.MMQuantityAllocationPercentConfigSon) / QuantityAllocationPercentConfigList.Count;
                    objQuantityAllocationPercentConfigsInfo.MMQuantityAllocationPercentConfigDongGoi =
                       QuantityAllocationPercentConfigList.Sum(x => x.MMQuantityAllocationPercentConfigDongGoi) / QuantityAllocationPercentConfigList.Count;
                    ds.Dispose();
                    return objQuantityAllocationPercentConfigsInfo;
                }
                else
                {
                    ds.Dispose();
                    return null;
                }
            }
            ds.Dispose();
            return null;
        }
    }
    #endregion
}