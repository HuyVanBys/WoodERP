using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace BOSERP
{
    #region MMProductionNormItems
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMProductionNormItemsController
    //Created Date:Wednesday, October 21, 2015
    //-----------------------------------------------------------

    public class MMProductionNormItemsController : BaseBusinessController
    {
        public MMProductionNormItemsController()
        {
            dal = new DALBaseProvider("MMProductionNormItems", typeof(MMProductionNormItemsInfo));
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<MMProductionNormItemsInfo> items = new List<MMProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionNormItemsInfo item = (MMProductionNormItemsInfo)GetObjectFromDataRow(row);
                    items.Add(item);
                }
            }
            ds.Dispose();
            return items;
        }

        public DataSet GetParentOjects(int mainObjectID, string groupType)
        {
            return dal.GetDataSet("MMProductionNormItems_GetParentOjects", mainObjectID, groupType);
        }

        public DataSet GetParentObjects(int mainObjectID, string groupType)
        {
            return dal.GetDataSet("MMProductionNormItems_GetParentObjects", mainObjectID, groupType);
        }

        public DataSet GetMMProductionNormItemsByGroupType(String groupType, int mainObjectID)
        {
            return dal.GetDataSet("MMProductionNormItems_GetMMProductionNormItemsByGroupType", groupType, mainObjectID);
        }

        public List<MMProductionNormItemsInfo> GetMMProductionNormItemsByBatchProduct(int ARProductionPlanningID, string typeGroup)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetMMProductionNormItemsByBatchProduct", ARProductionPlanningID, typeGroup);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetProductionNormItemsByGroupTypeAndProductionNormID(String groupType, int productionNormID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetProductionNormItemsByGroupType", groupType, productionNormID);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetNormItemOperationsByParentAndGroupType(String groupType, int productionNormID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetNormItemOperationsByParentAndGroupType", groupType, productionNormID);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetNormItemAllTypeByListNormID(String NormIDList)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetNormItemAllTypeByListNormID", NormIDList);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetProductionNormItemsListProductionNormID(string productionNormID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetProductionNormItemsListProductionNormID", productionNormID);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetProductionNormItemsByProductionNormItemParentID(int productionNormItemParentID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetProductionNormItemsByProductionNormItemParentID", productionNormItemParentID);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public int GetCountProductionNormItemByType(int productionNormID, string type)
        {
            int count = 0;
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetCountProductionNormItemByType", productionNormID, type);
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    int.TryParse(ds.Tables[0].Rows[0].ItemArray[0].ToString(), out count);
                }
            }
            ds.Dispose();
            return count;
        }

        public List<MMProductionNormItemsInfo> GetChildPieceByParentIDAndProductType(int productionNormItemParentID, string productType)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetChildPieceByParentIDAndProductType", productionNormItemParentID, productType);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetAllAliveSemiProductParent()
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetAllAliveSemiProductParent");
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetTotalItemByParentID(int parentID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetTotalItemByParentID", parentID);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public bool IsExistProductBOM(int batchProductID, int batchProductItemID, string productionNormItemGroup)
        {
            int counter = (int)dal.GetSingleValue("MMBatchProductItems_IsExistProductBOM", batchProductID, batchProductItemID, productionNormItemGroup);
            if (counter > 0)
                return true;
            return false;
        }

        public List<MMProductionNormItemsInfo> GetProductionNormItemForSyncByProductID(int productID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetProductionNormItemForSyncByProductID", productID);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetItemByProductionNormIDAndGroup(int productID, string group)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetItemByProductionNormIDAndGroup", productID, group);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetProductionNormItemByID(int productionNormItemID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetProductionNormItemByID", productionNormItemID);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetDescInValidListByProductTypeAndProductionNormID(int productionNormItemID, string productType)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetDescInValidListByProductTypeAndProductionNormID", productionNormItemID, productType);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetItemNotInHistoryOfNewByProductionNormIDAndProductType(int productionNormID, string productType)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetItemNotInHistoryOfNewByProductionNormIDAndProductType", productionNormID, productType);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetItemNotInHistoryOfDeleteByProductionNormIDAndProductType(int productionNormID, string productType)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetItemNotInHistoryOfDeleteByProductionNormIDAndProductType", productionNormID, productType);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public override DataSet GetAllObjectsByObjectParentID(int iObjectParentID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetItem", iObjectParentID);
            return ds;
        }

        public decimal GetQtyForCancelWoodPlan(int BatchProductProductionNormItemID)
        {
            decimal qty = 0;
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetQtyForCancelWoodPlan", BatchProductProductionNormItemID);
            if (ds.Tables.Count > 0)
            {
                MMProductionNormItemsInfo objProductionNormItemsInfo = new MMProductionNormItemsInfo();
                objProductionNormItemsInfo = (MMProductionNormItemsInfo)dal.GetSingleObject(ds.Tables[0]);
                if (objProductionNormItemsInfo != null)
                {
                    qty = objProductionNormItemsInfo.MMProductionNormItemQuantity;
                }
            }
            ds.Dispose();
            return qty;
        }

        public List<MMProductionNormItemsInfo> GetProductionNormItemsByGroupTypeAndBatchProductItemID(int productID, string group, int batchProductItemID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetProductionNormItemsByGroupTypeAndBatchProductItemID", productID, group, batchProductItemID);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetListParentOjects(int mainObjectID, string groupType)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetParentOjects", mainObjectID, groupType);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetListParentObjects(int mainObjectID, string groupType)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetParentObjects", mainObjectID, groupType);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetProductionNormItemsByProductionNormIDAndProductionNormItemGroup(String groupType, int productionNormID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetProductionNormItemsByProductionNormIDAndProductionNormItemGroup", productionNormID, groupType);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetInvalidProductionNormItemsByBatchProductID(int batchProductID, string groupType)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetInvalidProductionNormItemsByBatchProductID", batchProductID, groupType);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetPaintForPrint(int productionNormID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetPaintForPrint", productionNormID);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetItemByProductIDAndGroup(int productID, string groupType)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetItemByProductIDAndGroup", productID, groupType);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetInvalidProductionNormItemsByProductionNormIDForReport(int productionNormID)
        {
            DataSet results = dal.GetDataSet("MMProductionNormItems_GetInvalidProductionNormItemsByProductionNormIDForReport", productionNormID);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(results);
        }

        public List<MMProductionNormItemsInfo> GetInvalidProductionNormItemsByBatchProductIDAndTypeForReport(int productionNormID, string productionNormGroup)
        {
            DataSet results = dal.GetDataSet("MMProductionNormItems_GetInvalidProductionNormItemsByBatchProductIDAndTypeForReport", productionNormID, productionNormGroup);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(results);
        }

        public List<int> CheckProductionNormItemHashComponent(string productionNormItemRefenrence)
        {
            DataSet results = dal.GetDataSet("MMProductionNormItems_CheckProductionNormItemHashComponent", productionNormItemRefenrence);
            List<MMProductionNormItemsInfo> productionNormItemsList = (List<MMProductionNormItemsInfo>)GetListFromDataSet(results);
            return productionNormItemsList.Select(o => o.MMProductionNormItemID).ToList();
        }

        public List<MMProductionNormItemsInfo> GetItemByGroup(string groupType)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetItemByGroup", groupType);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetItemByGroupPackagingAndProductDesc(string ProductDesc)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetItemByGroupPackagingAndProductDesc", ProductDesc);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public void DeleteProductionNormItemByParentID(int ProductionNormItemParentID, string updateUser)
        {
            dal.ExecuteStoredProcedure("MMProductionNormItems_DeleteProductionNormItemByParentID", ProductionNormItemParentID, updateUser);
        }

        public void UpdateAlternativeHardware(int? ProductionNormItemID, int productID, int alternativeID, string updateUser)
        {
            dal.ExecuteStoredProcedure("MMProductionNormItems_UpdateAlternativeHardware", ProductionNormItemID, productID, alternativeID, updateUser);
        }

        public List<MMProductionNormItemsInfo> GetCarcassByProductID(int ProductID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetCarcassByProductID", ProductID);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetCarcassByProductIDHardware(int bomID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetCarcassByProductIDHardware", bomID);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetCarcassByProductIDGeneralMaterial(int ProductID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetCarcassByProductIDGeneralMaterial", ProductID);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetCarcassByParentProductID(int ProductID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetCarcassByParentProductID", ProductID);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public void UpdateDeleteProductionNormItemsByProductionNormID(int productionNormID)
        {
            dal.ExecuteStoredProcedure("MMProductionNormItems_UpdateDeleteProductionNormItemsByProductionNormID", productionNormID);
        }

        public void CalculateProductionNormItemConsumable(int productionNormID, int carcassID, string ADUserName)
        {
            dal.ExecuteStoredProcedure("MMProductionNormItems_CalculateProductionNormItemConsumable", carcassID, productionNormID, ADUserName);
        }

        public List<MMProductionNormItemsInfo> GetByGroupAnd2ProductionNormID(string group, int productionNormID, DateTime effectiveDate)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetByGroupAnd2ProductionNormID", group, productionNormID, effectiveDate);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public void UpdateProductionNormItemRefID(string itemIDStr, int parentID)
        {
            dal.ExecuteStoredProcedure("MMProductionNormItems_UpdateProductionNormItemRefID", itemIDStr, parentID);
        }

        public List<MMProductionNormItemsInfo> GetPackByProductID(int bomID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetPackByProductID", bomID);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetPaintByProductID(int bomID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetPaintByProductID", bomID);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetParentListByListProductID(string ListProductID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetParentListByListProductID", ListProductID);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMProductionNormItemsInfo> GetItemForGroupByID(int productionNormID, string itemGroup)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetItemForGroupByID", productionNormID, itemGroup);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public void CreateProductionNormItemSemiProduct(int productionNormID)
        {
            dal.ExecuteStoredProcedure("MMProductionNormItems_CreateProductionNormItemSemiProduct", productionNormID);
        }

        public List<MMProductionNormItemsInfo> GetOperationProcessForGroupByID(int productionNormID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormItems_GetOperationProcessForGroupByID", productionNormID);
            return (List<MMProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}