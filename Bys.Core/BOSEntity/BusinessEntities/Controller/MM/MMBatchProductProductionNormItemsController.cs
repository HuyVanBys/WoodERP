using BOSCommon;
using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region MMBatchProductProductionNormItems
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMBatchProductProductionNormItemsController
    //Created Date:Thursday, November 05, 2015
    //-----------------------------------------------------------

    public class MMBatchProductProductionNormItemsController : BaseBusinessController
    {
        public MMBatchProductProductionNormItemsController()
        {
            dal = new DALBaseProvider("MMBatchProductProductionNormItems", typeof(MMBatchProductProductionNormItemsInfo));
        }

        public List<MMBatchProductProductionNormItemsInfo> GetProductionNormItemsByGroupTypeAndBatchProductID(String groupType, int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetProductionNormItemsByGroupTypeAndBatchProductID", groupType, batchProductID);
            List<MMBatchProductProductionNormItemsInfo> productionNormItemsList = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo objProductionNormItemsInfo = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    productionNormItemsList.Add(objProductionNormItemsInfo);
                }
            }
            ds.Dispose();
            return productionNormItemsList;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetListForInRouting(String groupType, int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetListForInRouting", groupType, batchProductID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductProductionNormItemsInfo> GetListByBatchProductAndExistOperation(int batchProductID, int operationID, string type)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetListByBatchProductAndExistOperation", batchProductID, operationID, type);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemForPaintByBatchProductID(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemForPaintByBatchProductID", batchProductID);
            List<MMBatchProductProductionNormItemsInfo> productionNormItemsList = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo objProductionNormItemsInfo = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    productionNormItemsList.Add(objProductionNormItemsInfo);
                }
            }
            ds.Dispose();
            return productionNormItemsList;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetProductionNormItemsByGroupTypeAndBatchProductID_ForBatchProduct(String groupType, int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetProductionNormItemsByGroupTypeAndBatchProductID_ForBatchProduct", groupType, batchProductID);
            List<MMBatchProductProductionNormItemsInfo> productionNormItemsList = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo objProductionNormItemsInfo = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    productionNormItemsList.Add(objProductionNormItemsInfo);
                }
            }
            ds.Dispose();
            return productionNormItemsList;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetBatchProductProductionNormItemsByBatchProductIDAndProductGroup(int batchProductID, string productGroup)
        {
            DataSet ds = dal.GetDataSet("[MMBatchProductProductionNormItems_GetBatchProductProductionNormItemsByBatchProductIDAndProductGroup]", batchProductID, productGroup);
            List<MMBatchProductProductionNormItemsInfo> productionNormItemsList = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo objProductionNormItemsInfo = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    productionNormItemsList.Add(objProductionNormItemsInfo);
                }
            }
            ds.Dispose();
            return productionNormItemsList;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemToConvertReceiptToPrevReceiptOperation(int batchProductID, string productGroup)
        {
            DataSet ds = dal.GetDataSet("[MMBatchProductProductionNormItems_GetItemToConvertReceiptToPrevReceiptOperation]", batchProductID, productGroup);
            List<MMBatchProductProductionNormItemsInfo> productionNormItemsList = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo objProductionNormItemsInfo = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    productionNormItemsList.Add(objProductionNormItemsInfo);
                }
            }
            ds.Dispose();
            return productionNormItemsList;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetAllProductionNormItemsByGroupTypeAndBatchProductID(String groupType, int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllProductionNormItemsByGroupTypeAndBatchProductID", groupType, batchProductID);
            List<MMBatchProductProductionNormItemsInfo> productionNormItemsList = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo objProductionNormItemsInfo = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    productionNormItemsList.Add(objProductionNormItemsInfo);
                }
            }
            ds.Dispose();
            return productionNormItemsList;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemToConvertReceiptToPrevReceiptOperationByList(List<int> batchID, string productGroup)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemToConvertReceiptToPrevReceiptOperationByList", string.Join(",", batchID.ToArray()), productGroup);

            List<MMBatchProductProductionNormItemsInfo> productionNormItemsList = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo objProductionNormItemsInfo = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    productionNormItemsList.Add(objProductionNormItemsInfo);
                }
            }
            ds.Dispose();
            return productionNormItemsList;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetItemBySomeConditions(int batchProductID, string productGroup, bool isHaveParent)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemBySomeConditions", batchProductID, productGroup, isHaveParent);
            List<MMBatchProductProductionNormItemsInfo> productionNormItemsList = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo objProductionNormItemsInfo = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    productionNormItemsList.Add(objProductionNormItemsInfo);
                }
            }
            ds.Dispose();
            return productionNormItemsList;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetBatchProductProductionNormItemByBatchProductID(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBatchProductProductionNormItemByBatchProductID", batchProductID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductProductionNormItemsInfo> GetListBySomeMaterial(int customerID, int collectionID, string woodType, int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetListBySomeMaterial", customerID, collectionID, woodType, batchProductID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public DataSet GetAllItemByBatchProductID(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllItemByBatchProductID", batchProductID);
            return ds;
        }
        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<MMBatchProductProductionNormItemsInfo> BatchProducts = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo objBatchProductsInfo = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    BatchProducts.Add(objBatchProductsInfo);
                }
            }
            ds.Dispose();
            return BatchProducts;
        }
        public List<MMBatchProductProductionNormItemsViewInfo> GetListViewFromDataSet(DataSet ds)
        {
            List<MMBatchProductProductionNormItemsViewInfo> BatchProducts = new List<MMBatchProductProductionNormItemsViewInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsViewInfo objBatchProductsInfo = (MMBatchProductProductionNormItemsViewInfo)GetObjectFromDataRow(row);
                    BatchProducts.Add(objBatchProductsInfo);
                }
            }
            ds.Dispose();
            return BatchProducts;
        }

        public List<MMBatchProductProductionNormItemsInfo> BatchProductProductionNormItemByBatchProductProductionNormItemParentID(int batchProductProductionNormItemParentID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_BatchProductProductionNormItemByBatchProductProductionNormItemParentID", batchProductProductionNormItemParentID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetItemByBatchProductItemIDAndProductType(int batchProductItemID, string productType)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemByBatchProductItemIDAndProductType", batchProductItemID, productType);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetGCItemForNewPurchasePlan()
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetGCItemForNewPurchasePlan");
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetBPProductionNormItemsForAllocationPlanByBatchProductItemIDAndProductType(int batchProductItemID, string productType)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBPProductionNormItemsForAllocationPlanByBatchProductItemIDAndProductType", batchProductItemID, productType);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetBatchProductProductionNormItemsForAllocationPlan(string productType, int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBatchProductProductionNormItemsForAllocationPlan", productType, batchProductID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetAllocationPlanHardwareAvailable(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllocationPlanHardwareAvailable", batchProductID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetBatchProductProductionNormItemsForAllocationPlanForIngredientPackaging(string productType, int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBatchProductProductionNormItemsForAllocationPlanForIngredientPackaging", productType, batchProductID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetAllMeterialOperationDetailPlanAvailable(int? batchProductID, int? operationDetailPlanID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllMeterialOperationDetailPlanAvailable", batchProductID, operationDetailPlanID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetBatchProductProductionNormItemsForAllocationPlan(string productType)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBatchProductProductionNormItemsForAllocationPlan", productType);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetBatchProductProductionNormItemsForAllocationPlanForIngredientPackaging(string productType)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBatchProductProductionNormItemsForAllocationPlanForIngredientPackaging", productType);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetIngredientPackagingNormForAllocationPlanBySomeCriteria(string productType, int? workshopID, int? batchProductID, DateTime? fromdate, DateTime? todate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetIngredientPackagingNormForAllocationPlanBySomeCriteria", productType, workshopID, batchProductID, fromdate, todate);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetAllItemByProductTypeAndBatchProductID(string productType, int batchProductItemID, int Operation)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllItemByProductTypeAndBatchProductID", productType, batchProductItemID, Operation);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetReceiptOverBomByProductTypeAndBatchProductID(string productType, int batchProductItemID, int Operation)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetReceiptOverBomByProductTypeAndBatchProductID", productType, batchProductItemID, Operation);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetAllItemByProductTypeAndBatchProductIDAndOperationDetailPlanID(string productType, int batchProductItemID, int Operation, int operationDetailPlanID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllItemByProductTypeAndBatchProductIDAndOperationDetailPlanID", productType, batchProductItemID, Operation, operationDetailPlanID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetAllItemByProductTypeAndBatchProductIDLapRapVaSon(string productType, int batchProductItemID, int Operation)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllItemByProductTypeAndBatchProductIDLapRapVaSon", productType, batchProductItemID, Operation);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetBPProductionNormItemsForPurchasePlanBySomeCriteria(int batchProductID, string productType)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBPProductionNormItemsForPurchasePlanBySomeCriteria", batchProductID, productType);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetBPProductionNormItemsForPurchasePlan(string productType)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBPProductionNormItemsForPurchasePlan", productType);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemTreeListByBatchProductProductionNormID(int itemID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemTreeListByBatchProductProductionNormID", itemID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetItemByDesc(int batchProductID, string desc)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemByDesc", batchProductID, desc);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetMMBatchProductProductionNormItemByMMBatchProductItemID(int batchProductID, string productType, int batchProductItemID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetMMBatchProductItemID", batchProductID, productType, batchProductItemID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    if (obj.MMBatchProductProductionNormItemParentID == 0)
                    {
                        obj.M3GoCuaCum = obj.MMBatchProductProductionNormItemWoodBlocks;
                        obj.DTSonA = obj.MMBatchProductProductionNormItemPaintA;
                        obj.DTSonB = obj.MMBatchProductProductionNormItemPaintB;

                    }
                    else
                    {
                        obj.TongKhoiLuongTieuHao = obj.MMBatchProductProductionNormItemTotalWoodConsumable;
                    }
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetBatchProductProductionNormItemByBatchProductItemID(int batchProductID, string productType, int batchProductItemID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBatchProductProductionNormItemByBatchProductItemID", batchProductID, productType, batchProductItemID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    if (obj.MMBatchProductProductionNormItemParentID == 0)
                    {
                        obj.M3GoCuaCum = obj.MMBatchProductProductionNormItemWoodBlocks;
                        obj.DTSonA = obj.MMBatchProductProductionNormItemPaintA;
                        obj.DTSonB = obj.MMBatchProductProductionNormItemPaintB;

                    }
                    else
                    {
                        obj.TongKhoiLuongTieuHao = obj.MMBatchProductProductionNormItemTotalWoodConsumable;
                    }
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetSemiProductByBatchProductItemID(int batchProductID, int batchProductItemID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetSemiProductByBatchProductItemID", batchProductID, batchProductItemID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    if (obj.MMBatchProductProductionNormItemParentID == 0)
                    {
                        obj.M3GoCuaCum = obj.MMBatchProductProductionNormItemWoodBlocks;
                        obj.DTSonA = obj.MMBatchProductProductionNormItemPaintA;
                        obj.DTSonB = obj.MMBatchProductProductionNormItemPaintB;

                    }
                    else
                    {
                        obj.TongKhoiLuongTieuHao = obj.MMBatchProductProductionNormItemTotalWoodConsumable;
                    }
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetAllAliveProduct()
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllAliveProduct");
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetSemiProductByBatchProductItemIDAndBatchProductID(int batchProductItemID, int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetSemiProductByBatchProductItemIDAndBatchProductID", batchProductItemID, batchProductID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetSemiProductByProductIDAndBatchProductID(int productID, int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetSemiProductByProductIDAndBatchProductID", productID, batchProductID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetChildByParentID(int parentID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetChildByParentID", parentID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetAllPackagingList()
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllPackagingList");
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public int IsExistProductionNorm(int batchProductItemID, int productionNormID, string productType)
        {
            int count = 0;
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_IsExistProductionNorm", batchProductItemID, productionNormID, productType);
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    int.TryParse(ds.Tables[0].Rows[0].ItemArray[0].ToString(), out count);
                }
            }
            ds.Dispose();
            return count;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetProductionNormItemByBatchProduct()
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetProductionNormItemByBatchProduct");
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetBPPItemBatchProductIDAndBatchProductItemIDAndType(int batchPRoductID, int batchProductItemID, string type)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBPPItemBatchProductIDAndBatchProductItemIDAndType", batchPRoductID, batchProductItemID, type);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemByParentID(int parentID, int MMBatchProductID, int operationID, int productID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemByParentID", parentID, MMBatchProductID, operationID, productID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetItemBySomeCriteria(int fK_MMBatchProductItemID, int fK_MMBatchProductID, int fK_ICProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemBySomeCriteria", fK_MMBatchProductItemID, fK_MMBatchProductID, fK_ICProductID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemByBatchProductItemList(string BatchProductItemList)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemByBatchProductItemList", BatchProductItemList);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemForSemiProductReceiptByBatchProductItemID(int batchProductItemID, int MMBatchProductID, int operationID, int productID, int batchProductProductionNormItemID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemForSemiProductReceiptByBatchProductItemID", batchProductItemID, MMBatchProductID, operationID, productID, batchProductProductionNormItemID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetSemiProductItemByBatchProductItemID(int batchProductItemID, int MMBatchProductID, int operationID, int productID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetSemiProductItemByBatchProductItemID", batchProductItemID, MMBatchProductID, operationID, productID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemByParentIDForDongGoi(int BatchProductItemID, int BatchProductID, int OperationID, int ProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemByParentIDForDongGoi", BatchProductItemID, BatchProductID, OperationID, ProductID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemByBatchProductIDAndOperationIDAndProductID(int FK_ICProductID, int MMBatchProductID, int operationID, int productID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemByBatchProductIDAndOperationIDAndProductID", FK_ICProductID, MMBatchProductID, operationID, productID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemByBatchProductIDAndOperationIDAndProductIDForSCTC(int FK_ICProductID, int MMBatchProductID, int operationID, int productID, int batchProductItemID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemByBatchProductIDAndOperationIDAndProductIDForSCTC", FK_ICProductID, MMBatchProductID, operationID, productID, batchProductItemID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetItemByBatchProductIDAndOperationIDAndProductIDForS(int FK_ICProductID, int MMBatchProductID, int operationID, int productID, int batchProductItemID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemByBatchProductIDAndOperationIDAndProductIDForS", FK_ICProductID, MMBatchProductID, operationID, productID, batchProductItemID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetProductByBatchProductID(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductBatchProductItems_GetProductByBatchProductID", batchProductID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetSemiProductByProductID(int batchProductionNormItemID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetSemiProductByProductID", batchProductionNormItemID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemByBPItemIDAndProductionNormItemID(int batchProductItemID, int productionNormItemID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemByBPItemIDAndProductionNormItemID", batchProductItemID, productionNormItemID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetItemByPNIParentIDAndBPItemID(int productionNormParentID, int batchProductionNormItemID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemByPNIParentIDAndBPItemID", productionNormParentID, batchProductionNormItemID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }

        public MMBatchProductProductionNormItemsInfo GetBPProductionNormItemByBatchProductIDAndBatchProductItemIDAndProductID(int batchProductID, int batchProductItemID, int productID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBPProductionNormItemByBatchProductIDAndBatchProductItemIDAndProductID", batchProductID, batchProductItemID, productID);
            MMBatchProductProductionNormItemsInfo obj = new MMBatchProductProductionNormItemsInfo();
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count != 0)
            {
                obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }
            ds.Dispose();
            return obj;
        }

        public void UpdateProductBlockPerOne(int batchProductItemID)
        {
            dal.ExecuteStoredProcedure("MMBatchProductProductionNormItems_UpdateProductBlockPerOne", batchProductItemID);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetItemForReportBTPPhoi(int customerID, int batchProductID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemForReportBTPPhoi", customerID, batchProductID, fromDate, toDate);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    obj.SoLuongThieu = obj.SoLuongChiTietKeHoach - obj.SoLuongSXThucTe;
                    obj.M3Thieu = obj.M3TinhKeHoach - obj.M3ThucTe;
                    if (obj.M3GoKeHoach > obj.M3ThucTeNhan)
                    {
                        obj.M3GoConLai = obj.M3GoKeHoach - obj.M3ThucTeNhan;
                    }
                    if (obj.M3ThucTeNhan > obj.M3GoKeHoach)
                    {
                        obj.M3VuotDM = obj.M3ThucTeNhan - obj.M3GoKeHoach;
                    }
                    obj.ThanhPham = obj.MaSP + " - " + obj.TenSP;
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemForReportBTPSoChe(DateTime fromDate, DateTime toDate, int batchProductID, int customerID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemForReportBTPSoChe", fromDate, toDate, batchProductID, customerID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    obj.SoLuongThieu = obj.SoLuongChiTietKeHoach - obj.SoLuongSXThucTe;
                    obj.M3Thieu = obj.M3TinhKeHoach - obj.M3ThucTe;
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetItemForReportBTPHoanThienDinhHinh(DateTime fromDate, DateTime toDate, int batchProductID, int customerID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemForReportBTPHoanThienDinhHinh", fromDate, toDate, batchProductID, customerID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    obj.SoLuongDoDang = obj.SoLuongDaSoChe - obj.SoLuongDaDinhHinh;
                    obj.M3DoDang = obj.M3DaSoChe - obj.M3DaDinhHinh;
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemForReportBTPLapRap(int customerID, int batchProductID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemForReportBTPLapRap", customerID, batchProductID, fromDate, toDate);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)

                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    obj.SLChiTietDoDangChoLR = 0;
                    obj.M3DoDangChoLapRap = 0;
                    obj.SLCumThamKhao = 0;
                    //obj.SoLuongThieu = obj.SoLuongCumKeHoach - obj.SoLuongSXThucTe;
                    obj.SoLuongThieu = obj.SoLuongChiTietKeHoach - obj.SoLuongSXThucTe;
                    obj.M3Thieu = obj.M3TinhKeHoach - obj.M3ThucTe;
                    obj.SoLuongDoDang = obj.SoLuongCDTinhChe - obj.SoLuongSXThucTe;
                    obj.M3DoDang = obj.M3CDTinhChe - obj.M3ThucTe;
                    obj.SLChiTietDoDangChoLR = obj.SoLuongXuatCDLR - (obj.SoLuongSXThucTe * obj.SLChiTietCuaCum);
                    if (obj.SLChiTietDoDangChoLR >= 0)
                    {
                        obj.SLChiTietDoDangChoLR = obj.SLChiTietDoDangChoLR;
                    }
                    else
                        obj.SLChiTietDoDangChoLR = 0;
                    if (obj.SLChiTietCuaCum != 0)
                    {
                        obj.SLCumThamKhao = obj.SLChiTietDoDangChoLR / obj.SLChiTietCuaCum;
                    }
                    obj.M3DoDangChoLapRap = obj.M3XuatCDLR - (obj.M3ThucTe * obj.SLChiTietCuaCum);
                    if (obj.M3DoDangChoLapRap >= 0)
                    {
                        obj.M3DoDangChoLapRap = obj.M3DoDangChoLapRap;
                    }
                    else
                        obj.M3DoDangChoLapRap = 0;
                    list.Add(obj);
                }

            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemForReportBTPSon(int customerID, int batchProductID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemForReportBTPSon", customerID, batchProductID, fromDate, toDate);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)

                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    obj.SoLuongThieu = obj.SoLuongChiTietKeHoach - obj.SoLuongSXThucTe;
                    obj.M3Thieu = obj.M3TinhKeHoach - obj.M3ThucTe;
                    obj.SoLuongDoDang = obj.SoLuongCDLapRap - obj.SoLuongSXThucTe;
                    obj.M3DoDang = obj.M3CDLapRap - obj.M3ThucTe;
                    obj.SoLuongCumChuaQuaSon = obj.SoLuongChiTietKeHoach - obj.SoLuongXuatCDLapRap;
                    obj.M3CumChuaQuaSon = obj.M3TinhKeHoach - obj.M3CDXuatLapRap;

                    if (obj.SoLuongChiTietKeHoach > 0)
                    {
                        obj.M2DaQuaSon = obj.M2Dinhmuc / obj.SoLuongChiTietKeHoach * obj.SoLuongSXThucTe;
                    }
                    obj.M2dodang = obj.M2Dinhmuc - obj.M2DaQuaSon;
                    list.Add(obj);
                }

            ds.Dispose();
            return list;
        }

        //public override DataSet  GetAllObjectsByObjectParentID(
        public override DataSet GetAllObjectsByObjectParentID(int iObjectParentID)
        {
            //return base.GetAllObjectsByObjectParentID(iObjectParentID);
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemExcludeModified", iObjectParentID);

            return ds;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetMMBatchProductIDAndTypeisIngredientPaint(int customerID, int batchProductID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetMMBatchProductIDAndTypeisIngredientPaint", customerID, batchProductID, fromDate, toDate);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)

                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);

                    obj.ICShipmentItemProductQty = Math.Round(obj.ICShipmentItemProductQty, 4, MidpointRounding.AwayFromZero);
                    obj.MMBatchProductProductionNormItemQuantity = Math.Round(obj.MMBatchProductProductionNormItemQuantity, 4, MidpointRounding.AwayFromZero);
                    obj.ICReceiptItemProductQtyRedundant = Math.Round(obj.ICReceiptItemProductQtyRedundant, 4, MidpointRounding.AwayFromZero);
                    obj.ICReceiptItemProductQtyReturn = Math.Round(obj.ICReceiptItemProductQtyReturn, 4, MidpointRounding.AwayFromZero);
                    obj.ICShipmentItemProductQty = obj.ICShipmentItemProductQty - obj.ICReceiptItemProductQtyRedundant - obj.ICReceiptItemProductQtyReturn;

                    if (obj.ICShipmentItemProductQty >= obj.MMBatchProductProductionNormItemQuantity)
                    {
                        obj.SLVuotDM = obj.ICShipmentItemProductQty - obj.MMBatchProductProductionNormItemQuantity;
                        obj.SLdu = 0;
                    }
                    else
                    {
                        obj.SLdu = obj.MMBatchProductProductionNormItemQuantity - obj.ICShipmentItemProductQty;
                        obj.SLVuotDM = 0;
                    }
                    list.Add(obj);
                }

            ds.Dispose();
            return list;
        }
        public int GetCountBatchProductProductionNormItemChildByItemID(int ProductionNormItemID)
        {
            Object obj = dal.GetSingleValue("MMBatchProductProductionNormItems_GetCountBatchProductProductionNormItemChildByItemID", ProductionNormItemID);
            int Debt = 0;
            if (obj != null)
                Int32.TryParse(obj.ToString(), out Debt);

            return Debt;
        }


        public MMBatchProductProductionNormItemsInfo GetPurchasePlanQtyByBPPNItemID(int itemID, int purchasePlanItemID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetPurchasePlanQtyByBPPNItemID", itemID, purchasePlanItemID);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                MMBatchProductProductionNormItemsInfo objProductsInfo = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                ds.Dispose();
                return objProductsInfo;
            }
            ds.Dispose();
            return null;
        }
        public MMBatchProductProductionNormItemsInfo GetPurchasePlanQtyByBPPNItemIDProduct(int itemID, int purchasePlanItemID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetPurchasePlanQtyByBPPNItemIDProduct", itemID, purchasePlanItemID);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                MMBatchProductProductionNormItemsInfo objProductsInfo = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                ds.Dispose();
                return objProductsInfo;
            }
            ds.Dispose();
            return null;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetAllItemByBatchProductItemID(int batchProductItemID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllItemByBatchProductItemID", batchProductItemID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemByBatchProductItemIDAndProductTypeWithOperation(int batchProductID, int batchProductItemID, int operationID, string productType)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemByBatchProductItemIDAndProductTypeWithOperation", batchProductID, batchProductItemID, operationID, productType);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public MMBatchProductProductionNormItemsInfo GetBlockItemByBatchProductItemIDAndProductType(int batchProductID, int batchProductItemID, string productType)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBlockItemByBatchProductItemIDAndProductType", batchProductID, batchProductItemID, productType);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    ds.Dispose();
                    return obj;
                }
            }
            ds.Dispose();
            return null;
        }
        public MMBatchProductProductionNormItemsInfo GetItemByBatchProductItemIDAndProductForBatchAndProductID(int batchProductItemID, int ProductForBatchID, int productID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemByBatchProductItemIDAndProductForBatchAndProductID", batchProductItemID, ProductForBatchID, productID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    ds.Dispose();
                    return obj;
                }
            }
            ds.Dispose();
            return null;
        }
        public MMBatchProductProductionNormItemsInfo GetItemCanSyncData(int batchProductItemID, int? ProductForBatchID, int productID, int operationID, int? normID, int? receiptItemID, bool isCheckNew = false)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemCanSyncData", batchProductItemID, ProductForBatchID, productID, operationID, normID, receiptItemID, isCheckNew);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    ds.Dispose();
                    return obj;
                }
            }
            ds.Dispose();
            return null;
        }

        public MMBatchProductProductionNormItemsInfo GetItemByBatchProductItemIDAndProductionNormItemID(int batchProductItemID, int productionNormItemID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemByBatchProductItemIDAndProductionNormItemID", batchProductItemID, productionNormItemID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    ds.Dispose();
                    return obj;
                }
            }
            ds.Dispose();
            return null;
        }

        public MMBatchProductProductionNormItemsInfo GetAllItemByBatchProductItemIDAndProductionNormItemID(int batchProductItemID, int productionNormItemID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllItemByBatchProductItemIDAndProductionNormItemID", batchProductItemID, productionNormItemID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    ds.Dispose();
                    return obj;
                }
            }
            ds.Dispose();
            return null;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetBatchProductProductionNormItemByBatchProductIDAndBatchProductItem(int batchProductID, int batchProductItemID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBatchProductProductionNormItemByBatchProductIDAndBatchProductItem", batchProductID, batchProductItemID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductProductionNormItemsInfo> GetBatchSynchronousReportData(int batchProductID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBatchSynchronousReportData", batchProductID, fromDate, toDate);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    if (obj.MMBatchProductProductionNormItemGroup == ProductType.SemiProduct.ToString())
                    {

                        obj.SynchronousPercent = obj.SLNhap / obj.MMBatchProductProductionNormItemQuantity * 100;
                    }
                    else if (obj.MMBatchProductProductionNormItemGroup == ProductType.Product.ToString())
                    {

                        obj.SynchronousPercent = obj.SLNhap / obj.MMBatchProductItemProductQty * 100;
                    }
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public Report145Object GetItemForReport145(DateTime fromDate, DateTime toDate, int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemForReport145", fromDate, toDate, batchProductID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            List<int> distinctList = new List<int>();
            Report145Object rp145 = new Report145Object();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    if (!distinctList.Contains(obj.MMBatchProductProductionNormItemID))
                    {
                        distinctList.Add(obj.MMBatchProductProductionNormItemID);
                    }

                    if (obj.MMBatchProductProductionNormItemQuantity != 0)
                    {
                        //obj.Slhoantat = (obj.SLNhap / obj.MMBatchProductProductionNormItemQuantity) * 100;
                        if (obj.MMBatchProductProductionNormItemProductHeight != 0 &&
                            obj.MMBatchProductProductionNormItemProductLength != 0 &&
                            obj.MMBatchProductProductionNormItemProductWidth != 0)
                        {
                            obj.M3ThucTe = (obj.MMBatchProductProductionNormItemProductHeight *
                                            obj.MMBatchProductProductionNormItemProductLength *
                                            obj.MMBatchProductProductionNormItemProductWidth * obj.MMBatchProductProductionNormItemQuantity) / 1000000000;
                        }
                        else
                        {
                            obj.M3ThucTe = obj.MMBatchProductProductionNormItemBlockPerOne * obj.MMBatchProductProductionNormItemQuantity;
                        }
                    }
                    list.Add(obj);
                }
            }

            ds.Dispose();
            rp145.dataList = list;
            rp145.distinctList = distinctList;
            return rp145;
        }
        //public void InsertBatchProductProductionNormItem(int productionNormID, int batchProductItemID, int batchProductID, string
        //      createdUser, decimal BatchProductQty, int parentID, int productionNormItemID, int ProductForBatchID, string productionNormItemResourceType, string SerialNo)
        //{
        //    dal.ExecuteStoredProcedure("MMBatchProductProductionNormItems_InsertBatchProductProductionNormItem", productionNormID, batchProductItemID, batchProductID
        //        , createdUser, BatchProductQty, parentID, productionNormItemID, ProductForBatchID, productionNormItemResourceType, SerialNo);
        //}

        //public void InsertBatchProductProductionNormItemHW(int productionNormID, int batchProductItemID, int batchProductID, string
        //    createdUser, decimal BatchProductQty, int ProductForBatchID, string SerialNo, DateTime needTime)
        //{
        //    dal.ExecuteStoredProcedure("MMBatchProductProductionNormItems_InsertBatchProductProductionNormItemHW", productionNormID, batchProductItemID, batchProductID
        //        , createdUser, BatchProductQty, ProductForBatchID, SerialNo, needTime);
        //}
        public void DeleteBatchProductProductionNormItemByParentID(int batchProductID, int BatchProductItemID, int parentID, string User, string group)
        {
            dal.ExecuteStoredProcedure("MMBatchProductProductionNormItems_DeleteBatchProductProductionNormItemByParentID", batchProductID, BatchProductItemID, parentID, User, group);
        }
        public void DeleteBatchProductProductionNormItem(int batchProductID, int BatchProductItemID, string User, string group)
        {
            dal.ExecuteStoredProcedure("MMBatchProductProductionNormItems_DeleteBatchProductProductionNormItem", batchProductID, BatchProductItemID, User, group);
        }
        public void InsertBatchProductProductionNormItemPaint(int productionNormID, int batchProductItemID, int batchProductID, string
            createdUser, decimal BatchProductQty, int ProductForBatchID, string SerialNo, DateTime needTime)
        {
            dal.ExecuteStoredProcedure("MMBatchProductProductionNormItems_InsertBatchProductProductionNormItemPaint", productionNormID, batchProductItemID, batchProductID
                , createdUser, BatchProductQty, ProductForBatchID, SerialNo, needTime);
        }
        public void InsertBatchProductProductionNormItemPackaging(int productionNormID, int batchProductItemID, int batchProductID, string
            createdUser, decimal BatchProductQty, int parentID, int ProductionNormItemID, int ProductForBatchID, string SerialNo, DateTime needTime)
        {
            dal.ExecuteStoredProcedure("MMBatchProductProductionNormItems_InsertBatchProductProductionNormItemPackaging", productionNormID, batchProductItemID, batchProductID
                , createdUser, BatchProductQty, parentID, ProductionNormItemID, ProductForBatchID, SerialNo, needTime);
        }

        public void UpdateBatchProductProductionNormNo(int ProductID, string ProductNo, string ParentNo)
        {
            dal.ExecuteStoredProcedure("MMBatchProductProductionNormItems_UpdateBatchProductProductionNormNo", ProductID, ProductNo, ParentNo);
        }
        public List<MMBatchProductProductionNormItemsInfo> GetBPProductionNormItemCartonListByProductionNormAndCartonNoAndSaleOrderItem(int productionNormID, int saleOrderItemID, string productCartonNo, int? cartonProductgroupID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBPProductionNormItemCartonListByProductionNormAndCartonNoAndSaleOrderItem", productionNormID, saleOrderItemID, productCartonNo, cartonProductgroupID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetBatchProductProductionNormItemByOperationDetailPlanID(int operationDetailPlanID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBatchProductProductionNormItemByOperationDetailPlanID", operationDetailPlanID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductProductionNormItemsInfo> GetAllBatchProductProductionNormItemByOperationDetailPlanID(int operationDetailPlanID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllBatchProductProductionNormItemByOperationDetailPlanID", operationDetailPlanID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public MMBatchProductProductionNormItemsInfo GetItemForCheckValidQty(int bppniItemID, int operationDetailPlanID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemForCheckValidQty", bppniItemID, operationDetailPlanID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    ds.Dispose();
                    return obj;
                }
            }
            ds.Dispose();
            return null;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetAllOperationDetailPlanAllocatedQty(int operationDetailPlanID, int? MMAllocationPlanID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllOperationDetailPlanAllocatedQty", operationDetailPlanID, MMAllocationPlanID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetAllHardwareOperationDetailPlanAllocatedQty(int operationDetailPlanID, int? MMAllocationPlanID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllHardwareOperationDetailPlanAllocatedQty", operationDetailPlanID, MMAllocationPlanID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetAllListObjectByBatchProductID(int FK_MMBatchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllListObjectByBatchProductID", FK_MMBatchProductID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public void InsertBatchProductProductionNormItem(int batchProductProductionNormItemID, string productGroup, string createdUser)
        {
            //dal.ExecuteStoredProcedure("MMBatchProductProductionNormItems_InsertBatchProductProductionNormItem", batchProductProductionNormItemID, productGroup, createdUser);
            dal.ExecuteStoredProcedure("MMBatchProductProductionNormItems_InsertBatchProductProductionNormItemOld", batchProductProductionNormItemID, productGroup, createdUser);

        }
        //public void InsertBatchProductProductionNormItemRootNode(int batchProductItemID, string productGroup, string createdUser)
        //{
        //    dal.ExecuteStoredProcedure("MMBatchProductProductionNormItems_InsertBatchProductProductionNormItemRootNode", batchProductItemID, productGroup, createdUser);
        //}

        public void InsertBatchProductProductionNormItemRootNodeCarcass(int batchProductItemID, string productGroup, string createdUser)
        {
            dal.ExecuteStoredProcedure("MMBatchProductProductionNormItems_InsertBatchProductProductionNormItemRootNodeCarcass", batchProductItemID, productGroup, createdUser);
        }

        //public void InsertBatchProductProductionNormItemRootNodePaint(int batchProductItemID, string productGroup, string createdUser)
        //{
        //    dal.ExecuteStoredProcedure("MMBatchProductProductionNormItems_InsertBatchProductProductionNormItemRootNodePaint", batchProductItemID, productGroup, createdUser);
        //}

        public List<MMBatchProductProductionNormItemsInfo> GetBPPNParentItems(int batchProductProductionNormItemID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBPPNParentItems", batchProductProductionNormItemID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductProductionNormItemsInfo> GetBPPNParentItemsRootNode(int batchProductItemID, string productGroup)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBPPNParentItemsRootNode", batchProductItemID, productGroup);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemForCancelByBatchProductItemID(int batchProductItemID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemForCancelByBatchProductItemID", batchProductItemID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetItemForCancel(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemForCancel", batchProductID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetSemiProductForCancelBatchProduct(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetSemiProductForCancelBatchProduct", batchProductID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetListObjectByBatchProductID(int FK_MMBatchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetListObjectByBatchProductID", FK_MMBatchProductID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemForSemiProductReceiptByBatchProductItemIDForTransfer(int batchProductItemID, int MMBatchProductID, int operationID, int productID, int batchProductProductionNormItemID, int BatchProductTransferID, int ProductTransferID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemForSemiProductReceiptByBatchProductItemIDForTransfer", batchProductItemID, MMBatchProductID, operationID, productID, batchProductProductionNormItemID, BatchProductTransferID, ProductTransferID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemByBatchProductIDAndOperationIDAndProductIDForSCTCForTransfer(int FK_ICProductID, int MMBatchProductID, int operationID, int productID, int batchProductItemID, int batchProductTransferID, int productTransferID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemByBatchProductIDAndOperationIDAndProductIDForSCTCForTransfer", FK_ICProductID, MMBatchProductID, operationID, productID, batchProductItemID, batchProductTransferID, productTransferID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemByParentIDForDongGoiForTransfer(int BatchProductItemID, int BatchProductID, int OperationID, int ProductID, int batchProductTransferID, int productTransferID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemByParentIDForDongGoiForTransfer", BatchProductItemID, BatchProductID, OperationID, ProductID, batchProductTransferID, productTransferID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetAllItemByProductTypeAndBatchProductIDLapRapVaSonForTransfer(string productType, int batchProductItemID, int Operation, int shipmentD)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllItemByProductTypeAndBatchProductIDLapRapVaSonForTransfer", productType, batchProductItemID, Operation, shipmentD);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetAllItemByProductTypeAndBatchProductIDForTransfer(string productType, int batchProductItemID, int Operation, int shipmentID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllItemByProductTypeAndBatchProductIDForTransfer", productType, batchProductItemID, Operation, shipmentID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemForReport174(DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemForReport174", fromDate, toDate);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);

                    if (obj.TongM3TinhTheoLSX > 0)
                    {
                        obj.KLGoXe = obj.TongM3TinhTheoPG / obj.TongM3TinhTheoLSX * obj.TongM3TinhTheoHDCTG;
                    }
                    if (obj.KLGoXe > obj.TongM3TinhDaXuat)
                    {
                        obj.KLGoXe = obj.TongM3TinhDaXuat;
                    }

                    //if (obj.TongKLGoXeNhap > 0)
                    //{
                    //    obj.KLGoTron = obj.KLGoXe * obj.TongKLGoTronXuat / obj.TongKLGoXeNhap;
                    //}

                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }


        public decimal GetTotalManafacturingBatchProductBlocks(int batchProductID)
        {
            decimal totalBlocks = (decimal)dal.GetSingleValue("MMBatchProductProductionNormItems_GetTotalManafacturingBatchProductBlocks", batchProductID);
            return totalBlocks;
        }
        public MMBatchProductProductionNormItemsInfo GetItemByBatchProductItemIDAndProductIDAndGroupIsProduct(int batchProductItemID, int productID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemByBatchProductItemIDAndProductIDAndGroupIsProduct", batchProductItemID, productID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    ds.Dispose();
                    return obj;
                }
            }
            ds.Dispose();
            return null;
        }
        public decimal GetQtySemiproductByBatchProductIDAndCD_P_SC_TC(int batchProductID)
        {
            Object obj = dal.GetSingleValue("ProductionNormItems_GetQtySemiproductByBatchProductIDAndCD_P_SC_TC", batchProductID);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }
        public decimal GetQtySemiproductByBatchProductIDAndCD_LR_Son(int batchProductID)
        {
            Object obj = dal.GetSingleValue("ProductionNormItems_GetQtySemiproductByBatchProductIDAndCD_LR_Son", batchProductID);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }
        public decimal GetQtySemiproductByBatchProductIDAndCD_DG(int batchProductID)
        {
            Object obj = dal.GetSingleValue("ProductionNormItems_GetQtySemiproductByBatchProductIDAndCD_DG", batchProductID);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetMaterialWoodForAllocationPlanByBatchProductID(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetMaterialWoodForAllocationPlanByBatchProductID", batchProductID);

            List<MMBatchProductProductionNormItemsInfo> result = new List<MMBatchProductProductionNormItemsInfo>();

            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    if (obj.MMBatchProductProductionNormItemMeterialWoodBlocks > 0)
                    {
                        result.Add(obj);
                    }
                }
            }
            return result;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetMaterialWoodForPurchasePlanByBatchProductID(int? batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetMaterialWoodForPurchasePlanByBatchProductID", batchProductID);

            List<MMBatchProductProductionNormItemsInfo> result = new List<MMBatchProductProductionNormItemsInfo>();

            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    if (obj.MMBatchProductProductionNormItemMeterialWoodBlocks > 0)
                    {
                        result.Add(obj);
                    }
                }
            }
            return result;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetMaterialArtificialBoardForPurchasePlanByBatchProductID(int? batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetMaterialArtificialBoardForPurchasePlanByBatchProductID", batchProductID);

            List<MMBatchProductProductionNormItemsInfo> result = new List<MMBatchProductProductionNormItemsInfo>();

            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    if (obj.MMBatchProductProductionNormItemMeterialWoodBlocks > 0)
                    {
                        result.Add(obj);
                    }
                }
            }
            return result;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetMaterialArtificialBoardForPurchasePlan()
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetMaterialArtificialBoardForPurchasePlan");
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetMaterialForPurchasePlan()
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetMaterialSteelForPurchasePlan");
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetMaterialAddMaterialForPurchasePlanByBatchProductID(int? batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetMaterialAddMaterialForPurchasePlanByBatchProductID", batchProductID);

            List<MMBatchProductProductionNormItemsInfo> result = new List<MMBatchProductProductionNormItemsInfo>();

            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    if (obj.MMBatchProductProductionNormItemMeterialWoodBlocks > 0)
                    {
                        result.Add(obj);
                    }
                }
            }
            return result;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetAllBatchProductProductionNormItemsForTransferOutsourcing()
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllBatchProductProductionNormItemsForTransferOutsourcing");
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetAllocationPlanEquipmentAvailable(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllocationPlanEquipmentAvailable", batchProductID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetBatchProductProductionNormItemsByBatchProductItemIDsAndTypeForReport(string batchProductItemReference, string productionNormGroup)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBatchProductProductionNormItemsByBatchProductItemIDsAndTypeForReport", batchProductItemReference, productionNormGroup);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetInvalidProductionNormItemsForReportByBatchProductID(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetInvalidProductionNormItemsForReportByBatchProductID", batchProductID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetBatchProductProductionNormItemsForAllocationPlanForIngredientPaint(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBatchProductProductionNormItemsForAllocationPlanForIngredientPaint", batchProductID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        //public void UpdateBatchProductProductionNormItemFromProductionNormItemRef(string productionNormItemRef, string currentUser)
        //{
        //    dal.ExecuteStoredProcedure("MMBatchProductProductionNormItems_UpdateBatchProductProductionNormItemFromProductionNormItemRef", productionNormItemRef, currentUser);
        //}

        public void DeleteBatchProductProductionNormItemFromProductionNormItemRef(string productionNormItemRef, string currentUser)
        {
            dal.ExecuteStoredProcedure("MMBatchProductProductionNormItems_DeleteBatchProductProductionNormItemFromProductionNormItemRef", productionNormItemRef, currentUser);
        }

        //public void InsertBPProductionNormItemRootNode(int batchProductID, string productionNormItemRef, string createdUser)
        //{
        //    dal.ExecuteStoredProcedure("MMBatchProductProductionNormItems_InsertBPProductionNormItemRootNode", batchProductID, productionNormItemRef, createdUser);
        //}

        //public void InsertBPProductionNormItemChildNode(int batchProductID, string productionNormItemRef, string createdUser)
        //{
        //    dal.ExecuteStoredProcedure("MMBatchProductProductionNormItems_InsertBPProductionNormItemChildNode", batchProductID, productionNormItemRef, createdUser);
        //}

        public List<MMBatchProductProductionNormItemsInfo> GetBatchProductProductionNormItemsForTransferOutsourcing(int batchProductID
                                                                                                                    , int operationID
                                                                                                                    , int saleOrderID
                                                                                                                    , int acObjectID
                                                                                                                    , string acObjectType
                                                                                                                    , DateTime? fromDate
                                                                                                                    , DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBatchProductProductionNormItemsForTransferOutsourcing", batchProductID, operationID, saleOrderID, acObjectID, acObjectType, fromDate, toDate);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetItemForStatisticEndingInProgress(int batchProductID, bool hasReceiptShipment, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemForStatisticEndingInProgress", batchProductID, hasReceiptShipment, toDate);
            List<MMBatchProductProductionNormItemsInfo> productionNormItemsList = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo objProductionNormItemsInfo = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    productionNormItemsList.Add(objProductionNormItemsInfo);
                }
            }
            return productionNormItemsList;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemForSemiProductReceiptByBatchProductItemIDForTransfer1(int batchProductItemID, int MMBatchProductID, int operationID, int productID, int batchProductProductionNormItemID, int BatchProductTransferID, int ProductTransferID, DateTime endDate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemForSemiProductReceiptByBatchProductItemIDForTransfer1", batchProductItemID, MMBatchProductID, operationID, productID, batchProductProductionNormItemID, BatchProductTransferID, ProductTransferID, endDate);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetItemForSemiProductReceiptByBatchProductItemIDAndDate(int batchProductItemID, int MMBatchProductID, int operationID, int productID, int batchProductProductionNormItemID, DateTime endDate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemForSemiProductReceiptByBatchProductItemIDAndDate", batchProductItemID, MMBatchProductID, operationID, productID, batchProductProductionNormItemID, endDate);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }

        // Thêm DK ngày cuối tháng
        public List<MMBatchProductProductionNormItemsInfo> GetItemByBatchProductIDAndOperationIDAndProductIDAndDateForSCTC(int FK_ICProductID, int MMBatchProductID, int operationID, int productID, int batchProductItemID, DateTime endDate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemByBatchProductIDAndOperationIDAndProductIDAndDateForSCTC", FK_ICProductID, MMBatchProductID, operationID, productID, batchProductItemID, endDate);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemByBatchProductIDAndOperationIDAndProductIDAndDateForS(int FK_ICProductID, int MMBatchProductID, int operationID, int productID, int batchProductItemID, DateTime endDate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemByBatchProductIDAndOperationIDAndProductIDAndDateForS", FK_ICProductID, MMBatchProductID, operationID, productID, batchProductItemID, endDate);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemByParentIDAndDateForDongGoi(int BatchProductItemID, int BatchProductID, int OperationID, int ProductID, DateTime endDate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemByParentIDAndDateForDongGoi", BatchProductItemID, BatchProductID, OperationID, ProductID, endDate);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }

            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetM3DMLSXTrongKy(int batchProductID, int operationID, DateTime fromdate, DateTime todate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetM3DMLSXTrongKy", batchProductID, operationID, fromdate, todate);
            List<MMBatchProductProductionNormItemsInfo> productionNormItemsList = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo objProductionNormItemsInfo = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    productionNormItemsList.Add(objProductionNormItemsInfo);
                }
            }
            ds.Dispose();
            return productionNormItemsList;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetM3DMLSXTrongKyTheoMa(int batchProductID, int operationID, int productID, DateTime fromdate, DateTime todate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetM3DMLSXTrongKyTheoMa", batchProductID, operationID, productID, fromdate, todate);
            List<MMBatchProductProductionNormItemsInfo> productionNormItemsList = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo objProductionNormItemsInfo = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    productionNormItemsList.Add(objProductionNormItemsInfo);
                }
            }
            ds.Dispose();
            return productionNormItemsList;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetM3NhapLSXTCacKy(int batchProductID, int operationID, DateTime todate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetM3NhapLSXTCacKy", batchProductID, operationID, todate);
            List<MMBatchProductProductionNormItemsInfo> productionNormItemsList = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo objProductionNormItemsInfo = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    productionNormItemsList.Add(objProductionNormItemsInfo);
                }
            }
            ds.Dispose();
            return productionNormItemsList;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetM3NhapLSXTheoMaCacKy(int batchProductID, int operationID, int productID, DateTime todate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetM3NhapLSXTheoMaCacKy", batchProductID, operationID, productID, todate);
            List<MMBatchProductProductionNormItemsInfo> productionNormItemsList = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo objProductionNormItemsInfo = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    productionNormItemsList.Add(objProductionNormItemsInfo);
                }
            }
            ds.Dispose();
            return productionNormItemsList;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetM3HDCTNhapLSXTCacKy(int batchProductID, int operationID, DateTime todate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetM3HDCTNhapLSXTCacKy", batchProductID, operationID, todate);
            List<MMBatchProductProductionNormItemsInfo> productionNormItemsList = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo objProductionNormItemsInfo = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    productionNormItemsList.Add(objProductionNormItemsInfo);
                }
            }
            ds.Dispose();
            return productionNormItemsList;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetM3HDCTNhapLSXTheoMaCacKy(int batchProductID, int operationID, int productID, DateTime todate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetM3HDCTNhapLSXTheoMaCacKy", batchProductID, operationID, productID, todate);
            List<MMBatchProductProductionNormItemsInfo> productionNormItemsList = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo objProductionNormItemsInfo = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    productionNormItemsList.Add(objProductionNormItemsInfo);
                }
            }
            ds.Dispose();
            return productionNormItemsList;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetProductionNormItemsByGroupTypeAndBatchProductIDAndDesc(String groupType, int batchProductID, string ProductsDesc)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetProductionNormItemsByGroupTypeAndBatchProductIDAndDesc", groupType, batchProductID, ProductsDesc);
            List<MMBatchProductProductionNormItemsInfo> productionNormItemsList = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo objProductionNormItemsInfo = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    productionNormItemsList.Add(objProductionNormItemsInfo);
                }
            }
            ds.Dispose();
            return productionNormItemsList;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetProductionNormItemsByGroupTypeAndBatchProductIDAndDescAndProduct(String groupType, int batchProductID, string ProductsDesc, int productForBatchID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetProductionNormItemsByGroupTypeAndBatchProductIDAndDescAndProduct", groupType, batchProductID, ProductsDesc, productForBatchID);
            List<MMBatchProductProductionNormItemsInfo> productionNormItemsList = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo objProductionNormItemsInfo = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    productionNormItemsList.Add(objProductionNormItemsInfo);
                }
            }
            ds.Dispose();
            return productionNormItemsList;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetBatchProductProductionNormItemByProductionNormIDAndGroup(int productionNormID, int batchProductID, int productForBatchID, string group)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBatchProductProductionNormItemByProductionNormIDAndGroup", productionNormID, batchProductID, productForBatchID, group);
            List<MMBatchProductProductionNormItemsInfo> productionNormItemsList = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo objBatchProductProductionNormItemsInfo = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    productionNormItemsList.Add(objBatchProductProductionNormItemsInfo);
                }
            }

            ds.Dispose();
            return productionNormItemsList;
        }
        public bool GetExitBatchProductProductionNormItems(int batchProductItemID, string group)
        {
            bool result = false;
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetExitBatchProductProductionNormItems", batchProductItemID, group);
            List<MMBatchProductProductionNormItemsInfo> productionNormItemsList = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo objBatchProductProductionNormItemsInfo = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    productionNormItemsList.Add(objBatchProductProductionNormItemsInfo);
                }
                if (productionNormItemsList == null || productionNormItemsList.Count == 0)
                    result = false;
                else
                    result = true;
            }

            ds.Dispose();
            return result;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetAllocationPlanItemsForPurchasePlanItemTotalQuantity(int batchProductID, string productType)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllocationPlanItemsForPurchasePlanItemTotalQuantity", batchProductID, productType);
            List<MMBatchProductProductionNormItemsInfo> productionNormItemsList = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo objProductionNormItemsInfo = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    productionNormItemsList.Add(objProductionNormItemsInfo);
                }
            }
            ds.Dispose();
            return productionNormItemsList;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetBatchProductProductionNormItemByWoodAndOperationDetailPlanID(int operationDetailPlanID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBatchProductProductionNormItemByWoodAndOperationDetailPlanID", operationDetailPlanID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public void GenaralBarcode(int batchProductID)
        {
            dal.ExecuteStoredProcedure("MMBatchProductProductionNormItems_GenaralBarcode", batchProductID);
        }
        public List<MMBatchProductProductionNormItemsInfo> GetAllocationPlanHardwareAvailable(int? batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllocationPlanHardwareAvailable", batchProductID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetAllocationPlanHardwareAvailableBySomeCriteria(int? workshopID, int? batchProductID, DateTime? fromdate, DateTime? todate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllocationPlanHardwareAvailableBySomeCriteria", workshopID, batchProductID, fromdate, todate);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetBatchNormItemsForAllocationPlanBySomeCriteria(string type, int? workshopID, int? batchProductID, DateTime? fromdate, DateTime? todate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBatchNormItemsForAllocationPlanBySomeCriteria", type, workshopID, batchProductID, fromdate, todate);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetAllocationPlanGeneralMaterialAvailable(int? batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllocationPlanGeneralMaterialAvailable", batchProductID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetAllocationPlanGeneralMaterialAvailableByData(int? workshopID, int? batchProductID, DateTime? fromdate, DateTime? todate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllocationPlanGeneralMaterialAvailableByData", workshopID, batchProductID, fromdate, todate);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetAllocationPlanSteelAvailable(int? workshopID, int? batchProductID, DateTime? fromdate, DateTime? todate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllocationPlanSteelAvailable", workshopID, batchProductID, fromdate, todate);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetAllocationPlanMaterialWoodAvailable(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllocationPlanMaterialWoodAvailable", batchProductID);

            List<MMBatchProductProductionNormItemsInfo> result = new List<MMBatchProductProductionNormItemsInfo>();

            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    if (obj.MMBatchProductProductionNormItemMeterialWoodBlocks > 0)
                    {
                        result.Add(obj);
                    }
                }
            }
            ds.Dispose();
            return result;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetAllocationPlanMaterialWoodAvailableBySomeCriteria(int? workshopID, int? batchProductID, DateTime? fromdate, DateTime? todate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllocationPlanMaterialWoodAvailableBySomeCriteria", workshopID, batchProductID, fromdate, todate);

            List<MMBatchProductProductionNormItemsInfo> result = new List<MMBatchProductProductionNormItemsInfo>();

            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    if (obj.MMBatchProductProductionNormItemMeterialWoodBlocks > 0)
                    {
                        result.Add(obj);
                    }
                }
            }
            ds.Dispose();
            return result;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemForDetailPlan(DateTime fromdate, DateTime todate, int customerID, int collectionID, int woodTypeID, int TTMTID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemForDetailPlan", fromdate, todate, customerID, collectionID, woodTypeID, TTMTID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }


        public void InsertSemiProductByBatchProductID(int batchProductID, string userName)
        {
            dal.ExecuteStoredProcedure("MMBatchProductProductionNormItems_InsertSemiProductByBatchProductID", batchProductID, userName);
        }


        public List<MMBatchProductProductionNormItemsInfo> GetItemCTForDetailPlan(DateTime fromdate, DateTime todate, int customerID, int collectionID, int woodTypeID, int TTMTID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemCTForDetailPlan", fromdate, todate, customerID, collectionID, woodTypeID, TTMTID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemCumForDetailPlan(DateTime fromdate, DateTime todate, int customerID, int collectionID, int woodTypeID, int TTMTID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemCumForDetailPlan", fromdate, todate, customerID, collectionID, woodTypeID, TTMTID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemTPForDetailPlan(DateTime fromdate, DateTime todate, int customerID, int collectionID, int woodTypeID, int TTMTID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemTPForDetailPlan", fromdate, todate, customerID, collectionID, woodTypeID, TTMTID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductProductionNormItemsInfo> GetListItemByCustoms(DateTime fromdate, DateTime todate, int customerID, int collectionID, int woodTypeID, int TTMTID, int MMOperationID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetListItemByCustoms", fromdate, todate, customerID, collectionID, woodTypeID, TTMTID, MMOperationID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductProductionNormItemsViewInfo> GetListItemRemainBySomeCriteria(DateTime fromdate, DateTime todate, int? customerID, int? collectionID, int? woodTypeID, int? TTMTID, string MMOperationID, int? batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetListItemRemainBySomeCriteria", fromdate, todate, customerID, collectionID, woodTypeID, TTMTID, MMOperationID, batchProductID);
            return GetListViewFromDataSet(ds);
        }
        public List<MMBatchProductProductionNormItemsInfo> GetBPPNItemForCheckShipment(int batchProductID, int operationID, DateTime receiptDate, int receiptID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBPPNItemForCheckShipment", batchProductID, operationID, receiptDate, receiptID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductProductionNormItemsInfo> GetBPPNItemByBatchProductIDAndGroup(string group, int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBPPNItemByBatchProductIDAndGroup", group, batchProductID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductProductionNormItemsInfo> GetByGroupAndBatchProductID(string group, int batchProductID, DateTime effectivedate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetByGroupAndBatchProductID", group, batchProductID, effectivedate);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetdatalistByCarcassIDAndBatchProductID(int carcass, int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetdatalistByCarcassIDAndBatchProductID", carcass, batchProductID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductProductionNormItemsInfo> GetPrintSemiListByBatchProductItemID(int batchitemID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetPrintSemiListByBatchProductItemID", batchitemID );
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetAllHardwareOperationDetailPlanAvailable(int? batchProductID, int? operationDetailPlanID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllHardwareOperationDetailPlanAvailable", batchProductID, operationDetailPlanID);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetBPProductionNormItemsForPurchasePlanBySomeCriteriaByProduct(int? batchProductID, string productType)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBPProductionNormItemsForPurchasePlanBySomeCriteriaByProduct", batchProductID, productType);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                DataView dv = ds.Tables[0].DefaultView;
                dv.Sort = "FK_MMBatchProductID , ARSaleOrderNo,FK_ICProductForBatchID ASC";
                DataTable dt = dv.ToTable();
                foreach (DataRow row in dt.Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetAllPackagingOperationDetailPlanAvailable(string productType)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllPackagingOperationDetailPlanAvailable", productType);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetBPPNItemsForAllocationPlanByOperationDetailPlan(string productType)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBPPNItemsForAllocationPlanByOperationDetailPlan", productType);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetListItemByBatchProductIDListAndProductIDList(string batchProductIDList, string productIDList, int operationToID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetListItemByBatchProductIDListAndProductIDList", batchProductIDList, productIDList, operationToID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetAllItemListByBatchProductIDList(string batchProductIDList)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllItemListByBatchProductIDList", batchProductIDList);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetListItemByBatchProductIDAndProductID(int batchProductID, int productID, int operationToID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetListItemByBatchProductIDAndProductID", batchProductID, productID, operationToID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public decimal GetQuantitySemiProductDetailTypeByBatch(int batchProductID, int? productID)
        {
            Object obj = dal.GetSingleValue("ProductionNormItems_GetQuantitySemiProductDetailTypeByBatch", batchProductID, productID);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }

        public decimal GetQuantitySemiProductComponentTypeByBatch(int batchProductID, int? productID)
        {
            Object obj = dal.GetSingleValue("ProductionNormItems_GetQuantitySemiProductComponentTypeByBatch", batchProductID, productID);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }

        public decimal GetQuantityProductGroupTypeByBatch(int batchProductID, int? productID)
        {
            Object obj = dal.GetSingleValue("ProductionNormItems_GetQuantityProductGroupTypeByBatch", batchProductID, productID);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }
        public MMBatchProductProductionNormItemsInfo GetRemainAvailableByBPPNIDAndOperationChildID(int bPPNID, int? OperationChildID, int operationID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetRemainAvailableByBPPNIDAndOperationChildID", bPPNID, OperationChildID, operationID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    ds.Dispose();
                    return obj;
                }
            }
            ds.Dispose();
            return null;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetAllocationPlanGeneralMaterialAvailableBySomeCriteria(int? workshopID, int? batchProductID, DateTime? fromdate, DateTime? todate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetAllocationPlanGeneralMaterialAvailableBySomeCriteria", workshopID, batchProductID, fromdate, todate);
            List<MMBatchProductProductionNormItemsInfo> list = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo obj = (MMBatchProductProductionNormItemsInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetItemByBatchProductRef(string batchProductRef, string itemGroup)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemByBatchProductRef", batchProductRef, itemGroup);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetItemMaterialForBatchProductSheduleByBatchProductID(int batchProductID, string itemGroup)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemMaterialForBatchProductSheduleByBatchProductID", batchProductID, itemGroup);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemMaterialForBatchProductSheduleByNormID(int normID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemMaterialForBatchProductSheduleByNormID", normID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetItemForBatchProductSheduleByBatchProductID(int batchProductID, string itemGroup)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemForBatchProductSheduleByBatchProductID", batchProductID, itemGroup);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemForBatchProductSheduleByNormID(int NormID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemForBatchProductSheduleByNormID", NormID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetItemInventoryForBatchProductSheduleByBatchProductID(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemInventoryForBatchProductSheduleByBatchProductID", batchProductID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetSemiProductForLookupByBatchProductID(int batchProductID, int batchProductItemID = 0)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetSemiProductForLookupByBatchProductID", batchProductID, batchProductItemID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetItemOutsourcingForPurchaseProposal(int batchProductID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemOutsourcingForPurchaseProposal", batchProductID, fromDate, toDate);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetItemForPurchasePlan(int batchProductID, string pniGroup, int batchProductItemID, int objectID, string objectType, DateTime fromDate, DateTime toDate, int userID, string moduleName, string dataViewPermissionType, int branchID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemForPurchasePlan", batchProductID, pniGroup, batchProductItemID, objectID, objectType, fromDate, toDate, userID, moduleName, dataViewPermissionType, branchID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemMaterialForPurchasePlan(int batchProductID, string pniGroup, int batchProductItemID, int objectID, string objectType, DateTime fromDate, DateTime toDate, int userID, string moduleName, string dataViewPermissionType, int branchID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemMaterialForPurchasePlan", batchProductID, pniGroup, batchProductItemID, objectID, objectType, fromDate, toDate, userID, moduleName, dataViewPermissionType, branchID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetItemSemiProductForPurchaseOrderByBatchProductRef(string batchProductRef, string batchProductPniRef)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemSemiProductForPurchaseOrderByBatchProductRef", batchProductRef, batchProductPniRef);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetItemForPurchaseOrderByBatchProductRef(string batchProductRef)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemForPurchaseOrderByBatchProductRef", batchProductRef);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetBPRemainQtyForPurchaseProposal(string bpSemiProductRef, string proposalItemRef)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBPRemainQtyForPurchaseProposal", bpSemiProductRef, proposalItemRef);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetBPRemainQtyForAllocationPlan(int batchProductID, string group, int pniID = 0, int allocationPlanItemID = 0)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBPRemainQtyForAllocationPlan", batchProductID, group, pniID, allocationPlanItemID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetMaterialItemForPurchaseOrderByRefID(string bpProductionNormItemRef)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetMaterialItemForPurchaseOrderByRefID", bpProductionNormItemRef);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetRemainMaterialProductQtyByPniIDAndGroup(int bpProductionNormItemID, string itemGroup, int purchaseOrderItemOutSourcingID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetRemainMaterialProductQtyByPniIDAndGroup", bpProductionNormItemID, itemGroup, purchaseOrderItemOutSourcingID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetItemForProductionAdjustment(int batchProductID, int batchProductItemID, string productSerial, int operationID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemForProductionAdjustment", batchProductID, batchProductItemID, productSerial, operationID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductProductionNormItemsInfo> GetListNormQtyRemainBySomeCriteria(int? batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetListNormQtyRemainBySomeCriteria", batchProductID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetItemForBatchProductOutsourcing(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemForBatchProductOutsourcing", batchProductID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductProductionNormItemsInfo> GetUnfinishedSemiProductsBySomeCriteria(string batchProductIDList, int operationID, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetUnfinishedSemiProductsBySomeCriteria", batchProductIDList, operationID, toDate);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetBlockByIDList(string idList)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetBlockByIDList", idList);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> BatchProductProductionNormItemByBatchProductIDList(string batchProductIDList, string productType)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_BatchProductProductionNormItemByBatchProductIDList", batchProductIDList, productType);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemForExport(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_ExportTemplateCNC", batchProductID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        private MMBatchProductionNormItemView ToMMBatchProductionNormItemView(MMBatchProductProductionNormItemsInfo item)
        {
            return new MMBatchProductionNormItemView()
            {
                FK_ICProductID = item.FK_ICProductID,
                ICProductNo = item.ICProductNo,
                FK_MMBatchProductID = item.FK_MMBatchProductID,
                FK_ICDepartmentID = item.FK_ICDepartmentID,
                FK_ICProductGroupID = item.FK_ICProductGroupID,
                FK_ICMeasureUnitID = item.FK_ICMeasureUnitID,
                MMBatchProductProductionNormItemQuantity = item.MMBatchProductProductionNormItemQuantity,
                MMBatchProductProductionNormItemProductName = item.MMBatchProductProductionNormItemProductName,
                MMBatchProductProductionNormItemProductDesc = item.MMBatchProductProductionNormItemProductDesc,
                MMBatchProductNo = item.MMBatchProductNo,
                MMBatchProductProductionNormItemProductHeight = item.MMBatchProductProductionNormItemProductHeight,
                MMBatchProductProductionNormItemProductWidth = item.MMBatchProductProductionNormItemProductHeight,
                MMBatchProductProductionNormItemProductLength = item.MMBatchProductProductionNormItemProductHeight,
            };
        }

        public bool IsValidQuantyCheckedBaseOnBatchProduct(int batchProductID, decimal receiptQty, int productID)
        {
            return (bool)dal.GetSingleValue("MMBatchProductProductionNormItems_IsValidQuantyCheckedBaseOnBatchProduct", batchProductID, receiptQty, productID);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetItemForPurchaseProposal(int batchProductID, string pniGroup, int batchProductItemID, int objectID, string objectType, DateTime fromDate, DateTime toDate, int userID, string moduleName, string dataViewPermissionType, int branchID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemForPurchaseProposal", batchProductID, pniGroup, batchProductItemID, objectID, objectType, fromDate, toDate, userID, moduleName, dataViewPermissionType, branchID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductProductionNormItemsInfo> GetItemMaterialForPurchaseProposal(int batchProductID, string pniGroup, int batchProductItemID, int objectID, string objectType, DateTime fromDate, DateTime toDate, int userID, string moduleName, string dataViewPermissionType, int branchID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemMaterialPurchaseProposal", batchProductID, pniGroup, batchProductItemID, objectID, objectType, fromDate, toDate, userID, moduleName, dataViewPermissionType, branchID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public decimal GetRemainItemForPurchaseProposal(int pniItemID, string pniGroup, int proposalItemID)
        {
            MMBatchProductProductionNormItemsInfo objPnjsInfo = (MMBatchProductProductionNormItemsInfo)dal.GetDataObject("MMBatchProductProductionNormItems_GetRemainItemForPurchaseProposal", pniItemID, pniGroup, proposalItemID);
            return objPnjsInfo == null ? 0 : objPnjsInfo.MMBatchProductProductionNormItemRemainQty;
        }

        public List<MMBatchProductProductionNormItemsInfo> GetRemainQtyForPurchaseProsalRef(string pniItemRef, string pniGroup, string proposalItemRef)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetRemainItemForPurchaseProposal", pniItemRef, pniGroup, proposalItemRef);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetProductForBatchProductShedule(string productGroup)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetProductForBatchProductShedule", productGroup);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetEndProcessByPniRef(string pniRef)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetEndProcessByPniRef", pniRef);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetItemOverBOMByBatchProductID(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetItemOverBOMByBatchProductID", batchProductID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public bool CheckItemExistPlan(int pnItemID, string groupType, int productID, int pnItemMeterialID)
        {
            return (bool)dal.GetSingleValue("MMBatchProductProductionNormItems_CheckItemExistPlan", pnItemID, groupType, productID, pnItemMeterialID);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetSemiProductItemForImportByBatchProductNo(string batchProductNo)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetSemiProductItemForImportByBatchProductNo", batchProductNo);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductProductionNormItemsInfo> GetRemainQtyForShipmentByReceiveOperation(int batchProductID, int batchProductItemID, int operationID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_GetRemainQtyForShipmentByReceiveOperation", batchProductID, batchProductItemID, operationID);
            return (List<MMBatchProductProductionNormItemsInfo>)GetListFromDataSet(ds);
        }

        public DataSet GetDataReportOrderTrackingMaterials(int customerID, int saleOrderID, int batchProductID, DateTime fromDate, DateTime toDate)
        {
            return dal.GetDataSet("MMBatchProductProductionNormItems_GetDataReportOrderTrackingMaterials", customerID, saleOrderID, batchProductID, fromDate, toDate);
        }

        public DataSet GetDataReportOrderTrackingItems(int customerID, int saleOrderID, int batchProductID, DateTime fromDate, DateTime toDate, string itemGroup)
        {
            return dal.GetDataSet("MMBatchProductProductionNormItems_GetDataReportOrderTrackingItems", customerID, saleOrderID, batchProductID, fromDate, toDate, itemGroup);
        }

        public DataSet GetDataReportOrderTrackingItemOutSourcings(int customerID, int saleOrderID, int batchProductID, DateTime fromDate, DateTime toDate)
        {
            return dal.GetDataSet("MMBatchProductProductionNormItems_GetDataReportOrderTrackingItemOutSourcings", customerID, saleOrderID, batchProductID, fromDate, toDate);
        }
        public DataSet GetSemiProductStructure(int batchProductID)
        {
            return dal.GetDataSet("MMBatchProductProductionNormItems_GetSemiProductStructure", batchProductID);
        }
        public void DeleteItemByID(int NormID)
        {
            dal.ExecuteStoredProcedure("MMBatchProductProductionNormItems_DeleteItemByID", NormID);
        }
    }
    public class Report145Object
    {
        public List<MMBatchProductProductionNormItemsInfo> dataList { get; set; }
        public List<int> distinctList { get; set; }

        public Report145Object()
        {
            dataList = new List<MMBatchProductProductionNormItemsInfo>();
            distinctList = new List<int>();
        }
    }
    #endregion
}