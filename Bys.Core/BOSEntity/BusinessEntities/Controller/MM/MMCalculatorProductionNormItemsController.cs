using BOSLib;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region MMCalculatorProductionNormItems
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMCalculatorProductionNormItemsController
    //Created Date:Monday, January 21, 2019
    //-----------------------------------------------------------

    public class MMCalculatorProductionNormItemsController : BaseBusinessController
    {
        public MMCalculatorProductionNormItemsController()
        {
            dal = new DALBaseProvider("MMCalculatorProductionNormItems", typeof(MMCalculatorProductionNormItemsInfo));
        }

        public List<MMCalculatorProductionNormItemsInfo> GetItemByCalculatorProductionNormCostID(int CalculatorProductionNormCostID, string group)
        {
            DataSet ds = dal.GetDataSet("MMCalculatorProductionNormItems_GetItemByCalculatorProductionNormCostID", CalculatorProductionNormCostID, group);
            List<MMCalculatorProductionNormItemsInfo> productionNormItemsList = new List<MMCalculatorProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMCalculatorProductionNormItemsInfo objProductionNormItemsInfo = (MMCalculatorProductionNormItemsInfo)GetObjectFromDataRow(row);
                    productionNormItemsList.Add(objProductionNormItemsInfo);
                }
            }
            ds.Dispose();
            return productionNormItemsList;
        }

        public void UpdateDeleteItemHasParentDelete(int calculatorProductionNormID)
        {
            dal.ExecuteStoredProcedure("MMCalculatorProductionNormItems_UpdateDeleteItemHasParentDelete", calculatorProductionNormID);

        }

        public List<MMCalculatorProductionNormItemsInfo> GetItemByCalculatorProductionNormCostIDandGroup(int CalculatorProductionNormCostID, string group)
        {
            DataSet ds = dal.GetDataSet("MMCalculatorProductionNormItems_GetItemByCalculatorProductionNormCostIDandGroup", CalculatorProductionNormCostID, group);
            List<MMCalculatorProductionNormItemsInfo> productionNormItemsList = new List<MMCalculatorProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMCalculatorProductionNormItemsInfo objProductionNormItemsInfo = (MMCalculatorProductionNormItemsInfo)GetObjectFromDataRow(row);
                    productionNormItemsList.Add(objProductionNormItemsInfo);
                }
            }
            ds.Dispose();
            return productionNormItemsList;
        }
    }
    #endregion
}