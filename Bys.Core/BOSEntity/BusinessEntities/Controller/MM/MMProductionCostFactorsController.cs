using BOSLib;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region MMProductionCostFactors
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMProductionCostFactorsController
    //Created Date:Thursday, September 20, 2018
    //-----------------------------------------------------------

    public class MMProductionCostFactorsController : BaseBusinessController
    {
        public MMProductionCostFactorsController()
        {
            dal = new DALBaseProvider("MMProductionCostFactors", typeof(MMProductionCostFactorsInfo));
        }

        public List<MMProductionCostFactorsInfo> GetAllAliveFactor()
        {
            List<MMProductionCostFactorsInfo> invoices = new List<MMProductionCostFactorsInfo>();
            DataSet ds = dal.GetDataSet("MMProductionCostFactors_GetAllAliveFactor");
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionCostFactorsInfo objInvoicesInfo = (MMProductionCostFactorsInfo)GetObjectFromDataRow(row);
                    invoices.Add(objInvoicesInfo);
                }
            }
            return invoices;
        }

        public List<MMProductionCostFactorsInfo> GetFactorOfFormulaByBatchProductID(int bpID)
        {
            List<MMProductionCostFactorsInfo> invoices = new List<MMProductionCostFactorsInfo>();
            DataSet ds = dal.GetDataSet("MMProductionCostFactors_GetFactorOfFormulaByBatchProductID", bpID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionCostFactorsInfo objInvoicesInfo = (MMProductionCostFactorsInfo)GetObjectFromDataRow(row);
                    invoices.Add(objInvoicesInfo);
                }
            }
            return invoices;
        }
        public List<MMProductionCostFactorsInfo> GetFactorOfFormulaByOperationID(int? OperationID)
        {
            List<MMProductionCostFactorsInfo> invoices = new List<MMProductionCostFactorsInfo>();
            DataSet ds = dal.GetDataSet("MMProductionCostFactors_GetFactorOfFormulaByOperationID", OperationID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionCostFactorsInfo objInvoicesInfo = (MMProductionCostFactorsInfo)GetObjectFromDataRow(row);
                    invoices.Add(objInvoicesInfo);
                }
            }
            return invoices;
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<MMProductionCostFactorsInfo> productionCostFactors = new List<MMProductionCostFactorsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionCostFactorsInfo objProductionCostFactorsInfo = (MMProductionCostFactorsInfo)GetObjectFromDataRow(row);
                    productionCostFactors.Add(objProductionCostFactorsInfo);
                }
            }
            ds.Dispose();
            return productionCostFactors;
        }

    }
    #endregion
}