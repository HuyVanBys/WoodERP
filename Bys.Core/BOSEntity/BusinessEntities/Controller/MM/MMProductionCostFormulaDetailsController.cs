using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region MMProductionCostFormulaDetails
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMProductionCostFormulaDetailsController
    //Created Date:Thursday, September 20, 2018
    //-----------------------------------------------------------

    public class MMProductionCostFormulaDetailsController : BaseBusinessController
    {
        public MMProductionCostFormulaDetailsController()
        {
            dal = new DALBaseProvider("MMProductionCostFormulaDetails", typeof(MMProductionCostFormulaDetailsInfo));

        }

        public List<MMProductionCostFormulaDetailsInfo> GetDetailByFormulaID(int formulaID)
        {
            List<MMProductionCostFormulaDetailsInfo> invoices = new List<MMProductionCostFormulaDetailsInfo>();
            DataSet ds = dal.GetDataSet("MMProductionCostFormulaDetails_GetDetailByFormulaID", formulaID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionCostFormulaDetailsInfo objInvoicesInfo = (MMProductionCostFormulaDetailsInfo)GetObjectFromDataRow(row);
                    invoices.Add(objInvoicesInfo);
                }
            }
            return invoices;
        }

        public List<MMProductionCostFormulaDetailsInfo> GetDetailByHasEndingInProgress(int formulaID, bool hasEndingInProgress)
        {
            List<MMProductionCostFormulaDetailsInfo> objList = new List<MMProductionCostFormulaDetailsInfo>();
            DataSet ds = dal.GetDataSet("MMProductionCostFormulaDetails_GetDetailByHasEndingInProgress", formulaID, hasEndingInProgress);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionCostFormulaDetailsInfo objProductionCostFormulaDetailsInfo = (MMProductionCostFormulaDetailsInfo)GetObjectFromDataRow(row);
                    objList.Add(objProductionCostFormulaDetailsInfo);
                }
            }
            ds.Dispose();
            return objList;
        }

        public List<MMProductionCostFormulaDetailsInfo> GetDetailByHasEndingInProgressAndInProgressClassifyType(string inProgressClassifyType, int formulaID, bool hasEndingInProgress)
        {
            List<MMProductionCostFormulaDetailsInfo> objList = new List<MMProductionCostFormulaDetailsInfo>();
            DataSet ds = dal.GetDataSet("MMProductionCostFormulaDetails_GetDetailByHasEndingInProgressAndInProgressClassifyType", inProgressClassifyType, formulaID, hasEndingInProgress);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionCostFormulaDetailsInfo objProductionCostFormulaDetailsInfo = (MMProductionCostFormulaDetailsInfo)GetObjectFromDataRow(row);
                    objList.Add(objProductionCostFormulaDetailsInfo);
                }
            }
            ds.Dispose();
            return objList;
        }

        public List<MMProductionCostFormulaDetailsInfo> GetDetailFormulaDetailTransaction(int formulaID, DateTime fromDate, DateTime toDate)
        {
            List<MMProductionCostFormulaDetailsInfo> invoices = new List<MMProductionCostFormulaDetailsInfo>();
            DataSet ds = dal.GetDataSet("MMProductionCostFormulaDetails_GetDetailFormulaDetailTransaction", formulaID, fromDate, toDate);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionCostFormulaDetailsInfo objInvoicesInfo = (MMProductionCostFormulaDetailsInfo)GetObjectFromDataRow(row);
                    invoices.Add(objInvoicesInfo);
                }
            }
            return invoices;
        }

        public List<MMProductionCostFormulaDetailsInfo> GetDetailByFormulaIDAndAllocationType(int formulaID, bool IsAllocationType, int operationID)
        {
            DataSet ds = dal.GetDataSet("MMProductionCostFormulaDetails_GetDetailByFormulaIDAndAllocationType", formulaID, IsAllocationType, operationID);
            return (List<MMProductionCostFormulaDetailsInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            var result = new List<MMProductionCostFormulaDetailsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    var item = (MMProductionCostFormulaDetailsInfo)GetObjectFromDataRow(row);
                    result.Add(item);
                }
            }
            ds.Dispose();
            return result;
        }
    }
    #endregion
}