using BOSLib;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region MMProductionNormProcessInfos
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMProductionNormProcessInfosController
    //Created Date:Friday, April 13, 2018
    //-----------------------------------------------------------

    public class MMProductionNormProcessInfosController : BaseBusinessController
    {
        public MMProductionNormProcessInfosController()
        {
            dal = new DALBaseProvider("MMProductionNormProcessInfos", typeof(MMProductionNormProcessInfosInfo));
        }
        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<MMProductionNormProcessInfosInfo> ProductionNormProcessInfos = new List<MMProductionNormProcessInfosInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionNormProcessInfosInfo objProductionNormProcessInfosInfo = (MMProductionNormProcessInfosInfo)GetObjectFromDataRow(row);
                    ProductionNormProcessInfos.Add(objProductionNormProcessInfosInfo);
                }
            }
            ds.Dispose();
            return ProductionNormProcessInfos;
        }
        public List<MMProductionNormProcessInfosInfo> GetConfigByProductAttribute(int ProductionNormItemID, int ProductAttributeSpecialityID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormProcessInfos_GetConfigByProductAttribute", ProductAttributeSpecialityID);
            List<MMProductionNormProcessInfosInfo> ProductionNormProcessInfos = new List<MMProductionNormProcessInfosInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionNormProcessInfosInfo objProductionNormProcessInfosInfo = (MMProductionNormProcessInfosInfo)GetObjectFromDataRow(row);
                    objProductionNormProcessInfosInfo.FK_MMProductionNormItemID = ProductionNormItemID;
                    ProductionNormProcessInfos.Add(objProductionNormProcessInfosInfo);
                }
            }
            ds.Dispose();
            return ProductionNormProcessInfos;
        }
        public List<MMProductionNormProcessInfosInfo> GetProductionNormProcessByProductionNorm(int ProductionNormID, int ProductionNormItemID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormProcessInfos_GetProductionNormProcessByProductionNorm", ProductionNormID, ProductionNormItemID);
            List<MMProductionNormProcessInfosInfo> ProductionNormProcessInfos = new List<MMProductionNormProcessInfosInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionNormProcessInfosInfo objProductionNormProcessInfosInfo = (MMProductionNormProcessInfosInfo)GetObjectFromDataRow(row);
                    objProductionNormProcessInfosInfo.FK_MMProductionNormItemID = ProductionNormItemID;
                    ProductionNormProcessInfos.Add(objProductionNormProcessInfosInfo);
                }
            }
            ds.Dispose();
            return ProductionNormProcessInfos;
        }
        public List<MMProductionNormProcessInfosInfo> GetProcessByProductionNorm(int ProductionNormID)
        {
            DataSet ds = dal.GetDataSet("MMProductionNormProcessInfos_GetProcessByProductionNorm", ProductionNormID);
            List<MMProductionNormProcessInfosInfo> ProductionNormProcessInfos = new List<MMProductionNormProcessInfosInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMProductionNormProcessInfosInfo objProductionNormProcessInfosInfo = (MMProductionNormProcessInfosInfo)GetObjectFromDataRow(row);
                    ProductionNormProcessInfos.Add(objProductionNormProcessInfosInfo);
                }
            }
            ds.Dispose();
            return ProductionNormProcessInfos;
        }
        public void UpdateOperationProcess(int ProductionNormItemOperationID, string Status, string UserName)
        {
            dal.ExecuteStoredProcedure("MMProductionNormProcessInfos_UpdateOperationProcess", ProductionNormItemOperationID, Status, UserName);
        }
        public void InsertItemOperationProcess(int MMProductionNormItemID, int ProductionNormItemOperationID, int MMOperationID, string UserName)
        {
            dal.ExecuteStoredProcedure("MMProductionNormProcessInfos_InsertItemOperationProcess", MMProductionNormItemID, ProductionNormItemOperationID, MMOperationID, UserName);
        }
        public void InsertItemOperationSpecialityProcess(int MMProductionNormItemID, int ProductionNormItemOperationID, int MMOperationID, int SpecialityID, string UserName)
        {
            dal.ExecuteStoredProcedure("MMProductionNormProcessInfos_InsertItemOperationSpecialityProcess", MMProductionNormItemID, ProductionNormItemOperationID, MMOperationID, SpecialityID, UserName);
        }
        public void InsertNonItemOperationProcess(int ProductionNormItemOperationID, int MMOperationID, string UserName)
        {
            dal.ExecuteStoredProcedure("MMProductionNormProcessInfos_InsertNonItemOperationProcess", ProductionNormItemOperationID, MMOperationID, UserName);
        }
        public void InsertOperationConfigProcess(int MMProductionNormItemID, int ProductionNormItemOperationID, int ProductAttributeSpecialityID, int MMOperationID, string UserName)
        {
            dal.ExecuteStoredProcedure("MMProductionNormProcessInfos_InsertOperationProcess", MMProductionNormItemID, ProductionNormItemOperationID, ProductAttributeSpecialityID, MMOperationID, UserName);
        }
    }
    #endregion
}