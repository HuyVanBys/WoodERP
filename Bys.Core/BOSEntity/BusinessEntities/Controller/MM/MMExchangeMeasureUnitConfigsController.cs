using BOSLib;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region MMExchangeMeasureUnitConfigs
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMExchangeMeasureUnitConfigsController
    //Created Date:Wednesday, January 06, 2016
    //-----------------------------------------------------------

    public class MMExchangeMeasureUnitConfigsController : BaseBusinessController
    {
        public MMExchangeMeasureUnitConfigsController()
        {
            dal = new DALBaseProvider("MMExchangeMeasureUnitConfigs", typeof(MMExchangeMeasureUnitConfigsInfo));
        }
        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<MMExchangeMeasureUnitConfigsInfo> products = new List<MMExchangeMeasureUnitConfigsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMExchangeMeasureUnitConfigsInfo objProductsInfo = (MMExchangeMeasureUnitConfigsInfo)GetObjectFromDataRow(row);
                    products.Add(objProductsInfo);
                }
            }
            ds.Dispose();
            return products;
        }
        public List<MMExchangeMeasureUnitConfigsInfo> GetAllAliveConfigs()
        {
            DataSet ds = dal.GetDataSet("MMExchangeMeasureUnitConfigs_GetAllAliveConfigs");
            return (List<MMExchangeMeasureUnitConfigsInfo>)GetListFromDataSet(ds);
        }


        public List<MMExchangeMeasureUnitConfigsInfo> GetExchangeMeasureUnitConfigsBySomeConditions(int productID, int? fromMeasureID, int? toMeasureID)
        {
            DataSet ds = dal.GetDataSet("MMExchangeMeasureUnitConfigs_GetExchangeMeasureUnitConfigsBySomeConditions", productID, fromMeasureID, toMeasureID);
            return (List<MMExchangeMeasureUnitConfigsInfo>)GetListFromDataSet(ds);
        }

        public MMExchangeMeasureUnitConfigsInfo GetLastExchangeMeasureUnitConfig(int productID, int? fromMeasureID, int? toMeasureID)
        {
            return (MMExchangeMeasureUnitConfigsInfo)dal.GetDataObject("MMExchangeMeasureUnitConfigs_GetLastExchangeMeasureUnitConfigsBySomeConditions", productID, fromMeasureID, toMeasureID);
        }
    }
    #endregion
}