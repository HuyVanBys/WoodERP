using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;

namespace BOSERP
{
    #region MMBatchProducts
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMBatchProductsController
    //Created Date:Thursday, November 05, 2015
    //-----------------------------------------------------------

    public class MMBatchProductsController : BaseBusinessController
    {
        public MMBatchProductsController()
        {
            dal = new DALBaseProvider("MMBatchProducts", typeof(MMBatchProductsInfo));
        }
        public DataSet GetAllBatchProductsForLookupControl()
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetAllMMBatchProductsForLookupControl");
            return ds;
        }
        public DataSet GetBatchProductByBranchsForLookupControl(int? branchID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductByBranchsForLookupControl", branchID);
            return ds;
        }
        /// <summary>
        /// Get batch product by status
        /// </summary>
        /// <param name="status">status</param>
        /// <returns>List MMBatchProductsInfo</returns>
        public List<MMBatchProductsInfo> GetBatchProductForSheduleByHWStatus(string status, string statusHW)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductForSheduleByHWStatus", status, statusHW);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }
        /// <summary>
        /// Get batch product by status
        /// </summary>
        /// <param name="status">status</param>
        /// <returns>List MMBatchProductsInfo</returns>
        public List<MMBatchProductsInfo> GetBatchProductForSheduleByPackagingStatus(string status, string statusPackaging)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductForSheduleByPackagingStatus", status, statusPackaging);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }
        /// <summary>
        /// Get batch product by status
        /// </summary>
        /// <param name="status">status</param>
        /// <returns>List MMBatchProductsInfo</returns>
        public List<MMBatchProductsInfo> GetBatchProductForSheduleByPaintStatus(string status, string statusPaint)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductForSheduleByPaintStatus", status, statusPaint);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }
        /// <summary>
        /// Get batch product by status
        /// </summary>
        /// <param name="status">status</param>
        /// <returns>List MMBatchProductsInfo</returns>
        public List<MMBatchProductsInfo> GetBatchProductForSheduleByWoodStatus(string status, string statusWood)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductForSheduleByWoodStatus", status, statusWood);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }
        /// <summary>
        /// Get batch product by status
        /// </summary>
        /// <param name="status">status</param>
        /// <returns>List MMBatchProductsInfo</returns>
        public List<MMBatchProductsInfo> GetBatchProductForSheduleByStatus(string status)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductForSheduleByStatus", status);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductsInfo> GetBatchProductsByWoodStatus(string status, string statusWood)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductsByWoodStatus", status, statusWood);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }
        /// <summary>
        /// Get batch product by status
        /// </summary>
        /// <param name="status">status</param>
        /// <returns>List MMBatchProductsInfo</returns>
        public List<MMBatchProductsInfo> GetBatchProductsByStatus(string status)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductsByStatus", status);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }
        /// <summary>
        /// Get batch product by status
        /// </summary>
        /// <param name="status">status</param>
        /// <returns>List MMBatchProductsInfo</returns>
        public List<MMBatchProductsInfo> GetBatchProductsByHWStatus(string status, string statusHW)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductsByHWStatus", status, statusHW);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }
        /// <summary>
        /// Get batch product by status
        /// </summary>
        /// <param name="status">status</param>
        /// <returns>List MMBatchProductsInfo</returns>
        public List<MMBatchProductsInfo> GetBatchProductsByPackagingStatus(string status, string statusPackaging)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductsByPackagingStatus", status, statusPackaging);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }
        /// <summary>
        /// Get batch product by status
        /// </summary>
        /// <param name="status">status</param>
        /// <returns>List MMBatchProductsInfo</returns>
        public List<MMBatchProductsInfo> GetBatchProductsByPaintStatus(string status, string statusPaint)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductsByPaintStatus", status, statusPaint);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductsInfo> GetBatchProductForWoodPlan()
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductForWoodPlan");
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductsInfo> GetBatchProductByWoodForAllocationPlan()
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductByWoodForAllocationPlan");
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }
        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<MMBatchProductsInfo> BatchProducts = new List<MMBatchProductsInfo>();
            if (ds != null && ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductsInfo objBatchProductsInfo = (MMBatchProductsInfo)GetObjectFromDataRow(row);
                    BatchProducts.Add(objBatchProductsInfo);
                }
                ds.Dispose();
            }
            return BatchProducts;
        }

        public List<MMBatchProductsInfo> CheckexistBatchProposal(int FK_MMProposalID)
        {
            DataSet ds = dal.GetDataSet("CheckexistBatchProposal", FK_MMProposalID);
            List<MMBatchProductsInfo> proposalList = new List<MMBatchProductsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductsInfo obj = (MMBatchProductsInfo)GetObjectFromDataRow(row);
                    proposalList.Add(obj);
                }
            }
            ds.Dispose();
            return proposalList;
        }

        public List<MMBatchProductsInfo> GetBatchProductForShipmentReceipt()
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductForShipmentReceipt");
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);

        }

        public List<MMBatchProductsInfo> GetBatchProductForSemiProductReceiptShipment()
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductForSemiProductReceiptShipment");
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);

        }

        public List<MMBatchProductsInfo> GetBatchProductGCForPurchasePlan()
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductGCForPurchasePlan");
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);

        }
        public DataSet GetBatchProductDataset(string type,
                                        string batchProductNo,
                                        int? employeeID,
                                        string status,
                                        int? saleOrderID,
                                        int? customerID,
                                        DateTime? dateFrom,
                                        DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductDataset", type, batchProductNo, employeeID, status, saleOrderID, customerID, dateFrom, dateTo);
            return ds;
        }

        public DataSet GetBatchProductForBatchLumber(string batchProductNo,
                                        int? employeeID,
                                        string status,
                                        int? saleOrderID,
                                        int? customerID,
                                        DateTime? dateFrom,
                                        DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductForBatchLumber", batchProductNo, employeeID, status, saleOrderID, customerID, dateFrom, dateTo);
            return ds;
        }



        public DataSet GetBatchProductForBatchProduct(string batchProductNo,
                                        int? employeeID,
                                        string status,
                                        int? saleOrderID,
                                        int? customerID,
                                        DateTime? dateFrom,
                                        DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductForBatchProduct", batchProductNo, employeeID, status, saleOrderID, customerID, dateFrom, dateTo);
            return ds;
        }
        public DataSet GetBatchProductForBranch(string batchProductNo,
                                                int? employeeID,
                                                int? acobjectID,
                                                string acobjectType,
                                                int? saleOrderID,
                                                int? workShopID,
                                                string batchProductStatus,
                                                DateTime? dateFrom,
                                                DateTime? dateTo,
                                                int? branchID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductForBranch", batchProductNo, employeeID, acobjectID, acobjectType, saleOrderID, workShopID, batchProductStatus, dateFrom, dateTo, branchID);
            return ds;
        }

        public DataSet GetBatchProductForBatchProductOfBranchList(string batchProductNo,
                                                                 int? employeeID,
                                                                 int? acobjectID,
                                                                 string acobjectType,
                                                                 int? saleOrderID,
                                                                 int? workShopID,
                                                                 string batchProductStatus,
                                                                 DateTime? dateFrom,
                                                                 DateTime? dateTo,
                                                                 List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetBatchProductForBranch(batchProductNo, employeeID, acobjectID, acobjectType, saleOrderID, workShopID, batchProductStatus, dateFrom, dateTo, ojbBranchsInfo.BRBranchID);
                rtn.Merge(ds);
            }
            return rtn;
        }
        public DataSet GetBatchProductDatasetExceptType(string type,
                                        string batchProductNo,
                                        int? employeeID,
                                        string status,
                                        int? saleOrderID,
                                        int? customerID,
                                        DateTime? dateFrom,
                                        DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductDatasetExceptType", type, batchProductNo, employeeID, status, saleOrderID, customerID, dateFrom, dateTo);
            return ds;
        }

        public List<MMBatchProductsInfo> GetProducingBatchProductBySaleOrderID(int saleOrderID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetProducingBatchProductBySaleOrderID", saleOrderID);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);

        }

        /// <summary>
        /// Get batch products for purchase plan by product type
        /// </summary>
        /// <param name="status">product type</param>
        /// <returns>List MMBatchProductsInfo</returns>
        public List<MMBatchProductsInfo> GetBatchProductsForPurchasePlanByProductType(string productType)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductsForPurchasePlanByProductType", productType);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductsInfo> GetAllBatchProductForAllocationProposal()
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetAllBatchProductForAllocationProposal");
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }

        //[NKVung]  [Qui trinh say gia cong]    [START]
        public List<MMBatchProductsInfo> GetBatchLumForPurchaseOrder()
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchLumForPurchaseOrder");
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }
        //[NKVung]  [Qui trinh say gia cong]    [END]

        public List<MMBatchProductsInfo> GetByProductionNormID(int productionNormID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetByProductionNormID", productionNormID);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductsInfo> GetBatchProductByCustomerID(int customerID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductByCustomerID", customerID);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductsInfo> GetBatchProductNoBypurchaseOrderNoList(string purchaseOrderNoList)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductNoBypurchaseOrderNoList", purchaseOrderNoList);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductsInfo> GetAllObject()
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_SelectAll");
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }

        public MMBatchProductsInfo GetBatchProductByBatchProductID(int batchProductID)
        {
            MMBatchProductsInfo batchProduct = dal.GetDataObject("MMBatchProducts_GetBatchProductByBatchProductID", batchProductID) as MMBatchProductsInfo;
            return batchProduct;
        }

        public List<MMBatchProductsInfo> ShowAllBatchProductNoPurchasePlanForHome(DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_ShowAllBatchProductNoPurchasePlanForHome", fromDate, toDate);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductsInfo> GetAllBatchProductForLookupToProduction()
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetAllBatchProductForLookupToProduction", 0);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductsInfo> GetAllBatchProductForLookupToProduction(int saleOrderID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetAllBatchProductForLookupToProduction", saleOrderID);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }

        public MMBatchProductsInfo GetObjectByIDForReport(int batchProductID)
        {
            MMBatchProductsInfo batchProduct = dal.GetDataObject("MMBatchProducts_GetObjectByIDForReport", batchProductID) as MMBatchProductsInfo;
            return batchProduct;
        }
        public List<MMBatchProductsInfo> GetObjectForLookupEditTransferOutsourcing()
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetObjectForLookupEditTransferOutsourcing");
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }

        public int GetCountBatchProductByBatchProposalID(int batchProposalID)
        {
            return (int)dal.GetSingleValue("MMBatchProducts_GetCountBatchProductByBatchProposalID", batchProposalID);
        }

        public bool CheckBatchProductAllowReset(int batchProductID)
        {
            return (bool)dal.GetSingleValue("MMBatchProducts_CheckBatchProductAllowReset", batchProductID);
        }

        public void ResetBatchProduct(int batchProductID, string currentUser)
        {
            dal.ExecuteStoredProcedure("MMBatchProducts_ResetBatchProduct", batchProductID, currentUser);
        }
        public List<MMBatchProductsInfo> GetBySaleOrderID(int saleOrderID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBySaleOrderID", saleOrderID);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }
        public void UpdateBatchProductNo(int woodPlanID)
        {
            dal.ExecuteStoredProcedure("MMBatchProducts_UpdateBatchProductNo", woodPlanID);
        }
        public List<MMBatchProductsInfo> GetBatchProductByStatusIsApproved()
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductByStatusIsApproved");
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductsInfo> GetByBOMMergeChangeTypeAndBOMID(int productionNormID, string type)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetByBOMMergeChangeTypeAndBOMID", productionNormID, type);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductsInfo> GetBatchProductByProductionNormID(int productionNormID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductByProductionNormID", productionNormID);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductsInfo> GetBatchProductUsingByProductionNormID(int productionNormID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductUsingByProductionNormID", productionNormID);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);

        }
        public List<MMBatchProductsInfo> GetBatchProductUsingProductionNormByType(int productionNormID, string type)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductUsingProductionNormByType", productionNormID, type);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductsInfo> GetBatchProductByIDList(string idList)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductByIDList", idList);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductsInfo> GetListByTypeOutsoursing()
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetListByTypeOutsoursing");
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductsInfo> GetBatchProductForShedule(int userID, string moduleName, string dataViewPermissionType, int branchID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductForShedule", userID, moduleName, dataViewPermissionType, branchID);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }

        public void CloseBatchProduct(int batchProductID, string userName, int employeeID, bool isCloseBatchProduct = false, int batchProductItemID = 0)
        {
            dal.ExecuteStoredProcedure("MMBatchProducts_CloseBatchProduct", batchProductID, userName, employeeID, isCloseBatchProduct, batchProductItemID);
        }

        public bool IsAllowCreateOutsourcing(int batchProductID)
        {
            return (bool)dal.GetSingleValue("MMBatchProducts_IsAllowCreateOutsourcing", batchProductID);
        }
        public bool IsExistAllocationPlan(int batchProductID)
        {
            return (bool)dal.GetSingleValue("MMBatchProducts_IsExistAllocationPlan", batchProductID);
        }

        public MMBatchProductsInfo CheckIsAllowCloseBatchProduct(int batchProductID)
        {
            return (MMBatchProductsInfo)dal.GetDataObject("MMBatchProducts_CheckIsAllowCloseBatchProduct", batchProductID);
        }

        public List<MMBatchProductsInfo> GetBatchProductForMaterialShipment(int userID, string moduleName, string dataViewPermissionType, int branchID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductForMaterialShipment", userID, moduleName, dataViewPermissionType, branchID);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }

        public void UpdateBatchProductByInvoiceID(int invoiceID)
        {
            dal.ExecuteStoredProcedure("MMBatchProducts_UpdateBatchProductByInvoiceID", invoiceID);
        }

        public bool CheckAllowReNewBatchProduct(int batchProductID)
        {
            return (bool)dal.GetSingleValue("MMBatchProducts_CheckAllowReNewBatchProduct", batchProductID);
        }

        public void DeleteBatchProduct(int batchProductID, string userName, bool isReNewBatchProduct = false)
        {
            dal.ExecuteStoredProcedure("MMBatchProducts_DeleteBatchProduct", batchProductID, userName, isReNewBatchProduct);
        }
        public List<MMBatchProductsInfo> GetRelativeBatchProductByProductionPlanningID(int productionPlanningID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetRelativeBatchProductByProductionPlanningID", productionPlanningID);
            return (List<MMBatchProductsInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}