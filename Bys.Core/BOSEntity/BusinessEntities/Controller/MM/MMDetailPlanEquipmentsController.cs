using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region MMDetailPlanEquipments
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMDetailPlanEquipmentsController
    //Created Date:Tuesday, October 08, 2019
    //-----------------------------------------------------------

    public class MMDetailPlanEquipmentsController : BaseBusinessController
    {
        public MMDetailPlanEquipmentsController()
        {
            dal = new DALBaseProvider("MMDetailPlanEquipments", typeof(MMDetailPlanEquipmentsInfo));
        }
        public List<MMDetailPlanEquipmentsInfo> GetDefaultDetailPlanEquipmentByPlan(int detailPlanID)
        {
            DataSet ds = dal.GetDataSet("MMDetailPlanEquipments_GetDefaultDetailPlanEquipmentByPlan", detailPlanID);
            List<MMDetailPlanEquipmentsInfo> itemsList = new List<MMDetailPlanEquipmentsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMDetailPlanEquipmentsInfo item = (MMDetailPlanEquipmentsInfo)GetObjectFromDataRow(row);
                    itemsList.Add(item);
                }
            }
            ds.Dispose();
            return itemsList;
        }
        public List<MMDetailPlanEquipmentsInfo> GetRegistPlanEquipmentByPlan(int detailPlanID)
        {
            DataSet ds = dal.GetDataSet("MMDetailPlanEquipments_GetRegistPlanEquipmentByPlan", detailPlanID);
            List<MMDetailPlanEquipmentsInfo> itemsList = new List<MMDetailPlanEquipmentsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMDetailPlanEquipmentsInfo item = (MMDetailPlanEquipmentsInfo)GetObjectFromDataRow(row);
                    itemsList.Add(item);
                }
            }
            ds.Dispose();
            return itemsList;
        }
        public List<MMDetailPlanEquipmentsInfo> GetAllItemChildByPlanID(int iObjectID)
        {
            DataSet ds = dal.GetDataSet("MMDetailPlanEquipments_GetAllItemChildByPlanID", iObjectID);
            return (List<MMDetailPlanEquipmentsInfo>)GetListFromDataSet(ds);
        }
        public List<MMDetailPlanEquipmentsInfo> GetRegistrationEquipmentData(int? batchProductID, int? productID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("MMDetailPlanEquipments_GetRegistrationEquipmentData", batchProductID, productID, fromDate, toDate);
            return (List<MMDetailPlanEquipmentsInfo>)GetListFromDataSet(ds);
        }
        public List<MMDetailPlanEquipmentsInfo> SearchPlanDetaiBySomeCriteria(DateTime? fromDate, DateTime? toDate
                                                                        , int? CustomerID, string objectType
                                                                        , int? SaleOrderID, int? batchProductID
                                                                        , string listOperationID, string productNo
                                                                        , string productName, int? branchID, int userID)
        {
            DataSet ds = dal.GetDataSet("MMDetailPlanEquipments_SearchPlanDetaiBySomeCriteria", fromDate, toDate, CustomerID, objectType, SaleOrderID, batchProductID, listOperationID, productNo, productName, branchID, userID);
            return (List<MMDetailPlanEquipmentsInfo>)GetListFromDataSet(ds);
        }
        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<MMDetailPlanEquipmentsInfo> List = new List<MMDetailPlanEquipmentsInfo>();
            if (ds != null && ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMDetailPlanEquipmentsInfo item = (MMDetailPlanEquipmentsInfo)GetObjectFromDataRow(row);
                    List.Add(item);
                }
                ds.Dispose();
            }
            return List;
        }
    }
    #endregion
}