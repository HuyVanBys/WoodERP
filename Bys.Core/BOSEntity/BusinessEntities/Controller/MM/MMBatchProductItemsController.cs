using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region MMBatchProductItems
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMBatchProductItemsController
    //Created Date:Thursday, November 05, 2015
    //-----------------------------------------------------------

    public class MMBatchProductItemsController : BaseBusinessController
    {
        public MMBatchProductItemsController()
        {
            dal = new DALBaseProvider("MMBatchProductItems", typeof(MMBatchProductItemsInfo));
        }
        public DataSet GetAllMMBatchProductItemsForLookupControl()
        {

            DataSet ds = dal.GetDataSet("MMBatchProductItems_GetAllMMBatchProductItemsForLookupControl");
            return ds;
        }
        /// <summary>
        /// Get batch product item by BatchProductsStatus
        /// </summary>
        /// <param name="status">status</param>
        /// <returns>List MMBatchProductItemsInfo</returns>
        public List<MMBatchProductItemsInfo> GetBatchProductItemByBatchProduct(int batchProductID)
        {
            DataSet ds = dal.GetAllDataByForeignColumn("FK_MMBatchProductID", batchProductID);
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }
        /// <summary>
        /// Get batch product item by BatchProductsStatus
        /// </summary>
        /// <param name="status">status</param>
        /// <returns>List MMBatchProductItemsInfo</returns>
        public List<MMBatchProductItemsInfo> GetBatchProductItemByListBatchProduct(string batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_GetBatchProductItemByListBatchProduct", batchProductID);
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }
        /// <summary>
        /// Get batch product item by BatchProductsStatus
        /// </summary>
        /// <param name="status">status</param>
        /// <returns>List MMBatchProductItemsInfo</returns>
        public MMBatchProductItemsInfo GetBatchProductItemBySerialNo(string serialNo)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_GetBatchProductItemBySerialNo", serialNo);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductItemsInfo objBatchProductItemsInfo = (MMBatchProductItemsInfo)GetObjectFromDataRow(row);
                    ds.Dispose();
                    return objBatchProductItemsInfo;
                }
            }
            ds.Dispose();
            return null;
        }


        public List<MMBatchProductItemsInfo> GetBatchProductItemByProductionNormIDAndBatchProductID(int productionNormID, int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_GetBatchProductItemByProductionNormIDAndBatchProductID", productionNormID, batchProductID);
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductItemsInfo> GetBatchProductItemsForAllocationPlan(string productType)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_GetBatchProductItemsForAllocationPlan", productType);
            List<MMBatchProductItemsInfo> batchProductItems = new List<MMBatchProductItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductItemsInfo batchProductItem = (MMBatchProductItemsInfo)GetObjectFromDataRow(row);
                    batchProductItems.Add(batchProductItem);
                }
            }
            ds.Dispose();
            return batchProductItems;
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<MMBatchProductItemsInfo> BatchProducts = new List<MMBatchProductItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductItemsInfo objBatchProductsInfo = (MMBatchProductItemsInfo)GetObjectFromDataRow(row);
                    BatchProducts.Add(objBatchProductsInfo);
                }
            }
            ds.Dispose();
            return BatchProducts;
        }
        public MMBatchProductItemsInfo GetObjectbyBatchproductIDandICproduct(int batchproduct, int icproduct)
        {
            return (MMBatchProductItemsInfo)dal.GetDataObject("MMBatchProductItems_GetObjectbyBatchproductIDandICproduct", batchproduct, icproduct);


        }

        /// <summary>
        /// Get batch product by status
        /// </summary>
        /// <param name="status">status</param>
        /// <returns>List MMBatchProductsInfo</returns>
        public List<MMBatchProductItemsInfo> GetBatchProductForReceipt()
        {
            DataSet ds = dal.GetDataSet("MMBatchProducts_GetBatchProductForReceipt");
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductItemsInfo> SelectbyFK_MMBatchProductID(int batchProductItemID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_SelectbyFK_MMBatchProductID", batchProductItemID);
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductItemsInfo> GetBatchProductItemsByFK_MMBatchProductID(int batchProductItemID, int operationID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_GetBatchProductItemsByFK_MMBatchProductID", batchProductItemID, operationID);
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductItemsInfo> GetBatchProductItemsByFK_MMBatchProductIDForTransfer(int batchProductItemID, int operationID, int shipmentID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_GetBatchProductItemsByFK_MMBatchProductIDForTransfer", batchProductItemID, operationID, shipmentID);
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductItemsInfo> GetBatchProductItemListByProductIDAndBatchProductID(int? productID, int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_GetBatchProductItemListByProductIDAndBatchProductID", productID, batchProductID);
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductItemsInfo> GetBatchProductItemListByBatchProductID(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_GetBatchProductItemListByBatchProductID", batchProductID);
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductItemsInfo> GetBatchProductItemByOperation(int OperationID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_GetBatchProductItemByOperation", OperationID);
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductItemsInfo> GetbySaleorderID(int saleOrderItemID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_GetbySaleorderItemID", saleOrderItemID);
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductItemsInfo> GetItemForCancel(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_GetItemForCancel", batchProductID);
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductItemsInfo> GetBatchProductItemsByBatchProductID(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_GetBatchProductItemsByBatchProductID", batchProductID);
            List<MMBatchProductItemsInfo> batchProductItems = new List<MMBatchProductItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductItemsInfo batchProductItem = (MMBatchProductItemsInfo)GetObjectFromDataRow(row);
                    //batchProductItem.MMBatchProductitemTotalPaint = batchProductItem.MMProductionNormTotalPaint;
                    batchProductItems.Add(batchProductItem);
                }
            }
            ds.Dispose();
            return batchProductItems;
        }

        public List<MMBatchProductItemsInfo> GetBatchPlansReportData(int? batchProductID, int? batchProductItemID, DateTime dateFrom, DateTime dateTo)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_GetBatchPlansReportData", batchProductID, batchProductItemID, dateFrom, dateTo);
            List<MMBatchProductItemsInfo> list = new List<MMBatchProductItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductItemsInfo obj = (MMBatchProductItemsInfo)GetObjectFromDataRow(row);

                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }
        public List<MMBatchProductItemsInfo> GetBatchProductItemsForReport147(int customerID, int batchProductID, DateTime dateFrom, DateTime dateTo)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_GetBatchProductItemsForReport147", customerID, batchProductID, dateFrom, dateTo);
            List<MMBatchProductItemsInfo> batchProductItems = new List<MMBatchProductItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductItemsInfo item = (MMBatchProductItemsInfo)GetObjectFromDataRow(row);
                    item.SLSPThieu = 0;
                    item.SLThungKeHoach = 0;
                    item.SLThungDaDong = 0;
                    item.SLThungThieu = 0;

                    if (item.SLSPKeHoach >= item.SLSPDaDongGoi)
                    {
                        item.SLSPThieu = item.SLSPKeHoach - item.SLSPDaDongGoi;
                    }
                    else
                        item.SLSPThieu = 0;
                    if (item.MMProductionNormProductLoadCont20DC != null)
                    {
                        string[] listpcscarton = item.MMProductionNormProductLoadCont20DC.Trim().Split(new char[] { '/' });
                        decimal pcs = 0;
                        decimal carton = 0;
                        if (listpcscarton.Length == 2)
                        {
                            if (decimal.TryParse(listpcscarton[0].ToString(), out pcs) == true)
                            {
                                pcs = Convert.ToDecimal(listpcscarton[0]);
                            }
                            if (decimal.TryParse(listpcscarton[0].ToString(), out carton) == true)
                            {
                                carton = Convert.ToDecimal(listpcscarton[1]);
                            }
                        }
                        if (pcs > 0)
                        {
                            item.SLThungKeHoach = item.SLSPKeHoach / pcs * carton;
                            item.SLThungDaDong = item.SLSPDaDongGoi / pcs * carton;
                            //SL thung ke hoach làm tròn lên, SL thùng đã đóng làm tròn xuống
                            if (item.SLThungKeHoach > Math.Round(item.SLThungKeHoach, 0, MidpointRounding.AwayFromZero))
                            {
                                item.SLThungKeHoach = Math.Round(item.SLThungKeHoach, 0, MidpointRounding.AwayFromZero) + 1;
                            }
                            else
                                item.SLThungKeHoach = Math.Round(item.SLThungKeHoach, 0, MidpointRounding.AwayFromZero);
                            if (item.SLThungDaDong >= Math.Round(item.SLThungDaDong, 0, MidpointRounding.AwayFromZero))
                            {
                                item.SLThungDaDong = Math.Round(item.SLThungDaDong, 0, MidpointRounding.AwayFromZero);
                            }
                            else
                                item.SLThungDaDong = Math.Round(item.SLThungDaDong, 0, MidpointRounding.AwayFromZero) - 1;
                            item.SLThungThieu = item.SLThungKeHoach - item.SLThungDaDong;
                        }
                    }
                    batchProductItems.Add(item);
                }
            }
            ds.Dispose();
            return batchProductItems;

        }
        public List<MMBatchProductItemsInfo> GetListItemByBatchProductID(int BatchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBathProductItems_GetListItemByBatchProductID", BatchProductID);
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductItemsInfo> GetListItemByproductID(int productID)
        {
            DataSet ds = dal.GetDataSet("MMBathProductItems_GetListItemByproductID", productID);
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }
        public MMBatchProductItemsInfo GetItemByBathProductItemID(int BatchProductItemID)
        {
            DataSet ds = dal.GetDataSet("MMBathProductItems_GetItemByBathProductItemID", BatchProductItemID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductItemsInfo obj = (MMBatchProductItemsInfo)GetObjectFromDataRow(row);

                    ds.Dispose();
                    return obj;
                }
            }
            ds.Dispose();
            return null;
        }

        public bool ProductionNormValidation(int batchProductID, int batchProductItemID, int productionNormID, string productionNormItemGroup)
        {
            int counter = (int)dal.GetSingleValue("MMBatchProductItems_ProductionNormValidation", batchProductID, batchProductItemID, productionNormID, productionNormItemGroup);
            if (counter > 0)
                return false;
            return true;
        }


        public bool CheckInvalidBatchProductItem(int batchProductID, string productionNormItemGroup)
        {
            int counter = (int)dal.GetSingleValue("MMBatchProductItems_GetInvalidBatchProductItem", batchProductID, productionNormItemGroup);
            if (counter > 0)
                return false;
            return true;
        }

        public List<MMBatchProductItemsInfo> GetBatchLumberItemForPurchasePlan()
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_GetBatchLumberItemForPurchasePlan");
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductItemsInfo> GetBatchLumberItemForCheckPurchasePlan(string bpNo, int purchasePlanID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_GetBatchLumberItemForCheckPurchasePlan", bpNo, purchasePlanID);
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductItemsInfo> GetItemForPurchaseProposal()
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_GetItemForPurchaseProposal");
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }


        public MMBatchProductItemsInfo GetItemForPurchaseProposalCheckQty(int proposalItemID, int batchProductItemID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_GetItemForPurchaseProposalCheckQty", proposalItemID, batchProductItemID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductItemsInfo obj = (MMBatchProductItemsInfo)GetObjectFromDataRow(row);

                    ds.Dispose();
                    return obj;
                }
            }
            ds.Dispose();
            return null;
        }
        public List<MMBatchProductItemsInfo> GetBatchProductItemsByListPlanning(string strListID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_BatchProductItemsByListPlanning", strListID);
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductItemsInfo> GetItemForReceiptFreshLumber(string cuaXeSayNo, string operationNo)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_GetItemForReceiptFreshLumber", cuaXeSayNo, operationNo);
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }

        public void UpdateNeedMergeStatusByIDAndType(string idStr, string typeUpdate)
        {
            dal.ExecuteStoredProcedure("MMBatchProductItems_UpdateNeedMergeStatusByIDAndType", idStr, typeUpdate);
        }

        public List<MMBatchProductItemsInfo> CheckProductionNormStatusToBringToBatchProduct(int batchProductID, string group)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_CheckProductionNormStatusToBringToBatchProduct", batchProductID, group);
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductItemsInfo> CheckProductionNormStatusToBringToBatchProductNotUseCarcass(int batchProductID, string group)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_CheckProductionNormStatusToBringToBatchProductNotUseCarcass", batchProductID, group);
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductItemsInfo> GetitemisCarcassByBatchProductID(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_GetitemisCarcassByBatchProductID", batchProductID);
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }

        public void UpdatePackagingApproveLogID(int batchProductItemID, int approveLogID)
        {
            dal.ExecuteStoredProcedure("MMBatchProductItems_UpdatePackagingApproveLogID", batchProductItemID, approveLogID);
        }

        public List<MMBatchProductItemsInfo> GetItemByBatchProductIDAndMergeBOMTypeAndProductionNormID(int batchProductID, string mergeChangeType, int productionNormID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_GetItemByBatchProductIDAndMergeBOMTypeAndProductionNormID", batchProductID, mergeChangeType, productionNormID);
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }
        public List<MMBatchProductItemsInfo> GetBatchProductItemForReportByBatchProductID(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBathProductItems_GetBatchProductItemForReportByBatchProductID", batchProductID);
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductItemsInfo> GetBatchProductItemForBatchProductReceipt()
        {
            DataSet ds = dal.GetDataSet("MMBathProductItems_GetBatchProductItemForBatchProductReceipt");
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductItemsInfo> GetItemForReport214(DateTime FromDate, DateTime ToDate, int BatchProductID, int CustomerID, int SaleOrderID, string KeyValue)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_GetItemForReport214", FromDate, ToDate, BatchProductID, CustomerID, SaleOrderID, KeyValue);
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductItemsInfo> GetItemListByBatchProductIDHasTypeOutsoursing(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItems_GetItemListByBatchProductIDHasTypeOutsoursing", batchProductID);
            List<MMBatchProductItemsInfo> batchProductItems = new List<MMBatchProductItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductItemsInfo batchProductItem = (MMBatchProductItemsInfo)GetObjectFromDataRow(row);
                    batchProductItems.Add(batchProductItem);
                }
            }
            ds.Dispose();
            return batchProductItems;
        }

        public List<MMBatchProductItemsInfo> GetBPItemForLookupByBatchProductID(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBathProductItems_GetBPItemForLookupByBatchProductID", batchProductID);
            return (List<MMBatchProductItemsInfo>)GetListFromDataSet(ds);
        }
        public void UpdateChangeBOM(int BatchItemID, int NormID, string UpdateUser)
        {
            dal.ExecuteStoredProcedure("MMBatchProductItems_UpdateChangeBOM", BatchItemID, NormID, UpdateUser);
        }
        public void UpdateChangeQty(int BatchItemID, decimal qty, string UpdateUser)
        {
            dal.ExecuteStoredProcedure("MMBatchProductItems_UpdateChangeQty", BatchItemID, qty, UpdateUser);
        }
        public MMBatchProductItemsInfo GetRemainProductionPlanningByBatchItem(int batchitem)
        {
            return (MMBatchProductItemsInfo)dal.GetDataObject("MMBatchProductItems_GetRemainProductionPlanningByBatchItem", batchitem);


        }
    }
    #endregion
}