using BOSLib;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region MMBatchProductProductionNormItemEquipments
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMBatchProductProductionNormItemEquipmentsController
    //Created Date:Tuesday, July 31, 2018
    //-----------------------------------------------------------

    public class MMBatchProductProductionNormItemEquipmentsController : BaseBusinessController
    {
        public MMBatchProductProductionNormItemEquipmentsController()
        {
            dal = new DALBaseProvider("MMBatchProductProductionNormItemEquipments", typeof(MMBatchProductProductionNormItemEquipmentsInfo));
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<MMBatchProductProductionNormItemEquipmentsInfo> batchProductProductionNormItemEquipmentList = new List<MMBatchProductProductionNormItemEquipmentsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemEquipmentsInfo objBatchProductProductionNormItemEquipmentsInfo = (MMBatchProductProductionNormItemEquipmentsInfo)GetObjectFromDataRow(row);
                    batchProductProductionNormItemEquipmentList.Add(objBatchProductProductionNormItemEquipmentsInfo);
                }
            }
            ds.Dispose();
            return batchProductProductionNormItemEquipmentList;
        }

        public void InsertEquipmentDetailFromProductionNormItemEquipment(int batchProductID, string createdUser)
        {
            dal.ExecuteStoredProcedure("MMBatchProductProductionNormItemEquipments_InsertEquipmentDetailFromProductionNormItemEquipment", batchProductID, createdUser);
        }

        public List<MMBatchProductProductionNormItemEquipmentsInfo> GetBatchProductProductionNormItemEquipmentByBatchProductProductionNormItemID(int batchProductProductionNormItemID)
        {
            DataSet ds = GetAllDataByForeignColumn("FK_MMBatchProductProductionNormItemID", batchProductProductionNormItemID);
            return (List<MMBatchProductProductionNormItemEquipmentsInfo>)GetListFromDataSet(ds);
        }

    }
    #endregion
}