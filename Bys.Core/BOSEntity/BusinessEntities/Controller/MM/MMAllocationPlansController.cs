using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;
using Dapper;
using System.Linq;
using BOSCommon.Constants;
using Localization;
using BOSLib.Extensions;

namespace BOSERP
{
    #region MMAllocationPlans
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMAllocationPlansController
    //Created Date:Tuesday, November 24, 2015
    //-----------------------------------------------------------

    public class MMAllocationPlansController : BaseBusinessController
    {
        public MMAllocationPlansController()
        {
            dal = new DALBaseProvider("MMAllocationPlans", typeof(MMAllocationPlansInfo));
        }
        public DataSet GetAllMMAllocationPlansForLookupControl()
        {

            DataSet ds = dal.GetDataSet("MMAllocationPlans_GetAllMMAllocationPlansForLookupControl");
            return ds;
        }
        public DataSet GetAllocationPlanByBranchsForLookupControl(int? branchID)
        {

            DataSet ds = dal.GetDataSet("MMAllocationPlans_GetAllocationPlanByBranchsForLookupControl", branchID);
            return ds;
        }

        public DataSet GetMMAllocationPlansBySomeCriteria(string allocationPlanNo,
                                                            string allocationPlanStatus,
                                                            int batchProductID,
                                                            int saleOrderID,
                                                            int customerID,
                                                            int employeeID,
                                                            DateTime fromDate,
                                                            DateTime toDate)
        {

            DataSet ds = dal.GetDataSet("MMAllocationPlans_GetMMAllocationPlansBySomeCriteria",
                                                                    allocationPlanNo,
                                                                    allocationPlanStatus,
                                                                    batchProductID,
                                                                    saleOrderID,
                                                                    customerID,
                                                                    employeeID,
                                                                    fromDate,
                                                                    toDate);
            return ds;
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<MMAllocationPlansInfo> allocationPlanList = new List<MMAllocationPlansInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMAllocationPlansInfo objAllocationPlansInfo = (MMAllocationPlansInfo)GetObjectFromDataRow(row);
                    allocationPlanList.Add(objAllocationPlansInfo);
                }
            }
            ds.Dispose();
            return allocationPlanList;
        }

        public List<MMAllocationPlansInfo> ShowAllAllocationPlanForHome(DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("MMAllocationPlans_ShowAllAllocationPlanForHome", fromDate, toDate);
            return (List<MMAllocationPlansInfo>)GetListFromDataSet(ds);
        }

        public List<MMAllocationPlansInfo> GetAllocationPlanForShipment(string allocationPlanItemGroup, int batchProductID, int allocationPlanID)
        {
            DataSet ds = dal.GetDataSet("MMAllocationPlans_GetAllocationPlanForShipment", allocationPlanItemGroup, batchProductID, allocationPlanID);
            return (List<MMAllocationPlansInfo>)GetListFromDataSet(ds);
        }

        public MMAllocationPlansInfo GetAllocationPlanByBatchProductID(int batchProductID)
        {
            return (MMAllocationPlansInfo)dal.GetDataObject("MMAllocationPlans_GetAllocationPlanByBatchProductID", batchProductID);
        }
        public DataSet GetAllocationPlanOfBranch(string allocationPlanNo,
                                                 int? employeeID,
                                                 int? batchProductID,
                                                 int? acobjectID,
                                                 string acobjectType,
                                                 DateTime? dateFrom,
                                                 DateTime? dateTo,
                                                 string allocationPlanType,
                                                 int? branchID)
        {
            DataSet ds = dal.GetDataSet("MMAllocationPlans_GetAllocationPlanOfBranch", allocationPlanNo, employeeID, batchProductID, acobjectID, acobjectType, dateFrom, dateTo, allocationPlanType, branchID);
            return ds;
        }

        public DataSet GetAllocationPlanOfBranchList(string allocationPlanNo,
                                                     int? employeeID,
                                                     int? batchProductID,
                                                     int? acobjectID,
                                                     string acobjectType,
                                                     DateTime? dateFrom,
                                                     DateTime? dateTo,
                                                     string allocationPlanType,
                                                     List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetAllocationPlanOfBranch(allocationPlanNo, employeeID, batchProductID, acobjectID, acobjectType, dateFrom, dateTo, allocationPlanType, ojbBranchsInfo.BRBranchID);
                rtn.Merge(ds);
            }
            return rtn;
        }

        public void PostedItemTransactions(string moduleName, int allocationPlanID, List<int> itemList, bool isPosted = true)
        {
            if (!itemList.Any())
                return;

            try
            {
                DataTable dt = itemList.ToDataTableIds();
                var parameters = new DynamicParameters();
                parameters.Add("@ModuleName", moduleName, DbType.String, ParameterDirection.Input);
                parameters.Add("@AllocationPlanID", allocationPlanID, DbType.Int32, ParameterDirection.Input);
                parameters.Add("@PlanItemIDs", dt.AsTableValuedParameter("Type_ObjectID"), DbType.Object, ParameterDirection.Input);
                parameters.Add("@IsPosted", isPosted, DbType.Boolean, ParameterDirection.Input);
                var res = dal.Connection.Execute("IC_PostedMMAllocationPlanItems", parameters, commandType: CommandType.StoredProcedure);
            }
            catch (Exception e)
            {
                TransactionLogger log = new TransactionLogger();
                log.AACreatedDate = BysGateway.CurrentServerDate;
                log.AACreatedUser = BysGateway.CurrentUsersInfo?.ADUserName;
                log.STModuleName = moduleName;
                log.STTransactionObjectID = allocationPlanID;
                log.STTransactionObjectRefID = string.Join(",", itemList.ToArray());
                log.STTransactionType = TransactionPostedAction.Posted;
                log.STTransactionActionName = "STModulePostingAllocationPlanFunction";
                log.STTransactionErrorMessage = e.Message;
                SqlDatabaseHelper.Insert(log);
                throw new Exception(CommonLocalizedResources.PostedTransationErrorMessage);
            }
        }
        public MMAllocationPlansInfo GetAllocationPlanByNormID(int NormID)
        {
            return (MMAllocationPlansInfo)dal.GetDataObject("MMAllocationPlans_GetAllocationPlanByNormID", NormID);
        }
        public void DeleteVitualTransactionByPlanItem(int NormID)
        {
            dal.ExecuteStoredProcedure("MMAllocationPlans_DeleteVitualTransactionByPlanItem", NormID);
        }

    }
    #endregion
}