using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region MMBatchProductItemOutSourcings
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMBatchProductItemOutSourcingsController
    //Created Date:Tuesday, December 3, 2019
    //-----------------------------------------------------------

    public class MMBatchProductItemOutSourcingsController : BaseBusinessController
    {
        public MMBatchProductItemOutSourcingsController()
        {
            dal = new DALBaseProvider("MMBatchProductItemOutSourcings", typeof(MMBatchProductItemOutSourcingsInfo));
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<MMBatchProductItemOutSourcingsInfo> outSourcingsList = new List<MMBatchProductItemOutSourcingsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductItemOutSourcingsInfo objBatchProductItemOutSourcingsInfo = (MMBatchProductItemOutSourcingsInfo)GetObjectFromDataRow(row);
                    outSourcingsList.Add(objBatchProductItemOutSourcingsInfo);
                }
            }
            ds.Dispose();
            return outSourcingsList;
        }

        public decimal GetRemainOutSourcingQtyByID(int iObjectID, string group)
        {
            return (decimal)dal.GetSingleValue("MMBatchProductItemOutSourcings_GetRemainOutSourcingQtyByID", iObjectID, group);
        }

        public List<MMBatchProductItemOutSourcingsInfo> GetItemForPurchaseProposal(int batchProductID, DateTime fromDate, DateTime toDate, int userID, string moduleName, string dataViewPermissionType, int branchID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItemOutSourcings_GetItemForPurchaseProposal", batchProductID, fromDate, toDate, userID, moduleName, dataViewPermissionType, branchID);
            return (List<MMBatchProductItemOutSourcingsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductItemOutSourcingsInfo> GetBPRemainQtyForPurchaseProposal(string outSourcingRef, string proposalItemRef)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItemOutSourcings_GetBPRemainQtyForPurchaseProposal", outSourcingRef, proposalItemRef);
            return (List<MMBatchProductItemOutSourcingsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductItemOutSourcingsInfo> GetBPRemainQtyForPurchaseProposalByID(int iObjectID, int proposalID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItemOutSourcings_GetBPRemainQtyForPurchaseProposalByID", iObjectID, proposalID);
            return (List<MMBatchProductItemOutSourcingsInfo>)GetListFromDataSet(ds);
        }

        public List<MMBatchProductItemOutSourcingsInfo> GetItemUsedQty(string itemRefID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItemOutSourcings_GetItemUsedQty", itemRefID);
            return (List<MMBatchProductItemOutSourcingsInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}