using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region MMOperationDetailPlans
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMOperationDetailPlansController
    //Created Date:Thursday, August 04, 2016
    //-----------------------------------------------------------

    public class MMOperationDetailPlansController : BaseBusinessController
    {
        public MMOperationDetailPlansController()
        {
            dal = new DALBaseProvider("MMOperationDetailPlans", typeof(MMOperationDetailPlansInfo));
        }

        public DataSet GetAllMMOperationDetailPlansForLookupControl()
        {
            DataSet ds = dal.GetDataSet("MMOperationDetailPlans_GetAllMMOperationDetailPlansForLookupControl");
            return ds;
        }
        public List<MMOperationDetailPlansInfo> GetOperationDetailPlanForCompensation(int operationID)
        {
            DataSet ds = dal.GetDataSet("MMOperationDetailPlans_GetOperationDetailPlanForCompensation", operationID);
            return (List<MMOperationDetailPlansInfo>)GetListFromDataSet(ds);
        }
        public DataSet GetOperationDetailPlanByOperationID(int? operationID)
        {
            DataSet ds = dal.GetDataSet("MMOperationDetailPlans_GetOperationDetailPlanByOperationID", operationID);
            return ds;
        }

        public DataSet GetOperationDetailPlanByOperationIDAndBatchProductID(int? operationID, int? BatchProductID, int? BatchProductItemID)
        {
            DataSet ds = dal.GetDataSet("MMOperationDetailPlans_GetOperationDetailPlanByOperationIDAndBatchProductID", operationID, BatchProductID, BatchProductItemID);
            return ds;
        }

        public DataSet GetOperationDetailPlanForReceiptByOperationIDAndBatchProductID(int? operationID, int? BatchProductID, int? BatchProductItemID)
        {
            DataSet ds = dal.GetDataSet("MMOperationDetailPlans_GetOperationDetailPlanForReceiptByOperationIDAndBatchProductID", operationID, BatchProductID, BatchProductItemID);
            return ds;
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<MMOperationDetailPlansInfo> list = new List<MMOperationDetailPlansInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMOperationDetailPlansInfo obj = (MMOperationDetailPlansInfo)GetObjectFromDataRow(row);
                    list.Add(obj);
                }
            }
            ds.Dispose();
            return list;
        }

        public List<MMOperationDetailPlansInfo> GetPlanByBatchProductIDAndOperationID(int batchProductID, int operationID)
        {
            DataSet ds = dal.GetDataSet("MMOperationDetailPlans_GetPlanByBatchProductIDAndOperationID", batchProductID, operationID);
            return (List<MMOperationDetailPlansInfo>)GetListFromDataSet(ds);
        }
        public List<MMOperationDetailPlansInfo> GetOperationDetailPlanForWoodPlan(int operationID)
        {
            DataSet ds = dal.GetDataSet("MMOperationDetailPlans_GetOperationDetailPlanForWoodPlan", operationID);
            return (List<MMOperationDetailPlansInfo>)GetListFromDataSet(ds);
        }
        public bool CheckCompletedRefPlan(int OperationDetailPlanID)
        {
            int counter = (int)dal.GetSingleValue("MMOperationDetailPlans_CheckCompletedRefPlan", OperationDetailPlanID);
            if (counter > 0)
                return false;
            else
                return true;
        }
        public List<MMOperationDetailPlansInfo> GetAllWeekOfPlan()
        {
            DataSet ds = dal.GetDataSet("MMOperationDetailPlans_GetAllWeekOfPlan");
            return (List<MMOperationDetailPlansInfo>)GetListFromDataSet(ds);
        }
        public List<MMOperationDetailPlansInfo> GetListPlanByCompensatePlanID(int OperationDetailPlanID)
        {
            DataSet ds = dal.GetDataSet("MMOperationDetailPlans_GetListPlanByCompensatePlanID", OperationDetailPlanID);
            return (List<MMOperationDetailPlansInfo>)GetListFromDataSet(ds);
        }
        public List<MMOperationDetailPlansInfo> GetOperationDetaiPlanByBatchProductItemID(int BatchProductItemID)
        {
            DataSet ds = dal.GetDataSet("MMOperationDetailPlans_GetOperationDetaiPlanByBatchProductItemID", BatchProductItemID);
            return (List<MMOperationDetailPlansInfo>)GetListFromDataSet(ds);
        }

        public List<MMOperationDetailPlansInfo> GetOperationDetailPlansByWoodForAllocationPlan()
        {
            DataSet ds = dal.GetDataSet("MMOperationDetailPlans_GetOperationDetailPlansByWoodForAllocationPlan");
            return (List<MMOperationDetailPlansInfo>)GetListFromDataSet(ds);
        }

        public List<MMOperationDetailPlansInfo> GetOperationDetailPlanForBatchProductShedule(int batchProductID, string operationRef, int workShopID, int lineID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("MMOperationDetailPlans_GetOperationDetailPlanForBatchProductShedule", batchProductID, operationRef, workShopID, lineID, fromDate, toDate);
            return (List<MMOperationDetailPlansInfo>)GetListFromDataSet(ds);
        }

        public MMOperationDetailPlansInfo GetOperationDetailPlanByItemPlanID(int OperationDetailPlanItemID)
        {
            DataSet ds = dal.GetDataSet("MMOperationDetailPlans_GetOperationDetailPlanByItemPlanID", OperationDetailPlanItemID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMOperationDetailPlansInfo obj = (MMOperationDetailPlansInfo)GetObjectFromDataRow(row);
                    ds.Dispose();
                    return obj;
                }
            }
            ds.Dispose();
            return null;
        }
    }
    #endregion
}