using BOSLib;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region MMBatchProductItemOperations
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:MMBatchProductItemOperationsController
    //Created Date:Wednesday, November 11, 2015
    //-----------------------------------------------------------

    public class MMBatchProductItemOperationsController : BaseBusinessController
    {
        public MMBatchProductItemOperationsController()
        {
            dal = new DALBaseProvider("MMBatchProductItemOperations", typeof(MMBatchProductItemOperationsInfo));
        }


        public List<MMBatchProductItemOperationsInfo> GetBatchProductItemOperationByBatchProductIDAndPromotionID(int batchProductID, int productionNormID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItemOperations_GetBatchProductItemOperationByBatchProductIDAndPromotionID", batchProductID, productionNormID);
            List<MMBatchProductItemOperationsInfo> productionNormsList = new List<MMBatchProductItemOperationsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductItemOperationsInfo obj = (MMBatchProductItemOperationsInfo)GetObjectFromDataRow(row);
                    productionNormsList.Add(obj);
                }
            }
            ds.Dispose();
            return productionNormsList;
        }

        public List<MMBatchProductItemOperationsInfo> GetBatchProductItemOperationByOperationAndSomeCriteria(
                                                                         int? OperationDetailPlanPIID
                                                                        , int? OperationDetailPlanBatchProductID
                                                                        , int? OperationDetailPlanOperationID
                                                                        , int? OperationDetailPlanProductForBatchID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItemOperations_GetBatchProductItemOperationByOperationAndSomeCriteria"
                                                                        , OperationDetailPlanPIID
                                                                        , OperationDetailPlanBatchProductID
                                                                        , OperationDetailPlanOperationID
                                                                        , OperationDetailPlanProductForBatchID);

            List<MMBatchProductItemOperationsInfo> BatchProductItemOperationList = new List<MMBatchProductItemOperationsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductItemOperationsInfo obj = (MMBatchProductItemOperationsInfo)GetObjectFromDataRow(row);
                    BatchProductItemOperationList.Add(obj);
                }
            }
            ds.Dispose();
            return BatchProductItemOperationList;
        }

        public List<MMBatchProductItemOperationsInfo> GetBatchProductItemOperationByBatchProductItemIDAndPromotionID(int batchProductItemID, int productionNormID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItemOperations_GetBatchProductItemOperationByBatchProductItemIDAndPromotionID", batchProductItemID, productionNormID);
            List<MMBatchProductItemOperationsInfo> productionNormsList = new List<MMBatchProductItemOperationsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductItemOperationsInfo obj = (MMBatchProductItemOperationsInfo)GetObjectFromDataRow(row);
                    productionNormsList.Add(obj);
                }
            }
            ds.Dispose();
            return productionNormsList;
        }
        public void InsertItemFromProductionNormItemOperation(int productionNormID, int batchProductItemID, int batchProductID, string createdUser)
        {
            dal.ExecuteStoredProcedure("MMBatchProductItemOperations_InsertItemFromProductionNormItemOperation", productionNormID, batchProductItemID, batchProductID, createdUser);
        }
        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<MMBatchProductItemOperationsInfo> BatchProductItemOperations = new List<MMBatchProductItemOperationsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductItemOperationsInfo objBatchProductItemOperationsInfo = (MMBatchProductItemOperationsInfo)GetObjectFromDataRow(row);
                    BatchProductItemOperations.Add(objBatchProductItemOperationsInfo);
                }
            }

            ds.Dispose();
            return BatchProductItemOperations;
        }
        public bool CheckExits(int MMProductionNormItemID, int batchProductItemID, int batchProductID)
        {
            int counter = (int)dal.GetSingleValue("MMBatchProductItemOperations_CheckExits", MMProductionNormItemID, batchProductItemID, batchProductID);
            if (counter > 0)
                return false;
            else
                return true;
        }
        public List<MMBatchProductItemOperationsInfo> NotFoundOperation(int ProductionNormID, int MMProductionNormItemID, int batchProductItemID, int batchProductID, int productID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductItemOperations_NotFoundOperation", ProductionNormID, MMProductionNormItemID, batchProductItemID, batchProductID, productID);
            List<MMBatchProductItemOperationsInfo> productionNormsList = new List<MMBatchProductItemOperationsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductItemOperationsInfo obj = (MMBatchProductItemOperationsInfo)GetObjectFromDataRow(row);
                    productionNormsList.Add(obj);
                }
            }
            ds.Dispose();
            return productionNormsList;
        }

        public void InsertProductionNormItemToOperation(int productionNormID, int batchProductItemID, int batchProductID, int productionNormItemID, string createdUser)
        {
            dal.ExecuteStoredProcedure("MMBatchProductItemOperations_InsertProductionNormItemToOperation", productionNormID, batchProductItemID, batchProductID, productionNormItemID, createdUser);
        }

        public void DeleteProductionNormItemToOperation(int productionNormItemID, int BatchProductItemID, string createdUser)
        {
            dal.ExecuteStoredProcedure("MMBatchProductItemOperations_DeleteProductionNormItemToOperation", productionNormItemID, BatchProductItemID, createdUser);
        }
        public void DeleteBatchProductItemOperation(int productionNormID, int batchProductItemID, string createdUser)
        {
            dal.ExecuteStoredProcedure("MMBatchProductItemOperations_DeleteProductionNormItemToOperation", productionNormID, batchProductItemID, createdUser);
        }

        public void DeleteBatchProductItemOperationByID(int BatchProductItemOperationByID, string user)
        {
            dal.ExecuteStoredProcedure("MMBatchProductItemOperations_DeleteBatchProductItemOperationByID", BatchProductItemOperationByID, user);
        }
    }
    #endregion
}