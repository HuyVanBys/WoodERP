using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region APInvoiceIns
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:APInvoiceInsController
    //Created Date:Thursday, May 29, 2008
    //-----------------------------------------------------------

    public class APInvoiceInsController : BaseBusinessController
    {
        public APInvoiceInsController()
        {
            dal = new DALBaseProvider("APInvoiceIns", typeof(APInvoiceInsInfo));
        }
        public DataSet GetAllInvoiceInForLookupControl()
        {
            //String sql = String.Format("SELECT APInvoiceInID ,APInvoiceInNo, APInvoiceInName ,APInvoiceInDesc ,APInvoiceInSupplierNo, APInvoiceInDeliveryDate ,APInvoiceInReference" +
            //" FROM APInvoiceIns WHERE AAStatus = 'Alive' AND APInvoiceInStatus <> 'New' ");
            //return dal.GetDataSet(sql);
            DataSet ds = dal.GetDataSet("APInvoiceIns_GetAllInvoiceInsForLookupControl");
            return ds;
        }
        /// <summary>
        /// Get the list of owing invoices to the supplier based on some criteria
        /// </summary>
        /// <param name="supplierID">Supplier ID</param>
        /// <param name="dateFrom">Date which the result is filtered from</param>
        /// <param name="dateTo">Date which the result is filtered to</param>
        /// <param name="invoiceNo">Invoice number</param>
        /// <param name="supplierInvoiceNo">Supplier invoice number</param>
        /// <param name="packNo">Invoice pack no</param>
        /// <returns>List of owing invoices</returns>
        public List<APInvoiceInsInfo> GetOwingInvoices(int? supplierID, DateTime? dateFrom, DateTime? dateTo, String invoiceNo, String supplierInvoiceNo, string packNo)
        {
            DataSet ds = dal.GetDataSet("APInvoiceIns_GetOwingInvoices",
                                        supplierID,
                                        dateFrom,
                                        dateTo,
                                        invoiceNo,
                                        supplierInvoiceNo,
                                        packNo);
            List<APInvoiceInsInfo> owingInvoices = new List<APInvoiceInsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APInvoiceInsInfo objInvoicesInfo = (APInvoiceInsInfo)GetObjectFromDataRow(row);
                    owingInvoices.Add(objInvoicesInfo);
                }
            }
            return owingInvoices;
        }

        /// <summary>
        /// Get the list of owing invoices to the supplier based on some criteria
        /// </summary>
        /// <param name="supplierID">Supplier ID</param>
        /// <param name="dateFrom">Date which the result is filtered from</param>
        /// <param name="dateTo">Date which the result is filtered to</param>
        /// <param name="invoiceNo">Invoice number</param>
        /// <param name="supplierInvoiceNo">Supplier invoice number</param>
        /// <param name="packNo">Invoice pack no</param>
        /// <returns>List of owing invoices</returns>
        public List<APInvoiceInsInfo> GetOwingInvoicesByUserPermission(int? supplierID, DateTime? dateFrom, DateTime? dateTo, String invoiceNo, String supplierInvoiceNo, string packNo,
                                                            int userID, string moduleName, string dataViewPermissionType)
        {
            DataSet ds = dal.GetDataSet("APInvoiceIns_GetOwingInvoicesByUserPermission",
                                        supplierID,
                                        dateFrom,
                                        dateTo,
                                        invoiceNo,
                                        supplierInvoiceNo,
                                        packNo,
                                        userID,
                                        moduleName,
                                        dataViewPermissionType);
            List<APInvoiceInsInfo> owingInvoices = new List<APInvoiceInsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APInvoiceInsInfo objInvoicesInfo = (APInvoiceInsInfo)GetObjectFromDataRow(row);
                    owingInvoices.Add(objInvoicesInfo);
                }
            }
            return owingInvoices;
        }



        /// <summary>
        /// Get the list of owing invoices to the supplier based on some criteria
        /// </summary>
        /// <param name="supplierID">Supplier ID</param>
        /// <param name="dateFrom">Date which the result is filtered from</param>
        /// <param name="dateTo">Date which the result is filtered to</param>
        /// <param name="invoiceNo">Invoice number</param>
        /// <param name="supplierInvoiceNo">Supplier invoice number</param>
        /// <returns>List of owing invoices</returns>
        public List<APInvoiceInsInfo> GetOwingInvoices(int? supplierID, DateTime? dateFrom, DateTime? dateTo, String invoiceNo, String supplierInvoiceNo)
        {
            return GetOwingInvoices(supplierID, dateFrom, dateTo, invoiceNo, supplierInvoiceNo, null);
        }

        /// <summary>
        /// Get all owing invoices of a supplier
        /// </summary>
        /// <param name="supplierID">Supplier id</param>
        /// <returns>List of owing invoices</returns>
        public List<APInvoiceInsInfo> GetOwingInvoicesBySupplierID(int supplierID)
        {
            return GetOwingInvoices(supplierID, null, null, null, null, null);
        }

        /// <summary>
        /// Get total owing of a supplier
        /// </summary>
        /// <returns></returns>
        public APInvoiceInsInfo GetTotalOwingBySupplierID(int supplierID)
        {
            DataSet ds = dal.GetDataSet("APInvoiceIns_GetTotalOwingBySupplierID", supplierID);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objInvoiceInsInfo;
            }
            return null;
        }

        /// <summary>
        /// Get total owing of all suppliers
        /// </summary>
        public DataSet GetTotalOwingOfAllSuppliers()
        {
            return dal.GetDataSet("APInvoiceIns_GetTotalOwingBySupplierID", new object[] { null });
        }

        /// <summary>
        /// Get invoice list by supplier payment id.
        /// </summary>
        /// <param name="customerPaymentID">The supplier payment id.</param>
        /// <returns>List of invoices.</returns>
        public DataSet GetInvoicesBySupplierPaymentID(int supplierPaymentID)
        {
            DataSet ds = dal.GetDataSet("APInvoiceIns_GetInvoicesBySupplierPaymentID", supplierPaymentID);
            return ds;
        }

        /// <summary>
        /// Get invoices for receipt
        /// </summary>
        /// <returns>List of invoices</returns>
        public List<APInvoiceInsInfo> GetInvoicesForReceipt()
        {
            DataSet ds = dal.GetDataSet("APInvoiceIns_GetInvoicesForReceipt");
            List<APInvoiceInsInfo> invoices = new List<APInvoiceInsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)GetObjectFromDataRow(row);
                    invoices.Add(objInvoiceInsInfo);
                }
            }
            return invoices;
        }

        /// <summary>
        /// Get invoices for receipt by user's permission
        /// </summary>
        /// <returns>List of invoices</returns>
        public List<APInvoiceInsInfo> GetInvoicesForReceiptByUserPermission(int userID, string moduleName, string dataViewPermissionType)
        {
            DataSet ds = dal.GetDataSet("APInvoiceIns_GetInvoicesForReceiptByUserPermission", userID, moduleName, dataViewPermissionType);
            List<APInvoiceInsInfo> invoices = new List<APInvoiceInsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)GetObjectFromDataRow(row);
                    invoices.Add(objInvoiceInsInfo);
                }
            }
            return invoices;
        }

        /// <summary>
        /// Get an invoice and the payment amount of a supplier payment for its due
        /// </summary>
        /// <param name="invoiceID">Invoice id</param>
        /// <param name="customerPaymentID">Supplier payment id</param>
        /// <returns>Invoice object includes payment amount</returns>
        public APInvoiceInsInfo GetInvoiceByInvoiceIDAndSupplierPaymentID(int invoiceID, int supplierPaymentID)
        {
            return (APInvoiceInsInfo)dal.GetDataObject("APInvoiceIns_GetInvoiceByInvoiceIDAndSupplierPaymentID", invoiceID, supplierPaymentID);
        }

        /// <summary>
        /// Get invoice list based on some criteria
        /// </summary>
        /// <param name="supplierID">Supplier id</param>
        /// <param name="invoiceNo">Invoice no</param>
        /// <param name="supplierInvoiceNo">Supplier invoice no</param>
        /// <param name="packNo">Pack no</param>
        /// <param name="from">Date the result is filtered from</param>
        /// <param name="to">Date the result is filtered to</param>
        /// <returns>List of invoices</returns>
        public List<APInvoiceInsInfo> GetInvoiceList(
                                                    int? supplierID,
                                                    string invoiceNo,
                                                    string supplierInvoiceNo,
                                                    string packNo,
                                                    DateTime? from,
                                                    DateTime? to)
        {
            DataSet ds = dal.GetDataSet("APInvoiceIns_GetInvoiceList", supplierID, invoiceNo, supplierInvoiceNo, packNo, from, to);
            return (List<APInvoiceInsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get invoices for transferring
        /// </summary>
        /// <returns>List of invoices</returns>
        public List<APInvoiceInsInfo> GetInvoicesForTransferring()
        {
            DataSet ds = dal.GetDataSet("APInvoiceIns_GetInvoicesForTransferring");
            return (List<APInvoiceInsInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<APInvoiceInsInfo> invoices = new List<APInvoiceInsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APInvoiceInsInfo objInvoicesInfo = (APInvoiceInsInfo)GetObjectFromDataRow(row);
                    invoices.Add(objInvoicesInfo);
                }
            }
            ds.Dispose();
            return invoices;
        }

        /// <summary>
        /// Get invoices for broadcasting to a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <returns>List of broadcasted invoices</returns>
        public List<APInvoiceInsInfo> GetInvoicesForBroadcasting(int branchID)
        {
            DataSet ds = dal.GetDataSet("APInvoiceIns_GetInvoicesForBroadcasting", branchID);
            return (List<APInvoiceInsInfo>)GetListFromDataSet(ds);
        }

        public override int UpdateObject(BusinessObject obj)
        {
            //Set the balance due to 0 when it approximates to 0. Since if it's too small,
            //the displayed number on controls will be wrong
            APInvoiceInsInfo invoice = (APInvoiceInsInfo)obj;
            if (Math.Round(invoice.APInvoiceInBalanceDue, 3) == 0)
            {
                invoice.APInvoiceInBalanceDue = 0;
            }
            return base.UpdateObject(obj);
        }

        /// <summary>
        /// Get Invoice In List By Branch ID
        /// </summary>
        /// <param name="invoiceInNo"> invoiceInNo</param>
        /// <param name="invoiceInSupplierNo">invoiceIn Supplier No</param>
        /// <param name="supplierID">supplier ID</param>
        /// <param name="employeeID">employee ID</param>
        /// <param name="branchID">branch ID</param>
        /// <param name="invoiceInDateFrom">invoice In Date From</param>
        /// <param name="invoiceInDateTo">invoice In Date To</param>
        /// <param name="branchList">branchList</param>
        /// <returns></returns>
        public DataSet GetInvoiceInListByListOfBranchID(
                                                  string invoiceInNo,
                                                  string invoiceInSupplierNo,
                                                  int? acObjectID,
                                                  string acObjectType,
                                                  int? employeeID,
                                                  int? branchID,
                                                  DateTime? invoiceInDateFrom,
                                                  DateTime? invoiceInDateTo,
                                                  List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetInvoiceInListByBranchID(invoiceInNo, invoiceInSupplierNo, acObjectID, acObjectType, employeeID, ojbBranchsInfo.BRBranchID, invoiceInDateFrom, invoiceInDateTo);
                rtn.Merge(ds);
            }

            return rtn;
        }

        /// <summary>
        /// Get Invoice In List By Branch ID
        /// </summary>
        /// <param name="invoiceInNo"> invoiceInNo</param>
        /// <param name="invoiceInSupplierNo">invoiceIn Supplier No</param>
        /// <param name="supplierID">supplier ID</param>
        /// <param name="employeeID">employee ID</param>
        /// <param name="branchID">branch ID</param>
        /// <param name="invoiceInDateFrom">invoice In Date From</param>
        /// <param name="invoiceInDateTo">invoice In Date To</param>
        /// <returns></returns>
        public DataSet GetInvoiceInListByBranchID(
                                                  string invoiceInNo,
                                                  string invoiceInSupplierNo,
                                                  int? acObjectID,
                                                  string acObjectType,
                                                  int? employeeID,
                                                  int? branchID,
                                                  DateTime? invoiceInDateFrom,
                                                  DateTime? invoiceInDateTo)
        {
            DataSet ds = dal.GetDataSet("APInvoiceIns_GetInvoiceInListByBranchID",
                                            invoiceInNo,
                                            invoiceInSupplierNo,
                                            acObjectID,
                                            acObjectType,
                                            employeeID,
                                            branchID,
                                            invoiceInDateFrom,
                                            invoiceInDateTo);
            return ds;
        }

        public List<APInvoiceInsInfo> GetInvoiceInsByInvoiceInID(int invoiceID)
        {
            DataSet ds = dal.GetDataSet("APInvoiceIns_GetInvoiceInsByInvoiceInID", invoiceID);
            List<APInvoiceInsInfo> invoices = new List<APInvoiceInsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)GetObjectFromDataRow(row);
                    invoices.Add(objInvoiceInsInfo);
                }
            }
            return invoices;
        }

        public List<APInvoiceInsInfo> GetInvoiceInForAdvanceRefund()
        {
            DataSet ds = dal.GetDataSet("APInvoiceIns_GetInvoiceInForAdvanceRefund");
            List<APInvoiceInsInfo> invoices = new List<APInvoiceInsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APInvoiceInsInfo objInvoiceInsInfo = (APInvoiceInsInfo)GetObjectFromDataRow(row);
                    invoices.Add(objInvoiceInsInfo);
                }
            }
            return invoices;
        }

        public List<APInvoiceInsInfo> GetInvoiceInForBillOfLading()
        {
            DataSet ds = dal.GetDataSet("APInvoiceIns_GetInvoiceInForBillOfLading");
            return (List<APInvoiceInsInfo>)GetListFromDataSet(ds);
        }

        public List<APInvoiceInsInfo> GetInvoiceInForFeePayment(int userID, string moduleName, string dataViewPermissionType)
        {
            DataSet ds = dal.GetDataSet("APInvoiceIns_GetInvoiceInForFeePayment", userID, moduleName, dataViewPermissionType);
            return (List<APInvoiceInsInfo>)GetListFromDataSet(ds);
        }

        public List<APInvoiceInsInfo> GetDataForInvoiceInPaymentReport(DateTime fromDate, DateTime toDate, int branchID, int currencyID, int objectID, string objectType)
        {
            DataSet ds = dal.GetDataSet("ADReports_GetDataForInvoiceInPaymentReport", fromDate, toDate, branchID, currencyID, objectID, objectType);
            return (List<APInvoiceInsInfo>)GetListFromDataSet(ds);
        }

        public List<APInvoiceInsInfo> GetInvoiceInForAllocationCost(DateTime fromDate, DateTime todate, int purchaseOrderID)
        {
            DataSet ds = dal.GetDataSet("APInvoiceIns_GetInvoiceInForAllocationCost", fromDate, todate, purchaseOrderID);
            return (List<APInvoiceInsInfo>)GetListFromDataSet(ds);
        }

        public APInvoiceInsInfo GetInformationTransactionByInvoiceInIDAndNo(int invoiceInID, string invoiceInNo)
        {
            return (APInvoiceInsInfo)dal.GetDataObject("APInvoiceIns_GetInformationTransactionByInvoiceInIDAndNo", invoiceInID, invoiceInNo);
        }
        public List<APInvoiceInsInfo> GetInvoiceInByListID(string listID)
        {
            DataSet ds = dal.GetDataSet("APInvoiceIns_GetInvoiceInByListID", listID);
            return (List<APInvoiceInsInfo>)GetListFromDataSet(ds);
        }
        public List<APInvoiceInsInfo> GetInvoiceInByReceipt(int ReceiptID)
        {
            DataSet ds = dal.GetDataSet("APInvoiceIns_GetInvoiceInByReceipt", ReceiptID);
            return (List<APInvoiceInsInfo>)GetListFromDataSet(ds);
        }
        public decimal GetInvoiceInAmountBySomeCriteria(int clearInvoiceInInvoiceInID, int clearInvoiceInID, string InvoiceInID)
        {
            return (decimal)dal.GetSingleValue("APInvoiceIns_GetInvoiceInAmountBySomeCriteria", clearInvoiceInInvoiceInID, clearInvoiceInID, InvoiceInID);
        }

        public List<APInvoiceInsInfo> GetAllDataByPurchaseOrderID(int PurchaseOrderID)
        {
            DataSet ds = dal.GetDataSet("APInvoiceIns_GetAllDataByPurchaseOrderID", PurchaseOrderID);
            return (List<APInvoiceInsInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}