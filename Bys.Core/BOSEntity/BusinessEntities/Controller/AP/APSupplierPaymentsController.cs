using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region APSupplierPayments
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:APSupplierPaymentsController
    //Created Date:Tuesday, March 22, 2016
    //-----------------------------------------------------------

    public class APSupplierPaymentsController : BaseBusinessController
    {
        public APSupplierPaymentsController()
        {
            dal = new DALBaseProvider("APSupplierPayments", typeof(APSupplierPaymentsInfo));
        }

        /// <summary>
        /// Get supplier payments based on some criteria
        /// </summary>
        /// <param name="supplierID">Supplier id</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="from">Date the result will be filtered from</param>
        /// <param name="to">Date the result will be filtered to</param>
        /// <returns>List of supplier payments</returns>
        public List<APSupplierPaymentsInfo> GetSupplierPaymentList(int? supplierID, int? currencyID, DateTime? from, DateTime? to)
        {
            DataSet ds = dal.GetDataSet("APSupplierPayments_GetSupplierPaymentList", supplierID, currencyID, from, to);
            return (List<APSupplierPaymentsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get supplier payments based on some criteria
        /// </summary>
        /// <param name="supplierID">Supplier id</param>
        /// <param name="from">Date the result will be filtered from</param>
        /// <param name="to">Date the result will be filtered to</param>
        /// <returns>List of supplier payments</returns>
        public List<APSupplierPaymentsInfo> GetSupplierPaymentList(int? supplierID, DateTime? from, DateTime? to)
        {
            return GetSupplierPaymentList(supplierID, null, from, to);
        }

        /// <summary>
        /// Get payments of a supplier by a currency
        /// </summary>
        /// <param name="supplierID">Supplier id</param>
        /// <param name="currencyID">Currency id</param>
        /// <returns>List of payments</returns>
        public List<APSupplierPaymentsInfo> GetPaymentsBySupplierIDAndCurrencyID(int supplierID, int currencyID)
        {
            return GetSupplierPaymentList(supplierID, currencyID, null, null);
        }

        /// <summary>
        /// Get supplier payments for transferring
        /// </summary>
        /// <returns>List of payments</returns>
        public List<APSupplierPaymentsInfo> GetSupplierPaymentsForTransferring()
        {
            DataSet ds = dal.GetDataSet("APSupplierPayments_GetSupplierPaymentsForTransferring");
            return (List<APSupplierPaymentsInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<APSupplierPaymentsInfo> supplierPayments = new List<APSupplierPaymentsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APSupplierPaymentsInfo objSupplierPaymentsInfo = (APSupplierPaymentsInfo)GetObjectFromDataRow(row);
                    supplierPayments.Add(objSupplierPaymentsInfo);
                }
            }
            ds.Dispose();
            return supplierPayments;
        }

        /// <summary>
        /// Get supplier payments for broadcasting to a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <returns>List of broadcasted payments</returns>
        public List<APSupplierPaymentsInfo> GetSupplierPaymentsForBroadcasting(int branchID)
        {
            DataSet ds = dal.GetDataSet("APSupplierPayments_GetSupplierPaymentsForBroadcasting", branchID);
            return (List<APSupplierPaymentsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get supplier payments based on some criteria
        /// </summary>
        /// <param name="supplierPaymentNo">Supplier payment no</param>
        /// <param name="supplierID">Supplier id</param>
        /// <param name="employeeID">Employee ID</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="supplierPaymentType">Suppplier payment type</param>
        /// <param name="branchID">branch ID</param>
        /// <param name="from">Date the result will be filtered from</param>
        /// <param name="to">Date the result will be filtered to</param>
        /// <returns>dataset of supplier payments</returns>
        public DataSet GetSupplierPaymentDataSetByBranchID(string supplierPaymentNo, int? acObjectID, string acObjectType, int? employeeID,
                                                                            int? currencyID, string supplierPaymentType,
                                                                            int? branchID, DateTime? from, DateTime? to)
        {
            DataSet ds = dal.GetDataSet("APSupplierPayments_GetSupplierPaymentListByBranchID", supplierPaymentNo, acObjectID, acObjectType, employeeID, currencyID,
                                                                                               supplierPaymentType, branchID, from, to);
            return ds;
        }

        /// <summary>
        /// Get supplier payments based on some criteria
        /// </summary>
        /// <param name="supplierPaymentNo">Supplier payment no</param>
        /// <param name="supplierID">Supplier id</param>
        /// <param name="employeeID">Employee ID</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="supplierPaymentType">Suppplier payment type</param>        
        /// <param name="from">Date the result will be filtered from</param>
        /// <param name="to">Date the result will be filtered to</param>
        /// /// <param name="branchList">branch list</param>
        /// <returns>dataset of supplier payments</returns>
        public DataSet GetSupplierPaymentDataSetByListOfBranchID(string supplierPaymentNo,
                                        int? acObjectID,
                                        string acObjectType,
                                        int? employeeID,
                                        int? currencyID,
                                        string supplierPaymentType,
                                        DateTime? dateFrom,
                                        DateTime? dateTo,
                                        List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetSupplierPaymentDataSetByBranchID(supplierPaymentNo, acObjectID, acObjectType, employeeID, currencyID, supplierPaymentType,
                                                                                               ojbBranchsInfo.BRBranchID, dateFrom, dateTo);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public List<APSupplierPaymentsInfo> GetSupplierPayments(int paymentProposalID)
        {
            DataSet ds = dal.GetDataSet("APSupplierPayments_GetSupplierPayments", paymentProposalID);
            return (List<APSupplierPaymentsInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}