using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region APPaymentVouchers
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:APPaymentVouchersController
    //Created Date:Saturday, July 02, 2011
    //-----------------------------------------------------------

    public class APPaymentVouchersController : BaseBusinessController
    {
        public APPaymentVouchersController()
        {
            dal = new DALBaseProvider("APPaymentVouchers", typeof(APPaymentVouchersInfo));
        }

        /// <summary>
        /// Get payment voucher by invoice id
        /// </summary>
        /// <param name="invoiceID">Invoice id</param>
        /// <returns>Info of the payment voucher </returns>
        public APPaymentVouchersInfo GetPaymentVoucherByInvoiceID(int invoiceID)
        {
            DataSet ds = dal.GetDataSet("APPaymentVouchers_GetPaymentVoucherByInvoiceID", invoiceID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                APPaymentVouchersInfo objPaymentVouchersInfo = (APPaymentVouchersInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objPaymentVouchersInfo;
            }
            return null;
        }

        /// <summary>
        /// Get the list of payment vouchers based on some criteria
        /// </summary>
        /// <param name="paymentVoucherNo">Payment voucher no</param>
        /// <param name="objectID">Object id</param>        
        /// <param name="paymentVoucherType">Payment voucher type</param>
        /// <param name="employeeID">Employee id</param>
        /// <param name="fromDate">Date the result will be filtered from</param>
        /// <param name="toDate">Date the result will be filtered to</param>
        /// <returns>List of payment vouchers</returns>
        public DataSet GetPaymentVoucherList(
                                    string paymentVoucherNo,
                                    int? objectID,
                                    string objectType,
                                    string paymentVoucherType,
                                    int? employeeID,
                                    DateTime? fromDate,
                                    DateTime? toDate)
        {
            return dal.GetDataSet("APPaymentVouchers_GetPaymentVoucherList",
                                paymentVoucherNo,
                                objectID,
                                objectType,
                                paymentVoucherType,
                                employeeID,
                                fromDate,
                                toDate);
        }

        /// <summary>
        /// Get payment vouchers for transferring
        /// </summary>
        /// <returns>List of transferred payment vouchers</returns>
        public List<APPaymentVouchersInfo> GetPaymentVouchersForTransferring()
        {
            DataSet ds = dal.GetDataSet("APPaymentVouchers_GetPaymentVouchersForTransferring");
            return (List<APPaymentVouchersInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get payment vouchers for broadcasting to a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <returns>List of broadcasted payment vouchers</returns>
        public List<APPaymentVouchersInfo> GetPaymentVouchersForBroadcasting(int branchID)
        {
            DataSet ds = dal.GetDataSet("APPaymentVouchers_GetPaymentVouchersForBroadcasting", branchID);
            return (List<APPaymentVouchersInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<APPaymentVouchersInfo> paymentVouchers = new List<APPaymentVouchersInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APPaymentVouchersInfo paymentVoucher = (APPaymentVouchersInfo)GetObjectFromDataRow(row);
                    paymentVouchers.Add(paymentVoucher);
                }
            }
            ds.Dispose();
            return paymentVouchers;
        }

        public DataSet GetPaymentVoucherListDatasetByListOfBranchID(
                                    string paymentVoucherNo,
                                    int? objectID,
                                    string objectType,
                                    string paymentVoucherType,
                                    int? employeeID,
                                    DateTime? fromDate,
                                    DateTime? toDate,
                                                   List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetPaymentVoucherListDataset(paymentVoucherNo,
                                objectID,
                                objectType,
                                paymentVoucherType,
                                employeeID,
                                fromDate,
                                toDate, ojbBranchsInfo.BRBranchID);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public DataSet GetPaymentVoucherListDataset(
                                    string paymentVoucherNo,
                                    int? objectID,
                                    string objectType,
                                    string paymentVoucherType,
                                    int? employeeID,
                                    DateTime? fromDate,
                                    DateTime? toDate,
                                    int? branchID)
        {
            return dal.GetDataSet("APPaymentVouchers_GetPaymentVoucherListDataset",
                                paymentVoucherNo,
                                objectID,
                                objectType,
                                paymentVoucherType,
                                employeeID,
                                fromDate,
                                toDate, branchID);
        }
    }
    #endregion
}