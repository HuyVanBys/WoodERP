using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ICInventoryStockCounts
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ICInventoryStockCountsController
    //Created Date:Monday, March 11, 2013
    //-----------------------------------------------------------

    public class ICInventoryStockCountsController : BaseBusinessController
    {
        public ICInventoryStockCountsController()
        {
            dal = new DALBaseProvider("ICInventoryStockCounts", typeof(ICInventoryStockCountsInfo));
        }

        /// <summary>
        /// Get inventory stock count list by list branch id
        /// </summary>
        /// <param name="inventoryStockCountNo">inventoryStockCountNo</param>
        /// <param name="inventoryStockCountName">inventoryStockCountName</param>
        /// <param name="stockID">stockID</param>
        /// <param name="branchID">branchID</param>
        /// <param name="employeeID">employeeID</param>
        /// <param name="branchList">branch List</param>
        /// <returns></returns>
        public DataSet GetInventoryStockCountListByListOfBranchID(
                                                    string inventoryStockCountNo,
                                                    string inventoryStockCountName,
                                                    int? stockID,
                                                    int? branchID,
                                                    int? employeeID,
                                                    DateTime? inventoryStockCountDateFrom,
                                                    DateTime? inventoryStockCountDateTo,
                                                    List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetInventoryStockCountListByBranchID(inventoryStockCountNo,
                                             inventoryStockCountName, stockID, ojbBranchsInfo.BRBranchID, employeeID, inventoryStockCountDateFrom, inventoryStockCountDateTo);
                rtn.Merge(ds);
            }

            return rtn;
        }

        /// <summary>
        /// Get inventory stock count list by branch id
        /// </summary>
        /// <param name="inventoryStockCountNo">inventoryStockCountNo</param>
        /// <param name="inventoryStockCountName">inventoryStockCountName</param>
        /// <param name="stockID">stockID</param>
        /// <param name="branchID">branchID</param>
        /// <param name="employeeID">employeeID</param>
        /// <param name="inventoryStockCountDate">inventoryStockCountDate</param>
        /// <returns></returns>
        public DataSet GetInventoryStockCountListByBranchID(
                                                            string inventoryStockCountNo,
                                                            string inventoryStockCountName,
                                                            int? stockID,
                                                            int? branchID,
                                                            int? employeeID,
                                                            DateTime? inventoryStockCountDateFrom,
                                                            DateTime? inventoryStockCountDateTo)
        {
            DataSet ds = dal.GetDataSet("ICInventoryStockCounts_GetInventoryStockCountListByBranchID", inventoryStockCountNo,
                                             inventoryStockCountName, stockID, branchID, employeeID, inventoryStockCountDateFrom, inventoryStockCountDateTo);
            return ds;
        }

        public ICInventoryStockCountsInfo GetInventoryStockCountsForInventoryStockReportByID(int inventoryStockCountID)
        {
            return (ICInventoryStockCountsInfo)dal.GetDataObject("ICInventoryStockCounts_GetInventoryStockCountsForInventoryStockReportByID", inventoryStockCountID);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ICInventoryStockCountsInfo> inventoryStockCountList = new List<ICInventoryStockCountsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICInventoryStockCountsInfo objInventoryStockCountsInfo = (ICInventoryStockCountsInfo)GetObjectFromDataRow(row);
                    inventoryStockCountList.Add(objInventoryStockCountsInfo);
                }
            }
            ds.Dispose();
            return inventoryStockCountList;
        }
    }
    #endregion
}