using BOSLib;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ICProductIdentifiedEquipments
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ICProductIdentifiedEquipmentsController
    //Created Date:Monday, April 25, 2016
    //-----------------------------------------------------------

    public class ICProductIdentifiedEquipmentsController : BaseBusinessController
    {
        public ICProductIdentifiedEquipmentsController()
        {
            dal = new DALBaseProvider("ICProductIdentifiedEquipments", typeof(ICProductIdentifiedEquipmentsInfo));
        }
        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ICProductIdentifiedEquipmentsInfo> products = new List<ICProductIdentifiedEquipmentsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductIdentifiedEquipmentsInfo objProductsInfo = (ICProductIdentifiedEquipmentsInfo)GetObjectFromDataRow(row);
                    products.Add(objProductsInfo);
                }
            }
            ds.Dispose();
            return products;
        }

        public List<ICProductIdentifiedEquipmentsInfo> GetItemByProductIDAndProductSerieID(int productID, int productSerieID)
        {
            DataSet ds = dal.GetDataSet("ICProductIdentifiedEquipments_GetItemByProductIDAndProductSerieID", productID, productSerieID);
            return (List<ICProductIdentifiedEquipmentsInfo>)GetListFromDataSet(ds);
        }
        public ICProductIdentifiedEquipmentsInfo GetIdentifiedByProductIDAndIdentifiedNo(int productID, string identifiedNo)
        {
            return (ICProductIdentifiedEquipmentsInfo)dal.GetDataObject("ICProductIdentifiedEquipments_GetIdentifiedByProductIDAndIdentifiedNo", productID, identifiedNo);
        }
        public List<ICProductIdentifiedEquipmentsInfo> GetIdentifiedForShowIndentifyMenu()
        {
            DataSet ds = dal.GetDataSet("ICProductIdentifiedEquipments_GetIdentifiedForShowIndentifyMenu");
            return (List<ICProductIdentifiedEquipmentsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductIdentifiedEquipmentsInfo> GetIdentifiedForShowIndentifyMenuBySomeCondition(int departmentID, int productGroupID, string name, bool isInventory)
        {
            DataSet ds = dal.GetDataSet("ICProductIdentifiedEquipments_GetIdentifiedForShowIndentifyMenuBySomeCondition", departmentID, productGroupID, name, isInventory);
            return (List<ICProductIdentifiedEquipmentsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductIdentifiedEquipmentsInfo> GetListICProductIdentifiedEquipmentsByID(int ICProductIdentifiedEquipmentID)
        {
            DataSet ds = dal.GetDataSet("ICProductIdentifiedEquipments_GetListICProductIdentifiedEquipmentsByID", ICProductIdentifiedEquipmentID);
            return (List<ICProductIdentifiedEquipmentsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductIdentifiedEquipmentsInfo> GetAllListForMachineGroup()
        {
            DataSet ds = dal.GetDataSet("ICProductIdentifiedEquipments_GetAllListForMachineGroup");
            return (List<ICProductIdentifiedEquipmentsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductIdentifiedEquipmentsInfo> GetProductIdentifiedEquipmentsByProductID(int productID)
        {
            DataSet ds = dal.GetDataSet("ICProductIdentifiedEquipments_GetProductIdentifiedEquipmentsByProductID", productID);
            return (List<ICProductIdentifiedEquipmentsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductIdentifiedEquipmentsInfo> GetDataItemByIdentifiedEquipmentStatus(string status, int productID)
        {
            DataSet ds = dal.GetDataSet("ICProductIdentifiedEquipments_GetDataItemByIdentifiedEquipmentStatus", status, productID);
            return (List<ICProductIdentifiedEquipmentsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductIdentifiedEquipmentsInfo> GetItemByProductIDAndIdentifiedEquipmentStatus(int productID, string IdentifiedEquipmentStatus)
        {
            DataSet ds = dal.GetDataSet("ICProductIdentifiedEquipments_GetItemByProductIDAndIdentifiedEquipmentStatus", productID, IdentifiedEquipmentStatus);
            return (List<ICProductIdentifiedEquipmentsInfo>)GetListFromDataSet(ds);
        }

        public string GetProductIdentifiedEquipmentNo(int productID)
        {
            ICProductIdentifiedEquipmentsInfo item = (ICProductIdentifiedEquipmentsInfo)GetDataObject("ICProductIdentifiedEquipments_GetProductIdentifiedEquipmentNo", productID);
            return item != null ? item.ICProductIdentifiedEquipmentNo : "";
        }

        public List<ICProductIdentifiedEquipmentsInfo> GetListByEquipmentTransferForReceipt()
        {
            DataSet ds = dal.GetDataSet("ICProductIdentifiedEquipments_GetListByEquipmentTransferForReceipt");
            return (List<ICProductIdentifiedEquipmentsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductIdentifiedEquipmentsInfo> GetListByEquipmentTransferForShipment()
        {
            DataSet ds = dal.GetDataSet("ICProductIdentifiedEquipments_GetListByEquipmentTransferForShipment");
            return (List<ICProductIdentifiedEquipmentsInfo>)GetListFromDataSet(ds);
        }

        public void DeleteProductIdentifiedEquipmentsByEquipmentShipmentID(int equipmentShipmentID)
        {
            dal.ExecuteStoredProcedure("ICProductIdentifiedEquipments_DeleteProductIdentifiedEquipmentsByEquipmentShipmentID", equipmentShipmentID);
        }
    }
    #endregion
}