using BOSLib;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ICProductItems
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ICProductItemsController
    //Created Date:Tuesday, October 20, 2015
    //-----------------------------------------------------------

    public class ICProductItemsController : BaseBusinessController
    {
        public ICProductItemsController()
        {
            dal = new DALBaseProvider("ICProductItems", typeof(ICProductItemsInfo));
        }
        public List<ICProductItemsInfo> GetProductItemListByProductID(int productID)
        {
            DataSet ds = dal.GetDataSet("ICProductItems_GetProductItemListByProductID", productID);
            List<ICProductItemsInfo> productItemList = new List<ICProductItemsInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductItemsInfo objProductItemsInfo = (ICProductItemsInfo)GetObjectFromDataRow(row);
                    productItemList.Add(objProductItemsInfo);
                }

            }
            ds.Dispose();
            return productItemList;
        }

        public ICProductItemsInfo GetProductItemByParentIDAndChildID(int parentID, int childID)
        {
            return (ICProductItemsInfo)dal.GetDataObject("ICProductItems_GetProductItemByParentIDAndChildID", parentID, childID);


        }
        public void DeleteProductItemByChildID(int ChildID)
        {
            dal.ExecuteStoredProcedure("ICProductItems_DeleteProductItemByChildID", ChildID);
        }

        public void DeleteProductItemByParentID(int parentID)
        {
            dal.ExecuteStoredProcedure("ICProductItems_DeleteProductItemByParentID", parentID);
        }


        public List<ICProductItemsInfo> GetProductItemByParentID(int productID)
        {
            DataSet ds = dal.GetDataSet("ICProductItems_GetProductItemByParentID", productID);
            List<ICProductItemsInfo> productItemList = new List<ICProductItemsInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductItemsInfo objProductItemsInfo = (ICProductItemsInfo)GetObjectFromDataRow(row);
                    productItemList.Add(objProductItemsInfo);
                }

            }
            ds.Dispose();
            return productItemList;
        }

        public List<ICProductItemsInfo> GetProductItemByChildID(int productID)
        {
            DataSet ds = dal.GetDataSet("ICProductItems_GetProductItemByChildID", productID);
            List<ICProductItemsInfo> productItemList = new List<ICProductItemsInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductItemsInfo objProductItemsInfo = (ICProductItemsInfo)GetObjectFromDataRow(row);
                    productItemList.Add(objProductItemsInfo);
                }

            }
            ds.Dispose();
            return productItemList;
        }

        public void UpdateByParentID(int idparent)
        {
            dal.ExecuteStoredProcedure("ICProductItems_UpdateAAStatusByParentID", idparent);
        }
        public void UpdateByChildID(int idparent)
        {
            dal.ExecuteStoredProcedure("ICProductItems_UpdateAAStatusByChildID", idparent);
        }

        public void UpdateParentIDAndProductQty(int productCarcassID, int parentItemID, int childItemID, decimal productItemQty, int sortOrder)
        {
            dal.ExecuteStoredProcedure("ICProductItems_UpdateParentIDAndProductQty", productCarcassID, parentItemID, childItemID, productItemQty, sortOrder);
        }

        public List<ICProductItemsInfo> GetProductItemsByProductItemParentID(int productItemParentID)
        {
            DataSet ds = dal.GetDataSet("ICProductItems_GetProductItemsByProductItemParentID", productItemParentID);
            List<ICProductItemsInfo> productItems = new List<ICProductItemsInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                ICProductItemsController objProductItemsController = new ICProductItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductItemsInfo objProductBranchPricesInfo = (ICProductItemsInfo)objProductItemsController.GetObjectFromDataRow(row);
                    productItems.Add(objProductBranchPricesInfo);
                }
            }
            return productItems;
        }
        public List<ICProductItemsInfo> GetProductItemsByProductCarcassID(int productCarcassID)
        {
            DataSet ds = dal.GetDataSet("ICProductItems_GetProductItemsByProductCarcassID", productCarcassID);
            List<ICProductItemsInfo> productItemList = new List<ICProductItemsInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductItemsInfo objProductItemsInfo = (ICProductItemsInfo)GetObjectFromDataRow(row);
                    productItemList.Add(objProductItemsInfo);
                }

            }
            ds.Dispose();
            return productItemList;
        }

        public void UpdateDeleteProductItemByProductID(int productCarcassID)
        {
            dal.ExecuteStoredProcedure("ICProductItems_UpdateDeleteProductItemByProductID", productCarcassID);
        }

        public void GenerateProductItemByProductOfCarcass(int productCarcassID)
        {
            dal.ExecuteStoredProcedure("ICProductItems_GenerateProductItemByProductOfCarcass", productCarcassID);
        }

        public void RemoveDuplicateNote(int productionNormID)
        {
            dal.ExecuteStoredProcedure("ICProductItems_RemoveDuplicateNote", productionNormID);
        }

        public List<ICProductItemsInfo> GetItemStructureByBatchProductID(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("ICProductItems_GetItemStructureByBatchProductID", batchProductID);
            List<ICProductItemsInfo> productItemList = new List<ICProductItemsInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductItemsInfo objProductItemsInfo = (ICProductItemsInfo)GetObjectFromDataRow(row);
                    productItemList.Add(objProductItemsInfo);
                }

            }
            ds.Dispose();
            return productItemList;
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ICProductItemsInfo> productItemList = new List<ICProductItemsInfo>();
            if (ds != null && ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductItemsInfo objProductItemsInfo = (ICProductItemsInfo)GetObjectFromDataRow(row);
                    productItemList.Add(objProductItemsInfo);
                }
            }
            ds.Dispose();
            return productItemList;
        }

        public List<ICProductItemsInfo> GetProductItemByProductionNormID(int? productionNormID)
        {
            DataSet ds = dal.GetDataSet("ICProductItems_GetProductItemByProductionNormID", productionNormID);
            return (List<ICProductItemsInfo>)GetListFromDataSet(ds);
        }
        public void UpdateItemParentCodeProductionNormID(int productionNormID)
        {
            dal.ExecuteStoredProcedure("ICProductItems_UpdateItemParentCodeProductionNormID", productionNormID);
        }
        public void UpdateDeleteProductItemByProductionNormID(int productionNormID)
        {
            dal.ExecuteStoredProcedure("ICProductItems_UpdateDeleteProductItemByProductionNormID", productionNormID);
        }

        public void GenerateProductItemForProductionNorm(int productCarcassID, int productionNormID)
        {
            dal.ExecuteStoredProcedure("ICProductItems_GenerateProductItemForProductionNorm", productCarcassID, productionNormID);
        }

        public List<ICProductItemsInfo> GetProductStructureFromBatchProductByBatchProductIDs(string batchProductIDs, string deliminator)
        {
            DataSet ds = dal.GetDataSet("ICProductItems_GetProductStructureFromBatchProductByBatchProductIDs", batchProductIDs, deliminator);
            List<ICProductItemsInfo> productItemList = new List<ICProductItemsInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductItemsInfo objProductItemsInfo = (ICProductItemsInfo)GetObjectFromDataRow(row);
                    productItemList.Add(objProductItemsInfo);
                }

            }
            ds.Dispose();
            return productItemList;
        }
        public void GenerateDefualtProcessByNorm(int productionNormID, string UpdatedUser)
        {
            dal.ExecuteStoredProcedure("ICProductItems_GenerateDefualtProcessByNorm", productionNormID, UpdatedUser);
        }
    }
    #endregion
}