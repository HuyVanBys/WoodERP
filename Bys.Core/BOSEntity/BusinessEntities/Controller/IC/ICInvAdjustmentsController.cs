using BOSLib;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ICInvAdjustments
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ICInvAdjustmentsController
    //Created Date:Sunday, February 19, 2012
    //-----------------------------------------------------------

    public class ICInvAdjustmentsController : BaseBusinessController
    {
        public ICInvAdjustmentsController()
        {
            dal = new DALBaseProvider("ICInvAdjustments", typeof(ICInvAdjustmentsInfo));
        }

        /// <summary>
        /// Get an inventory adjustment of a serie in a stock
        /// </summary>
        /// <param name="stockID">Stock id</param>
        /// <param name="productID">Product id</param>
        /// <param name="productSerieID">Serie id</param>
        /// <returns>Inventory adjustment object</returns>
        public ICInvAdjustmentsInfo GetInvAdjustmentByStockIDAndProductIDAndSerieID(
                                                                            int stockID,
                                                                            int productID,
                                                                            int productSerieID)
        {
            return (ICInvAdjustmentsInfo)dal.GetDataObject("ICInvAdjustments_GetInvAdjustmentByStockIDAndProductIDAndSerieID", stockID, productID, productSerieID);
        }

        /// <summary>
        /// Get all inventory adjustments of a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <returns>List of inventory adjustments</returns>
        public List<ICInvAdjustmentsInfo> GetInvAdjustmentsByBranchID(int branchID)
        {
            DataSet ds = dal.GetDataSet("ICInvAdjustments_GetInvAdjustmentsByBranchID", branchID);
            List<ICInvAdjustmentsInfo> invAdjustments = new List<ICInvAdjustmentsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICInvAdjustmentsInfo objInvAdjustmentsInfo = (ICInvAdjustmentsInfo)GetObjectFromDataRow(row);
                    invAdjustments.Add(objInvAdjustmentsInfo);
                }
            }
            return invAdjustments;
        }

        /// <summary>
        /// Get inventory adjustments of a branch to transfer to the centre
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <returns>List of inventory adjustments</returns>
        public List<ICInvAdjustmentsInfo> GetInvAdjustmentsForTransferring(int branchID)
        {
            DataSet ds = dal.GetDataSet("ICInvAdjustments_GetInvAdjustmentsForTransferring", branchID);
            return (List<ICInvAdjustmentsInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ICInvAdjustmentsInfo> invAdjustments = new List<ICInvAdjustmentsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICInvAdjustmentsInfo objInvAdjustmentsInfo = (ICInvAdjustmentsInfo)GetObjectFromDataRow(row);
                    invAdjustments.Add(objInvAdjustmentsInfo);
                }
            }
            ds.Dispose();
            return invAdjustments;
        }

        /// <summary>
        /// Delete all inventory adjustments of a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        public void DeleteByBranchID(int branchID)
        {
            dal.ExecuteStoredProcedure("ICInvAdjustments_DeleteByBranchID", branchID);
        }

        /// <summary>
        /// Update a given status to inactive objects specified by a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <param name="status">Updated status</param>
        public void UpdateStatusForInactiveObjects(int branchID, string status)
        {
            dal.ExecuteStoredProcedure("ICInvAdjustments_UpdateStatusForInactiveObjects", branchID, status);
        }

        /// <summary>
        /// Get an inactive inventory adjustment of a serie in a stock
        /// </summary>
        /// <param name="stockID">Stock id</param>
        /// <param name="productID">Product id</param>
        /// <param name="productSerieID">Serie id</param>
        /// <returns>Inventory adjustment object</returns>
        public ICInvAdjustmentsInfo GetInactiveInvAdjustmentByStockIDAndProductIDAndSerieID(
                                                                            int stockID,
                                                                            int productID,
                                                                            int productSerieID)
        {
            return (ICInvAdjustmentsInfo)dal.GetDataObject("ICInvAdjustments_GetInactiveInvAdjustmentByStockIDAndProductIDAndSerieID", stockID, productID, productSerieID);
        }
    }
    #endregion
}