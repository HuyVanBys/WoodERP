using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ICShipments
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ICShipmentsController
    //Created Date:Monday, April 14, 2008
    //-----------------------------------------------------------

    public class ICShipmentsController : BaseBusinessController
    {
        public ICShipmentsController()
        {
            dal = new DALBaseProvider("ICShipments", typeof(ICShipmentsInfo));
        }
        public DataSet GetAllICShipmentsForLookupControl()
        {

            DataSet ds = dal.GetDataSet("ICShipments_GetAllICShipmentsForLookupControl");
            return ds;
        }
        /// <summary>
        /// Get the list of shipments based on some criteria
        /// </summary>
        /// <param name="shipmentNo">Shipment no</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="stockID">Stock id</param>
        /// <param name="employeeID">Employee id</param>
        /// <param name="shipmentType">Shipment type</param>
        /// <param name="shipmentStatus">Shipment status</param>
        /// <param name="dateFrom">Date the result is searched from</param>
        /// <param name="dateTo">Date the result is searched to</param>
        /// <returns></returns>
        public DataSet GetShipmentList(
                                        string shipmentNo,
                                        int? objectID,
                                        string objectType,
                                        int? stockID,
                                        int? employeeID,
                                        string shipmentType,
                                        string shipmentStatus,
                                        DateTime? dateFrom,
                                        DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetShipmentList", shipmentNo, objectID, objectType, stockID, employeeID, shipmentType, shipmentStatus, dateFrom, dateTo);
            return ds;
        }

        /// <summary>
        /// Get equipment shipment list based on some criteria
        /// </summary>
        /// <param name="shipmentNo">Shipment no</param>
        /// <param name="employeeID">Employee id</param>
        /// <param name="roomID">ID of the room the equipment is shipped to</param>
        /// <param name="shipmentType">Shipment type</param>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns></returns>
        public DataSet GetEquipmentShipmentList(
                                    string shipmentNo,
                                    int? employeeID,
                                    int? roomID,
                                    string shipmentType,
                                    DateTime? fromDate,
                                    DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetEquipmentShipmentList", shipmentNo, employeeID, roomID, shipmentType, fromDate, toDate);
            return ds;
        }

        /// <summary>
        /// Get shipment list by invoice id
        /// </summary>
        /// <param name="invoiceID">Invoice id</param>
        /// <returns>List of the shipment</returns>
        public List<ICShipmentsInfo> GetShipmentListByInvoiceID(int invoiceID)
        {
            List<ICShipmentsInfo> shipmentList = new List<ICShipmentsInfo>();
            DataSet ds = dal.GetDataSet("ICShipments_GetShipmentByInvoiceID", invoiceID);
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get shipment list by return supplier id
        /// </summary>
        /// <param name="invoiceID">Return supplier id</param>
        /// <returns>List of the shipment</returns>
        public List<ICShipmentsInfo> GetShipmentListByReturnSupplierID(int returnSupplierID)
        {
            List<ICShipmentsInfo> shipmentList = new List<ICShipmentsInfo>();
            DataSet ds = dal.GetDataSet("ICShipments_GetShipmentByReturnSupplierID", returnSupplierID);
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get shipment by shipment reference
        /// </summary>
        /// <param name="reference"></param>
        /// <returns></returns>
        public ICShipmentsInfo GetShipmentByShipmentReference(string reference)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetShipmentByShipmentReference", reference);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objShipmentsInfo;
            }
            return null;
        }
        public ICShipmentsInfo GetCusObjectByID(int ObjectID)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetCusObjectByID", ObjectID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objShipmentsInfo;
            }
            return null;
        }

        /// <summary>
        /// Get shipments for transferring
        /// </summary>
        /// <returns>List of shipments</returns>
        public List<ICShipmentsInfo> GetShipmentsForTransferring()
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetShipmentsForTransferring");
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get shipments by date
        /// </summary>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns>List of shipments</returns>
        public List<ICShipmentsInfo> GetShipmentsByDate(DateTime fromDate, DateTime toDate)
        {
            DataSet ds = GetShipmentList(null, null, null, null, null, null, null, fromDate, toDate);
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ICShipmentsInfo> shipments = new List<ICShipmentsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)GetObjectFromDataRow(row);
                    shipments.Add(objShipmentsInfo);
                }
            }
            ds.Dispose();
            return shipments;
        }

        /// <summary>
        /// Get equipment shipments for broadcasting to a branch
        /// </summary>
        /// <param name="branchID">Transferred branch id</param>
        /// <returns>List of equipment shipments</returns>
        public List<ICShipmentsInfo> GetEquipmentShipmentsForBroadcasting(int branchID)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetEquipmentShipmentsForBroadcasting", branchID);
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }


        /// <summary>
        /// Get shipments for broadcasting to a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <returns>List of broadcasted shipments</returns>
        public List<ICShipmentsInfo> GetShipmentsForBroadcasting(int branchID)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetShipmentsForBroadcasting", branchID);
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }

        public DataSet GetEquipmentShipmentListDataSetByListOfBranchID(
                                   string shipmentNo,
                                   int? employeeID,
                                   int? roomID,
                                   string shipmentType,
                                   DateTime? fromDate,
                                   DateTime? toDate, List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetEquipmentShipmentListDataSet(shipmentNo, employeeID, roomID, ojbBranchsInfo.BRBranchID, shipmentType, fromDate, toDate);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public DataSet GetEquipmentShipmentListDataSet(
                                   string shipmentNo,
                                   int? employeeID,
                                   int? roomID,
                                   int? branchID,
                                   string shipmentType,
                                   DateTime? fromDate,
                                   DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetEquipmentShipmentListDataSet", shipmentNo, employeeID, roomID, branchID, shipmentType, fromDate, toDate);
            return ds;
        }
        public DataSet GetEquipmentByListOfBranchID(
                                   string shipmentNo,
                                   int? employeeID,
                                   int? roomID,
                                   string shipmentType,
                                   DateTime? fromDate,
                                   DateTime? toDate, List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetEquipmentListDataSet(shipmentNo, employeeID, roomID, ojbBranchsInfo.BRBranchID, shipmentType, fromDate, toDate);
                rtn.Merge(ds);
            }

            return rtn;
        }
        public DataSet GetEquipmentListDataSet(
                                   string shipmentNo,
                                   int? employeeID,
                                   int? roomID,
                                   int? branchID,
                                   string shipmentType,
                                   DateTime? fromDate,
                                   DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetEquipmentListDataSet", shipmentNo, employeeID, roomID, branchID, shipmentType, fromDate, toDate);
            return ds;
        }

        public DataSet GetShipmentListAllType(
                                        string shipmentNo,
                                        List<BRBranchsInfo> branchList,
                                        int? objectID,
                                        string objectType,
                                        int? stockID,
                                        int? employeeID,
                                        string shipmentType,
                                        string shipmentStatus,
                                        DateTime? dateFrom,
                                        DateTime? dateTo)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = dal.GetDataSet("ICShipments_GetShipmentListAllType", shipmentNo, ojbBranchsInfo.BRBranchID, objectID, objectType, stockID, employeeID, shipmentType, shipmentStatus, dateFrom, dateTo);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public DataSet GetShipmentListAllTypeForSemiShipment(
                                      string shipmentNo,
                                      List<BRBranchsInfo> branchList,
                                      int? objectID,
                                      string objectType,
                                      int? stockID,
                                      int? employeeID,
                                      string shipmentType,
                                      string shipmentStatus,
                                      DateTime? dateFrom,
                                      DateTime? dateTo)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = dal.GetDataSet("ICShipments_GetShipmentListAllTypeForSemiShipment", shipmentNo, ojbBranchsInfo.BRBranchID, objectID, objectType, stockID, employeeID, shipmentType, shipmentStatus, dateFrom, dateTo);
                rtn.Merge(ds);
            }

            return rtn;
        }

        /// <summary>
        /// Get the list of shipments by type
        /// </summary>
        /// <param name="shipmentNo">Shipment no</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="stockID">Stock id</param>
        /// <param name="employeeID">Employee id</param>
        /// <param name="shipmentType">Shipment type</param>
        /// <param name="shipmentStatus">Shipment status</param>
        /// <param name="dateFrom">Date the result is searched from</param>
        /// <param name="dateTo">Date the result is searched to</param>
        /// <returns></returns>
        public DataSet GetShipmentListAllType(
                                        string shipmentNo,
                                        int? FK_BRBranchID,
                                        int? objectID,
                                        string objectType,
                                        int? stockID,
                                        int? employeeID,
                                        string shipmentType,
                                        string shipmentStatus,
                                        DateTime? dateFrom,
                                        DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetShipmentListAllType", shipmentNo, FK_BRBranchID, objectID, objectType, stockID, employeeID, shipmentType, shipmentStatus, dateFrom, dateTo);
            return ds;
        }
        public DataSet GetShipmentSaleListAllType(
                                        string shipmentNo,
                                        List<BRBranchsInfo> branchList,
                                        int? objectID,
                                        string objectType,
                                        int? stockID,
                                        int? employeeID,
                                        string shipmentType,
                                        string shipmentStatus,
                                        DateTime? dateFrom,
                                        DateTime? dateTo,
                                        int? userID
                                        )
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = dal.GetDataSet("ICShipments_GetShipmentSaleListAllTypeAndUser", shipmentNo, ojbBranchsInfo.BRBranchID, objectID, objectType, stockID, employeeID, shipmentType, shipmentStatus, dateFrom, dateTo, userID);
                rtn.Merge(ds);
            }

            return rtn;
        }
        public DataSet GetShipmentSaleListAllTypeAndUser(
                                      string shipmentNo,
                                      int? FK_BRBranchID,
                                      int? objectID,
                                      string objectType,
                                      int? stockID,
                                      int? employeeID,
                                      string shipmentType,
                                      string shipmentStatus,
                                      DateTime? dateFrom,
                                      DateTime? dateTo,
                                        int? userID
                                      )
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetShipmentSaleListAllTypeAndUser", shipmentNo, FK_BRBranchID, objectID, objectType, stockID, employeeID, shipmentType, shipmentStatus, dateFrom, dateTo, userID);
            return ds;
        }
        public DataSet GetSemiproductShipmentList(
                                       string shipmentNo,
                                       int? FK_BRBranchID,
                                       int? objectID,
                                       string objectType,
                                       int? stockID,
                                       int? employeeID,
                                       string shipmentType,
                                       string shipmentStatus,
                                       DateTime? dateFrom,
                                       DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetShipmentListAllTypeForSemiShipment", shipmentNo, FK_BRBranchID, objectID, objectType, stockID, employeeID, shipmentType, shipmentStatus, dateFrom, dateTo);
            return ds;
        }
        public DataSet GetMaterialShipmentList(
                                     string shipmentNo,
                                     int? FK_BRBranchID,
                                     int? objectID,
                                     string objectType,
                                     int? stockID,
                                     int? employeeID,
                                     string shipmentType,
                                     string shipmentStatus,
                                     DateTime? dateFrom,
                                     DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetMaterialShipmentList", shipmentNo, FK_BRBranchID, objectID, objectType, stockID, employeeID, shipmentType, shipmentStatus, dateFrom, dateTo);
            return ds;
        }
        /// <summary>
        /// Get the list of shipments by type
        /// </summary>
        /// <param name="shipmentNo">Shipment no</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="stockID">Stock id</param>
        /// <param name="employeeID">Employee id</param>
        /// <param name="shipmentType">Shipment type</param>
        /// <param name="shipmentStatus">Shipment status</param>
        /// <param name="dateFrom">Date the result is searched from</param>
        /// <param name="dateTo">Date the result is searched to</param>
        /// <returns></returns>
        public DataSet GetShipmentDryLumberModuleListBySomeCriteria(
                                        string shipmentNo,
                                        int? FK_BRBranchID,
                                        int? objectID,
                                        string objectType,
                                        int? stockID,
                                        int? employeeID,
                                        string shipmentStatus,
                                        DateTime? dateFrom,
                                        DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetShipmentDryLumberModuleListBySomeCriteria", shipmentNo, FK_BRBranchID, objectID, objectType, stockID, employeeID, shipmentStatus, dateFrom, dateTo);
            return ds;
        }


        public DataSet GetShipmentListAllTypeOfBranchList(string shipmentNo,
                                                          int? objectID,
                                                          string objectType,
                                                          int? stockID,
                                                          int? employeeID,
                                                          string shipmentType,
                                                          string shipmentStatus,
                                                          DateTime? dateFrom,
                                                          DateTime? dateTo,
                                                          List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = dal.GetDataSet("ICShipments_GetShipmentListAllType", shipmentNo, ojbBranchsInfo.BRBranchID, objectID, objectType, stockID, employeeID, shipmentType, shipmentStatus, dateFrom, dateTo);
                rtn.Merge(ds);
            }
            return rtn;
        }
        public DataSet GetMaterialShipmentListByBranchList(string shipmentNo,
                                                          int? objectID,
                                                          string objectType,
                                                          int? stockID,
                                                          int? employeeID,
                                                          string shipmentType,
                                                          string shipmentStatus,
                                                          DateTime? dateFrom,
                                                          DateTime? dateTo,
                                                          List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = dal.GetDataSet("ICShipments_GetMaterialShipmentList", shipmentNo, ojbBranchsInfo.BRBranchID, objectID, objectType, stockID, employeeID, shipmentType, shipmentStatus, dateFrom, dateTo);
                rtn.Merge(ds);
            }
            return rtn;
        }

        public DataSet GetShipmentListAllTypeForSemiShipment(
                                       string shipmentNo,
                                       int? FK_BRBranchID,
                                       int? objectID,
                                       string objectType,
                                       int? stockID,
                                       int? employeeID,
                                       string shipmentType,
                                       string shipmentStatus,
                                       DateTime? dateFrom,
                                       DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetShipmentListAllTypeForSemiShipment", shipmentNo, FK_BRBranchID, objectID, objectType, stockID, employeeID, shipmentType, shipmentStatus, dateFrom, dateTo);
            return ds;
        }


        public List<ICShipmentsInfo> GetShipmentByBatchProductIDAndProductID(int batchProductID, int productID)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetShipmentByBatchProductIDAndProductID", batchProductID, productID);
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentsInfo> GetItemForAcceptance(string Type)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItem_GetItemForAcceptance", Type);
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentsInfo> GetListAllObject()
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetListAllObject");
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentsInfo> GetSemiProductShipment()
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetSemiProductShipment");
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }

        public void DeleteSemiProductShipment(int shipmentID)
        {
            dal.ExecuteStoredProcedure("ICShipments_DeleteSemiProductShipment", shipmentID);
        }
        public List<ICShipmentsInfo> GetShipmentListByShipmentType(string shipmentType)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetShipmentListByShipmentType", shipmentType);
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentsInfo> GetListResultForEdit()
        {
            DataSet ds = dal.GetDataSet("ICReceipt_GetListResultForEdit");
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentsInfo> GetListShipmentRoundWoodCDForLumberCD()
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetListShipmentRoundWoodCDForLumberCD");
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentsInfo> GetListItemForShipmentFreshLumber()
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetListItemForShipmentFreshLumber");
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }

        public int GetShipmentByEquipmentID(int EquipmentID, DateTime FromDate, DateTime ToDate)
        {
            Object obj = dal.GetSingleValue("ICShipments_GetShipmentByEquipmentID", EquipmentID, FromDate, ToDate);
            int Debt = 0;
            if (obj != null)
                Int32.TryParse(obj.ToString(), out Debt);

            return Debt;
        }
        public List<ICShipmentsInfo> GetShipmentTranfer(int batchProductID, int icProductID, int operationID)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetShipmentTranfer", batchProductID, icProductID, operationID);
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentsInfo> GetShipmentMaterialByBatchProductID(int batchProductID, string productType, int operation)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetShipmentMaterialByBatchProductID", batchProductID, productType, operation);
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentsInfo> GetShipmentsForInvoiceByUserPermission(int userID, string moduleName, string dataViewPermissionType)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetShipmentsForInvoiceByUserPermission", userID, moduleName, dataViewPermissionType);
            List<ICShipmentsInfo> shipments = new List<ICShipmentsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICShipmentsInfo objShipmentsInfo = (ICShipmentsInfo)GetObjectFromDataRow(row);
                    shipments.Add(objShipmentsInfo);
                }
            }
            return shipments;
        }

        public List<ICShipmentsInfo> GetAllShipmentsForPrintMultiShipments(DateTime? searchFromDate, DateTime? searchToDate)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetAllShipmentsForPrintMultiShipments", searchFromDate, searchToDate);
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentsInfo> GetShipmentForAllocationCost(DateTime fromDate, DateTime toDate, int purchaseOrderID)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetShipmentForAllocationCost", fromDate, toDate, purchaseOrderID);
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentsInfo> GetShipmentForAllocationCostDetail(int shipmentID, int purchaseOrderID)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetShipmentForAllocationCostDetail", shipmentID, purchaseOrderID);
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }
        public void UpdateShipedQtySaleOrderAndDeliveryPlan(int shipmentID, string userName)
        {
            dal.ExecuteStoredProcedure("ICShipments_UpdateShipedQtySaleOrderAndDeliveryPlan", shipmentID, userName);
        }
        public List<ICShipmentsInfo> GetShipmentReferenceByReceipt(int receiptID)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetShipmentReferenceByReceipt", receiptID);
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }

        public string IsAllowCancelComplete(int shipmentID)
        {
            return (string)dal.GetSingleValue("ICShipments_IsAllowCancelComplete", shipmentID);
        }

        public List<ICShipmentsInfo> GetShipmentForMultiSummaryRP(DateTime? fromDate, DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetShipmentForMultiSummaryRP", fromDate, toDate);
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentsInfo> GetShipmentUnExecutedInvoiceList()
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetShipmentUnExecutedInvoiceList");
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentsInfo> GetSemiProductShipmentByNorm(int normID)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetSemiProductShipmentByNorm", normID);
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentsInfo> GetMaterialShipmentByNorm(int normID)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetMaterialShipmentByNorm", normID);
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentsInfo> GetShipmentListBySaleOrder(int saleOrderID)
        {
            DataSet ds = dal.GetDataSet("ICShipments_GetShipmentListBySaleOrder", saleOrderID);
            return (List<ICShipmentsInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}