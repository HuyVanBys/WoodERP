using BOSCommon;
using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ICShipmentItems
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ICShipmentItemsController
    //Created Date:Monday, April 14, 2008
    //-----------------------------------------------------------

    public class ICShipmentItemsController : BaseBusinessController
    {
        private readonly string spGetTotalShippedQuantityOfSaleOrderItem =
                                "ICShipmentItems_SelectTotalShippedQuantityByARSaleOrderItemID";

        public ICShipmentItemsController()
        {
            dal = new DALBaseProvider("ICShipmentItems", typeof(ICShipmentItemsInfo));
        }

        /// <summary>
        /// Get shipment item by invoice id and invoice item id
        /// </summary>
        /// <param name="invoiceID">Invoice id</param>
        /// <param name="invoiceItemID">Invoice item id</param>
        /// <returns>shipment item info</returns>
        public ICShipmentItemsInfo GetShipmentItemByInvoiceIDAndInvoiceItemID(int invoiceID, int invoiceItemID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentItemByInvoiceIDAndInvoiceItemID", invoiceID, invoiceItemID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objShipmentItemsInfo;
            }
            return null;
        }

        /// <summary>
        /// Get shipped item list including the item's components of a shipment
        /// </summary>
        /// <param name="shipmentID">Shipment id</param>
        /// <returns>List of shipped items</returns>
        public List<ICShipmentItemsInfo> GetComponentItemsByShipmentID(int shipmentID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetComponentItemsByShipmentID", shipmentID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get all items of a shipment
        /// </summary>
        /// <param name="shipmentID">Shipment id</param>
        /// <returns>List of shipment items</returns>
        public List<ICShipmentItemsInfo> GetItemsByShipmentID(int shipmentID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetItemsByShipmentID", shipmentID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }
        /// <summary>
        /// Get all items of a shipment
        /// </summary>
        /// <param name="shipmentID">Shipment id</param>
        /// <returns>List of shipment items</returns>
        public List<ICShipmentItemsInfo> GetEquipmentByShipmentID(int shipmentID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetEquipmentByShipmentID", shipmentID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get shipped equipment items for depreciating of a branch
        /// </summary>        
        /// <param name="branchID">Branch id</param>
        /// <returns>List of shipment items</returns>
        public List<ICShipmentItemsInfo> GetEquipmentItemsForDepreciating(int branchID, DateTime endDate)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetEquipmentItemsForDepreciating", branchID, endDate);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ICShipmentItemsInfo> shipmentItems = new List<ICShipmentItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(row);
                    shipmentItems.Add(objShipmentItemsInfo);
                }
            }
            ds.Dispose();
            return shipmentItems;
        }

        /// <summary>
        /// Get shipment items relating to an equipment
        /// </summary>
        /// <param name="equipmentID">Equipment id</param>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns></returns>
        public List<ICShipmentItemsInfo> GetItemsByEquipmentID(int equipmentID, DateTime? fromDate, DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetItemsByEquipmentID", equipmentID, fromDate, toDate);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentItemsInfo> GetItemsByDepartmentRoomID(int departmentRoomID, DateTime? fromDate, DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentEquipmentHistoryByRoom", departmentRoomID, fromDate, toDate);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get the original amount of an equiment shipped to a room
        /// </summary>
        /// <param name="equipmentID">Equipment id</param>
        /// <param name="serieID">Serie id</param>
        /// <param name="roomID">Room id</param>        
        /// <returns>Equipment original amount</returns>
        public decimal GetEquipmentOriginalAmount(int equipmentID, int serieID, int roomID)
        {
            ICShipmentItemsInfo item = (ICShipmentItemsInfo)dal.GetDataObject("ICShipmentItems_GetEquipmentOriginalAmount", equipmentID, serieID, roomID);
            if (item != null)
            {
                return item.ICShipmentItemProductUnitPrice;
            }
            return 0;
        }

        /// <summary>
        /// Get the depreciated amount of an equipment shipped to a room
        /// </summary>
        /// <param name="equipmentID">Equipment id</param>
        /// <param name="serieID">Serie id</param>
        /// <param name="roomID">Room id</param>        
        /// <returns>Equipment depreciated amount</returns>
        public decimal GetEquipmentDepreciatedAmount(int equipmentID, int serieID, int roomID)
        {
            ICShipmentItemsInfo item = (ICShipmentItemsInfo)dal.GetDataObject("ICShipmentItems_GetEquipmentOriginalAmount", equipmentID, serieID, roomID);
            if (item != null)
            {
                return item.ICShipmentItemDepreciatedAmount;
            }
            return 0;
        }

        /// <summary>
        /// Get shipped and transferred equipment items for decreasing
        /// </summary>
        /// <returns>List of equipment items</returns>
        public List<ICShipmentItemsInfo> GetEquipmentItemsForDecreasing()
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetEquipmentItemsForDecreasing");
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get all equipment items of a shipment
        /// </summary>
        /// <param name="shipmentID">Shipment id</param>
        /// <returns>List of items</returns>
        public List<ICShipmentItemsInfo> GetEquipmentItemsByShipmentID(int shipmentID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetEquipmentItemsByShipmentID", shipmentID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// get shipped equipment qty by shipmentItemID
        /// </summary>
        /// <param name="shipmentItemID"></param>
        /// <returns></returns>
        public decimal GetShippedEquipmentQtyByShipmentItemID(int shipmentItemID)
        {
            decimal qty = (decimal)dal.GetSingleValue("ICShipmentItems_GetShippedEquipmentQtyByShipmentItemID", shipmentItemID);
            return qty;
        }

        public List<ICShipmentItemsInfo> GetWoodShipmentItemForReceipt(DateTime fromdate)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetWoodShipmentItemForReceipt", fromdate);
            List<ICShipmentItemsInfo> ShipmentItems = new List<ICShipmentItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(row);
                    ShipmentItems.Add(objShipmentItemsInfo);
                }
            }
            return ShipmentItems;
        }

        public List<ICShipmentItemsInfo> GetBatchShipmentFreshLumberItemForReceipt(DateTime fromdate)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetBatchShipmentFreshLumberItemForReceipt", fromdate);
            List<ICShipmentItemsInfo> ShipmentItems = new List<ICShipmentItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(row);
                    ShipmentItems.Add(objShipmentItemsInfo);
                }
            }
            return ShipmentItems;
        }
        public List<ICShipmentItemsInfo> GetBatchShipmentForReceipt(int batchProductID, int productID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetBatchShipmentForReceipt", batchProductID, productID);
            List<ICShipmentItemsInfo> ShipmentItems = new List<ICShipmentItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(row);
                    ShipmentItems.Add(objShipmentItemsInfo);
                }
            }
            return ShipmentItems;
        }
        public List<ICShipmentItemsInfo> GetItemByShipmentID(int shipmentID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetItemByShipmentID", shipmentID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentItemsInfo> GetShipmentItemListByShipmentNo(string shipmentNo)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentItemListByShipmentNo", shipmentNo);
            List<ICShipmentItemsInfo> shipmentItems = new List<ICShipmentItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(row);
                    shipmentItems.Add(objShipmentItemsInfo);
                }
            }
            return shipmentItems;
        }

        public List<ICShipmentItemsInfo> GetShipmentItemByBatchProductID(int batchProductID, int productID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentItemByBatchProductID", batchProductID, productID);
            List<ICShipmentItemsInfo> ShipmentItems = new List<ICShipmentItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(row);
                    ShipmentItems.Add(objShipmentItemsInfo);
                }
            }
            return ShipmentItems;
        }

        public List<ICShipmentItemsInfo> GetShipmentItemByOperationIDAndDate(int operationID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentItemByOperationIDAndDate", operationID, fromDate, toDate);
            List<ICShipmentItemsInfo> ShipmentItems = new List<ICShipmentItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(row);
                    ShipmentItems.Add(objShipmentItemsInfo);
                }
            }
            return ShipmentItems;
        }

        public List<ICShipmentItemsInfo> GetShipmentItemByBatchProductIDAndOperationIDAndDate(int batchProductID, int operationID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentItemByBatchProductIDAndOperationIDAndDate", batchProductID, operationID, fromDate, toDate);
            List<ICShipmentItemsInfo> ShipmentItems = new List<ICShipmentItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(row);
                    ShipmentItems.Add(objShipmentItemsInfo);
                }
            }
            return ShipmentItems;
        }

        public List<ICShipmentItemsInfo> GetShipmentItemOtherByBatchProductIDAndOperationIDAndDate(int batchProductID, int operationID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentItemOtherByBatchProductIDAndOperationIDAndDate", batchProductID, operationID, fromDate, toDate);
            List<ICShipmentItemsInfo> ShipmentItems = new List<ICShipmentItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(row);
                    ShipmentItems.Add(objShipmentItemsInfo);
                }
            }
            return ShipmentItems;
        }

        public List<ICShipmentItemsInfo> GetShipmentItemOtherBySomeCriteria(int productID, int batchProductID, int operationID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentItemOtherBySomeCriteria", productID, batchProductID, operationID, fromDate, toDate);
            List<ICShipmentItemsInfo> ShipmentItems = new List<ICShipmentItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(row);
                    ShipmentItems.Add(objShipmentItemsInfo);
                }
            }
            return ShipmentItems;
        }

        public List<ICShipmentItemsInfo> GetShipmentItemOtherBySomeCriteria2(int batchProductID, int operationID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentItemOtherBySomeCriteria2", batchProductID, operationID, fromDate, toDate);
            List<ICShipmentItemsInfo> ShipmentItems = new List<ICShipmentItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(row);
                    ShipmentItems.Add(objShipmentItemsInfo);
                }
            }
            return ShipmentItems;
        }

        public ICShipmentItemsInfo GetShipmentItemByReceiptItemIDAndBatchProductID(int receiptItemID, int batchProductID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentItemByReceiptItemIDAndBatchProductID", receiptItemID, batchProductID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objShipmentItemsInfo;
            }
            return null;
        }
        public List<ICShipmentItemsInfo> GetShipment_BatchLumber()
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentBatchLumber");
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentItemsInfo> GetShipmentBatchLumberForReceipt()
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentBatchLumberForReceipt");
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentItemsInfo> GetShipmentWoodItemForReport(int bacthProductID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentWoodItemForReport", bacthProductID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentItemsInfo> GetShipmentPackagingItemForReport(int bacthProductItemID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentPackagingItemForReport", bacthProductItemID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentItemsInfo> GetShipmentItemForReport(int bacthProductItemID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentItemForReport", bacthProductItemID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentItemsInfo> GetShipmentItemByAllocationProposalItemID(int allocationProposalItemID, string shipmentStatus)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentItemByAllocationProposalItemID", allocationProposalItemID, shipmentStatus);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentItemsInfo> GetRoundwoodShipmentFromAllocationProposalByBatchProductIDOperationIDAndDate(int batchProductID, int operationID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetRoundwoodShipmentFromAllocationProposalByBatchProductIDOperationIDAndDate", batchProductID, operationID, fromDate, toDate);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public ICShipmentItemsInfo GetRoundwoodShipmentFromSubRoundWoodByBatchProductIDOperationIDAndDate(int batchProductID, int operationID, DateTime fromDate, DateTime toDate, int receiptItemID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetRoundwoodShipmentFromSubRoundWoodByBatchProductIDOperationIDAndDate", batchProductID, operationID, fromDate, toDate, receiptItemID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objShipmentItemsInfo;
            }
            return null;
        }
        public List<ICShipmentItemsInfo> GetAllRoundwoodShipmentFromSubRoundWoodByBatchProductIDOperationIDAndDate(int batchProductID, int operationID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetAllRoundwoodShipmentFromSubRoundWoodByBatchProductIDOperationIDAndDate", batchProductID, operationID, fromDate, toDate);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentItemsInfo> GetFreshLumberShipmentFromFreshLumberReceiptByBatchProductIDOperationIDAndDate(int batchProductID, int operationID, DateTime fromDate, DateTime toDate, int receiptItemID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetFreshLumberShipmentFromFreshLumberReceiptByBatchProductIDOperationIDAndDate", batchProductID, operationID, fromDate, toDate, receiptItemID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentItemsInfo> GetShipmentHeatFromReceiptHeatByBatchProductIDOperationIDAndDate(int batchProductID, int operationID, DateTime fromDate, DateTime toDate, int receiptItemID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentHeatFromReceiptHeatByBatchProductIDOperationIDAndDate", batchProductID, operationID, fromDate, toDate, receiptItemID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentItemsInfo> GetShipmentItemsByFK_ShipmentID(int FK_ICShipmentID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItem_GetItemByFK", FK_ICShipmentID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentItemsInfo> GetItemByProductIdentifiedEquipmentID(int productIdentifiedEquipmentID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetItemByProductIdentifiedEquipmentID", productIdentifiedEquipmentID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentItemsInfo> GetListByProductIDAndSeriesAndStock(int productID, int SeriesID, int StockID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItem_GetListByProductIDAndSeriesAndStock", productID, SeriesID, StockID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentItemsInfo> GetListObjectByFKICShipmentID(int FK_ICShipmentID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItem_GetListObjectByFKICShipmentID", FK_ICShipmentID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentItemsInfo> GetItemByBatchProductIDForProductReceipt(int batchProductID, int operationID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetItemByBatchProductIDForProductReceipt", batchProductID, operationID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }
        public ICShipmentItemsInfo GetItemForCheckingReceiptValidQty(int shipmentItemID, int receiptItemID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetItemForCheckingReceiptValidQty", shipmentItemID, receiptItemID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objShipmentItemsInfo;
            }
            return null;
        }


        public List<ICShipmentItemsInfo> GetShipmentItemForEdit_PLDG(int Product, DateTime FromDate, DateTime ToDate)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItem_GetShipmentItemForEdit", Product, FromDate, ToDate);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentItemsInfo> GetFreshLumberShipmentFromFreshLumberReceiptByOperationIDAndDate(int operationID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetFreshLumberShipmentFromFreshLumberReceiptByOperationIDAndDate", operationID, fromDate, toDate);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentItemsInfo> GetShipmentItemByStockID(int stockID, int accountID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentItemByStockID", stockID, accountID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentItemsInfo> GetRounWoodItemForReceiptCD(DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItem_GetRounWoodItemForReceiptCD", fromDate, toDate);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentItemsInfo> GetListShipmentItemForReport146(DateTime dateTo, string departmentRoomNos, string branchNos)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItem_GetListShipmentItemForReport146", dateTo, departmentRoomNos, branchNos);
            List<ICShipmentItemsInfo> shipmentItems = new List<ICShipmentItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(row);
                    objShipmentItemsInfo.EquipmentCardReceiptAmount = objShipmentItemsInfo.EquipmentCardReceiptItemProductQty *
                                                                        objShipmentItemsInfo.EquipmentCardReceiptItemProductUnitPrice;
                    objShipmentItemsInfo.EquipmentCardReceiptDepreciatedAmount *= objShipmentItemsInfo.EquipmentCardReceiptItemProductQty;
                    objShipmentItemsInfo.EquipmentCardEndBalanceAmount = objShipmentItemsInfo.EquipmentCardReceiptAmount -
                                                                        objShipmentItemsInfo.EquipmentCardReceiptDepreciatedAmount;
                    shipmentItems.Add(objShipmentItemsInfo);
                }
            }
            return shipmentItems;
        }
        public List<ICShipmentItemsInfo> GetListShipmentItemForReport148(DateTime? DateFrom, DateTime? dateTo, int? productID, string departmentRoomNos, string branchNos)
        {
            DataSet ds = dal.GetDataSet("Report_GetCardListEquipment", DateFrom, dateTo, productID, departmentRoomNos, branchNos);
            List<ICShipmentItemsInfo> shipmentItems = new List<ICShipmentItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(row);
                    shipmentItems.Add(objShipmentItemsInfo);
                }
            }
            return shipmentItems;

        }

        public ICShipmentItemsInfo GetListItemForShipmentFreshLumber(int shipmentID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentItemLumberCDForReceiptLumber", shipmentID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ICShipmentItemsInfo objShipmentsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objShipmentsInfo;
            }
            return null;
        }
        public decimal GetQtyShipmentByAllocationProposal(int MMAllocationProposalItemID, int shipmentID)
        {
            decimal qty = 0;
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetQtyShipmentByAllocationProposal", MMAllocationProposalItemID, shipmentID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ICShipmentItemsInfo objShipmentsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                if (objShipmentsInfo != null)
                {
                    qty = objShipmentsInfo.ICShipmentItemProductQty;
                }
            }
            return qty;

        }
        public List<ICShipmentItemsInfo> GetItemsByShipmentIDForReceiptTranfer(int shipmentID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetItemsByShipmentIDForReceiptTranfer", shipmentID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }
        public decimal GetQtyInShipmentItemByReceiptReferenceAndOperationIDAndProductID(string receiptReference, int operationID, int productID, int batchProductTransferID, int productTransferID)
        {
            Object obj = dal.GetSingleValue("ICShipmentItems_GetQtyInShipmentItemByReceiptReferenceAndOperationIDAndProductID", receiptReference, operationID, productID, batchProductTransferID, productTransferID);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }
        public List<ICShipmentItemsInfo> GetItemByBatchProductIDForProductReceiptTransfer(int batchProductID, int operationID, int shipmentID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetItemByBatchProductIDForProductReceiptTransfer", batchProductID, operationID, shipmentID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentItemsInfo> GetAllShipmentItemsByICShipmentCompletedAndNotExitsInvoiceItems()
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetAllShipmentItemsByICShipmentCompletedAndNotExitsInvoiceItems");
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public ICShipmentItemsInfo GetShipmentItemAcceptanceProductQty(int shipmentItemID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentItemAcceptanceProductQty", shipmentItemID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objShipmentItemsInfo;
            }
            return null;
        }

        public ICShipmentItemsInfo GetItemForCheckingInvoiceValidQty(int shipmentItemID, int invoiceItemID, int invoiceID)
        {
            return (ICShipmentItemsInfo)dal.GetDataObject("ICShipmentItems_GetItemForCheckingInvoiceValidQty", shipmentItemID, invoiceItemID, invoiceID);
        }

        public List<ICShipmentItemsInfo> GetAllShipmentItemsByDeliveryPlanWorksID(int deliveryPlanWorksID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetAllShipmentItemsByDeliveryPlanWorksID", deliveryPlanWorksID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentItemsInfo> GetAllShipmentItemByShipmentIDAndType(int shipmentD, string shipmentType)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetAllShipmentItemByShipmentIDAndType", shipmentD, shipmentType);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentItemsInfo> GetAllShipmentItemsByTransferItemID(int transferItemID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetAllShipmentItemsByTransferItemID", transferItemID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentItemsInfo> GetAllShipmentItemForRPStampProductsByShipmentID(int shipmentID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetAllShipmentItemForRPStampProductsByShipmentID", shipmentID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentItemsInfo> GetAllShipmentItemForRPDeliveryProductByShipmentID(int shipmentID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetAllShipmentItemForRPDeliveryProductByShipmentID", shipmentID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentItemsInfo> GetAllShipmentItemForRPShipmentWoodByShipmentID(int shipmentID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetAllShipmentItemForRPShipmentWoodByShipmentID", shipmentID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentItemsInfo> GetShipmentItemForAcceptance(int saleOrderID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentItemForAcceptance", saleOrderID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentItemsInfo> GetAllShipmentItemsBylistID(string shipmentRef)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetAllShipmentItemsBylistID", shipmentRef);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentItemsInfo> GetShipmentItemForAssemblyReceipt()
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentItemForAssemblyReceipt");
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentItemsInfo> GetAllShipmentItemsByICShipmentCompletedAndNotExitsInvoiceItemsByIsDelivery()
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetAllShipmentItemsByICShipmentCompletedAndNotExitsInvoiceItemsByIsDelivery");
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentItemsInfo> GetShipmentItemBySaleOrderID(int saleOrderID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentItemBySaleOrderID", saleOrderID, ShipmentType.SaleShipment.ToString());
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentItemsInfo> GetShipmentItemForMaterialReceipt(
                                            int userID,
                                            string moduleName,
                                            string dataViewPermissionType,
                                            int branchID,
                                            int shipmentID,
                                            int workShopID,
                                            int lineID,
                                            DateTime fromDate,
                                            DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentItemForMaterialReceipt",
                                userID,
                                moduleName,
                                dataViewPermissionType,
                                branchID,
                                shipmentID,
                                workShopID,
                                lineID,
                                fromDate,
                                toDate);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentItemsInfo> GetShipmentItemForMaterialReceiptBySomeCriteria(
                                            int userID,
                                            string moduleName,
                                            string dataViewPermissionType,
                                            int branchID,
                                            int shipmentID,
                                            int workShopID,
                                            int lineID,
                                            DateTime fromDate,
                                            DateTime toDate,
                                            int batchProductID,
                                            int departmentID,
                                            int woodType)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentItemForMaterialReceiptBySomeCriteria",
                                userID,
                                moduleName,
                                dataViewPermissionType,
                                branchID,
                                shipmentID,
                                workShopID,
                                lineID,
                                fromDate,
                                toDate,
                                batchProductID,
                                departmentID,
                                woodType);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentItemsInfo> GetCurrentProductIdentifiedEquipmentNo(int productID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetCurrentProductIdentifiedEquipmentNo", productID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public bool IsValidQuantyForBatchShipmentDryLumber(decimal shipmentQty, int allocationPlanItemID, int shipmentItemID)
        {
            return (bool)dal.GetSingleValue("ICShipmentItems_IsValidQuantyForBatchShipmentDryLumber", shipmentQty, allocationPlanItemID, shipmentItemID);
        }

        public bool IsValidQuantyForMaterialReceipt(int shipmentItemID, decimal receiptQty, int receiptItemID)
        {
            return (bool)dal.GetSingleValue("ICShipmentItems_IsValidQuantyForMaterialReceipt", shipmentItemID, receiptQty, receiptItemID);
        }
        public List<ICShipmentItemsInfo> ValidateOperationReceive(int ShipmentID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_ValidateOperationReceive", ShipmentID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }
        public ICShipmentItemsInfo ValidateItemOperationReceive(int normItemID, int operationID, int receiveOperationID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_ValidateItemOperationReceive", normItemID, operationID, receiveOperationID);
            if (ds != null && ds.Tables[0].Rows.Count > 0)
            {
                ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objShipmentItemsInfo;
            }
            return null;
        }
        public ICShipmentItemsInfo ValidateMaterialOperationReceive(int BatchProductID, int BatchProductItem, int normItemID, int operationID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_ValidateMaterialOperationReceive", BatchProductID, BatchProductItem, normItemID, operationID);
            if (ds != null && ds.Tables[0].Rows.Count > 0)
            {
                ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objShipmentItemsInfo;
            }
            return null;
        }
        public List<ICShipmentItemsInfo> ValidateMaterialOperationReceive(int ShipmentID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_ValidateMaterialOperationReceiveByShipment", ShipmentID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentItemsInfo> GetItemForInvalidProductUnitCost(DataTable Type_TreeList)
        {
            DataSet ds = SqlDatabaseHelper.GetDataUsingStringType(Type_TreeList, "Type_TreeList", "ICShipmentItems_GetItemForInvalidProductUnitCost");
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentItemsInfo> GetRemainShipmentItemForInvoice(string shipmentItemIDs, int invoiceID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetRemainShipmentItemForInvoice", shipmentItemIDs, invoiceID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentItemsInfo> GetListInventoryStockSerialNoForShipment(List<ICShipmentItemsInfo> productList)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add(new DataColumn("ProductID", typeof(int)));
            dt.Columns.Add(new DataColumn("StockID", typeof(int)));
            dt.Columns.Add(new DataColumn("ProductQty", typeof(decimal)));
            dt.Columns.Add(new DataColumn("DateGet", typeof(DateTime)));

            foreach (ICShipmentItemsInfo item in productList)
            {
                DataRow r = dt.NewRow();
                r["ProductID"] = item.FK_ICProductID;
                r["StockID"] = item.FK_ICStockID;
                r["ProductQty"] = item.ICShipmentItemProductExchangeQty;
                r["DateGet"] = item.ICShipmentDate;
                dt.Rows.Add(r);
            }
            DataSet ds = SqlDatabaseHelper.GetDataUsingStringType(dt, "Type_GetInventoryStockSerialNos", "ICShipmentItems_GetListInventoryStockSerialNoForShipment");
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentItemsInfo> GetListInventoryStockSerialNoForShipment(List<ARInvoiceItemsInfo> productList)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add(new DataColumn("ProductID", typeof(int)));
            dt.Columns.Add(new DataColumn("StockID", typeof(int)));
            dt.Columns.Add(new DataColumn("ProductQty", typeof(decimal)));
            dt.Columns.Add(new DataColumn("DateGet", typeof(DateTime)));

            foreach (ARInvoiceItemsInfo item in productList)
            {
                DataRow r = dt.NewRow();
                r["ProductID"] = item.FK_ICProductID;
                r["StockID"] = item.FK_ICStockID;
                r["ProductQty"] = item.ARInvoiceItemProductExchangeQty;
                r["DateGet"] = item.ARInvoiceDate;
                dt.Rows.Add(r);
            }
            DataSet ds = SqlDatabaseHelper.GetDataUsingStringType(dt, "Type_GetInventoryStockSerialNos", "ICShipmentItems_GetListInventoryStockSerialNoForShipment");
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentItemsInfo> GetAllShipmentItemForReportByShipmentRef(string shipmentRef)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetAllShipmentItemForReportByShipmentRef", shipmentRef);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICShipmentItemsInfo> GetShipmentSaleOrderItemBySaleOrderID(int saleOrderID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetShipmentSaleOrderItemBySaleOrderID", saleOrderID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICShipmentItemsInfo> GetCompleteSemiReceipt(int ShipmentID)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetCompleteSemiReceipt", ShipmentID);
            return (List<ICShipmentItemsInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}