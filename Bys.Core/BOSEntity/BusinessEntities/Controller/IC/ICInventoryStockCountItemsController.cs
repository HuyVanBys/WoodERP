using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ICInventoryStockCountItems
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ICInventoryStockCountItemsController
    //Created Date:Monday, March 11, 2013
    //-----------------------------------------------------------

    public class ICInventoryStockCountItemsController : BaseBusinessController
    {
        public ICInventoryStockCountItemsController()
        {
            dal = new DALBaseProvider("ICInventoryStockCountItems", typeof(ICInventoryStockCountItemsInfo));
        }
        public DataSet CheckInventoryStockCountItemsByStockID(int stockID)
        {
            return dal.GetDataSet("ICInventoryStockCountItems_GetICInventoryStockCountItemsByStockID",
                           stockID);
        }
        public List<ICInventoryStockCountItemsInfo> GetInventoryStockCountItemsByStockID(int stockID)
        {
            DataSet ds = CheckInventoryStockCountItemsByStockID(stockID);
            return (List<ICInventoryStockCountItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICInventoryStockCountItemsInfo> GetICInventoryStockCountItemsByICInventoryStockCountID(int inventoryStockCountID)
        {
            DataSet ds = dal.GetDataSet("ICInventoryStockCountItems_GetICInventoryStockCountItemsByICInventoryStockCountID", inventoryStockCountID);
            return (List<ICInventoryStockCountItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICInventoryStockCountItemsInfo> GetInventoryStockCountItemsForReportByICInventoryStockCountID(int inventoryStockCountID)
        {
            DataSet ds = dal.GetDataSet("ICInventoryStockCountItems_GetInventoryStockCountItemsForReportByICInventoryStockCountID", inventoryStockCountID);
            List<ICInventoryStockCountItemsInfo> inventoryStockCountItemList = new List<ICInventoryStockCountItemsInfo>();
            ICInventoryStockCountItemsInfo objInventoryStockCountItemsInfo = new ICInventoryStockCountItemsInfo();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    objInventoryStockCountItemsInfo = (ICInventoryStockCountItemsInfo)GetObjectFromDataRow(row);
                    objInventoryStockCountItemsInfo.ICInventoryStockCountItemPositiveValue = objInventoryStockCountItemsInfo.ICInventoryStockCountItemPositiveQty * objInventoryStockCountItemsInfo.ICInventoryStockCountItemProductPrice;
                    objInventoryStockCountItemsInfo.ICInventoryStockCountItemNegativeValue = objInventoryStockCountItemsInfo.ICInventoryStockCountItemNegativeQty * objInventoryStockCountItemsInfo.ICInventoryStockCountItemProductPrice;
                    inventoryStockCountItemList.Add(objInventoryStockCountItemsInfo);
                }
            }
            return inventoryStockCountItemList;
        }

        public List<ICInventoryStockCountItemsInfo> GetInventoryStockCountItemsForReportOverviewByICInventoryStockCountID(int inventoryStockCountID)
        {
            DataSet ds = dal.GetDataSet("ICInventoryStockCountItems_GetInventoryStockCountItemsForReportOverviewByICInventoryStockCountID", inventoryStockCountID);
            List<ICInventoryStockCountItemsInfo> inventoryStockCountItemList = new List<ICInventoryStockCountItemsInfo>();
            ICInventoryStockCountItemsInfo objInventoryStockCountItemsInfo = new ICInventoryStockCountItemsInfo();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    objInventoryStockCountItemsInfo = (ICInventoryStockCountItemsInfo)GetObjectFromDataRow(row);
                    objInventoryStockCountItemsInfo.ICInventoryStockCountItemPositiveValue = objInventoryStockCountItemsInfo.ICInventoryStockCountItemPositiveQty * objInventoryStockCountItemsInfo.ICInventoryStockCountItemProductPrice;
                    objInventoryStockCountItemsInfo.ICInventoryStockCountItemNegativeValue = objInventoryStockCountItemsInfo.ICInventoryStockCountItemNegativeQty * objInventoryStockCountItemsInfo.ICInventoryStockCountItemProductPrice;
                    inventoryStockCountItemList.Add(objInventoryStockCountItemsInfo);
                }
            }
            return inventoryStockCountItemList;
        }


        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ICInventoryStockCountItemsInfo> inventoryStockCountItems = new List<ICInventoryStockCountItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICInventoryStockCountItemsInfo objinventoryStockCountItemsInfo = (ICInventoryStockCountItemsInfo)GetObjectFromDataRow(row);
                    inventoryStockCountItems.Add(objinventoryStockCountItemsInfo);
                }
            }
            ds.Dispose();
            return inventoryStockCountItems;
        }

        /// <summary>
        /// Get Inventory Stock Count Items Active In Stock
        /// </summary>
        /// <param name="branchID">Branch Id</param>
        /// <param name="stockID">Stock Id</param>
        /// <param name="departmentID">Department Id</param>
        /// <param name="productGroupID">Product Group Id</param>
        /// <returns></returns>
        public List<ICInventoryStockCountItemsInfo> GetInventoryStockCountItemsActiveInStock(int? branchID, int? stockID, int? productGroupID)
        {
            DataSet ds = dal.GetDataSet("ICInventoryStockCountItems_GetICInventoryStockCountItemsActiveInStock", branchID, stockID, productGroupID);
            List<ICInventoryStockCountItemsInfo> inventoryStockCountItemList = new List<ICInventoryStockCountItemsInfo>();
            ICInventoryStockCountItemsController objInventoryStockCountItemsController = new ICInventoryStockCountItemsController();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ICInventoryStockCountItemsInfo objInventoryStockCountItemsInfo = new ICInventoryStockCountItemsInfo();
                    objInventoryStockCountItemsInfo = (ICInventoryStockCountItemsInfo)objInventoryStockCountItemsController.GetObjectFromDataRow(dr);
                    objInventoryStockCountItemsInfo.ICInventoryStockCountItemQuantityVariance = objInventoryStockCountItemsInfo.ICInventoryStockCountItemQuantity - objInventoryStockCountItemsInfo.ICInventoryStockCountItemActualQuantity;
                    inventoryStockCountItemList.Add(objInventoryStockCountItemsInfo);
                }
            }
            return inventoryStockCountItemList;

        }
        /// <summary>
        /// Get Inventory Stock Count Items Active In Stock
        /// </summary>
        /// <param name="branchID">Branch Id</param>
        /// <param name="stockID">Stock Id</param>
        /// <param name="departmentID">Department Id</param>
        /// <param name="productGroupID">Product Group Id</param>
        /// <param name="departmentID">FK_DepartmentID </param>
        /// <returns></returns>
        /// 
        public List<ICInventoryStockCountItemsInfo> GetInventoryForStockCount(int? branchID, int? stockID, string productGroupID, int? departmentID, string type, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICInventoryStockCountItems_GetICInventoryStockCountItemsActiveInStockAndDepartment", branchID, stockID, productGroupID, departmentID, type, toDate);
            return (List<ICInventoryStockCountItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICInventoryStockCountItemsInfo> GetInventoryStockCountItemForPrintQRCode(int stockCountID)
        {
            DataSet ds = dal.GetDataSet("ICInventoryStockCountItems_GetInventoryStockCountItemForPrintQRCode", stockCountID);
            return (List<ICInventoryStockCountItemsInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}