using BOSCommon;
using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ICReceipts
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ICReceiptsController
    //Created Date:Saturday, May 31, 2008
    //-----------------------------------------------------------

    public class ICReceiptsController : BaseBusinessController
    {
        public ICReceiptsController()
        {
            dal = new DALBaseProvider("ICReceipts", typeof(ICReceiptsInfo));
        }
        public DataSet GetAllReceiptsForLookupControl()
        {

            DataSet ds = dal.GetDataSet("ICReceipts_GetAllReceiptsForLookupControl");
            return ds;
        }
        /// <summary>
        /// Get the list of receipts based on some criteria
        /// </summary>
        /// <param name="supplierID">Supplier ID</param>
        /// <param name="receiptType">Receipt type</param>
        /// <param name="dateFrom">Date which the result is searched from</param>
        /// <param name="dateTo">Date which the result is searched to</param>
        /// <returns>List of receipts</returns>
        public DataSet GetReceiptList(
                                    string receiptNo,
                                    int? objectID,
                                    string objectType,
                                    int? stockID,
                                    int? employeeID,
                                    string receiptType,
                                    DateTime? fromDate,
                                    DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetReceiptList", receiptNo, objectID, objectType, stockID, employeeID, receiptType, fromDate, toDate);
            return ds;
        }



        /// <summary>
        /// Get the list of receipts based on some criteria
        /// </summary>
        /// <param name="supplierID">Supplier ID</param>
        /// <param name="receiptType">Receipt type</param>
        /// <param name="dateFrom">Date which the result is searched from</param>
        /// <param name="dateTo">Date which the result is searched to</param>
        /// <returns>List of receipts</returns>
        public DataSet GetReceiptCDList(
                                    string receiptNo,
                                    int? objectID,
                                    string objectType,
                                    int? stockID,
                                    int? employeeID,
                                    string receiptType,
                                    DateTime? fromDate,
                                    DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetReceiptList_ReceiptCD", receiptNo, objectID, objectType, stockID, employeeID, receiptType, fromDate, toDate);
            return ds;
        }

        public DataSet GetDataSet(
                                    string receiptNo,
                                    int? batchProductID,
                                    int? stockID,
                                    int? FK_ICProductAttributeTTMTID,
                                    int? employeeID,
                                    string receiptType,
                                    DateTime? fromDate,
                                    DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetDataSet", receiptNo, batchProductID, stockID, FK_ICProductAttributeTTMTID, employeeID, receiptType, fromDate, toDate);
            return ds;
        }

        /// <summary>
        /// Get the list of receipts based on some criteria
        /// </summary>
        /// <param name="supplierID">Supplier ID</param>
        /// <param name="dateFrom">Date which the result is searched from</param>
        /// <param name="dateTo">Date which the result is searched to</param>
        /// <returns>List of receipts</returns>
        public List<ICReceiptsInfo> GetReceiptList(int? supplierID, DateTime? dateFrom, DateTime? dateTo)
        {
            DataSet ds = GetReceiptList(null, supplierID, ObjectType.Supplier.ToString(), null, null, null, dateFrom, dateTo);
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get receipt by receipt reference
        /// </summary>
        /// <param name="reference"></param>
        /// <returns></returns>
        public ICReceiptsInfo GetReceiptByReceiptReference(string reference)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetReceiptByReceiptReference", reference);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objReceiptsInfo;
            }
            return null;
        }

        /// <summary>
        /// Get receipts for fee payment
        /// </summary>
        /// <returns>List of receipts</returns>
        public List<ICReceiptsInfo> GetReceiptsForFeePayment()
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetReceiptsForFeePayment");
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get receipts for fee payment by user's permission
        /// </summary>
        /// <returns>List of receipts</returns>
        public List<ICReceiptsInfo> GetReceiptsForFeePaymentByUserPermission(string invoicInIDs, int userID, string moduleName, string dataViewPermissionType)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetReceiptsForFeePaymentByUserPermission", invoicInIDs, userID, moduleName, dataViewPermissionType);
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }

        public List<ICReceiptsInfo> GetDryLumberReceiptsForFeePayment()
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetDryLumberReceiptsForFeePayment");
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }

        public List<ICReceiptsInfo> GetHeatReceiptsForFeePayment()
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetHeatReceiptsForFeePayment");
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get receipts for transferring
        /// </summary>
        /// <returns>List of receipts</returns>
        public List<ICReceiptsInfo> GetReceiptsForTransferring()
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetReceiptsForTransferring");
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get return receipts by date
        /// </summary>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns>List of receipts</returns>
        public List<ICReceiptsInfo> GetReturnReceiptsByDate(DateTime fromDate, DateTime toDate)
        {
            DataSet ds = GetReceiptList(null, null, null, null, null, ReceiptType.ReturnReceipt.ToString(), fromDate, toDate);
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ICReceiptsInfo> receipts = new List<ICReceiptsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)GetObjectFromDataRow(row);
                    receipts.Add(objReceiptsInfo);
                }
            }
            ds.Dispose();
            return receipts;
        }

        /// <summary>
        /// Get receipts for broadcasting to a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <returns>List of broadcasted receipts</returns>
        public List<ICReceiptsInfo> GetReceiptsForBroadcasting(int branchID)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetReceiptsForBroadcasting", branchID);
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }

        public DataSet GetEquipmentReceiptListByListOfBranchID(string receiptNo,
                                              string receiptInvoiceInNo,
                                              int? supplierID,
                                              int? employeeID,
                                              string receiptType,
                                              DateTime? fromDate,
                                              DateTime? toDate,
                                                   List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetEquipmentReceiptList(receiptNo, receiptInvoiceInNo, supplierID, ojbBranchsInfo.BRBranchID, employeeID, receiptType, fromDate, toDate);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public DataSet GetEquipmentReceiptList(
                                               string receiptNo,
                                               string receiptInvoiceInNo,
                                               int? supplierID,
                                               int? branchID,
                                               int? employeeID,
                                               string receiptType,
                                               DateTime? fromDate,
                                               DateTime? toDate
                                               )
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetEquipmentReceiptList", receiptNo, receiptInvoiceInNo, supplierID, branchID, employeeID, receiptType, fromDate, toDate);
            return ds;
        }

        public DataSet GetPurchaseReceiptListByListOfBranchID(string receiptNo,
                                              int? supplierID,
                                              int? stockID,
                                              int? employeeID,
                                              string receiptType,
                                              DateTime? fromDate,
                                              DateTime? toDate,
                                              List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            List<int> collections = new List<int>();
            int rowIndex = 0;
            DataRow row;
            DataRowCollection rows;
            bool isValid = true;
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetPurchaseReceiptList(receiptNo, supplierID, stockID, ojbBranchsInfo.BRBranchID, employeeID, receiptType, fromDate, toDate);

                if (ds != null && ds.Tables.Count != 0 && ds.Tables[0].Rows.Count != 0)
                {
                    rowIndex = 0;
                    rows = ds.Tables[0].Rows;
                    isValid = true;
                    while (isValid)
                    {
                        row = rows[rowIndex];
                        int id = row["ICReceiptID"] is DBNull ? -1 : Convert.ToInt32(row["ICReceiptID"].ToString());
                        if (id != -1 && !collections.Contains(id))
                        {
                            collections.Add(id);
                            rowIndex++;
                        }
                        else
                        {
                            rows.Remove(row);
                        }
                        if (rows.Count == 0 || rows.Count == rowIndex)
                            isValid = false;
                    }
                }
                rtn.Merge(ds);
            }
            if (rtn.Tables.Count != 0)
            {
                DataView dataView = rtn.Tables[0].DefaultView;
                dataView.Sort = "ICReceiptDate, ICReceiptNo ASC";
            }
            return rtn;
        }

        public DataSet GetPurchaseReceiptList(
                                              string receiptNo,
                                              int? supplierID,
                                              int? stockID,
                                              int? branchID,
                                              int? employeeID,
                                              string receiptType,
                                              DateTime? fromDate,
                                              DateTime? toDate
                                              )
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetPurchaseReceiptList", receiptNo, supplierID, stockID, branchID, employeeID, receiptType, fromDate, toDate);
            return ds;
        }
        public DataSet GetMaterialPurchaseReceiptListByListOfBranchID(string receiptNo,
                                             int? supplierID,
                                             int? stockID,
                                             int? employeeID,
                                             string receiptType,
                                             string receiptreceiptType,
                                             DateTime? fromDate,
                                             DateTime? toDate,
                                             List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            List<int> collections = new List<int>();
            int rowIndex = 0;
            DataRow row;
            DataRowCollection rows;
            bool isValid = true;
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetMaterialPurchaseReceiptList(receiptNo, supplierID, stockID, ojbBranchsInfo.BRBranchID, employeeID, receiptType, receiptreceiptType, fromDate, toDate);

                if (ds != null && ds.Tables.Count != 0 && ds.Tables[0].Rows.Count != 0)
                {
                    rowIndex = 0;
                    rows = ds.Tables[0].Rows;
                    isValid = true;
                    while (isValid)
                    {
                        row = rows[rowIndex];
                        int id = row["ICReceiptID"] is DBNull ? -1 : Convert.ToInt32(row["ICReceiptID"].ToString());
                        if (id != -1 && !collections.Contains(id))
                        {
                            collections.Add(id);
                            rowIndex++;
                        }
                        else
                        {
                            rows.Remove(row);
                        }
                        if (rows.Count == 0 || rows.Count == rowIndex)
                            isValid = false;
                    }
                }
                rtn.Merge(ds);
            }
            if (rtn.Tables.Count != 0)
            {
                //DataView dataView = rtn.Tables[0].DefaultView;
                //dataView.Sort = "ICReceiptDate, ICReceiptNo ASC";
            }
            return rtn;
        }
        public DataSet GetMaterialPurchaseReceiptList(
                                           string receiptNo,
                                           int? supplierID,
                                           int? stockID,
                                           int? branchID,
                                           int? employeeID,
                                           string receiptType,
                                           string receiptreceiptType,
                                           DateTime? fromDate,
                                           DateTime? toDate
                                           )
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetMaterialPurchaseReceiptList", receiptNo, supplierID, stockID, branchID, employeeID, receiptType, receiptreceiptType, fromDate, toDate);
            return ds;
        }
        public DataSet GetMaterialPurchaseReceiptListByListOfBranchIDForPurchaseReceipt(string receiptNo,
                                             int? acObjectID,
                                             string acObjectType,
                                             int? stockID,
                                             int? employeeID,
                                             string receiptType,
                                             string receiptreceiptType,
                                             DateTime? fromDate,
                                             DateTime? toDate,
                                             List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            List<int> collections = new List<int>();
            int rowIndex = 0;
            DataRow row;
            DataRowCollection rows;
            bool isValid = true;
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetMaterialPurchaseReceiptListForPurchaseReceipt(receiptNo, acObjectID, acObjectType, stockID, ojbBranchsInfo.BRBranchID, employeeID, receiptType, receiptreceiptType, fromDate, toDate);

                if (ds != null && ds.Tables.Count != 0 && ds.Tables[0].Rows.Count != 0)
                {
                    rowIndex = 0;
                    rows = ds.Tables[0].Rows;
                    isValid = true;
                    while (isValid)
                    {
                        row = rows[rowIndex];
                        int id = row["ICReceiptID"] is DBNull ? -1 : Convert.ToInt32(row["ICReceiptID"].ToString());
                        if (id != -1 && !collections.Contains(id))
                        {
                            collections.Add(id);
                            rowIndex++;
                        }
                        else
                        {
                            rows.Remove(row);
                        }
                        if (rows.Count == 0 || rows.Count == rowIndex)
                            isValid = false;
                    }
                }
                rtn.Merge(ds);
            }
            if (rtn.Tables.Count != 0)
            {
                //DataView dataView = rtn.Tables[0].DefaultView;
                //dataView.Sort = "ICReceiptDate, ICReceiptNo ASC";
            }
            return rtn;
        }

        public DataSet GetMaterialPurchaseReceiptListForPurchaseReceipt(
                                          string receiptNo,
                                          int? acObjectID,
                                          string acObjectType,
                                          int? stockID,
                                          int? branchID,
                                          int? employeeID,
                                          string receiptType,
                                          string receiptreceiptType,
                                          DateTime? fromDate,
                                          DateTime? toDate
                                          )
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetMaterialPurchaseReceiptListForPurchaseReceipt", receiptNo, acObjectID, acObjectType, stockID, branchID, employeeID, receiptType, receiptreceiptType, fromDate, toDate);
            return ds;
        }
        /// <summary>
        /// Get the list of receipts based on some criteria by branch
        /// </summary>
        /// <param name="receiptNo">receiptNo</param>
        /// <param name="objectID">objectID</param>
        /// <param name="objectType">objectType</param>
        /// <param name="stockID">stockID</param>
        /// <param name="employeeID">employeeID</param>
        /// <param name="receiptType">receiptType</param>
        /// <param name="fromDate">Date which the result is searched from</param>
        /// <param name="toDate">Date which the result is searched to</param>
        /// <param name="branchID">branchID</param>
        /// <param name="branchList">branchList</param>
        /// <returns>List of receipts</returns>
        public DataSet GetReceiptListOtherAndReturnByListOfBranchID(
                                                    string receiptNo,
                                                    int? objectID,
                                                    string objectType,
                                                    int? stockID,
                                                    int? employeeID,
                                                    string receiptType,
                                                    DateTime? fromDate,
                                                    DateTime? toDate,
                                                    int? branchID,
                                                    List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetReceiptListOtherAndReturnByBranchID(receiptNo, objectID, objectType, stockID, employeeID, receiptType, fromDate, toDate, ojbBranchsInfo.BRBranchID);
                rtn.Merge(ds);
            }

            return rtn;
        }
        public DataSet GetSemiProductReceiptListOtherAndReturnByListOfBranchID(
                                                    string receiptNo,
                                                    int? objectID,
                                                    string objectType,
                                                    int? stockID,
                                                    int? employeeID,

                                                    DateTime? fromDate,
                                                    DateTime? toDate,
                                                    int? branchID,
                                                    List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetSemiProductReceiptListOtherAndReturnByBranchID(receiptNo, objectID, objectType, stockID, employeeID, fromDate, toDate, ojbBranchsInfo.BRBranchID);
                rtn.Merge(ds);
            }

            return rtn;
        }

        /// <summary>
        /// Get the list of receipts based on some criteria by branch
        /// </summary>
        /// <param name="receiptNo">receiptNo</param>
        /// <param name="objectID">objectID</param>
        /// <param name="objectType">objectType</param>
        /// <param name="stockID">stockID</param>
        /// <param name="employeeID">employeeID</param>
        /// <param name="receiptType">receiptType</param>
        /// <param name="fromDate">Date which the result is searched from</param>
        /// <param name="toDate">Date which the result is searched to</param>
        /// <param name="branchID"></param>
        /// <returns>List of receipts</returns>
        public DataSet GetReceiptListOtherAndReturnByBranchID(
                                                            string receiptNo,
                                                            int? objectID,
                                                            string objectType,
                                                            int? stockID,
                                                            int? employeeID,
                                                            string receiptType,
                                                            DateTime? fromDate,
                                                            DateTime? toDate,
                                                            int? branchID)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetReceiptListOtherAndReturnByBranchID", receiptNo, objectID, objectType, stockID, employeeID, receiptType, fromDate, toDate, branchID);
            return ds;
        }

        public DataSet GetSemiProductReceiptListOtherAndReturnByBranchID(
                                                           string receiptNo,
                                                           int? objectID,
                                                           string objectType,
                                                           int? stockID,
                                                           int? employeeID,
                                                           DateTime? fromDate,
                                                           DateTime? toDate,
                                                           int? branchID)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetSemiProductReceiptListOtherAndReturnByBranchID", receiptNo, objectID, objectType, stockID, employeeID, fromDate, toDate, branchID);
            return ds;
        }


        public List<ICReceiptsInfo> GetReceiptByBatchProductIDAndProductID(int batchProductID, int productID)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetReceiptByBatchProductIDAndProductID", batchProductID, productID);
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }

        public List<ICReceiptsInfo> GetReceiptByReceiptType(string receiptType)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetReceiptByReceiptType", receiptType);
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }

        public List<ICReceiptsInfo> GetSemiProductReceipt()
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetSemiProductReceipt");
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }

        public List<ICReceiptsInfo> GetReceiptByReceiptTypeAndStatus(string receiptType)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetReceiptByReceiptType_andStatus", receiptType);
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }
        public List<ICReceiptsInfo> GetAllDataByPurchaseOrderID(int PurchaseOrderID)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetAllDataByPurchaseOrderID", PurchaseOrderID);
            List<ICReceiptsInfo> receipts = new List<ICReceiptsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptsInfo objReceiptItemsInfo = (ICReceiptsInfo)GetObjectFromDataRow(row);
                    receipts.Add(objReceiptItemsInfo);
                }
            }
            return receipts;
        }

        public string GetObjectByReference(string reference, int id)
        {

            string Packno = (string)dal.GetSingleValue("ICReceipts_GetObjectByReference", reference, id);
            return Packno;
        }

        public List<ICReceiptsInfo> GetReceiptsForInvoicing()
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetReceiptItemsForInvoicing");
            List<ICReceiptsInfo> receiptItems = new List<ICReceiptsInfo>();
            ICReceiptsInfo obj;
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    obj = (ICReceiptsInfo)GetObjectFromDataRow(row);
                    receiptItems.Add(obj);
                }
            }
            return receiptItems;
        }

        public List<ICReceiptsInfo> GetReceiptsByReceiptID(int receiptID)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetReceiptsByReceiptID", receiptID);
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }

        public List<ICReceiptsInfo> GetReceiptsListForUpdate()
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetReceiptsListForUpdate");
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }

        public void DeleteSemiProductReceipt(int receiptID)
        {
            dal.ExecuteStoredProcedure("ICReceipts_DeleteSemiProductReceipt", receiptID);

        }

        public List<ICReceiptsInfo> GetReceiptListByReceiptType(string receiptType)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetReceiptListByReceiptType", receiptType);
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }
        public List<ICReceiptsInfo> GetListResultForEdit()
        {
            DataSet ds = dal.GetDataSet("ICReceipt_GetListResultForEdit");
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }
        public List<ICReceiptsInfo> GetLotNoFromShipmentRoundWood()
        {
            List<ICReceiptsInfo> temp = new List<ICReceiptsInfo>();
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetLotNoFromShipmentRoundWood");
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptsInfo objShipmentItemsInfo = (ICReceiptsInfo)GetObjectFromDataRow(row);
                    temp.Add(objShipmentItemsInfo);
                }
            }
            return temp;

        }
        public List<ICReceiptsInfo> GetPackNoForReport144()
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetPackNoForReport144");
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }
        public int GetSupplierByLotNo(string Lotno)
        {
            int SupplierID = 0;
            DataSet ds = dal.GetDataSet("ICReceipts_GetSupplierByLotNo", Lotno);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                if (objReceiptsInfo != null)
                {
                    SupplierID = objReceiptsInfo.FK_APSupplierID;
                }
            }
            return SupplierID;
        }
        public List<ICReceiptsInfo> GetListReceiptForShipmentCD(string Acceptance)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetListReceiptForShipmentCD", Acceptance);
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }
        public ICReceiptsInfo GetPurchaseReceiptByReceiptReference(string reference)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetPurchaseReceiptByReceiptReference", reference);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ICReceiptsInfo objReceiptsInfo = (ICReceiptsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objReceiptsInfo;
            }
            return null;
        }
        public List<ICReceiptsInfo> GetReceiptCDForReport159(DateTime FromDate, DateTime ToDate, string PackNo, string SerieNo)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetReceiptCDForReport159", FromDate, ToDate, PackNo, SerieNo);
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }

        public void UpdateReferenceDocumentByFeePayment(int receiptID)
        {
            dal.ExecuteStoredProcedure("ICReceipts_UpdateReferenceDocumentByFeePayment", receiptID);
        }

        /// <summary>
        /// Get the list of receipts based on some criteria
        /// </summary>
        /// <param name="supplierID">Supplier ID</param>
        /// <param name="receiptType">Receipt type</param>
        /// <param name="dateFrom">Date which the result is searched from</param>
        /// <param name="dateTo">Date which the result is searched to</param>
        /// <returns>List of receipts</returns>
        public DataSet GetReceiptListForBatchReceiptDryLumberModule(
                                    string receiptNo,
                                    int? objectID,
                                    string objectType,
                                    int? stockID,
                                    int? employeeID,
                                    DateTime? fromDate,
                                    DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetReceiptListForBatchReceiptDryLumberModule", receiptNo, objectID, objectType, stockID, employeeID, fromDate, toDate);
            return ds;
        }

        public DataSet GetReceiptListForMaterialReceiptModule(
                                        string receiptNo,
                                        int? batchProductID,
                                        int? stockID,
                                        int? FK_ICProductAttributeTTMTID,
                                        int? employeeID,
                                        DateTime? fromDate,
                                        DateTime? toDate,
                                        int branchID)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetReceiptListForMaterialReceiptModule", receiptNo, batchProductID, stockID, FK_ICProductAttributeTTMTID, employeeID, fromDate, toDate, branchID);
            return ds;
        }

        public DataSet GetReceiptListForMaterialReceiptModuleOfBranchList(
                                       string receiptNo,
                                       int? batchProductID,
                                       int? stockID,
                                       int? FK_ICProductAttributeTTMTID,
                                       int? employeeID,
                                       DateTime? fromDate,
                                       DateTime? toDate,
                                       List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetReceiptListForMaterialReceiptModule(receiptNo, batchProductID, stockID, FK_ICProductAttributeTTMTID, employeeID, fromDate, toDate, ojbBranchsInfo.BRBranchID);
                rtn.Merge(ds);
            }
            return rtn;
        }


        public DataSet GetWoodPurchaseReceiptListForPurchaseReceipt(
                                          string receiptNo,
                                          int? acObjectID,
                                          string acObjectType,
                                          int? stockID,
                                          int? branchID,
                                          int? employeeID,
                                          string receiptType,
                                          DateTime? fromDate,
                                          DateTime? toDate
                                          )
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetWoodPurchaseReceiptListForPurchaseReceipt", receiptNo, acObjectID, acObjectType, stockID, branchID, employeeID, receiptType, fromDate, toDate);
            return ds;
        }

        public DataSet GetWoodPurchaseReceiptListForPurchaseReceiptByListOfBranchID(string receiptNo,
                                             int? acObjectID,
                                             string acObjectType,
                                             int? stockID,
                                             int? employeeID,
                                             string receiptType,
                                             DateTime? fromDate,
                                             DateTime? toDate,
                                             List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            List<int> collections = new List<int>();
            int rowIndex = 0;
            DataRow row;
            DataRowCollection rows;
            bool isValid = true;
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetWoodPurchaseReceiptListForPurchaseReceipt(receiptNo, acObjectID, acObjectType, stockID, ojbBranchsInfo.BRBranchID, employeeID, receiptType, fromDate, toDate);

                if (ds != null && ds.Tables.Count != 0 && ds.Tables[0].Rows.Count != 0)
                {
                    rowIndex = 0;
                    rows = ds.Tables[0].Rows;
                    isValid = true;
                    while (isValid)
                    {
                        row = rows[rowIndex];
                        int id = row["ICReceiptID"] is DBNull ? -1 : Convert.ToInt32(row["ICReceiptID"].ToString());
                        if (id != -1 && !collections.Contains(id))
                        {
                            collections.Add(id);
                            rowIndex++;
                        }
                        else
                        {
                            rows.Remove(row);
                        }
                        if (rows.Count == 0 || rows.Count == rowIndex)
                            isValid = false;
                    }
                }
                rtn.Merge(ds);
            }
            if (rtn.Tables.Count != 0)
            {
                //DataView dataView = rtn.Tables[0].DefaultView;
                //dataView.Sort = "ICReceiptDate, ICReceiptNo ASC";
            }
            return rtn;
        }
        public decimal GetQtySemiproductByBatchProductIDAndOperationID(int batchProductID, int operationID, DateTime dateCT)
        {
            Object obj = dal.GetSingleValue("ICReceiptItems_GetQtySemiproductByBatchProductIDAndOperationID", batchProductID, operationID, dateCT);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }

        public List<ICReceiptsInfo> GetInvoiceInternalReceiptsForFeePaymentByUserPermission(int userID, string moduleName, string dataViewPermissionType)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetInvoiceInternalReceiptsForFeePaymentByUserPermission", userID, moduleName, dataViewPermissionType);
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }

        public List<ICReceiptsInfo> GetReceiptForAllocateCost(DateTime FromDate, DateTime ToDate, int userID, string moduleName, string dataViewPermissionType, int objectID, string objectType)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetReceiptForAllocateCost", FromDate, ToDate, userID, moduleName, dataViewPermissionType, objectID, objectType);
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }

        public List<ICReceiptsInfo> GetReceiptForInvoicing()
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetReceiptForInvoicing");
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }

        public DataSet GetReturnShippingListByBranchID(string returnShippingNo,
                                                   string returnShippingName,
                                                   int? employeeID,
                                                   DateTime? returnShippingDateFrom,
                                                   DateTime? returnShippingDateTo,
                                                   int? branchID)
        {
            return dal.GetDataSet("ICReceipts_GetReturnShippingListByListOfBranchID", returnShippingNo, returnShippingName, employeeID, returnShippingDateFrom, returnShippingDateTo, branchID);
        }

        public List<ICReceiptsInfo> GetOutSourcingReceiptForAllocateCost(DateTime FromDate, DateTime ToDate, int purchaseOrderID)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetOutSourcingReceiptForAllocateCost", FromDate, ToDate, purchaseOrderID);
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }

        public List<ICReceiptsInfo> GetALlReturnShippingForSaleOrder()
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetALlReturnShippingForSaleOrder");
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }

        public bool IsValidInOrderToCancelCompleteSemiProductReceipt(int receiptID)
        {
            return (bool)dal.GetSingleValue("ICReceipts_IsValidInOrderToCancelCompleteSemiProductReceipt", receiptID);
        }

        public decimal CheckReceiptProportionByPurchaseOrderID(int purchaseOrderID, int receiptID)
        {
            return (decimal)dal.GetSingleValue("ICReceipts_CheckReceiptProportionByPurchaseOrderID", purchaseOrderID, receiptID);
        }

        public void UpdateReferencesReceiptAndItemByInvoiceInID(int invoiceID)
        {
            dal.ExecuteStoredProcedure("ICReceipts_UpdateReferencesReceiptAndItemByInvoiceInID", invoiceID);
        }

        public List<ICReceiptsInfo> GetReceiptCompleteDataSource(string receiptTypeRef)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetReceiptCompleteDataSource", receiptTypeRef);
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }
        public void UpdateReceiptQtyPurchaseOrderAndInvoiceIn(int ReceiptID, string userName)
        {
            dal.ExecuteStoredProcedure("ICReceipts_UpdateReceiptQtyPurchaseOrderAndInvoiceIn", ReceiptID, userName);
        }

        public void RollbackReferencesReceiptAndItemByInvoiceInID(int invoiceID)
        {
            dal.ExecuteStoredProcedure("ICReceipts_RollbackReferencesReceiptAndItemByInvoiceInID", invoiceID);
        }

        public ICReceiptsInfo GetReceiptPackNoByBatchProduct(int batchProductID)
        {
            return (ICReceiptsInfo)dal.GetDataObject("ICReceipts_GetReceiptPackNoByBatchProduct", batchProductID);
        }

        public void UpdateReferenceDocumentByReturnShippingID(int receiptID)
        {
            dal.ExecuteStoredProcedure("ICReceipts_UpdateReferenceDocumentByReturnShippingID", receiptID);
        }
        public List<ICReceiptsInfo> GetSemiProductReceiptByNorm(int normID)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetSemiProductReceiptByNorm", normID);
            return (List<ICReceiptsInfo>)GetListFromDataSet(ds);
        }
    }

    #endregion
}