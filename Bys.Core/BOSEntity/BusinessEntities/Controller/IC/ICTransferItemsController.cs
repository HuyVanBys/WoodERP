using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ICTransferItems
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ICTransferItemsController
    //Created Date:Thursday, June 19, 2008
    //-----------------------------------------------------------

    public class ICTransferItemsController : BaseBusinessController
    {
        public ICTransferItemsController()
        {
            dal = new DALBaseProvider("ICTransferItems", typeof(ICTransferItemsInfo));
        }

        public DataSet GetTransferItemsByProductIDAndProductSerialNo(int iProductID, String strProductSerialNo)
        {
            return dal.GetDataSet("ICTransferItems_SelectByProductIDAndProductSerialNo", iProductID, strProductSerialNo);
        }

        public ICTransferItemsInfo GetTransferItemByProductIDAndProductSerialNo(int iProductID, String strProductSerialNo)
        {
            return (ICTransferItemsInfo)dal.GetDataObject("ICTransferItems_SelectByProductIDAndProductSerialNo", iProductID, strProductSerialNo);
        }

        public DataSet GetNotCompleteTransferItems()
        {
            return dal.GetDataSet("ICTransferItems_SelectNotCompleteTransferItems");
        }

        public DataSet GetTransferItemsByProductSerialNo(String strProductSerialNo)
        {
            return dal.GetDataSet("ICTransferItems_SelectByProductSerialNo", strProductSerialNo);
        }

        public ICTransferItemsInfo GetTransferItemByProductSerialNo(String strProductSerialNo)
        {
            return (ICTransferItemsInfo)dal.GetDataObject("ICTransferItems_SelectByProductSerialNo", strProductSerialNo);
        }

        public DataSet GetTransferItemsByProductID(int iProductID)
        {
            return dal.GetDataSet("ICTransferItems_SelectByProductID", iProductID);
        }

        public ICTransferItemsInfo GetTransferItemByProductID(int iProductID)
        {
            return (ICTransferItemsInfo)dal.GetDataObject("ICTransferItems_SelectByProductID", iProductID);
        }

        public DataSet GetTransferItemsByProductSerialNoAndStockID(String strProductSerialNo, int iStockID)
        {
            DataSet ds = GetTransferItemsByProductSerialNo(strProductSerialNo);
            if (ds.Tables.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    ICTransferItemsInfo objTransferItemsInfo = (ICTransferItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[i]);
                    if (objTransferItemsInfo != null)
                        if (objTransferItemsInfo.FK_ICFromStockID != iStockID)
                        {
                            ds.Tables[0].Rows.RemoveAt(i);
                            i--;
                        }
                }
            }
            return ds;
        }

        public ICTransferItemsInfo GetTransferItemByProductSerialNoAndStockID(String strProductSerialNo, int iStockID)
        {
            DataSet ds = GetTransferItemsByProductSerialNoAndStockID(strProductSerialNo, iStockID);
            if (ds.Tables.Count > 0)
                return (ICTransferItemsInfo)dal.GetSingleObject(ds.Tables[0]);
            return null;
        }

        public DataSet GetTransferItemsByProductIDAndStockID(int iProductID, int iStockID)
        {
            DataSet ds = GetTransferItemsByProductID(iProductID);
            if (ds.Tables.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    ICTransferItemsInfo objTransferItemsInfo = (ICTransferItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[i]);
                    if (objTransferItemsInfo != null)
                        if (objTransferItemsInfo.FK_ICFromStockID != iStockID)
                        {
                            ds.Tables[0].Rows.RemoveAt(i);
                            i--;
                        }
                }
            }
            return ds;
        }

        public ICTransferItemsInfo GetTransferItemByProductIDAndStockID(int iProductID, int iStockID)
        {
            DataSet ds = GetTransferItemsByProductIDAndStockID(iProductID, iStockID);
            if (ds.Tables.Count > 0)
                return (ICTransferItemsInfo)dal.GetSingleObject(ds.Tables[0]);
            return null;
        }

        /// <summary>
        /// Get transfer item list including the item's components of an transfer
        /// </summary>
        /// <param name="transferID">Transfer id</param>
        /// <returns>List of transfer items</returns>
        public List<ICTransferItemsInfo> GetComponentItemsByTransferID(int transferID)
        {
            DataSet ds = dal.GetDataSet("ICTransferItems_GetComponentItemsByTransferID", transferID);
            List<ICTransferItemsInfo> transferItems = new List<ICTransferItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICTransferItemsInfo objTransferItemsInfo = (ICTransferItemsInfo)GetObjectFromDataRow(row);
                    transferItems.Add(objTransferItemsInfo);
                }
            }
            return transferItems;
        }

        /// <summary>
        /// Get packages associated with a transfer item
        /// </summary>
        /// <param name="transferItemID">Transfer item id</param>
        /// <returns>List of packages</returns>
        public List<ICPackagesInfo> GetPackagesByTransferItemID(int transferItemID)
        {
            DataSet ds = dal.GetDataSet("ICTransferItems_GetPackagesByTransferItemID", transferItemID);
            List<ICPackagesInfo> packages = new List<ICPackagesInfo>();
            if (ds.Tables.Count > 0)
            {
                ICPackagesController objPackagesController = new ICPackagesController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICPackagesInfo objPackagesInfo = (ICPackagesInfo)objPackagesController.GetObjectFromDataRow(row);
                    packages.Add(objPackagesInfo);
                }
            }
            return packages;
        }

        /// <summary>
        /// Get all items of a transfer
        /// </summary>
        /// <param name="transferID">Transfer id</param>
        /// <returns>List of transfer items</returns>
        public List<ICTransferItemsInfo> GetTransferItemsByTransferID(int transferID)
        {
            DataSet ds = dal.GetDataSet("ICTransferItems_GetTransferItemsByTransferID", transferID);
            List<ICTransferItemsInfo> transferItems = new List<ICTransferItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICTransferItemsInfo objTransferItemsInfo = (ICTransferItemsInfo)GetObjectFromDataRow(row);
                    transferItems.Add(objTransferItemsInfo);
                }
            }
            return transferItems;
        }


        public List<ICTransferItemsInfo> GetTransferItemsFormShipmentConstruction()
        {
            DataSet ds = dal.GetDataSet("ICTransfers_GetTransferItemsFormShipmentConstruction");
            return (List<ICTransferItemsInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ICTransferItemsInfo> transferItemList = new List<ICTransferItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICTransferItemsInfo objTransferItemsInfo = (ICTransferItemsInfo)GetObjectFromDataRow(row);
                    transferItemList.Add(objTransferItemsInfo);
                }
            }
            ds.Dispose();
            return transferItemList;
        }

        public List<ICTransferItemsInfo> GetTransferItemsByParentID(int transferID)
        {
            DataSet ds = dal.GetDataSet("ICTransferItems_GetTransferItemsByParentID", transferID);
            return (List<ICTransferItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICTransferItemsInfo> GetTransferItemsForOutsourcingShipment()
        {
            DataSet ds = dal.GetDataSet("ICTransferItems_GetTransferItemsForOutsourcingShipment");
            return (List<ICTransferItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICTransferItemsInfo> GetTransferItemForReportByTransferID(int transferID)
        {
            DataSet ds = dal.GetDataSet("ICTransferItems_GetTransferItemForReportByTransferID", transferID);
            return (List<ICTransferItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICTransferItemsInfo> GetItemsByTransferID(int transferID)
        {
            DataSet ds = dal.GetDataSet("ICTransferItems_GetItemsByTransferID", transferID);
            List<ICTransferItemsInfo> transferItems = new List<ICTransferItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICTransferItemsInfo objTransferItemsInfo = (ICTransferItemsInfo)GetObjectFromDataRow(row);
                    transferItems.Add(objTransferItemsInfo);
                }
            }
            return transferItems;
        }

        public List<ICTransferItemsInfo> GetTransferItemByDate(int userID, string moduleName, string dataViewPermissionType, DateTime? fromDate, DateTime? toDate, int? fromStockID, int? toStockID)
        {
            DataSet ds = dal.GetDataSet("ICTransferItems_GetTransferItemByDate", userID, moduleName, dataViewPermissionType, fromDate, toDate, fromStockID, toStockID);
            List<ICTransferItemsInfo> transferItems = new List<ICTransferItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICTransferItemsInfo objTransferItemsInfo = (ICTransferItemsInfo)GetObjectFromDataRow(row);
                    transferItems.Add(objTransferItemsInfo);
                }
            }
            return transferItems;
        }
    }
    #endregion
}