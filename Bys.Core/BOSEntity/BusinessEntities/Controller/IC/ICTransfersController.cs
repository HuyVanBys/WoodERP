using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace BOSERP
{
    #region ICTransfers
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ICTransfersController
    //Created Date:Thursday, June 19, 2008
    //-----------------------------------------------------------

    public class ICTransfersController : BaseBusinessController
    {
        public ICTransfersController()
        {
            dal = new DALBaseProvider("ICTransfers", typeof(ICTransfersInfo));
        }

        public DataSet GetTransfersByDateRange(DateTime from, DateTime to)
        {
            String strQuery = String.Format("SELECT * FROM [dbo].[ICTransfers] WHERE CONVERT(VARCHAR(10),[ICTransferDate],112)>= CONVERT(VARCHAR(10),'{0}',112) AND CONVERT(VARCHAR(10),[ICTransferDate],112) <= CONVERT(VARCHAR(10),'{1}',112) AND [AAStatus]='{2}'", from.ToString("yyyyMMdd"), to.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus);
            return (DataSet)new ICTransfersController().GetDataSet(strQuery);
        }

        /// <summary>
        /// Get transfers for receipt
        /// </summary>
        /// <param name="branchID">ID of the branch shipment transfers belong to</param>
        /// <param name="transferNo">Transfer no the result will be filtered</param>
        /// <param name="fromDate">Date the result will be filtered from</param>
        /// <param name="toDate">Date the result will be filtered to</param>
        /// <returns>Transfer list</returns>
        public DataSet GetTransfersForReceipt(int branchID, string transferNo, DateTime? fromDate, DateTime? toDate, int fromStock, int toStock)
        {
            return dal.GetDataSet("ICTransfers_GetTransfersForReceipt", branchID, transferNo, fromDate, toDate, fromStock, toStock);
        }

        public DataSet GetTransferOutsourcingForReceipt(int branchID, string transferNo, DateTime? fromDate, DateTime? toDate)
        {
            return dal.GetDataSet("ICTransfers_GetTransferOutsourcingForReceipt", branchID, transferNo, fromDate, toDate);
        }

        public DataSet GetTransferConstructionsForReceipt(int branchID, string transferNo, DateTime? fromDate, DateTime? toDate)
        {
            return dal.GetDataSet("ICTransfers_GetTransferConstructionsForReceipt", branchID, transferNo, fromDate, toDate);
        }

        public DataSet GetTransferAdditionalsForReceipt(int branchID, string transferNo, DateTime? fromDate, DateTime? toDate)
        {
            return dal.GetDataSet("ICTransfers_GetTransferAdditionalsForReceipt", branchID, transferNo, fromDate, toDate);
        }
        /// <summary>
        /// Get stock transfers for transferring
        /// </summary>
        /// <returns>List of stock transfers</returns>
        public List<ICTransfersInfo> GetStockTransfersForTransferring()
        {
            DataSet ds = dal.GetDataSet("ICTransfers_GetStockTransfersForTransferring");
            List<ICTransfersInfo> transfers = new List<ICTransfersInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICTransfersInfo objTransfersInfo = (ICTransfersInfo)GetObjectFromDataRow(row);
                    transfers.Add(objTransfersInfo);
                }
            }
            return transfers;
        }

        /// <summary>
        /// Get a transfer by its reference
        /// </summary>
        /// <param name="reference">Transfer reference</param>
        /// <returns>Transfer object</returns>
        public ICTransfersInfo GetTransferByReference(string reference)
        {
            return (ICTransfersInfo)dal.GetDataObject("ICTransfers_GetTransferByReference", reference);
        }

        /// <summary>
        /// Get transfers for broadcasting to a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <returns>List of broadcasted transfers</returns>
        public List<ICTransfersInfo> GetTransfersForBroadcasting(int branchID)
        {
            DataSet ds = dal.GetDataSet("ICTransfers_GetTransfersForBroadcasting", branchID);
            return (List<ICTransfersInfo>)GetListFromDataSet(ds);
        }
        /// <summary>
        /// Get transfers by tranfer type
        /// </summary>
        /// <param name="transferType">transferType</param>
        /// <returns> List TransfersInfo </returns>

        public List<ICTransfersInfo> GetTransferByTransferType(string transferType, DateTime fromdate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICTransfers_GetTransferByTransferType", transferType, fromdate, toDate);
            return (List<ICTransfersInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ICTransfersInfo> transfers = new List<ICTransfersInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICTransfersInfo objTransfersInfo = (ICTransfersInfo)GetObjectFromDataRow(row);
                    transfers.Add(objTransfersInfo);
                }
            }
            ds.Dispose();
            return transfers;
        }
        public List<ICTransfersInfo> GetTransferByFromDateAndToDate(DateTime fromdate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICTransfers_GetTransferByFromDateAndToDate", fromdate, toDate);
            return (List<ICTransfersInfo>)GetListFromDataSet(ds);
        }

        public List<ICTransfersInfo> GetTransferByFromDateAndToDateAndUserPermission(DateTime fromdate, DateTime toDate, int userID, string moduleName, string dataViewPermissionType)
        {
            DataSet ds = dal.GetDataSet("ICTransfers_GetTransferByFromDateAndToDateAndUserPermission", fromdate, toDate, userID, moduleName, dataViewPermissionType);
            return (List<ICTransfersInfo>)GetListFromDataSet(ds);
        }

        public DataSet GetTransferListByListOfBranchID(string transferNo,
                                        string transferReference,
                                        string transferType,
                                        int? employeeID,
                                        int? branchID,
                                        int? fromStockID,
                                        int? toStockID,
                                       DateTime? dateFrom,
                                       DateTime? dateTo, List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetTransferList(transferNo, transferReference, transferType, employeeID, ojbBranchsInfo.BRBranchID, fromStockID, toStockID, dateFrom, dateTo);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public DataSet GetTransferList(string transferNo,
                                        string transferReference,
                                        string transferType,
                                        int? employeeID,
                                        int? branchID,
                                        int? fromStockID,
                                        int? toStockID,
                                       DateTime? dateFrom,
                                       DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("ICTransfers_GetTransferList", transferNo, transferReference, transferType, employeeID, branchID, fromStockID, toStockID, dateFrom, dateTo);
            return ds;
        }

        public List<ICTransfersInfo> GetTransferConstructionByFromDateAndToDate(DateTime fromdate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICTransfers_GetTransferConstructionByFromDateAndToDate", fromdate, toDate);
            return (List<ICTransfersInfo>)GetListFromDataSet(ds);
        }

        public List<ICTransfersInfo> GetTransferConstructionByFromDateAndToDateAndUserPermission(DateTime fromdate, DateTime toDate, int userID, string moduleName, string dataViewPermissionType)
        {
            DataSet ds = dal.GetDataSet("ICTransfers_GetTransferConstructionByFromDateAndToDateAndUserPermission", fromdate, toDate, userID, moduleName, dataViewPermissionType);
            return (List<ICTransfersInfo>)GetListFromDataSet(ds);
        }

        public DataSet GetTransferConstructionListByListOfBranchID(string transferNo,
                                        string transferReference,
                                        string transferType,
                                        int? employeeID,
                                        int? branchID,
                                        int? fromStockID,
                                        int? toStockID,
                                       DateTime? dateFrom,
                                       DateTime? dateTo, List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetTransferConstructionList(transferNo, transferReference, transferType, employeeID, ojbBranchsInfo.BRBranchID, fromStockID, toStockID, dateFrom, dateTo);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public DataSet GetTransferConstructionList(string transferNo,
                                        string transferReference,
                                        string transferType,
                                        int? employeeID,
                                        int? branchID,
                                        int? fromStockID,
                                        int? toStockID,
                                       DateTime? dateFrom,
                                       DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("ICTransfers_GetTransferConstructionList", transferNo, transferReference, transferType, employeeID, branchID, fromStockID, toStockID, dateFrom, dateTo);
            return ds;
        }
        public List<ICTransfersInfo> GetTransferAdditionalByFromDateAndToDate(DateTime fromdate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICTransfers_GetTransferAdditionalByFromDateAndToDate", fromdate, toDate);
            return (List<ICTransfersInfo>)GetListFromDataSet(ds);
        }

        public List<ICTransfersInfo> GetTransferAdditionalByFromDateAndToDateAndUserPermission(DateTime fromdate, DateTime toDate, int userID, string moduleName, string dataViewPermissionType)
        {
            DataSet ds = dal.GetDataSet("ICTransfers_GetTransferAdditionalByFromDateAndToDateAndUserPermission", fromdate, toDate, userID, moduleName, dataViewPermissionType);
            return (List<ICTransfersInfo>)GetListFromDataSet(ds);
        }

        public DataSet GetTransferAdditionalListByListOfBranchID(string transferNo,
                                        string transferReference,
                                        string transferType,
                                        int? employeeID,
                                        int? branchID,
                                        int? fromStockID,
                                        int? toStockID,
                                       DateTime? dateFrom,
                                       DateTime? dateTo, List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetTransferAdditionalList(transferNo, transferReference, transferType, employeeID, ojbBranchsInfo.BRBranchID, fromStockID, toStockID, dateFrom, dateTo);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public DataSet GetTransferAdditionalList(string transferNo,
                                        string transferReference,
                                        string transferType,
                                        int? employeeID,
                                        int? branchID,
                                        int? fromStockID,
                                        int? toStockID,
                                       DateTime? dateFrom,
                                       DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("ICTransfers_GetTransferAdditionalList", transferNo, transferReference, transferType, employeeID, branchID, fromStockID, toStockID, dateFrom, dateTo);
            return ds;
        }

        public DataSet GetTransferListByListOfBranchIDAndTransferTransferType(string transferNo,
                                        string transferReference,
                                        string transferType,
                                        int? employeeID,
                                        int? branchID,
                                        int? fromStockID,
                                        int? toStockID,
                                        DateTime? dateFrom,
                                        DateTime? dateTo, List<BRBranchsInfo> branchList,
                                        string transferTransferType)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetTransferListByTransferTransferType(transferNo, transferReference, transferType, employeeID, ojbBranchsInfo.BRBranchID, fromStockID, toStockID, dateFrom, dateTo, transferTransferType);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public DataSet GetTransferListByTransferTransferType(string transferNo,
                                        string transferReference,
                                        string transferType,
                                        int? employeeID,
                                        int? branchID,
                                        int? fromStockID,
                                        int? toStockID,
                                        DateTime? dateFrom,
                                        DateTime? dateTo,
                                        string transferTransferType)
        {
            DataSet ds = dal.GetDataSet("ICTransfers_GetTransferListByTransferTransferType", transferNo, transferReference, transferType, employeeID, branchID, fromStockID, toStockID, dateFrom, dateTo, transferTransferType);
            return ds;
        }

        public ICTransfersInfo GetTransferForReportByTransferID(int transferID)
        {
            DataSet ds = dal.GetDataSet("ICTransfers_GetTransferForReportByTransferID", transferID);
            List<ICTransfersInfo> transfers = new List<ICTransfersInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICTransfersInfo objTransfersInfo = (ICTransfersInfo)GetObjectFromDataRow(row);
                    transfers.Add(objTransfersInfo);
                }
            }
            return transfers.FirstOrDefault();
        }

        public List<ICTransfersInfo> GetTransfersForFeePaymentByUserPermission(int userID, string moduleName, string dataViewPermissionType)
        {
            DataSet ds = dal.GetDataSet("ICTransfers_GetTransfersForFeePaymentByUserPermission", userID, moduleName, dataViewPermissionType);
            return (List<ICTransfersInfo>)GetListFromDataSet(ds);
        }

        public ICTransfersInfo GetTransferReceiptByTransferNo(string transferNo)
        {
            return (ICTransfersInfo)dal.GetDataObject("ICTransfers_GetTransferReceiptByTransferNo", transferNo);
        }

        public void CompletedOutSourcing(int transferID)
        {
            dal.ExecuteStoredProcedure("ICTransfers_CompletedOutSourcing", transferID);
        }

        public void RollBackTransfer(int transferID)
        {
            dal.ExecuteStoredProcedure("ICTransferProposals_RollBackTransfer", transferID);
        }

        public List<ICTransfersInfo> GetShipmentReferenceByTransferReceipt(int transferID)
        {
            DataSet ds = dal.GetDataSet("ICTransfers_GetShipmentReferenceByTransferReceipt", transferID);
            return (List<ICTransfersInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}