using BOSCommon;
using BOSCommon.Constants;
using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;


namespace BOSERP
{
    #region ICProducts
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ICProductsController
    //Created Date:Friday, March 21, 2008
    //-----------------------------------------------------------

    public class ICProductsController : BaseBusinessController
    {
        public ICProductsController()
        {
            dal = new DALBaseProvider("ICProducts", typeof(ICProductsInfo));
        }

        public DataSet GetProductsByCreatedDate(DateTime dtDateFrom, DateTime dtDateTo)
        {
            return dal.GetDataSet("ICProducts_SelectByCreatedDate", dtDateFrom, dtDateTo);
        }

        public List<ICProductsInfo> GetProductForReport180()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductForReport180");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetDataProductForPurchase()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetDataProductForPurchase");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetDataProductForPurchaseOrder()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetDataProductForPurchaseOrder");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetLookupEditProductByProductType(string productType)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetLookupEditProductByProductType", productType);
            List<ICProductsInfo> collection = new List<ICProductsInfo>();

            if (ds != null && ds.Tables.Count != 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductsInfo product = (ICProductsInfo)SqlDatabaseHelper.GetObjectFromDataRow(row, typeof(ICProductsInfo));
                    collection.Add(product);
                }
            }
            ds.Dispose();
            return collection;
        }
        public ICProductsInfo GetProductByProductBarCode(String productBarCode)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductByProductBarCode", productBarCode);
            if (ds.Tables.Count > 0)
                return (ICProductsInfo)dal.GetSingleObject(ds.Tables[0]);
            return null;
        }
        public ICProductsInfo GetProductByProductWoodTypeID(int woodTypeID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductByProductWoodTypeID", woodTypeID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ICProductsInfo objProductsInfo = (ICProductsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                ds.Dispose();
                return objProductsInfo;
            }
            ds.Dispose();
            return null;
        }
        public DataSet GetDataProductByProductWoodTypeID(int woodTypeID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductByProductWoodTypeID", woodTypeID);
            return ds;
        }
        public List<ICProductsInfo> GetAllProductByProductWoodTypeID(int woodTypeID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetAllProductByProductWoodTypeID", woodTypeID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        /// <summary>
        /// Override to call custom SP
        /// </summary>
        /// <param name="iObjectID"></param>
        /// <returns></returns>
        public override object GetObjectByID(int iObjectID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductByID", iObjectID);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ICProductsInfo objProductsInfo = (ICProductsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objProductsInfo;
            }
            return null;
        }

        public object GetProductWithDiscountByID(int iObjectID, DateTime objProposalDate)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductWithDiscountByID", iObjectID, objProposalDate);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ICProductsInfo objProductsInfo = (ICProductsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objProductsInfo;
            }
            return null;
        }

        public object GetProductDefualtPriceFromInvoiceByCustomerID(int iObjectID, int? customerID, string objectType, int CurrencyID, decimal ExchangeRate)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductDefualtPriceFromInvoiceByCustomerID", iObjectID, customerID, objectType, CurrencyID, ExchangeRate);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ICProductsInfo objProductsInfo = (ICProductsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objProductsInfo;
            }
            return null;
        }

        /// <summary>
        /// Get a product and its inventory by ProductID and StockID
        /// </summary>
        /// <param name="productID"></param>
        /// <param name="stockID"></param>
        /// <returns></returns>
        public ICProductsInfo GetProductByIDAndStockID(int productID, int stockID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductByIDAndStockID", productID, stockID);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ICProductsInfo objProductsInfo = (ICProductsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objProductsInfo;
            }
            return null;
        }

        /// <summary>
        /// Get a product and its inventory by ProductID 
        /// </summary>
        /// <param name="productID">The product id</param>
        /// <returns>Info of product</returns>
        public ICProductsInfo GetInventoryProductByProductID(int productID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetInventoryProductByProductID", productID);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ICProductsInfo objProductsInfo = (ICProductsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objProductsInfo;
            }
            return null;
        }

        /// <summary>
        /// Get product by history detail id
        /// </summary>
        /// <param name="historyDetailID">The history detail id</param>
        /// <returns>Info of product</returns>
        public ICProductsInfo GetProductByHistoryDetailID(int historyDetailID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductByHistoryDetailID", historyDetailID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ICProductsInfo objProductsInfo = (ICProductsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objProductsInfo;
            }
            return null;
        }

        /// <summary>
        /// Get a product by its id
        /// </summary>
        /// <param name="productID">Product id</param>
        /// <returns>Product object</returns>
        public ICProductsInfo GetProductByID(int productID)
        {
            return (ICProductsInfo)dal.GetDataObject("ICProducts_GetProductByID", productID);
        }

        /// <summary>
        /// Get the product list based on some criteria
        /// </summary>
        /// <param name="productNo">Product no</param>
        /// <param name="productSupplierNo">Product supplier no</param>
        /// <param name="productType">Product type</param>
        /// <param name="productDesc">Product desc</param>
        /// <param name="departmentID">Department id</param>
        /// <param name="productGroupID">Product group id</param>
        /// <param name="supplierID">Supplier id</param>        
        /// <returns>List of products</returns>
        public DataSet GetProductSet(int companyID,
                                    string productNo,
                                    string productSupplierNo,
                                    string productType,
                                    string productDesc,
                                    int? departmentID,
                                    int? productGroupID,
                                    int? supplierID,
                                    string productBarCode,
                                    int? accountID)
        {
            return dal.GetDataSet("ICProducts_GetProductList",
                                   companyID,
                                   productNo,
                                   productSupplierNo,
                                   productType,
                                   productDesc,
                                   departmentID,
                                   productGroupID,
                                   supplierID,
                                   productBarCode,
                                   accountID);
        }


        /// <summary>
        /// Get the product list based on some criteria
        /// </summary>
        /// <param name="productNo">Product no</param>
        /// <param name="productSupplierNo">Product supplier no</param>
        /// <param name="productType">Product type</param>
        /// <param name="productDesc">Product desc</param>
        /// <param name="departmentID">Department id</param>
        /// <param name="productGroupID">Product group id</param>
        /// <param name="supplierID">Supplier id</param>        
        /// <returns>List of products</returns>
        public List<ICProductsInfo> GetProductListBySomeCriteria(int companyID,
                                    string productNo,
                                    string productSupplierNo,
                                    string productType,
                                    string productDesc,
                                    int? departmentID,
                                    int? productGroupID,
                                    int? supplierID,
                                    string productBarCode,
                                    int? accountID,
                                    int? batchProductID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductListBySomeCriteria",
                                   companyID,
                                   productNo,
                                   productSupplierNo,
                                   productType,
                                   productDesc,
                                   departmentID,
                                   productGroupID,
                                   supplierID,
                                   productBarCode,
                                   accountID,
                                   batchProductID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }


        public List<ICProductsInfo> GetProductByProductType(string productType)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductByProductType", productType);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetEquipmentByProductType(string productType)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetEquipmentByProductType", productType);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public DataSet GetProductsListByProductParentID(int productParentID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductsListByProductParentID", productParentID);
            return ds;
        }
        /// <summary>
        /// Get list Product to print Barcode 
        /// </summary>
        /// <param name="productBarCode"> Product BarCode</param>
        /// <param name="productNo">Product No</param>
        /// <param name="productName">Product Name</param>
        /// <param name="productGroupID">Product Group ID</param>
        /// <param name="stockID">stock ID</param>
        /// <param name="createdDateFrom">CreatedDate From</param>
        /// <param name="createdDateTo">CreatedDate  To</param>
        /// <returns></returns>
        public DataSet GetBarcodeProductSet(string productBarCode, string productNo, string productSupplierNumber, string productDesc, int? productGroupID,
                                                           DateTime? createdDateFrom, DateTime? createdDateTo)
        {
            return dal.GetDataSet("ICProducts_GetBarcodeProductList",
                           productBarCode,
                           productNo,
                           productSupplierNumber,
                           productDesc,
                           productGroupID,
                           createdDateFrom,
                           createdDateTo);

        }
        /// <summary>
        /// Get list Product Active to print Barcode 
        /// </summary>
        /// <param name="productBarCode"> Product BarCode</param>
        /// <param name="productNo">Product No</param>
        /// <param name="productName">Product Name</param>
        /// <param name="productGroupName">Product Group Name</param>
        /// <param name="stockID">stock ID</param>
        /// <param name="createdDateFrom">CreatedDate From</param>
        /// <param name="createdDateTo">CreatedDate  To</param>
        /// <returns></returns>
        public DataSet GetBarcodeProductActiveSet(string productBarCode, string productNo, string productSupplierNumber, string productDesc, int? productGroupID,
                                                         int? stockID, DateTime? createdDateFrom, DateTime? createdDateTo)
        {
            return dal.GetDataSet("ICProducts_GetBarcodeProductActiveList",
                           productBarCode,
                           productNo,
                           productSupplierNumber,
                           productDesc,
                           productGroupID,
                           stockID,
                           createdDateFrom,
                           createdDateTo);

        }
        /// <summary>
        /// Get the product list based on some criteria
        /// </summary>
        /// <param name="departmentID">Department id</param>
        /// <param name="productGroupID">Product group id</param>
        /// <param name="supplierID">Supplier id</param>        
        /// <returns>List of products</returns>
        public List<ICProductsInfo> GetProductList(int companyID, int? departmentID, int? productGroupID, int? supplierID, int? accountID)
        {
            DataSet ds = GetProductSet(companyID, null, null, null, null, departmentID, productGroupID, supplierID, null, accountID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get all products
        /// </summary>
        /// <returns>List of products</returns>
        public List<ICProductsInfo> GetAllProducts(int companyID)
        {
            return GetProductList(companyID, null, null, null, null);
        }

        /// <summary>
        /// Get all products
        /// </summary>
        /// <returns>List of products</returns>
        public DataSet GetAllProductSet(int companyID)
        {
            DataSet ds = GetProductSet(companyID, null, null, null, null, null, null, null, null, null);
            return ds;
        }

        /// <summary>
        /// Get an equipment and its inventory in a room
        /// </summary>
        /// <param name="equipmentID">Equipment id</param>
        /// <param name="serieID">Serie id</param>
        /// <param name="roomID">Room id</param>
        /// <returns>Equipment object</returns>
        public ICProductsInfo GetEquipmentByEquipmentIDAndSerieIDAndRoomID(int equipmentID, int serieID, int roomID)
        {
            return (ICProductsInfo)dal.GetDataObject("ICProducts_GetEquipmentByEquipmentIDAndSerieIDAndRoomID", equipmentID, serieID, roomID);
        }

        /// <summary>
        /// Get an equipment by its id
        /// </summary>
        /// <param name="equipmentID">Equipment id</param>
        /// <returns>Equipment object</returns>
        public ICProductsInfo GetEquipmentByID(int equipmentID)
        {
            return (ICProductsInfo)dal.GetDataObject("ICProducts_GetEquipmentByID", equipmentID);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ICProductsInfo> products = new List<ICProductsInfo>();
            if (ds != null && ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductsInfo objProductsInfo = (ICProductsInfo)GetObjectFromDataRow(row);
                    products.Add(objProductsInfo);
                }
            }
            ds.Dispose();
            return products;
        }
        public List<ICProductsForViewInfo> GetListViewFromDataSet(DataSet ds)
        {
            List<ICProductsForViewInfo> products = new List<ICProductsForViewInfo>();
            if (ds != null && ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductsForViewInfo objProductsInfo = (ICProductsForViewInfo)SqlDatabaseHelper.GetObjectFromDataRow(row, typeof(ICProductsForViewInfo));
                    products.Add(objProductsInfo);
                }
            }
            ds.Dispose();
            return products;
        }
        public List<ICProductsForViewIMES> GetListViewMESFromDataSet(DataSet ds)
        {
            List<ICProductsForViewIMES> products = new List<ICProductsForViewIMES>();
            if (ds != null && ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductsForViewIMES objProductsInfo = (ICProductsForViewIMES)SqlDatabaseHelper.GetObjectFromDataRow(row, typeof(ICProductsForViewIMES));
                    products.Add(objProductsInfo);
                }
            }
            ds.Dispose();
            return products;
        }
        public DataTable GetProductByProductTypeAndProductHasBeenInProdNormOptionToDataTable(string productType,
                                                                                           bool? productHasBeenInProductNorm,
                                                                                           bool? productHasBeenInProductItem)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductByProductTypeAndProductHasBeenInProdNorm", productType,
                                                                                productHasBeenInProductNorm, productHasBeenInProductItem);
            return ds.Tables[0];
        }


        /// <summary>
        /// Get equipment list based on some criteria
        /// </summary>
        /// <param name="equipmentNo">Equipment no</param>
        /// <param name="equipmentName">Equipment name</param>
        /// <returns>List of equipments</returns>
        public List<ICProductsInfo> GetEquipmentList(string equipmentNo, string equipmentName)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetEquipmentList", equipmentNo, equipmentName);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get all equipments
        /// </summary>
        /// <returns>List of equipments</returns>
        public List<ICProductsInfo> GetAllEquipments()
        {
            return GetEquipmentList(null, null);
        }

        /// <summary>
        /// Get product list for exporting
        /// </summary>
        /// <returns>List of products</returns>
        public DataSet GetProductsForExporting()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductsForExporting");
            return ds;
        }
        /// <summary>
        /// Get the search product list for barcode print
        /// </summary>
        /// <param name="departmentID">Department id</param>
        /// <param name="productGroupID">Product group id</param>
        /// <param name="supplierID">Supplier id</param>        
        /// <returns>List of products</returns>
        public List<ICProductsInfo> GetBarcodeProductList(string productBarCode, string productNo, string productSupplierNumber, string productDesc, int? productGroupID,
                                                           DateTime? createdDateFrom, DateTime? createdDateTo)
        {
            DataSet ds = GetBarcodeProductSet(productBarCode, productNo, productSupplierNumber, productDesc, productGroupID, createdDateFrom, createdDateTo);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get the search product active list for barcode print
        /// </summary>
        /// <param name="departmentID">Department id</param>
        /// <param name="productGroupID">Product group id</param>
        /// <param name="supplierID">Supplier id</param>        
        /// <returns>List of products</returns>
        public List<ICProductsInfo> GetBarcodeProductActiveList(string productBarCode, string productNo, string productSupplierNumber, string productDesc, int? productGroupID,
                                                           int? stockID, DateTime? createdDateFrom, DateTime? createdDateTo)
        {
            DataSet ds = GetBarcodeProductActiveSet(productBarCode, productNo, productSupplierNumber, productDesc, productGroupID, stockID, createdDateFrom, createdDateTo);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get product list by product no
        /// </summary>
        /// <param name="productNo"></param>
        /// <returns></returns>
        public List<ICProductsInfo> GetProductListByProductNo(string productNo)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductListByProductNo", productNo);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetSameProductByProductNo(string productNo)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetSameProductByProductNo", productNo);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        /// <summary>
        /// Get product list by product no
        /// </summary>
        /// <param name="productNo"></param>
        /// <returns></returns>
        public List<ICProductsInfo> GetEquipmentsBySomeCriteria(int? branchID, int? departmentRoomID, DateTime? fromDate, DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetEquipmentsBySomeCriteria", branchID, departmentRoomID, fromDate, toDate);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        //[NUThao] [Improve Speed] [2014-09-09]
        public DataSet GetAllProductsForLookupControl(int companyID)
        {
            return dal.GetDataSet("ICProducts_GetAllProductsForLookupControl", companyID);
        }
        //[NUThao] [Improve Speed] [2014-09-09]
        public List<ICProductsInfo> GetProductsForLookupControl(int companyID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetAllProductsForLookupControl", companyID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetAllProductsForLookupControlForCustomModule(int companyID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetAllProductsForLookupControlForCustomModule", companyID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetProductsDataSourceForLookupControl(int companyID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductsDataSourceForTransferProposalLookupControl", companyID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductPriceHistory(int productID,
                                                string productSupplierNo,
                                                string productType,
                                                int? departmentID,
                                                int? productGroupID,
                                                DateTime fromDate,
                                                DateTime toDate,
                                                string branchNos,
                                                int currencyID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductPriceHistoryBySomeCriteria", productID, productSupplierNo, productType, departmentID, productGroupID,
                                                                                        fromDate, toDate, branchNos, currencyID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        /// <summary>
        /// Get the product other list based on some criteria
        /// </summary>
        /// <param name="productNo">Product no</param>
        /// <param name="productSupplierNo">Product supplier no</param>
        /// <param name="productType">Product type</param>
        /// <param name="productDesc">Product desc</param>
        /// <param name="departmentID">Department id</param>
        /// <param name="productGroupID">Product group id</param>
        /// <param name="supplierID">Supplier id</param>        
        /// <returns>List of products</returns>
        public DataSet GetOtherProductList(string productNo,
                                    string productSupplierNo,
                                    string productType,
                                    string productDesc,
                                    int? departmentID,
                                    int? productGroupID,
                                    int? supplierID)
        {
            return dal.GetDataSet("ICProducts_GetOtherProductList",
                                   productNo,
                                   productSupplierNo,
                                   productType,
                                   productDesc,
                                   departmentID,
                                   productGroupID,
                                   supplierID);
        }
        /// <summary>
        /// Get the product list based on some criteria
        /// </summary>
        /// <param name="productNo">Product no</param>
        /// <param name="productSupplierNo">Product supplier no</param>
        /// <param name="productType">Product type</param>
        /// <param name="productDesc">Product desc</param>
        /// <param name="departmentID">Department id</param>
        /// <param name="productGroupID">Product group id</param>
        /// <param name="supplierID">Supplier id</param>        
        /// <returns>List of products</returns>
        public DataSet GetProductIngredientList(string productNo,
                                    string productSupplierNo,
                                    string productType,
                                    string productDesc,
                                    int? departmentID,
                                    int? productGroupID,
                                    int? supplierID)
        {
            return dal.GetDataSet("ICProducts_GetProductIngredientList",
                                   productNo,
                                   productSupplierNo,
                                   productType,
                                   productDesc,
                                   departmentID,
                                   productGroupID,
                                   supplierID);
        }

        public List<ICProductsInfo> GetSemiProductByProductNo(string productNo, string productType)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetSemiProductByProductNo", productNo, productType);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        //[NKVung]  [Issue  khong tao duoc chi tiet roi]    [START]
        public int GetCountAllSemiProductGroup(string productNo, int groupTypeID, string productType)
        {
            List<string> productNos = new List<string>();
            List<ICProductsInfo> products = new List<ICProductsInfo>();
            DataSet ds = dal.GetDataSet("ICProducts_GetCountAllSemiProductGroup", productNo, groupTypeID, productType);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductsInfo objProductsInfo = (ICProductsInfo)GetObjectFromDataRow(row);
                    products.Add(objProductsInfo);
                }
            }
            return products.Select(o => Int32.Parse(o.ICProductNo.Split('.').LastOrDefault())).DefaultIfEmpty(0).Max() + 1;
        }
        //[NKVung]  [Issue  khong tao duoc chi tiet roi]    [END]

        public List<ICProductsInfo> GetProductByProductNo(string productNo, int getLength)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductByProductNo", productNo, getLength);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductAllObject()
        {
            DataSet ds = dal.GetAllObject();
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }


        public List<ICProductsInfo> GetProductForProductionNormPaint()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductForProductionNormPaint");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetExactProductByProductNo(string productNo)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetExactProductByProductNo", productNo);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductByDepartmentID(int departmentID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductByDepartmentID", departmentID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetProductByDepartmentNo(string departmentNo)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductByDepartmentNo", departmentNo);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductByDepartmentNoAndProductAttributeID(string departmentNo, int productAttributeID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductByDepartmentNoAndProductAttributeID", departmentNo, productAttributeID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        /// <summary>
        /// Get the product by Product type
        /// </summary>
        /// <returns>List ICProductsInfo</returns>
        public List<ICProductsInfo> GetProductByProductWoodType()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductByProductWoodType");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductByBatchProductID(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductByBatchProductID", batchProductID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductFromProductNameAndDesc(string productName, string productDesc,
                                                                    int productGroupID, string productSizeAndSpecifiCation,
                                                                    string productAttribute)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductFromProductNameAndDesc", productName, productDesc, productGroupID, productSizeAndSpecifiCation, productAttribute);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public DataSet GetProductByBatch(int batchID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductFromProductNameAndDesc", batchID);
            return ds;
        }

        public List<ICProductsInfo> GetProductForProductionNormPLDG(int departmentID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductForProductionNormPLDG", departmentID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        //[NKVung]  [Issue  khong tao duoc chi tiet roi]    [START]
        public string GetNextNoForGroupOrPieceSemiProduct(string productNo)
        {
            List<string> productNos = new List<string>();
            List<ICProductsInfo> products = new List<ICProductsInfo>();
            DataSet ds = dal.GetDataSet("ICProducts_GetNextNoForGroupOrPieceSemiProduct", productNo);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductsInfo objProductsInfo = (ICProductsInfo)GetObjectFromDataRow(row);
                    products.Add(objProductsInfo);
                }
            }
            int productSubNo = products.Select(o => Int32.Parse(o.ICProductNo.Split('.').LastOrDefault())).DefaultIfEmpty(0).Max() + 1;
            return productNo + "." + productSubNo.ToString().PadLeft(2, '0');
        }
        //[NKVung]  [Issue  khong tao duoc chi tiet roi]    [END]

        public List<ICProductsInfo> GetAllAliveProductForSync()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetAllAliveProductForSync");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetSemiProductGroupForSyncByProductNo(string productNo)
        {
            DataSet ds = dal.GetDataSet("GetSemiProductGroupForSyncByProductNo", productNo);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetSemiProductDetailForSyncByProductNo(string productNo)
        {
            DataSet ds = dal.GetDataSet("GetSemiProductDetailForSyncByProductNo", productNo);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductForSyncByProductNo(string productNo)
        {
            DataSet ds = dal.GetDataSet("GetProductForSyncByProductNo", productNo);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public bool IsExistProductNo(string productNo)
        {
            bool isExist = false;
            DataSet ds = dal.GetDataSet("ICProducts_IsExistProductNo", productNo);
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    bool.TryParse(ds.Tables[0].Rows[0].ItemArray[0].ToString(), out isExist);
                }
            }
            return isExist;
        }

        public bool IsProductHasBOM(int productID)
        {
            bool isExist = false;
            DataSet ds = dal.GetDataSet("ICProducts_IsProductHasBOM", productID);
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    bool.TryParse(ds.Tables[0].Rows[0].ItemArray[0].ToString(), out isExist);
                }
            }
            return isExist;
        }

        public List<ICProductsInfo> GetProductByProductListType()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductByProductListType");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetProductForReport(int productID, DateTime fromdate, DateTime todate, int accountID, int costAccountID, int departmentID, int productGroupID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetItemForReport", productID, fromdate, todate, accountID, costAccountID, departmentID, productGroupID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public DataSet GetProductListByDepreciationMonthAndIdentifiedEquipments(string IdentifiedEquipment, string ProductNo, string ProductName)
        {
            DataSet ds = dal.GetDataSet("ICProduct_GetProductListByDepreciationMonthAndIdentifiedEquipments", IdentifiedEquipment, ProductNo, ProductName);
            return ds;

        }
        public List<ICProductsInfo> GetListProductForShowIdentifyMenu()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetListProductForShowIdentifyMenu");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetICProductbyICproductID()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetICProductbyICproductID");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetProductByTypeProduct()
        {
            DataSet ds = dal.GetDataSet("ICproducts_GetProductByTypeProduct");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public bool GetBoolProductGroupsIsIndoorOrOurdoor(int ChildProductGroupID)
        {
            bool flag = false;
            ICProductGroupsInfo objProductGroupsInfo = new ICProductGroupsInfo();
            ICProductGroupsController objProductGroupsController = new ICProductGroupsController();
            {
                objProductGroupsInfo = (ICProductGroupsInfo)objProductGroupsController.GetObjectByName(ProductGroupNameHardCode.Indoor);

            }
            if (objProductGroupsInfo != null)
            {

                object objectTemp = dal.GetSingleValue("ICProductGroups_IsChild_PROCEDURE", @ChildProductGroupID, objProductGroupsInfo.ICProductGroupID);
                flag = Convert.ToBoolean(objectTemp);
            }
            return flag;
        }

        public List<ICProductsInfo> GetListProductByProductType(string ProductType)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetListProductByProductType", ProductType);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetListProductByListProductType()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetListProductByListProductType");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetListProductByProductLumber()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetListProductByProductLumber");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductForAssetIncreasing()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductForAssetIncreasing");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetListProductByProductGroupAndDepartment(int Department, int ProductGroup)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetListProductByProductGroupAndDepartment", Department, ProductGroup);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public double GetEquipmentInnerQty(int branchID, int roomID, DateTime toDate, int productID, int productSerieID)
        {
            double result = double.Parse(dal.GetSingleValue("ICProducts_GetEquipmentInnerQty", branchID, roomID, toDate, productID, productSerieID).ToString());
            return result;
        }

        public List<ICProductsInfo> GetInitEquipmentsBySomeCriteria(int branchID, int roomID, DateTime fromDate, DateTime toDate, int productID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetInitEquipmentsBySomeCriteria", branchID, roomID, fromDate, toDate, productID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetListProductForHome(int ProductID, int BatchProductID, int CustomerID, string sysno)
        {
            DataSet ds = dal.GetDataSet("", ProductID, BatchProductID, CustomerID, sysno);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductByMainScreen(int? productID, int? batchproductID, int? customerID, string productSys)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductByMainScreen", productID, batchproductID, customerID, productSys);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetListProductByBatchProductID(int? batchproductID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetListProductByBatchProductID", batchproductID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetListProductAndCarcassByBatchProductID(int? batchproductID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetListProductAndCarcassByBatchProductID", batchproductID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetItemForReport180(DateTime fromDate, DateTime toDate, int productID)
        {
            DataSet ds = dal.GetDataSet("ICProductsInfo_GetItemForReport180", fromDate, toDate, productID);
            List<ICProductsInfo> products = new List<ICProductsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductsInfo objProductsInfo = (ICProductsInfo)GetObjectFromDataRow(row);
                    objProductsInfo.TongCong = objProductsInfo.TonDauKy + objProductsInfo.MuaNgoai + objProductsInfo.CuaXeTuGoTron;
                    if (objProductsInfo.ICProductType == ProductType.Roundwood.ToString())
                    {
                        objProductsInfo.TonCuoiKy = objProductsInfo.TongCong - objProductsInfo.CuaXeSX - objProductsInfo.BanGoTronHoacTP;
                    }
                    else
                    {
                        objProductsInfo.TonCuoiKy = objProductsInfo.TongCong - objProductsInfo.BanGoTronHoacTP;
                    }
                    products.Add(objProductsInfo);
                }
            }
            return products;
        }

        public List<ICProductsInfo> GetListProductByICReceiptID(int icreceiptID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetListProductByICReceiptID", icreceiptID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public ICProductsInfo ConvertDataRowToICProductsInfo(DataRow row)
        {
            ICProductsInfo objProductsInfo = (ICProductsInfo)GetObjectFromDataRow(row);
            return objProductsInfo;
        }

        public List<ICProductsForViewInfo> GetListProductByAPSupplierID(int supplierId)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetListProductByAPSupplierID", supplierId);
            return (List<ICProductsForViewInfo>)GetListViewFromDataSet(ds);
        }

        public List<ICProductsInfo> GetItemByProductIDAndGroup(int productID, string groupType)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetItemByProductIDAndGroup", productID, groupType);
            List<ICProductsInfo> productsList = new List<ICProductsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductsInfo objproductsInfo = (ICProductsInfo)GetObjectFromDataRow(row);
                    productsList.Add(objproductsInfo);
                }
            }
            ds.Dispose();
            return productsList;
        }
        public List<ICProductsInfo> GetWorkForSaleOrder()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetWorkForSaleOrder");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductForModuleExceptDepartment(string moduleName)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductForModuleExceptDepartment", moduleName);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductForAssemble()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductForAssemble");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductForDisassemble()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductForDisassemble");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetAllProductIsPromotion()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetAllProductIsPromotion");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public DataSet GetWorkProductList(string productNo,
                                    string productSupplierNo,
                                    string productType,
                                    string productDesc,
                                    int? departmentID,
                                    int? productGroupID,
                                    int? supplierID)
        {
            return dal.GetDataSet("ICProducts_GetWorkProductList",
                                   productNo,
                                   productSupplierNo,
                                   productType,
                                   productDesc,
                                   departmentID,
                                   productGroupID,
                                   supplierID);
        }

        public List<ICProductsInfo> GetCostForSaleOrder()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetCostForSaleOrder");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductNoWorkAndService()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductNoWorkAndService");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetProductByProductIngredientType()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductByProductIngredientType");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetProductForUnfinishedCost()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductForUnfinishedCost");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductListForRP192(int departmentID, int productGroupID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductForRP192", departmentID, productGroupID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetProductByProductNoOfOldSys(string productNoOfOldSys)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductByProductNoOfOldSys", productNoOfOldSys);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public int GetProductGroupByProductID(int productID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductGroupByProductID", productID);
            if (ds.Tables.Count > 0)
            {
                return Convert.ToInt32(ds.Tables[0].Rows[0][0]);
            }
            return 0;
        }

        public List<ICProductsInfo> GetAllProductForSaleToLookupEdit()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetAllProductForSaleToLookupEdit");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetAllProductForProductionNormToLookupEdit()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetAllProductForProductionNormToLookupEdit");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetAllProductByProductTypesToLookupEdit(string productTypes)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetAllProductByProductTypesToLookupEdit", productTypes);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetAllProductToLookupEditByProductType(string productTypes)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetAllProductToLookupEditByProductType", productTypes);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetAllProductNotConstrainProductTypesLookupEdit(string productTypes)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetAllProductNotConstrainProductTypesLookupEdit", productTypes);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetListProductDetail()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetListProductDetail");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetEquipmentForStopAllocationEquipment(string productType)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetEquipmentForStopAllocationEquipment", productType);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductByProductRefToLookupEdit(string productRef)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductByProductRefToLookupEdit", productRef);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductByProductionCostFormulaID(int productionCostFormulaID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductByProductionCostFormulaID", productionCostFormulaID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public string GetProductNoByRef(string productRef)
        {
            return (string)dal.GetSingleValue("ICProducts_GetProductNoByRef", productRef);
        }
        public string GetNextNoForGroupOrPieceSemiProduct(string productNo, int lengthNo)
        {
            List<string> productNos = new List<string>();
            List<ICProductsInfo> products = new List<ICProductsInfo>();
            DataSet ds = dal.GetDataSet("ICProducts_GetNextNoForGroupOrPieceSemiProduct", productNo, lengthNo);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductsInfo objProductsInfo = (ICProductsInfo)GetObjectFromDataRow(row);
                    products.Add(objProductsInfo);
                }
            }
            foreach (ICProductsInfo objProduct in products)
            {
                productNos.Add(objProduct.ICProductNo.Substring(objProduct.ICProductNo.Length - 2, 2));
            }
            List<int> listNo = new List<int>();
            foreach (string proNo in productNos)
            {
                try
                {
                    int order = 0;
                    Int32.TryParse(proNo, out order);
                    listNo.Add(order);
                }
                catch
                { }
            }
            int max = 0;
            for (int i = 0; i < listNo.Count; i++)
            {
                if (listNo[i] > max)
                {
                    max = listNo[i];
                }
            }
            max = max + 1;
            if (max < 10)
            {
                return productNo + ".0" + max;
            }
            ds.Dispose();
            return productNo + "." + max;
        }
        public DataSet GetICInventorySTocksByListProduct(string ListProductNo)
        {
            return dal.GetDataSet("GetICInventorySTocksByListProduct", ListProductNo);
        }
        public void UpdateProductBranchPriceByCalculatorID(int calculatorID, int currencyID, int productID, int currencyDefaultID)
        {
            dal.ExecuteStoredProcedure("ICProducts_UpdateProductBranchPriceByCalculatorID", calculatorID, currencyID, productID, currencyDefaultID);
        }
        public List<ICProductsInfo> GetProductsByProductCarcassID(int productCarcassID, int productionNormID = 0)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductsByProductCarcassID", productCarcassID, productionNormID);
            List<ICProductsInfo> collection = new List<ICProductsInfo>();
            if (ds != null && ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductsInfo item = (ICProductsInfo)GetObjectFromDataRow(row);
                    collection.Add(item);
                }
            }
            return collection;
        }

        public List<ICProductsInfo> GetProductsByProductCarcassIDOrigin(int productCarcassID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductsByProductCarcassIDOrigin", productCarcassID);
            List<ICProductsInfo> collection = new List<ICProductsInfo>();
            if (ds != null && ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductsInfo item = (ICProductsInfo)GetObjectFromDataRow(row);
                    collection.Add(item);
                }
            }
            return collection;
        }
        public List<ICProductsInfo> GetSemiProductByParent(int? parentID, int normID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetSemiProductByParent", parentID, normID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetSemiProductListByProductionNormID(int productionNormID, int semiProductID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetSemiProductListByProductionNormID", productionNormID, semiProductID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductsForCheckExistsRoundWood(int? productID, int loaigo, int hoanh, int dai)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductsForCheckExistsRoundWood", productID, loaigo, hoanh, dai);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetProductsForCheckExistsLumber(int? productID, int loaigo, decimal day)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductsForCheckExistsLumber", productID, loaigo, day);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetProductsForCheckExistsLumberByGroup(int? productID, int? productGroupID, int loaigo, decimal day)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductsForCheckExistsLumberByGroup", productID, productGroupID, loaigo, day);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetLumberForCheckExistsBySomeCriteria(int? productID, int? productGroupID, int loaigo, decimal day, decimal? rong, decimal? dai)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetLumberForCheckExistsBySomeCriteria", productID, productGroupID, loaigo, day, rong,dai);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetExistProductsBySomeCriteria(int? productID, int? productGroupID, int loaigo, decimal day, decimal? rong, decimal? dai, string AttributeKey)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetExistProductsBySomeCriteria", productID, productGroupID, loaigo, day, rong, dai, AttributeKey);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetProductsByWoodIDAndThick(int loaigo, decimal day)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductsByWoodIDAndThick", loaigo, day);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetListMaterialProduct()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetListMaterialProduct");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetListProductCarcass()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetListProductCarcass");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductComponentListByProductID(int productID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductComponentListByProductID", productID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetListByEquipmentAndAsset()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetListByEquipmentAndAsset");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetListByAssets()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetListByAsset");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetMaterialListForDeviceTemplate()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetMaterialListForDeviceTemplate");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetCarcassByNoAndName(string carcassNo, string carcassName)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetCarcassByNoAndName", carcassNo, carcassName);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public DataSet GetDataCarcassByNoAndName(string carcassNo, string carcassName)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetCarcassByNoAndName", carcassNo, carcassName);
            return ds;
        }
        public List<ICProductsInfo> GetCarcassBySomeConditions(string carcassNo, string carcassName, int batchProductID, string getType)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetCarcassBySomeConditions", carcassNo, carcassName, batchProductID, getType);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetCarcassBySomeConditions_2(string carcassNo, string carcassName, int batchProductID, string getType, int productGroupID, int collectionID, int productMaterialID, int customerID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetCarcassBySomeConditions_2", carcassNo, carcassName, batchProductID, getType, productGroupID, collectionID, productMaterialID, customerID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductAndNormBySomeCriteria(string carcassNo, string carcassName, int? batchProductID, string getType,
                                                                    int? productGroupID, int? collectionID, int? productMaterialID, int? customerID, int? branchID, int userID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductAndNormBySomeCriteria", carcassNo, carcassName, batchProductID, getType, productGroupID, collectionID, productMaterialID, customerID, branchID, userID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsForViewIMES> GetViewMESProductAndNormBySomeCriteria(int productID, int productGroupID, int branchID, string typeGet, int batchProductID, int objectID,
                                                                   string objectType, bool isHasBOM, bool isNotBOM, string statusGet, int userID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductAndNormBySomeCriteria", productID, productGroupID, branchID, typeGet, batchProductID, objectID, objectType, isHasBOM, isNotBOM, statusGet, userID);
            return GetListViewMESFromDataSet(ds);
        }
        public List<ICProductsInfo> GetProductMaterialForPackaging(int SpecialityID, int SizeID, int WeightPerVolumeID, decimal length, decimal width, decimal height)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductMaterialForPackaging", SpecialityID, SizeID, WeightPerVolumeID, length, width, height);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductMaterialForPackagingByDiffFactor(int SpecialityID, int SizeID, int WeightPerVolumeID, decimal length, decimal width, decimal height, decimal diffFactor)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductMaterialForPackagingByDiffFactor", SpecialityID, SizeID, WeightPerVolumeID, length, width, height, diffFactor);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetActiveProductByType(string type)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetActiveProductByType", type);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetListProductService()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetListProductService");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductForCapacityByBatchProductIDAndOperationID(int batchProductID, int operationID, bool isOperationSyncProductCheck)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductForCapacityByBatchProductIDAndOperationID", batchProductID, operationID, isOperationSyncProductCheck);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductForCapacityByJobTicketDetailPlan(int OperationDetailPlanItemChildID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductForCapacityByJobTicketDetailPlan", OperationDetailPlanItemChildID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetProductListByBatchProductID(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductListByBatchProductID", batchProductID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetProductForGeneralMaterial()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductForGeneralMaterial");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public ICProductsInfo CheckValidDeleteSemiProduct(int productID)
        {
            return (ICProductsInfo)dal.GetDataObject("ICProducts_CheckValidDeleteSemiProduct", productID);
        }
        public ICProductsInfo CheckExitBOMSemiProduct(int productID, int MMProductionNormID)
        {
            return (ICProductsInfo)dal.GetDataObject("ICProducts_CheckExitBOMSemiProduct", productID, MMProductionNormID);
        }

        public bool IsHasBOM(int productID)
        {
            return (bool)dal.GetSingleValue("ICProducts_IsHasBOM", productID);
        }

        public List<ICProductsInfo> GetAllSectionProduct()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetAllSectionProductBelongBranchID");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetSectionProductByTemplateID(int templateID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetSectionProductByTemplateID", templateID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetAllSectionAndWorkProduct()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetAllSectionAndWorkProduct");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetEquipmentForAllocationEquipment()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetEquipmentForAllocationEquipment");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductByBatchProductIDAndOperationPlanID(int batchProductID, int operationPlanID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductByBatchProductIDAndOperationPlanID", batchProductID, operationPlanID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductMMTBForDeliveryPlan()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductMMTBForDeliveryPlan");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public void UpdateDefaultCarCass(int producID)
        {
            dal.ExecuteStoredProcedure("ICProducts_UpdateDefaultCarCass", producID);
        }

        public List<ICProductsInfo> GetProductListForDiscountProgram(int departmentID, string productGroupReference, string productNo)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductListForDiscountProgram", departmentID, productGroupReference, productNo);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetSemiProductFromProductAndSomeCriteria(string carcassNo, string carcassName
                                                                    , string semiNo, string semiName, decimal? semiHeight, decimal? semiWith, decimal? semiLength
                                                                    , int? batchProductID, int? productGroupID
                                                                    , int? collectionID, int? productMaterialID
                                                                    , int? customerID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetSemiProductFromProductAndSomeCriteria", carcassNo, carcassName, semiNo, semiName
                , semiHeight > 0 ? semiHeight : null, semiWith > 0 ? semiWith : null, semiLength > 0 ? semiLength : null
                , batchProductID, productGroupID, collectionID, productMaterialID, customerID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetMaterialProductBySomeCriteria(string productNo, string productName, string productType
                                                            , decimal? heigth, decimal? width, decimal? length
                                                            , int? productGroupID, int? productMaterialID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetMaterialProductBySomeCriteria", productNo, productName, productType
                                                            , heigth, width, length
                                                            , productGroupID, productMaterialID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetMaterialProductForPurchaseOutSourcing()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetMaterialProductForPurchaseOutSourcing");
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetAllProductForSaleToLookupEditByActionNew(string actionNew)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetAllProductForSaleToLookupEditByActionNew", actionNew);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetAllProductForSaleToLookupEditBySaleOrderProductType(string SaleOrderProductType)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetAllProductForSaleToLookupEditBySaleOrderProductType", SaleOrderProductType);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetAllProductListByInActivePriceSheet(int customerID, DateTime dateGet, string productType)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetAllProductListByInActivePriceSheet", customerID, dateGet, productType);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductsInfo> GetSRProductListByInActivePriceSheet(int customerID, DateTime dateGet, string productType)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetSRProductListByInActivePriceSheet", customerID, dateGet, productType);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductsInfo> GetProductItemListByProductID(int productID)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetProductItemListByProductID", productID);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }

        public void UpdateProductImageByID(int productID, string productImageFile)
        {
            dal.ExecuteStoredProcedure("ICProducts_UpdateProductImageByID", productID, productImageFile);
        }
        public List<ICProductsInfo> GetLookupEditProductType()
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetLookupEditProductType");
            List<ICProductsInfo> collection = new List<ICProductsInfo>();

            if (ds != null && ds.Tables.Count != 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductsInfo product = (ICProductsInfo)SqlDatabaseHelper.GetObjectFromDataRow(row, typeof(ICProductsInfo));
                    collection.Add(product);
                }
            }
            ds.Dispose();
            return collection;
        }
        public int GetUsingComponent(int productID)
        {
            return Convert.ToInt32(dal.GetSingleValue("ICProducts_GetUsingComponent", productID));
        }
        public List<ICProductsInfo> GetBarcodeProductBySomeConditions(int departmentID, int productGroupID, string productNo, int supplierID, string productBarCode)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetBarcodeProductBySomeConditions", departmentID, productGroupID, productNo, supplierID, productBarCode);
            List<ICProductsInfo> collection = new List<ICProductsInfo>();

            if (ds != null && ds.Tables.Count != 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductsInfo product = (ICProductsInfo)SqlDatabaseHelper.GetObjectFromDataRow(row, typeof(ICProductsInfo));
                    collection.Add(product);
                }
            }
            ds.Dispose();
            return collection;
        }
        public List<ICProductsForViewInfo> GetListProductByCommodityType(string receiptType)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetListProductByCommodityType", receiptType);
            return (List<ICProductsForViewInfo>)GetListViewFromDataSet(ds);
        }
        public List<ICProductsInfo> GetListProductBySaleOrderType(string saleOrderType)
        {
            DataSet ds = dal.GetDataSet("ICProducts_GetListProductBySaleOrderType", saleOrderType);
            return (List<ICProductsInfo>)GetListFromDataSet(ds);
        }
        public ICProductsInfo GetProductByNoOfOldSys(string  NoOfOldSys)
        {
            return (ICProductsInfo)dal.GetDataObject("ICProducts_GetProductByNoOfOldSys", NoOfOldSys);
        }
    }
    #endregion
}