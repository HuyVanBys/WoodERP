using BOSLib;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ICProductConversionItemForViews
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ICProductConversionItemForViewsController
    //Created Date:Monday, May 27, 2019
    //-----------------------------------------------------------

    public class ICProductConversionItemForViewsController : BaseBusinessController
    {
        public ICProductConversionItemForViewsController()
        {
            dal = new DALBaseProvider("ICProductConversionItemForViews", typeof(ICProductConversionItemForViewsInfo));
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ICProductConversionItemForViewsInfo> conversionItemList = new List<ICProductConversionItemForViewsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductConversionItemForViewsInfo item = (ICProductConversionItemForViewsInfo)GetObjectFromDataRow(row);
                    conversionItemList.Add(item);
                }
            }
            return conversionItemList;
        }

        public List<ICProductConversionItemForViewsInfo> GetListProductConversionItemChildByProductConversionID(int productConversionID)
        {
            DataSet ds = dal.GetDataSet("Report_ICProductConversions_GetListProductConversionItemChildByProductConversionID", productConversionID);
            List<ICProductConversionItemForViewsInfo> List = new List<ICProductConversionItemForViewsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICProductConversionItemForViewsController objProductConversionItemsController = new ICProductConversionItemForViewsController();
                int count = 0;
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    count++;
                    ICProductConversionItemForViewsInfo objProductConversionItemsInfo = (ICProductConversionItemForViewsInfo)objProductConversionItemsController.GetObjectFromDataRow(row);
                    objProductConversionItemsInfo.STT = count;
                    char[] charsToTrim = { '\r', '\n', '\t', ' ' };
                    objProductConversionItemsInfo.ICProductConversionDesc.Trim(charsToTrim);
                    List.Add(objProductConversionItemsInfo);
                }
            }
            return List;
        }

        public List<ICProductConversionItemForViewsInfo> GetListProductConversionItemParentByProductConversionID(int productConversionID)
        {
            DataSet ds = dal.GetDataSet("Report_ICProductConversions_GetListProductConversionItemParentByProductConversionID", productConversionID);
            List<ICProductConversionItemForViewsInfo> List = new List<ICProductConversionItemForViewsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICProductConversionItemForViewsController objProductConversionItemsController = new ICProductConversionItemForViewsController();
                int count = 0;
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    count++;
                    ICProductConversionItemForViewsInfo objProductConversionItemsInfo = (ICProductConversionItemForViewsInfo)objProductConversionItemsController.GetObjectFromDataRow(row);
                    //objProductConversionItemsInfo.STT = count;
                    char[] charsToTrim = { '\r', '\n', '\t', ' ' };
                    objProductConversionItemsInfo.ICProductConversionDesc.Trim(charsToTrim);
                    List.Add(objProductConversionItemsInfo);
                }
            }
            return List;
        }
    }
    #endregion
}