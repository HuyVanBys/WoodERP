using BOSLib;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ICProductItemMaterials
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ICProductItemMaterialsController
    //Created Date:Friday, January 04, 2019
    //-----------------------------------------------------------

    public class ICProductItemMaterialsController : BaseBusinessController
    {
        public ICProductItemMaterialsController()
        {
            dal = new DALBaseProvider("ICProductItemMaterials", typeof(ICProductItemMaterialsInfo));
        }

        public List<ICProductItemMaterialsInfo> GetByCarcassAndProductID(int? productCarcassID, int productID)
        {
            DataSet ds = dal.GetDataSet("ICProductItemMaterials_GetByCarcassAndProductID", productCarcassID, productID);
            List<ICProductItemMaterialsInfo> collection = new List<ICProductItemMaterialsInfo>();
            if (ds != null && ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductItemMaterialsInfo item = (ICProductItemMaterialsInfo)GetObjectFromDataRow(row);
                    collection.Add(item);
                }
            }
            return collection;
        }

        public void DeleteMaterialOfProductHasComponent(int productCarcassID)
        {
            dal.ExecuteStoredProcedure("ICProductItemMaterials_DeleteMaterialOfProductHasComponent", productCarcassID);
        }

        public List<ICProductItemMaterialsInfo> GetByCarcassID(int productCarcassID)
        {
            DataSet ds = dal.GetDataSet("ICProductItemMaterials_GetByCarcassID", productCarcassID);
            List<ICProductItemMaterialsInfo> collection = new List<ICProductItemMaterialsInfo>();
            if (ds != null && ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductItemMaterialsInfo item = (ICProductItemMaterialsInfo)GetObjectFromDataRow(row);
                    collection.Add(item);
                }
            }
            return collection;
        }
        public List<ICProductItemMaterialsInfo> GetListGroupByCarcassID(int productCarcassID)
        {
            DataSet ds = dal.GetDataSet("ICProductItemMaterials_GetListGroupByCarcassID", productCarcassID);
            List<ICProductItemMaterialsInfo> collection = new List<ICProductItemMaterialsInfo>();
            if (ds != null && ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductItemMaterialsInfo item = (ICProductItemMaterialsInfo)GetObjectFromDataRow(row);
                    collection.Add(item);
                }
            }
            return collection;
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ICProductItemMaterialsInfo> itemMaterialList = new List<ICProductItemMaterialsInfo>();
            if (ds != null && ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductItemMaterialsInfo objProductItemMaterialsInfo = (ICProductItemMaterialsInfo)GetObjectFromDataRow(row);
                    itemMaterialList.Add(objProductItemMaterialsInfo);
                }
            }
            ds.Dispose();
            return itemMaterialList;
        }

        public decimal GetMaterialQtyFromConfigRate(int materialProductID, decimal semiProductLength, decimal semiProductWidth, decimal semiProductHeight, int attributeWoodTypeID)
        {
            return (decimal)dal.GetSingleValue("ICProductItemMaterials_GetMaterialQtyFromConfigRate", materialProductID, semiProductLength, semiProductWidth, semiProductHeight, attributeWoodTypeID);
        }

        public List<ICProductItemMaterialsInfo> GetMaterialByProductionNormID(int productionNormID, int semiProductID = 0)
        {
            DataSet ds = dal.GetDataSet("ICProductItemMaterials_GetMaterialByProductionNormID", productionNormID, semiProductID);
            return (List<ICProductItemMaterialsInfo>)GetListFromDataSet(ds);
        }
        public List<ICProductItemMaterialsInfo> GetOperationProcessMaterialByProductionNormID(int productionNormID)
        {
            DataSet ds = dal.GetDataSet("ICProductItemMaterials_GetOperationProcessMaterialByProductionNormID", productionNormID);
            return (List<ICProductItemMaterialsInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}