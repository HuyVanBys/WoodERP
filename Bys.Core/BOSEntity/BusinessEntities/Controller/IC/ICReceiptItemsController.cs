using BOSCommon;
using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ICReceiptItems
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ICReceiptItemsController
    //Created Date:Saturday, May 31, 2008
    //-----------------------------------------------------------

    public class ICReceiptItemsController : BaseBusinessController
    {
        public ICReceiptItemsController()
        {
            dal = new DALBaseProvider("ICReceiptItems", typeof(ICReceiptItemsInfo));
        }

        public DataSet GetReceiptItemsByProductSerialNoAndStockID(
                                                            String strProductSerialNo,
                                                            int iStockID)
        {
            return dal.GetDataSet("ICReceiptItems_SelectByProductSerialNoAndStockID",
                                                         strProductSerialNo,
                                                         iStockID);
        }

        public ICReceiptItemsInfo GetReceiptItemByProductSerialNoAndStockID(
                                                            String strProductSerialNo,
                                                            int iStockID)
        {
            return (ICReceiptItemsInfo)dal.GetDataObject("ICReceiptItems_SelectByProductSerialNoAndStockID",
                                                         strProductSerialNo,
                                                         iStockID);
        }

        public DataSet GetReceiptItemsByProductSerialNo(String strProductSerialNo)
        {
            return dal.GetDataSet("ICReceiptItems_SelectByProductSerialNo", strProductSerialNo);
        }

        public ICReceiptItemsInfo GetReceiptItemByProductSerialNo(String strProductSerialNo)
        {
            return (ICReceiptItemsInfo)dal.GetDataObject("ICReceiptItems_SelectByProductSerialNo", strProductSerialNo);
        }

        public DataSet GetReceiptItemsByProductID(int iProductID)
        {
            return dal.GetDataSet("ICReceiptItems_SelectByProductID", iProductID);
        }

        public ICReceiptItemsInfo GetReceiptItemByProductID(int iProductID)
        {
            return (ICReceiptItemsInfo)dal.GetDataObject("ICReceiptItems_SelectByProductID", iProductID);
        }

        public DataSet GetReceiptItemsByProductIDAndStockID(int iProductID, int iStockID)
        {
            DataSet ds = GetReceiptItemsByProductID(iProductID);
            if (ds.Tables.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[i]);
                    if (objReceiptItemsInfo != null)
                        if (objReceiptItemsInfo.FK_ICStockID != iStockID)
                        {
                            ds.Tables[0].Rows.RemoveAt(i);
                            i--;
                        }
                }
            }
            return ds;
        }

        public ICReceiptItemsInfo GetReceiptItemByProductIDAndStockID(int iProductID, int iStockID)
        {
            DataSet ds = GetReceiptItemsByProductIDAndStockID(iProductID, iStockID);
            if (ds.Tables.Count > 0)
                return (ICReceiptItemsInfo)dal.GetSingleObject(ds.Tables[0]);
            return null;
        }

        /// <summary>
        /// Get receipt item by sale return id
        /// </summary>
        /// <param name="saleReturnID">Sale return id</param>
        /// <returns>Data of the receipt item</returns>
        public DataSet GetReceiptItemsBySaleReturnID(int saleReturnID)
        {
            return dal.GetDataSet("ICReceiptItems_GetReceiptItemsBySaleReturnID", saleReturnID);
        }

        /// <summary>
        /// Get Receipt item by sale return id and SaleReturn item id
        /// </summary>
        /// <param name="SaleReturnID">Sale return id</param>
        /// <param name="SaleReturnItemID">Sale return item id</param>
        /// <returns>Receipt item info</returns>
        public ICReceiptItemsInfo GetReceiptItemBySaleReturnIDAndSaleReturnItemID(int saleReturnID, int saleReturnItemID)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetReceiptItemBySaleReturnIDAndSaleReturnItemID", saleReturnID, saleReturnItemID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objReceiptItemsInfo;
            }
            return null;
        }

        /// <summary>
        /// Get receipt item by receipt id and item type
        /// </summary>
        /// <param name="receiptID">Receipt id</param>
        /// <param name="receiptItemType">Type of the receipt item</param>
        /// <returns>Data of the receipt item</returns>
        public DataSet GetReceiptItemByReceiptIDAndReceiptItemType(int receiptID, string receiptItemType)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetReceiptItemByReceiptIDAndReceiptItemType", receiptID, receiptItemType);
            return ds;
        }

        public List<ICReceiptItemsInfo> GetAllDataByPurchaseOrderItemID(int PurchaseOrderItemID)
        {
            DataSet ds = dal.GetAllDataByForeignColumn("FK_APPurchaseOrderItemID", PurchaseOrderItemID);
            List<ICReceiptItemsInfo> receiptItems = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(row);
                    receiptItems.Add(objReceiptItemsInfo);
                }
            }
            return receiptItems;
        }


        /// <summary>
        /// Get receipt item list including the item's components of a receipt
        /// </summary>
        /// <param name="receiptID">Receipt id</param>
        /// <returns>List of receipt items</returns>
        public List<ICReceiptItemsInfo> GetComponentItemsByReceiptID(int receiptID)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetComponentItemsByReceiptID", receiptID);
            List<ICReceiptItemsInfo> receiptItems = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(row);
                    receiptItems.Add(objReceiptItemsInfo);
                }
            }
            return receiptItems;
        }

        /// <summary>
        /// Get all items of a receipt
        /// </summary>
        /// <param name="receiptID">Receipt id</param>
        /// <returns>List of receipt items</returns>
        public List<ICReceiptItemsInfo> GetItemsByReceiptID(int receiptID)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetItemsByReceiptID", receiptID);
            List<ICReceiptItemsInfo> receiptItems = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(row);
                    receiptItems.Add(objReceiptItemsInfo);
                }
            }
            return receiptItems;
        }
        public List<ICReceiptItemsInfo> GetItemsByReceiptID_ForSemi(int receiptID)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetItemsByReceiptIDForSemi", receiptID);
            List<ICReceiptItemsInfo> receiptItems = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(row);
                    receiptItems.Add(objReceiptItemsInfo);
                }
            }
            return receiptItems;
        }

        /// <summary>
        /// Get total inventory cost of a product by date range
        /// </summary>
        /// <param name="productID">Product id</param>
        /// <param name="fromDate">Date the cost is calculated from</param>
        /// <param name="toDate">Date the cost is calculated to</param>
        /// <returns>Total inventory cost</returns>
        public decimal GetTotalInventoryCostByProductIDAndDate(int productID, DateTime? fromDate, DateTime? toDate)
        {
            decimal totalCost = Convert.ToDecimal(dal.GetSingleValue("ICReceiptItems_GetTotalInventoryCostByProductIDAndDate", productID, fromDate, toDate));
            return totalCost;
        }

        /// <summary>
        /// Get total receipted quantity of a product by date range
        /// </summary>        
        /// <param name="productID">Product id</param>
        /// /// <param name="fromDate">Date the quantity is calculated from</param>
        /// <param name="toDate">Date the quantity is calculated to</param>
        /// <returns>Total receipted quantity</returns>
        public decimal GetTotalQtyByProductIDAndDate(int productID, DateTime? fromDate, DateTime? toDate)
        {
            decimal totalQty = Convert.ToDecimal(dal.GetSingleValue("ICReceiptItems_GetTotalQtyByProductIDAndDate", productID, fromDate, toDate));
            return totalQty;
        }

        /// <summary>
        /// Get cost of goods sold of an item of a return receipt
        /// </summary>
        /// <param name="receiptItemID">Receipt item id</param>
        /// <returns>Cost of goods sold</returns>
        public decimal GetCostOfGoodsSold(int receiptItemID)
        {
            object costOfGoodsSold = dal.GetSingleValue("ICReceiptItems_GetCostOfGoodsSold", receiptItemID);
            return Convert.ToDecimal(costOfGoodsSold);
        }


        /// <summary>
        /// Get the total extended cost of a receipt
        /// </summary>
        /// <param name="receiptID">Receipt id</param>
        /// <returns>Extended cost</returns>
        public decimal GetTotalExtCostByReceiptID(int receiptID)
        {
            return Convert.ToDecimal(dal.GetSingleValue("ICReceiptItems_GetTotalExtCostByReceiptID", receiptID));
        }

        /// <summary>
        /// Get series for the cost adjustment
        /// </summary>        
        /// <param name="fromDate">Start receipt date at which a serie is retrieved</param>
        /// <param name="toDate">End receipt date at which a serie is retrieved</param>
        /// <returns>List of series, along with their original and adjusted inventory cost</returns>
        public List<ICReceiptItemsInfo> GetSeriesForCostAdjustment(DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetSeriesForCostAdjustment", fromDate, toDate);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            var result = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    var item = (ICReceiptItemsInfo)GetObjectFromDataRow(row);
                    result.Add(item);
                }
            }
            ds.Dispose();
            return result;
        }

        public List<ICReceiptItemsInfo> GetAllReceiptLumberAndlumberItem()
        {
            DataSet ds = dal.GetDataSet("ICReceiptLumbers_ICReceiptlumberItems");
            List<ICReceiptItemsInfo> receiptItems = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(row);
                    receiptItems.Add(objReceiptItemsInfo);
                }
            }
            return receiptItems;
        }

        public List<ICReceiptItemsInfo> GetAllDataByInvoiceInItemID(int invoiceInItemID)
        {
            DataSet ds = dal.GetAllDataByForeignColumn("FK_APInvoiceInItemID", invoiceInItemID);
            List<ICReceiptItemsInfo> receiptItems = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(row);
                    receiptItems.Add(objReceiptItemsInfo);
                }
            }
            return receiptItems;
        }



        public List<ICReceiptItemsInfo> GetReceiptItemsForInvoicing()
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetReceiptItemsForInvoicing");
            List<ICReceiptItemsInfo> receiptItems = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(row);
                    receiptItems.Add(objReceiptItemsInfo);
                }
            }
            return receiptItems;
        }

        public List<ICReceiptItemsInfo> GetAllReceiptItemsByProductID(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetAllReceiptItemsByProductID", batchProductID);
            List<ICReceiptItemsInfo> receiptItems = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(row);
                    receiptItems.Add(objReceiptItemsInfo);
                }
            }
            return receiptItems;
        }
        public List<ICReceiptItemsInfo> GetReceiptItemBottonClick(int batchProductID, int productID)
        {
            DataSet ds = dal.GetDataSet("ICReceuptItems_GetReceiptItemBottonClick", batchProductID, productID);
            List<ICReceiptItemsInfo> receiptItems = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(row);
                    receiptItems.Add(objReceiptItemsInfo);
                }
            }
            return receiptItems;
        }

        /// <summary>
        /// Get all items of a receipt
        /// </summary>
        /// <param name="receiptID">Receipt id</param>
        /// <returns>List of receipt items</returns>
        public List<ICReceiptItemsInfo> GetWoodReceiptItemForShipment(DateTime fromdate)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetWoodReceiptItemForShipment", fromdate);
            List<ICReceiptItemsInfo> receiptItems = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(row);
                    receiptItems.Add(objReceiptItemsInfo);
                }
            }
            return receiptItems;
        }
        public List<ICReceiptItemForViews> ICReceiptItems_ShowRoundWood(DateTime fromdate)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_ShowRoundWood", fromdate);
            List<ICReceiptItemForViews> receiptItems = new List<ICReceiptItemForViews>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemForViews objReceiptItemsInfo = (ICReceiptItemForViews)SqlDatabaseHelper.GetObjectFromDataRow(row, typeof(ICReceiptItemForViews));
                    if (objReceiptItemsInfo.ICReceiptItemProductQty > 0)
                    {
                        receiptItems.Add(objReceiptItemsInfo);
                    }
                }
            }
            ds.Dispose();
            return receiptItems;
        }
        public List<ICReceiptItemForViews> ICReceiptItems_ShowLumber(DateTime fromdate)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_ShowLumber", fromdate);
            List<ICReceiptItemForViews> receiptItems = new List<ICReceiptItemForViews>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemForViews objReceiptItemsInfo = (ICReceiptItemForViews)SqlDatabaseHelper.GetObjectFromDataRow(row, typeof(ICReceiptItemForViews));
                    if (objReceiptItemsInfo.ICReceiptItemProductQty > 0)
                    {
                        receiptItems.Add(objReceiptItemsInfo);
                    }
                }
            }
            ds.Dispose();
            return receiptItems;
        }

        public List<ICReceiptItemsInfo> GetCompletedBatchProductByDate(int? batchID
                                                                       , int? proposalID
                                                                       , int? saleOrderID
                                                                       , int? productID
                                                                       , int batchComponent
                                                                       , DateTime fromDate
                                                                       , DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetCompletedBatchProductByDate", batchID, productID, proposalID, saleOrderID, batchComponent, fromDate, toDate);
            List<ICReceiptItemsInfo> receiptItems = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(row);
                    receiptItems.Add(objReceiptItemsInfo);
                }
            }
            return receiptItems;
        }

        public List<ICReceiptItemsInfo> GetCompletedBatchProductByDateNotBatchComponent(int? batchID
                                                                       , int? proposalID
                                                                       , int? saleOrderID
                                                                       , int? productID
                                                                       , DateTime fromDate
                                                                       , DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetCompletedBatchProductByDateNotBatchComponent", batchID, productID, proposalID, saleOrderID, fromDate, toDate);
            List<ICReceiptItemsInfo> receiptItems = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(row);
                    receiptItems.Add(objReceiptItemsInfo);
                }
            }
            return receiptItems;
        }

        public List<ICReceiptItemsInfo> GetReceiptItemByBatchProductID(int batchProductID, int productID)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetReceiptItemByBatchProductID", batchProductID, productID);
            List<ICReceiptItemsInfo> receiptList = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(row);
                    receiptList.Add(objReceiptItemsInfo);
                }
            }
            return receiptList;
        }

        public List<ICReceiptItemsInfo> GetReceiptItemByOperationIDAndDate(int operationID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetReceiptItemByOperationIDAndDate", operationID, fromDate, toDate);
            List<ICReceiptItemsInfo> receiptItems = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(row);
                    receiptItems.Add(objReceiptItemsInfo);
                }
            }
            return receiptItems;
        }

        public List<ICReceiptItemsInfo> GetReceiptItemByAllOperationIDAndDate(DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetReceiptItemByAllOperationIDAndDate", fromDate, toDate);
            List<ICReceiptItemsInfo> receiptItems = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(row);
                    receiptItems.Add(objReceiptItemsInfo);
                }
            }
            return receiptItems;
        }

        public List<ICReceiptItemsInfo> GetReceiptItemByBatchProductIDAndOperationIDAndDate(int batchProductID, int operationID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetReceiptItemByBatchProductIDAndOperationIDAndDate", batchProductID, operationID, fromDate, toDate);
            List<ICReceiptItemsInfo> receiptItems = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(row);
                    receiptItems.Add(objReceiptItemsInfo);
                }
            }
            return receiptItems;
        }

        public List<ICReceiptItemsInfo> GetReceiptItemVLPByBatchProductIDAndOperationIDAndDate(int batchProductID, int operationID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetReceiptItemVLPByBatchProductIDAndOperationIDAndDate", batchProductID, operationID, fromDate, toDate);
            List<ICReceiptItemsInfo> receiptItems = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(row);
                    receiptItems.Add(objReceiptItemsInfo);
                }
            }
            return receiptItems;
        }

        public ICReceiptItemsInfo GetReceiptItemByBatchProductIDAndProductID(int batchProductID, int productID)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetReceiptItemByBatchProductIDAndProductID", batchProductID, productID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objReceiptItemsInfo;
            }
            return null;
        }

        public ICReceiptItemsInfo GetReceiptItemByBatchProductIDAndProductID2(int batchProductID, int productID, int operationID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetReceiptItemByBatchProductIDAndProductID", batchProductID, productID, operationID, fromDate, toDate);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objReceiptItemsInfo;
            }
            return null;
        }

        public List<ICReceiptItemsInfo> GetItemForFreshLumberShipment()
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetItemForFreshLumberShipment");
            List<ICReceiptItemsInfo> receiptItems = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(row);
                    receiptItems.Add(objReceiptItemsInfo);
                }
            }
            return receiptItems;
        }
        public List<ICReceiptItemsInfo> GetNewICReceiptItems(string productType, string typeCombo)
        {
            DataSet ds = dal.GetDataSet("ICShipmentItems_GetNewICReceiptItems", productType, typeCombo);
            List<ICReceiptItemsInfo> receiptItems = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(row);
                    receiptItems.Add(objReceiptItemsInfo);
                }
            }
            return receiptItems;
        }

        public List<ICReceiptItemsInfo> GetGoodsReceiptList()
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetGoodsReceiptList");
            List<ICReceiptItemsInfo> receiptItems = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(row);
                    receiptItems.Add(objReceiptItemsInfo);
                }
            }
            return receiptItems;
        }


        public List<ICReceiptItemsInfo> GetReceiptList_ByType(string type)
        {
            DataSet ds = dal.GetDataSet("ICReceipts_GetReceiptByReceiptType_andStatus", type);
            List<ICReceiptItemsInfo> receiptItems = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(row);
                    receiptItems.Add(objReceiptItemsInfo);
                }
            }
            return receiptItems;
        }

        public List<ICReceiptItemsInfo> GetReceiptItemsForShipment()
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetReceiptItemsForShipment");
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }
        public decimal GetReceiptItemsForBatchProductionNormItemID(int FK_MMBatchProductProductionNormItemID, int Operation)
        {
            Object obj = dal.GetSingleValue("ICReceiptItems_GetReceiptItemsForBatchProductionNormItemID", FK_MMBatchProductProductionNormItemID, Operation);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }
        public decimal GetReceiptItemQtyForBatchProductItemID(int batchProductProductID, int operationID, int productID)
        {
            Object obj = dal.GetSingleValue("ICReceiptItems_GetReceiptItemQtyForBatchProductID", batchProductProductID, operationID, productID);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }
        public decimal GetReceiptQtyByProductID(int productID, int batchProductID, int operationID, int icproductForBatch)
        {
            Object obj = dal.GetSingleValue("ICReceiptItems_GetReceiptQtyByProductID", productID, batchProductID, operationID, icproductForBatch);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }
        public decimal GetReceiptQtyByProductIDFORDG(int productID, int batchProductID, int operationID)
        {
            Object obj = dal.GetSingleValue("ICReceiptItems_GetReceiptQtyByProductIDFORDG", productID, batchProductID, operationID);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }

        public decimal GetReceiptQtyForCheckingSemiProductReceipt(int productID, int batchProductID, int operationID, int batchProductItemID)
        {
            Object obj = dal.GetSingleValue("ICReceiptItems_GetReceiptQtyForCheckingSemiProductReceipt", productID, batchProductID, operationID, batchProductItemID);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }
        public decimal GetReceiptQtyByNormItemID(int productID, int batchProductID, int operationID, int NormItemID)
        {
            Object obj = dal.GetSingleValue("ICReceiptItems_GetReceiptQtyByNormItemID", productID, batchProductID, operationID, NormItemID);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }
        public decimal GetReceiptItemRemainQtyByNormItemID(int productID, int batchProductID, int operationID, int NormItemID, int? receiptItemID)
        {
            Object obj = dal.GetSingleValue("ICReceiptItems_GetReceiptItemRemainQtyByNormItemID", productID, batchProductID, operationID, NormItemID, receiptItemID);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }

        public List<ICReceiptItemsInfo> GetSubRoundWoodReceiptByBatchProductIDOperationIDAndDate(int batchProductID, int operationID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetSubRoundWoodReceiptByBatchProductIDOperationIDAndDate", batchProductID, operationID, fromDate, toDate);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICReceiptItemsInfo> GetAllFreshLumberReceiptItemByBatchProductIDOperationIDAndDate(int batchProductID, int operationID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetAllFreshLumberReceiptItemByBatchProductIDOperationIDAndDate", batchProductID, operationID, fromDate, toDate);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICReceiptItemsInfo> GetReceiptHeatItemByBatchProductIDOperationIDAndDate(int batchProductID, int operationID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetReceiptHeatItemByBatchProductIDOperationIDAndDate", batchProductID, operationID, fromDate, toDate);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICReceiptItemsInfo> GetDryLumberReceiptItemByBatchProductIDOperationIDAndDate(int batchProductID, int operationID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetDryLumberReceiptItemByBatchProductIDOperationIDAndDate", batchProductID, operationID, fromDate, toDate);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICReceiptItemsInfo> GetDryLumberReceiptItemByBatchProductIDAndProductID(int batchProductID, int productID)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetDryLumberReceiptItemByBatchProductIDAndProductID", batchProductID, productID);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICReceiptItemsInfo> GetReceiptItemByTypeLumber(string receiptTypeCombo, string receiptReceiptType)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetReceiptItemByTypeLumber", receiptTypeCombo, receiptReceiptType);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }
        public DataSet GetDistinctProductUnitCostList(int? productID, int? supplierID, DateTime? fromDate, DateTime? toDate, int currencyID, string productDesc)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetDistinctProductUnitCostList", productID, supplierID, fromDate, toDate, currencyID, productDesc);
            return ds;
        }
        public DataSet GetDistinctProductUnitCostList2(int? productID, int? supplierID, DateTime? fromDate, DateTime? toDate, int currencyID)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetDistinctProductUnitCostList2", productID, supplierID, fromDate, toDate, currencyID);
            return ds;
        }
        public List<ICReceiptItemsInfo> GetReceiptItemsByPurchaseOrderItemID(int purchaseOrderItemID)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetReceiptItemsByPurchaseOrderItemID", purchaseOrderItemID);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICReceiptItemsInfo> GetSumItemForGenerateAccountingData(int receiptID)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetSumItemForGenerateAccountingData", receiptID);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }
        public bool IsProductionOrOurSoucingReceipt(int ProductID, int ProductSeries)
        {
            bool flag = false;
            ICReceiptItemsInfo objReceiptItemsInfo = new ICReceiptItemsInfo();
            objReceiptItemsInfo = (ICReceiptItemsInfo)dal.GetDataObject("ICReceiptItems_GetTypeReceiptByProductSeries", ProductID, ProductSeries);
            if (objReceiptItemsInfo != null && objReceiptItemsInfo.ICReceiptTypeCombo.Equals(ReceiptType.PurchaseReceipt.ToString())) //Là gia công (Nhập kho mua hàng)
            {
                flag = false;
            }
            else //Là Sản xuất (Nhập kho thành phẩm / bán thành phẩm)
            {
                flag = true;
            }
            return flag;

        }

        public List<ICReceiptItemsInfo> GetAllReceiptItemByBatchProductIDAndOperationIDAndDate(int batchProductID, int operationID, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetAllReceiptItemByBatchProductIDAndOperationIDAndDate", batchProductID, operationID, toDate);
            List<ICReceiptItemsInfo> receiptItems = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(row);
                    receiptItems.Add(objReceiptItemsInfo);
                }
            }
            return receiptItems;
        }
        public decimal GetQtyByStockAndProductID(int productID, int Stockid)
        {
            Object obj = dal.GetSingleValue("ICReceiptItem_GetQtyByStockAndProductID", productID, Stockid);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }
        public List<ICReceiptItemsInfo> GetItemByProductIDAndStockID(int ProductID, int StockID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICRececeiptItems_GetItemByProductIDAndStockID", ProductID, StockID, fromDate, toDate);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICReceiptItemsInfo> GetListReceiptItemForShipmentCD(string Acceptance)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetListReceiptItemForShipmentCD", Acceptance);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICReceiptItemsInfo> GetReceiptCDItemForReport144(DateTime FromDate, DateTime ToDate, string PackNo, string SerieNo)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetReceiptCDItemForReport144", FromDate, ToDate, PackNo, SerieNo);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICReceiptItemsInfo> GetListItemByReceiptID(int receiptID)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetListItemByReceiptID", receiptID);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICReceiptItemsInfo> GetAllReceiptItemForRPStampProductsByReceiptID(int receiptID)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetAllReceiptItemForRPStampProductsByReceiptID", receiptID);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }

        public List<string> GetSeriesNoForReport144(string PackNo)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetSeriesNoForReport144", PackNo);
            List<string> SeriesNoList = new List<string>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(row);
                    string[] SeriesNo = objReceiptItemsInfo.ICReceiptItemProductSerialNo.Split('.');
                    if (!SeriesNoList.Contains(SeriesNo[0]))
                        SeriesNoList.Add(SeriesNo[0]);
                }
            }
            return SeriesNoList;
        }
        public ICReceiptItemsInfo GetUnitCostByProductID(int productID)
        {
            return (ICReceiptItemsInfo)dal.GetDataObject("ICReceiptItems_GetUnitCostByProductID", productID);
        }
        public ICReceiptItemsInfo GetReceiptItemByProductSerieIDAndStockID(
                                                            string productSerieNo,
                                                            int stockID,
                                                            int productID)
        {
            return (ICReceiptItemsInfo)dal.GetDataObject("ICReceiptItems_GetReceiptItemByProductSerieIDAndStockID",
                                                         productSerieNo,
                                                         stockID,
                                                         productID);
        }

        public List<ICReceiptItemsInfo> GetReceiptItemForReport163(DateTime FromDate, DateTime ToDate, int objectID, string ObjectType)
        {
            ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
            List<ICReceiptItemsInfo> list = new List<ICReceiptItemsInfo>();

            DataSet ds = dal.GetDataSet("ICReceiptItems_GetReceiptItemForReport163", FromDate, ToDate, objectID, ObjectType);

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(row);
                    //objReceiptItemsInfo.PurchaseOrderContractDate = objReceiptItemsInfo.APPurchaseOrderContractDate.ToShortDateString();
                    //objReceiptItemsInfo.InvoiceInVATDate = objReceiptItemsInfo.APInvoiceInVATDate.ToShortDateString();
                    //if (objReceiptItemsInfo.APPurchaseOrderChannel == PurchaseOrderChannel.HinterLand.ToString())
                    //{
                    //    objReceiptItemsInfo.ReceiptDate = objReceiptItemsInfo.PurchaseOrderContractDate;
                    //}
                    //else if (objReceiptItemsInfo.APPurchaseOrderChannel == PurchaseOrderChannel.HinterLand.ToString())
                    //{
                    //    objReceiptItemsInfo.ReceiptDate = objReceiptItemsInfo.InvoiceInVATDate;
                    //}

                    list.Add(objReceiptItemsInfo);
                }
            }
            return list;
        }
        public decimal GetReceiptQtyByProductIDForTransfer(int productID, int batchProductID, int operationID, int icproductForBatch)
        {
            Object obj = dal.GetSingleValue("ICReceiptItems_GetReceiptQtyByProductIDForTransfer", productID, batchProductID, operationID, icproductForBatch);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }
        public decimal GetReceiptQtyForCheckingSemiProductReceiptForTransfer(int productID, int batchProductID, int operationID, int batchProductItemID)
        {
            Object obj = dal.GetSingleValue("ICReceiptItems_GetReceiptQtyForCheckingSemiProductReceiptForTransfer", productID, batchProductID, operationID, batchProductItemID);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }
        public decimal GetReceiptQtyByProductIDFORDGForTransfer(int productID, int batchProductID, int operationID)
        {
            Object obj = dal.GetSingleValue("ICReceiptItems_GetReceiptQtyByProductIDFORDGForTransfer", productID, batchProductID, operationID);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }


        public decimal GetTotalReceiptBlocksByBatchProductIDAndOperationIDAndDate(int batchProductID, int operationID, DateTime toDate)
        {
            Object obj = dal.GetSingleValue("ICReceiptItems_GetTotalReceiptBlocksByBatchProductIDAndOperationIDAndDate", batchProductID, operationID, toDate);
            decimal totalReceiptBlocks = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out totalReceiptBlocks);

            return totalReceiptBlocks;
        }
        public List<ICReceiptItemsInfo> GetSemiProductReceiptByOperation(DateTime FromDate, DateTime ToDate, int? operationID, int? departmentID)
        {
            ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
            List<ICReceiptItemsInfo> list = new List<ICReceiptItemsInfo>();

            DataSet ds = dal.GetDataSet("ICReceiptItems_GetSemiProductReceiptByOperation", FromDate, ToDate, operationID, departmentID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(row);
                    list.Add(objReceiptItemsInfo);
                }
            }
            return list;
        }

        public List<ICReceiptItemsInfo> GetDataForReport183(int batchProductID, int productID, DateTime FromDate, DateTime ToDate)
        {
            ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
            List<ICReceiptItemsInfo> list = new List<ICReceiptItemsInfo>();

            DataSet ds = dal.GetDataSet("ICReceiptItems_GetDataForReport183", batchProductID, productID, FromDate, ToDate);

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(row);
                    if (objReceiptItemsInfo.TotalBlock > 0)
                    {
                        objReceiptItemsInfo.TyLePhoi = objReceiptItemsInfo.KLNhapPhoi / objReceiptItemsInfo.TotalBlock * 100;
                        objReceiptItemsInfo.TyLeSoChe = objReceiptItemsInfo.KLNhapSoChe / objReceiptItemsInfo.TotalBlock * 100;
                        objReceiptItemsInfo.TyLeTinhChe = objReceiptItemsInfo.KLNhapTinhChe / objReceiptItemsInfo.TotalBlock * 100;
                        objReceiptItemsInfo.TyLeLapRap = objReceiptItemsInfo.KLNhapLapRap / objReceiptItemsInfo.TotalBlock * 100;
                        objReceiptItemsInfo.TyLeSon = objReceiptItemsInfo.KLNhapSon / objReceiptItemsInfo.TotalBlock * 100;
                        objReceiptItemsInfo.TyLeDongGoi = objReceiptItemsInfo.KLNhapDongGoi / objReceiptItemsInfo.TotalBlock * 100;
                    }

                    list.Add(objReceiptItemsInfo);
                }
            }
            return list;
        }

        public List<ICReceiptItemsInfo> GetReceiptItemForReturnSuplier(int objectID, string objectType, DateTime? fromDate, DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetReceiptItemForReturnSupplier", objectID, objectType, fromDate, toDate);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }

        public decimal GetReceiptItemRemainQtyForReturnSuplier(int receiptItemID, int returnSupplierItemID)
        {
            return (decimal)dal.GetSingleValue("ICReceiptItems_GetReceiptItemRemainQtyForReturnSuplier", receiptItemID, returnSupplierItemID);
        }

        public List<ICReceiptItemsInfo> GetReceiptItemsForInvoicingByRef(string receiptRef)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetReceiptItemsForInvoicingByRef", receiptRef);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }
        public decimal GetMaterialUnitCostByProductIDAndQualityIDAndEffetiveDate(int productID, int qualityID, DateTime effectiveDate)
        {
            Object obj = dal.GetSingleValue("ICReceiptItems_GetMaterialUnitCostByProductIDAndQualityIDAndEffetiveDate", productID, qualityID, effectiveDate);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }
        public List<ICReceiptItemsInfo> GetReceiptItemQRCodeProductByRef(string receiptItemRef)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetReceiptItemQRCodeProductByRef", receiptItemRef);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICReceiptItemsInfo> GetReceiptItemForProductionCost(DateTime fromDate, DateTime toDate, int formulaID)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetReceiptItemForProductionCost", fromDate, toDate, formulaID);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICReceiptItemsInfo> GetReceiptItemOutsourcingForShipment(int receiptID, int batchProductID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetReceiptItemOutsourcingForShipment", receiptID, batchProductID, fromDate, toDate);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICReceiptItemsInfo> GetProductionNormRemainQtyBySomeCriteria(int? receiptID)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetProductionNormRemainQtyBySomeCriteria", receiptID);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICReceiptItemsInfo> GetPurchaseOrderItemNearestPrice(int productID, string productDesc, int objectID, string objectType, int currencyID, DateTime poDate)
        {
            ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
            List<ICReceiptItemsInfo> list = new List<ICReceiptItemsInfo>();

            DataSet ds = dal.GetDataSet("ICReceiptItems_GetPurchaseOrderItemNearestPrice", productID, productDesc, objectID, objectType, currencyID, poDate);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(row);
                    list.Add(objReceiptItemsInfo);
                }
            }
            ds.Dispose();
            return list;
        }

        public bool IsReceiptedComplete(int purchaseOrderItemID, decimal purchaseOrderItemQty)
        {
            return (bool)dal.GetSingleValue("ICReceiptItems_IsReceiptedComplete", purchaseOrderItemID, purchaseOrderItemQty);
        }
        public List<ICReceiptItemsInfo> GetItemSemiProductRemainBySomeCriteria(int receiptID, int batchProductID, DateTime fromDate, DateTime toDate
                                                                        , int? userID,
                                                                        string moduleName,
                                                                        string permissionType,
                                                                        int? branchID)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetItemSemiProductRemainBySomeCriteria", receiptID, batchProductID, fromDate, toDate, userID, moduleName, permissionType, branchID);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICReceiptItemsInfo> GetReceiptItemByListItemID(string receiptItemRef)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetReceiptItemByListItemID", receiptItemRef);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICReceiptItemsInfo> GetShipmentMaterialForOperationReceipt(int receiptID)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetShipmentMaterialForOperationReceipt", receiptID);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ICReceiptItemsInfo> GetShipmentFromProductConversion(int receiptID, DateTime fromDate, DateTime toDate, int? userID, string moduleName, string permissionType, int? branchID)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetShipmentFromProductConversion", receiptID, fromDate, toDate, userID, moduleName, permissionType, branchID);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }

        public void UpdateSerieReceiptNoByWoodType(int receiptID, bool isWoodType)
        {
            dal.ExecuteStoredProcedure("ICReceiptItems_UpdateSerieReceiptNoByWoodType", receiptID, isWoodType);
        }
        public void UpdatePackageNumering(int receiptID)
        {
            dal.ExecuteStoredProcedure("ICReceiptItems_UpdatePackageNumering", receiptID);
        }
        public List<ICReceiptItemsInfo> GetTotalReceiptItemQtyByPurchaseOrderItemListID(string PurchaseOrderItemListID)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetTotalReceiptItemQtyByPurchaseOrderItemListID", PurchaseOrderItemListID);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICReceiptItemsInfo> GetPlanResultComplete(int batchProductID, int productID, DateTime FromDate, DateTime ToDate, bool isGetPlan, bool isReceipt)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetPlanResultComplete",  batchProductID, productID, FromDate, ToDate, isGetPlan, isReceipt);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }
        public ICReceiptItemsInfo CheckExistBillOfLadings(int billOfLadingItemID)
        {
            return (ICReceiptItemsInfo)dal.GetDataObject("ICReceiptItems_CheckExistBillOfLadings", billOfLadingItemID);
        }
        public List<ICReceiptItemsInfo> GetReceiptItemForReturnShipping(int receiptID)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetReceiptItemForReturnShipping", receiptID);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ICReceiptItemsInfo> GetRemainReceiptItemForInvoiceIn(string receiptItemIDs, int invoiceInID)
        {
            DataSet ds = dal.GetDataSet("ICReceiptItems_GetRemainReceiptItemForInvoiceIn", receiptItemIDs, invoiceInID);
            return (List<ICReceiptItemsInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}