using BOSLib;
using System;
using System.Data;

namespace BOSERP
{
    #region ICInventoryStockSerials
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ICInventoryStockSerialsController
    //Created Date:Wednesday, July 16, 2008
    //-----------------------------------------------------------

    public class ICInventoryStockSerialsController : BaseBusinessController
    {
        private readonly string spGetInventoryStockSerialByProductAndProductSerialNoAndStock =
                                "ICInventoryStockSerials_SelectByProductAndProductSerialNoAndStock";

        public ICInventoryStockSerialsController()
        {
            dal = new DALBaseProvider("ICInventoryStockSerials", typeof(ICInventoryStockSerialsInfo));
        }

        public ICInventoryStockSerialsInfo GetInventoryStockSerialByProductAndProductSerialNoAndStock(int iProductID, String strProductSerialNo, int iStockID)
        {
            return (ICInventoryStockSerialsInfo)dal.GetDataObject(spGetInventoryStockSerialByProductAndProductSerialNoAndStock, iProductID, strProductSerialNo, iStockID);
        }

        public DataSet GetInventoryStockSerialsByProductSerialNoAndStockID(String strProductSerialNo, int iStockID)
        {
            return dal.GetDataSet("ICInventoryStockSerials_SelectByProductSerialNoAndStockID", strProductSerialNo, iStockID);
        }

        public ICInventoryStockSerialsInfo GetInventoryStockSerialByProductSerialNoAndStockID(String strProductSerialNo, int iStockID)
        {
            return (ICInventoryStockSerialsInfo)dal.GetDataObject("ICInventoryStockSerials_SelectByProductSerialNoAndStockID", strProductSerialNo, iStockID);
        }

        public DataSet GetInventoryStockSerialsByProductSerialNo(String strProductSerialNo)
        {
            return dal.GetDataSet("ICInventoryStockSerials_SelectByProductSerialNo", strProductSerialNo);
        }

        public ICInventoryStockSerialsInfo GetInventoryStockSerialByProductSerialNo(String strProductSerialNo)
        {
            return (ICInventoryStockSerialsInfo)dal.GetDataObject("ICInventoryStockSerials_SelectByProductSerialNo", strProductSerialNo);
        }

        public DataSet GetInventoryStockSerialsByProductID(int iProductID)
        {
            return dal.GetDataSet("ICInventoryStockSerials_SelectByProductID", iProductID);
        }

        public ICInventoryStockSerialsInfo GetInventoryStockSerialByProductID(int iProductID)
        {
            return (ICInventoryStockSerialsInfo)dal.GetDataObject("ICInventoryStockSerials_SelectByProductID", iProductID);
        }

        public DataSet GetInventoryStockSerialsByProductIDAndStockID(int iProductID, int iStockID)
        {
            DataSet ds = GetInventoryStockSerialsByProductID(iProductID);
            if (ds.Tables.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    ICInventoryStockSerialsInfo objInventoryStockSerialsInfo = (ICInventoryStockSerialsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[i]);
                    if (objInventoryStockSerialsInfo != null)
                        if (objInventoryStockSerialsInfo.FK_ICStockID != iStockID)
                        {
                            ds.Tables[0].Rows.RemoveAt(i);
                            i--;
                        }
                }
            }
            return ds;
        }

        public ICInventoryStockSerialsInfo GetInventoryStockSerialByProductIDAndStockID(int iProductID, int iStockID)
        {
            DataSet ds = GetInventoryStockSerialsByProductIDAndStockID(iProductID, iStockID);
            if (ds.Tables.Count > 0)
                return (ICInventoryStockSerialsInfo)dal.GetSingleObject(ds.Tables[0]);
            return null;
        }

        public DataSet GetInventoryStockSerialByFK_ICStockID_AndPositiveQuantity(int iStockID)
        {
            DataSet ds = dal.GetDataSet("ICInventoryStockSerials_SelectByFK_ICStockID", iStockID);
            if (ds.Tables.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    ICInventoryStockSerialsInfo objInventoryStockSerialsInfo = (ICInventoryStockSerialsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[i]);
                    if (objInventoryStockSerialsInfo != null)
                        if (objInventoryStockSerialsInfo.ICInventoryStockSerialQuantity <= 0)
                        {
                            ds.Tables[0].Rows.RemoveAt(i);
                            i--;
                        }
                }
            }
            return ds;
        }

        public ICInventoryStockSerialsInfo GetInventoryStockSerialByStockIDAndProductSerieID(int stockID, int productSerieID)
        {
            String query = String.Format("SELECT * FROM ICInventoryStockSerials WHERE AAStatus = 'Alive' AND FK_ICStockID = {0} AND FK_ICProductSerieID = {1}", stockID, productSerieID);
            DataSet ds = dal.GetDataSet(query);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (ICInventoryStockSerialsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }
    }
    #endregion
}