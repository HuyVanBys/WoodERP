using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ICProductGroups
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ICProductGroupsController
    //Created Date:Monday, March 01, 2010
    //-----------------------------------------------------------

    public class ICProductGroupsController : BaseBusinessController
    {
        public ICProductGroupsController()
        {
            dal = new DALBaseProvider("ICProductGroups", typeof(ICProductGroupsInfo));
        }

        public ICDepartmentsInfo GetDepartmentByProductGroupID(int productGroupID)
        {
            ICProductGroupsInfo objProductGroupsInfo = (ICProductGroupsInfo)this.GetObjectByID(productGroupID);
            if (objProductGroupsInfo != null)
            {
                while (objProductGroupsInfo.ICProductGroupParentID > 0)
                {
                    objProductGroupsInfo = (ICProductGroupsInfo)this.GetObjectByID(objProductGroupsInfo.ICProductGroupParentID);
                }
                ICDepartmentsController objDepartmentsController = new ICDepartmentsController();
                return (ICDepartmentsInfo)objDepartmentsController.GetObjectByID(objProductGroupsInfo.FK_ICDepartmentID);
            }
            return null;
        }

        public override DataSet GetAllDataByForeignColumn(string strForeignColumnName, object objForeignColumnValue)
        {
            if (strForeignColumnName == "FK_ICDepartmentID")
            {
                return dal.GetDataSet("ICProductGroups_GetRootProductGroupsByDepartmentID", objForeignColumnValue);
            }
            else
            {
                return base.GetAllDataByForeignColumn(strForeignColumnName, objForeignColumnValue);
            }
        }

        /// <summary>
        /// Get product count of a product group
        /// </summary>
        /// <param name="productGroupID">Product group id</param>
        /// <returns>Count of products</returns>
        public int GetProductCountByProductGroupID(int productGroupID)
        {
            DataSet ds = dal.GetDataSet("ICProductGroups_GetProductCountByProductGroupID", productGroupID);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0][0] != DBNull.Value)
                {
                    return Convert.ToInt32(ds.Tables[0].Rows[0][0]);
                }
            }
            return 0;
        }

        /// <summary>
        /// Get product group by product group parent id
        /// </summary>
        /// <param name="productGroupParentID">The product group parent id</param>
        /// <returns>List of product group</returns>
        public DataSet GetProductGroupByProductGroupParentID(int productGroupParentID)
        {
            DataSet ds = dal.GetDataSet("ICProductGroups_GetProductGroupByProductGroupParentID", productGroupParentID);
            return ds;
        }

        /// <summary>
        /// Get product groups that have not child by some criteria
        /// </summary>
        /// <param name="departmentID">Department id</param>
        /// <param name="productGroupID">ID of product group that the result ones are child of</param>
        /// <param name="level">Level that the result product groups is not greater than</param>
        /// <returns>Product group list</returns>
        public List<ICProductGroupsInfo> GetLeafProductGroupList(int? departmentID, int? productGroupID, int? level)
        {
            DataSet ds = dal.GetDataSet("ICProductGroups_GetLeafProductGroupList", departmentID, productGroupID, level);
            List<ICProductGroupsInfo> productGroups = new List<ICProductGroupsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductGroupsInfo objProductGroupsInfo = (ICProductGroupsInfo)GetObjectFromDataRow(row);
                    productGroups.Add(objProductGroupsInfo);
                }
            }
            return productGroups;
        }

        public ICProductGroupsInfo GetProductGroupByID(int productGroupID)
        {
            DataSet ds = dal.GetDataSet("ICProductGroups_GetProductGroupByID", productGroupID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductGroupsInfo objProductGroupsInfo = (ICProductGroupsInfo)GetObjectFromDataRow(row);
                    return objProductGroupsInfo;
                }
            }
            return null;
        }



        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ICProductGroupsInfo> productGroups = new List<ICProductGroupsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductGroupsInfo objProductGroupsInfo = (ICProductGroupsInfo)GetObjectFromDataRow(row);
                    productGroups.Add(objProductGroupsInfo);
                }
            }
            return productGroups;
        }

        public ICProductGroupsInfo GetRootProductGroupByICProductGroupParentID(int productGroupParentID, int fK_ICDepartmentID)
        {
            ICProductGroupsInfo objBackupProductGroupsInfo = new ICProductGroupsInfo();
            while (productGroupParentID > 1)
            {
                ICProductGroupsInfo objProductGroupsInfo = GetProductGroupByICProductGroupParentID(productGroupParentID, fK_ICDepartmentID);
                if (objProductGroupsInfo == null)
                    objProductGroupsInfo = new ICProductGroupsInfo();
                if (objProductGroupsInfo.FK_ICDepartmentID == 1 && objProductGroupsInfo.ICProductGroupParentID == 1)
                    return objProductGroupsInfo;
                if (objProductGroupsInfo.FK_ICDepartmentID != 1 && objProductGroupsInfo.ICProductGroupParentID == 0)
                    return objProductGroupsInfo;
                productGroupParentID = objProductGroupsInfo.ICProductGroupParentID;
                fK_ICDepartmentID = objProductGroupsInfo.FK_ICDepartmentID;
                objBackupProductGroupsInfo = objProductGroupsInfo;
            }
            objBackupProductGroupsInfo.ICProductGroupName = "Nhóm hàng khác";
            return objBackupProductGroupsInfo;
        }

        public ICProductGroupsInfo GetProductGroupByICProductGroupParentID(int productGroupParentID, int fK_ICDepartmentID)
        {
            DataSet ds = dal.GetDataSet("ICProductGroups_GetProductGroupByICProductGroupParentID", productGroupParentID, fK_ICDepartmentID);
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                {
                    foreach (DataRow row in ds.Tables[0].Rows)
                    {
                        ICProductGroupsInfo objProductGroupsInfo = (ICProductGroupsInfo)GetObjectFromDataRow(row);
                        return objProductGroupsInfo;
                    }
                }
            }
            return null;
        }

        public List<ICProductGroupsInfo> GetProductGroupbyDepartmentNo()
        {
            DataSet ds = dal.GetDataSet("ICProductGroups_GetProductGroupbyDepartmentNo");
            List<ICProductGroupsInfo> productGroups = new List<ICProductGroupsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductGroupsInfo objProductGroupsInfo = (ICProductGroupsInfo)GetObjectFromDataRow(row);
                    productGroups.Add(objProductGroupsInfo);
                }
            }
            return productGroups;
        }

        public List<ICProductGroupsInfo> GetProductGroupListByDepartmentNo(string departmentNo)
        {
            DataSet ds = dal.GetDataSet("ICProductGroups_GetProductGroupListByDepartmentNo", departmentNo);
            List<ICProductGroupsInfo> productGroups = new List<ICProductGroupsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductGroupsInfo objProductGroupsInfo = (ICProductGroupsInfo)GetObjectFromDataRow(row);
                    productGroups.Add(objProductGroupsInfo);
                }
            }
            return productGroups;
        }

        public List<ICProductGroupsInfo> GetAllObjectList()
        {
            DataSet ds = GetAllObjects();
            List<ICProductGroupsInfo> productGroups = new List<ICProductGroupsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductGroupsInfo objProductGroupsInfo = (ICProductGroupsInfo)GetObjectFromDataRow(row);
                    productGroups.Add(objProductGroupsInfo);
                }
            }
            return productGroups;
        }

        public List<ICProductGroupsInfo> GetAllObjectWithNoParentIDList()
        {
            DataSet ds = dal.GetDataSet("ICProductGroups_GetAllObjectWithNoParentIDList");
            List<ICProductGroupsInfo> productGroups = new List<ICProductGroupsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductGroupsInfo objProductGroupsInfo = (ICProductGroupsInfo)GetObjectFromDataRow(row);
                    productGroups.Add(objProductGroupsInfo);
                }
            }
            return productGroups;
        }

        public List<ICProductGroupsInfo> GetProductGroupListByNameAndParent(string productGroupName, int parentId)
        {
            DataSet ds = dal.GetDataSet("ICProductGroups_GetProductGroupListByNameAndParent", productGroupName, parentId);
            List<ICProductGroupsInfo> productGroups = new List<ICProductGroupsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductGroupsInfo objProductGroupsInfo = (ICProductGroupsInfo)GetObjectFromDataRow(row);
                    productGroups.Add(objProductGroupsInfo);
                }

                ds.Dispose();
            }
            return productGroups;
        }
        public ICProductGroupsInfo GetRootGroupByGroup(int departmentID, int groupID)
        {
            DataSet ds = dal.GetDataSet("ICProductGroups_GetRootGroupByGroup", departmentID, groupID);
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                {
                    foreach (DataRow row in ds.Tables[0].Rows)
                    {
                        ICProductGroupsInfo objProductGroupsInfo = (ICProductGroupsInfo)GetObjectFromDataRow(row);
                        return objProductGroupsInfo;
                    }
                }
            }
            return null;
        }

        public List<ICProductGroupsInfo> GetProductGroupByDepartmentID(int departmentID)
        {
            DataSet ds = dal.GetDataSet("ICProductGroups_GetProductGroupByDepartmentID", departmentID);
            List<ICProductGroupsInfo> productGroups = new List<ICProductGroupsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductGroupsInfo objProductGroupsInfo = (ICProductGroupsInfo)GetObjectFromDataRow(row);
                    productGroups.Add(objProductGroupsInfo);
                }

                ds.Dispose();
            }
            return productGroups;
        }
        public ICProductGroupsInfo GetProductGroupHeadParent(int groupID)
        {
            DataSet ds = dal.GetDataSet("ICProductGroups_GetProductGroupHeadParent", groupID);
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                {
                    foreach (DataRow row in ds.Tables[0].Rows)
                    {
                        ICProductGroupsInfo objProductGroupsInfo = (ICProductGroupsInfo)GetObjectFromDataRow(row);
                        return objProductGroupsInfo;
                    }
                }
            }
            return null;
        }
    }
    #endregion
}