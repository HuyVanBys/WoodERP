using BOSLib;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ICProductItemProcesss
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ICProductItemProcesssController
    //Created Date:Saturday, January 05, 2019
    //-----------------------------------------------------------

    public class ICProductItemProcesssController : BaseBusinessController
    {
        public ICProductItemProcesssController()
        {
            dal = new DALBaseProvider("ICProductItemProcesss", typeof(ICProductItemProcesssInfo));
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ICProductItemProcesssInfo> productItemProcessList = new List<ICProductItemProcesssInfo>();
            if (ds != null && ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductItemProcesssInfo objProductItemProcesssInfo = (ICProductItemProcesssInfo)GetObjectFromDataRow(row);
                    productItemProcessList.Add(objProductItemProcesssInfo);
                }
            }
            ds.Dispose();
            return productItemProcessList;
        }

        public List<ICProductItemProcesssInfo> GetByCarcassAndProductID(int productCarcassID, int productID)
        {
            DataSet ds = dal.GetDataSet("ICProductItemProcesss_GetByCarcassAndProductID", productCarcassID, productID);
            List<ICProductItemProcesssInfo> collection = new List<ICProductItemProcesssInfo>();
            if (ds != null && ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductItemProcesssInfo item = (ICProductItemProcesssInfo)GetObjectFromDataRow(row);
                    collection.Add(item);
                }
            }
            return collection;
        }

        public List<ICProductItemProcesssInfo> GetProcessByProductionNormID(int productionNormID, int productID)
        {
            DataSet ds = dal.GetDataSet("ICProductItemProcesss_GetProcessByProductionNormID", productionNormID, productID);
            return (List<ICProductItemProcesssInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductItemProcesssInfo> GetParentProcessByProductionNormID(int productionNormID, int productID)
        {
            DataSet ds = dal.GetDataSet("ICProductItemProcesss_GetParentProcessByProductionNormID", productionNormID, productID);
            return (List<ICProductItemProcesssInfo>)GetListFromDataSet(ds);
        }

        public List<ICProductItemProcesssInfo> GetProcessByProductDetailID(int productionNormID, int productDetailID)
        {
            DataSet ds = dal.GetDataSet("ICProductItemProcesss_GetProcessByProductDetailID", productionNormID, productDetailID);
            return (List<ICProductItemProcesssInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}