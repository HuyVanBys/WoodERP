using BOSLib;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region HRAdvanceRefunds
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:HRAdvanceRefundsController
    //Created Date:Thursday, May 03, 2018
    //-----------------------------------------------------------

    public class HRAdvanceRefundsController : BaseBusinessController
    {
        public HRAdvanceRefundsController()
        {
            dal = new DALBaseProvider("HRAdvanceRefunds", typeof(HRAdvanceRefundsInfo));
        }

        public List<HRAdvanceRefundsInfo> GetRefundByType(string type)
        {
            List<HRAdvanceRefundsInfo> invoices = new List<HRAdvanceRefundsInfo>();
            DataSet ds = dal.GetDataSet("HRAdvanceRefunds_GetRefundByType", type);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    HRAdvanceRefundsInfo objInvoicesInfo = (HRAdvanceRefundsInfo)GetObjectFromDataRow(row);
                    invoices.Add(objInvoicesInfo);
                }
            }
            return invoices;
        }

        public List<HRAdvanceRefundsInfo> GetAdvanceRefundsWithDirectPaymentType(string type)
        {
            List<HRAdvanceRefundsInfo> advanceRefunds = new List<HRAdvanceRefundsInfo>();
            DataSet ds = dal.GetDataSet("HRAdvanceRefunds_GetAdvanceRefundsWithDirectPaymentType", type);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    HRAdvanceRefundsInfo advanceRefund = (HRAdvanceRefundsInfo)GetObjectFromDataRow(row);
                    advanceRefunds.Add(advanceRefund);
                }
            }
            return advanceRefunds;
        }

        public List<HRAdvanceRefundsInfo> GetAdvanceRefundsWithNoneDirectPaymentType(string type)
        {
            List<HRAdvanceRefundsInfo> advanceRefunds = new List<HRAdvanceRefundsInfo>();
            DataSet ds = dal.GetDataSet("HRAdvanceRefunds_GetAdvanceRefundsWithNoneDirectPaymentType", type);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    HRAdvanceRefundsInfo advanceRefund = (HRAdvanceRefundsInfo)GetObjectFromDataRow(row);
                    advanceRefunds.Add(advanceRefund);
                }
            }
            return advanceRefunds;
        }

        public DataSet GetAllObjectForAdvanceRefund(string advanceRefundNo)
        {
            DataSet ds = dal.GetDataSet("HRAdvanceRefunds_GetAllObjectForAdvanceRefund", advanceRefundNo);
            return ds;
        }

        public DataSet GetAllObjectForAdvanceRefundDirect(string advanceRefundNo)
        {
            DataSet ds = dal.GetDataSet("HRAdvanceRefunds_GetAllObjectForAdvanceRefundDirect", advanceRefundNo);
            return ds;
        }

        public List<HRAdvanceRefundsInfo> GetPaymentNoFromAdvanceRefundID(int advanceRefundID)
        {
            DataSet ds = dal.GetDataSet("HRAdvanceRefunds_GetPaymentNoFromAdvanceRefundID", advanceRefundID);
            //return (List<HRAdvanceRefundsInfo>)GetListFromDataSet(ds);
            List<HRAdvanceRefundsInfo> advanceRefunds = new List<HRAdvanceRefundsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    HRAdvanceRefundsInfo advanceRefund = (HRAdvanceRefundsInfo)GetObjectFromDataRow(row);
                    advanceRefunds.Add(advanceRefund);
                }
            }
            return advanceRefunds;
        }
    }
    #endregion
}