using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region HRPayRolls
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:HRPayRollsController
    //Created Date:Monday, April 11, 2011
    //-----------------------------------------------------------

    public class HRPayRollsController : BaseBusinessController
    {
        public HRPayRollsController()
        {
            dal = new DALBaseProvider("HRPayRolls", typeof(HRPayRollsInfo));
        }

        /// <summary>
        /// Get the payroll list for salary calculation
        /// </summary>
        /// <returns>List of payrolls</returns>
        public List<HRPayRollsInfo> GetPayRollsForSalaryCalculation()
        {
            DataSet ds = dal.GetDataSet("HRPayRolls_GetPayRollsForSalaryCalculation");
            List<HRPayRollsInfo> payRollList = new List<HRPayRollsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    HRPayRollsInfo objPayRollsInfo = (HRPayRollsInfo)GetObjectFromDataRow(row);
                    payRollList.Add(objPayRollsInfo);
                }
            }
            ds.Dispose();
            return payRollList;
        }

        /// <summary>
        /// Get the payroll list for salary calculation by user's permission
        /// </summary>
        /// <returns>List of payrolls</returns>
        public List<HRPayRollsInfo> GetPayRollsForSalaryCalculationByUserPermission(int userID, string moduleName, string dataViewPermissionType)
        {
            DataSet ds = dal.GetDataSet("HRPayRolls_GetPayRollsForSalaryCalculationByUserPermission", userID, moduleName, dataViewPermissionType);
            List<HRPayRollsInfo> payRollList = new List<HRPayRollsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    HRPayRollsInfo objPayRollsInfo = (HRPayRollsInfo)GetObjectFromDataRow(row);
                    payRollList.Add(objPayRollsInfo);
                }
            }
            ds.Dispose();
            return payRollList;
        }

        /// <summary>
        /// Gets the pay rolls by pay roll date
        /// </summary>
        /// <param name="payRollDate">The payroll date</param>
        /// <returns>The list of payroll</returns>
        public List<HRPayRollsInfo> GetPayRollsByPayRollDate(DateTime payRollDate)
        {
            List<HRPayRollsInfo> payRollList = new List<HRPayRollsInfo>();
            DataSet ds = dal.GetDataSet("HRPayRolls_GetPayRollByPayRollDate", payRollDate);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    HRPayRollsInfo objPayRollsInfo = (HRPayRollsInfo)GetObjectFromDataRow(row);
                    payRollList.Add(objPayRollsInfo);
                }
            }
            ds.Dispose();
            return payRollList;
        }

        /// <summary>
        /// Get payrolls for transferring
        /// </summary>
        /// <returns>List of transferred payrolls</returns>
        public List<HRPayRollsInfo> GetPayRollsForTransferring()
        {
            DataSet ds = dal.GetDataSet("HRPayRolls_GetPayRollsForTransferring");
            return (List<HRPayRollsInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<HRPayRollsInfo> payRollList = new List<HRPayRollsInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    HRPayRollsInfo objPayRollsInfo = (HRPayRollsInfo)GetObjectFromDataRow(row);
                    payRollList.Add(objPayRollsInfo);
                }
            }
            ds.Dispose();
            return payRollList;
        }

        public DataSet GetPayRollListByListOfBranchID(string payRollNo,
                                           string payRollName,
                                           string payRollType,
                                           DateTime? payRollDateFrom,
                                           DateTime? payRollDateTo, List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetPayRollList(payRollNo, payRollName, payRollType, ojbBranchsInfo.BRBranchID, payRollDateFrom, payRollDateTo);
                rtn.Merge(ds);
                ds.Dispose();
            }

            return rtn;
        }

        public DataSet GetPayRollList(string payRollNo,
                                           string payRollName,
                                           string payRollType,
                                           int? branchID,
                                           DateTime? payRollDateFrom,
                                           DateTime? payRollDateTo)
        {
            DataSet ds = dal.GetDataSet("HRPayRolls_GetPayRollList", payRollNo, payRollName, payRollType, branchID, payRollDateFrom, payRollDateTo);
            return ds;
        }

        public bool IsApprovedExistKPIEvaliation(int id)
        {
            int i = 0;
            DataSet ds = dal.GetDataSet("HRPayRolls_IsApprovedExistKPIEvaliation", id);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                int.TryParse(ds.Tables[0].Rows[0][0].ToString(), out i);
            }
            if (i == 0)
            {
                return false;
            }
            else
            {
                return true;
            }
        }

        public List<HRPayRollsInfo> GetPayRollsForATMCardPayroll()
        {
            DataSet ds = dal.GetDataSet("HRPayRolls_GetPayRollsForATMCardPayroll");
            return (List<HRPayRollsInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}