using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region HRTimeSheets
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:HRTimeSheetsController
    //Created Date:Tuesday, March 29, 2011
    //-----------------------------------------------------------

    public class HRTimeSheetsController : BaseBusinessController
    {
        public HRTimeSheetsController()
        {
            dal = new DALBaseProvider("HRTimeSheets", typeof(HRTimeSheetsInfo));
        }

        /// <summary>
        /// Get the time sheet list for pay roll
        /// </summary>        
        /// <returns>List of time sheets</returns>
        public List<HRTimeSheetsInfo> GetTimeSheetsForPayRoll()
        {
            DataSet ds = dal.GetDataSet("HRTimeSheets_GetTimeSheetsForPayRoll");
            List<HRTimeSheetsInfo> timeSheetList = new List<HRTimeSheetsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    HRTimeSheetsInfo objTimeSheetsInfo = (HRTimeSheetsInfo)GetObjectFromDataRow(row);
                    timeSheetList.Add(objTimeSheetsInfo);
                }
            }
            ds.Dispose();
            return timeSheetList;
        }
        /// <summary>
        /// Gets the time sheet by time sheet date
        /// </summary>
        /// <param name="timeSheetDate">The time sheet date</param>
        /// <returns>The list of time sheet</returns>
        public List<HRTimeSheetsInfo> GetTimeSheetByTimeSheetDate(DateTime timeSheetDate)
        {
            List<HRTimeSheetsInfo> timeSheetList = new List<HRTimeSheetsInfo>();
            DataSet ds = dal.GetDataSet("HRTimeSheets_GetTimeSheetByTimeSheetDate", timeSheetDate);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    HRTimeSheetsInfo objTimeSheetsInfo = (HRTimeSheetsInfo)GetObjectFromDataRow(row);
                    timeSheetList.Add(objTimeSheetsInfo);
                }
            }
            ds.Dispose();
            return timeSheetList;
        }

        /// <summary>
        /// Get time sheets for transferring
        /// </summary>
        /// <returns>List of transferred time sheets</returns>
        public List<HRTimeSheetsInfo> GetTimeSheetsForTransferring()
        {
            DataSet ds = dal.GetDataSet("HRTimeSheets_GetTimeSheetsForTransferring");
            return (List<HRTimeSheetsInfo>)GetListFromDataSet(ds);
        }

        public List<HRTimeSheetsInfo> GetTimeSheetList()
        {
            DataSet ds = dal.GetAllObject();
            List<HRTimeSheetsInfo> result = (List<HRTimeSheetsInfo>)GetListFromDataSet(ds);
            ds.Dispose();
            return result;
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<HRTimeSheetsInfo> timeSheetList = new List<HRTimeSheetsInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    HRTimeSheetsInfo objTimeSheetsInfo = (HRTimeSheetsInfo)GetObjectFromDataRow(row);
                    timeSheetList.Add(objTimeSheetsInfo);
                }
            }
            ds.Dispose();
            return timeSheetList;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="timeSheetNo"></param>
        /// <param name="timeSheetName"></param>
        /// <param name="timeSheetType"></param>
        /// <param name="branchID"></param>
        /// <param name="timeSheetDate"></param>
        /// <returns></returns>
        public DataSet GetTimeSheetList(string timeSheetNo,
                                           string timeSheetName,
                                           string timeSheetType,
                                           int? branchID,
                                           DateTime? timeSheetDateFrom,
                                           DateTime? timeSheetDateTo)
        {
            DataSet ds = dal.GetDataSet("HRTimeSheets_GetTimeSheetList", timeSheetNo, timeSheetName, timeSheetType, branchID, timeSheetDateFrom, timeSheetDateTo);
            return ds;
        }
        public DataSet GetTimeSheetListByListOfBranchID(string timeSheetNo,
                                           string timeSheetName,
                                           string timeSheetType,
                                           DateTime? timeSheetDateFrom,
                                           DateTime? timeSheetDateTo, List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetTimeSheetList(timeSheetNo, timeSheetName, timeSheetType, ojbBranchsInfo.BRBranchID, timeSheetDateFrom, timeSheetDateTo);
                rtn.Merge(ds);
                ds.Dispose();
            }

            return rtn;
        }

        public List<HRTimeSheetsInfo> GetTimeSheetListByMonth(DateTime? timeSheetDate)
        {
            DataSet ds = dal.GetDataSet("HRTimeSheets_GetTimeSheetListByMonth", timeSheetDate);
            List<HRTimeSheetsInfo> result = (List<HRTimeSheetsInfo>)GetListFromDataSet(ds);
            ds.Dispose();
            return result;
        }

        public List<HRTimeSheetsInfo> GetTimeSheetsForTimeSheetAudit()
        {
            DataSet ds = dal.GetDataSet("HRTimeSheets_GetTimeSheetsForTimeSheetAudit");
            List<HRTimeSheetsInfo> timeSheetList = new List<HRTimeSheetsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    HRTimeSheetsInfo objTimeSheetsInfo = (HRTimeSheetsInfo)GetObjectFromDataRow(row);
                    timeSheetList.Add(objTimeSheetsInfo);
                }
            }
            ds.Dispose();
            return timeSheetList;
        }
    }
    #endregion
}