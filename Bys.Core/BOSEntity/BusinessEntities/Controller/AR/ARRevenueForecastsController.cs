using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using BOSLib;


namespace BOSERP
{
	#region ARRevenueForecasts
	//-----------------------------------------------------------
	//Generated By: BOS Studio
	//Class:ARRevenueForecastsController
	//Created Date:26/03/2024 12:00:00 AM
	//-----------------------------------------------------------

	public class ARRevenueForecastsController : BaseBusinessController
	{
		public ARRevenueForecastsController()
		{
			dal = new DALBaseProvider("ARRevenueForecasts", typeof(ARRevenueForecastsInfo));
		}

		public override System.Collections.IList GetListFromDataSet(DataSet ds)
		{
			List<ARRevenueForecastsInfo> items = new List<ARRevenueForecastsInfo>();
			if (ds.Tables.Count > 0)
			{
				foreach (DataRow row in ds.Tables[0].Rows)
				{
					ARRevenueForecastsInfo item = (ARRevenueForecastsInfo)GetObjectFromDataRow(row);
					items.Add(item);
				}
			}
			return items;
		}
		public DataSet GetDataSetOfBranch(string revenueForecastNo
										, int fk_HREmployeeID
										, string revenueForecastStatus
										, DateTime? revenueForecastDateFrom
										, DateTime? revenueForecastDateTo
										, int revenueForecastYear
										, int branchID)
		{
			return dal.GetDataSet("MMRevenueForecast_GetDataSetOfBranch", revenueForecastNo
															  , fk_HREmployeeID
															  , revenueForecastStatus
															  , revenueForecastDateFrom
															  , revenueForecastDateTo
															  , revenueForecastYear
															  , branchID);
		}

		public DataSet GetDataSetOfBranchList(string revenueForecastNo
										, int fk_HREmployeeID
										, string revenueForecastStatus
										, DateTime? revenueForecastDateFrom
										, DateTime? revenueForecastDateTo
										, int revenueForecastYear
										, List<BRBranchsInfo> branchList)
		{
			DataSet rtn = new DataSet();
			foreach (BRBranchsInfo ojbBranchsInfo in branchList)
			{
				DataSet ds = GetDataSetOfBranch(revenueForecastNo
												, fk_HREmployeeID
												, revenueForecastStatus
												, revenueForecastDateFrom
												, revenueForecastDateTo
												, revenueForecastYear
												, ojbBranchsInfo.BRBranchID);
				rtn.Merge(ds);
			}
			return rtn;
		}
	}
	#endregion
}