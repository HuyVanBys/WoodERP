using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ARProductionPlannings
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ARProductionPlanningsController
    //Created Date:Tuesday, February 21, 2017
    //-----------------------------------------------------------

    public class ARProductionPlanningsController : BaseBusinessController
    {
        public ARProductionPlanningsController()
        {
            dal = new DALBaseProvider("ARProductionPlannings", typeof(ARProductionPlanningsInfo));
        }

        /// <summary>
        /// GetProductionPlanningByStatus
        /// </summary>
        /// <returns>List of ProductionPlannings</returns>
        public List<ARProductionPlanningsInfo> GetProductionPlanningByStatus(string productionPlanningStatus)
        {
            DataSet ds = dal.GetDataSet("ARProductionPlannings_GetProductionPlanningByStatus", productionPlanningStatus);
            List<ARProductionPlanningsInfo> ProductionPlanningList = new List<ARProductionPlanningsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARProductionPlanningsInfo objProductionPlanningsInfo = (ARProductionPlanningsInfo)GetObjectFromDataRow(row);
                    ProductionPlanningList.Add(objProductionPlanningsInfo);
                }
            }
            ds.Dispose();
            return ProductionPlanningList;
        }

        public List<ARProductionPlanningsInfo> GetAllObjectList()
        {
            DataSet ds = dal.GetAllObject();
            List<ARProductionPlanningsInfo> ProductionPlanningList = new List<ARProductionPlanningsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARProductionPlanningsInfo objProductionPlanningsInfo = (ARProductionPlanningsInfo)GetObjectFromDataRow(row);
                    ProductionPlanningList.Add(objProductionPlanningsInfo);
                }
            }
            ds.Dispose();
            return ProductionPlanningList;
        }

        public List<ARProductionPlanningsInfo> GetProductionPlanningForLoadCont()
        {
            DataSet ds = dal.GetDataSet("ARProductionPlannings_GetProductionPlanningLoadCont");
            List<ARProductionPlanningsInfo> ProductionPlanningList = new List<ARProductionPlanningsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARProductionPlanningsInfo objProductionPlanningsInfo = (ARProductionPlanningsInfo)GetObjectFromDataRow(row);
                    ProductionPlanningList.Add(objProductionPlanningsInfo);
                }
            }
            ds.Dispose();
            return ProductionPlanningList;
        }
        public List<ARProductionPlanningsInfo> GetProductionPlanningForBatchProduct()
        {
            DataSet ds = dal.GetDataSet("ARProductionPlannings_GetProductionPlanningsForBatchProduct");
            List<ARProductionPlanningsInfo> productionPlanningList = new List<ARProductionPlanningsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARProductionPlanningsInfo obj = (ARProductionPlanningsInfo)GetObjectFromDataRow(row);
                    productionPlanningList.Add(obj);
                }
            }
            ds.Dispose();
            return productionPlanningList;
        }

        public DataSet GetDataSetOfBranch(string productionPlanningNo, int workShopID, int employeeID, string planningStatus, DateTime fromDate, DateTime toDate, int? objectID, string objectType, int? productID, int branchID)
        {
            return dal.GetDataSet("ARProductionPlannings_GetDataSetOfBranch", productionPlanningNo, workShopID, employeeID, planningStatus, fromDate, toDate, objectID, objectType, productID, branchID);
        }
        public DataSet GetCatcheData(int? FK_BRBranchID)
        {
            return dal.GetDataSet("ARProductionPlannings_GetCatcheData", FK_BRBranchID);
        }
        public DataSet GetDataSetOfBranchList(string productionPlanningNo, int workShopID, int employeeID, string planningStatus, DateTime fromDate, DateTime toDate, int? objectID, string objectType, int? productID, List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetDataSetOfBranch(productionPlanningNo, workShopID, employeeID, planningStatus, fromDate, toDate, objectID, objectType, productID, ojbBranchsInfo.BRBranchID);
                rtn.Merge(ds);
            }
            return rtn;
        }
        public void UpdateReferenceSaleOrder(int productionPlanningID, string status)
        {
            dal.ExecuteStoredProcedure("ARProductionPlannings_UpdateReferenceSaleOrder", productionPlanningID, status);
        }
    }
    #endregion
}