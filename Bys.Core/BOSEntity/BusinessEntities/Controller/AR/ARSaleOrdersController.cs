using BOSCommon;
using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;


namespace BOSERP
{
    #region ARSaleOrders
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ARSaleOrdersController
    //Created Date:Wednesday, March 26, 2008
    //-----------------------------------------------------------

    public class ARSaleOrdersController : BaseBusinessController
    {
        public ARSaleOrdersController()
        {
            dal = new DALBaseProvider("ARSaleOrders", typeof(ARSaleOrdersInfo));
        }

        public DataSet GetSaleOrdersByCustomerIDAndType(int customerID, String type)
        {
            String sql = String.Format("SELECT * FROM ARSaleOrders WHERE AAStatus = 'Alive' AND FK_ARCustomerID = {0} AND ARSaleOrderTypeCombo = N'{1}'", customerID, type);
            return dal.GetDataSet(sql);
        }
        public DataSet GetAllSaleOrderForLookupControl()
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetAllARSaleOrdersForLookupControl");
            return ds;
        }
        public DataSet GetSaleOrdersByCustomerIDAndTypeAndStatus(int customerID, String type, String status)
        {
            String sql = String.Format("SELECT * FROM ARSaleOrders WHERE AAStatus = 'Alive' AND FK_ARCustomerID = {0} AND ARSaleOrderTypeCombo = N'{1}' AND ARSaleOrderStatus = N'{2}'", customerID, type, status);
            return dal.GetDataSet(sql);
        }

        public DataSet GetSaleOrdersByTypeAndStatus(String type, String status)
        {
            String strQuery = String.Format("SELECT * FROM ARSaleOrders WHERE AAStatus = 'Alive' AND ARSaleOrderTypeCombo = '{0}' AND ARSaleOrderStatus = '{1}'", type, status);
            return GetDataSet(strQuery);
        }

        public DataSet GetSaleOrdersByTypeAndDeliveryDateRange(String type, DateTime from, DateTime to)
        {
            String strQuery = String.Format("SELECT * FROM [dbo].[ARSaleOrders] WHERE CONVERT(VARCHAR(10),[ARSaleOrderDeliveryDate],112)>= CONVERT(VARCHAR(10),'{0}',112) AND [AAStatus]='{1}' AND ARSaleOrderTypeCombo = '{2}'",
                                            from.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus, type);
            return GetDataSet(strQuery);
        }

        public DataSet GetSaleOrdersByTypeAndCustomerIDAndDeliveryDateRange(String type, int customerID, DateTime from, DateTime to)
        {
            String strQuery = String.Format("SELECT * FROM [dbo].[ARSaleOrders] WHERE CONVERT(VARCHAR(10),[ARSaleOrderDeliveryDate],112)>= CONVERT(VARCHAR(10),'{0}',112) AND [AAStatus]='{1}' AND ARSaleOrderTypeCombo = '{2}' AND FK_ARCustomerID = {3}",
                                            from.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus, type, customerID);
            return GetDataSet(strQuery);
        }

        public override object GetObjectByID(int iObjectID)
        {
            return dal.GetDataObject("ARSaleOrders_GetSaleOrderByID", iObjectID);
        }

        /// <summary>
        /// Get the list of sale orders based on some criteria
        /// </summary>
        /// <param name="customerId">Customer identifier</param>
        /// <param name="status">Sale order status</param>
        /// <param name="saleOrderType">Sale order type</param>
        /// <param name="dateFrom">Date the result is searched from</param>
        /// <param name="dateTo">Date the result is searched to</param>
        /// <returns></returns>
        public List<ARSaleOrdersInfo> GetSaleOrderList(int? objectID,
                                        string objectType,
                                        string status,
                                        string saleOrderType,
                                        DateTime? dateFrom,
                                        DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrderList", objectID, objectType, status, saleOrderType, dateFrom, dateTo);
            List<ARSaleOrdersInfo> saleOrders = new List<ARSaleOrdersInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)GetObjectFromDataRow(row);
                    saleOrders.Add(objSaleOrdersInfo);
                }
            }
            return saleOrders;
        }

        /// <summary>
        /// Get sale order by delivery due days with out status is invoiced
        /// </summary>
        /// <param name="deliveryDueDays">Delivery due day</param>
        /// <returns>Data of sale order</returns>
        public DataSet GetSaleOrderByDeliveryDueDays(DateTime? fromDate, DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrderByDeliveryDueDays", fromDate, toDate);
            return ds;
        }

        /// <summary>
        /// Get the sale order list by a given type
        /// </summary>
        /// <param name="type">Given type</param>
        /// <returns>List of sale orders</returns>
        public List<ARSaleOrdersInfo> GetSaleOrdersByType(string type)
        {
            List<ARSaleOrdersInfo> saleOrderList = GetSaleOrderList(null, null, null, type, null, null);
            return saleOrderList;
        }

        /// <summary>
        /// Get the sale order list for shipping
        /// </summary>
        /// <returns>List of sale orders</returns>
        public List<ARSaleOrdersInfo> GetSaleOrdersForShipping()
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrdersForShipping");
            List<ARSaleOrdersInfo> saleOrderList = new List<ARSaleOrdersInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)GetObjectFromDataRow(row);
                    saleOrderList.Add(objSaleOrdersInfo);
                }
            }
            return saleOrderList;
        }

        /// <summary>
        /// Get the sale order list for shipping
        /// </summary>
        /// <returns>List of sale orders</returns>
        public List<ARSaleOrdersInfo> GetSaleOrdersForShippingByUserPermission(int userID, string moduleName, string dataViewPermissionType)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrdersForShippingByUserPermission", userID, moduleName, dataViewPermissionType);
            List<ARSaleOrdersInfo> saleOrderList = new List<ARSaleOrdersInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)GetObjectFromDataRow(row);
                    saleOrderList.Add(objSaleOrdersInfo);
                }
            }
            return saleOrderList;
        }

        public List<ARSaleOrdersInfo> GetSaleOrdersBySomeCriteria(int objectID, string objectType, int iCProductID)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrdersBySomeCriteria", objectID, objectType, iCProductID);
            List<ARSaleOrdersInfo> saleOrderList = new List<ARSaleOrdersInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)GetObjectFromDataRow(row);
                    saleOrderList.Add(objSaleOrdersInfo);
                }
            }
            return saleOrderList;
        }

        /// <summary>
        /// Get the sale order list for canceling
        /// </summary>
        /// <returns>List of sale orders</returns>
        public List<ARSaleOrdersInfo> GetSaleOrdersForCanceling()
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrdersForCanceling");
            List<ARSaleOrdersInfo> saleOrderList = new List<ARSaleOrdersInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)GetObjectFromDataRow(row);
                    saleOrderList.Add(objSaleOrdersInfo);
                }
            }
            return saleOrderList;
        }

        /// <summary>
        /// Get the sale order list for canceling
        /// </summary>
        /// <returns>List of sale orders</returns>
        public List<ARSaleOrdersInfo> GetSaleOrdersForCancelingByUserPermission(int userID, string moduleName, string dataViewPermissionType)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrdersForCancelingByUserPermission", userID, moduleName, dataViewPermissionType);
            List<ARSaleOrdersInfo> saleOrderList = new List<ARSaleOrdersInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)GetObjectFromDataRow(row);
                    saleOrderList.Add(objSaleOrdersInfo);
                }
            }
            return saleOrderList;
        }


        /// <summary>
        /// Get a sale order by id
        /// </summary>
        /// <param name="saleOrderID">Sale order id</param>
        /// <returns>Sale order object</returns>
        public ARSaleOrdersInfo GetSaleOrderByID(int saleOrderID)
        {
            return (ARSaleOrdersInfo)dal.GetDataObject("ARSaleOrders_GetSaleOrderByID", saleOrderID);
        }

        /// <summary>
        /// Get the total deposit of invoices shipped for a sale order
        /// </summary>
        /// <param name="saleOrderID">Sale order id</param>
        /// <returns>Total deposit</returns>
        public decimal GetTotalInvoiceDeposit(int saleOrderID)
        {
            return Convert.ToDecimal(dal.GetSingleValue("ARSaleOrders_GetTotalInvoiceDeposit", saleOrderID));
        }

        /// <summary>
        /// Get the total deposit of a sale order
        /// </summary>
        /// <param name="saleOrderID">Sale order id</param>
        /// <param name="paymentMethod">Payment method the result should be calculated by</param>
        /// <returns>Total deposit</returns>
        public decimal GetTotalDeposit(int saleOrderID, string paymentMethod)
        {
            return Convert.ToDecimal(dal.GetSingleValue("ARSaleOrders_GetTotalDeposit", saleOrderID, paymentMethod));
        }

        /// <summary>
        /// Get sale orders for transferring
        /// </summary>
        /// <returns>List of sale orders</returns>
        public List<ARSaleOrdersInfo> GetSaleOrdersForTransferring()
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrdersForTransferring");
            List<ARSaleOrdersInfo> saleOrders = new List<ARSaleOrdersInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)GetObjectFromDataRow(row);
                    saleOrders.Add(objSaleOrdersInfo);
                }
            }
            return saleOrders;
        }

        /// <summary>
        /// Get sale orders for broadcasting to a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <returns>List of broadcasted sale orders</returns>
        public List<ARSaleOrdersInfo> GetSaleOrdersForBroadcasting(int branchID)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrdersForBroadcasting", branchID);
            return (List<ARSaleOrdersInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ARSaleOrdersInfo> saleOrders = new List<ARSaleOrdersInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)GetObjectFromDataRow(row);
                    saleOrders.Add(objSaleOrdersInfo);
                }
            }
            ds.Dispose();
            return saleOrders;
        }

        /// <summary>
        /// Get the total owing exchange deposit of invoices shipped for a sale order
        /// </summary>
        /// <param name="saleOrderID">Sale order id</param>
        /// <param name="entryTypeName">entry type name which the result should be calculated by</param>
        /// <returns>Total invoice owing exchange deposit</returns>
        public decimal GetTotalInvoiceOwingExchangeDeposit(int saleOrderID, string entryTypeName)
        {
            return Convert.ToDecimal(dal.GetSingleValue("ARSaleOrders_GetTotalInvoiceOwingExchangeDeposit", saleOrderID, entryTypeName));
        }

        public DataSet GetSaleOrderListDataSetByListOfBranchID(string saleOrderNo,
                                                int? customerID,
                                                int? branchID,
                                                int? employeeID,
                                                int? sellerID,
                                                string saleOrderType,
                                                DateTime? dateFrom,
                                                DateTime? dateTo, List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            List<int> collections = new List<int>();
            int rowIndex = 0;
            DataRow row;
            DataRowCollection rows;
            bool isValid = true;
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetSaleOrderListDataSet(saleOrderNo, customerID, ojbBranchsInfo.BRBranchID, employeeID, sellerID, saleOrderType, dateFrom, dateTo);
                if (ds != null && ds.Tables.Count != 0 && ds.Tables[0].Rows.Count != 0)
                {
                    rowIndex = 0;
                    rows = ds.Tables[0].Rows;
                    isValid = true;
                    while (isValid)
                    {
                        row = rows[rowIndex];
                        int id = row["ARSaleOrderID"] is DBNull ? -1 : Convert.ToInt32(row["ARSaleOrderID"].ToString());
                        if (id != -1 && !collections.Contains(id))
                        {
                            collections.Add(id);
                            rowIndex++;
                        }
                        else
                        {
                            rows.Remove(row);
                        }
                        if (rows.Count == 0 || rows.Count == rowIndex)
                            isValid = false;
                    }
                }
                rtn.Merge(ds);
            }
            if (rtn.Tables.Count != 0)
            {
                DataView dataView = rtn.Tables[0].DefaultView;
                dataView.Sort = "ARSaleOrderDate, ARSaleOrderNo ASC";
            }
            return rtn;
        }

        public DataSet GetSaleOrderListByListOfBranchID(string saleOrderNo,
                                                        int? customerID,
                                                        int? projectID,
                                                        int? employeeID,
                                                        DateTime? dateFrom,
                                                        DateTime? dateTo,
                                                        List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo objBranchsInfo in branchList)
            {
                DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrdersBySearchObject", saleOrderNo, customerID, objBranchsInfo.BRBranchID, projectID, employeeID, dateFrom, dateTo);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public DataSet GetSaleOrderListBySearchObject(string saleOrderNo,
                                                        int? customerID,
                                                        int? branchID,
                                                        int? projectID,
                                                        int? employeeID,
                                                        DateTime? dateFrom,
                                                        DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrdersBySearchObject", saleOrderNo, customerID, branchID, projectID, employeeID, dateFrom, dateTo);

            return ds;
        }

        public DataSet GetSaleOrderListDataSetByListOfBranchIDForSemiProduct(string saleOrderNo,
                                           int? customerID,
                                           int? branchID,
                                           int? employeeID,
                                           int? sellerID,
                                           string saleOrderType,
                                           DateTime? dateFrom,
                                           DateTime? dateTo, List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            List<int> collections = new List<int>();
            int rowIndex = 0;
            DataRow row;
            DataRowCollection rows;
            bool isValid = true;
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetSaleOrdersDataset_SemiProduct(saleOrderNo, customerID, ojbBranchsInfo.BRBranchID, employeeID, sellerID, saleOrderType, dateFrom, dateTo);
                if (ds != null && ds.Tables.Count != 0 && ds.Tables[0].Rows.Count != 0)
                {
                    rowIndex = 0;
                    rows = ds.Tables[0].Rows;
                    isValid = true;
                    while (isValid)
                    {
                        row = rows[rowIndex];
                        int id = row["ARSaleOrderID"] is DBNull ? -1 : Convert.ToInt32(row["ARSaleOrderID"].ToString());
                        if (id != -1 && !collections.Contains(id))
                        {
                            collections.Add(id);
                            rowIndex++;
                        }
                        else
                        {
                            rows.Remove(row);
                        }
                        if (rows.Count == 0 || rows.Count == rowIndex)
                            isValid = false;
                    }
                }
                rtn.Merge(ds);
            }
            if (rtn.Tables.Count != 0)
            {
                DataView dataView = rtn.Tables[0].DefaultView;
                dataView.Sort = "ARSaleOrderDate, ARSaleOrderNo ASC";
            }
            return rtn;
        }

        public DataSet GetSaleOrderListDataSetByListOfBranchIDForOther(string saleOrderNo,
                                          int? customerID,
                                          int? branchID,
                                          int? employeeID,
                                          int? sellerID,
                                          string saleOrderType,
                                          DateTime? dateFrom,
                                          DateTime? dateTo, List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            List<int> collections = new List<int>();
            int rowIndex = 0;
            DataRow row;
            DataRowCollection rows;
            bool isValid = true;
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetSaleOrdersDataset_Other(saleOrderNo, customerID, ojbBranchsInfo.BRBranchID, employeeID, sellerID, saleOrderType, dateFrom, dateTo);
                if (ds != null && ds.Tables.Count != 0 && ds.Tables[0].Rows.Count != 0)
                {
                    rowIndex = 0;
                    rows = ds.Tables[0].Rows;
                    isValid = true;
                    while (isValid)
                    {
                        row = rows[rowIndex];
                        int id = row["ARSaleOrderID"] is DBNull ? -1 : Convert.ToInt32(row["ARSaleOrderID"].ToString());
                        if (id != -1 && !collections.Contains(id))
                        {
                            collections.Add(id);
                            rowIndex++;
                        }
                        else
                        {
                            rows.Remove(row);
                        }
                        if (rows.Count == 0 || rows.Count == rowIndex)
                            isValid = false;
                    }
                }
                rtn.Merge(ds);
            }
            if (rtn.Tables.Count != 0)
            {
                DataView dataView = rtn.Tables[0].DefaultView;
                dataView.Sort = "ARSaleOrderDate, ARSaleOrderNo ASC";
            }
            return rtn;
        }

        public DataSet GetSaleOrderListDataSetByListOfBranchIDForWood(string saleOrderNo,
                                     int? customerID,
                                     int? branchID,
                                     int? employeeID,
                                     int? sellerID,
                                     string saleOrderType,
                                     DateTime? dateFrom,
                                     DateTime? dateTo, List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            List<int> collections = new List<int>();
            int rowIndex = 0;
            DataRow row;
            DataRowCollection rows;
            bool isValid = true;
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetSaleOrdersDataset_ForWood(saleOrderNo, customerID, ojbBranchsInfo.BRBranchID, employeeID, sellerID, saleOrderType, dateFrom, dateTo);
                if (ds != null && ds.Tables.Count != 0 && ds.Tables[0].Rows.Count != 0)
                {
                    rowIndex = 0;
                    rows = ds.Tables[0].Rows;
                    isValid = true;
                    while (isValid)
                    {
                        row = rows[rowIndex];
                        int id = row["ARSaleOrderID"] is DBNull ? -1 : Convert.ToInt32(row["ARSaleOrderID"].ToString());
                        if (id != -1 && !collections.Contains(id))
                        {
                            collections.Add(id);
                            rowIndex++;
                        }
                        else
                        {
                            rows.Remove(row);
                        }
                        if (rows.Count == 0 || rows.Count == rowIndex)
                            isValid = false;
                    }
                }
                rtn.Merge(ds);
            }
            if (rtn.Tables.Count != 0)
            {
                DataView dataView = rtn.Tables[0].DefaultView;
                dataView.Sort = "ARSaleOrderDate, ARSaleOrderNo ASC";
            }
            return rtn;
        }


        public DataSet GetSaleOrderListDataSet(string saleOrderNo,
                                                int? customerID,
                                                int? branchID,
                                                int? employeeID,
                                                int? sellerID,
                                                string saleOrderType,
                                                DateTime? dateFrom,
                                                DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrdersDataset", saleOrderNo, customerID, branchID, employeeID, sellerID, saleOrderType, dateFrom, dateTo);
            return ds;
        }


        public DataSet GetSaleOrdersDataset_ForWood(string saleOrderNo,
                                                int? customerID,
                                                int? branchID,
                                                int? employeeID,
                                                int? sellerID,
                                                string saleOrderType,
                                                DateTime? dateFrom,
                                                DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrdersDataset_ForWood", saleOrderNo, customerID, branchID, employeeID, sellerID, saleOrderType, dateFrom, dateTo);
            return ds;
        }

        public DataSet GetSaleOrdersDataset_Other(string saleOrderNo,
                                              int? customerID,
                                              int? branchID,
                                              int? employeeID,
                                              int? sellerID,
                                              string saleOrderType,
                                              DateTime? dateFrom,
                                              DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrdersDataset_Other", saleOrderNo, customerID, branchID, employeeID, sellerID, saleOrderType, dateFrom, dateTo);
            return ds;
        }
        public DataSet GetSaleOrdersDataset_SemiProduct(string saleOrderNo,
                                           int? customerID,
                                           int? branchID,
                                           int? employeeID,
                                           int? sellerID,
                                           string saleOrderType,
                                           DateTime? dateFrom,
                                           DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrdersDataset_SemiProduct", saleOrderNo, customerID, branchID, employeeID, sellerID, saleOrderType, dateFrom, dateTo);
            return ds;
        }

        public ARSaleOrdersInfo GetSaleOrderByDepositNo(string depositNo)
        {
            ARSaleOrdersInfo saleOrder = dal.GetDataObject("ARSaleOrders_GetSaleOrderByDepositNo", depositNo) as ARSaleOrdersInfo;

            return saleOrder;
        }
        public List<ARSaleOrdersInfo> GetSaleOrderForBatchProposal()
        {
            DataSet ds = dal.GetDataSet("ARSaleOrder_ForBatchProposal");
            List<ARSaleOrdersInfo> SaleOrder = new List<ARSaleOrdersInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)GetObjectFromDataRow(row);
                    SaleOrder.Add(objSaleOrdersInfo);
                }
            }
            return SaleOrder;
        }

        public List<ARSaleOrdersInfo> GetSaleOrderByCustomerIDAndSaleOrderStatus(int customerID, string saleOrderStatus)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrderByCustomerIDAndSaleOrderStatus", customerID, saleOrderStatus);
            List<ARSaleOrdersInfo> SaleOrder = new List<ARSaleOrdersInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)GetObjectFromDataRow(row);
                    SaleOrder.Add(objSaleOrdersInfo);
                }
            }
            return SaleOrder;
        }

        public DataSet GetSaleOrderByBatch(int batchID)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrderByBatch", batchID);
            return ds;
        }
        public bool IsInternational(int SaleOrderItemID)
        {
            ARSaleOrdersInfo saleOrder = dal.GetDataObject("ARSaleOrders_GetObjectBySaleOrderItemID", SaleOrderItemID) as ARSaleOrdersInfo;
            bool isNational = false;
            if (saleOrder != null)
            {
                if (saleOrder.ARSaleOrderSaleType == SaleForecastSaleType.International.ToString())
                {
                    isNational = true;
                }

            }
            return isNational;
        }

        public List<ARSaleOrdersInfo> GetSaleOrdersForPurchaseProposal()
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrdersForShipping");
            List<ARSaleOrdersInfo> saleOrderList = new List<ARSaleOrdersInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)GetObjectFromDataRow(row);
                    saleOrderList.Add(objSaleOrdersInfo);
                }
            }
            return saleOrderList;
        }

        public List<ARSaleOrdersInfo> GetProductionFromSOIToBatchProposal()
        {
            DataSet ds = dal.GetDataSet("ARSaleOrder_GetProductionFromSOIToBatchProposal");
            List<ARSaleOrdersInfo> saleOrder = new List<ARSaleOrdersInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)GetObjectFromDataRow(row);
                    saleOrder.Add(objSaleOrdersInfo);
                }
            }
            return saleOrder;
        }

        public DataSet GetSaleOrderByListOfBranchIDForSemiProduct(string saleOrderNo,
                                           int? employeeID,
                                           int? branchID,
                                           int? objectID,
                                           string objectType,
                                           int? sellerID,
                                           string saleOrderType,
                                           DateTime? dateFrom,
                                           DateTime? dateTo, 
                                           int? productID,
                                           int ?userID,
                                           List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            List<int> collections = new List<int>();
            int rowIndex = 0;
            DataRow row;
            DataRowCollection rows;
            bool isValid = true;
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetSaleOrdersSemiProductBysUser(saleOrderNo, employeeID, ojbBranchsInfo.BRBranchID, objectID, objectType, sellerID, saleOrderType, dateFrom, dateTo, productID, userID);
                if (ds != null && ds.Tables.Count != 0 && ds.Tables[0].Rows.Count != 0)
                {
                    rowIndex = 0;
                    rows = ds.Tables[0].Rows;
                    isValid = true;
                    while (isValid)
                    {
                        row = rows[rowIndex];
                        int id = row["ARSaleOrderID"] is DBNull ? -1 : Convert.ToInt32(row["ARSaleOrderID"].ToString());
                        if (id != -1 && !collections.Contains(id))
                        {
                            collections.Add(id);
                            rowIndex++;
                        }
                        else
                        {
                            rows.Remove(row);
                        }
                        if (rows.Count == 0 || rows.Count == rowIndex)
                            isValid = false;
                    }
                }
                rtn.Merge(ds);
            }
            if (rtn.Tables.Count != 0)
            {
                DataView dataView = rtn.Tables[0].DefaultView;
                dataView.Sort = "ARSaleOrderID ASC";
            }
            return rtn;
        }

        public DataSet GetSaleOrdersSemiProduct(string saleOrderNo,
                                           int? employeeID,
                                           int? branchID,
                                           int? objectID,
                                           string objectType,
                                           int? sellerID,
                                           string saleOrderType,
                                           DateTime? dateFrom,
                                           DateTime? dateTo,
                                           int? productID)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrdersSemiProduct", saleOrderNo, employeeID, branchID, objectID, objectType, sellerID, saleOrderType, dateFrom, dateTo, productID);
            return ds;
        }
        public DataSet GetSaleOrdersSemiProductBysUser(string saleOrderNo,
                                          int? employeeID,
                                          int? branchID,
                                          int? objectID,
                                          string objectType,
                                          int? sellerID,
                                          string saleOrderType,
                                          DateTime? dateFrom,
                                          DateTime? dateTo,
                                          int? productID,
                                          int?userID
            )
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrdersSemiProductBysUser", saleOrderNo, employeeID, branchID, objectID, objectType, sellerID, saleOrderType, dateFrom, dateTo, productID, userID);
            return ds;
        }

        public List<ARSaleOrdersInfo> GetSaleOrdersForOrdering()
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GettSaleOrdersForOrdering");
            return (List<ARSaleOrdersInfo>)GetListFromDataSet(ds);
        }

        public List<ARSaleOrdersInfo> GetAllSaleOrderForHome(DateTime? saleOrderFromDate, DateTime? saleOrderToDate, string saleOrderStatus, bool? isReceiveBill)
        {
            try
            {
                DataSet ds = dal.GetDataSet("ARSaleOrders_GetAllSaleOrderForHome", saleOrderFromDate, saleOrderToDate, saleOrderStatus, isReceiveBill);
                return (List<ARSaleOrdersInfo>)GetListFromDataSet(ds);
            }
            catch (Exception e)
            {
                return new List<ARSaleOrdersInfo>();
            }
        }

        public List<ARSaleOrdersInfo> GetAllObjectForLookupEdit()
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetAllObjectForLookupEdit");
            return (List<ARSaleOrdersInfo>)GetListFromDataSet(ds);
        }

        public List<ARSaleOrdersInfo> GetAllSaleOrderForPrintMultiSaleOrer(int objectID, string acObjectType, DateTime? fromDate, DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetAllSaleOrderForPrintMultiSaleOrer", objectID, acObjectType, fromDate, toDate);
            return (List<ARSaleOrdersInfo>)GetListFromDataSet(ds);
        }

        public List<ARSaleOrdersInfo> GetAllSaleOrderForPrintMultiContractPrinciples(int objectID, string acObjectType, int projectID, DateTime? fromDate, DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetAllSaleOrderForPrintMultiContractPrinciples", objectID, acObjectType, projectID, fromDate, toDate);
            return (List<ARSaleOrdersInfo>)GetListFromDataSet(ds);
        }


        public List<ARSaleOrdersInfo> GetAllSaleOrderForPaymentProposal()
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetAllSaleOrderForPaymentProposal");
            return (List<ARSaleOrdersInfo>)GetListFromDataSet(ds);
        }

        public bool CheckInvalidateToolbarAfterCompleting(int saleOrderID)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrder_CheckInvalidateToolbarAfterCompleting", saleOrderID);
            if (ds.Tables[0].Rows.Count != 0)
            {
                return false;
            }
            else
            {
                return true;
            }
        }

        public ARSaleOrdersInfo GetSaleOrderByIDForReport(int saleOrderID)
        {
            return (ARSaleOrdersInfo)dal.GetDataObject("ARSaleOders_GetSaleOrderByIDForReport", saleOrderID);
        }

        public ARSaleOrdersInfo GetSaleOrderProposalBySaleOrderID(int saleOrderID)
        {
            //throw new NotImplementedException();
            DataSet ds = dal.GetDataSet("ARSaleOders_GetSaleOrderProposalBySaleOrderID", saleOrderID);
            ARSaleOrdersInfo saleOrdersInfo = new ARSaleOrdersInfo();
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows[0] != null)
            {
                saleOrdersInfo = (ARSaleOrdersInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                if (saleOrdersInfo != null)
                {
                    ARCustomerPaymentTimePaymentsController objPaymentTimesController = new ARCustomerPaymentTimePaymentsController();
                    List<ARCustomerPaymentTimePaymentsInfo> paymentTimeList = objPaymentTimesController.GetCustomerPaymentTimeBySaleOrderID(saleOrderID);
                    //DataSet ds1 = dal.GetDataSet("ARPaymentTimePayments_GetPaymentTimeBySaleOrderID", saleOrderID);
                    //List<ARCustomerPaymentTimePaymentsInfo> paymentTimeList = new List<ARCustomerPaymentTimePaymentsInfo>();
                    if (paymentTimeList != null && paymentTimeList.Count > 0)
                    {
                        if (paymentTimeList[0] != null)
                        {
                            saleOrdersInfo.ARCustomerPaymentTimePayment1 = paymentTimeList[0].ARCustomerPaymentTimePaymentTotalAmount;
                            saleOrdersInfo.ARCustomerPaymentTimePayment2 = paymentTimeList.Sum(p => p.ARCustomerPaymentTimePaymentTotalAmount) - saleOrdersInfo.ARCustomerPaymentTimePayment1;
                        }
                    }
                    else
                    {
                        saleOrdersInfo.ARCustomerPaymentTimePayment1 = 0;
                        saleOrdersInfo.ARCustomerPaymentTimePayment2 = 0;
                    }
                    saleOrdersInfo.ARCustomerPaymentTimeRemainedAmount = saleOrdersInfo.ARSaleOrderTotalAmount - saleOrdersInfo.ARCustomerPaymentTimePayment1 - saleOrdersInfo.ARCustomerPaymentTimePayment2;
                }
            }
            return saleOrdersInfo;
        }

        public List<ARSaleOrdersInfo> GetAllSaleOrderByActualDeliveryDate(string actualDeliveryDate, int branchID)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetAllSaleOrderByDeliveryActualDate", actualDeliveryDate, branchID);
            return (List<ARSaleOrdersInfo>)GetListFromDataSet(ds);
        }

        public List<ARSaleOrdersInfo> GetSaleOrderForCancelVoucher()
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrderForCancelVoucher");
            return (List<ARSaleOrdersInfo>)GetListFromDataSet(ds);
        }

        public string GetProposalNameBySaleOrderID(int saleOrderID)
        {
            return (string)dal.GetSingleValue("ARSaleOrders_GetProposalNameBySaleOrderID", saleOrderID);
        }

        public string GetProposalNameBySaleOrderRef(string saleOrderRef)
        {
            return (string)dal.GetSingleValue("ARSaleOrders_GetProposalNameBySaleOrderRef", saleOrderRef);
        }

        public List<ARSaleOrdersInfo> GetStatusSaleOrderByRef(string saleOrderRef)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetStatusSaleOrderByRef", saleOrderRef);
            return (List<ARSaleOrdersInfo>)GetListFromDataSet(ds);
        }

        public void UpdateInventoryStocks(int saleOrderID)
        {
            dal.ExecuteStoredProcedure("ARSaleOrderItems_UpdateInventoryStocks", saleOrderID);
        }

        public List<ARSaleOrdersInfo> GetSaleOrderBySaleContractID(int saleContractID)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrderBySaleContractID", saleContractID);
            List<ARSaleOrdersInfo> saleOrder = new List<ARSaleOrdersInfo>();
            if (ds != null && ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)GetObjectFromDataRow(row);
                    saleOrder.Add(objSaleOrdersInfo);
                }
            }
            return saleOrder;

        }
        public void UpdateCRMTypeAndOpportunity(int saleOrderID)
        {
            dal.ExecuteStoredProcedure("ARSaleOrders_UpdateCRMTypeAndOpportunity", saleOrderID);
        }
        public void UpdateCustomerStatus(int saleOrderID, string status)
        {
            dal.ExecuteStoredProcedure("ARSaleOrders_UpdateCustomerStatus", saleOrderID, status);
        }

        public void UpdateSaleOrderAndItemByInvoiceID(int invoiceID, string referenceType)
        {
            dal.ExecuteStoredProcedure("ARSaleOrders_UpdateSaleOrderAndItemByInvoiceID", invoiceID, referenceType);
        }
        public void RollBackSOQtySaleForcastOrProposal(int saleOrderID, string userName)
        {
            dal.ExecuteStoredProcedure("ARSaleOrders_RollBackSOQtySaleForcastOrProposal", saleOrderID, userName);
        }

        public List<ARSaleOrdersInfo> GetSaleOrderNosList(string saleOrderIDs)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrderNosList", saleOrderIDs);
            return (List<ARSaleOrdersInfo>)GetListFromDataSet(ds);
        }
        public List<ARSaleOrdersInfo> GetSaleOrderNosListByProposal(int proposalID)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrderNosListByProposal", proposalID);
            return (List<ARSaleOrdersInfo>)GetListFromDataSet(ds);
        }
        public void UpdateCommisSion(int saleOrderID, decimal comissionPercen, decimal comissionAmount, string username)
        {
            dal.ExecuteStoredProcedure("ARSaleOrders_Updatecomission", saleOrderID, comissionPercen, comissionAmount, username);
        }

    }
    #endregion
}