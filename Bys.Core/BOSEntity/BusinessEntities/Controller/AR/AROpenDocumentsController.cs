using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region AROpenDocuments
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:AROpenDocumentsController
    //Created Date:Monday, June 09, 2008
    //-----------------------------------------------------------

    public class AROpenDocumentsController : BaseBusinessController
    {
        public AROpenDocumentsController()
        {
            dal = new DALBaseProvider("AROpenDocuments", typeof(AROpenDocumentsInfo));
        }

        public DataSet GetOpenDocumentsByCreatedDate(DateTime dtDateFrom, DateTime dtDateTo)
        {
            return dal.GetDataSet("AROpenDocuments_SelectByCreatedDate", dtDateFrom, dtDateTo);
        }

        public DataSet GetOpenDocumentsByCustomerIDAndDocumentType(int customerID, String documentType)
        {
            String sql = String.Format("SELECT * FROM AROpenDocuments WHERE AAStatus = 'Alive' AND FK_ARCustomerID = {0} AND AROpenDocumentType = '{1}'", customerID, documentType);
            return dal.GetDataSet(sql);
        }

        public DataSet GetDocumentsByDateRange(DateTime from, DateTime to)
        {
            String strQuery = String.Format("SELECT * FROM [dbo].[AROpenDocuments] WHERE CONVERT(VARCHAR(10),[AROpenDocumentDate],112)>= CONVERT(VARCHAR(10),'{0}',112) AND CONVERT(VARCHAR(10),[AROpenDocumentDate],112) <= CONVERT(VARCHAR(10),'{1}',112) AND [AAStatus]='{2}'", from.ToString("yyyyMMdd"), to.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus);
            return GetDataSet(strQuery);
        }

        public DataSet GetNotPostedOpenDocuments()
        {
            String query = String.Format("SELECT * FROM AROpenDocuments WHERE AAStatus = 'Alive' AND AROpenDocumentStatus <> 'Post'");
            return GetDataSet(query);
        }

        public AROpenDocumentsInfo GetOpenDocumentByInvoiceID(int invoiceID)
        {
            DataSet ds = GetAllDataByForeignColumn("FK_ARInvoiceID", invoiceID);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                AROpenDocumentsInfo objOpenDocumentsInfo = (AROpenDocumentsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objOpenDocumentsInfo;
            }
            return null;
        }

        /// <summary>
        /// Get open documents for transferring
        /// </summary>
        /// <returns>List of open documents</returns>
        public List<AROpenDocumentsInfo> GetOpenDocumentsForTransferring()
        {
            DataSet ds = dal.GetDataSet("AROpenDocuments_GetOpenDocumentsForTransferring");
            List<AROpenDocumentsInfo> openDocuments = new List<AROpenDocumentsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    AROpenDocumentsInfo objOpenDocumentsInfo = (AROpenDocumentsInfo)GetObjectFromDataRow(dr);
                    openDocuments.Add(objOpenDocumentsInfo);
                }
            }
            return openDocuments;
        }

        /// <summary>
        /// Get open documents for broadcasting to a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <returns>List of broadcasted open documents</returns>
        public List<AROpenDocumentsInfo> GetOpenDocumentsForBroadcasting(int branchID)
        {
            DataSet ds = dal.GetDataSet("AROpenDocuments_GetOpenDocumentsForBroadcasting", branchID);
            return (List<AROpenDocumentsInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<AROpenDocumentsInfo> openDocuments = new List<AROpenDocumentsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    AROpenDocumentsInfo objOpenDocumentsInfo = (AROpenDocumentsInfo)GetObjectFromDataRow(dr);
                    openDocuments.Add(objOpenDocumentsInfo);
                }
            }
            ds.Dispose();
            return openDocuments;
        }
        public List<AROpenDocumentsInfo> GetOpenDocumentBySaleOrderNo(string saleOrderNo)
        {
            DataSet ds = dal.GetDataSet("AROpenDocuments_GetOpenDocumentBySaleOrderNo", saleOrderNo);
            return (List<AROpenDocumentsInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}