using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ARSaleForecasts
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ARSaleForecastsController
    //Created Date:Monday, October 26, 2015
    //-----------------------------------------------------------

    public class ARSaleForecastsController : BaseBusinessController
    {
        public ARSaleForecastsController()
        {
            dal = new DALBaseProvider("ARSaleForecasts", typeof(ARSaleForecastsInfo));
        }

        public DataSet GetSaleForecastsByCustomerIDAndType(int customerID, String type)
        {
            String sql = String.Format("SELECT * FROM ARSaleForecasts WHERE AAStatus = 'Alive' AND FK_ARCustomerID = {0} AND ARSaleForecastTypeCombo = N'{1}'", customerID, type);
            return dal.GetDataSet(sql);
        }

        public DataSet GetSaleForecastsByCustomerIDAndTypeAndStatus(int customerID, String type, String status)
        {
            String sql = String.Format("SELECT * FROM ARSaleForecasts WHERE AAStatus = 'Alive' AND FK_ARCustomerID = {0} AND ARSaleForecastTypeCombo = N'{1}' AND ARSaleForecastStatus = N'{2}'", customerID, type, status);
            return dal.GetDataSet(sql);
        }

        public DataSet GetSaleForecastsByTypeAndStatus(String type, String status)
        {
            String strQuery = String.Format("SELECT * FROM ARSaleForecasts WHERE AAStatus = 'Alive' AND ARSaleForecastTypeCombo = '{0}' AND ARSaleForecastStatus = '{1}'", type, status);
            return GetDataSet(strQuery);
        }

        public DataSet GetSaleForecastsByTypeAndDeliveryDateRange(String type, DateTime from, DateTime to)
        {
            String strQuery = String.Format("SELECT * FROM [dbo].[ARSaleForecasts] WHERE CONVERT(VARCHAR(10),[ARSaleForecastDeliveryDate],112)>= CONVERT(VARCHAR(10),'{0}',112) AND [AAStatus]='{1}' AND ARSaleForecastTypeCombo = '{2}'",
                                            from.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus, type);
            return GetDataSet(strQuery);
        }

        public DataSet GetSaleForecastsByTypeAndCustomerIDAndDeliveryDateRange(String type, int customerID, DateTime from, DateTime to)
        {
            String strQuery = String.Format("SELECT * FROM [dbo].[ARSaleForecasts] WHERE CONVERT(VARCHAR(10),[ARSaleForecastDeliveryDate],112)>= CONVERT(VARCHAR(10),'{0}',112) AND [AAStatus]='{1}' AND ARSaleForecastTypeCombo = '{2}' AND FK_ARCustomerID = {3}",
                                            from.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus, type, customerID);
            return GetDataSet(strQuery);
        }

        /// <summary>
        /// Get the list of sale orders based on some criteria
        /// </summary>
        /// <param name="customerId">Customer identifier</param>
        /// <param name="status">Sale order status</param>
        /// <param name="SaleForecastType">Sale order type</param>
        /// <param name="dateFrom">Date the result is searched from</param>
        /// <param name="dateTo">Date the result is searched to</param>
        /// <returns></returns>
        public List<ARSaleForecastsInfo> GetSaleForecastList(int? customerId,
                                        String status,
                                        String SaleForecastType,
                                        DateTime? dateFrom,
                                        DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("ARSaleForecasts_GetSaleForecastList", customerId, status, SaleForecastType, dateFrom, dateTo);
            List<ARSaleForecastsInfo> SaleForecasts = new List<ARSaleForecastsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleForecastsInfo objSaleForecastsInfo = (ARSaleForecastsInfo)GetObjectFromDataRow(row);
                    SaleForecasts.Add(objSaleForecastsInfo);
                }
            }
            return SaleForecasts;
        }
        /// <summary>
        /// Get the total deposit of saleorder shipped for a sale Forecast
        /// </summary>
        /// <param name="saleOrderID">sale Forecast id</param>
        /// <returns>Total deposit</returns>
        public decimal GetTotalInvoiceDeposit(int ARSaleForecastID)
        {
            return Convert.ToDecimal(dal.GetSingleValue("ARSaleForecasts_GetTotalSaleOrderDeposit", ARSaleForecastID));
        }



        /// <summary>
        /// Get sale order by delivery due days with out status is invoiced
        /// </summary>
        /// <param name="deliveryDueDays">Delivery due day</param>
        /// <returns>Data of sale order</returns>
        public DataSet GetSaleForecastByDeliveryDueDays(int deliveryDueDays)
        {
            DataSet ds = dal.GetDataSet("ARSaleForecasts_GetSaleForecastByDeliveryDueDays", deliveryDueDays);
            return ds;
        }

        /// <summary>
        /// Get the sale order list by a given type
        /// </summary>
        /// <param name="type">Given type</param>
        /// <returns>List of sale orders</returns>
        public List<ARSaleForecastsInfo> GetSaleForecastsByType(string type)
        {
            List<ARSaleForecastsInfo> SaleForecastList = GetSaleForecastList(null, null, type, null, null);
            return SaleForecastList;
        }

        /// <summary>
        /// Get the sale order list for shipping
        /// </summary>
        /// <returns>List of sale orders</returns>
        public List<ARSaleForecastsInfo> GetSaleForecastsForShipping()
        {
            DataSet ds = dal.GetDataSet("ARSaleForecasts_GetSaleForecastsForShipping");
            List<ARSaleForecastsInfo> SaleForecastList = new List<ARSaleForecastsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleForecastsInfo objSaleForecastsInfo = (ARSaleForecastsInfo)GetObjectFromDataRow(row);
                    SaleForecastList.Add(objSaleForecastsInfo);
                }
            }
            return SaleForecastList;
        }

        /// <summary>
        /// Get the sale order list for shipping
        /// </summary>
        /// <returns>List of sale orders</returns>
        public List<ARSaleForecastsInfo> GetSaleForecastsForShippingByUserPermission(int userID, string moduleName, string dataViewPermissionType)
        {
            DataSet ds = dal.GetDataSet("ARSaleForecasts_GetSaleForecastsForShippingByUserPermission", userID, moduleName, dataViewPermissionType);
            List<ARSaleForecastsInfo> SaleForecastList = new List<ARSaleForecastsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleForecastsInfo objSaleForecastsInfo = (ARSaleForecastsInfo)GetObjectFromDataRow(row);
                    SaleForecastList.Add(objSaleForecastsInfo);
                }
            }
            return SaleForecastList;
        }

        /// <summary>
        /// Get the sale order list for canceling
        /// </summary>
        /// <returns>List of sale orders</returns>
        public List<ARSaleForecastsInfo> GetSaleForecastsForCanceling()
        {
            DataSet ds = dal.GetDataSet("ARSaleForecasts_GetSaleForecastsForCanceling");
            List<ARSaleForecastsInfo> SaleForecastList = new List<ARSaleForecastsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleForecastsInfo objSaleForecastsInfo = (ARSaleForecastsInfo)GetObjectFromDataRow(row);
                    SaleForecastList.Add(objSaleForecastsInfo);
                }
            }
            return SaleForecastList;
        }

        /// <summary>
        /// Get the sale order list for canceling
        /// </summary>
        /// <returns>List of sale orders</returns>
        public List<ARSaleForecastsInfo> GetSaleForecastsForCancelingByUserPermission(int userID, string moduleName, string dataViewPermissionType)
        {
            DataSet ds = dal.GetDataSet("ARSaleForecasts_GetSaleForecastsForCancelingByUserPermission", userID, moduleName, dataViewPermissionType);
            List<ARSaleForecastsInfo> SaleForecastList = new List<ARSaleForecastsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleForecastsInfo objSaleForecastsInfo = (ARSaleForecastsInfo)GetObjectFromDataRow(row);
                    SaleForecastList.Add(objSaleForecastsInfo);
                }
            }
            return SaleForecastList;
        }


        /// <summary>
        /// Get a sale order by id
        /// </summary>
        /// <param name="SaleForecastID">Sale order id</param>
        /// <returns>Sale order object</returns>
        public ARSaleForecastsInfo GetSaleForecastByID(int SaleForecastID)
        {
            return (ARSaleForecastsInfo)dal.GetDataObject("ARSaleForecasts_GetSaleForecastByID", SaleForecastID);
        }
        /// <summary>
        /// Get a sale order by id
        /// </summary>
        /// <param name="SaleForecastID">Sale order id</param>
        /// <returns>Sale order object</returns>
        public ARSaleForecastsInfo GetSaleForecastBySaleOrderID(int SaleOrderID)
        {
            return (ARSaleForecastsInfo)dal.GetDataObject("ARSaleForecasts_GetSaleForecastBySaleOrderID", SaleOrderID);
        }

        /// <summary>
        /// Get the total deposit of a sale order
        /// </summary>
        /// <param name="SaleForecastID">Sale order id</param>
        /// <param name="paymentMethod">Payment method the result should be calculated by</param>
        /// <returns>Total deposit</returns>
        public decimal GetTotalDeposit(int SaleForecastID, string paymentMethod)
        {
            return Convert.ToDecimal(dal.GetSingleValue("ARSaleForecasts_GetTotalDeposit", SaleForecastID, paymentMethod));
        }

        /// <summary>
        /// Get sale orders for transferring
        /// </summary>
        /// <returns>List of sale orders</returns>
        public List<ARSaleForecastsInfo> GetSaleForecastsForTransferring()
        {
            DataSet ds = dal.GetDataSet("ARSaleForecasts_GetSaleForecastsForTransferring");
            List<ARSaleForecastsInfo> SaleForecasts = new List<ARSaleForecastsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleForecastsInfo objSaleForecastsInfo = (ARSaleForecastsInfo)GetObjectFromDataRow(row);
                    SaleForecasts.Add(objSaleForecastsInfo);
                }
            }
            return SaleForecasts;
        }

        /// <summary>
        /// Get sale orders for broadcasting to a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <returns>List of broadcasted sale orders</returns>
        public List<ARSaleForecastsInfo> GetSaleForecastsForBroadcasting(int branchID)
        {
            DataSet ds = dal.GetDataSet("ARSaleForecasts_GetSaleForecastsForBroadcasting", branchID);
            return (List<ARSaleForecastsInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ARSaleForecastsInfo> SaleForecasts = new List<ARSaleForecastsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleForecastsInfo objSaleForecastsInfo = (ARSaleForecastsInfo)GetObjectFromDataRow(row);
                    SaleForecasts.Add(objSaleForecastsInfo);
                }
            }
            ds.Dispose();
            return SaleForecasts;
        }

        /// <summary>
        /// Get the total owing exchange deposit of invoices shipped for a sale order
        /// </summary>
        /// <param name="SaleForecastID">Sale order id</param>
        /// <param name="entryTypeName">entry type name which the result should be calculated by</param>
        /// <returns>Total invoice owing exchange deposit</returns>
        public decimal GetTotalInvoiceOwingExchangeDeposit(int SaleForecastID, string entryTypeName)
        {
            return Convert.ToDecimal(dal.GetSingleValue("ARSaleForecasts_GetTotalInvoiceOwingExchangeDeposit", SaleForecastID, entryTypeName));
        }

        public DataSet GetSaleForecastListDataSetByListOfBranchID(string SaleForecastNo,
                                                int? customerID,
                                                int? branchID,
                                                int? employeeID,
                                                int? sellerID,
                                                string SaleForecastType,
                                                DateTime? dateFrom,
                                                DateTime? dateTo, List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            List<int> collections = new List<int>();
            int rowIndex = 0;
            DataRow row;
            DataRowCollection rows;
            bool isValid = true;
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetSaleForecastListDataSet(SaleForecastNo, customerID, ojbBranchsInfo.BRBranchID, employeeID, sellerID, SaleForecastType, dateFrom, dateTo);
                if (ds != null && ds.Tables.Count != 0 && ds.Tables[0].Rows.Count != 0)
                {
                    rowIndex = 0;
                    rows = ds.Tables[0].Rows;
                    isValid = true;
                    while (isValid)
                    {
                        row = rows[rowIndex];
                        int id = row["ARSaleForecastID"] is DBNull ? -1 : Convert.ToInt32(row["ARSaleForecastID"].ToString());
                        if (id != -1 && !collections.Contains(id))
                        {
                            collections.Add(id);
                            rowIndex++;
                        }
                        else
                        {
                            rows.Remove(row);
                        }
                        if (rows.Count == 0 || rows.Count == rowIndex)
                            isValid = false;
                    }
                }
                rtn.Merge(ds);
            }
            if (rtn.Tables.Count != 0)
            {
                DataView dataView = rtn.Tables[0].DefaultView;
                dataView.Sort = "ARSaleForecastDate, ARSaleForecastNo ASC";
            }
            return rtn;
        }

        public DataSet GetSaleForecastListDataSet(string SaleForecastNo,
                                                int? customerID,
                                                int? branchID,
                                                int? employeeID,
                                                int? sellerID,
                                                string SaleForecastType,
                                                DateTime? dateFrom,
                                                DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("ARSaleForecasts_GetSaleForecastsDataset", SaleForecastNo, customerID, branchID, employeeID, sellerID, SaleForecastType, dateFrom, dateTo);
            return ds;
        }

        public ARSaleForecastsInfo GetSaleForecastByDepositNo(string depositNo)
        {
            ARSaleForecastsInfo SaleForecast = dal.GetDataObject("ARSaleForecasts_GetSaleForecastByDepositNo", depositNo) as ARSaleForecastsInfo;

            return SaleForecast;
        }
        public List<ARSaleForecastsInfo> GetSaleForecastList_RP(DateTime? fromDate,
                                        DateTime? toDate,
                                        int? customerID,
                                        string ARSaleForecastNo
                                        )
        {
            DataSet ds = dal.GetDataSet("RP_Generalbusinessreport", fromDate, toDate, customerID, ARSaleForecastNo);
            List<ARSaleForecastsInfo> SaleForecasts = new List<ARSaleForecastsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleForecastsInfo objSaleForecastsInfo = (ARSaleForecastsInfo)GetObjectFromDataRow(row);
                    SaleForecasts.Add(objSaleForecastsInfo);
                }
            }
            return SaleForecasts;
        }


        public DataSet GetAllSaleForecastsForLookupControl()
        {
            DataSet ds = dal.GetDataSet("ARSaleForecasts_GetAllSaleForecastsForLookupControl");
            return ds;
        }

        public List<ARSaleForecastsInfo> GetDataForRP097(DateTime? fromDate,
                                        DateTime? toDate,
                                        int objectId,
                                        string objectType,
                                        string ARSaleForecastNo
                                        )
        {
            DataSet ds = dal.GetDataSet("RP_GetDataForRP097", fromDate, toDate, objectId, objectType, ARSaleForecastNo);
            List<ARSaleForecastsInfo> SaleForecasts = new List<ARSaleForecastsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleForecastsInfo objSaleForecastsInfo = (ARSaleForecastsInfo)GetObjectFromDataRow(row);
                    SaleForecasts.Add(objSaleForecastsInfo);
                }
            }
            return SaleForecasts;
        }
    }
    #endregion
}