using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ARSaleContracts
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ARSaleContractsController
    //Created Date:Friday, May 31, 2019
    //-----------------------------------------------------------

    public class ARSaleContractsController : BaseBusinessController
    {
        public ARSaleContractsController()
        {
            dal = new DALBaseProvider("ARSaleContracts", typeof(ARSaleContractsInfo));
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ARSaleContractsInfo> saleContracts = new List<ARSaleContractsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleContractsInfo objSaleContractsInfo = (ARSaleContractsInfo)GetObjectFromDataRow(row);
                    saleContracts.Add(objSaleContractsInfo);
                }
            }
            ds.Dispose();
            return saleContracts;
        }

        public DataSet GetSaleContractListByListOfBranchID(
                                string saleContractNo,
                                string objectAccessKey,
                                int? employeeID,
                                string saleContractType,
                                DateTime? fromDate,
                                DateTime? toDate,
                                List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetSaleContractList(saleContractNo,
                                                    objectAccessKey,
                                                    employeeID,
                                                    saleContractType,
                                                    fromDate,
                                                    toDate,
                                                    ojbBranchsInfo.BRBranchID);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public DataSet GetSaleContractList(
                               string saleContractNo,
                               string objectAccessKey,
                               int? employeeID,
                               string saleContractType,
                               DateTime? fromDate,
                               DateTime? toDate,
                               int? branchID)
        {
            return dal.GetDataSet("ARSaleContracts_GetSaleContractList",
                                saleContractNo,
                                objectAccessKey,
                                employeeID,
                                saleContractType,
                                fromDate,
                                toDate,
                                branchID);
        }

        public List<ARSaleContractsInfo> GetAllSaleContractByBranchID(int branchID)
        {
            DataSet ds = dal.GetDataSet("ARSaleContracts_GetAllSaleContractByBranchID", branchID);
            return (List<ARSaleContractsInfo>)GetListFromDataSet(ds);
        }

        public List<ARSaleContractsInfo> GetAllSaleContractByProjectID(int branchID)
        {
            DataSet ds = dal.GetDataSet("ARSaleContracts_GetAllSaleContractByProjectID", branchID);
            return (List<ARSaleContractsInfo>)GetListFromDataSet(ds);
        }

        public List<ARSaleContractsInfo> GetSaleContractByObjectIDAnProjectID(int objectID, string objectType, int projectID)
        {
            DataSet ds = dal.GetDataSet("ARSaleContracts_GetSaleContractByObjectIDAnProjectID", objectID, objectType, projectID);
            return (List<ARSaleContractsInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}