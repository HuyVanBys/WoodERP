using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;

namespace BOSERP
{
    #region ARCustomers
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ARCustomersController
    //Created Date:Saturday, March 15, 2008
    //-----------------------------------------------------------

    public class ARCustomersController : BaseBusinessController
    {
        public ARCustomersController()
        {
            dal = new DALBaseProvider("ARCustomers", typeof(ARCustomersInfo));
        }

        public override object GetObjectByID(int iObjectID)
        {
            ARCustomersInfo objCustomersInfo = (ARCustomersInfo)base.GetObjectByID(iObjectID);
            if (objCustomersInfo != null)
            {
                objCustomersInfo.ARCustomerAvailableCredit = objCustomersInfo.ARCustomerCreditLimit - objCustomersInfo.ARCustomerOwing;
                return objCustomersInfo;
            }
            return null;
        }

        /// <summary>
        /// Get invoice summary of a customer
        /// </summary>
        /// <param name="objCustomersInfo">Customer object is used to retrieve data</param>
        public void GetCustomerInvoiceSummary(ARCustomersInfo objCustomersInfo, DateTime? dateFrom, DateTime? dateTo)
        {
            DbCommand cmd = dal.GetStoredProcedureCommand("ARCustomers_GetCustomerInvoiceSummary");
            dal.AddParameter(cmd, "ARCustomerID", DbType.Int32, ParameterDirection.Input, objCustomersInfo.ARCustomerID);
            dal.AddParameter(cmd, "DateFrom", DbType.DateTime, ParameterDirection.Input, dateFrom);
            dal.AddParameter(cmd, "DateTo", DbType.DateTime, ParameterDirection.Input, dateTo);
            dal.AddParameter(cmd, "TotalPurchaseAmount", DbType.Decimal, ParameterDirection.Output, objCustomersInfo.TotalPurchaseAmount);
            dal.AddParameter(cmd, "TotalRefundAmount", DbType.Decimal, ParameterDirection.Output, objCustomersInfo.TotalRefundAmount);
            dal.AddParameter(cmd, "TotalPurchaseQty", DbType.Decimal, ParameterDirection.Output, objCustomersInfo.TotalPurchaseQty);
            dal.AddParameter(cmd, "TotalRefundQty", DbType.Decimal, ParameterDirection.Output, objCustomersInfo.TotalRefundQty);
            dal.GetDataSet(cmd);
            objCustomersInfo.TotalPurchaseAmount = Convert.ToDecimal(dal.GetParameterValue(cmd, "TotalPurchaseAmount"));
            objCustomersInfo.TotalRefundAmount = Convert.ToDecimal(dal.GetParameterValue(cmd, "TotalRefundAmount"));
            objCustomersInfo.TotalPurchaseQty = Convert.ToDecimal(dal.GetParameterValue(cmd, "TotalPurchaseQty"));
            objCustomersInfo.TotalRefundQty = Convert.ToDecimal(dal.GetParameterValue(cmd, "TotalRefundQty"));
        }

        /// <summary>
        /// Get sale order summary of a customer
        /// </summary>
        /// <param name="objCustomersInfo">Customer object is used to retrieve data</param>
        public void GetCustomerOrderSummary(ARCustomersInfo objCustomersInfo, DateTime? dateFrom, DateTime? dateTo)
        {
            DbCommand cmd = dal.GetStoredProcedureCommand("ARCustomers_GetCustomerOrderSummary");
            dal.AddParameter(cmd, "ARCustomerID", DbType.Int32, ParameterDirection.Input, objCustomersInfo.ARCustomerID);
            dal.AddParameter(cmd, "DateFrom", DbType.DateTime, ParameterDirection.Input, dateFrom);
            dal.AddParameter(cmd, "DateTo", DbType.DateTime, ParameterDirection.Input, dateTo);
            dal.AddParameter(cmd, "TotalOrderAmount", DbType.Decimal, ParameterDirection.Output, objCustomersInfo.TotalOrderAmount);
            dal.AddParameter(cmd, "TotalOrderQty", DbType.Decimal, ParameterDirection.Output, objCustomersInfo.TotalOrderQty);
            dal.GetDataSet(cmd);

            objCustomersInfo.TotalOrderAmount = Convert.ToDecimal(dal.GetParameterValue(cmd, "TotalOrderAmount"));
            objCustomersInfo.TotalOrderQty = Convert.ToDecimal(dal.GetParameterValue(cmd, "TotalOrderQty"));
        }

        /// <summary>
        /// Get all customer that have status isnot Dummy
        /// </summary>
        /// <returns>List of all customer</returns>
        public List<ARCustomersInfo> GetAllCustomer()
        {
            DataSet ds = dal.GetDataSet("ARCustomers_GetAllCustomer");
            List<ARCustomersInfo> customerList = new List<ARCustomersInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                ARCustomersController objCustomersController = new ARCustomersController();
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ARCustomersInfo objCustomersInfo = new ARCustomersInfo();
                    objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectFromDataRow(dr);
                    customerList.Add(objCustomersInfo);
                }
            }
            return customerList;
        }

        public List<ARCustomersInfo> GetAllCustomer_different(int ARCustomerID)
        {
            DataSet ds = dal.GetDataSet("ARcustomer_GetAllCustomer_different", ARCustomerID);
            List<ARCustomersInfo> customerList = new List<ARCustomersInfo>();

            if (ds.Tables[0].Rows.Count > 0)
            {
                ARCustomersController objCustomersController = new ARCustomersController();
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ARCustomersInfo objCustomersInfo = new ARCustomersInfo();
                    objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectFromDataRow(dr);
                    customerList.Add(objCustomersInfo);
                }
            }
            return customerList;
        }

        /// <summary>
        /// Get customer by history detail id
        /// </summary>
        /// <param name="historyDetailID">The history detail id</param>
        /// <returns>Info of customer</returns>
        public ARCustomersInfo GetCustomerByHistoryDetailID(int historyDetailID)
        {
            DataSet ds = dal.GetDataSet("ARCustomers_GetCustomerByHistoryDetailID", historyDetailID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ARCustomersInfo objCustomersInfo = (ARCustomersInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objCustomersInfo;
            }
            return null;
        }

        /// <summary>
        /// Get total owing of a customer
        /// </summary>
        /// <param name="customerID">Customer id</param>
        /// <returns>Total owing</returns>
        public decimal GetTotalOwing(int customerID)
        {
            DataSet ds = dal.GetDataSet("ARCustomers_GetTotalOwing", customerID);
            decimal owing = 0;
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0][0] != DBNull.Value)
                {
                    owing = Convert.ToDecimal(ds.Tables[0].Rows[0][0]);
                }
            }
            return owing;
        }

        /// <summary>
        /// Get customers for transferring
        /// </summary>
        /// <returns>List of customers</returns>
        public List<ARCustomersInfo> GetCustomersForTransferring()
        {
            DataSet ds = dal.GetDataSet("ARCustomers_GetCustomersForTransferring");
            List<ARCustomersInfo> customers = new List<ARCustomersInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARCustomersInfo objCustomersInfo = (ARCustomersInfo)GetObjectFromDataRow(row);
                    customers.Add(objCustomersInfo);
                }
            }
            return customers;
        }

        /// <summary>
        /// Get customers for broadcasting to a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <returns>List of broadcasted customers</returns>
        public List<ARCustomersInfo> GetCustomersForBroadcasting(int branchID)
        {
            DataSet ds = dal.GetDataSet("ARCustomers_GetCustomersForBroadcasting", branchID);
            return (List<ARCustomersInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ARCustomersInfo> customers = new List<ARCustomersInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARCustomersInfo objCustomersInfo = (ARCustomersInfo)GetObjectFromDataRow(row);
                    customers.Add(objCustomersInfo);
                }
            }
            ds.Dispose();
            return customers;
        }

        /// <summary>
        /// Get customer list by list branch ID
        /// </summary>
        /// <param name="customerNo">customerNo</param>
        /// <param name="customerName">customerName</param>
        /// <param name="customerTypeCombo">customerTypeCombo</param>
        /// <param name="priceLevelID">priceLevelID</param>
        /// <param name="customerContactPhone">customerContactPhone</param>
        /// <param name="branchID">branchID</param>
        /// <param name="customerContactAddressLine3">customerContactAddressLine3</param>
        /// <param name="branchList">branchList</param>
        /// <returns></returns>
        public DataSet GetCustomerListByListOfBranchID(
                                                  string customerNo,
                                                  string customerName,
                                                  string customerTypeCombo,
                                                  int? priceLevelID,
                                                  string customerContactPhone,
                                                  int? branchID,
                                                  string customerContactAddressLine3,
                                                  int? userID,
                                                  List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetCustomerListByBranchIDAndUser(customerNo, customerName, customerTypeCombo, priceLevelID, customerContactPhone, ojbBranchsInfo.BRBranchID, userID, customerContactAddressLine3);
                rtn.Merge(ds);
            }

            return rtn;
        }

        /// <summary>
        /// Get Customer List By Branch ID
        /// </summary>
        /// <param name="customerNo">customerNo</param>
        /// <param name="customerName">customerName</param>
        /// <param name="customerTypeCombo">customerTypeCombo</param>
        /// <param name="priceLevelID">priceLevelID</param>
        /// <param name="customerContactPhone">customerContactPhone</param>
        /// <param name="branchID">branchID</param>
        /// <param name="customerContactAddressLine3">customerContactAddressLine3</param>
        /// <returns></returns>
        public DataSet GetCustomerListByBranchID(
                                                  string customerNo,
                                                  string customerName,
                                                  string customerTypeCombo,
                                                  int? priceLevelID,
                                                  string customerContactPhone,
                                                  int? branchID,
                                                  string customerContactAddressLine3)
        {
            DataSet ds = dal.GetDataSet("ARCustomers_GetCustomerListByBranchID", customerNo, customerName, customerTypeCombo, priceLevelID, customerContactPhone, branchID, customerContactAddressLine3);
            return ds;
        }
        public DataSet GetCustomerListByBranchIDAndUser(
                                                  string customerNo,
                                                  string customerName,
                                                  string customerTypeCombo,
                                                  int? priceLevelID,
                                                  string customerContactPhone,
                                                  int? branchID,
                                                  int? userID,
                                                  string customerContactAddressLine3)
        {
            DataSet ds = dal.GetDataSet("ARCustomers_GetCustomerListByBranchIDAndUser", customerNo, customerName, customerTypeCombo, priceLevelID, customerContactPhone, branchID, customerContactAddressLine3, userID);
            return ds;
        }

        //[NUThao] [Improve Speed] [2014-09-09]
        public DataSet GetAllCustomersForLookupControl()
        {
            DataSet ds = dal.GetDataSet("ARCustomers_GetAllCustomersForLookupControl");
            return ds;
        }
        public DataSet GetAllCustomersForLookupControlByUser(int userId)
        {
            DataSet ds = dal.GetDataSet("ARCustomers_GetAllCustomersForLookupControlByUser", userId);
            return ds;
        }

        public List<ARCustomersInfo> GetCustomerListByPhoneAndCMND(string phone, string cmnd)
        {
            DataSet ds = dal.GetDataSet("ARCustomers_GetCustomerListByPhoneAndCMND", phone, cmnd);
            List<ARCustomersInfo> customers = new List<ARCustomersInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARCustomersInfo objCustomersInfo = (ARCustomersInfo)GetObjectFromDataRow(row);
                    customers.Add(objCustomersInfo);
                }
            }
            return customers;
        }
    }
    #endregion
}