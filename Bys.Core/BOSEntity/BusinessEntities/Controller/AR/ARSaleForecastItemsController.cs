using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ARSaleForecastItems
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ARSaleForecastItemsController
    //Created Date:Monday, October 26, 2015
    //-----------------------------------------------------------

    public class ARSaleForecastItemsController : BaseBusinessController
    {
        public ARSaleForecastItemsController()
        {
            dal = new DALBaseProvider("ARSaleForecastItems", typeof(ARSaleForecastItemsInfo));
        }

        /// <summary>
        /// Get sale order item list including the item's components of a sale order
        /// </summary>
        /// <param name="SaleForecastID">Sale order id</param>
        /// <returns>List of sale order items</returns>
        public List<ARSaleForecastItemsInfo> GetComponentItemsBySaleForecastID(int saleForecastID)
        {
            DataSet ds = dal.GetDataSet("ARSaleForecastItems_GetComponentItemsBySaleForecastID", saleForecastID);
            List<ARSaleForecastItemsInfo> saleForecastItems = new List<ARSaleForecastItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleForecastItemsInfo objSaleForecastItemsInfo = (ARSaleForecastItemsInfo)GetObjectFromDataRow(row);
                    saleForecastItems.Add(objSaleForecastItemsInfo);
                }
            }
            return saleForecastItems;
        }

        /// <summary>
        /// Delete all items and their relative data of a sale order
        /// </summary>
        /// <param name="saleForecastID">Sale order id</param>
        public void DeleteBySaleForecastID(int saleForecastID)
        {
            dal.ExecuteStoredProcedure("ARSaleForecastItems_DeleteBySaleForecastID", saleForecastID);
        }

        /// <summary>
        /// Update the shipped quantity of an item
        /// </summary>
        /// <param name="saleForecastItemID">Item ID</param>
        /// <param name="shippedQty">Updated shipped quantity</param>
        public void UpdateShippedQty(int saleForecastItemID, decimal shippedQty)
        {
            dal.ExecuteStoredProcedure("ARSaleForecastItems_UpdateShippedQty", saleForecastItemID, shippedQty);
        }

        public void UpdateSOQty(int saleOrderItemID, decimal SOQty)
        {
            dal.ExecuteStoredProcedure("ARSaleForecastItems_UpdateSOQty", saleOrderItemID, SOQty);
        }

        /// <summary>
        /// Get all items of a sale order
        /// </summary>
        /// <param name="saleForecastID">Sale order id</param>
        /// <returns>List of items</returns>
        public List<ARSaleForecastItemsInfo> GetItemsBySaleForecastID(int saleForecastID)
        {
            DataSet ds = dal.GetDataSet("ARSaleForecastItems_GetItemsBySaleForecastID", saleForecastID);
            List<ARSaleForecastItemsInfo> saleForecastItems = new List<ARSaleForecastItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleForecastItemsInfo objSaleForecastItemsInfo = (ARSaleForecastItemsInfo)GetObjectFromDataRow(row);
                    saleForecastItems.Add(objSaleForecastItemsInfo);
                }
            }
            return saleForecastItems;
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ARSaleForecastItemsInfo> saleForecastItems = new List<ARSaleForecastItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleForecastItemsInfo objSaleForecastItemsInfo = (ARSaleForecastItemsInfo)GetObjectFromDataRow(row);
                    saleForecastItems.Add(objSaleForecastItemsInfo);
                }
            }
            ds.Dispose();
            return saleForecastItems;
        }
        public DataSet GetAllDataBySaleForecastID(int saleForecastID)
        {
            return dal.GetDataSet("ARSaleForecastItems_GetAllDataBySaleForecastID", saleForecastID);
        }

        public List<ARSaleForecastItemsInfo> GetSaleOrderItemsForBatchProduct()
        {
            DataSet ds = dal.GetDataSet("ARSaleForecastItems_GetSaleForecastItemsForBatchProduct");
            List<ARSaleForecastItemsInfo> saleForecastItems = new List<ARSaleForecastItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleForecastItemsInfo objSaleForecastItemsInfo = (ARSaleForecastItemsInfo)GetObjectFromDataRow(row);
                    saleForecastItems.Add(objSaleForecastItemsInfo);
                }
            }
            return saleForecastItems;
        }
        public List<ARSaleForecastItemsInfo> GetItemByViewHitorySF(DateTime fromDate, DateTime toDate, int customerID, int productGroupID)
        {
            DataSet ds = dal.GetDataSet("ARSaleForecastItems_GetItemByViewHitorySF",fromDate, toDate, customerID, productGroupID);
            List<ARSaleForecastItemsInfo> saleForecastItems = new List<ARSaleForecastItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleForecastItemsInfo objSaleForecastItemsInfo = (ARSaleForecastItemsInfo)GetObjectFromDataRow(row);
                    saleForecastItems.Add(objSaleForecastItemsInfo);
                }
            }
            return saleForecastItems;
        }
    }
    #endregion
}