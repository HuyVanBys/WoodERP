using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ARCustomerPayments
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ARCustomerPaymentsController
    //Created Date:Monday, June 09, 2008
    //-----------------------------------------------------------

    public class ARCustomerPaymentsController : BaseBusinessController
    {
        public ARCustomerPaymentsController()
        {
            dal = new DALBaseProvider("ARCustomerPayments", typeof(ARCustomerPaymentsInfo));
        }

        /// <summary>
        /// Get the list of payments based on some criteria
        /// </summary>
        /// <param name="customerPaymentNo">Customer payment no</param>
        /// <param name="openDocumentNo">Open document no</param>
        /// <param name="customerID">Custoemr id</param>
        /// <param name="employeeID">Employee id</param>
        /// <param name="customerPaymentType">Customer payment type</param>
        /// <param name="fromDate">Date the result will be filtered from</param>
        /// <param name="toDate">Date the result will be filtered to</param>
        /// <returns>List of payments</returns>
        public DataSet GetPaymentList(
                                string customerPaymentNo,
                                string openDocumentNo,
                                int? objectID,
                                string objectType,
                                int? employeeID,
                                string customerPaymentType,
                                int? branchID,
                                DateTime? fromDate,
                                DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ARCustomerPayments_GetPaymentList", customerPaymentNo, openDocumentNo, objectID, objectType, employeeID, customerPaymentType, branchID, fromDate, toDate);
            return ds;
        }

        public DataSet GetPaymentListByCustomerPaymentTypeList(
                               string customerPaymentNo,
                               string openDocumentNo,
                               int? objectID,
                               string objectType,
                               int? employeeID,
                               List<String> customerPaymentTypeList,
                               int? branchID,
                               DateTime? fromDate,
                               DateTime? toDate)
        {
            DataSet rtn = new DataSet();
            foreach (String customerPaymentType in customerPaymentTypeList)
            {
                DataSet ds = dal.GetDataSet("ARCustomerPayments_GetPaymentList", customerPaymentNo, openDocumentNo, objectID, objectType, employeeID, customerPaymentType, branchID, fromDate, toDate);
                rtn.Merge(ds);
            }

            return rtn;
        }

        /// <summary>
        /// Get the list of payments based on some criteria
        /// </summary>
        /// <param name="customerID">Customer identifier</param>
        /// <param name="dateFrom">Date the result is searched from</param>
        /// <param name="dateTo">Date the result is searched to</param>
        /// <returns>List of payments</returns>
        public List<ARCustomerPaymentsInfo> GetPaymentList(int? objectID, string objectType, int? branchID, DateTime? dateFrom, DateTime? dateTo)
        {
            DataSet ds = GetPaymentList(null, null, objectID, objectType, null, null, branchID, dateFrom, dateTo);
            List<ARCustomerPaymentsInfo> payments = new List<ARCustomerPaymentsInfo>();
            if (ds != null && ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARCustomerPaymentsInfo objCustomerPaymentsInfo = (ARCustomerPaymentsInfo)GetObjectFromDataRow(row);
                    payments.Add(objCustomerPaymentsInfo);
                }
            }
            return payments;
        }

        /// <summary>
        /// Get the list of payments based on some criteria
        /// </summary>
        /// <param name="openDocumentNo">Open document no</param>
        /// <param name="customerID">Customer id</param>
        /// <param name="fromDate">Date the result will be filtered from</param>
        /// <param name="toDate">Date the result will be filtered to</param>
        /// <returns>List of payments</returns>
        public List<ARCustomerPaymentsInfo> GetPaymentList(string openDocumentNo, int? objectID, string objectType, string customerPaymentType, int? branchID, DateTime? fromDate, DateTime? toDate)
        {
            DataSet ds = GetPaymentList(null, openDocumentNo, objectID, objectType, null, customerPaymentType, branchID, fromDate, toDate);
            List<ARCustomerPaymentsInfo> payments = new List<ARCustomerPaymentsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARCustomerPaymentsInfo objCustomerPaymentsInfo = (ARCustomerPaymentsInfo)GetObjectFromDataRow(row);
                    payments.Add(objCustomerPaymentsInfo);
                }
            }
            return payments;
        }

        /// <summary>
        /// Get the list of payments based on some criteria
        /// </summary>
        /// <param name="customerID">Customer id</param>
        /// <param name="customerPaymentType">Customer payment type</param>
        /// <param name="fromDate">Date the result will be filtered from</param>
        /// <param name="toDate">Date the result will be filtered to</param>
        /// <returns>List of payments</returns>
        public List<ARCustomerPaymentsInfo> GetPaymentList(int? objectID, string objectType, string customerPaymentType, int? branchID, DateTime? fromDate, DateTime? toDate)
        {
            DataSet ds = GetPaymentList(null, null, objectID, objectType, null, customerPaymentType, branchID, fromDate, toDate);
            List<ARCustomerPaymentsInfo> payments = new List<ARCustomerPaymentsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARCustomerPaymentsInfo objCustomerPaymentsInfo = (ARCustomerPaymentsInfo)GetObjectFromDataRow(row);
                    payments.Add(objCustomerPaymentsInfo);
                }
            }
            return payments;
        }

        /// <summary>
        /// Get all customer payment
        /// </summary>
        /// <returns>List of all customer payment</returns>
        public List<ARCustomerPaymentsInfo> GetAllCustomerPayment()
        {
            DataSet ds = dal.GetDataSet("ARCustomerPayments_GetAllCustomerPayment");
            List<ARCustomerPaymentsInfo> customerPaymentList = new List<ARCustomerPaymentsInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                ARCustomerPaymentsController objCustomerPaymentsController = new ARCustomerPaymentsController();
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ARCustomerPaymentsInfo objCustomerPaymentsInfo = new ARCustomerPaymentsInfo();
                    objCustomerPaymentsInfo = (ARCustomerPaymentsInfo)objCustomerPaymentsController.GetObjectFromDataRow(dr);
                    customerPaymentList.Add(objCustomerPaymentsInfo);
                }
            }
            return customerPaymentList;
        }

        /// <summary>
        /// Get customer payments of an invoice
        /// </summary>
        /// <param name="invoiceID">Invoice id</param>
        /// <returns>List of customer payments</returns>
        public List<ARCustomerPaymentsInfo> GetCustomerPaymentsByInvoiceID(int invoiceID)
        {
            DataSet ds = dal.GetDataSet("ARCustomerPayments_GetCustomerPaymentsByInvoiceID", invoiceID);
            List<ARCustomerPaymentsInfo> customerPayments = new List<ARCustomerPaymentsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARCustomerPaymentsInfo objCustomerPaymentsInfo = (ARCustomerPaymentsInfo)GetObjectFromDataRow(row);
                    customerPayments.Add(objCustomerPaymentsInfo);
                }
            }
            return customerPayments;
        }

        /// <summary>
        /// Get customer payments of a sale order
        /// </summary>
        /// <param name="saleOrderID">Sale order id</param>
        /// <returns>List of customer payments</returns>
        public List<ARCustomerPaymentsInfo> GetCustomerPaymentsBySaleOrderID(int saleOrderID)
        {
            DataSet ds = dal.GetDataSet("ARCustomerPayments_GetCustomerPaymentsBySaleOrderID", saleOrderID);
            List<ARCustomerPaymentsInfo> customerPayments = new List<ARCustomerPaymentsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARCustomerPaymentsInfo objCustomerPaymentsInfo = (ARCustomerPaymentsInfo)GetObjectFromDataRow(row);
                    customerPayments.Add(objCustomerPaymentsInfo);
                }
            }
            return customerPayments;
        }

        /// <summary>
        /// Get the details of a payment, including payment methods, currencies and corresponding amounts
        /// </summary>
        /// <param name="customerPaymentID">Customer payment id</param>
        /// <returns>List of payment details</returns>
        public List<ARCustomerPaymentDetailsInfo> GetPaymentDetails(int customerPaymentID)
        {
            DataSet ds = dal.GetDataSet("ARCustomerPayments_GetPaymentDetails", customerPaymentID);
            List<ARCustomerPaymentDetailsInfo> paymentDetails = new List<ARCustomerPaymentDetailsInfo>();
            if (ds.Tables.Count > 0)
            {
                ARCustomerPaymentDetailsController objCustomerPaymentDetailsController = new ARCustomerPaymentDetailsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARCustomerPaymentDetailsInfo objCustomerPaymentDetailsInfo = (ARCustomerPaymentDetailsInfo)objCustomerPaymentDetailsController.GetObjectFromDataRow(row);
                    paymentDetails.Add(objCustomerPaymentDetailsInfo);
                }
            }
            return paymentDetails;
        }

        /// <summary>
        /// Get all deposits of an invoice
        /// </summary>
        /// <param name="invoiceID">Invoice id</param>
        /// <returns>List of deposits</returns>
        public List<ARCustomerPaymentsInfo> GetDepositsByInvoiceID(int invoiceID)
        {
            DataSet ds = dal.GetDataSet("ARCustomerPayments_GetDepositsByInvoiceID", invoiceID);
            List<ARCustomerPaymentsInfo> deposits = new List<ARCustomerPaymentsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARCustomerPaymentsInfo objCustomerPaymentsInfo = (ARCustomerPaymentsInfo)GetObjectFromDataRow(row);
                    deposits.Add(objCustomerPaymentsInfo);

                }
            }
            return deposits;
        }

        /// <summary>
        /// Delete a payment by id
        /// </summary>
        /// <param name="customerPaymentID">Customer payment id</param>
        public void DeleteByID(int customerPaymentID)
        {
            dal.ExecuteStoredProcedure("ARCustomerPayments_DeleteByID", customerPaymentID);
        }

        /// <summary>
        /// Get deposits for transferring from a sale order to another
        /// </summary>
        /// <returns>List of deposits</returns>
        public List<ARCustomerPaymentsInfo> GetDepositsForTransferring()
        {
            DataSet ds = dal.GetDataSet("ARCustomerPayments_GetDepositsForTransferring");
            List<ARCustomerPaymentsInfo> deposits = new List<ARCustomerPaymentsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARCustomerPaymentsInfo objCustomerPaymentsInfo = (ARCustomerPaymentsInfo)GetObjectFromDataRow(row);
                    deposits.Add(objCustomerPaymentsInfo);
                }
            }
            return deposits;
        }

        /// <summary>
        /// Get customer payments for transferring
        /// </summary>
        /// <returns>List of customer payments</returns>
        public List<ARCustomerPaymentsInfo> GetCustomerPaymentsForTransferring()
        {
            DataSet ds = dal.GetDataSet("ARCustomerPayments_GetCustomerPaymentsForTransferring");
            List<ARCustomerPaymentsInfo> customerPayments = new List<ARCustomerPaymentsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARCustomerPaymentsInfo objCustomerPaymentsInfo = (ARCustomerPaymentsInfo)GetObjectFromDataRow(row);
                    customerPayments.Add(objCustomerPaymentsInfo);
                }
            }
            return customerPayments;
        }

        /// <summary>
        /// Delete all payment accounting entries of a customer payment
        /// </summary>
        /// <param name="customerPaymentNo">Payment no</param>
        public void DeletePaymentEntriesByNo(string customerPaymentNo)
        {
            dal.ExecuteStoredProcedure("ARCustomerPayments_DeletePaymentEntriesByNo", customerPaymentNo);
        }

        /// <summary>
        /// Get customer payments for broadcasting to a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <returns>List of broadcasted customer payments</returns>
        public List<ARCustomerPaymentsInfo> GetCustomerPaymentsForBroadcasting(int branchID)
        {
            DataSet ds = dal.GetDataSet("ARCustomerPayments_GetCustomerPaymentsForBroadcasting", branchID);
            return (List<ARCustomerPaymentsInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ARCustomerPaymentsInfo> customerPayments = new List<ARCustomerPaymentsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARCustomerPaymentsInfo objCustomerPaymentsInfo = (ARCustomerPaymentsInfo)GetObjectFromDataRow(row);
                    customerPayments.Add(objCustomerPaymentsInfo);
                }
            }
            ds.Dispose();
            return customerPayments;
        }

        public DataSet GetCustomerPaymentDatasetByListOfBranchID(
                                string customerPaymentNo,
                                string openDocumentNo,
                                int? objectID,
                                string objectType,
                                int? employeeID,
                                string customerPaymentType,
                                DateTime? fromDate,
                                DateTime? toDate,
                                List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetPaymentList(customerPaymentNo,
                                            openDocumentNo,
                                            objectID,
                                            objectType,
                                            employeeID,
                                            customerPaymentType,
                                            ojbBranchsInfo.BRBranchID,
                                            fromDate,
                                            toDate);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public DataSet GetCustomerPaymentDatasetByListOfBranchID(
                                string customerPaymentNo,
                                string openDocumentNo,
                                int? objectID,
                                string objectType,
                                int? employeeID,
                                List<String> customerPaymentTypeList,
                                DateTime? fromDate,
                                DateTime? toDate,
                                List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetPaymentListByCustomerPaymentTypeList(customerPaymentNo,
                                            openDocumentNo,
                                            objectID,
                                            objectType,
                                            employeeID,
                                            customerPaymentTypeList,
                                            ojbBranchsInfo.BRBranchID,
                                            fromDate,
                                            toDate);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public decimal GetTransferedDepositAmountByASpecifiedDeposit(string customerPaymentNo)
        {
            decimal transferedAmount = 0;

            ARCustomerPaymentDetailsController customerPaymentDetailController = new ARCustomerPaymentDetailsController();
            List<ARCustomerPaymentDetailsInfo> customerPaymentDetails = customerPaymentDetailController.GetCustomerPaymentDetailByCustomerPaymentDetailInfo(customerPaymentNo);
            BOSDbUtil dbUtil = new BOSDbUtil();
            if (customerPaymentDetails != null)
            {
                foreach (ARCustomerPaymentDetailsInfo customerPaymentDetail in customerPaymentDetails)
                {
                    if (!string.IsNullOrEmpty(customerPaymentDetail.ARCustomerPaymentDetailInfo))
                    {
                        string[] nos = customerPaymentDetail.ARCustomerPaymentDetailInfo.Split(new char[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries);
                        if (nos != null && nos.Length != 0)
                        {
                            for (int index = 0; index < nos.Length; index++)
                            {
                                if (nos[index] == customerPaymentNo)
                                {
                                    object obj = dbUtil.GetPropertyValue(customerPaymentDetail, string.Format("ARCustomerPaymentDetailSubAmount{0}", index + 1));
                                    if (obj != null)
                                        transferedAmount += Convert.ToDecimal(obj.ToString());
                                }
                            }
                        }
                    }
                }
            }

            return transferedAmount;
        }

        public DataSet GetCustomerPaymentDataset(string customerPaymentNo,
                                                 string openDocumentNo,
                                                 int? objectID,
                                                 string objectType,
                                                 int? employeeID,
                                                 List<String> customerPaymentTypeList,
                                                 DateTime? fromDate,
                                                 DateTime? toDate,
                                                 int? branchID)
        {
            DataSet rtn = new DataSet();
            foreach (String customerPaymentType in customerPaymentTypeList)
            {
                DataSet ds = dal.GetDataSet("ARCustomerPayments_GetCustomerPaymentList", customerPaymentNo, openDocumentNo, objectID, objectType, employeeID, customerPaymentType, fromDate, toDate, branchID);
                rtn.Merge(ds);
            }
            return rtn;
        }

        public DataSet GetCustomerPaymentDatasetByBranchListID(string customerPaymentNo,
                                                               string openDocumentNo,
                                                               int? objectID,
                                                               string objectType,
                                                               int? employeeID,
                                                               List<String> customerPaymentTypeList,
                                                               DateTime? fromDate,
                                                               DateTime? toDate,
                                                               List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            List<int> collections = new List<int>();
            int rowIndex = 0;
            DataRow row;
            DataRowCollection rows;
            bool isValid = true;
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetCustomerPaymentDataset(customerPaymentNo, openDocumentNo, objectID, objectType, employeeID, customerPaymentTypeList, fromDate, toDate, ojbBranchsInfo.BRBranchID);
                if (ds != null && ds.Tables.Count != 0 && ds.Tables[0].Rows.Count != 0)
                {
                    rowIndex = 0;
                    rows = ds.Tables[0].Rows;
                    isValid = true;
                    while (isValid)
                    {
                        row = rows[rowIndex];
                        int id = row["ARCustomerPaymentID"] is DBNull ? -1 : Convert.ToInt32(row["ARCustomerPaymentID"].ToString());
                        if (id != -1 && !collections.Contains(id))
                        {
                            collections.Add(id);
                            rowIndex++;
                        }
                        else
                        {
                            rows.Remove(row);
                        }
                        if (rows.Count == 0 || rows.Count == rowIndex)
                            isValid = false;
                    }
                }
                rtn.Merge(ds);
            }
            if (rtn.Tables.Count != 0)
            {
                DataView dataView = rtn.Tables[0].DefaultView;
                dataView.Sort = "ARCustomerPaymentDate, ARCustomerPaymentNo ASC";
            }
            return rtn;
        }

        public List<ARCustomerPaymentsInfo> GetCustomerPaymentsWithTypeAdvancePayment()
        {
            DataSet ds = dal.GetDataSet("ARCustomerPayments_GetCustomerPaymentsWithTypeAdvancePayment");
            return (List<ARCustomerPaymentsInfo>)GetListFromDataSet(ds);
        }

        public DataSet GetCustomerPaymentDatasetFromBranchList(
                                string customerPaymentNo,
                                string openDocumentNo,
                                int? objectID,
                                string objectType,
                                int? employeeID,
                                string customerPaymentType,
                                DateTime? fromDate,
                                DateTime? toDate,
                                List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetCustomerPaymentDatasetFromBranchID(customerPaymentNo,
                                            openDocumentNo,
                                            objectID,
                                            objectType,
                                            employeeID,
                                            customerPaymentType,
                                            ojbBranchsInfo.BRBranchID,
                                            fromDate,
                                            toDate);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public DataSet GetCustomerPaymentDatasetFromBranchID(
                                string customerPaymentNo,
                                string openDocumentNo,
                                int? objectID,
                                string objectType,
                                int? employeeID,
                                string customerPaymentType,
                                int? branchID,
                                DateTime? fromDate,
                                DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ARCustomerPayments_GetCustomerPaymentDataset", customerPaymentNo, openDocumentNo, objectID, objectType, employeeID, customerPaymentType, branchID, fromDate, toDate);
            return ds;
        }

        public List<ARCustomerPaymentsInfo> GetCustomerPaymentsForRepositoryItemLookUpEdit(int acobjectID, string acobjectType)
        {
            DataSet ds = dal.GetDataSet("ARCustomerPayments_GetCustomerPaymentsForRepositoryItemLookUpEdit", acobjectID, acobjectType);
            return (List<ARCustomerPaymentsInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}