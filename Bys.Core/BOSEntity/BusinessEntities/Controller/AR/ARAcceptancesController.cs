using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;

namespace BOSERP
{
    #region ARAcceptances
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ARAcceptancesController
    //Created Date:10 Tháng Năm 2018
    //-----------------------------------------------------------

    public class ARAcceptancesController : BaseBusinessController
    {
        public ARAcceptancesController()
        {
            dal = new DALBaseProvider("ARAcceptances", typeof(ARAcceptancesInfo));
        }

        public DataSet GetAcceptancesListByListOfBranchIDs(string acceptancesNo,
                                                           string acceptancesName,
                                                           int? employeeID,
                                                           DateTime? acceptancesDateFrom,
                                                           DateTime? acceptancesDateTo,
                                                           int? branchID,
                                                           List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetAcceptancesListByBranchID(acceptancesNo, acceptancesName, employeeID, acceptancesDateFrom, acceptancesDateTo, ojbBranchsInfo.BRBranchID);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public DataSet GetAcceptancesListByBranchID(string acceptancesNo,
                                                   string acceptancesName,
                                                   int? employeeID,
                                                   DateTime? acceptancesDateFrom,
                                                   DateTime? acceptancesDateTo,
                                                   int? branchID)
        {
            return dal.GetDataSet("ARAcceptances_GetAcceptancesListByBranchID", acceptancesNo, acceptancesName, employeeID, acceptancesDateFrom, acceptancesDateTo, branchID);
        }

        public string GetProjectAgreementNo(string acceptancePONo)
        {
            DataSet ds = dal.GetDataSet("ARAcceptances_GetProjectAgreementNo", acceptancePONo);
            string projectAgreementNo = "";
            if (ds.Tables.Count > 0)
            {
                try
                {
                    if (ds.Tables[0].Rows[0] != null)
                        projectAgreementNo = ds.Tables[0].Rows[0][0].ToString();
                }
                catch (Exception e)
                {
                    projectAgreementNo = "";
                }

            }
            return projectAgreementNo == null ? "" : projectAgreementNo;
        }

        public List<ARAcceptancesInfo> GetAcceptancesForInvoiceByUserPermission(int userID, string moduleName, string dataViewPermissionType)
        {
            DataSet ds = dal.GetDataSet("ARAcceptances_GetAcceptancesForInvoiceByUserPermission", userID, moduleName, dataViewPermissionType);
            List<ARAcceptancesInfo> acceptances = new List<ARAcceptancesInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARAcceptancesInfo objAcceptancesInfo = (ARAcceptancesInfo)GetObjectFromDataRow(row);
                    acceptances.Add(objAcceptancesInfo);
                }
            }
            return acceptances;
        }

        public List<ARAcceptancesInfo> getAcceptanceForMultiPrint(int objectID, string objectType, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ARAcceptances_GetAcceptancesForMultiPrint", objectID, objectType, fromDate, toDate);
            List<ARAcceptancesInfo> list = new List<ARAcceptancesInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARAcceptancesInfo item = (ARAcceptancesInfo)GetObjectFromDataRow(row);
                    list.Add(item);
                }
            }
            //List<ARAcceptancesInfo> list = (List<ARAcceptancesInfo>)GetListFromDataSet(ds);
            return list;
        }

        public List<ARAcceptancesInfo> getAllAcceptanceForMultiPrint()
        {
            DataSet ds = dal.GetDataSet("ARAcceptances_GetAllAcceptancesForMultiPrint");
            List<ARAcceptancesInfo> list = new List<ARAcceptancesInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARAcceptancesInfo item = (ARAcceptancesInfo)GetObjectFromDataRow(row);
                    list.Add(item);
                }
            }
            //List<ARAcceptancesInfo> list = (List<ARAcceptancesInfo>)GetListFromDataSet(ds);
            return list;
        }

        public decimal GetTotalAcceptanceDiscountFix(string acceptanceID)
        {
            DataSet ds = dal.GetDataSet("ARAcceptances_GetTotalAcceptanceDiscountFix", acceptanceID);
            decimal discountFix = 0;
            if (ds.Tables.Count > 0)
                discountFix = Convert.ToDecimal(ds.Tables[0].Rows[0][0].ToString());
            return discountFix;
        }
    }
    #endregion
}