using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;

namespace BOSERP
{
    #region ARInvoices
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ARInvoicesController
    //Created Date:Sunday, June 15, 2008
    //-----------------------------------------------------------

    public class ARInvoicesController : BaseBusinessController
    {
        public ARInvoicesController()
        {
            dal = new DALBaseProvider("ARInvoices", typeof(ARInvoicesInfo));
        }
        public DataSet GetAllARInvoicesForLookupControl()
        {
            DataSet ds = dal.GetDataSet("ARInvoices_GetAllARInvoicesForLookupControl");
            return ds;
        }
        public DataSet GetInvoicesByCreatedDateAndStatus(DateTime dtDateFrom, DateTime dtDateTo)
        {
            return dal.GetDataSet("ARInvoices_SelectByCreatedDateAndStatus", dtDateFrom, dtDateTo);
        }

        public List<ARInvoicesInfo> GetInvoicesForTransferring()
        {
            List<ARInvoicesInfo> invoices = new List<ARInvoicesInfo>();
            DataSet ds = dal.GetDataSet("ARInvoices_GetInvoicesForTransferring");
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARInvoicesInfo objInvoicesInfo = (ARInvoicesInfo)GetObjectFromDataRow(row);
                    invoices.Add(objInvoicesInfo);
                }
            }
            return invoices;
        }

        public ARInvoicesInfo GetInvoiceByInvoicePOSNo(String strPOSNo)
        {
            BOSDbUtil dbUtil = new BOSDbUtil();
            String strQuery = String.Format("SELECT * FROM [dbo].[ARInvoices] WHERE [AAStatus] = 'Alive' AND [ARInvoicePOSNo] = '{0}'", strPOSNo);
            DataSet ds = dbUtil.ExecuteQuery(strQuery);
            if (ds.Tables.Count > 0)
                if (ds.Tables[0].Rows.Count > 0)
                    return (ARInvoicesInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }

        public ARInvoicesInfo GetLastestVATInvoice()
        {
            BOSDbUtil dbUtil = new BOSDbUtil();
            String strQuery = String.Format("SELECT TOP 1 * from ARInvoices WHERE ARInvoiceVATInvoiceNo <> '' ORDER BY ARInvoiceID DESC");
            DataSet ds = dbUtil.ExecuteQuery(strQuery);
            if (ds.Tables.Count > 0)
                if (ds.Tables[0].Rows.Count > 0)
                    return (ARInvoicesInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }

        public ARInvoicesInfo GetInvoiceByReference(String reference)
        {
            String query = String.Format("SELECT * FROM ARInvoices WHERE AAStatus = 'Alive' AND ARInvoiceReference = '{0}'", reference);
            DataSet ds = GetDataSet(query);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (ARInvoicesInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }

        public DataSet GetInvoicesByDateRange(DateTime from, DateTime to)
        {
            String strQuery = String.Format("SELECT * FROM [dbo].[ARInvoices] WHERE CONVERT(VARCHAR(10),[ARInvoiceDate],112)>= CONVERT(VARCHAR(10),'{0}',112) AND CONVERT(VARCHAR(10),[ARInvoiceDate],112) <= CONVERT(VARCHAR(10),'{1}',112) AND [AAStatus]='{2}'", from.ToString("yyyyMMdd"), to.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus);
            return GetDataSet(strQuery);
        }

        /// <summary>
        /// Get invoice by month
        /// </summary>
        /// <param name="month">Month</param>
        /// <returns>Data of invoice</returns>
        public DataSet GetInvoicesByMonth(DateTime month)
        {
            DataSet ds = dal.GetDataSet("ARInvoice_GetInvoiceByMonth", month);
            return ds;
        }

        /// <summary>
        /// Get the list of owing invoice based on some criteria
        /// </summary>
        /// <param name="customerID">Customer id</param>
        /// <param name="invoiceNo">Invoice no</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="dateFrom">Date the result is filtered from</param>
        /// <param name="dateTo">Date the result si filtered to</param>
        /// <returns>List of owing invoices</returns>
        public List<ARInvoicesInfo> GetOwingInvoices(
                                                int? customerID,
                                                string invoiceNo,
                                                int? currencyID,
                                                int? locationID,
                                                int? branchID,
                                                DateTime? dateFrom,
                                                DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("ARInvoices_GetOwingInvoices", customerID, invoiceNo, currencyID, locationID, branchID, dateFrom, dateTo);
            List<ARInvoicesInfo> invoices = new List<ARInvoicesInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARInvoicesInfo objInvoicesInfo = (ARInvoicesInfo)GetObjectFromDataRow(row);

                    //objInvoicesInfo.ARInvoiceBalanceDue = objInvoicesInfo.ARInvoiceTotalAmount - objInvoicesInfo.ARInvoiceDepositBalance 
                    //        - objInvoicesInfo.ARInvoiceReturnAmount - objInvoicesInfo.ARInvoicePaymentAmount 
                    //        - objInvoicesInfo.CustomerRepaidByOwingExchangeMethod
                    //        + (objInvoicesInfo.ARCustomerRepaid + objInvoicesInfo.CustomerPaymentByOwingExchangeMethod);

                    objInvoicesInfo.ARInvoicePaymentAmount += objInvoicesInfo.CustomerRepaidByOwingExchangeMethod;
                    objInvoicesInfo.ARCustomerRepaid += objInvoicesInfo.CustomerPaymentByOwingExchangeMethod;

                    invoices.Add(objInvoicesInfo);
                }
            }
            return invoices;
        }

        /// <summary>
        /// Get the list of owing invoice based on some criteria
        /// </summary>
        /// <param name="customerID">Customer id</param>
        /// <param name="invoiceNo">Invoice no</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="dateFrom">Date the result is filtered from</param>
        /// <param name="dateTo">Date the result si filtered to</param>
        /// <returns>List of owing invoices</returns>
        public List<ARInvoicesInfo> GetOwingInvoicesByUserPermission(
                                                int? customerID,
                                                string invoiceNo,
                                                int? currencyID,
                                                int? locationID,
                                                int? branchID,
                                                DateTime? dateFrom,
                                                DateTime? dateTo,
                                                int userID,
                                                string moduleName,
                                                string dataViewPermissionType)
        {
            DataSet ds = dal.GetDataSet("ARInvoices_GetOwingInvoicesByUserPermission", customerID, invoiceNo, currencyID,
                                                                                    locationID, branchID, dateFrom, dateTo,
                                                                                    userID, moduleName, dataViewPermissionType);
            List<ARInvoicesInfo> invoices = new List<ARInvoicesInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARInvoicesInfo objInvoicesInfo = (ARInvoicesInfo)GetObjectFromDataRow(row);
                    objInvoicesInfo.ARInvoicePaymentAmount += objInvoicesInfo.CustomerRepaidByOwingExchangeMethod;
                    objInvoicesInfo.ARCustomerRepaid += objInvoicesInfo.CustomerPaymentByOwingExchangeMethod;

                    invoices.Add(objInvoicesInfo);
                }
            }
            return invoices;
        }

        /// <summary>
        /// Get the list of owing invoice based on some criteria
        /// </summary>
        /// <param name="customerID">Customer id</param>
        /// <param name="invoiceNo">Invoice no</param>        
        /// <param name="dateFrom">Date the result is filtered from</param>
        /// <param name="dateTo">Date the result si filtered to</param>
        /// <returns>List of owing invoices</returns>
        public List<ARInvoicesInfo> GetOwingInvoices(int? customerID, string invoiceNo, DateTime? dateFrom, DateTime? dateTo)
        {
            return GetOwingInvoices(customerID, invoiceNo, null, null, null, dateFrom, dateTo);
        }

        /// <summary>
        /// Get all owing invoices of a customer
        /// </summary>
        /// <param name="customerID">Customer id</param>
        /// <returns>List of owing invoices</returns>
        public List<ARInvoicesInfo> GetOwingInvoices(int customerID)
        {
            return GetOwingInvoices(customerID, null, null, null, null, null, null);
        }

        /// <summary>
        /// Get all owing invoices
        /// </summary>
        /// <returns>List of owing invoices</returns>
        public List<ARInvoicesInfo> GetAllOwingInvoices()
        {
            return GetOwingInvoices(null, null, null, null, null, null, null);
        }

        /// <summary>
        /// Get total owing of a customer
        /// </summary>
        /// <returns></returns>
        public ARInvoicesInfo GetTotalOwingByCustomerID(int customerID)
        {
            DataSet ds = dal.GetDataSet("ARInvoices_GetTotalOwingByCustomerID", customerID);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ARInvoicesInfo objInvoicesInfo = (ARInvoicesInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objInvoicesInfo;
            }
            return null;
        }

        /// <summary>
        /// Get total owing of all customers
        /// </summary>
        /// <returns></returns>
        public DataSet GetTotalOwingOfAllCustomers()
        {
            DataSet ds = dal.GetDataSet("ARInvoices_GetTotalOwingByCustomerID", new object[] { null });
            return ds;
        }

        /// <summary>
        /// Get the list of invoices based on some criteria
        /// </summary>
        /// <param name="branchID">Branch identifier</param>
        /// <param name="customerID">Customer identifier</param>
        /// <param name="invoiceNo">Invoice no</param>
        /// <param name="status">Invoice status</param>
        /// <param name="dateFrom">Date the result is searched from</param>
        /// <param name="dateTo">Date the result is searched to</param>
        /// <returns>List of invoices</returns>
        public List<ARInvoicesInfo> GetInvoiceList(int? branchID,
                                        int? objectID,
                                        string objectType,
                                        string invoiceNo,
                                        String status,
                                        DateTime? dateFrom,
                                        DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("ARInvoices_GetInvoiceList", branchID, objectID, objectType, invoiceNo, status, dateFrom, dateTo);
            List<ARInvoicesInfo> invoices = new List<ARInvoicesInfo>();
            if (ds != null && ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARInvoicesInfo objInvoicesInfo = (ARInvoicesInfo)GetObjectFromDataRow(row);
                    invoices.Add(objInvoicesInfo);
                }
            }
            return invoices;
        }

        /// <summary>
        /// Get the list of invoices based on some criteria
        /// </summary>
        /// <param name="branchID">Branch identifier</param>
        /// <param name="customerID">Customer identifier</param>
        /// <param name="status">Invoice status</param>
        /// <param name="dateFrom">Date the result is searched from</param>
        /// <param name="dateTo">Date the result is searched to</param>
        /// <returns>List of invoices</returns>
        public List<ARInvoicesInfo> GetInvoiceList(int? branchID,
                                        int? objectID,
                                        string objectType,
                                        String status,
                                        DateTime? dateFrom,
                                        DateTime? dateTo)
        {
            return GetInvoiceList(branchID, objectID, objectType, null, status, dateFrom, dateTo);
        }

        public List<ARInvoicesInfo> GetInvoiceList(int? objectID, string objectType, string invoiceNo, DateTime? from, DateTime? to)
        {
            return GetInvoiceList(null, objectID, objectType, invoiceNo, null, from, to);
        }

        /// <summary>
        /// Get invoice list by customer payment id.
        /// </summary>
        /// <param name="customerPaymentID">The customer payment id.</param>
        /// <returns>List of invoices</returns>
        public List<ARInvoicesInfo> GetInvoicesByCustomerPaymentID(int customerPaymentID)
        {
            DataSet ds = dal.GetDataSet("ARInvoices_GetInvoicesByCustomerPaymentID", customerPaymentID);
            List<ARInvoicesInfo> invoices = new List<ARInvoicesInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARInvoicesInfo objInvoicesInfo = (ARInvoicesInfo)GetObjectFromDataRow(row);
                    invoices.Add(objInvoicesInfo);
                }
            }
            return invoices;
        }

        public List<ARInvoicesInfo> GetAllInvoice()
        {
            DataSet ds = dal.GetDataSet("ARInvoices_GetAllInvoice");
            List<ARInvoicesInfo> invoiceList = new List<ARInvoicesInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                ARInvoicesController objInvoicesController = new ARInvoicesController();
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ARInvoicesInfo objInvoicesInfo = new ARInvoicesInfo();
                    objInvoicesInfo = (ARInvoicesInfo)objInvoicesController.GetObjectFromDataRow(dr);
                    invoiceList.Add(objInvoicesInfo);
                }
            }
            return invoiceList;
        }

        /// <summary>
        /// Get the list of invoices that is able to refund
        /// </summary>        
        /// <returns>Refundable invoice list</returns>
        /// <param name="invoiceNo">Invoice no</param>
        /// <param name="customerID">Customer id</param>        
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        public List<ARInvoicesInfo> GetRefundableInvoices(string invoiceNo, int? customerID, DateTime? fromDate, DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ARInvoices_GetRefundableInvoices", invoiceNo, customerID, fromDate, toDate);
            List<ARInvoicesInfo> invoiceList = new List<ARInvoicesInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARInvoicesInfo objInvoicesInfo = (ARInvoicesInfo)GetObjectFromDataRow(row);
                    invoiceList.Add(objInvoicesInfo);
                }
            }
            return invoiceList;
        }

        /// <summary>
        /// Get the list of invoices that is able to refund by user's permission
        /// </summary>        
        /// <returns>Refundable invoice list</returns>
        /// <param name="invoiceNo">Invoice no</param>
        /// <param name="customerID">Customer id</param>        
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        public List<ARInvoicesInfo> GetRefundableInvoicesByUserPermission(string invoiceNo, int? customerID, DateTime? fromDate, DateTime? toDate, int userID, string moduleName, string dataViewPermissionType)
        {
            DataSet ds = dal.GetDataSet("ARInvoices_GetRefundableInvoicesByUserPermission", invoiceNo, customerID, fromDate, toDate, userID, moduleName, dataViewPermissionType);
            List<ARInvoicesInfo> invoiceList = new List<ARInvoicesInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARInvoicesInfo objInvoicesInfo = (ARInvoicesInfo)GetObjectFromDataRow(row);
                    invoiceList.Add(objInvoicesInfo);
                }
            }
            return invoiceList;
        }

        /// <summary>
        /// Get an invoice and the payment amount of a customer payment for its due
        /// </summary>
        /// <param name="invoiceID">Invoice id</param>
        /// <param name="customerPaymentID">Customer payment id</param>
        /// <returns>Invoice object includes payment amount</returns>
        public ARInvoicesInfo GetInvoiceByInvoiceIDAndCustomerPaymentID(int invoiceID, int customerPaymentID)
        {
            return (ARInvoicesInfo)dal.GetDataObject("ARInvoices_GetInvoiceByInvoiceIDAndCustomerPaymentID", invoiceID, customerPaymentID);
        }

        /// <summary>
        /// Get an invoice by its id
        /// </summary>
        /// <param name="invoiceID">Invoice id</param>
        /// <returns>Invoice object</returns>
        public ARInvoicesInfo GetInvoiceByID(int invoiceID)
        {
            return (ARInvoicesInfo)dal.GetDataObject("ARInvoices_GetInvoiceByID", invoiceID);
        }

        /// <summary>
        /// Delete an invoice and all its relevant data
        /// </summary>
        /// <param name="invoiceID">Invoice id</param>
        public void DeleteByInvoiceID(int invoiceID)
        {
            dal.ExecuteStoredProcedure("ARInvoices_DeleteByInvoiceID", invoiceID);
        }

        /// <summary>
        /// Get invoices for broadcasting to a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <returns>List of broadcasted invoices</returns>
        public List<ARInvoicesInfo> GetInvoicesForBroadcasting(int branchID)
        {
            DataSet ds = dal.GetDataSet("ARInvoices_GetInvoicesForBroadcasting", branchID);
            return (List<ARInvoicesInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ARInvoicesInfo> invoiceList = new List<ARInvoicesInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARInvoicesInfo objInvoicesInfo = (ARInvoicesInfo)GetObjectFromDataRow(row);
                    invoiceList.Add(objInvoicesInfo);
                }
            }
            ds.Dispose();
            return invoiceList;
        }

        /// <summary>
        /// Get the list of invoices based on some criteria
        /// </summary>
        /// <param name="invoiceNo">Invoice no</param>
        /// <param name="invoiceReference">Invoice reference</param>
        /// <param name="customerID">Customer id</param>
        /// <param name="employeeID">Employee id</param>
        /// <param name="invoiceType">Invoice type</param>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns></returns>
        public DataSet GetInvoiceSet(
                                string invoiceNo,
                                string invoiceReference,
                                int customerID,
                                int employeeID,
                                string invoiceType,
                                DateTime fromDate,
                                DateTime toDate)
        {
            return dal.GetDataSet("ARInvoices_GetInvoiceSet",
                                invoiceNo,
                                invoiceReference,
                                customerID,
                                employeeID,
                                invoiceType,
                                fromDate,
                                toDate);
        }

        ///// <summary>
        ///// Get invoice balance by a specified invoice number
        ///// </summary>
        ///// <param name="invoiceNo">invoice number</param>
        ///// <returns>Invoice balance</returns>
        //public double GetInvoiceBalance(string invoiceNo)
        //{
        //    return Convert.ToDouble(dal.GetSingleValue("ARInvoices_GetInvoiceBalance", invoiceNo));
        //}

        public DataSet GetGiftReceiptListByListOfBranchID(
                                string invoiceNo,
                                int? customerID,
                                int? employeeID,
                                string invoiceType,
                                DateTime? fromDate,
                                DateTime? toDate,
                                List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetGiftReceiptList(invoiceNo,
                                                    customerID,
                                                    employeeID,
                                                    invoiceType,
                                                    fromDate,
                                                    toDate,
                                                    ojbBranchsInfo.BRBranchID);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public DataSet GetGiftReceiptList(
                               string invoiceNo,
                               int? customerID,
                               int? employeeID,
                               string invoiceType,
                               DateTime? fromDate,
                               DateTime? toDate,
                               int? branchID)
        {
            return dal.GetDataSet("ARInvoices_GetGiftReceiptList",
                                invoiceNo,
                                customerID,
                                employeeID,
                                invoiceType,
                                fromDate,
                                toDate,
                                branchID);
        }

        public DataSet GetInvoiceListDatasetByListOfBranchID(
                                string invoiceNo,
                                string invoiceReference,
                                int? objectID,
                                string objectType,
                                int? employeeID,
                                string invoiceType,
                                DateTime? fromDate,
                                DateTime? toDate,
                                string phone,
                                List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetInvoiceListDataset(invoiceNo,
                                                    invoiceReference,
                                                    objectID,
                                                    objectType,
                                                    employeeID,
                                                    invoiceType,
                                                    fromDate,
                                                    toDate,
                                                    phone,
                                                    ojbBranchsInfo.BRBranchID);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public DataSet GetInvoiceListDataset(
                                string invoiceNo,
                                string invoiceReference,
                                int? objectID,
                                string objectType,
                                int? employeeID,
                                string invoiceType,
                                DateTime? fromDate,
                                DateTime? toDate,
                                string phone,
                                int? branchID)
        {
            return dal.GetDataSet("ARInvoices_GetInvoiceListDataset",
                                invoiceNo,
                                invoiceReference,
                                objectID,
                                objectType,
                                employeeID,
                                invoiceType,
                                fromDate,
                                toDate,
                                phone,
                                branchID);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="purchaseOrderNo"></param>
        /// <param name="supplierID"></param>
        /// <param name="employeeID"></param>
        /// <param name="branchID"></param>
        /// <param name="locationID"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="branchList"></param>
        /// <returns></returns>
        public DataSet GetInvoiceDatasetByListOfBranchID(string invoiceNo,
                                        int? objectID,
                                        string objectType,
                                        int? branchID,
                                        int? employeeID,
                                        string invoiceType,
                                        DateTime? dateFrom,
                                        DateTime? dateTo, List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetInvoiceDataset(invoiceNo, objectID, objectType, ojbBranchsInfo.BRBranchID, employeeID, invoiceType, dateFrom, dateTo);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public DataSet GetInvoiceDataset(string invoiceNo,
                                        int? objectID,
                                        string objectType,
                                        int? branchID,
                                        int? employeeID,
                                        string invoiceType,
                                        DateTime? dateFrom,
                                        DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("ARInvoices_GetInvoiceDataset", invoiceNo, objectID, objectType, branchID, employeeID, invoiceType, dateFrom, dateTo);
            return ds;
        }
        public List<ARInvoicesInfo> GetInvoiceByObjectID(int ObjectID)
        {
            DataSet ds = dal.GetDataSet("ARInvoices_GetInvoiceByObjectID", ObjectID);
            List<ARInvoicesInfo> invoices = new List<ARInvoicesInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARInvoicesInfo objInvoicesInfo = (ARInvoicesInfo)GetObjectFromDataRow(row);
                    invoices.Add(objInvoicesInfo);
                }
            }
            return invoices;
        }

        public List<ARInvoicesInfo> GetInvoiceListByDate(DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ARInvoices_GetInvoiceListByDate", fromDate, toDate);
            List<ARInvoicesInfo> invoices = new List<ARInvoicesInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARInvoicesInfo objInvoicesInfo = (ARInvoicesInfo)GetObjectFromDataRow(row);
                    invoices.Add(objInvoicesInfo);
                }
            }
            return invoices;
        }

        public ARInvoicesInfo GetInvoiceDateByInvoiceVATNo(string invoiceVATNo)
        {
            return (ARInvoicesInfo)dal.GetDataObject("ARInvoices_GetInvoiceDateByInvoiceVATNo", invoiceVATNo);
        }
        public ARInvoicesInfo GetInvoiceDateByInvoiceVATNoAndFromdateTodate(string invoiceVATNo, DateTime fromdate, DateTime todate)
        {
            return (ARInvoicesInfo)dal.GetDataObject("ARInvoices_GetInvoiceDateByInvoiceVATNoAndFromdateTodate", invoiceVATNo, fromdate, todate);
        }
        public List<ARInvoicesInfo> GetAllInvoiceNotInFeePaymentInvoice()
        {
            DataSet ds = dal.GetDataSet("ARInvoices_GetAllInvoiceNotInFeePaymentInvoice");
            List<ARInvoicesInfo> invoiceList = new List<ARInvoicesInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARInvoicesInfo objInvoicesInfo = (ARInvoicesInfo)GetObjectFromDataRow(row);
                    invoiceList.Add(objInvoicesInfo);
                }
            }
            return invoiceList;
        }

        public List<ARInvoicesInfo> GetInvoiceForBillOfLading()
        {
            DataSet ds = dal.GetDataSet("ARInvoices_GetInvoiceForBillOfLading");
            List<ARInvoicesInfo> invoiceList = new List<ARInvoicesInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARInvoicesInfo objInvoicesInfo = (ARInvoicesInfo)GetObjectFromDataRow(row);
                    invoiceList.Add(objInvoicesInfo);
                }
            }
            return invoiceList;
        }

        public List<ARInvoicesInfo> GetInvoiceInForFeePayment(int userID, string moduleName, string dataViewPermissionType)
        {
            DataSet ds = dal.GetDataSet("ARInvoices_GetInvoiceInForFeePayment", userID, moduleName, dataViewPermissionType);
            return (List<ARInvoicesInfo>)GetListFromDataSet(ds);
        }

        public List<ARInvoicesInfo> GetAllInvoiceForPaymentProposal()
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetAllForPaymentProposal");
            return (List<ARInvoicesInfo>)GetListFromDataSet(ds);
        }

        public ARInvoicesInfo GetInformationTransactionByInvoiceIDAndNo(int invoiceID, string invoiceNo)
        {
            return (ARInvoicesInfo)dal.GetDataObject("ARInvoices_GetInformationTransactionByInvoiceIDAndNo", invoiceID, invoiceNo);
        }

        #region ForElectronicInvoice
        public List<ARInvoicesInfo> GetInvoiceForNewReplace()
        {
            DataSet ds = dal.GetDataSet("ARInvoices_GetInvoiceForNewReplace");
            return (List<ARInvoicesInfo>)GetListFromDataSet(ds);
        }
        #endregion

        public ARInvoicesInfo GetReferenceTypeByInvoiceID(int invoiceID)
        {
            return (ARInvoicesInfo)dal.GetDataObject("ARInvoices_GetReferenceTypeByInvoiceID", invoiceID);
        }
        public List<ARInvoicesInfo> GetInvoicesByShipment(int ShipmentID)
        {
            DataSet ds = dal.GetDataSet("ARInvoices_GetInvoicesByShipment", ShipmentID);
            List<ARInvoicesInfo> ContainerLoaderList = new List<ARInvoicesInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARInvoicesInfo objContainerLoadersInfo = (ARInvoicesInfo)GetObjectFromDataRow(row);
                    ContainerLoaderList.Add(objContainerLoadersInfo);
                }
            }
            ds.Dispose();
            return ContainerLoaderList;
        }

        public List<ARInvoicesInfo> GetInvoicesForEInvoice()
        {
            DataSet ds = dal.GetDataSet("ARInvoices_GetInvoicesForEInvoice");
            return (List<ARInvoicesInfo>)GetListFromDataSet(ds);
        }
        public List<ARInvoicesInfo> GetInvoiceListBySaleOrder(int saleOrderID)
        {
            DataSet ds = dal.GetDataSet("ARInvoices_GetInvoiceListBySaleOrder", saleOrderID);
            return (List<ARInvoicesInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}
