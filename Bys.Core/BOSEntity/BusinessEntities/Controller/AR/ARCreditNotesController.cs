using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ARCreditNotes
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ARCreditNotesController
    //Created Date:Wednesday, November 12, 2008
    //-----------------------------------------------------------

    public class ARCreditNotesController : BaseBusinessController
    {
        public ARCreditNotesController()
        {
            dal = new DALBaseProvider("ARCreditNotes", typeof(ARCreditNotesInfo));
        }

        /// <summary>
        /// Get a credit note by its no and type
        /// </summary>
        /// <param name="no">Credit note no</param>
        /// <param name="type">Credit note type</param>
        /// <returns>Credit note object</returns>
        public ARCreditNotesInfo GetCreditNoteByNoAndType(string no, string type)
        {
            return (ARCreditNotesInfo)dal.GetDataObject("ARCreditNotes_GetCreditNoteByNoAndType", no, type);
        }

        /// <summary>
        /// Get credit note list based on some criteria
        /// </summary>
        /// <param name="creditNoteNo">Credit note no</param>
        /// <param name="customerID">Customer id</param>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns></returns>
        public List<ARCreditNotesInfo> GetCreditNoteList(string creditNoteNo,
                                                        string creditNoteType,
                                                        int? objectID,
                                                        string objectType,
                                                        int? employeeID,
                                                        DateTime? fromDate,
                                                        DateTime? toDate,
                                                        int? branchID)
        {
            DataSet ds = dal.GetDataSet("ARCreditNotes_GetCreditNoteList", creditNoteNo, objectID, objectType, employeeID, creditNoteType, fromDate, toDate, branchID);
            return (List<ARCreditNotesInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get credit notes for transferring
        /// </summary>
        /// <returns>List of transferred credit notes</returns>
        public List<ARCreditNotesInfo> GetCreditNotesForTransferring()
        {
            DataSet ds = dal.GetDataSet("ARCreditNotes_GetCreditNotesForTransferring");
            return (List<ARCreditNotesInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get credit notes for broadcasting to a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        public List<ARCreditNotesInfo> GetCreditNotesForBroadcasting(int branchID)
        {
            DataSet ds = dal.GetDataSet("ARCreditNotes_GetCreditNotesForBroadcasting", branchID);
            return (List<ARCreditNotesInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ARCreditNotesInfo> creditNotes = new List<ARCreditNotesInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARCreditNotesInfo objCreditNotesInfo = (ARCreditNotesInfo)GetObjectFromDataRow(row);
                    creditNotes.Add(objCreditNotesInfo);
                }
            }
            ds.Dispose();
            return creditNotes;
        }

        public DataSet GetCreditNoteListByListOfBranchID(
                                string creditNoteNo,
                                int? objectID,
                                string objectType,
                                int? employeeID,
                                string creditNoteType,
                                DateTime? fromDate,
                                DateTime? toDate,
                                List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetCreditNoteList(creditNoteNo,
                                                    objectID,
                                                    objectType,
                                                    employeeID,
                                                    creditNoteType,
                                                    fromDate,
                                                    toDate,
                                                    ojbBranchsInfo.BRBranchID);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public DataSet GetCreditNoteList(
                               string creditNoteNo,
                               int? objectID,
                               string objectType,
                               int? employeeID,
                               string creditNoteType,
                               DateTime? fromDate,
                               DateTime? toDate,
                               int? branchID)
        {
            return dal.GetDataSet("ARCreditNotes_GetCreditNoteList",
                                creditNoteNo,
                                objectID,
                                objectType,
                                employeeID,
                                creditNoteType,
                                fromDate,
                                toDate,
                                branchID);
        }

        public List<ARCreditNotesInfo> GetCreditNoteAvailableForLookupEditByDate(DateTime invalidDate, string creditNoteType)
        {
            DataSet ds = dal.GetDataSet("ARCreditNotes_GetCreditNoteAvailableForLookupEditByDate", invalidDate, creditNoteType);
            return (List<ARCreditNotesInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}