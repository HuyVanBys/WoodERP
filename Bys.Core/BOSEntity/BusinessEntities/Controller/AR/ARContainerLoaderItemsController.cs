using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ARContainerLoaderItems
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ARContainerLoaderItemsController
    //Created Date:Friday, September 23, 2016
    //-----------------------------------------------------------

    public class ARContainerLoaderItemsController : BaseBusinessController
    {
        public ARContainerLoaderItemsController()
        {
            dal = new DALBaseProvider("ARContainerLoaderItems", typeof(ARContainerLoaderItemsInfo));
        }

        public List<ARContainerLoaderItemsInfo> GetContainerLoaderItemForShipmentproposal()
        {
            DataSet ds = dal.GetDataSet("ARContainerLoaderItems_GetContainerLoaderItemForShipmentproposal");
            List<ARContainerLoaderItemsInfo> ContainerLoaderItemList = new List<ARContainerLoaderItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARContainerLoaderItemsInfo objContainerLoaderItemsInfo = (ARContainerLoaderItemsInfo)GetObjectFromDataRow(row);
                    ContainerLoaderItemList.Add(objContainerLoaderItemsInfo);
                }
            }
            ds.Dispose();
            return ContainerLoaderItemList;
        }

        public DataTable PiVotXProductYContainerLoaderNo()
        {
            DataSet ds = dal.GetDataSet("ARContainerLoaderItems_PiVotXProductYContainerLoaderNo");
            if (ds != null && ds.Tables != null)
            {
                return ds.Tables[0];
            }
            else
                return null;
        }
        public DataTable PiVotXProductYSaleOrderNo(DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ARContainerLoaderItems_PiVotXProductYSaleOrderNo", fromDate, toDate);
            if (ds != null && ds.Tables != null && ds.Tables.Count > 0)
            {
                return ds.Tables[0];
            }
            else
                return null;
        }
        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ARContainerLoaderItemsInfo> ContainerLoaderItemList = new List<ARContainerLoaderItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARContainerLoaderItemsInfo objContainerLoaderItemsInfo = (ARContainerLoaderItemsInfo)GetObjectFromDataRow(row);
                    ContainerLoaderItemList.Add(objContainerLoaderItemsInfo);
                }
            }
            ds.Dispose();
            return ContainerLoaderItemList;
        }

        public List<ARContainerLoaderItemsInfo> GetContainerLoaderItemsByContainerLoaderID(int containerLoaderID)
        {
            DataSet ds = dal.GetDataSet("ARContainerLoaderItems_GetContainerLoaderItemsByContainerLoaderID", containerLoaderID);
            return (List<ARContainerLoaderItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ARContainerLoaderItemsInfo> GetContainerLoaderItemsByListPlanning(string strListID)
        {
            DataSet ds = dal.GetDataSet("ARContainerLoaderItems_GetContainerLoaderItemsByListPlanning", strListID);
            return (List<ARContainerLoaderItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ARContainerLoaderItemsInfo> GetItemForInvoiceIn(int? customerID)
        {
            DataSet ds = dal.GetDataSet("ARContainerLoaderItems_GetItemForInvoiceIn", customerID);
            return (List<ARContainerLoaderItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ARContainerLoaderItemsInfo> GetItemForCheckingInvoiceValidQty(string strListID, int? InvoiceID)
        {
            DataSet ds = dal.GetDataSet("ARContainerLoaderItems_GetItemForCheckingInvoiceValidQty", strListID, InvoiceID);
            return (List<ARContainerLoaderItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ARContainerLoaderItemsInfo> GetListByContainerLoaderID(int containerLoaderID)
        {
            DataSet ds = dal.GetDataSet("ARContainerLoaderItems_GetListByContainerLoaderID", containerLoaderID);
            List<ARContainerLoaderItemsInfo> ContainerLoaderItemList = new List<ARContainerLoaderItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARContainerLoaderItemsInfo objContainerLoaderItemsInfo = (ARContainerLoaderItemsInfo)GetObjectFromDataRow(row);
                    ContainerLoaderItemList.Add(objContainerLoaderItemsInfo);
                }
            }
            ds.Dispose();
            return ContainerLoaderItemList;
        }

        public List<ARContainerLoaderItemsInfo> GetAllItemForInvoice()
        {
            DataSet ds = dal.GetDataSet("ARContainerLoaderItems_GetAllItemForInvoice");
            return (List<ARContainerLoaderItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ARContainerLoaderItemsInfo> GetAllItemForDeliveryPlan()
        {
            DataSet ds = dal.GetDataSet("ARContainerLoaderItems_GetAllItemForDeliveryPlan");
            return (List<ARContainerLoaderItemsInfo>)GetListFromDataSet(ds);
        }
        public void UpdateSaleOrderLoadedQty(int containerLoaderID)
        {
            dal.ExecuteStoredProcedure("ARContainerLoaderItems_UpdateSaleOrderLoadedQty", containerLoaderID);
        }
    }

    #endregion
}