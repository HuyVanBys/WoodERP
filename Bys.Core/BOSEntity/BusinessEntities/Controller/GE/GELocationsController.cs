using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region GELocations
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:GELocationsController
    //Created Date:Monday, September 05, 2011
    //-----------------------------------------------------------

    public class GELocationsController : BaseBusinessController
    {
        public GELocationsController()
        {
            dal = new DALBaseProvider("GELocations", typeof(GELocationsInfo));
        }

        /// <summary>
        /// Get all parent objects
        /// </summary>
        /// <returns>List of parent objects</returns>
        public DataSet GetAllParentOjects()
        {
            return dal.GetDataSet("GELocations_GetLocationList");
        }

        /// <summary>
        /// Get full location name of a location
        /// </summary>
        /// <param name="locationID">Location id</param>
        /// <returns>Full location name</returns>
        public string GetFullLocationNameByID(int locationID)
        {
            DataSet ds = dal.GetDataSet("GELocations_GetFullLocationNameByID", locationID);
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                {
                    return Convert.ToString(ds.Tables[0].Rows[0][0]);
                }
            }
            return string.Empty;
        }

        /// <summary>
        /// Gets all location list
        /// </summary>
        /// <returns>The list of location</returns>
        public List<GELocationsInfo> GetAllLocationList()
        {
            List<GELocationsInfo> locationList = new List<GELocationsInfo>();
            DataSet ds = GetAllObjects();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    GELocationsInfo objLocationsInfo = (GELocationsInfo)GetObjectFromDataRow(row);
                    locationList.Add(objLocationsInfo);
                }
            }
            return locationList;
        }


        public List<GELocationsInfo> GetFullListLocationNameByID(int locationID)
        {
            List<GELocationsInfo> locationList = new List<GELocationsInfo>();
            DataSet ds = dal.GetDataSet("GELocations_GetFullListLocationNameByID", locationID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    GELocationsInfo objLocationsInfo = (GELocationsInfo)GetObjectFromDataRow(row);
                    locationList.Add(objLocationsInfo);
                }
            }
            return locationList;
        }

        /// <summary>
        /// Get Locations have branch
        /// </summary>
        /// <returns></returns>
        public List<GELocationsInfo> GetLocationsHaveBranch()
        {
            DataSet ds = dal.GetDataSet("GELocations_GetLocationHaveBranch");

            List<GELocationsInfo> locationList = new List<GELocationsInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    GELocationsInfo objLocationsInfo = (GELocationsInfo)GetObjectFromDataRow(row);
                    locationList.Add(objLocationsInfo);
                }
            }
            return locationList;
        }
        public GELocationsInfo GetParentLocationByParentID(int geParentID)
        {
            List<GELocationsInfo> listGELocations = new List<GELocationsInfo>();
            DataSet ds = dal.GetDataSet("GELocations_GetParentLocationByParentID", geParentID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    GELocationsInfo obj = (GELocationsInfo)GetObjectFromDataRow(row);
                    listGELocations.Add(obj);
                }
            }
            if (listGELocations.Count > 0) return listGELocations[0];
            else
                return null;
        }
        public GELocationsInfo GetLocationBySomeCriterias(string geName, string geType, int geParentID)
        {
            List<GELocationsInfo> listGELocations = new List<GELocationsInfo>();
            DataSet ds = dal.GetDataSet("GELocations_GetLocationBySomeCriterias", geName, geType, geParentID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    GELocationsInfo obj = (GELocationsInfo)GetObjectFromDataRow(row);
                    listGELocations.Add(obj);
                }
            }
            if (listGELocations.Count > 0) return listGELocations[0];
            else
                return null;
        }

        public GELocationsInfo GetLocationByObjectIDAndType(int objectID, string objectType)
        {
            List<GELocationsInfo> listGELocations = new List<GELocationsInfo>();
            DataSet ds = dal.GetDataSet("GELocations_GetLocationByObjectIDAndType", objectID, objectType);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    GELocationsInfo obj = (GELocationsInfo)GetObjectFromDataRow(row);
                    listGELocations.Add(obj);
                }
            }
            if (listGELocations.Count > 0) return listGELocations[0];
            else
                return null;
        }

        public DataSet GetChildLocationByParentID(int parentID)
        {
            return dal.GetDataSet("GELocations_GetChildLocationByParentID", parentID);
        }
    }
    #endregion
}