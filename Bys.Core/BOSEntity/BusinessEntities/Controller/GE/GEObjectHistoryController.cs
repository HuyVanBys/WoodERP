using BOSCommon;
using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;

namespace BOSERP
{
    #region GEObjectHistory
    //-----------------------------------------------------------
    //Generated By: BOSDotNet Studio
    //Class:GEObjectHistoryController
    //Created Date:Wednesday, March 14, 2007
    //-----------------------------------------------------------

    public class GEObjectHistoryController : BaseBusinessController
    {
        #region SP Name
        private readonly String spGetGEObjectHistoryByObjectNameAndObjectNumber = "GEObjectHistory_SelectByObjectNameAndObjectNumber";
        private readonly String spGEObjectHistoryByObjectName = "GEObjectHistory_SelectByObjectName";
        #endregion
        public GEObjectHistoryController()
        {
            dal = new DALBaseProvider("GEObjectHistory", typeof(GEObjectHistoryInfo));
        }

        public DataSet GetGEObjectHistoryByObjectNameAndObjectNumber(String strGEObjectHistoryObjectName, String strGEObjectHistoryObjectNumber)
        {
            return (DataSet)dal.GetDataSet(spGetGEObjectHistoryByObjectNameAndObjectNumber, strGEObjectHistoryObjectName, strGEObjectHistoryObjectNumber);
        }

        public DataSet GetGEObjectHistoryByObjectName(String strGEObjectHistoryObjectName)
        {
            return (DataSet)dal.GetDataSet(spGEObjectHistoryByObjectName, strGEObjectHistoryObjectName);
        }

        /// <summary>
        /// Get latest history of an object
        /// </summary>
        /// <param name="objectName">Object name</param>
        /// <param name="objectNo">Object no</param>
        /// <returns>Latest history object</returns>
        public GEObjectHistoryInfo GetLatestHistoryByObjectNameAndObjectNo(string objectName, string objectNo)
        {
            return (GEObjectHistoryInfo)dal.GetDataObject("GEObjectHistory_GetLatestHistoryByObjectNameAndObjectNo", objectName, objectNo);
        }

        /// <summary>
        /// Get latest history of an object type in a range of date
        /// </summary>
        /// <param name="objectName">Object name</param>
        /// <param name="from">Date the history will be searched from</param>
        /// <param name="to">Date the history will be searched to</param>
        /// <returns>Latest history object</returns>
        public GEObjectHistoryInfo GetLatestHistoryByObjectNameAndDate(string objectName, DateTime from, DateTime to)
        {
            return (GEObjectHistoryInfo)dal.GetDataObject("GEObjectHistory_GetLatestHistoryByObjectNameAndDate", objectName, from, to);
        }

        public List<GEObjectHistoryInfo> GetStatusHistoryByProductionNormIDAndType(int productionNormID, string type)
        {
            DataSet ds = dal.GetDataSet("GEObjectHistory_GetStatusHistoryByProductionNormIDAndType", productionNormID, type);

            List<GEObjectHistoryInfo> objectHistoryList = new List<GEObjectHistoryInfo>();
            //MMProductionNormItemsController objProductionNormItemsController = new MMProductionNormItemsController();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    GEObjectHistoryInfo objObjectHistoryInfo = (GEObjectHistoryInfo)GetObjectFromDataRow(row);
                    objectHistoryList.Add(objObjectHistoryInfo);
                }
            }
            return objectHistoryList;
        }
        public bool IsInPeriod(List<HistoryTimeSpan> timespanList, DateTime historyDate)
        {
            bool isInPeriod = false;

            foreach (HistoryTimeSpan timeSpan in timespanList)
            {
                if (timeSpan.FromDate <= historyDate
                    && timeSpan.ToDate >= historyDate)
                {
                    isInPeriod = true;
                    break;
                }
            }
            return isInPeriod;
        }

        public List<GEObjectHistoryInfo> GetProfileManagementItemFromHistory(int productionNormID)
        {
            DataSet ds = dal.GetDataSet("GEObjectHistory_GetProfileManagementItemFromHistory", productionNormID);

            List<GEObjectHistoryInfo> objectHistoryList = new List<GEObjectHistoryInfo>();
            ////MMProductionNormItemsController objProductionNormItemsController = new MMProductionNormItemsController();

            //List<GEObjectHistoryInfo> statusSemiProduct = GetStatusHistoryByProductionNormIDAndType(productionNormID, ProductType.SemiProduct.ToString());
            //List<GEObjectHistoryInfo> statusHardware = GetStatusHistoryByProductionNormIDAndType(productionNormID, ProductType.Hardware.ToString());
            //List<GEObjectHistoryInfo> statusPaint = GetStatusHistoryByProductionNormIDAndType(productionNormID, ProductType.IngredientPaint.ToString());
            //List<GEObjectHistoryInfo> statusPackaging = GetStatusHistoryByProductionNormIDAndType(productionNormID, ProductType.IngredientPackaging.ToString());

            //#region Timespan
            //List<HistoryTimeSpan> semiProductTimeSpan = new List<HistoryTimeSpan>();
            //for (int i = 0; i < statusSemiProduct.Count; i += 2)
            //{ 
            //    if(i+1 <statusSemiProduct.Count)
            //    {
            //    semiProductTimeSpan.Add(new HistoryTimeSpan(statusSemiProduct[i].GEObjectHistoryDate,statusSemiProduct[i+1].GEObjectHistoryDate ));
            //    }else
            //    {
            //        semiProductTimeSpan.Add(new HistoryTimeSpan(statusSemiProduct[i].GEObjectHistoryDate, DateTime.MaxValue));
            //    }
            //}

            //List<HistoryTimeSpan> hwTimeSpan = new List<HistoryTimeSpan>();
            //for (int i = 0; i < statusHardware.Count; i += 2)
            //{
            //    if (i + 1 < statusHardware.Count)
            //    {
            //        hwTimeSpan.Add(new HistoryTimeSpan(statusHardware[i].GEObjectHistoryDate, statusHardware[i + 1].GEObjectHistoryDate));
            //    }
            //    else
            //    {
            //        hwTimeSpan.Add(new HistoryTimeSpan(statusHardware[i].GEObjectHistoryDate, DateTime.MaxValue));
            //    }
            //}

            //List<HistoryTimeSpan> paintTimeSpan = new List<HistoryTimeSpan>();
            //for (int i = 0; i < statusPaint.Count; i += 2)
            //{
            //    if (i + 1 < statusPaint.Count)
            //    {
            //        paintTimeSpan.Add(new HistoryTimeSpan(statusPaint[i].GEObjectHistoryDate, statusPaint[i + 1].GEObjectHistoryDate));
            //    }
            //    else
            //    {
            //        paintTimeSpan.Add(new HistoryTimeSpan(statusPaint[i].GEObjectHistoryDate, DateTime.MaxValue));
            //    }
            //}

            //List<HistoryTimeSpan> packagingTimeSpan = new List<HistoryTimeSpan>();
            //for (int i = 0; i < statusPackaging.Count; i += 2)
            //{
            //    if (i + 1 < statusPackaging.Count)
            //    {
            //        packagingTimeSpan.Add(new HistoryTimeSpan(statusPackaging[i].GEObjectHistoryDate, statusPackaging[i + 1].GEObjectHistoryDate));
            //    }
            //    else
            //    {
            //        packagingTimeSpan.Add(new HistoryTimeSpan(statusPackaging[i].GEObjectHistoryDate, DateTime.MaxValue));
            //    }
            //}
            //#endregion

            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    GEObjectHistoryInfo objObjectHistoryInfo = (GEObjectHistoryInfo)GetObjectFromDataRow(row);

                    //List<MMProductionNormItemsInfo> productionNormItemList = (List<MMProductionNormItemsInfo>)objProductionNormItemsController.GetListByNo(objObjectHistoryInfo.MMProfileManagementItemNo);
                    //if (productionNormItemList != null && productionNormItemList.Count > 0)
                    //{
                    //bool isValid = true;
                    if (objObjectHistoryInfo.GEObjectHistoryObjectID == productionNormID)
                    {
                        objObjectHistoryInfo.MMProductionNormItemGroup = string.Empty;
                    }
                    if (objObjectHistoryInfo.MMProductionNormItemGroup == ProductType.SemiProduct.ToString())
                    {
                        objObjectHistoryInfo.GEHistoryDetailTableName = "B" + objObjectHistoryInfo.MMProductionNormItemGroup;
                        //isValid = IsInPeriod(semiProductTimeSpan, objObjectHistoryInfo.MMProfileManagementItemUpdateDate);
                    }
                    else if (objObjectHistoryInfo.MMProductionNormItemGroup == ProductType.Hardware.ToString())
                    {
                        objObjectHistoryInfo.GEHistoryDetailTableName = "C" + objObjectHistoryInfo.MMProductionNormItemGroup;
                        //isValid = IsInPeriod(hwTimeSpan, objObjectHistoryInfo.MMProfileManagementItemUpdateDate);
                    }
                    else if (objObjectHistoryInfo.MMProductionNormItemGroup == ProductType.IngredientPackaging.ToString())
                    {
                        objObjectHistoryInfo.GEHistoryDetailTableName = "D" + objObjectHistoryInfo.MMProductionNormItemGroup;
                        //isValid = IsInPeriod(packagingTimeSpan, objObjectHistoryInfo.MMProfileManagementItemUpdateDate);
                    }
                    else if (objObjectHistoryInfo.MMProductionNormItemGroup == ProductType.IngredientPaint.ToString())
                    {
                        objObjectHistoryInfo.GEHistoryDetailTableName = "E" + objObjectHistoryInfo.MMProductionNormItemGroup;
                        //isValid = IsInPeriod(paintTimeSpan, objObjectHistoryInfo.MMProfileManagementItemUpdateDate);
                    }
                    else
                        objObjectHistoryInfo.GEHistoryDetailTableName = "AProduct";
                    //}
                    //else
                    //    objObjectHistoryInfo.GEHistoryDetailTableName = "AProduct";
                    //if (isValid)
                    //{
                    objectHistoryList.Add(objObjectHistoryInfo);
                    //}
                }
            }

            return objectHistoryList;
        }
    }

    public class HistoryTimeSpan
    {
        public DateTime FromDate { get; set; }
        public DateTime ToDate { get; set; }

        public HistoryTimeSpan(DateTime fromDate, DateTime toDate)
        {
            FromDate = fromDate;
            ToDate = toDate;
        }
    }
    #endregion
}