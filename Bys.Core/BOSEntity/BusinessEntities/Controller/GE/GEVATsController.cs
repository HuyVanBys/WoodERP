using BOSLib;
using BOSLib.Extensions;
using Dapper;
using System.Collections.Generic;
using System.Data;

namespace BOSERP
{
    #region GEVATs
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:GEVATsController
    //Created Date:Saturday, April 07, 2007
    //-----------------------------------------------------------

    public class GEVATsController : BaseBusinessController
    {
        public GEVATsController()
        {
            dal = new DALBaseProvider("GEVATs", typeof(GEVATsInfo));
        }

        public GEVATsInfo GetObjectByPercentValue(decimal percentValue)
        {
            return (GEVATsInfo)dal.GetDataObject("GEVATs_GetObjectByPercentValue", percentValue);
        }

        public List<GEVATsInfo> GetAllAliveVats()
        {
            DataSet ds = GetAllObjects();
            List<GEVATsInfo> listVATs = new List<GEVATsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    GEVATsInfo objVATsInfo = (GEVATsInfo)GetObjectFromDataRow(row);
                    listVATs.Add(objVATsInfo);
                }
            }
            ds.Dispose();
            return listVATs;
        }
        public GEVATsInfo GetObjectByProductGroup(int productGroupID)
        {
            return (GEVATsInfo)dal.GetDataObject("GEVATs_GetObjectByProductGroup", productGroupID);
        }
        public List<GEVATsInfo> GetListObjectByListProductGroup(List<int> productGroupIds)
        {
            DataTable productGroupDt = productGroupIds.ToDataTableIds();
            var parameters = new DynamicParameters();
            parameters.Add("@ProductGroupIDs", productGroupDt.AsTableValuedParameter("Type_ObjectID"), DbType.Object, ParameterDirection.Input);
            var results = dal.Connection.ExecuteReader("GEVATs_GetListObjectByListProductGroup", parameters, commandType: CommandType.StoredProcedure);
            DataSet ds = new DataSet();
            int readIndex = 0;
            do
            {
                DataTable dr = new DataTable();
                dr.TableName = string.Format("Table{0}", readIndex == 0 ? "" : readIndex.ToString());
                dr.Load(results);
                ds.Tables.Add(dr);
                readIndex++;
            } while (!results.IsClosed);
            List<GEVATsInfo> listVATs = new List<GEVATsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    GEVATsInfo objVATsInfo = (GEVATsInfo)GetObjectFromDataRow(row);
                    listVATs.Add(objVATsInfo);
                }
            }
            ds.Dispose();
            return listVATs;
        }
    }
    #endregion
}