using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region GECurrencyExchangeRates
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:GECurrencyExchangeRatesController
    //Created Date:04 December 2018
    //-----------------------------------------------------------

    public class GECurrencyExchangeRatesController : BaseBusinessController
    {
        public GECurrencyExchangeRatesController()
        {
            dal = new DALBaseProvider("GECurrencyExchangeRates", typeof(GECurrencyExchangeRatesInfo));
        }
        public decimal GetCurrencyExchangeRateByCurrencyIDAndDate(int currencyID, DateTime date)
        {
            Object obj = dal.GetSingleValue("GECurrencyExchangeRates_GetCurrencyExchangeRateByCurrencyIDAndDate", currencyID, date);
            decimal Debt = 1;
            if (obj != null)
                Decimal.TryParse(obj.ToString(), out Debt);
            return Debt;
        }

        public decimal GetCurrencyExchangeRateTransferByCurrencyIDAndDate(int currencyID, DateTime date)
        {
            Object obj = dal.GetSingleValue("GECurrencyExchangeRates_GetCurrencyExchangeRateTransferByCurrencyIDAndDate", currencyID, date);
            decimal Debt = 1;
            if (obj != null)
                Decimal.TryParse(obj.ToString(), out Debt);
            return Debt;
        }

        public GECurrencyExchangeRatesInfo CheckCurrencyExchangeRateByCurrencyIDAndDate(int currencyID, DateTime date)
        {
            DataSet ds = dal.GetDataSet("GECurrencyExchangeRates_CheckCurrencyExchangeRateByCurrencyIDAndDate", currencyID, date);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                GECurrencyExchangeRatesInfo objCurrencyExchangeRatesInfo = (GECurrencyExchangeRatesInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objCurrencyExchangeRatesInfo;
            }
            return null;
        }
        public List<GECurrencyExchangeRatesInfo> GetCurrencyExchangeRateByCurrencyID(int currencyID)
        {
            DataSet ds = dal.GetDataSet("GECurrencyExchangeRates_GetCurrencyExchangeRateByCurrencyID", currencyID);
            List<GECurrencyExchangeRatesInfo> list = new List<GECurrencyExchangeRatesInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    GECurrencyExchangeRatesInfo objCurrencyExchangeRatesInfo = (GECurrencyExchangeRatesInfo)GetObjectFromDataRow(row);
                    list.Add(objCurrencyExchangeRatesInfo);
                }
            }
            return list;
        }

        public List<GECurrencyExchangeRatesInfo> GetCurrencyExchangeRateByDate(DateTime date)
        {
            DataSet ds = dal.GetDataSet("GECurrencyExchangeRates_GetAllAliveCurrencyExchangeRateByDate", date);
            List<GECurrencyExchangeRatesInfo> list = new List<GECurrencyExchangeRatesInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    GECurrencyExchangeRatesInfo objCurrencyExchangeRatesInfo = (GECurrencyExchangeRatesInfo)GetObjectFromDataRow(row);
                    list.Add(objCurrencyExchangeRatesInfo);
                }
            }
            return list;
        }
        public GECurrencyExchangeRatesInfo GetCurrencyExchangeRateByCurrencyIDAnddate(int currencyID, DateTime date)
        {
            DataSet ds = dal.GetDataSet("GECurrencyExchangeRates_GetCurrencyExchangeRateByCurrencyIDAndDate", currencyID, date);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                GECurrencyExchangeRatesInfo objCurrencyExchangeRatesInfo = (GECurrencyExchangeRatesInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objCurrencyExchangeRatesInfo;
            }
            return null;
        }

        public void UpdateRateIsVisibleForAll()
        {
            dal.ExecuteStoredProcedure("GECurrencyExchangeRate_UpdateRateIsVisibleForAll");
        }
        public decimal GetPreviousCurrencyExchangeRatePlanByCurrencyIDAndDate(int currencyID, DateTime date)
        {
            Object obj = dal.GetSingleValue("GECurrencyExchangeRates_GetPreviousCurrencyExchangeRatePlanByCurrencyIDAndDate", currencyID, date);
            decimal Debt = 1;
            if (obj != null)
                Decimal.TryParse(obj.ToString(), out Debt);
            return Debt;
        }

    }
    #endregion
}