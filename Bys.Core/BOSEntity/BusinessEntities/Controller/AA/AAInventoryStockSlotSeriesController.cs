using BOSLib;
using System;
using System.Data;


namespace BOSERP
{
    #region AAInventoryStockSlotSeries
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:AAInventoryStockSlotSeriesController
    //Created Date:Wednesday, April 18, 2007
    //-----------------------------------------------------------

    public class AAInventoryStockSlotSeriesController : BaseBusinessController
    {
        private readonly string spGetAAInventoryStockSlotSeriesByAAInventoryStockSlotIDAndMAProductIDAndMAProductSerieID =
                                "AAInventoryStockSlotSeries_SelectByAAInventoryStockSlotIDAndMAProductIDAndMAProductSerieID";

        private readonly string spGetAAInventoryStockSlotSeriesByMAProductIDAndMAProductSerieNameAndMAStockID =
                                "AAInventoryStockSlotSeries_SelectByMAProductIDAndMAProductSerieNameAndMAStockSlotID";

        private readonly string spGetTotalStockSlotSerieQuantityByMAProductSerieNameAndMAProductID =
                                "AAInventoryStockSlotSeries_SelectTotalSerieStockSlotQuantityByMAProductSerieNameAndMAProductID";

        private readonly string spGetTotalStockSlotSerieProposalQuantityByMAProductSerieNameAndMAProductID =
                                "AAInventoryStockSlotSeries_SelectTotalSerieStockSlotProposalQuantityByMAProductSerieNameAndMAProductID";

        private readonly string spGetTotalStockSlotSerieSellOrderQuantityByMAProductSerieNameAndMAProductID =
                                "AAInventoryStockSlotSeries_SelectTotalSerieStockSlotSellOrderQuantityByMAProductSerieNameAndMAProductID";

        private readonly string spGetTotalStockSlotSeriePurchaseOrderQuantityByMAProductSerieNameAndMAProductID =
                                "AAInventoryStockSlotSeries_SelectTotalSerieStockSlotPurchaseOrderQuantityByMAProductSerieNameAndMAProductID";

        public AAInventoryStockSlotSeriesController()
        {
            dal = new DALBaseProvider("AAInventoryStockSlotSeries", typeof(AAInventoryStockSlotSeriesInfo));
        }

        public AAInventoryStockSlotSeriesInfo GetAAInventoryStockSlotSeriesByAAInventoryStockSlotIDANdMAProductIDAndMAProductSerieID(
                                                int iAAInventoryStockSlotID, int iMAProductID, int iMAProductSerieID)
        {
            return (AAInventoryStockSlotSeriesInfo)dal.GetDataObject(spGetAAInventoryStockSlotSeriesByAAInventoryStockSlotIDAndMAProductIDAndMAProductSerieID,
                                                                        iAAInventoryStockSlotID, iMAProductID, iMAProductSerieID);
        }

        public AAInventoryStockSlotSeriesInfo GetAAInventoryStockSlotSeriesByMAProductIDAndMAProductSerieNameAndMAStockSlotID(
                                                int iMAProductID, String strMAProductSerieName, int iMAStockSlotID)
        {
            return (AAInventoryStockSlotSeriesInfo)dal.GetDataObject(spGetAAInventoryStockSlotSeriesByMAProductIDAndMAProductSerieNameAndMAStockID,
                                                                     iMAProductID, strMAProductSerieName, iMAStockSlotID);
        }

        public double GetTotalStockSlotSerieQuantityByMAProductSerieNameAndMAProductID(String strMAProductSerieName, int iMAProductID)
        {
            double dbTotalStockSlotSerieQuantity = 0;
            try
            {
                DataSet ds = dal.GetDataSet(spGetTotalStockSlotSerieQuantityByMAProductSerieNameAndMAProductID, strMAProductSerieName, iMAProductID);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        dbTotalStockSlotSerieQuantity = Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                    }
                }
                ds.Dispose();
                return dbTotalStockSlotSerieQuantity;
            }
            catch (Exception)
            {
                return 0;
            }
        }

        public double GetTotalStockSlotSerieProposalQuantityByMAProductSerieNameAndMAProductID(String strMAProductSerieName, int iMAProductID)
        {
            double dbTotalStockSlotSerieProposalQuantity = 0;
            try
            {
                DataSet ds = dal.GetDataSet(spGetTotalStockSlotSerieProposalQuantityByMAProductSerieNameAndMAProductID, strMAProductSerieName, iMAProductID);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        dbTotalStockSlotSerieProposalQuantity = Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                    }
                }
                ds.Dispose();
                return dbTotalStockSlotSerieProposalQuantity;
            }
            catch (Exception)
            {
                return 0;
            }
        }

        public double GetTotalStockSlotSerieSellOrderQuantityByMAProductSerieNameAndMAProductID(String strMAProductSerieName, int iMAProductID)
        {
            double dbTotalStockSlotSerieSellOrderQuantity = 0;
            try
            {
                DataSet ds = dal.GetDataSet(spGetTotalStockSlotSerieSellOrderQuantityByMAProductSerieNameAndMAProductID, strMAProductSerieName, iMAProductID);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        dbTotalStockSlotSerieSellOrderQuantity = Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                    }
                }
                ds.Dispose();
                return dbTotalStockSlotSerieSellOrderQuantity;
            }
            catch (Exception)
            {
                return 0;
            }
        }

        public double GetTotalStockSlotSeriePurchaseOrderQuantityByMAProductSerieNameAndMAProductID(String strMAProductSerieName, int iMAProductID)
        {
            double dbTotalStockSlotSeriePurchaseOrderQuantity = 0;
            try
            {
                DataSet ds = dal.GetDataSet(spGetTotalStockSlotSeriePurchaseOrderQuantityByMAProductSerieNameAndMAProductID, strMAProductSerieName, iMAProductID);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        dbTotalStockSlotSeriePurchaseOrderQuantity = Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                    }
                }
                ds.Dispose();
                return dbTotalStockSlotSeriePurchaseOrderQuantity;
            }
            catch (Exception)
            {
                return 0;
            }
        }
    }
    #endregion
}