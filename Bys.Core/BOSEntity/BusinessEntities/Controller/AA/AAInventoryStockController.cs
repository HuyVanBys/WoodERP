using BOSLib;
using System;
using System.Data;


namespace BOSERP
{
    #region AAInventoryStock
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:AAInventoryStockController
    //Created Date:Wednesday, April 18, 2007
    //-----------------------------------------------------------

    public class AAInventoryStockController : BaseBusinessController
    {
        private readonly string spGetInventoryStockByMAProductIDAndMAStockID =
                                "AAInventoryStock_SelectByMAProductIDAndMAStockID";

        private readonly string spGetTotalStockQuantityByMAProductID =
                                "AAInventoryStock_SelectTotalStockQuantityByMAProductID";


        private readonly string spGetTotalStockProposalQuantityByMAProductID =
                                "AAInventoryStock_SelectTotalStockProposalQuantityByMAProductID";

        private readonly string spGetTotalStockSellOrderQuantityByMAProductID =
                                "AAInventoryStock_SelectTotalStockSellOrderQuantityByMAProductID";

        private readonly string spGetTotalStockPurchaseOrderQuantityByMAProductID =
                                "AAInventoryStock_SelectTotalStockPurchaseOrderQuantityByMAProductID";

        public AAInventoryStockController()
        {
            dal = new DALBaseProvider("AAInventoryStock", typeof(AAInventoryStockInfo));
        }

        public AAInventoryStockInfo GetInventoryStockByMAProductIDAndMAStockID(int iMAProductID, int iMAStockID)
        {
            return (AAInventoryStockInfo)dal.GetDataObject(spGetInventoryStockByMAProductIDAndMAStockID, iMAProductID, iMAStockID);
        }

        public double GetTotalStockQuantityByMAProductID(int iMAProductID)
        {
            double dbTotalStockQuantity = 0;
            try
            {
                DataSet ds = dal.GetDataSet(spGetTotalStockQuantityByMAProductID, iMAProductID);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        dbTotalStockQuantity += Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                    }
                }
                ds.Dispose();
                return dbTotalStockQuantity;
            }
            catch (Exception)
            {
                return 0;
            }
        }

        public double GetTotalStockProposalQuantityByMAProductID(int iMAProductID)
        {
            double dbTotalProposalQuantity = 0;
            try
            {
                DataSet ds = dal.GetDataSet(spGetTotalStockProposalQuantityByMAProductID, iMAProductID);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        dbTotalProposalQuantity += Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                    }
                }
                ds.Dispose();
                return dbTotalProposalQuantity;
            }
            catch (Exception)
            {
                return 0;
            }
        }

        public double GetTotalStockSellOrderQuantityByMAProductID(int iMAProductID)
        {
            double dbTotalSellOrderQuantity = 0;
            try
            {
                DataSet ds = dal.GetDataSet(spGetTotalStockSellOrderQuantityByMAProductID, iMAProductID);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        dbTotalSellOrderQuantity += Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                    }
                }
                ds.Dispose();
                return dbTotalSellOrderQuantity;
            }
            catch (Exception)
            {
                return 0;
            }
        }

        public double GetTotalStockPurchaseOrderQuantityByMAProductID(int iMAProductID)
        {
            double dbTotalPurchaseOrderQuantity = 0;
            try
            {
                DataSet ds = dal.GetDataSet(spGetTotalStockPurchaseOrderQuantityByMAProductID, iMAProductID);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        dbTotalPurchaseOrderQuantity += Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                    }
                }
                ds.Dispose();
                return dbTotalPurchaseOrderQuantity;
            }
            catch (Exception)
            {
                return 0;
            }
        }

        public double GetStockQuantityByMAProductIDAndMAStockID(int iMAProductID, int iMAStockID)
        {
            double dbStockQuantity = 0;
            AAInventoryStockInfo objAAInventoryStockInfo = GetInventoryStockByMAProductIDAndMAStockID(iMAProductID, iMAStockID);
            if (objAAInventoryStockInfo != null)
                dbStockQuantity = objAAInventoryStockInfo.AAInventoryStockQuantity;

            return dbStockQuantity;
        }

        public double GetStockProposalQuantityByMAProductIDAndMAStockID(int iMAProductID, int iMAStockID)
        {
            double dbStockProposalQuantity = 0;
            AAInventoryStockInfo objAAInventoryStockInfo = GetInventoryStockByMAProductIDAndMAStockID(iMAProductID, iMAStockID);
            if (objAAInventoryStockInfo != null)
                dbStockProposalQuantity = objAAInventoryStockInfo.AAInventoryStockProposalQuantity;

            return dbStockProposalQuantity;
        }

        public double GetStockSellOrderQuantityByMAProductIDAndMAStockID(int iMAProductID, int iMAStockID)
        {
            double dbStockSellOrderQuantity = 0;
            AAInventoryStockInfo objAAInventoryStockInfo = GetInventoryStockByMAProductIDAndMAStockID(iMAProductID, iMAStockID);
            if (objAAInventoryStockInfo != null)
                dbStockSellOrderQuantity = objAAInventoryStockInfo.AAInventoryStockSellOrderQuantity;

            return dbStockSellOrderQuantity;
        }

        public double GetStockPurchaseOrderQuantityByMAProductIDAndMAStockID(int iMAProductID, int iMAStockID)
        {
            double dbStockPurchaseOrderQuantity = 0;
            AAInventoryStockInfo objAAInventoryStockInfo = GetInventoryStockByMAProductIDAndMAStockID(iMAProductID, iMAStockID);
            if (objAAInventoryStockInfo != null)
                dbStockPurchaseOrderQuantity = objAAInventoryStockInfo.AAInventoryStockPurchaseOrderQuantity;

            return dbStockPurchaseOrderQuantity;
        }
    }
    #endregion
}