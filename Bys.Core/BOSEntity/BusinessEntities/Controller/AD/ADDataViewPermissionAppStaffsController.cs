using BOSLib;
using System.Collections.Generic;
using System.Data;
using System.Linq;


namespace BOSERP
{
    #region ADDataViewPermissionAppStaffs
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ADDataViewPermissionAppStaffsController
    //Created Date:Monday, August 20, 2018
    //-----------------------------------------------------------

    public class ADDataViewPermissionAppStaffsController : BaseBusinessController
    {
        public ADDataViewPermissionAppStaffsController()
        {
            dal = new DALBaseProvider("ADDataViewPermissionAppStaffs", typeof(ADDataViewPermissionAppStaffsInfo));
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ADDataViewPermissionAppStaffsInfo> dataViewPermissionAppStaffList = new List<ADDataViewPermissionAppStaffsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADDataViewPermissionAppStaffsInfo objDataViewPermissionAppStaffsInfo = (ADDataViewPermissionAppStaffsInfo)GetObjectFromDataRow(row);
                    dataViewPermissionAppStaffList.Add(objDataViewPermissionAppStaffsInfo);
                }
            }
            ds.Dispose();
            return dataViewPermissionAppStaffList;
        }

        public List<ADDataViewPermissionAppStaffsInfo> GetDataViewPermissionAppStaffsByEmployeeGroupAppStaffID(int employeeGroupAppStaffID, int groupAppStaffID, string groupType)
        {
            return (List<ADDataViewPermissionAppStaffsInfo>)GetListFromDataSet(dal.GetDataSet("ADDataViewPermissionAppStaffs_GetDataViewPermissionAppStaffsByEmployeeGroupAppStaffID", employeeGroupAppStaffID, groupAppStaffID, groupType));
        }

        public List<ADDataViewPermissionAppStaffsInfo> GetDataViewPermissionAppStaffsByEGASIDByPASID(int employeeGroupAppStaffID, int groupAppStaffID, string groupType, int ADDataViewPermissionAppStaffID, int FK_ADPrivilegeAppSatffID)
        {
            return (List<ADDataViewPermissionAppStaffsInfo>)GetListFromDataSet(dal.GetDataSet("ADDataViewPermissionAppStaffs_GetDataViewPermissionAppStaffsByEGASIDByPASID", employeeGroupAppStaffID, groupAppStaffID, groupType, ADDataViewPermissionAppStaffID, FK_ADPrivilegeAppSatffID));
        }

        public List<ADDataViewPermissionAppStaffsInfo> GetDataViewPermissionAppStaffsByGroupAppStaffID(int groupAppStaffID, string groupType)
        {
            return (List<ADDataViewPermissionAppStaffsInfo>)GetListFromDataSet(dal.GetDataSet("ADDataViewPermissionAppStaffs_GetDataViewPermissionAppStaffsByGroupAppStaffID", groupAppStaffID, groupType));
        }

        public ADDataViewPermissionAppStaffsInfo GetDataViewPermissionAppStaffsByADGroupAppStaffIDAndBranchIDAndADPrivilegeAppSatffID(int ADGroupAppStaffID, int BRBranchID, int ADPrivilegeAppSatffID)
        {
            DataSet ds = dal.GetDataSet("ADDataViewPermissionAppStaffs_GetDataViewPermissionAppStaffsByADGroupAppStaffIDAndBranchIDAndADPrivilegeAppSatffID", ADGroupAppStaffID, BRBranchID, ADPrivilegeAppSatffID);
            ADDataViewPermissionAppStaffsInfo dataViewPermissionAppStaff = null;
            if (ds.Tables[0].Rows.Count > 0)
            {
                dataViewPermissionAppStaff = (ADDataViewPermissionAppStaffsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }
            ds.Dispose();
            return dataViewPermissionAppStaff;
        }

        public List<ADDataViewPermissionAppStaffsInfo> GetAllPrivilegeAppSatff()
        {
            return (List<ADDataViewPermissionAppStaffsInfo>)GetListFromDataSet(dal.GetDataSet("ADDataViewPermissionAppStaffs_GetAllPrivilegeAppSatff"));
        }

        public List<ADDataViewPermissionAppStaffsInfo> GetDataViewPermissionsByUserIDAndBranchID(int userID, int branchID)
        {
            return (List<ADDataViewPermissionAppStaffsInfo>)GetListFromDataSet(dal.GetDataSet("ADDataViewPermissionAppStaffs_GetDataViewPermissionsByUserIDAndBranchID", userID, branchID));
        }


        public DataTable GetDataViewPermissionsByGroupID(int groupAppStaffID)
        {
            DataSet ds = dal.GetDataSet("ADDataViewPermissionAppStaffs_GetDataViewPermissionsByGroupID", groupAppStaffID);

            List<ADDataViewPermissionAppStaffsInfo> viewPermissionAppStaffs = new List<ADDataViewPermissionAppStaffsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADDataViewPermissionAppStaffsInfo dataViewPermission = (ADDataViewPermissionAppStaffsInfo)GetObjectFromDataRow(row);
                    viewPermissionAppStaffs.Add(dataViewPermission);
                }
            }

            List<ADDataViewPermissionAppStaffsInfo> dataViewPermissionAppStaffsList;
            dataViewPermissionAppStaffsList = GetAllPrivilegeAppSatff();

            BRBranchsController objBranchsController = new BRBranchsController();
            List<BRBranchsInfo> branchs = new List<BRBranchsInfo>();
            branchs = objBranchsController.GetAllBranches();

            //get employee by userid
            //int currentBranchID = 0;
            //HREmployeesController employeeController = new HREmployeesController();
            //HREmployeesInfo employee = employeeController.GetEmployeeByUserID(userID);
            //if (employee != null)
            //    currentBranchID = employee.FK_BRBranchID;

            //create new datatable
            DataTable dt = new DataTable();
            dt.Columns.Add(new DataColumn("ADDataViewPermissionAppStaffID", typeof(int)));
            dt.Columns.Add(new DataColumn("FK_ADPrivilegeAppSatffID", typeof(int)));
            dt.Columns.Add(new DataColumn("ADPrivilegeAppSatffName"));
            dt.Columns.Add(new DataColumn("BRBranchID", typeof(int)));
            dt.Columns.Add(new DataColumn("ADGroupAppStaffID", typeof(int)));
            dt.Columns.Add(new DataColumn("RowSelection", typeof(bool)));
            dt.Columns.Add(new DataColumn("ADPrivilegeAppSatffGroup", typeof(string)));

            //create data column by branch name
            foreach (BRBranchsInfo objBranchsInfo in branchs)
            {
                dt.Columns.Add(new DataColumn(objBranchsInfo.BRBranchID.ToString() + objBranchsInfo.BRBranchName, typeof(bool)));
            }

            DataRow firstRow = dt.NewRow();
            firstRow["ADDataViewPermissionAppStaffID"] = 0;
            firstRow["FK_ADPrivilegeAppSatffID"] = 0;
            firstRow["ADPrivilegeAppSatffName"] = "";
            firstRow["ADPrivilegeAppSatffGroup"] = "";
            firstRow["BRBranchID"] = 0;
            firstRow["ADGroupAppStaffID"] = 0;
            firstRow["RowSelection"] = false;

            foreach (BRBranchsInfo objBranchsInfo in branchs)
            {
                firstRow[objBranchsInfo.BRBranchID.ToString() + objBranchsInfo.BRBranchName] = false;
            }

            //add empty row

            dt.Rows.Add(firstRow);

            bool hasFoundPermissionsForTheCurrentBranch = false;
            int counter;
            //fill in the above data table
            foreach (ADDataViewPermissionAppStaffsInfo dataViewPermissionAppStaff in dataViewPermissionAppStaffsList)
            {
                DataRow newRow = dt.NewRow();
                newRow["FK_ADPrivilegeAppSatffID"] = dataViewPermissionAppStaff.ADPrivilegeAppSatffID;
                newRow["ADPrivilegeAppSatffName"] = dataViewPermissionAppStaff.ADPrivilegeAppSatffName;
                newRow["ADPrivilegeAppSatffGroup"] = dataViewPermissionAppStaff.ADPrivilegeAppSatffGroup;
                newRow["ADGroupAppStaffID"] = groupAppStaffID;

                counter = 0;
                foreach (BRBranchsInfo objBranchsInfo in branchs)
                {
                    newRow["BRBranchID"] = objBranchsInfo.BRBranchID;
                    ADDataViewPermissionAppStaffsInfo viewPermissionAppStaffsInfo = viewPermissionAppStaffs.FirstOrDefault(item =>
                                                                                                item.FK_BRBranchID == objBranchsInfo.BRBranchID &&
                                                                                                item.FK_ADPrivilegeAppSatffID == dataViewPermissionAppStaff.ADPrivilegeAppSatffID);


                    if (viewPermissionAppStaffsInfo != null)
                    {
                        newRow["ADDataViewPermissionAppStaffID"] = viewPermissionAppStaffsInfo.ADDataViewPermissionAppStaffID;
                        newRow[objBranchsInfo.BRBranchID.ToString() + objBranchsInfo.BRBranchName] = true;
                        hasFoundPermissionsForTheCurrentBranch = true;

                        counter++;
                    }
                    else
                    {
                        newRow["ADDataViewPermissionAppStaffID"] = 0;
                        newRow[objBranchsInfo.BRBranchID.ToString() + objBranchsInfo.BRBranchName] = false;
                    }
                }

                if (counter == branchs.Count)
                    newRow["RowSelection"] = true;
                else
                    newRow["RowSelection"] = false;
                dt.Rows.Add(newRow);
            }

            //if (!hasFoundPermissionsForTheCurrentBranch)
            //{
            //    BRBranchsInfo branch = branchs.FirstOrDefault(item => item.BRBranchID == currentBranchID);
            //    if (branch != null)
            //    {
            //        //if the current user has not been set permisison on modules and reports of by the branch he belongs
            //        List<ADDataViewPermissionAppStaffsInfo> foundCollection = GetDataViewPermissionsByUserIDAndBranchID(userID, branch.BRBranchID);
            //        if (foundCollection == null || foundCollection.Count == 0)
            //        {
            //            foreach (DataRow row in dt.Rows)
            //            {
            //                row[branch.BRBranchID.ToString() + branch.BRBranchName] = true;
            //            }
            //        }
            //    }
            //}
            ds.Dispose();
            return dt;
        }
    }
    #endregion
}