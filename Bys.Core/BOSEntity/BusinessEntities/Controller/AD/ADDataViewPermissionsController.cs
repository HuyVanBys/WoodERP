using BOSCommon.Constants;
using BOSLib;
using System.Collections.Generic;
using System.Data;
using System.Linq;


namespace BOSERP
{
    #region ADDataViewPermissions
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ADDataViewPermissionsController
    //Created Date:Wednesday, November 20, 2013
    //-----------------------------------------------------------

    public class ADDataViewPermissionsController : BaseBusinessController
    {
        public ADDataViewPermissionsController()
        {
            dal = new DALBaseProvider("ADDataViewPermissions", typeof(ADDataViewPermissionsInfo));
        }

        /// <summary>
        /// Get module mames by UserID and LanguageID
        /// </summary>
        /// <param name="userID">UserID</param>
        /// <param name="languageID">LanguageID</param>
        /// <returns></returns>
        public List<ADDataViewPermissionsInfo> GetModuleNamesByUserIDAndLanguageID(int userID, int languageID)
        {
            DataSet ds = dal.GetDataSet("ADDataViewPermissions_GetModuleNamesByUserIDAndLanguageID", userID, languageID);
            List<ADDataViewPermissionsInfo> customerList = new List<ADDataViewPermissionsInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ADDataViewPermissionsInfo dataViewPermission = (ADDataViewPermissionsInfo)GetObjectFromDataRow(dr);
                    customerList.Add(dataViewPermission);
                }
            }
            return customerList;
        }

        /// <summary>
        /// Get data view permission by UserID
        /// </summary>
        /// <returns>List of all customer</returns>
        public List<ADDataViewPermissionsInfo> GetDataViewPermissionsByUserID(int userID)
        {
            DataSet ds = dal.GetDataSet("ADDataViewPermissions_GetDataViewPermissionsByUserID", userID);
            List<ADDataViewPermissionsInfo> dataViewPermissionList = new List<ADDataViewPermissionsInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ADDataViewPermissionsInfo dataViewPermission = (ADDataViewPermissionsInfo)GetObjectFromDataRow(dr);
                    dataViewPermissionList.Add(dataViewPermission);
                }
            }
            return dataViewPermissionList;
        }

        /// <summary>
        /// Get Data View Permissions
        /// </summary>
        /// <param name="userID">UserID</param>
        /// <param name="dataViewPermissionType">DataViewPermissionType</param>
        /// <returns>datatable of data view permission</returns>
        public DataTable GetDataViewPermissions(int userID, string dataViewPermissionType)
        {
            DataSet ds = dal.GetDataSet("ADDataViewPermissions_GetDataViewPermissionsByUserIDAndDataViewPermissionType", userID, dataViewPermissionType);

            List<ADDataViewPermissionsInfo> dataViewPermissions = new List<ADDataViewPermissionsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADDataViewPermissionsInfo dataViewPermission = (ADDataViewPermissionsInfo)GetObjectFromDataRow(row);
                    dataViewPermissions.Add(dataViewPermission);
                }
            }
            //NUThao [EDIT] [10/16/2014] [DB centre] [Report Permission], START            
            //get module names by userid
            //hard code languageid
            //int languageID = 1;
            //moduleNames = GetModuleNamesByUserIDAndLanguageID(userID, languageID);
            List<ADDataViewPermissionsInfo> moduleNames;
            if (dataViewPermissionType == ADDataViewPermissionType.Module)
            {
                //hard code languageid
                int languageID = 1;
                moduleNames = GetModuleNamesByUserIDAndLanguageID(userID, languageID);
            }
            else
            {
                moduleNames = GetReportNamesByUserID(userID);
            }
            //NUThao [EDIT] [10/16/2014] [DB centre] [Report Permission], END
            //get all branches
            BRBranchsController objBranchsController = new BRBranchsController();
            List<BRBranchsInfo> branchs = new List<BRBranchsInfo>();
            branchs = objBranchsController.GetAllBranches();

            //get employee by userid
            int currentBranchID = 0;
            HREmployeesController employeeController = new HREmployeesController();
            HREmployeesInfo employee = employeeController.GetEmployeeByUserID(userID);
            if (employee != null)
                currentBranchID = employee.FK_BRBranchID;

            //create new datatable
            DataTable dt = new DataTable();
            dt.Columns.Add(new DataColumn("ADDataViewPermissionID", typeof(int)));
            dt.Columns.Add(new DataColumn("FK_STModuleOrReportID", typeof(int)));
            dt.Columns.Add(new DataColumn("ADUserGroupSectionName"));
            dt.Columns.Add(new DataColumn("STModuleName"));
            dt.Columns.Add(new DataColumn("BRBranchID", typeof(int)));
            dt.Columns.Add(new DataColumn("UserID", typeof(int)));
            dt.Columns.Add(new DataColumn("RowSelection", typeof(bool)));

            //create data column by branch name
            foreach (BRBranchsInfo objBranchsInfo in branchs)
            {
                dt.Columns.Add(new DataColumn(objBranchsInfo.BRBranchID.ToString() + objBranchsInfo.BRBranchName, typeof(bool)));
            }

            DataRow firstRow = dt.NewRow();
            firstRow["ADDataViewPermissionID"] = 0;
            firstRow["FK_STModuleOrReportID"] = 0;
            firstRow["ADUserGroupSectionName"] = "";
            firstRow["STModuleName"] = "";
            firstRow["BRBranchID"] = 0;
            firstRow["UserID"] = 0;
            firstRow["RowSelection"] = false;

            foreach (BRBranchsInfo objBranchsInfo in branchs)
            {
                firstRow[objBranchsInfo.BRBranchID.ToString() + objBranchsInfo.BRBranchName] = false;
            }

            //add empty row

            dt.Rows.Add(firstRow);

            bool hasFoundPermissionsForTheCurrentBranch = false;
            int counter;
            //fill in the above data table
            foreach (ADDataViewPermissionsInfo moduleName in moduleNames)
            {
                DataRow newRow = dt.NewRow();
                newRow["FK_STModuleOrReportID"] = moduleName.FK_STModuleOrReportID;
                newRow["ADUserGroupSectionName"] = moduleName.ADUserGroupSectionName;
                newRow["STModuleName"] = moduleName.STModuleName;
                newRow["UserID"] = userID;

                counter = 0;
                foreach (BRBranchsInfo objBranchsInfo in branchs)
                {
                    newRow["BRBranchID"] = objBranchsInfo.BRBranchID;
                    ADDataViewPermissionsInfo dataViewPermission = dataViewPermissions.FirstOrDefault(item =>
                                                                                                item.FK_BRBranchID == objBranchsInfo.BRBranchID &&
                                                                                                item.FK_STModuleOrReportID == moduleName.FK_STModuleOrReportID);


                    if (dataViewPermission != null)
                    {
                        newRow["ADDataViewPermissionID"] = dataViewPermission.ADDataViewPermissionID;
                        newRow[objBranchsInfo.BRBranchID.ToString() + objBranchsInfo.BRBranchName] = true;
                        //NUThao [DELETE] [10/16/2014] [DB centre] [Report Permission], START
                        //if (objBranchsInfo.BRBranchID == currentBranchID)
                        //NUThao [DELETE] [10/16/2014] [DB centre] [Report Permission], END
                        hasFoundPermissionsForTheCurrentBranch = true;

                        counter++;
                    }
                    else
                    {
                        newRow["ADDataViewPermissionID"] = 0;
                        newRow[objBranchsInfo.BRBranchID.ToString() + objBranchsInfo.BRBranchName] = false;
                    }
                }

                if (counter == branchs.Count)
                    newRow["RowSelection"] = true;
                else
                    newRow["RowSelection"] = false;
                dt.Rows.Add(newRow);

            }

            if (!hasFoundPermissionsForTheCurrentBranch)
            {
                BRBranchsInfo branch = branchs.FirstOrDefault(item => item.BRBranchID == currentBranchID);
                if (branch != null)
                {
                    //if the current user has not been set permisison on modules and reports of by the branch he belongs
                    List<ADDataViewPermissionsInfo> foundCollection = FindDataViewPermissionsByUserIDAndBranchIDAndDataViewPermissionType(userID, branch.BRBranchID, dataViewPermissionType);
                    if (foundCollection == null || foundCollection.Count == 0)
                    {
                        foreach (DataRow row in dt.Rows)
                        {
                            row[branch.BRBranchID.ToString() + branch.BRBranchName] = true;
                        }
                    }
                }
            }

            return dt;
        }

        /// <summary>
        /// Get data view permission by userID, branchID and STModuleOrReportID
        /// </summary>
        /// <param name="userID">UserID</param>
        /// <param name="branchID">BranchID</param>
        /// <param name="moduleOrReportID">ModuleOrReportID</param>
        /// <returns>Data view permission</returns>
        public ADDataViewPermissionsInfo GetDataViewPermissionsByUserIDAndBranchIDAndSTModuleOrReportIDAndDataViewPermissionType(int userID, int branchID, int moduleOrReportID, string dataViewPermissionType)
        {
            DataSet ds = dal.GetDataSet("ADDataViewPermissions_GetDataViewPermissionsByUserIDAndBranchIDAndSTModuleOrReportIDAndDataViewPermissionType", userID, branchID, moduleOrReportID, dataViewPermissionType);
            ADDataViewPermissionsInfo dataViewPermission = null;
            if (ds.Tables[0].Rows.Count > 0)
            {
                dataViewPermission = (ADDataViewPermissionsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }
            return dataViewPermission;
        }

        /// <summary>
        /// Find data view permission by UserID and branchID and DataViewPermissionType
        /// </summary>
        /// <param name="userID">UserID</param>
        /// <param name="branchID">BranchID</param>
        /// <param name="dataViewPermissionType">DataViewPermissionType</param>
        /// <returns>Return a collection of data view permissions. The collection may contain DELETED records</returns>
        public List<ADDataViewPermissionsInfo> FindDataViewPermissionsByUserIDAndBranchIDAndDataViewPermissionType(int userID, int branchID, string dataViewPermissionType)
        {
            DataSet ds = dal.GetDataSet("ADDataViewPermissions_FindDataViewPermissionsByUserIDAndBranchIDAndDataViewPermissionType", userID, branchID, dataViewPermissionType);
            List<ADDataViewPermissionsInfo> customerList = new List<ADDataViewPermissionsInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ADDataViewPermissionsInfo dataViewPermission = (ADDataViewPermissionsInfo)GetObjectFromDataRow(dr);
                    customerList.Add(dataViewPermission);
                }
            }
            return customerList;
        }

        //NUThao [ADD] [10/16/2014] [DB centre] [Report Permission], START
        /// <summary>
        /// Get report mames by UserID 
        /// </summary>
        /// <param name="userID">UserID</param>
        /// <returns></returns>
        public List<ADDataViewPermissionsInfo> GetReportNamesByUserID(int userID)
        {
            DataSet ds = dal.GetDataSet("ADDataViewPermissions_GetReportNamesByUserID", userID);
            List<ADDataViewPermissionsInfo> customerList = new List<ADDataViewPermissionsInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ADDataViewPermissionsInfo dataViewPermission = (ADDataViewPermissionsInfo)GetObjectFromDataRow(dr);
                    customerList.Add(dataViewPermission);
                }
            }
            return customerList;
        }
        //NUThao [ADD] [10/16/2014] [DB centre] [Report Permission], START

    }
    #endregion
}