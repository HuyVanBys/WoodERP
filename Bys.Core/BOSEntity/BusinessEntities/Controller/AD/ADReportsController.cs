using BOSCommon;
using BOSCommon.Constants;
using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace BOSERP
{
    #region ADReports
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ADReportsController
    //Created Date:Thursday, May 13, 2010
    //-----------------------------------------------------------

    public class ADReportsController : BaseBusinessController
    {
        public ADReportsController()
        {
            dal = new DALBaseProvider("ADReports", typeof(ADReportsInfo));
        }

        public DataSet GetReportsByType(String reportType)
        {
            DataSet ds = dal.GetDataSet("ADReports_GetReportsByType", reportType);
            return ds;
        }

        public List<ARSaleReturnItemsInfo> GetSaleReturnItemList(int branchID, string invoiceNo, string saleOrderNo, int? objectID, string objectType, DateTime? dateFrom, DateTime? dateTo)
        {
            List<ARSaleReturnItemsInfo> saleReturnItemList = new List<ARSaleReturnItemsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetSaleReturnList", branchID, invoiceNo, saleOrderNo, objectID, objectType, dateFrom, dateTo);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ARSaleReturnItemsController objSaleReturnItemsController = new ARSaleReturnItemsController();
                //List<int> cancelVoucherIDList = new List<int>();
                List<int> saleReturnIDList = new List<int>();
                int rowNumber = 0;
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    //ARSaleReturnItemsInfo objSaleReturnItemsInfo = (ARSaleReturnItemsInfo)objSaleReturnItemsController.GetObjectFromDataRow(dr);
                    //saleReturnItemList.Add(objSaleReturnItemsInfo);

                    ARSaleReturnItemsInfo objSaleReturnItemsInfo = (ARSaleReturnItemsInfo)objSaleReturnItemsController.GetObjectFromDataRow(dr);
                    bool isExistSaleReturnID = saleReturnIDList.Exists(e => e == objSaleReturnItemsInfo.FK_ARSaleReturnID);
                    if (!isExistSaleReturnID)
                    {
                        saleReturnIDList.Add(objSaleReturnItemsInfo.FK_ARSaleReturnID);
                        rowNumber += 1;
                        ARSaleReturnItemsInfo item = new ARSaleReturnItemsInfo();
                        item.ACObjectName = objSaleReturnItemsInfo.ACObjectName;
                        item.ARSaleReturnNo = objSaleReturnItemsInfo.ARSaleReturnNo;
                        item.ARSaleReturnDate = objSaleReturnItemsInfo.ARSaleReturnDate;
                        item.HREmployeeName = objSaleReturnItemsInfo.HREmployeeName;
                        item.ARInvoiceNo = objSaleReturnItemsInfo.ARInvoiceNo;
                        item.ARInvoiceDate = objSaleReturnItemsInfo.ARInvoiceDate;
                        item.ARInvoiceReference = objSaleReturnItemsInfo.ARInvoiceReference;
                        item.ARSaleOrderNo = objSaleReturnItemsInfo.ARSaleOrderNo;
                        item.ARSaleOrderDateString = objSaleReturnItemsInfo.ARSaleOrderDateString;
                        item.ARSaleOrderDate = objSaleReturnItemsInfo.ARSaleOrderDate;
                        item.ARSaleReturnItemTaxAmount = objSaleReturnItemsInfo.ARSaleReturnTaxAmount;
                        item.ARSaleReturnItemDiscountAmount = objSaleReturnItemsInfo.ARSaleReturnDiscountFix;
                        item.ARSaleReturnItemTotalAmount = objSaleReturnItemsInfo.ARSaleReturnTotalAmount;
                        item.ARSaleReturnItemProductTaxPercent = objSaleReturnItemsInfo.ARSaleReturnTaxPercent;
                        item.ARSaleReturnItemProductDiscount = objSaleReturnItemsInfo.ARSaleReturnDiscountPerCent;

                        saleReturnItemList.Add(item);
                    }
                    objSaleReturnItemsInfo.ACObjectName = string.Empty;
                    objSaleReturnItemsInfo.ARSaleReturnNo = string.Empty;
                    objSaleReturnItemsInfo.ARSaleReturnDate = DateTime.MaxValue;
                    objSaleReturnItemsInfo.HREmployeeName = string.Empty;
                    objSaleReturnItemsInfo.ARInvoiceNo = string.Empty;
                    objSaleReturnItemsInfo.ARInvoiceDate = DateTime.MaxValue;
                    objSaleReturnItemsInfo.ARInvoiceReference = string.Empty;
                    objSaleReturnItemsInfo.ARSaleOrderNo = string.Empty;
                    objSaleReturnItemsInfo.ARSaleOrderDateString = string.Empty;
                    objSaleReturnItemsInfo.ARSaleOrderDate = DateTime.MaxValue;
                    saleReturnItemList.Add(objSaleReturnItemsInfo);
                }
            }
            return saleReturnItemList;
        }

        /// <summary>
        /// Get the report by report type and report permission 
        /// </summary>
        /// <param name="reportType">Type of the report</param>
        /// <param name="userGroupID">User group id</param>
        /// <param name="reportPermissionType">Report permission type</param>
        /// <returns>Data of the report</returns>
        public DataSet GetReportByReportTypeAndReportPermission(string reportType, int userGroupID, byte reportPermissionType)
        {
            return dal.GetDataSet("ADReports_GetReportByReportTypeAndReportPermission", reportType, userGroupID, reportPermissionType);
        }

        /// <summary>
        /// Get sale order by some criteria
        /// </summary>
        /// <param name="sellerID">ID of seller</param>
        /// <param name="branchID">ID of branch</param>
        /// <param name="customerID">ID of customer</param>
        /// <param name="saleOrderDateFrom">Sale order from date</param>
        /// <param name="saleOrderDateTo">Sale order to date</param>    
        /// <param name="employeeID">Employee id</param>
        /// <returns>The sale order list</returns>
        public List<ARSaleOrdersInfo> GetSaleOrderBySomeCriteria(int? sellerID, int? branchID, int? objectID, string objectType, DateTime? saleOrderDateFrom, DateTime? saleOrderDateTo, int? employeeID)
        {
            List<ARSaleOrdersInfo> saleOrderList = new List<ARSaleOrdersInfo>();
            ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
            DataSet ds = dal.GetDataSet("Report_GetSaleOrderBySomeCriteria", sellerID, branchID, objectID, objectType, saleOrderDateFrom, saleOrderDateTo, employeeID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleOrdersInfo objSaleOrdersInfo = (ARSaleOrdersInfo)objSaleOrdersController.GetObjectFromDataRow(row);
                    saleOrderList.Add(objSaleOrdersInfo);
                }
            }
            return saleOrderList;
        }

        public List<AAColumnAliasInfo> GetByTableNameWithNumberIntOrder(string tableName)
        {
            List<AAColumnAliasInfo> ColumnAliasList = new List<AAColumnAliasInfo>();
            AAColumnAliasController objColumnAliasController = new AAColumnAliasController();
            DataSet ds = dal.GetDataSet("AAColumnAlias_GetByTableNameWithNumberIntOrder", tableName);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    AAColumnAliasInfo objSaleOrdersInfo = (AAColumnAliasInfo)objColumnAliasController.GetObjectFromDataRow(row);
                    ColumnAliasList.Add(objSaleOrdersInfo);
                }
            }
            ds.Dispose();
            return ColumnAliasList;
        }
        /// <summary>
        /// Get invoice list based on some criteria.
        /// </summary>
        /// <param name="branchID">ID of branch</param>
        /// <param name="customerID">ID of customer</param>
        /// <param name="invoiceType">Type of invoice</param>
        /// <param name="invoiceDateFrom">Invoice from date</param>
        /// <param name="invoiceDateTo">Invoice to date</param>
        /// <param name="employeeID">Employee id</param>
        /// <returns>Invoice list</returns>
        public List<ARInvoicesInfo> GetInvoicesBySomeCriteria(int? branchID, int? objectID, string objectType, string invoiceType, DateTime? invoiceDateFrom, DateTime? invoiceDateTo, int? employeeID)
        {
            List<ARInvoicesInfo> invoices = new List<ARInvoicesInfo>();
            ARInvoicesController objInvoicesController = new ARInvoicesController();
            DataSet ds = dal.GetDataSet("Report_GetInvoicesBySomeCriteria", branchID, objectID, objectType, invoiceType, invoiceDateFrom, invoiceDateTo, employeeID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARInvoicesInfo objInvoicesInfo = (ARInvoicesInfo)objInvoicesController.GetObjectFromDataRow(row);

                    //objInvoicesInfo.ARInvoiceBalanceDue = objInvoicesInfo.ARInvoiceTotalAmount - objInvoicesInfo.ARInvoiceDepositBalance
                    //        - objInvoicesInfo.ARInvoiceReturnAmount - objInvoicesInfo.ARInvoicePaymentAmount
                    //        - objInvoicesInfo.CustomerRepaidByOwingExchangeMethod
                    //        + (objInvoicesInfo.ARCustomerRepaid + objInvoicesInfo.CustomerPaymentByOwingExchangeMethod);

                    objInvoicesInfo.ARInvoicePaymentAmount += objInvoicesInfo.CustomerRepaidByOwingExchangeMethod;
                    objInvoicesInfo.ARCustomerRepaid += objInvoicesInfo.CustomerPaymentByOwingExchangeMethod;

                    invoices.Add(objInvoicesInfo);
                }
            }
            return invoices;
        }
        //NUThao [ADD] [10/16/2014] [DB centre] [Report Permission], START
        /// <summary>
        /// Get invoice list based on some criteria.
        /// </summary>
        /// <param name="branchID">ID of branch</param>
        /// <param name="customerID">ID of customer</param>
        /// <param name="invoiceType">Type of invoice</param>
        /// <param name="invoiceDateFrom">Invoice from date</param>
        /// <param name="invoiceDateTo">Invoice to date</param>
        /// <param name="employeeID">Employee id</param>
        /// <returns>Invoice list</returns>
        public List<ARInvoicesInfo> GetInvoicesBySomeCriteriaAndBranchNosList(string branchNos, int? customerID, string invoiceType, DateTime? invoiceDateFrom, DateTime? invoiceDateTo, int? employeeID)
        {
            List<ARInvoicesInfo> invoices = new List<ARInvoicesInfo>();
            ARInvoicesController objInvoicesController = new ARInvoicesController();
            DataSet ds = dal.GetDataSet("Report_GetInvoicesBySomeCriteriaAndBranchNosList", branchNos, customerID, invoiceType, invoiceDateFrom, invoiceDateTo, employeeID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARInvoicesInfo objInvoicesInfo = (ARInvoicesInfo)objInvoicesController.GetObjectFromDataRow(row);

                    //objInvoicesInfo.ARInvoiceBalanceDue = objInvoicesInfo.ARInvoiceTotalAmount - objInvoicesInfo.ARInvoiceDepositBalance
                    //        - objInvoicesInfo.ARInvoiceReturnAmount - objInvoicesInfo.ARInvoicePaymentAmount
                    //        - objInvoicesInfo.CustomerRepaidByOwingExchangeMethod
                    //        + (objInvoicesInfo.ARCustomerRepaid + objInvoicesInfo.CustomerPaymentByOwingExchangeMethod);

                    objInvoicesInfo.ARInvoicePaymentAmount += objInvoicesInfo.CustomerRepaidByOwingExchangeMethod;
                    objInvoicesInfo.ARCustomerRepaid += objInvoicesInfo.CustomerPaymentByOwingExchangeMethod;

                    invoices.Add(objInvoicesInfo);
                }
            }
            return invoices;
        }
        //NUThao [ADD] [10/16/2014] [DB centre] [Report Permission], END
        /// <summary>
        ///  Get invoice items based on some criteria
        /// </summary>
        /// <param name="dateFrom">The invoice date from</param>
        /// <param name="dateTo">The invoice date to</param>
        /// /// <param name="locationID">The location id</param>
        /// <param name="branchID">The branch id</param>        
        /// <param name="productGroupID">The product group id</param>        
        /// <returns>The data table</returns>
        public DataTable GetInvoiceItemsByMonthAndSomeCriteria(DateTime? dateFrom, DateTime? dateTo, int? locationID, int? branchID, int? productGroupID)
        {
            DataSet ds = dal.GetDataSet("Report_GetInvoiceItemsByMonthAndSomeCriteria", dateFrom, dateTo, locationID, branchID, productGroupID);
            return ds.Tables[0];
        }

        //NUThao [ADD] [10/16/2014] [DB centre] [Report Permission], START
        /// <summary>
        ///  Get invoice items based on some criteria
        /// </summary>
        /// <param name="dateFrom">The invoice date from</param>
        /// <param name="dateTo">The invoice date to</param>
        /// /// <param name="locationID">The location id</param>
        /// <param name="branchID">The branch id</param>        
        /// <param name="productGroupID">The product group id</param>        
        /// <returns>The data table</returns>
        public DataTable GetInvoiceItemsByMonthAndBranchNoListAndSomeCriteria(DateTime? dateFrom, DateTime? dateTo, int? locationID, string branchNos, int? productGroupID)
        {
            DataSet ds = dal.GetDataSet("Report_GetInvoiceItemsByMonthAndBranchNosListAndSomeCriteria", dateFrom, dateTo, locationID, branchNos, productGroupID);
            return ds.Tables[0];
        }
        //NUThao [ADD] [10/16/2014] [DB centre] [Report Permission], END
        /// <summary>
        ///  Get invoice items based on year and some criteria
        /// </summary>
        /// <param name="dateFrom">The invoice date from</param>
        /// <param name="dateTo">The invoice date to</param>
        /// /// <param name="locationID">The location id</param>
        /// <param name="branchID">The branch id</param>
        /// <param name="productGroupID">The product group id</param>        
        /// <returns>The data table</returns>
        public DataTable GetInvoiceItemsByYearAndSomeCriteria(DateTime? dateFrom, DateTime? dateTo, int? locationID, int? branchID, int? productGroupID)
        {
            DataSet ds = dal.GetDataSet("Report_GetInvoiceItemsByYearAndSomeCriteria", dateFrom, dateTo, locationID, branchID, productGroupID);
            return ds.Tables[0];
        }

        //NUThao [ADD] [10/16/2014] [DB centre] [Report Permission], START
        /// <summary>
        ///  Get invoice items based on year and some criteria
        /// </summary>
        /// <param name="dateFrom">The invoice date from</param>
        /// <param name="dateTo">The invoice date to</param>
        /// /// <param name="locationID">The location id</param>
        /// <param name="branchID">The branch id</param>
        /// <param name="productGroupID">The product group id</param>        
        /// <returns>The data table</returns>
        public DataTable GetInvoiceItemsByYearAndBranchNoListAndSomeCriteria(DateTime? dateFrom, DateTime? dateTo, int? locationID, string branchNos, int? productGroupID)
        {
            DataSet ds = dal.GetDataSet("Report_GetInvoiceItemsByYearAndBranchNoListAndSomeCriteria", dateFrom, dateTo, locationID, branchNos, productGroupID);
            return ds.Tables[0];
        }
        //NUThao [ADD] [10/16/2014] [DB centre] [Report Permission], END

        /// <summary>
        /// Get the list of deposits based on some criteria
        /// </summary>
        /// <param name="saleOrderNo">Sale order no</param>
        /// <param name="customerID">Customer id</param>
        /// <param name="branchID">Branch id</param>        
        /// <param name="documentPaymentDateFrom">Document payment date from</param>
        /// <param name="documentPaymentDateTo">Document payment date to</param>
        /// <param name="employeeID">Employee id</param>
        /// <returns>The document payment list</returns>
        public List<ARDocumentPaymentsInfo> GetDepositList(string saleOrderNo, int? objectID, string objectType, int? branchID, DateTime documentPaymentDateFrom, DateTime documentPaymentDateTo, int? employeeID)
        {
            List<ARDocumentPaymentsInfo> documentPayments = new List<ARDocumentPaymentsInfo>();
            ARDocumentPaymentsController objDocumentPaymentsController = new ARDocumentPaymentsController();
            DataSet ds = dal.GetDataSet("Report_GetDepositList", saleOrderNo, objectID, objectType, branchID, documentPaymentDateFrom, documentPaymentDateTo, employeeID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARDocumentPaymentsInfo objDocumentPaymentsInfo = (ARDocumentPaymentsInfo)objDocumentPaymentsController.GetObjectFromDataRow(row);
                    documentPayments.Add(objDocumentPaymentsInfo);
                }
            }
            return documentPayments;
        }


        /// <summary>
        /// Get purchase orders by some criteria
        /// </summary>
        /// <param name="supplierID">ID of supplier</param>
        /// <param name="purchaseOrderTypeCombo">Purchase order type</param>
        /// <param name="purchaseOrderDateFrom">Purchase order from date</param>
        /// <param name="purchaseOrderDateTo">Purchase order to date</param>
        /// <returns></returns>
        public DataSet GetPurchaseOrdersBySomeCriteria(int? supplierID, string purchaseOrderTypeCombo, DateTime purchaseOrderDateFrom, DateTime purchaseOrderDateTo)
        {
            return dal.GetDataSet("Report_GetPurchaseOrdersBySomeCriteria", supplierID, purchaseOrderTypeCombo, purchaseOrderDateFrom, purchaseOrderDateTo);
        }


        /// <summary>
        /// Get purchase orders by some criteria
        /// </summary>
        /// <param name="supplierID">ID of supplier</param>
        /// <param name="purchaseOrderTypeCombo">Purchase order type</param>
        /// <param name="purchaseOrderDateFrom">Purchase order from date</param>
        /// <param name="purchaseOrderDateTo">Purchase order to date</param>
        /// <returns></returns>
        public DataSet GetPurchaseOrdersBySomeCriteriaAndBranchNos(int? supplierID, string purchaseOrderTypeCombo, DateTime purchaseOrderDateFrom, DateTime purchaseOrderDateTo, string branchList)
        {
            return dal.GetDataSet("Report_GetPurchaseOrdersBySomeCriteriaAndBranchNos", supplierID, purchaseOrderTypeCombo, purchaseOrderDateFrom, purchaseOrderDateTo, branchList);
        }
        //public List<APPurchaseOrdersInfo> GetPurchaseOrdersBySomeCriteriaAndBranchNos(
        //                                                                int? supplierID,
        //                                                                string purchaseOrderTypeCombo,
        //                                                                DateTime purchaseOrderDateFrom,
        //                                                                DateTime purchaseOrderDateTo,
        //                                                                string branchList)
        //{
        //    DataSet ds = dal.GetDataSet("Report_GetPurchaseOrdersBySomeCriteriaAndBranchNos",
        //                                    supplierID,
        //                                    purchaseOrderTypeCombo,
        //                                    purchaseOrderDateFrom,
        //                                    purchaseOrderDateTo,
        //                                    branchList);

        //    APPurchaseOrdersController objPurchaseOrdersController = new APPurchaseOrdersController();
        //    List<APPurchaseOrdersInfo> purchaseOrderList = new List<APPurchaseOrdersInfo>();
        //    if (ds.Tables[0].Rows.Count > 0)
        //    {
        //        foreach (DataRow row in ds.Tables[0].Rows)
        //        {
        //            APPurchaseOrdersInfo objPurchaseOrdersInfo = (APPurchaseOrdersInfo)objPurchaseOrdersController.GetObjectFromDataRow(row);
        //            purchaseOrderList.Add(objPurchaseOrdersInfo);
        //        }
        //    }
        //    return purchaseOrderList;
        //}                   

        /// <summary>
        /// Get purchase order items by some criteria
        /// </summary>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Department id</param>
        /// <param name="departmentID">Department id</param>
        /// <param name="productGroupID">ID of product group</param>
        /// <param name="supplierID">Supplier id</param>        
        /// <param name="purchaseOrderStatus">Purchase order status</param>
        /// <param name="deliveryFromDate">Purchase order delivery date from</param>
        /// <param name="deliveryToDate">Purchase order delivery date to</param>                
        /// <returns>List of the purchase order items</returns>
        public List<APPurchaseOrderItemsInfo> GetPurchaseOrderItemsBySomeCriteria(
                                                                        int? locationID,
                                                                        int? branchID,
                                                                        int? departmentID,
                                                                        int? productGroupID,
                                                                        int? objectID,
                                                                        string objectType,
                                                                        string purchaseOrderStatus,
                                                                        DateTime deliveryFromDate,
                                                                        DateTime deliveryToDate)
        {
            DataSet ds = dal.GetDataSet("Report_GetPurchaseOrderItemsBySomeCriteria",
                                            locationID,
                                            branchID,
                                            departmentID,
                                            productGroupID,
                                            objectID,
                                            objectType,
                                            purchaseOrderStatus,
                                            deliveryFromDate,
                                            deliveryToDate);

            APPurchaseOrderItemsController objPurchaseOrderItemsController = new APPurchaseOrderItemsController();
            List<APPurchaseOrderItemsInfo> purchaseOrderItemList = new List<APPurchaseOrderItemsInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APPurchaseOrderItemsInfo objPurchaseOrderItemsInfo = (APPurchaseOrderItemsInfo)objPurchaseOrderItemsController.GetObjectFromDataRow(row);
                    purchaseOrderItemList.Add(objPurchaseOrderItemsInfo);
                }
            }
            return purchaseOrderItemList;
        }

        /// <summary>
        /// Get proposal items by some criteria
        /// </summary>
        /// <param name="departmentID">Department id</param>        
        /// <param name="productGroupID">ID of product group</param>
        /// <param name="supplierID">Supplier id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="status">Proposal item status</param>
        /// <param name="proposalDateFrom">proposal date from</param>
        /// <param name="proposalDateTo">proposal date to</param>
        /// <returns>Data of proposal items</returns>
        public DataSet GetProposalItemsBySomeCriteria(int? departmentID, int? productGroupID, int? objectID, string objectType, int? branchID, string status,
                                DateTime? proposalDateFrom, DateTime? proposalDateTo)
        {
            return dal.GetDataSet("Report_GetProposalItemsBySomeCriteria", departmentID, productGroupID, objectID, objectType, branchID, status,
                                            proposalDateFrom, proposalDateTo);
        }

        /// <summary>
        /// Get suppliers list based on ime criteria
        /// </summary>
        /// <param name="supplierType">Type of supplier</param>
        /// <param name="supplierType">Search supplier by prouduct id</param>
        /// <returns>Data of suppliers</returns>
        public DataSet GetSupplierList(string supplierType, int? productID)
        {
            return dal.GetDataSet("Report_GetSupplierList", supplierType, productID);
        }

        /// <summary>
        /// Get suppliers list based on ime criteria
        /// </summary>
        /// <param name="supplierType">Type of supplier</param>
        /// <param name="supplierType">Search supplier by prouduct id</param>
        /// <returns>Data of suppliers</returns>
        public DataSet GetSupplierListByBranchList(string supplierType, int? productID, string branchNoList)
        {
            return dal.GetDataSet("Report_GetSupplierListByBranchList", supplierType, productID, branchNoList);
        }

        /// <summary>
        /// Get invoice ins by some criteria
        /// </summary>
        /// <param name="supplierID">ID of supplier</param>
        /// <param name="invoiceInDateFrom">Invoice in date from</param>
        /// <param name="invoiceInDateTo">Invoice in date to</param>
        /// <returns>Data of the invoice in items</returns>
        public DataSet GetInvoiceInsBySomeCriteria(int? supplierID, DateTime invoiceInDateFrom, DateTime invoiceInDateTo)
        {
            return dal.GetDataSet("Report_GetInvoiceInsBySomeCriteria", supplierID, invoiceInDateFrom, invoiceInDateTo);
        }
        /// <summary>
        /// Get invoice ins by some criteria
        /// </summary>
        /// <param name="supplierID">ID of supplier</param>
        /// <param name="invoiceInDateFrom">Invoice in date from</param>
        /// <param name="invoiceInDateTo">Invoice in date to</param>
        /// <returns>Data of the invoice in items</returns>
        public DataSet GetInvoiceInsBySomeCriteriaAndBranchNos(int? objectID, string objectType, DateTime invoiceInDateFrom, DateTime invoiceInDateTo, string branchNos)
        {
            return dal.GetDataSet("Report_GetInvoiceInsBySomeCriteriaAndBranchNos", objectID, objectType, invoiceInDateFrom, invoiceInDateTo, branchNos);
        }
        /// <summary>
        /// Get invoice in items in by some criteria
        /// </summary>
        /// <param name="departmentID">Department id</param>
        /// <param name="productGroupID">Product group id</param>
        /// <param name="supplierID">ID of supplier</param>
        /// <param name="productID">Product id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="invoiceInStatus">Invoice status</param>
        /// <param name="invoiceInDateFrom">Invoice in date from</param>
        /// <param name="invoiceInDateTo">Invoice in date to</param>
        /// <returns>The invoice in item list</returns>
        public List<APInvoiceInItemsInfo> GetInvoiceInItemsBySomeCriteria(
                                                                int? departmentID,
                                                                int? productGroupID,
                                                                int? objectID,
                                                                string objectType,
                                                                int? productID,
                                                                int? branchID,
                                                                string invoiceInStatus,
                                                                DateTime invoiceInDateFrom,
                                                                DateTime invoiceInDateTo)
        {
            List<APInvoiceInItemsInfo> invoiceInItemList = new List<APInvoiceInItemsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetInvoiceInItemsBySomeCriteria",
                                        departmentID,
                                        productGroupID,
                                        objectID,
                                        objectType,
                                        productID,
                                        branchID,
                                        invoiceInStatus,
                                        invoiceInDateFrom,
                                        invoiceInDateTo);
            if (ds.Tables[0].Rows.Count > 0)
            {
                APInvoiceInItemsController objInvoiceInItemsController = new APInvoiceInItemsController();
                List<string> invoiceInNoList = new List<string>();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APInvoiceInItemsInfo objInvoiceInItemsInfo = (APInvoiceInItemsInfo)objInvoiceInItemsController.GetObjectFromDataRow(row);
                    bool isExistInvoiceInNo = invoiceInNoList.Exists(e => e == objInvoiceInItemsInfo.APInvoiceInNo);
                    if (!isExistInvoiceInNo)
                    {
                        invoiceInNoList.Add(objInvoiceInItemsInfo.APInvoiceInNo);
                    }
                    else
                    {
                        objInvoiceInItemsInfo.APInvoiceInNo = string.Empty;
                        objInvoiceInItemsInfo.APInvoiceInStatusDisplayText = string.Empty;
                        objInvoiceInItemsInfo.APInvoiceInPackNo = string.Empty;
                        objInvoiceInItemsInfo.APInvoiceInComment = string.Empty;
                        objInvoiceInItemsInfo.APInvoiceInDate = DateTime.MaxValue;
                        objInvoiceInItemsInfo.APInvoiceInValidateDate = DateTime.MaxValue;
                        objInvoiceInItemsInfo.APSupplierName = string.Empty;
                        objInvoiceInItemsInfo.GECurrencyName = string.Empty;
                        objInvoiceInItemsInfo.APInvoiceInExchangeRate = 0;
                        objInvoiceInItemsInfo.APInvoiceInTotalCost = 0;
                        objInvoiceInItemsInfo.APInvoiceInDepositBalance = 0;
                        objInvoiceInItemsInfo.APInvoiceInBalanceDue = 0;
                        objInvoiceInItemsInfo.APInvoiceInPaymentAmount = 0;
                    }
                    invoiceInItemList.Add(objInvoiceInItemsInfo);
                }
            }
            return invoiceInItemList;
        }

        /// <summary>
        /// Get purchase summary of all suppliers based on some criteria
        /// </summary>
        /// <param name="dateFrom">Date the result is filtered from</param>
        /// <param name="dateTo">Date the result is filtered to</param>
        /// <returns>List of suppliers including purchase information</returns>
        public List<APSuppliersInfo> GetSupplierPurchaseSummary(DateTime? dateFrom, DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("Report_GetSupplierPurchaseSummary", dateFrom, dateTo);
            List<APSuppliersInfo> suppliers = new List<APSuppliersInfo>();
            if (ds.Tables.Count > 0)
            {
                APSuppliersController objSuppliersController = new APSuppliersController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APSuppliersInfo objSuppliersInfo = (APSuppliersInfo)objSuppliersController.GetObjectFromDataRow(row);
                    suppliers.Add(objSuppliersInfo);
                }
            }
            return suppliers;
        }
        /// <summary>
        /// Get purchase summary of all suppliers based on some criteria
        /// </summary>
        /// <param name="dateFrom">Date the result is filtered from</param>
        /// <param name="dateTo">Date the result is filtered to</param>
        /// <returns>List of suppliers including purchase information</returns>
        public List<APSuppliersInfo> GetSupplierPurchaseSummaryByBranchNos(DateTime? dateFrom, DateTime? dateTo, string BranchNos, string SupplierNoList)
        {
            DataSet ds = dal.GetDataSet("Report_GetSupplierPurchaseSummaryByBranchNos", dateFrom, dateTo, BranchNos, SupplierNoList);
            List<APSuppliersInfo> suppliers = new List<APSuppliersInfo>();
            if (ds.Tables.Count > 0)
            {
                APSuppliersController objSuppliersController = new APSuppliersController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APSuppliersInfo objSuppliersInfo = (APSuppliersInfo)objSuppliersController.GetObjectFromDataRow(row);
                    suppliers.Add(objSuppliersInfo);
                }
            }
            return suppliers;
        }

        /// <summary>
        /// Get purchase order item by purchase order id
        /// </summary>
        /// <param name="purchaseOrderID">Purchase order id</param>
        /// <returns>Data of purchase order</returns>
        public DataSet GetPurchaseOrderItemByPurchaseOrderID(int purchaseOrderID)
        {
            DataSet ds = dal.GetDataSet("Report_GetPurchaseOrderItemByPurchaseOrderID", purchaseOrderID);
            return ds;
        }

        /// <summary>
        /// Get cancel voucher item by voucher id
        /// </summary>
        /// <param name="cancelVoucherID">Cancel voucher id</param>
        /// <returns>Data of cancel voucher item</returns>
        public DataSet GetCancelVoucherItemByCacelVoucherID(int cancelVoucherID)
        {
            DataSet ds = dal.GetDataSet("Report_GetCancelVoucherItemByCancelVoucherID", cancelVoucherID);
            return ds;
        }

        public DataSet GetCancelSaleForecastItemByCacelSaleForecastID(int cancelSaleForecastID)
        {
            DataSet ds = dal.GetDataSet("Report_GetCancelSaleForecastItemByCancelSaleForecastID", cancelSaleForecastID);
            return ds;
        }


        /// <summary>
        /// Get sale order item by sale order id
        /// </summary>
        /// <param name="saleOrderID">ID of sale order</param>
        /// <returns>Data of sale order items</returns>
        public DataSet GetSaleOrderItemBySaleOrderID(int saleOrderID)
        {
            return dal.GetDataSet("Report_GetSaleOrderItemBySaleOrderID", saleOrderID);
        }


        /// <summary>
        /// Get sale order item list based on some criteria
        /// </summary>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="customerID">Customer id</param>
        /// <param name="productID">Product id</param>        
        /// <param name="dateFrom">Date the result is filtered from</param>
        /// <param name="dateTo">Date the result is filtered to</param>
        /// <param name="employeeID">Employee id</param>
        /// <returns>List of the sale order item</returns>
        public List<ARSaleOrderItemsInfo> GetSaleOrderItemList(
                                                        int? locationID,
                                                        int? branchID,
                                                        int? objectID,
                                                        string objectType,
                                                        int? productID,
                                                        DateTime? dateFrom,
                                                        DateTime? dateTo,
                                                        int? employeeID)
        {
            ARSaleOrderItemsController objSaleOrderItemsController = new ARSaleOrderItemsController();
            DataSet ds = dal.GetDataSet("Report_GetSaleOrderItemList",
                                        locationID,
                                        branchID,
                                        objectID,
                                        objectType,
                                        productID,
                                        dateFrom,
                                        dateTo,
                                        employeeID);
            return (List<ARSaleOrderItemsInfo>)objSaleOrderItemsController.GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get cancel voucher item list
        /// </summary>
        /// <param name="branchID">Branch id</param>        
        /// <param name="saleOrderNo">Sale order no</param>
        /// <param name="customerID">The customer id</param>
        /// <param name="employeeID">Employee id</param>
        /// <param name="dateFrom">Search from date</param>
        /// <param name="dateTo">Search to date</param>
        /// <returns>The cancel voucher item list</returns>
        public List<ARCancelVoucherItemsInfo> GetCancelVoucherItemList(int branchID, string saleOrderNo, int? objectID, string objectType, DateTime? dateFrom, DateTime? dateTo)
        {
            List<ARCancelVoucherItemsInfo> cancelVoucherItemList = new List<ARCancelVoucherItemsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetCancelVoucherList", branchID, saleOrderNo, objectID, objectType, dateFrom, dateTo);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ARCancelVoucherItemsController objCancelVoucherItemsController = new ARCancelVoucherItemsController();
                List<int> cancelVoucherIDList = new List<int>();
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ARCancelVoucherItemsInfo objCancelVoucherItemsInfo = (ARCancelVoucherItemsInfo)objCancelVoucherItemsController.GetObjectFromDataRow(dr);
                    bool isExistCancelVoucherID = cancelVoucherIDList.Exists(e => e == objCancelVoucherItemsInfo.FK_ARCancelVoucherID);
                    if (!isExistCancelVoucherID)
                    {
                        cancelVoucherIDList.Add(objCancelVoucherItemsInfo.FK_ARCancelVoucherID);
                    }
                    else
                    {
                        objCancelVoucherItemsInfo.ARCancelVoucherNo = string.Empty;
                        objCancelVoucherItemsInfo.ARCancelVoucherDate = DateTime.MaxValue;
                        objCancelVoucherItemsInfo.ACObjectName = string.Empty;
                        objCancelVoucherItemsInfo.ARSellerName = string.Empty;
                        objCancelVoucherItemsInfo.HREmployeeName = string.Empty;
                        objCancelVoucherItemsInfo.ARSaleOrderNo = string.Empty;
                        objCancelVoucherItemsInfo.ARSaleOrderDate = DateTime.MaxValue;
                        objCancelVoucherItemsInfo.ARCancelVoucherTotalAmount = 0;
                    }
                    cancelVoucherItemList.Add(objCancelVoucherItemsInfo);
                }
            }
            return cancelVoucherItemList;
        }

        /// <summary>
        /// Get invoice item list based on some criteria
        /// </summary>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="customerID">Customer id</param>   
        /// <param name="productID">Product id</param>
        /// <param name="dateFrom">Date the result is filtered from</param>
        /// <param name="dateTo">Date the result is filtered to</param>
        /// <param name="invoiceType">Type of the invoice</param>
        /// <param name="employeeID">Employee id</param>
        /// <returns>List of the invoice item</returns>
        public List<ARInvoiceItemsInfo> GetInvoiceItemsList(
                                                    int? locationID,
                                                    int? branchID,
                                                    int? objectID,
                                                    string objectType,
                                                    int? productID,
                                                    DateTime? dateFrom,
                                                    DateTime? dateTo,
                                                    string invoiceType,
                                                    int? employeeID,
                                                    string invoiceStatus)
        {
            List<ARInvoiceItemsInfo> invoiceItemList = new List<ARInvoiceItemsInfo>();
            ARInvoiceItemsController objInvoiceItemsController = new ARInvoiceItemsController();
            DataSet ds = dal.GetDataSet("Report_GetInvoiceItemsList",
                                        locationID,
                                        branchID,
                                        objectID,
                                        objectType,
                                        productID,
                                        dateFrom,
                                        dateTo,
                                        invoiceType,
                                        employeeID,
                                        invoiceStatus);
            if (ds.Tables[0].Rows.Count > 0)
            {
                List<int> invoiceIDList = new List<int>();
                //int rowNumber = 0;
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARInvoiceItemsInfo objInvoiceItemsInfo = (ARInvoiceItemsInfo)objInvoiceItemsController.GetObjectFromDataRow(row);
                    //bool isExistInvoiceID = invoiceIDList.Exists(e => e == objInvoiceItemsInfo.FK_ARInvoiceID);
                    //if (!isExistInvoiceID)
                    //{
                    //    rowNumber += 1;                        
                    //    objInvoiceItemsInfo.ARInvoiceRowNumber = rowNumber.ToString("00");                        

                    //    //objInvoiceItemsInfo.ARInvoiceBalanceDue = objInvoiceItemsInfo.ARInvoiceTotalAmount - objInvoiceItemsInfo.ARInvoiceDepositBalance
                    //    //                - objInvoiceItemsInfo.ARInvoiceReturnAmount - objInvoiceItemsInfo.ARInvoicePaymentAmount
                    //    //                - objInvoiceItemsInfo.CustomerRepaidByOwingExchangeMethod
                    //    //                + (objInvoiceItemsInfo.ARCustomerRepaid + objInvoiceItemsInfo.CustomerPaymentByOwingExchangeMethod);

                    //    objInvoiceItemsInfo.ARInvoicePaymentAmount += objInvoiceItemsInfo.CustomerRepaidByOwingExchangeMethod;
                    //    objInvoiceItemsInfo.ARCustomerRepaid += objInvoiceItemsInfo.CustomerPaymentByOwingExchangeMethod;

                    //    invoiceIDList.Add(objInvoiceItemsInfo.FK_ARInvoiceID);
                    //}
                    //else
                    //{
                    //    objInvoiceItemsInfo.ARInvoiceNo = string.Empty;
                    //    objInvoiceItemsInfo.ARInvoiceStatusDisplayedText = string.Empty;
                    //    objInvoiceItemsInfo.ARCustomerContactAddressLine3 = string.Empty;
                    //    objInvoiceItemsInfo.ARSellerName = string.Empty;
                    //    objInvoiceItemsInfo.ARCustomerName = string.Empty;                        
                    //    objInvoiceItemsInfo.ARInvoiceTotalAmount = 0;
                    //    objInvoiceItemsInfo.ARInvoiceDepositBalance = 0;
                    //    objInvoiceItemsInfo.ARInvoiceBalanceDue = 0;
                    //    objInvoiceItemsInfo.ARInvoicePaymentAmount = 0;
                    //    objInvoiceItemsInfo.ARInvoiceReturnAmount = 0;
                    //    objInvoiceItemsInfo.CustomerPaymentByOwingExchangeMethod = 0;
                    //    objInvoiceItemsInfo.CustomerRepaidByOwingExchangeMethod = 0;
                    //    objInvoiceItemsInfo.ARInvoiceDate = DateTime.MaxValue;
                    //}
                    invoiceItemList.Add(objInvoiceItemsInfo);
                }
            }

            foreach (var item in invoiceItemList)
            {
                if (item.ARInvoiceTotalAmount > 0)
                {
                    decimal totalUnitCost = 0;
                    try
                    {
                        totalUnitCost = invoiceItemList.Where(p => p.FK_ARInvoiceID == item.FK_ARInvoiceID).Select(s => s.ICProductUnitCost).Sum();
                    }
                    catch (Exception) { }
                    //invoiceItemList.Where(p => p.FK_ARInvoiceID == item.FK_ARInvoiceID).Select(s => s.ICProductUnitCost).Max()
                    item.ICProductGrossProfit = item.ARInvoiceTotalAmount - totalUnitCost;
                }
            }
            return invoiceItemList;
        }

        public List<ICProductsInfo> GetProductUnitCostList(
                                                    int? locationID,
                                                    int? branchID,
                                                    int? customerID,
                                                    int? productID,
                                                    DateTime? dateFrom,
                                                    DateTime? dateTo,
                                                    string invoiceType,
                                                    int? employeeID,
                                                    int? productGroupID,
                                                    int? productDepartmentID,
                                                    int? supplierID)
        {
            List<ICProductsInfo> productList = new List<ICProductsInfo>();
            ICProductsController objProductsController = new ICProductsController();
            DataSet ds = dal.GetDataSet("Report_GetProductUnitCostList",
                                        locationID,
                                        branchID,
                                        customerID,
                                        productID,
                                        dateFrom,
                                        dateTo,
                                        invoiceType,
                                        employeeID,
                                        productGroupID,
                                        productDepartmentID,
                                        supplierID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductsInfo ICProductsInfo = (ICProductsInfo)objProductsController.GetObjectFromDataRow(row);
                    productList.Add(ICProductsInfo);
                }
            }
            return productList;
        }

        //NUThao [ADD] [10/16/2014] [DB centre] [Report Permission], START
        public List<ICProductsInfo> GetProductUnitCostListByBranchList(
                                                    int? locationID,
                                                    string branchNoList,
                                                    int? customerID,
                                                    int? productID,
                                                    DateTime? dateFrom,
                                                    DateTime? dateTo,
                                                    string invoiceType,
                                                    int? employeeID,
                                                    int? productGroupID,
                                                    int? productDepartmentID,
                                                    int? supplierID)
        {
            List<ICProductsInfo> productList = new List<ICProductsInfo>();
            ICProductsController objProductsController = new ICProductsController();
            DataSet ds = dal.GetDataSet("Report_GetProductUnitCostListByBranchList",
                                        locationID,
                                        branchNoList,
                                        customerID,
                                        productID,
                                        dateFrom,
                                        dateTo,
                                        invoiceType,
                                        employeeID,
                                        productGroupID,
                                        productDepartmentID,
                                        supplierID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductsInfo ICProductsInfo = (ICProductsInfo)objProductsController.GetObjectFromDataRow(row);
                    productList.Add(ICProductsInfo);
                }
            }
            return productList;
        }
        //NUThao [ADD] [10/16/2014] [DB centre] [Report Permission], END

        /// <summary>
        /// Get a deposit by its id
        /// </summary>
        /// <param name="depositID">Deposit id</param>
        /// <returns>Deposit object</returns>
        public ARCustomerPaymentsInfo GetDepositByID(int depositID)
        {
            ARCustomerPaymentsController objCustomerPaymentsController = new ARCustomerPaymentsController();
            return (ARCustomerPaymentsInfo)objCustomerPaymentsController.GetDataObject("Report_GetDepositByID", depositID);
        }

        /// <summary>
        /// Get sale return item by sale return id
        /// </summary>
        /// <param name="saleReturnID">Sale return id</param>
        /// <returns>Data of sale return</returns>
        public DataSet GetSaleReturnItemBySaleReturnID(int saleReturnID)
        {
            return dal.GetDataSet("Report_GetSaleReturnItemBySaleReturnID", saleReturnID);
        }

        /// <summary>
        /// Get sale summary of branches
        /// </summary>        
        /// <param name="fromDate">Date the result is searched from</param>
        /// <param name="toDate">Date the result is searched to</param>
        /// <returns>List of branches including their sale summary</returns>
        public DataSet GetBranchSaleSummary(DateTime? fromDate, DateTime? toDate)
        {
            return dal.GetDataSet("Report_GetBranchSaleSummary", fromDate, toDate);
        }

        /// <summary>
        /// Gets the employee sale summary list
        /// </summary>        
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="employeeID">The employee ID</param>
        /// <param name="fromDate">Date the result is searched fro</param>
        /// <param name="toDate">Date the result is searched to</param>
        /// <param name="orderBy"></param>
        /// <returns>List of employees including their sale summary</returns>        
        public List<HREmployeesInfo> GetEmployeeSaleSummaryList(
                                                        int locationID,
                                                        int branchID,
                                                        int? employeeID,
                                                        DateTime? fromDate,
                                                        DateTime? toDate)
        {
            List<HREmployeesInfo> employeeList = new List<HREmployeesInfo>();
            DataSet ds = dal.GetDataSet("Report_GetEmployeeSaleSummary", locationID, branchID, employeeID, fromDate, toDate);
            if (ds.Tables[0].Rows.Count > 0)
            {
                HREmployeesController objEmployeesController = new HREmployeesController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    HREmployeesInfo objEmployeesInfo = (HREmployeesInfo)objEmployeesController.GetObjectFromDataRow(row);
                    employeeList.Add(objEmployeesInfo);
                }
            }
            return employeeList;
        }

        /// <summary>
        /// Get invoice items by invoice id
        /// </summary>
        /// <param name="InvoiceID">Invoice id</param>
        /// <returns>Data of invoice items</returns>
        public DataSet GetInvoiceItemByInvoiceID(int invoiceID)
        {
            return dal.GetDataSet("Report_GetInvoiceItemByInvoiceID", invoiceID);
        }

        /// <summary>
        /// Get all items including their components of an invoice
        /// </summary>
        /// <param name="invoiceID">Invoice id</param>
        /// <returns>List of invoice items</returns>
        public DataSet GetComponentItemsByInvoiceID(int companyID, int invoiceID)
        {
            return dal.GetDataSet("Report_GetComponentItemsByInvoiceID", companyID, invoiceID);
        }

        /// <summary>
        /// Get proposal items by proposal id
        /// </summary>
        /// <param name="InvoiceID">Proposal id</param>
        /// <returns>Data of proposal items</returns>
        public DataSet GetProposalItemByProposalID(int proposalID)
        {
            return dal.GetDataSet("Report_GetProposalItemByProposalID", proposalID);
        }
        /// <summary>
        /// Get proposal items by Allocationproposal id
        /// </summary>
        /// <param name="InvoiceID">Proposal id</param>
        /// <returns>Data of proposal items</returns>
        public DataSet GetRPAllocationItemByProposalID(int MMAllocationProposalID)
        {
            return dal.GetDataSet("RPAllocationProposal", MMAllocationProposalID);
        }

        /// <summary>
        /// Get transfer item and transfer package by transfer id.
        /// </summary>
        /// <param name="transferID">The transfer id.</param>
        /// <returns>Data of transfer item</returns>
        public DataSet GetTransferItemByTransferID(int transferID)
        {
            return dal.GetDataSet("Report_GetTransferItemByTransferID", transferID);
        }

        /// <summary>
        /// Get receipt item by receipt id
        /// </summary>
        /// <param name="receiptID">Receipt id</param>
        /// <returns>Data of the receipt item</returns>
        public DataSet GetReceiptItemByReceiptID(int receiptID)
        {
            return dal.GetDataSet("Report_GetReceiptItemByReceiptID", receiptID);
        }


        /// <summary>
        /// Get product list limit inventory to a minimum, maximum 
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <param name="stockID">Stock id</param>
        /// <param name="departmentID">Department id</param>
        /// <param name="productGroupID">Product group id</param>
        /// <param name="supplierID">Supplier id</param>
        /// <returns>Product list</returns>
        public List<ICProductsInfo> GetProductInventoryStockMinMaxList(int? branchID, int? stockID, int? departmentID, int? productGroupID, int? supplierID)
        {
            ICProductsController objProductsController = new ICProductsController();
            List<ICProductsInfo> productList = new List<ICProductsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetProductInventoryStockMinMax", branchID, stockID, departmentID, productGroupID, supplierID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectFromDataRow(row);
                    productList.Add(objProductsInfo);
                }
            }
            return productList;
        }

        /// <summary>
        /// Get product list limit inventory to a minimum, maximum 
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <param name="stockID">Stock id</param>
        /// <param name="departmentID">Department id</param>
        /// <param name="productGroupID">Product group id</param>
        /// <param name="supplierID">Supplier id</param>
        /// <returns>Data of Product</returns>
        public DataSet GetProductInventoryStockMinMax(int? branchID, int? stockID, int? departmentID, int? productGroupID, int? supplierID)
        {
            return dal.GetDataSet("Report_GetProductInventoryStockMinMax", branchID, stockID, departmentID, productGroupID, supplierID);
        }

        /// <summary>
        /// Get product list limit inventory to a minimum, maximum 
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <param name="stockID">Stock id</param>
        /// <param name="departmentID">Department id</param>
        /// <param name="productGroupID">Product group id</param>
        /// <param name="supplierID">Supplier id</param>
        /// <returns>Data of Product</returns>
        public DataSet GetProductInventoryStockMinMaxByBranchNoList(string branchNos, int? stockID, int? departmentID, int? productGroupID, int? supplierID)
        {
            return dal.GetDataSet("Report_GetProductInventoryStockMinMaxByBranchNoList", branchNos, stockID, departmentID, productGroupID, supplierID);
        }

        /// <summary>
        /// Get transfer product list based on some criteria
        /// </summary>
        /// <param name="fromStockID">ID fo from stock</param>
        /// <param name="toStockID">ID of to stock</param>
        /// <param name="transferDateFrom">Transfer date from</param>
        /// <param name="transferDateTo">Transfer date to</param>
        /// <param name="serieNo">Serie no</param>
        /// <param name="transferStatus">Transfer status</param>
        /// <returns>Transfer product list</returns>
        public List<ICTransferItemsInfo> GetTransferProductList(int? fromStockID, int? toStockID, DateTime transferDateFrom, DateTime transferDateTo, string serieNo, string transferStatus)
        {
            List<ICTransferItemsInfo> transferItemList = new List<ICTransferItemsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetTransferProductList", fromStockID, toStockID, transferDateFrom, transferDateTo, serieNo, transferStatus);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ICTransferItemsController objTransferItemsController = new ICTransferItemsController();
                List<string> tranferNoList = new List<string>();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICTransferItemsInfo objTransferItemsInfo = (ICTransferItemsInfo)objTransferItemsController.GetObjectFromDataRow(row);
                    bool isExistTranferNo = tranferNoList.Exists(e => e == objTransferItemsInfo.ICTransferNo);
                    if (isExistTranferNo)
                    {
                        objTransferItemsInfo.ICTransferNo = string.Empty;
                        objTransferItemsInfo.ICTransferDate = DateTime.MaxValue;
                        objTransferItemsInfo.ICTransferStatusDisplayText = string.Empty;
                    }
                    else
                    {
                        tranferNoList.Add(objTransferItemsInfo.ICTransferNo);
                    }
                    transferItemList.Add(objTransferItemsInfo);
                }
            }
            return transferItemList;
        }

        /// <summary>
        /// Get transfer product list based on some criteria
        /// </summary>
        /// <param name="fromStockID">ID fo from stock</param>
        /// <param name="toStockID">ID of to stock</param>
        /// <param name="transferDateFrom">Transfer date from</param>
        /// <param name="transferDateTo">Transfer date to</param>
        /// <param name="serieNo">Serie no</param>
        /// <param name="transferStatus">Transfer status</param>
        /// <returns>Transfer product list</returns>
        public List<ICTransferItemsInfo> GetTransferProductListByBranchNoList(int? fromStockID, int? toStockID, DateTime transferDateFrom, DateTime transferDateTo, string serieNo, string transferStatus, string branchNos)
        {
            List<ICTransferItemsInfo> transferItemList = new List<ICTransferItemsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetTransferProductListByBranchNoList", fromStockID, toStockID, transferDateFrom, transferDateTo, serieNo, transferStatus, branchNos);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ICTransferItemsController objTransferItemsController = new ICTransferItemsController();
                List<string> tranferNoList = new List<string>();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICTransferItemsInfo objTransferItemsInfo = (ICTransferItemsInfo)objTransferItemsController.GetObjectFromDataRow(row);
                    //bool isExistTranferNo = tranferNoList.Exists(e => e == objTransferItemsInfo.ICTransferNo);
                    //if (isExistTranferNo)
                    //{
                    //    objTransferItemsInfo.ICTransferNo = string.Empty;
                    //    objTransferItemsInfo.ICTransferDate = DateTime.MaxValue;
                    //    objTransferItemsInfo.ICTransferStatusDisplayText = string.Empty;
                    //}
                    //else
                    //{
                    //    tranferNoList.Add(objTransferItemsInfo.ICTransferNo);
                    //}
                    transferItemList.Add(objTransferItemsInfo);
                }
            }
            return transferItemList;
        }

        /// <summary>
        /// Get receipt item list by department id, product group id, supplier id, 
        /// </summary>
        /// <param name="departmentID">ID of department</param>
        /// <param name="productGroupID">ID of product group</param>
        /// <param name="supplierID">ID of supplier</param>
        /// <param name="stockID">Stock id</param>
        /// <param name="receiptType">Receipt type</param>
        /// <param name="receiptStatus">Receipt status</param>
        /// <param name="receiptPackNo">Pack no</param>
        /// <param name="receiptDateFrom">Receipt date from</param>
        /// <param name="receiptDateTo">Receipt date to</param>
        /// <returns>The list of receipt items</returns>
        public List<ICReceiptItemsInfo> GetReceiptItemListBySomeCriteria(
                                                                    int? departmentID,
                                                                    int? productGroupID,
                                                                    int? supplierID,
                                                                    int? stockID,
                                                                    string receiptType,
                                                                    string receiptStatus,
                                                                    string receiptPackNo,
                                                                    DateTime receiptDateFrom,
                                                                    DateTime receiptDateTo)
        {
            List<ICReceiptItemsInfo> receiptItemList = new List<ICReceiptItemsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetReceiptItemListBySomeCriteria",
                                        departmentID,
                                        productGroupID,
                                        supplierID,
                                        stockID,
                                        receiptType,
                                        receiptStatus,
                                        receiptPackNo,
                                        receiptDateFrom,
                                        receiptDateTo);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
                List<string> receiptNoList = new List<string>();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(row);
                    bool isExisReceiptNo = receiptNoList.Exists(e => e == objReceiptItemsInfo.ICReceiptNo);
                    if (isExisReceiptNo)
                    {
                        objReceiptItemsInfo.ICReceiptNo = string.Empty;
                        objReceiptItemsInfo.ICReceiptDate = DateTime.MaxValue;
                        objReceiptItemsInfo.ICReceiptStatusDisplayText = string.Empty;
                        objReceiptItemsInfo.ICReceiptTotalCost = 0;
                        objReceiptItemsInfo.APSupplierName = string.Empty;
                        objReceiptItemsInfo.GECurrencyName = string.Empty;
                    }
                    else
                    {
                        receiptNoList.Add(objReceiptItemsInfo.ICReceiptNo);
                    }
                    receiptItemList.Add(objReceiptItemsInfo);
                }
            }
            return receiptItemList;
        }

        /// <summary>
        /// Get receipt item list by department id, product group id, supplier id, 
        /// </summary>
        /// <param name="departmentID">ID of department</param>
        /// <param name="productGroupID">ID of product group</param>
        /// <param name="supplierID">ID of supplier</param>
        /// <param name="stockID">Stock id</param>
        /// <param name="receiptType">Receipt type</param>
        /// <param name="receiptStatus">Receipt status</param>
        /// <param name="receiptPackNo">Pack no</param>
        /// <param name="receiptDateFrom">Receipt date from</param>
        /// <param name="receiptDateTo">Receipt date to</param>
        /// <returns>The list of receipt items</returns>
        public List<ICReceiptItemsInfo> GetReceiptItemListByBranchNoListAndSomeCriteria(
                                                                    int? departmentID,
                                                                    int? productGroupID,
                                                                    int? objectID,
                                                                    string objectType,
                                                                    int? stockID,
                                                                    string receiptType,
                                                                    string receiptStatus,
                                                                    string receiptPackNo,
                                                                    DateTime receiptDateFrom,
                                                                    DateTime receiptDateTo,
                                                                    string branchNos)
        {
            List<ICReceiptItemsInfo> receiptItemList = new List<ICReceiptItemsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetReceiptItemListByBranchNoListSomeCriteria",
                                        departmentID,
                                        productGroupID,
                                        objectID,
                                        objectType,
                                        stockID,
                                        receiptType,
                                        receiptStatus,
                                        receiptPackNo,
                                        receiptDateFrom,
                                        receiptDateTo,
                                        branchNos);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
                List<string> receiptNoList = new List<string>();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(row);
                    bool isExisReceiptNo = receiptNoList.Exists(e => e == objReceiptItemsInfo.ICReceiptNo);
                    if (isExisReceiptNo)
                    {
                        objReceiptItemsInfo.ICReceiptNo = string.Empty;
                        objReceiptItemsInfo.ICReceiptDate = DateTime.MaxValue;
                        objReceiptItemsInfo.ICReceiptStatusDisplayText = string.Empty;
                        objReceiptItemsInfo.ICReceiptTotalCost = 0;
                        objReceiptItemsInfo.APSupplierName = string.Empty;
                        objReceiptItemsInfo.GECurrencyName = string.Empty;
                    }
                    else
                    {
                        receiptNoList.Add(objReceiptItemsInfo.ICReceiptNo);
                    }
                    receiptItemList.Add(objReceiptItemsInfo);
                }
            }
            return receiptItemList;
        }


        /// <summary>
        /// Get time sheet param by time sheet param type
        /// </summary>
        /// <param name="timeSheetParamType">Type of the time sheet param</param>
        /// <returns>The list of time sheet param</returns>
        public List<HRTimeSheetParamsInfo> GetTimeSheetParamByTimeSheetParamType(string timeSheetParamType)
        {
            List<HRTimeSheetParamsInfo> timeSheetParamList = new List<HRTimeSheetParamsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetTimeSheetParamByTimeSheetParamType", timeSheetParamType);
            if (ds.Tables[0].Rows.Count > 0)
            {
                HRTimeSheetParamsController objTimeSheetParamsController = new HRTimeSheetParamsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    HRTimeSheetParamsInfo objTimeSheetParamsInfo = (HRTimeSheetParamsInfo)objTimeSheetParamsController.GetObjectFromDataRow(row);
                    timeSheetParamList.Add(objTimeSheetParamsInfo);
                }
            }
            return timeSheetParamList;
        }

        /// <summary>
        /// Get employee time sheet by time sheet id
        /// </summary>
        /// <param name="timeSheetID">Time sheet id</param>
        /// <returns>The list of employee time sheet</returns>
        public List<HREmployeeTimeSheetsInfo> GetEmployeeTimeSheetByTimeSheetID(int timeSheetID)
        {
            List<HREmployeeTimeSheetsInfo> employeeTimeSheetList = new List<HREmployeeTimeSheetsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetEmployeeTimeSheetByTimeSheetID", timeSheetID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                HREmployeeTimeSheetsController objEmployeeTimeSheetsController = new HREmployeeTimeSheetsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    HREmployeeTimeSheetsInfo objEmployeeTimeSheetsInfo = (HREmployeeTimeSheetsInfo)objEmployeeTimeSheetsController.GetObjectFromDataRow(row);
                    employeeTimeSheetList.Add(objEmployeeTimeSheetsInfo);
                }
            }
            return employeeTimeSheetList;
        }

        /// <summary>
        /// Get employee payroll by payroll id
        /// </summary>
        /// <param name="payRollID">Payroll id</param>
        /// <returns>Data of the employee payroll</returns>
        public DataSet GetEmployeePayRollByPayRollID(int payRollID)
        {
            return dal.GetDataSet("Report_GetEmployeePayRollByPayRollID", payRollID);
        }

        /// <summary>
        /// Get standar question by evaluation template id
        /// </summary>
        /// <param name="evaluationTemplateID">Evaluation template id</param>
        /// <returns>Data of the evaluation template</returns>
        public DataSet GetStandardQuestionByEvaluationTemplateID(int evaluationTemplateID)
        {
            return dal.GetDataSet("Report_GetStandardQuestionByEvaluationTemplateID", evaluationTemplateID);
        }

        /// <summary>
        /// Get employee evaluation by id of evaluation and their type
        /// </summary>
        /// <param name="evaluationID">Evaluation id</param>
        /// <param name="employeeEvaluationType">Type of employee evaluation </param>
        /// <returns>DataSet of employee evaluation</returns>
        public DataSet GetEmployeeEvaluationByEvaluationIDAndType(int evaluationID, string employeeEvaluationType)
        {
            return dal.GetDataSet("Report_GetEmployeeEvaluationByEvaluationIDAndType", evaluationID, employeeEvaluationType);
        }

        /// <summary>
        /// Get trainning schedules by trainning course id
        /// </summary>
        /// <param name="trainningCourseID">Trainning course id</param>
        /// <returns>Data of trainning schedules</returns>
        public DataSet GetTrainningSchedulesByTrainningCourseID(int trainningCourseID)
        {
            return dal.GetDataSet("Report_GetTrainningSchedulesByTrainningCourseID", trainningCourseID);
        }

        /// <summary>
        /// Get invoice items grouped by suppliers
        /// </summary>
        /// <param name="dateFrom">The date from of invoice</param>
        /// <param name="dateTo">The date to of invoice</param>
        /// <param name="branchID">The branch id</param>
        /// <returns>Dataset of invoice</returns>
        public DataSet GetInvoiceItemsGroupedBySupplier(DateTime? dateFrom, DateTime? dateTo, int? branchID)
        {
            return dal.GetDataSet("Report_GetInvoiceItemsGroupedBySupplier", dateFrom, dateTo, branchID);
        }

        /// <summary>
        /// Get invoice item grouped by departments
        /// </summary>
        /// <param name="dateFrom">The date from of invoice</param>
        /// <param name="dateTo">The date to of invoice</param>
        /// <param name="departmentID">The department id</param>
        /// <param name="productGroupParentID">The product group parent id</param>
        /// <param name="branchID">The branch id</param>
        /// <returns>Dataset of invoice</returns>
        public DataSet GetInvoiceItemsGroupedByDepartment(DateTime? dateFrom, DateTime? dateTo, int? departmentID, int? productGroupParentID, int? branchID)
        {
            return dal.GetDataSet("Report_GetInvoiceItemsGroupedByDepartment", dateFrom, dateTo, departmentID, productGroupParentID, branchID);
        }

        /// <summary>
        /// Get product group by department id
        /// </summary>
        /// <param name="dateFrom">The date from of invoice</param>
        /// <param name="dateTo">The date to of invoice</param>
        /// <param name="departmentID">The department id</param>
        /// <param name="productGroupParentID">The product group parent id</param>
        /// <param name="branchID">The branch id</param>
        /// <returns>Dataset of invoice</returns>
        public DataSet GetProductGroupByDepartmentID(DateTime? dateFrom, DateTime? dateTo, int departmentID, int? productGroupParentID, int? branchID)
        {
            return dal.GetDataSet("Report_GetProductGroupByDepartmentID", dateFrom, dateTo, departmentID, productGroupParentID, branchID);
        }

        /// <summary>
        /// Get product by product group id
        /// </summary>
        /// <param name="dateFrom">The date from of invoice</param>
        /// <param name="dateTo">The date to of invoice</param>
        /// <param name="departmentID">The department id</param>
        /// <param name="productGroupParentID">The product group parent id</param>
        /// <param name="branchID">The branch id</param>
        /// <returns>Dataset of invoice</returns>
        public DataSet GetProductByProductGroupID(DateTime? dateFrom, DateTime? dateTo, int departmentID, int? productGroupParentID, int? branchID)
        {
            return dal.GetDataSet("Report_GetProductByProductGroupID", dateFrom, dateTo, departmentID, productGroupParentID, branchID);
        }

        /// <summary>
        /// Get purchase summary of customers based on some criteria
        /// </summary>
        /// <param name="customerLocationID">Customer location id</param>
        /// <param name="customerType">Customer type</param>
        /// <param name="priceLevelID">Price leve</param>
        /// <param name="locationID">Branch location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="dateFrom">Date the result is filtered from</param>
        /// <param name="dateTo">Date the result is filtered to</param>
        /// <returns>List of customers including invoice summary information</returns>
        public DataSet GetCustomerPurchaseSummary(
                                            int? customerLocationID,
                                            string customerType,
                                            int? priceLevelID,
                                            int? locationID,
                                            int? branchID,
                                            DateTime? dateFrom,
                                            DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("Report_GetCustomerPurchaseSummary",
                                    customerLocationID,
                                    customerType,
                                    priceLevelID,
                                    locationID,
                                    branchID,
                                    dateFrom,
                                    dateTo);
            return ds;
        }

        //NUThao [ADD] [10/16/2014] [DB centre] [Report Permission], START
        /// <summary>
        /// Get purchase summary of customers based on some criteria
        /// </summary>
        /// <param name="customerLocationID">Customer location id</param>
        /// <param name="customerType">Customer type</param>
        /// <param name="priceLevelID">Price leve</param>
        /// <param name="locationID">Branch location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="dateFrom">Date the result is filtered from</param>
        /// <param name="dateTo">Date the result is filtered to</param>
        /// <returns>List of customers including invoice summary information</returns>
        public DataSet GetCustomerPurchaseSummaryByBranchList(
                                            int? customerLocationID,
                                            string customerType,
                                            int? priceLevelID,
                                            int? locationID,
                                            string branchNoList,
                                            DateTime? dateFrom,
                                            DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("Report_GetCustomerPurchaseSummaryByBranchList",
                                    customerLocationID,
                                    customerType,
                                    priceLevelID,
                                    locationID,
                                    branchNoList,
                                    dateFrom,
                                    dateTo);
            return ds;
        }
        //NUThao [ADD] [10/16/2014] [DB centre] [Report Permission], END

        /// <summary>
        /// Get the list of customers based on some criteria
        /// </summary>
        /// <param name="customerLocationID">Customer location id</param>
        /// <param name="customerType">Customer type</param>
        /// <param name="priceLevelID">Price level of customer</param>
        /// <param name="locationID">Branch location id</param>
        /// <param name="branchID">Branch id</param> 
        /// <returns>List of customers</returns>
        public List<ARCustomersInfo> GetCustomerList(
                                                int? customerLocationID,
                                                string customerType,
                                                int? priceLevelID,
                                                int? locationID,
                                                int? branchID)
        {
            DataSet ds = dal.GetDataSet("Report_GetCustomerList",
                                        customerLocationID,
                                        customerType,
                                        priceLevelID,
                                        locationID,
                                        branchID);
            List<ARCustomersInfo> customers = new List<ARCustomersInfo>();
            if (ds.Tables.Count > 0)
            {
                ARCustomersController objCustomersController = new ARCustomersController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARCustomersInfo objCustomersInfo = (ARCustomersInfo)objCustomersController.GetObjectFromDataRow(row);
                    customers.Add(objCustomersInfo);
                }
            }
            return customers;
        }

        /// <summary>
        /// Get the list of receipts based on some criteria
        /// </summary>
        /// <param name="supplierID">Supplier ID</param>
        /// <param name="receiptType">Receipt type</param>        
        /// <param name="receiptStatus">Receipt status</param>
        /// <param name="dateFrom">Date which the result is searched from</param>
        /// <param name="dateTo">Date which the result is searched to</param>
        /// <returns>List of receipts</returns>
        public DataSet GetReceiptList(int? supplierID, string receiptType, string receiptStatus, DateTime? dateFrom, DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("Report_GetReceiptList", supplierID, receiptType, receiptStatus, dateFrom, dateTo);
            return ds;
        }

        /// <summary>
        /// Get the list of receipts based on some criteria
        /// </summary>
        /// <param name="supplierID">Supplier ID</param>
        /// <param name="receiptType">Receipt type</param>        
        /// <param name="receiptStatus">Receipt status</param>
        /// <param name="dateFrom">Date which the result is searched from</param>
        /// <param name="dateTo">Date which the result is searched to</param>
        /// <returns>List of receipts</returns>
        public DataSet GetReceiptListByBranchNoList(int? objectID, string objectType, string receiptType, string receiptStatus, DateTime? dateFrom, DateTime? dateTo, string branchNos)
        {
            DataSet ds = dal.GetDataSet("Report_GetReceiptListByBranchNoList", objectID, objectType, receiptType, receiptStatus, dateFrom, dateTo, branchNos);
            return ds;
        }

        /// <summary>
        /// Get inventory of product series by product id and stock id.
        /// </summary>
        /// <param name="productID">The product id</param>
        /// <param name="stockID">The stock id</param>
        /// <returns>List of inventory product series</returns>
        public DataSet GetInventoryProductSeriesByProductIDAndStockID(int productID, int stockID)
        {
            DataSet ds = dal.GetDataSet("Report_GetInventoryProductSeriesByProductIDAndStockID", productID, stockID);
            return ds;
        }

        /// <summary>
        /// Get stock by location id
        /// </summary>
        /// <param name="locationID">Location id</param>
        /// <returns>Data of the stock</returns>
        public DataSet GetStockByLocationID(int locationID)
        {
            DataSet ds = dal.GetDataSet("Report_GetStockByLocationID", locationID);
            return ds;
        }

        /// <summary>
        /// Get all inventory products of stock in sale order list
        /// </summary>
        /// <param name="companyID">The company id</param>
        /// <param name="departmentID">The department id</param>
        /// <param name="productGroupID">The product group id</param>
        /// <param name="supplierID">The supplier id</param>
        /// <param name="productNo">The product no</param>
        /// <param name="productAttributeKey">The product attribute key</param>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="stockID">The stock id</param>
        /// <param name="dateFrom">Search from date</param>
        /// <param name="dateTo">Search to date</param>
        /// <returns>The product list</returns>
        public DataSet GetAllInventoryProductsInSaleOrder(
                                                int companyID,
                                                int? departmentID,
                                                string productGroupReference,
                                                int? supplierID,
                                                string productNo,
                                                string productAttributeKey,
                                                int? locationID,
                                                int? branchID,
                                                int stockID,
                                                DateTime dateFrom,
                                                DateTime dateTo,
                                                bool? hasComponent)
        {
            DataSet ds = dal.GetDataSet("Report_GetProductInSaleOrderList",
                                        companyID,
                                        departmentID,
                                        productGroupReference,
                                        supplierID,
                                        productNo,
                                        productAttributeKey,
                                        locationID,
                                        branchID,
                                        stockID,
                                        dateFrom,
                                        dateTo,
                                        hasComponent);
            return ds;
        }

        /// <summary>
        /// Get all inventory products of stock
        /// </summary>
        /// <param name="companyID">The company id</param>
        /// <param name="departmentID">The department id</param>
        /// <param name="productGroupID">The product group id</param>
        /// <param name="supplierID">The supplier id</param>
        /// <param name="productNo">The product no</param>
        /// <param name="productAttributeKey">The product attribute key</param>        
        /// <param name="branchID">Branch id</param>
        /// <param name="stockID">The stock id</param>
        /// <returns>The product list</returns>
        public DataSet GetAllInventoryProducts(
                                                int companyID,
                                                int? departmentID,
                                                string productGroupReference,
                                                int? supplierID,
                                                string productNo,
                                                string productAttributeKey,
                                                int? branchID,
                                                int stockID,
                                                bool? hasComponent)
        {
            DataSet ds = dal.GetDataSet("Report_GetProductList",
                                        companyID,
                                        departmentID,
                                        productGroupReference,
                                        supplierID,
                                        productNo,
                                        productAttributeKey,
                                        branchID,
                                        stockID,
                                        hasComponent);
            return ds;
        }

        /// <summary>
        /// Get all inventory products of a stock
        /// </summary>        
        /// <returns>The product list</returns>
        public DataSet GetAllInventoryProducts(int companyID, int stockID)
        {
            return GetAllInventoryProducts(companyID, null, null, null, null, null, null, stockID, null);
        }

        /// <summary>
        /// Get products that have components based on some criteria
        /// </summary>
        /// <returns>List of products</returns>
        /// <param name="departmentID">Department id</param>
        /// <param name="productGroupID">Product group id</param>
        /// <param name="supplierID">Supplier id</param>
        public DataSet GetParentProducts(int? departmentID, int? productGroupID, int? supplierID)
        {
            DataSet ds = dal.GetDataSet("Report_GetParentProducts", departmentID, productGroupID, supplierID);
            return ds;
        }

        /// <summary>
        /// Get all inventory products serie of stock
        /// </summary>
        /// <param name="companyID">The company id</param>
        /// <param name="departmentID">The department id</param>
        /// <param name="productGroupID">The product group id</param>
        /// <param name="supplierID">The supplier id</param>
        /// <param name="productNo">The product no</param>
        /// <param name="productAttributeKey">The product attribute key</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="stockID">The stock id</param>
        /// <param name="hasComponent">A value indicates whether the product has component</param>
        /// <returns>The product list</returns>
        public List<ICInventoryStocksInfo> GetAllInventoryProductSeries(
                                                                int companyID,
                                                                int? departmentID,
                                                                int? productGroupID,
                                                                int? supplierID,
                                                                string productNo,
                                                                string productAttributeKey,
                                                                int? branchID,
                                                                int stockID,
                                                                bool? hasComponent)
        {
            List<ICInventoryStocksInfo> inventoryStockList = new List<ICInventoryStocksInfo>();
            DataSet ds = dal.GetDataSet("Report_GetInventoryStockList",
                                        companyID,
                                        departmentID,
                                        productGroupID,
                                        supplierID,
                                        productNo,
                                        productAttributeKey,
                                        branchID,
                                        stockID,
                                        hasComponent);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ICInventoryStocksController objInventoryStocksController = new ICInventoryStocksController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICInventoryStocksInfo objInventoryStocksInfo = (ICInventoryStocksInfo)objInventoryStocksController.GetObjectFromDataRow(row);
                    inventoryStockList.Add(objInventoryStocksInfo);
                }
            }
            return inventoryStockList;
        }

        /// <summary>
        /// Get components of a product including their inventory
        /// </summary>
        /// <param name="productID">Product id</param>
        /// <returns>List of components</returns>
        public List<ICProductsInfo> GetComponentInventoryByProductID(int productID)
        {
            DataSet ds = dal.GetDataSet("Report_GetComponentInventoryByProductID", productID);
            List<ICProductsInfo> products = new List<ICProductsInfo>();
            ICProductsController objProductsController = new ICProductsController();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectFromDataRow(row);
                    products.Add(objProductsInfo);
                }
            }
            return products;
        }

        /// <summary>
        /// Get inventory of a product
        /// </summary>
        /// <param name="productID">Product id</param>
        /// <returns>Product object</returns>
        public List<ICProductsInfo> GetProductInventoryByProductID(int productID)
        {
            ICProductsController objProductsController = new ICProductsController();
            DataSet ds = dal.GetDataSet("Report_GetProductInventoryByProductID", productID);
            List<ICProductsInfo> products = new List<ICProductsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductsInfo objProductsInfo = (ICProductsInfo)objProductsController.GetObjectFromDataRow(row);
                    products.Add(objProductsInfo);
                }
            }
            return products;
        }

        /// <summary>
        /// Get transfer list
        /// </summary>
        /// <param name="fromStockID">ID of the stock transfered from</param>        
        /// <param name="toStockID">ID of the stock transferred to</param>
        /// <param name="dateFrom">Date the result is filtered from</param>
        /// <param name="dateTo">Date the result is filtered to</param>        
        /// <param name="status">Transfer status</param>
        /// <returns>List of transfers</returns>
        public DataSet GetTransferList(int fromStockID, int toStockID, DateTime? dateFrom, DateTime? dateTo, string status)
        {
            return dal.GetDataSet("Report_GetTransferList", fromStockID, toStockID, dateFrom, dateTo, status);
        }

        /// <summary>
        /// Get transfer list
        /// </summary>
        /// <param name="fromStockID">ID of the stock transfered from</param>        
        /// <param name="toStockID">ID of the stock transferred to</param>
        /// <param name="dateFrom">Date the result is filtered from</param>
        /// <param name="dateTo">Date the result is filtered to</param>        
        /// <param name="status">Transfer status</param>
        /// <returns>List of transfers</returns>
        public DataSet GetTransferListByBranchNoList(string branchNos, int fromStockID, int toStockID, DateTime? dateFrom, DateTime? dateTo, string status)
        {
            return dal.GetDataSet("Report_GetTransferListByBranchNoList", fromStockID, toStockID, dateFrom, dateTo, status, branchNos);
        }

        /// <summary>
        /// Get receipt item, shipment item, transfer item list 
        /// </summary>
        /// <param name="dateFrom">The date from</param>
        /// <param name="dateTo">The date to</param>
        /// <param name="stockID">The stock id</param>
        /// <param name="productID">Product id</param>
        /// <returns>List of receipt shipment transfer item</returns>
        public List<ICReceiptItemsInfo> GetReceiptShipmentTransferItemList(
                                                                DateTime? dateFrom,
                                                                DateTime? dateTo,
                                                                int? branchID,
                                                                string stockNos,
                                                                int? productID)
        {
            DataSet ds = dal.GetDataSet("Report_GetReceiptItemShipmentItemTransferItemList",
                                        dateFrom,
                                        dateTo,
                                        branchID,
                                        stockNos,
                                        productID);
            List<ICReceiptItemsInfo> receiptShipmentTransferItemList = new List<ICReceiptItemsInfo>();

            if (ds.Tables[0].Rows.Count > 0)
            {
                ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
                List<string> receiptShipmentTransferItemFilterNoList = new List<string>();
                int rowNumber = 0;
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(dr);
                    bool isExistNo = receiptShipmentTransferItemFilterNoList.Exists(e => e == objReceiptItemsInfo.ICReceiptNo);
                    if (!isExistNo)
                    {
                        rowNumber += 1;
                        objReceiptItemsInfo.RowNumber = rowNumber.ToString("00");
                        receiptShipmentTransferItemFilterNoList.Add(objReceiptItemsInfo.ICReceiptNo);
                    }
                    else
                    {
                        objReceiptItemsInfo.ICReceiptNo = string.Empty;
                        objReceiptItemsInfo.ICReceiptDate = DateTime.MaxValue;
                        objReceiptItemsInfo.ICReceiptDesc = string.Empty;
                    }
                    receiptShipmentTransferItemList.Add(objReceiptItemsInfo);
                }
            }
            return receiptShipmentTransferItemList;
        }

        /// <summary>
        /// Get receipt item, shipment item, transfer item list 
        /// </summary>
        /// <param name="dateFrom">The date from</param>
        /// <param name="dateTo">The date to</param>
        /// <param name="stockID">The stock id</param>
        /// <param name="productID">Product id</param>
        /// <returns>List of receipt shipment transfer item</returns>
        public List<ICReceiptItemsInfo> GetReceiptShipmentTransferItemListByBranchNoList(
                                                                DateTime? dateFrom,
                                                                DateTime? dateTo,
                                                                int? stockID,
                                                                int? productID,
                                                                string branchNos)
        {
            DataSet ds = dal.GetDataSet("Report_GetReceiptItemShipmentItemTransferItemListByBranchNoList",
                                        dateFrom,
                                        dateTo,
                                        stockID,
                                        productID,
                                        branchNos);
            List<ICReceiptItemsInfo> receiptShipmentTransferItemList = new List<ICReceiptItemsInfo>();

            if (ds.Tables[0].Rows.Count > 0)
            {
                ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
                List<string> receiptShipmentTransferItemFilterNoList = new List<string>();
                int rowNumber = 0;
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(dr);
                    bool isExistNo = receiptShipmentTransferItemFilterNoList.Exists(e => e == objReceiptItemsInfo.ICReceiptNo);
                    if (!isExistNo)
                    {
                        rowNumber += 1;
                        objReceiptItemsInfo.RowNumber = rowNumber.ToString("00");
                        receiptShipmentTransferItemFilterNoList.Add(objReceiptItemsInfo.ICReceiptNo);
                    }
                    //else
                    //{
                    //    //objReceiptItemsInfo.ICReceiptNo = string.Empty;
                    //    objReceiptItemsInfo.ICReceiptDate = DateTime.MaxValue;
                    //    objReceiptItemsInfo.ICReceiptDesc = string.Empty;
                    //}
                    receiptShipmentTransferItemList.Add(objReceiptItemsInfo);
                }
            }
            return receiptShipmentTransferItemList;
        }
        public List<ICReceiptItemsInfo> GetReceiptAndShipmentBySomeConditions(
                                                                int productID,
                                                                int batchProductID,
                                                                int operationID,
                                                                DateTime fromDate,
                                                                DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("Report_GetReceiptAndShipmentBySomeConditions",
                                        productID,
                                        batchProductID,
                                        operationID,
                                        fromDate,
                                        toDate);
            List<ICReceiptItemsInfo> receiptShipmentTransferItemList = new List<ICReceiptItemsInfo>();

            if (ds.Tables[0].Rows.Count > 0)
            {
                ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
                List<string> receiptShipmentTransferItemFilterNoList = new List<string>();

                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(dr);

                    receiptShipmentTransferItemList.Add(objReceiptItemsInfo);
                }
            }
            return receiptShipmentTransferItemList;
        }
        public List<ICReceiptItemsInfo> GetReceiptAndShipmentBySomeConditionsToTime(
                                                                int productID,
                                                                int batchProductID,
                                                                int operationID,

                                                                DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("Report_GetReceiptAndShipmentBySomeConditionsToTime",
                                        productID,
                                        batchProductID,
                                        operationID,

                                        toDate);
            List<ICReceiptItemsInfo> receiptShipmentTransferItemList = new List<ICReceiptItemsInfo>();

            if (ds.Tables[0].Rows.Count > 0)
            {
                ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
                List<string> receiptShipmentTransferItemFilterNoList = new List<string>();

                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(dr);

                    receiptShipmentTransferItemList.Add(objReceiptItemsInfo);
                }
            }
            return receiptShipmentTransferItemList;
        }

        /// <summary>
        /// Get receipt voucher item list by receipt voucher id
        /// </summary>
        /// <param name="receiptVoucherID">Receipt voucher id</param>
        /// <returns>List of the receipt voucher</returns>
        public List<ARReceiptVoucherItemsInfo> GetReceiptVoucherItemListByReceiptVoucherID(int receiptVoucherID)
        {
            DataSet ds = dal.GetDataSet("Report_GetReceiptVoucherItemByReceiptVoucherID", receiptVoucherID);
            List<ARReceiptVoucherItemsInfo> receiptVoucherItemList = new List<ARReceiptVoucherItemsInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                ARReceiptVoucherItemsController objReceiptVoucherItemsController = new ARReceiptVoucherItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARReceiptVoucherItemsInfo item = (ARReceiptVoucherItemsInfo)objReceiptVoucherItemsController.GetObjectFromDataRow(row);
                    receiptVoucherItemList.Add(item);
                }
            }
            return receiptVoucherItemList;
        }

        /// <summary>
        /// Get payment voucher item list by payment voucher id
        /// </summary>
        /// <param name="paymentVoucherID">Payment voucher id</param>
        /// <returns>List of the payment voucher</returns>
        public List<APPaymentVoucherItemsInfo> GetPaymentVoucherItemListByPaymentVoucherID(int paymentVoucherID)
        {
            DataSet ds = dal.GetDataSet("Report_GetPaymentVoucherItemByPaymentVoucherID", paymentVoucherID);
            List<APPaymentVoucherItemsInfo> paymentVoucherItemList = new List<APPaymentVoucherItemsInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                APPaymentVoucherItemsController objPaymentVoucherItemsController = new APPaymentVoucherItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APPaymentVoucherItemsInfo objPaymentVoucherItemsInfo = (APPaymentVoucherItemsInfo)objPaymentVoucherItemsController.GetObjectFromDataRow(row);
                    paymentVoucherItemList.Add(objPaymentVoucherItemsInfo);
                }
            }
            return paymentVoucherItemList;
        }

        public List<APPaymentVoucherItemsInfo> GetPaymentVoucherItemByAPSupplierPaymentID(int supplierPaymentID)
        {
            DataSet ds = dal.GetDataSet("Report_GetPaymentVoucherItemByAPSupplierPaymentID", supplierPaymentID);
            List<APPaymentVoucherItemsInfo> paymentVoucherItemList = new List<APPaymentVoucherItemsInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                APPaymentVoucherItemsController objPaymentVoucherItemsController = new APPaymentVoucherItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APPaymentVoucherItemsInfo objPaymentVoucherItemsInfo = (APPaymentVoucherItemsInfo)objPaymentVoucherItemsController.GetObjectFromDataRow(row);
                    paymentVoucherItemList.Add(objPaymentVoucherItemsInfo);
                }
            }
            return paymentVoucherItemList;
        }
        #region Accounting
        /// <summary>
        /// Get document entry list
        /// </summary>
        /// <param name="dateFrom">Search from date</param>
        /// <param name="dateTo">Search to date</param>
        /// <param name="currencyID">The currency id</param>
        /// <returns>List of the document entry</returns>
        public List<ACDocumentEntrysInfo> GetDocumentEntryList(DateTime? dateFrom, DateTime? dateTo, int? currencyID)
        {
            DataSet ds = dal.GetDataSet("Report_GetDocumentEntryList", dateFrom, dateTo, currencyID);
            List<ACDocumentEntrysInfo> documentEntryList = new List<ACDocumentEntrysInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                ACDocumentEntrysController objDocumentEntrysController = new ACDocumentEntrysController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACDocumentEntrysInfo objDocumentEntrysInfo = (ACDocumentEntrysInfo)objDocumentEntrysController.GetObjectFromDataRow(row);
                    documentEntryList.Add(objDocumentEntrysInfo);
                }
            }
            return documentEntryList;
        }

        /// <summary>
        /// Get document entry list by level
        /// </summary>
        /// <returns>List of document entry</returns>
        public List<ACDocumentEntrysInfo> GetDocumentEntryListByLevel(int level)
        {
            List<ACDocumentEntrysInfo> documentEntryList = new List<ACDocumentEntrysInfo>();
            DataSet ds = dal.GetDataSet("Report_GetDocumentEntryListByLevel", level);
            if (ds != null)
            {
                ACDocumentEntrysController objDocumentEntrysController = new ACDocumentEntrysController();
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ACDocumentEntrysInfo objDocumentEntrysInfo = (ACDocumentEntrysInfo)objDocumentEntrysController.GetObjectFromDataRow(dr);
                    documentEntryList.Add(objDocumentEntrysInfo);
                }
            }
            return documentEntryList;
        }

        /// <summary>
        /// Get account list by level
        /// </summary>
        /// <returns>List of account</returns>
        public List<ACAccountsInfo> GetAccountByLevel(int level)
        {
            List<ACAccountsInfo> accountList = new List<ACAccountsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetAccountByLevel", level);
            if (ds != null)
            {
                ACAccountsController objAccountsController = new ACAccountsController();
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ACAccountsInfo objAccountsInfo = (ACAccountsInfo)objAccountsController.GetObjectFromDataRow(dr);
                    accountList.Add(objAccountsInfo);
                }
            }
            return accountList;
        }

        /// <summary>
        /// Get cash flow list based on some criteria
        /// </summary>
        /// <param name="dateFrom">Search from date</param>
        /// <param name="dateTo">Search to date</param>
        /// <param name="currencyNo">currency no</param>
        /// <returns>Cash flow list</returns>
        public List<ACCashFlowsInfo> GetCashFlowList(DateTime? dateFrom, DateTime? dateTo, string currencyNo)
        {
            List<ACCashFlowsInfo> cashFlowList = new List<ACCashFlowsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetCashFlowList", dateFrom, dateTo, currencyNo);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ACCashFlowsController objCashFlowsController = new ACCashFlowsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACCashFlowsInfo objCashFlowsInfo = (ACCashFlowsInfo)objCashFlowsController.GetObjectFromDataRow(row);
                    cashFlowList.Add(objCashFlowsInfo);
                }
            }
            return cashFlowList;
        }

        /// <summary>
        /// Get input, output inventory list based on some criteria
        /// </summary>
        /// <param name="dateFrom">Search from date</param>
        /// <param name="dateTo">Search to date</param>
        /// <param name="stockID">The stock id</param>
        /// <param name="productID">The product id</param>
        /// <returns>The list inventory stock</returns>
        public List<ICInventoryStocksInfo> GetIOInventoryListBySomeCriteria(DateTime? dateFrom, DateTime? dateTo, int? stockID, int? productID, int? accountID)
        {
            List<ICInventoryStocksInfo> inventoryStockList = new List<ICInventoryStocksInfo>();
            ICInventoryStocksController objInventoryStocksController = new ICInventoryStocksController();
            DataSet ds = dal.GetDataSet("Report_GetIOInventoryList", dateFrom, dateTo, stockID, productID, accountID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICInventoryStocksInfo objInventoryStocksInfo = (ICInventoryStocksInfo)objInventoryStocksController.GetObjectFromDataRow(row);
                    inventoryStockList.Add(objInventoryStocksInfo);
                }
            }
            return inventoryStockList;
        }

        /// <summary>
        /// Get input, output inventory list based on some criteria
        /// </summary>
        /// <param name="dateFrom">Search from date</param>
        /// <param name="dateTo">Search to date</param>
        /// <param name="stockID">The stock id</param>
        /// <param name="productID">The product id</param>
        /// <returns>The list inventory stock</returns>
        public List<ICInventoryStocksInfo> GetIOInventoryListBySomeCriteriaByStockNoList(DateTime? dateFrom, DateTime? dateTo, string stockNoList,
                                                                                            int? productID, int? accountID, int? supplierID)
        {
            List<ICInventoryStocksInfo> inventoryStockList = new List<ICInventoryStocksInfo>();
            ICInventoryStocksController objInventoryStocksController = new ICInventoryStocksController();
            DataSet ds = dal.GetDataSet("Report_GetIOInventoryListByListOfStockNos", dateFrom, dateTo, productID, accountID, stockNoList, supplierID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICInventoryStocksInfo objInventoryStocksInfo = (ICInventoryStocksInfo)objInventoryStocksController.GetObjectFromDataRow(row);
                    inventoryStockList.Add(objInventoryStocksInfo);
                }
            }
            return inventoryStockList;
        }

        public List<ICInventoryStocksInfo> GetIOInventoryListBySomeCriteriaByStockNoListSearchByStock(DateTime? dateFrom, DateTime? dateTo, string stockNoList,
                                                                                            int? productID, int? accountID, int? supplierID)
        {
            List<ICInventoryStocksInfo> inventoryStockList = new List<ICInventoryStocksInfo>();
            ICInventoryStocksController objInventoryStocksController = new ICInventoryStocksController();
            DataSet ds = dal.GetDataSet("Report_GetIOInventoryListByListOfStockNosSearchByStock", dateFrom, dateTo, productID, accountID, stockNoList, supplierID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICInventoryStocksInfo objInventoryStocksInfo = (ICInventoryStocksInfo)objInventoryStocksController.GetObjectFromDataRow(row);
                    inventoryStockList.Add(objInventoryStocksInfo);
                }
            }
            return inventoryStockList;
        }

        /// <summary>
        /// Get input, output inventory list based on some criteria
        /// </summary>
        /// <param name="dateFrom">Search from date</param>
        /// <param name="dateTo">Search to date</param>
        /// <param name="stockID">The stock id</param>
        /// <param name="productID">The product id</param>
        /// <returns>The list inventory stock</returns>
        public List<ICInventoryStocksInfo> GetIOInventoryListBySomeCriteriaAndBatchProductID(DateTime? dateFrom, DateTime? dateTo, string stockNoList,
                                                                                            int? productID, int? accountID, int? supplierID, int? bathcProductID)
        {
            List<ICInventoryStocksInfo> inventoryStockList = new List<ICInventoryStocksInfo>();
            ICInventoryStocksController objInventoryStocksController = new ICInventoryStocksController();
            DataSet ds = dal.GetDataSet("Report_GetIOInventoryListBySomeCriteriaAndBatchProductID", dateFrom, dateTo, productID, accountID, stockNoList, supplierID, bathcProductID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICInventoryStocksInfo objInventoryStocksInfo = (ICInventoryStocksInfo)objInventoryStocksController.GetObjectFromDataRow(row);
                    if (objInventoryStocksInfo.ICType == "Receipt")
                    {
                        if (objInventoryStocksInfo.MMOperationNo == OperationNo.Donggoi || objInventoryStocksInfo.MMOperationNo == OperationNo.Thanhpham)
                        {
                            objInventoryStocksInfo.ICProductForBatchNo = string.Empty;
                            objInventoryStocksInfo.ICProductForBatchName = string.Empty;
                            objInventoryStocksInfo.ICProductForBatchDesc = string.Empty;
                        }
                    }
                    else if (objInventoryStocksInfo.ICType == "Shipment")
                    {
                        if (objInventoryStocksInfo.MMOperationNo == OperationNo.Thanhpham)
                        {
                            objInventoryStocksInfo.ICProductForBatchNo = string.Empty;
                            objInventoryStocksInfo.ICProductForBatchName = string.Empty;
                            objInventoryStocksInfo.ICProductForBatchDesc = string.Empty;
                        }
                    }
                    objInventoryStocksInfo.OperationKey = objInventoryStocksInfo.MMOperationOrder + "-" + objInventoryStocksInfo.MMOperationName;
                    inventoryStockList.Add(objInventoryStocksInfo);
                }
            }
            return inventoryStockList;
        }

        public List<ICInventoryStocksInfo> GetIOInventoryListByUnitcost(string stockNoList, int? productID, int? accountID, int? supplierID, int? departmentID, int? productGroup, string productType)
        {
            List<ICInventoryStocksInfo> inventoryStockList = new List<ICInventoryStocksInfo>();
            ICInventoryStocksController objInventoryStocksController = new ICInventoryStocksController();
            DataSet ds = dal.GetDataSet("Report_GetIOInventoryListByUnitcost", productID, accountID, stockNoList, supplierID, departmentID, productGroup, productType);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICInventoryStocksInfo objInventoryStocksInfo = (ICInventoryStocksInfo)objInventoryStocksController.GetObjectFromDataRow(row);
                    inventoryStockList.Add(objInventoryStocksInfo);
                }
            }
            return inventoryStockList;
        }
        public List<ICInventoryStocksInfo> GetIOInventoryListByUnitcostAndTypeOther(string stockNoList, int? productID, int? accountID, int? supplierID, int? departmentID, int? productGroup)
        {
            List<ICInventoryStocksInfo> inventoryStockList = new List<ICInventoryStocksInfo>();
            ICInventoryStocksController objInventoryStocksController = new ICInventoryStocksController();
            DataSet ds = dal.GetDataSet("Report_GetIOInventoryListByUnitcostAndTypeOther", productID, accountID, stockNoList, supplierID, departmentID, productGroup);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICInventoryStocksInfo objInventoryStocksInfo = (ICInventoryStocksInfo)objInventoryStocksController.GetObjectFromDataRow(row);
                    inventoryStockList.Add(objInventoryStocksInfo);
                }
            }
            return inventoryStockList;
        }
        public List<ICInventoryStocksInfo> GetIOInventoryListByListOfStockNosGroupByDesc(DateTime? dateFrom, DateTime? dateTo, string stockNoList,
                                                                                            int? productID, int? accountID, int? supplierID)
        {
            List<ICInventoryStocksInfo> inventoryStockList = new List<ICInventoryStocksInfo>();
            ICInventoryStocksController objInventoryStocksController = new ICInventoryStocksController();
            DataSet ds = dal.GetDataSet("Report_GetIOInventoryListByListOfStockNosGroupByDesc", dateFrom, dateTo, productID, accountID, stockNoList, supplierID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICInventoryStocksInfo objInventoryStocksInfo = (ICInventoryStocksInfo)objInventoryStocksController.GetObjectFromDataRow(row);
                    inventoryStockList.Add(objInventoryStocksInfo);
                }
            }
            return inventoryStockList;
        }


        public List<ICInventoryStocksInfo> GetIOInventoryListByListOfStockNosGroupByModel(DateTime? dateFrom, DateTime? dateTo, string stockNoList,
                                                                                            int? productID, int? accountID, int? supplierID)
        {
            List<ICInventoryStocksInfo> inventoryStockList = new List<ICInventoryStocksInfo>();
            ICInventoryStocksController objInventoryStocksController = new ICInventoryStocksController();
            DataSet ds = dal.GetDataSet("Report_GetIOInventoryListByListOfStockNosGroupByModel", dateFrom, dateTo, productID, accountID, stockNoList, supplierID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICInventoryStocksInfo objInventoryStocksInfo = (ICInventoryStocksInfo)objInventoryStocksController.GetObjectFromDataRow(row);
                    inventoryStockList.Add(objInventoryStocksInfo);
                }
            }
            return inventoryStockList;
        }


        /// <summary>
        /// Get document entry list by document type of invoice in
        /// </summary>
        /// <param name="dateFrom">The date from</param>
        /// <param name="dateTo">The date to</param>
        /// <param name="currencyID">The currency id</param>
        /// <returns>List of document entry</returns>
        public List<ACDocumentEntrysInfo> GetDocumentEntryListByDocumentTypeOfInvoiceIn(DateTime? dateFrom, DateTime dateTo, int? currencyID)
        {
            DataSet ds = dal.GetDataSet("Report_GetDocumentEntryListByInvoiceIn", dateFrom, dateTo, currencyID);
            List<ACDocumentEntrysInfo> documentEntryList = new List<ACDocumentEntrysInfo>();
            ACDocumentEntrysController objDocumentEntrysController = new ACDocumentEntrysController();
            if (ds != null)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ACDocumentEntrysInfo objDocumentEntrysInfo = (ACDocumentEntrysInfo)objDocumentEntrysController.GetObjectFromDataRow(dr);
                    documentEntryList.Add(objDocumentEntrysInfo);
                }
            }
            return documentEntryList;
        }

        /// <summary>
        /// Get stock card list by some criteria
        /// </summary>
        /// <param name="dateFrom">The date from</param>
        /// <param name="dateTo">The date to</param>
        /// <param name="stockID">Stock id</param>
        /// <param name="productID">Product id</param>
        /// <returns>List of stock card</returns>
        public List<ICReceiptItemsInfo> GetStockCardListBySomeCriteria(DateTime? dateFrom, DateTime? dateTo, int? stockID, int? productID)
        {
            DataSet ds = dal.GetDataSet("Report_GetStockCardList", dateFrom, dateTo, stockID, productID);
            List<ICReceiptItemsInfo> stockCardList = new List<ICReceiptItemsInfo>();
            ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
            if (ds != null)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(dr);
                    stockCardList.Add(objReceiptItemsInfo);
                }
            }
            return stockCardList;
        }

        /// <summary>
        /// Get stock card list by some criteria
        /// </summary>
        /// <param name="dateFrom">The date from</param>
        /// <param name="dateTo">The date to</param>
        /// <param name="stockID">Stock id</param>
        /// <param name="productID">Product id</param>
        /// <returns>List of stock card</returns>
        public List<ICReceiptItemsInfo> GetStockCardListByStockNoListAndSomeCriteria(DateTime? dateFrom, DateTime? dateTo, int? productID, string stockNoList)
        {
            DataSet ds = dal.GetDataSet("Report_GetStockCardListByStockNoList", dateFrom, dateTo, productID, stockNoList);
            List<ICReceiptItemsInfo> stockCardList = new List<ICReceiptItemsInfo>();
            ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
            if (ds != null)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(dr);
                    stockCardList.Add(objReceiptItemsInfo);
                }
            }
            return stockCardList;
        }

        /// <summary>
        /// Get document entry list by document type of invoice
        /// </summary>
        /// <param name="dateFrom">The date from</param>
        /// <param name="dateTo">The date to</param>
        /// <param name="currencyID">The currency id</param>
        /// <returns>List of document entry</returns>
        public List<ACDocumentEntrysInfo> GetDocumentEntryListByDocumentTypeOfInvoice(DateTime? dateFrom, DateTime dateTo, int? currencyID)
        {
            DataSet ds = dal.GetDataSet("Report_GetDocumentEntryListByInvoice", dateFrom, dateTo, currencyID);
            List<ACDocumentEntrysInfo> documentEntryList = new List<ACDocumentEntrysInfo>();
            ACDocumentEntrysController objDocumentEntrysController = new ACDocumentEntrysController();
            if (ds != null)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ACDocumentEntrysInfo objDocumentEntrysInfo = (ACDocumentEntrysInfo)objDocumentEntrysController.GetObjectFromDataRow(dr);
                    documentEntryList.Add(objDocumentEntrysInfo);
                }
            }
            return documentEntryList;
        }

        /// <summary>
        /// Gets the bank transaction item list.
        /// </summary>
        /// <param name="transactionID">The transaction ID.</param>
        /// <returns>List of bank transaction item</returns>
        public List<ACBankTransactionItemsInfo> GetBankTransactionItemList(int transactionID)
        {
            List<ACBankTransactionItemsInfo> bankTransactionItemList = new List<ACBankTransactionItemsInfo>();
            ACBankTransactionItemsController objBankTransactionItemsController = new ACBankTransactionItemsController();
            DataSet ds = dal.GetDataSet("Report_GetBankTransactionItemByTransactionID", transactionID);
            if (ds != null)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ACBankTransactionItemsInfo objBankTransactionItemsInfo = (ACBankTransactionItemsInfo)objBankTransactionItemsController.GetObjectFromDataRow(dr);
                    bankTransactionItemList.Add(objBankTransactionItemsInfo);
                }
            }
            return bankTransactionItemList;
        }

        public List<ACBankTransactionItemsInfo> GetBankTransactionItemByAPSupplierPaymentID(int supplierPaymentID)
        {
            List<ACBankTransactionItemsInfo> bankTransactionItemList = new List<ACBankTransactionItemsInfo>();
            ACBankTransactionItemsController objBankTransactionItemsController = new ACBankTransactionItemsController();
            DataSet ds = dal.GetDataSet("Report_GetBankTransactionItemByAPSupplierPaymentID", supplierPaymentID);
            if (ds != null)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ACBankTransactionItemsInfo objBankTransactionItemsInfo = (ACBankTransactionItemsInfo)objBankTransactionItemsController.GetObjectFromDataRow(dr);
                    bankTransactionItemList.Add(objBankTransactionItemsInfo);
                }
            }
            return bankTransactionItemList;
        }
        #endregion

        /// <summary>
        /// Get payroll card of employees searched by some criteria
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <param name="departmentID">Department id</param>
        /// <param name="departmentRoomID">Department room id</param>
        /// <param name="employeeID">Employee id</param>
        /// <param name="fromMonth">Start month of the card</param>
        /// <param name="toMonth">End month of the card</param>
        /// <returns>List of employee payrolls represents the payroll card</returns>
        public List<HREmployeePayRollsInfo> GetPayRollCard(int? locationID,
                                                        int? branchID,
                                                        int? departmentID,
                                                        int? departmentRoomID,
                                                        int? employeeID,
                                                        DateTime fromMonth,
                                                        DateTime toMonth)
        {
            List<HREmployeePayRollsInfo> employeePayRolls = new List<HREmployeePayRollsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetPayRollCard", locationID, branchID, departmentID, departmentRoomID, employeeID, fromMonth, toMonth);
            if (ds.Tables.Count > 0)
            {
                HREmployeePayRollsController objEmployeePayRollsController = new HREmployeePayRollsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    HREmployeePayRollsInfo employeePayRoll = (HREmployeePayRollsInfo)objEmployeePayRollsController.GetObjectFromDataRow(row);
                    employeePayRolls.Add(employeePayRoll);
                }
            }
            return employeePayRolls;
        }

        /// <summary>
        /// Get the sale details of an employee, including all documents relating to sale info
        /// </summary>
        /// <param name="employeeID">Employee id</param>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns></returns>
        public List<EmployeeSaleDetailInfo> GetEmployeeSaleDetails(int employeeID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("Report_GetEmployeeSaleDetails", employeeID, fromDate, toDate);
            List<EmployeeSaleDetailInfo> saleDetails = new List<EmployeeSaleDetailInfo>();
            if (ds.Tables.Count > 0)
            {
                EmployeeSaleDetailController objEmployeeSaleDetailController = new EmployeeSaleDetailController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    EmployeeSaleDetailInfo saleDetail = (EmployeeSaleDetailInfo)objEmployeeSaleDetailController.GetObjectFromDataRow(row);
                    saleDetails.Add(saleDetail);
                }
            }
            return saleDetails;
        }

        /// <summary>
        /// Get equipment items of a shipment
        /// </summary>
        /// <param name="shipmentID">Shipment id</param>
        /// <returns>List of equipment items</returns>
        public List<ICShipmentItemsInfo> GetEquipmentItemsByShipmentID(int shipmentID)
        {
            DataSet ds = dal.GetDataSet("Report_GetEquipmentItemsByShipmentID", shipmentID);
            ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
            return (List<ICShipmentItemsInfo>)objShipmentItemsController.GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get all items of a shipment
        /// </summary>
        /// <param name="shipmentID">Shipment id</param>
        /// <returns>List of shipment items</returns>
        public List<ICShipmentItemsInfo> GetShipmentItemsByShipmentID(int shipmentID)
        {
            DataSet ds = dal.GetDataSet("Report_GetShipmentItemsByShipmentID", shipmentID);
            ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
            return (List<ICShipmentItemsInfo>)objShipmentItemsController.GetListFromDataSet(ds);
        }

        public List<ICShipmentItemsInfo> GetShipmentItemsByShipmentIDForReport(int shipmentID)
        {
            DataSet ds = dal.GetDataSet("Report_GetShipmentItemsByShipmentIDForReport", shipmentID);

            List<ICShipmentItemsInfo> List = new List<ICShipmentItemsInfo>();
            if (ds != null && ds.Tables.Count > 0)
            {
                ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
                int count = 0;
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    count++;
                    ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)objShipmentItemsController.GetObjectFromDataRow(row);
                    objShipmentItemsInfo.STT = count;
                    char[] charsToTrim = { '\r', '\n', '\t', ' ' };
                    objShipmentItemsInfo.ICShipmentDesc.Trim(charsToTrim);
                    List.Add(objShipmentItemsInfo);
                }
            }
            return List;
        }

        /// <summary>
        /// Get all items of an equipment transfer document
        /// </summary>
        /// <param name="equipmentTransferID">Equipment transfer id</param>
        /// <returns>List of items</returns>
        public List<ACEquipmentTransferItemsInfo> GetItemsByEquipmentTransferID(int equipmentTransferID)
        {
            DataSet ds = dal.GetDataSet("Report_GetItemsByEquipmentTransferID", equipmentTransferID);
            ACEquipmentTransferItemsController objEquipmentTransferItemsController = new ACEquipmentTransferItemsController();
            return (List<ACEquipmentTransferItemsInfo>)objEquipmentTransferItemsController.GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get all items of an asset receipt
        /// </summary>
        /// <param name="assetReceiptID">Asset receipt id</param>
        /// <returns>List of items</returns>
        public List<ACAssetReceiptItemsInfo> GetItemsByAssetReceiptID(int assetReceiptID)
        {
            DataSet ds = dal.GetDataSet("Report_GetItemsByAssetReceiptID", assetReceiptID);
            ACAssetReceiptItemsController objAssetReceiptItemsController = new ACAssetReceiptItemsController();
            return (List<ACAssetReceiptItemsInfo>)objAssetReceiptItemsController.GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get all items of an asset shipment
        /// </summary>
        /// <param name="assetShipmentID">Asset shipment id</param>
        /// <returns>List of items</returns>
        public List<ACAssetShipmentItemsInfo> GetItemsByAssetShipmentID(int assetShipmentID)
        {
            DataSet ds = dal.GetDataSet("Report_GetItemsByAssetShipmentID", assetShipmentID);
            ACAssetShipmentItemsController objAssetShipmentItemsController = new ACAssetShipmentItemsController();
            return (List<ACAssetShipmentItemsInfo>)objAssetShipmentItemsController.GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get all items of an asset transfer
        /// </summary>
        /// <param name="assetTransferID">Asset transfer id</param>
        /// <returns>List of items</returns>
        public List<ACAssetTransferItemsInfo> GetItemsByAssetTransferID(int assetTransferID)
        {
            DataSet ds = dal.GetDataSet("Report_GetItemsByAssetTransferID", assetTransferID);
            ACAssetTransferItemsController objAssetTransferItemsController = new ACAssetTransferItemsController();
            return (List<ACAssetTransferItemsInfo>)objAssetTransferItemsController.GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get the sale summary overtime based on some criteria
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <param name="customerID">Customer id</param>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns>List of overtime chart points represent the sale summary</returns>
        public List<OverTimeChartPointInfo> GetSaleOverTime(int? branchID, int? customerID, DateTime? fromDate, DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("Report_GetSaleOverTime", branchID, customerID, fromDate, toDate);
            OverTimeChartPointController controller = new OverTimeChartPointController();
            return (List<OverTimeChartPointInfo>)controller.GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get the sale summary overtime of a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>        
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns>List of overtime chart points represent the sale summary</returns>
        public List<OverTimeChartPointInfo> GetBranchSaleOverTime(int? branchID, DateTime? fromDate, DateTime? toDate)
        {
            return GetSaleOverTime(branchID, null, fromDate, toDate);
        }

        /// <summary>
        /// Get the sale summary overtime of a customer
        /// </summary>        
        /// <param name="customerID">Customer id</param>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns>List of overtime chart points represent the sale summary</returns>
        public List<OverTimeChartPointInfo> GetCustomerSaleOverTime(int? customerID, DateTime? fromDate, DateTime? toDate)
        {
            return GetSaleOverTime(null, customerID, fromDate, toDate);
        }

        /// <summary>
        /// Get the owing history of a customer
        /// </summary>
        /// <param name="customerID">Customer id</param>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <returns>Documents represent the owing history</returns>
        public List<ACDocumentsInfo> GetCustomerOwingHistory(
                                                                int customerID,
                                                                DateTime fromDate,
                                                                DateTime toDate,
                                                                int? currencyID,
                                                                int? locationID,
                                                                int? branchID)
        {
            DataSet ds = dal.GetDataSet("Report_GetCustomerOwingHistory",
                                        customerID,
                                        fromDate,
                                        toDate,
                                        currencyID,
                                        locationID,
                                        branchID);
            List<ACDocumentsInfo> documents = new List<ACDocumentsInfo>();
            if (ds.Tables.Count > 0)
            {
                ACDocumentsController objDocumentsController = new ACDocumentsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACDocumentsInfo document = (ACDocumentsInfo)objDocumentsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }

        /// <summary>
        /// Get entries of a document
        /// </summary>
        /// <param name="documentID">Document id</param>
        /// <returns>List of entries</returns>
        public List<ACDocumentEntrysInfo> GetEntriesByDocumentID(int documentID)
        {
            ACDocumentEntrysController objDocumentEntrysController = new ACDocumentEntrysController();
            DataSet ds = dal.GetDataSet("Report_GetEntriesByDocumentID", documentID);
            return (List<ACDocumentEntrysInfo>)objDocumentEntrysController.GetListFromDataSet(ds);
        }
        /// <summary>
        /// Get the owing history of a Suplier
        /// </summary>
        /// <param name="customerID">Suplier id</param>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <returns>Documents represent the owing history</returns>
        public List<ACDocumentsInfo> GetSuplierOwingHistory(
                                                                int supplierID,
                                                                DateTime fromDate,
                                                                DateTime toDate,
                                                                int? currencyID,
                                                                int? locationID,
                                                                int? branchID)
        {
            DataSet ds = dal.GetDataSet("Report_GetSupplierOwingHistory",
                                        supplierID,
                                        fromDate,
                                        toDate,
                                        currencyID,
                                        locationID,
                                        branchID);
            List<ACDocumentsInfo> documents = new List<ACDocumentsInfo>();
            if (ds.Tables.Count > 0)
            {
                ACDocumentsController objDocumentsController = new ACDocumentsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACDocumentsInfo document = (ACDocumentsInfo)objDocumentsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }

        /// <summary>
        /// Get invoice item list based on some criteria
        /// </summary>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="customerID">Customer id</param>   
        /// <param name="productID">Product id</param>
        /// <param name="dateFrom">Date the result is filtered from</param>
        /// <param name="dateTo">Date the result is filtered to</param>
        /// <param name="invoiceType">Type of the invoice</param>
        /// <param name="employeeID">Employee id</param>
        /// <returns>List of the invoice item</returns>
        public List<ARInvoiceItemsInfo> GetInvoiceItemsList1(
                                                    int? locationID,
                                                    int? branchID,
                                                    int? customerID,
                                                    int? productID,
                                                    string objectType,
                                                    DateTime? dateFrom,
                                                    DateTime? dateTo,
                                                    string invoiceType,
                                                    int? employeeID)
        {
            List<ARInvoiceItemsInfo> invoiceItemList = new List<ARInvoiceItemsInfo>();
            ARInvoiceItemsController objInvoiceItemsController = new ARInvoiceItemsController();
            DataSet ds = dal.GetDataSet("Report_GetInvoiceItemsList",
                                    locationID,
                                    branchID,
                                    customerID,
                                    objectType,
                                    productID,
                                    dateFrom,
                                    dateTo,
                                    invoiceType,
                                    employeeID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                List<int> invoiceIDList = new List<int>();
                int rowNumber = 0;
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARInvoiceItemsInfo objInvoiceItemsInfo = (ARInvoiceItemsInfo)objInvoiceItemsController.GetObjectFromDataRow(row);
                    bool isExistInvoiceID = invoiceIDList.Exists(e => e == objInvoiceItemsInfo.FK_ARInvoiceID);
                    if (!isExistInvoiceID)
                    {
                        rowNumber += 1;
                        ARInvoiceItemsInfo item = new ARInvoiceItemsInfo();
                        item.ARInvoiceRowNumber = rowNumber.ToString("00");
                        item.FK_ARInvoiceID = objInvoiceItemsInfo.FK_ARInvoiceID;
                        item.ARInvoiceNo = objInvoiceItemsInfo.ARInvoiceNo;
                        item.ARInvoiceStatusDisplayedText = objInvoiceItemsInfo.ARInvoiceStatusDisplayedText;
                        item.ARCustomerContactAddressLine3 = objInvoiceItemsInfo.ARCustomerContactAddressLine3;
                        item.ARSellerName = objInvoiceItemsInfo.ARSellerName;
                        item.ARCustomerName = objInvoiceItemsInfo.ARCustomerName;
                        item.ARInvoiceTotalAmount = objInvoiceItemsInfo.ARInvoiceTotalAmount;
                        item.ARInvoiceDepositBalance = objInvoiceItemsInfo.ARInvoiceDepositBalance;
                        item.ARInvoiceBalanceDue = objInvoiceItemsInfo.ARInvoiceBalanceDue;
                        item.ARInvoiceReturnAmount = objInvoiceItemsInfo.ARInvoiceReturnAmount;
                        item.ARInvoiceDate = objInvoiceItemsInfo.ARInvoiceDate;
                        item.ARInvoiceItemTotalAmount = objInvoiceItemsInfo.ARInvoiceTotalAmount;
                        //item.ARInvoiceBalanceDue = item.ARInvoiceTotalAmount - item.ARInvoiceDepositBalance - item.ARInvoiceReturnAmount
                        //        - item.ARInvoicePaymentAmount - item.CustomerRepaidByOwingExchangeMethod 
                        //        + (item.ARCustomerRepaid + item.CustomerPaymentByOwingExchangeMethod);
                        invoiceIDList.Add(objInvoiceItemsInfo.FK_ARInvoiceID);
                        item.ARInvoicePaymentAmount += item.CustomerRepaidByOwingExchangeMethod;
                        item.ARCustomerRepaid += item.CustomerPaymentByOwingExchangeMethod;
                        //item.ARInvoicePaymentAmount = objInvoiceItemsInfo.ARInvoicePaymentAmount;

                        invoiceItemList.Add(item);

                    }

                    objInvoiceItemsInfo.ARInvoiceNo = string.Empty;
                    objInvoiceItemsInfo.ARInvoiceStatusDisplayedText = string.Empty;
                    objInvoiceItemsInfo.ARCustomerContactAddressLine3 = string.Empty;
                    objInvoiceItemsInfo.ARSellerName = string.Empty;
                    objInvoiceItemsInfo.ARCustomerName = string.Empty;
                    objInvoiceItemsInfo.ARInvoiceTotalAmount = 0;
                    objInvoiceItemsInfo.ARInvoiceDepositBalance = 0;
                    objInvoiceItemsInfo.ARInvoiceBalanceDue = 0;
                    objInvoiceItemsInfo.ARInvoicePaymentAmount = 0;
                    objInvoiceItemsInfo.ARInvoiceReturnAmount = 0;
                    objInvoiceItemsInfo.CustomerPaymentByOwingExchangeMethod = 0;
                    objInvoiceItemsInfo.CustomerRepaidByOwingExchangeMethod = 0;
                    objInvoiceItemsInfo.ARInvoiceDate = DateTime.MaxValue;
                    invoiceItemList.Add(objInvoiceItemsInfo);
                }
            }

            foreach (var item in invoiceItemList)
            {
                if (item.ARInvoiceTotalAmount == 0)
                {
                    item.ARInvoiceTotalAmount = (item.ARInvoiceItemProductUnitPrice * item.ARInvoiceItemProductQty) - item.ARInvoiceItemDiscountAmount + item.ARInvoiceItemTaxAmount;
                    item.ICProductTotalUnitCost = item.ICProductUnitCost * item.ARInvoiceItemProductQty;
                    //item.ICProductGrossProfit = item.ARInvoiceTotalAmount - item.ICProductTotalUnitCost;
                    item.ICProductGrossProfit = item.ARInvoiceItemNetAmount - item.ICProductTotalUnitCost;
                }
                else
                {
                    decimal totalUnitCost = invoiceItemList.Where(p => p.FK_ARInvoiceID == item.FK_ARInvoiceID).Select(s => s.ICProductUnitCost).Sum();
                    item.ICProductUnitCost = totalUnitCost;
                    totalUnitCost = invoiceItemList.Where(p => p.FK_ARInvoiceID == item.FK_ARInvoiceID).Select(s => s.ICProductUnitCost * s.ARInvoiceItemProductQty).Sum();
                    item.ICProductTotalUnitCost = totalUnitCost;
                    //item.ICProductGrossProfit = item.ARInvoiceItemNetAmount - totalUnitCost;
                    item.ICProductGrossProfit = item.ARInvoiceItemNetAmount - item.ICProductTotalUnitCost;
                }
            }
            return invoiceItemList;
        }

        /// <summary>
        /// Get invoice item list based on some criteria
        /// </summary>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="customerID">Customer id</param>   
        /// <param name="productID">Product id</param>
        /// <param name="dateFrom">Date the result is filtered from</param>
        /// <param name="dateTo">Date the result is filtered to</param>
        /// <param name="invoiceType">Type of the invoice</param>
        /// <param name="employeeID">Employee id</param>
        /// <returns>List of the invoice item</returns>
        public List<ARInvoiceItemsInfo> GetInvoiceItemsListBySaleOrder(
                                                    int? locationID,
                                                    int? branchID,
                                                    int? objectID,
                                                    string objectType,
                                                    int? productID,
                                                    DateTime? dateFrom,
                                                    DateTime? dateTo,
                                                    string invoiceType,
                                                    int? employeeID)
        {
            List<ARInvoiceItemsInfo> invoiceItemList = new List<ARInvoiceItemsInfo>();
            ARInvoiceItemsController objInvoiceItemsController = new ARInvoiceItemsController();
            DataSet ds = dal.GetDataSet("Report_GetInvoiceItemsListBySaleOrder",
                                        locationID,
                                        branchID,
                                        objectID,
                                        objectType,
                                        productID,
                                        dateFrom,
                                        dateTo,
                                        invoiceType,
                                        employeeID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                List<int> invoiceIDList = new List<int>();
                List<ARInvoiceItemsInfo> dataSource = new List<ARInvoiceItemsInfo>();
                int rowNumber = 0;
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARInvoiceItemsInfo objInvoiceItemsInfo = (ARInvoiceItemsInfo)objInvoiceItemsController.GetObjectFromDataRow(row);
                    dataSource.Add(objInvoiceItemsInfo);
                }
                dataSource = dataSource.OrderBy(item => item.ARInvoiceDate).ToList();
                foreach (ARInvoiceItemsInfo objInvoiceItemsInfo in dataSource)
                {
                    bool isExistInvoiceID = invoiceIDList.Exists(e => e == objInvoiceItemsInfo.FK_ARInvoiceID);
                    if (!isExistInvoiceID)
                    {
                        rowNumber += 1;
                        ARInvoiceItemsInfo item = new ARInvoiceItemsInfo();
                        item.ARInvoiceRowNumber = rowNumber.ToString("00");
                        item.FK_ARInvoiceID = objInvoiceItemsInfo.FK_ARInvoiceID;
                        item.ARInvoiceNo = objInvoiceItemsInfo.ARInvoiceNo;
                        item.ARInvoiceStatusDisplayedText = objInvoiceItemsInfo.ARInvoiceStatusDisplayedText;
                        item.ARCustomerContactAddressLine3 = objInvoiceItemsInfo.ARCustomerContactAddressLine3;
                        item.ARSellerName = objInvoiceItemsInfo.ARSellerName;
                        item.ACObjectName = objInvoiceItemsInfo.ACObjectName;
                        item.ARInvoiceTotalAmount = objInvoiceItemsInfo.ARInvoiceTotalAmount;
                        item.ARInvoiceDepositBalance = objInvoiceItemsInfo.ARInvoiceDepositBalance;
                        item.ARInvoiceBalanceDue = objInvoiceItemsInfo.ARInvoiceBalanceDue;
                        item.ARInvoiceReturnAmount = objInvoiceItemsInfo.ARInvoiceReturnAmount;
                        item.ARInvoiceDate = objInvoiceItemsInfo.ARInvoiceDate;
                        item.ARInvoiceItemTotalAmount = objInvoiceItemsInfo.ARInvoiceTotalAmount;
                        //item.ARInvoiceBalanceDue = item.ARInvoiceTotalAmount - item.ARInvoiceDepositBalance - item.ARInvoiceReturnAmount
                        //        - item.ARInvoicePaymentAmount - item.CustomerRepaidByOwingExchangeMethod 
                        //        + (item.ARCustomerRepaid + item.CustomerPaymentByOwingExchangeMethod);
                        invoiceIDList.Add(objInvoiceItemsInfo.FK_ARInvoiceID);
                        item.ARInvoicePaymentAmount += item.CustomerRepaidByOwingExchangeMethod;
                        item.ARCustomerRepaid += item.CustomerPaymentByOwingExchangeMethod;
                        //item.ARInvoicePaymentAmount = objInvoiceItemsInfo.ARInvoicePaymentAmount;
                        item.ARInvoiceReference = objInvoiceItemsInfo.ARInvoiceReference;
                        item.ARSaleOrderDateString = objInvoiceItemsInfo.ARSaleOrderDateString;

                        invoiceItemList.Add(item);

                    }

                    objInvoiceItemsInfo.ARInvoiceNo = string.Empty;
                    objInvoiceItemsInfo.ARInvoiceStatusDisplayedText = string.Empty;
                    objInvoiceItemsInfo.ARCustomerContactAddressLine3 = string.Empty;
                    objInvoiceItemsInfo.ARSellerName = string.Empty;
                    objInvoiceItemsInfo.ACObjectName = string.Empty;
                    objInvoiceItemsInfo.ARInvoiceTotalAmount = 0;
                    objInvoiceItemsInfo.ARInvoiceDepositBalance = 0;
                    objInvoiceItemsInfo.ARInvoiceBalanceDue = 0;
                    objInvoiceItemsInfo.ARInvoicePaymentAmount = 0;
                    objInvoiceItemsInfo.ARInvoiceReturnAmount = 0;
                    objInvoiceItemsInfo.CustomerPaymentByOwingExchangeMethod = 0;
                    objInvoiceItemsInfo.CustomerRepaidByOwingExchangeMethod = 0;
                    objInvoiceItemsInfo.ARInvoiceDate = DateTime.MaxValue;
                    objInvoiceItemsInfo.ARInvoiceReference = string.Empty;
                    objInvoiceItemsInfo.ARSaleOrderDateString = string.Empty;
                    objInvoiceItemsInfo.ARInvoiceItemTotalAmount = 0;
                    invoiceItemList.Add(objInvoiceItemsInfo);
                }
            }

            foreach (var item in invoiceItemList)
            {
                if (item.ARInvoiceTotalAmount == 0)
                {
                    item.ARInvoiceTotalAmount = (item.ARInvoiceItemProductUnitPrice * item.ARInvoiceItemProductQty) - item.ARInvoiceItemDiscountAmount + item.ARInvoiceItemTaxAmount;
                    item.ICProductTotalUnitCost = item.ICProductUnitCost * item.ARInvoiceItemProductQty;
                    item.ICProductGrossProfit = item.ARInvoiceTotalAmount - item.ICProductTotalUnitCost;
                }
                else
                {
                    decimal totalUnitCost = invoiceItemList.Where(p => p.FK_ARInvoiceID == item.FK_ARInvoiceID).Select(s => s.ICProductUnitCost).Sum();
                    item.ICProductUnitCost = totalUnitCost;
                    totalUnitCost = invoiceItemList.Where(p => p.FK_ARInvoiceID == item.FK_ARInvoiceID).Select(s => s.ICProductUnitCost * s.ARInvoiceItemProductQty).Sum();
                    item.ICProductTotalUnitCost = totalUnitCost;
                    item.ICProductGrossProfit = item.ARInvoiceTotalAmount - totalUnitCost;
                }
            }
            return invoiceItemList;
        }

        public List<APPurchaseOrdersInfo> GetPurchaseOrderForPurchaseOrderListReport(
                                                                int objectID,
                                                                string objectType,
                                                                DateTime fromDate,
                                                                DateTime toDate,
                                                                int branchID)
        {
            DataSet ds = dal.GetDataSet("APPurchaseOrders_GetPurchaseOrderForPurchaseOrderListReport",
                                        objectID,
                                        objectType,
                                        fromDate,
                                        toDate,
                                        branchID);
            List<APPurchaseOrdersInfo> documents = new List<APPurchaseOrdersInfo>();
            if (ds.Tables.Count > 0)
            {
                APPurchaseOrdersController objPurchaseOrdersController = new APPurchaseOrdersController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APPurchaseOrdersInfo document = (APPurchaseOrdersInfo)objPurchaseOrdersController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<APPurchaseOrderPaymentTimesInfo> GetPaymentTimeBySomeConditions(
                                                               int purchaseOrderID,
                                                               string type,
                                                               DateTime fromDate,
                                                               DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("APPurchaseOrderPaymentTimes_GetPaymentTimeBySomeConditions",
                                        purchaseOrderID,
                                        type,
                                        fromDate,
                                        toDate);
            List<APPurchaseOrderPaymentTimesInfo> documents = new List<APPurchaseOrderPaymentTimesInfo>();
            if (ds.Tables.Count > 0)
            {
                APPurchaseOrderPaymentTimesController objPurchaseOrdersController = new APPurchaseOrderPaymentTimesController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APPurchaseOrderPaymentTimesInfo document = (APPurchaseOrderPaymentTimesInfo)objPurchaseOrdersController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<APPOPaymentTimeInvoiceInDetailsInfo> GetPaymentTimeInvoiceInDetailBySomeConditions(
                                                               int purchaseOrderID,
                                                               DateTime fromDate,
                                                               DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("APPOPaymentTimeInvoiceInDetails_GetPaymentTimeInvoiceInDetailBySomeConditions",
                                        purchaseOrderID,
                                        fromDate,
                                        toDate);
            List<APPOPaymentTimeInvoiceInDetailsInfo> documents = new List<APPOPaymentTimeInvoiceInDetailsInfo>();
            if (ds.Tables.Count > 0)
            {
                APPOPaymentTimeInvoiceInDetailsController objPurchaseOrdersController = new APPOPaymentTimeInvoiceInDetailsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APPOPaymentTimeInvoiceInDetailsInfo document = (APPOPaymentTimeInvoiceInDetailsInfo)objPurchaseOrdersController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<APPurchaseOrdersInfo> GetPaymentInfoFromPurchaseOrderNo(string purchaseOrderNo, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("Report_GetPaymentInfoFromPurchaseOrderNo", purchaseOrderNo, fromDate, toDate);
            List<APPurchaseOrdersInfo> documents = new List<APPurchaseOrdersInfo>();
            if (ds.Tables.Count > 0)
            {
                APPurchaseOrdersController objPurchaseOrdersController = new APPurchaseOrdersController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APPurchaseOrdersInfo document = (APPurchaseOrdersInfo)objPurchaseOrdersController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }

        public List<ARSaleOrdersInfo> GetsaleorderBySomeConditions(string ARSaleForecastNo, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("Report_GetsaleorderBySomeConditions", ARSaleForecastNo, fromDate, toDate);
            List<ARSaleOrdersInfo> documents = new List<ARSaleOrdersInfo>();
            if (ds.Tables.Count > 0)
            {
                ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleOrdersInfo document = (ARSaleOrdersInfo)objSaleOrdersController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }

        //[NKVung] [Report RP099] [2015-11-13]
        public List<ARCustomersInfo> GetTotalOrderQtAndTotalOrderAmountByCustomerID(DateTime? fromdate, DateTime? todate, int customerID)
        {
            ARCustomersController objCustomersController = new ARCustomersController();
            DataSet ds = dal.GetDataSet("Report_GetTotalOrderQtAndTotalOrderAmountByCustomerID", fromdate, todate, customerID);
            return (List<ARCustomersInfo>)objCustomersController.GetListFromDataSet(ds);
        }
        //[NKVung] [Report]

        public List<ARSaleOrdersInfo> GetSaleOrderForSaleOrderListReport(
                                                                int objectID,
                                                                string objectType,
                                                                DateTime fromDate,
                                                                DateTime toDate,
                                                                int branchID)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrderForSaleOrderListReport",
                                        objectID,
                                        objectType,
                                        fromDate,
                                        toDate,
                                        branchID);
            List<ARSaleOrdersInfo> documents = new List<ARSaleOrdersInfo>();
            if (ds.Tables.Count > 0)
            {
                ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleOrdersInfo document = (ARSaleOrdersInfo)objSaleOrdersController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }

        public List<ARSOPaymentTimeInvoiceDetailsInfo> GetPaymentTimeInvoiceDetailBySomeConditions(
                                                              int saleOrderID,
                                                              DateTime fromDate,
                                                              DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ARSOPaymentTimeInvoiceDetails_GetPaymentTimeInvoiceDetailBySomeConditions",
                                        saleOrderID,
                                        fromDate,
                                        toDate);
            List<ARSOPaymentTimeInvoiceDetailsInfo> documents = new List<ARSOPaymentTimeInvoiceDetailsInfo>();
            if (ds.Tables.Count > 0)
            {
                ARSOPaymentTimeInvoiceDetailsController objSaleOrdersController = new ARSOPaymentTimeInvoiceDetailsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSOPaymentTimeInvoiceDetailsInfo document = (ARSOPaymentTimeInvoiceDetailsInfo)objSaleOrdersController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }

        public List<APPurchaseOrdersInfo> GetPaymentInfoFromSaleOrderNo(string saleOrderNo, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("Report_GetPaymentInfoFromSaleOrderNo", saleOrderNo, fromDate, toDate);
            List<APPurchaseOrdersInfo> documents = new List<APPurchaseOrdersInfo>();
            if (ds.Tables.Count > 0)
            {
                APPurchaseOrdersController objPurchaseOrdersController = new APPurchaseOrdersController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APPurchaseOrdersInfo document = (APPurchaseOrdersInfo)objPurchaseOrdersController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<ARSaleOrderPaymentTimesInfo> GetSOPaymentTimeBySomeConditions(
                                                                   int saleOrderID,
                                                                   string type,
                                                                   DateTime fromDate,
                                                                   DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrderPaymentTimes_GetPaymentTimeBySomeConditions",
                                        saleOrderID,
                                        type,
                                        fromDate,
                                        toDate);
            List<ARSaleOrderPaymentTimesInfo> documents = new List<ARSaleOrderPaymentTimesInfo>();
            if (ds.Tables.Count > 0)
            {
                ARSaleOrderPaymentTimesController objSaleOrdersController = new ARSaleOrderPaymentTimesController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleOrderPaymentTimesInfo document = (ARSaleOrderPaymentTimesInfo)objSaleOrdersController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }


        public List<ARSaleOrdersInfo> GetSaleOrderForToReport1(int objectID,
                                                               string objectType,
                                                               DateTime fromDate,
                                                               DateTime toDate,
                                                               string saleOrderPONo)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrderToReport1",
                                        objectID,
                                        objectType,
                                        fromDate,
                                        toDate,
                                        saleOrderPONo);
            List<ARSaleOrdersInfo> documents = new List<ARSaleOrdersInfo>();
            if (ds.Tables.Count > 0)
            {
                ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleOrdersInfo document = (ARSaleOrdersInfo)objSaleOrdersController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }

        public List<ARSaleOrderItemsInfo> GetSaleOrderItemsForToReport193(int objectID
                                                              , string objectType
                                                              , DateTime fromDate
                                                              , DateTime toDate
                                                              , int branchID
                                                              , int employeeID)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrderItems_GetSaleOrderItemsForToReport193",
                                        objectID,
                                        objectType,
                                        fromDate,
                                        toDate,
                                        branchID,
                                        employeeID);
            List<ARSaleOrderItemsInfo> saleOrderItems = new List<ARSaleOrderItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ARSaleOrderItemsController objSaleOrderTtemsController = new ARSaleOrderItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleOrderItemsInfo objSaleOrderItemsInfo = (ARSaleOrderItemsInfo)objSaleOrderTtemsController.GetObjectFromDataRow(row);
                    saleOrderItems.Add(objSaleOrderItemsInfo);
                }
            }
            return saleOrderItems;
        }

        public List<ARSaleOrderItemsInfo> GetSaleOrderItemsForReport194(int employeeID,
                                                              DateTime fromDate)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrderItems_GetSaleOrderItemsForReport194",
                                        employeeID,
                                        fromDate);
            List<ARSaleOrderItemsInfo> saleOrderItems = new List<ARSaleOrderItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ARSaleOrderItemsController objSaleOrderTtemsController = new ARSaleOrderItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleOrderItemsInfo objSaleOrderItemsInfo = (ARSaleOrderItemsInfo)objSaleOrderTtemsController.GetObjectFromDataRow(row);
                    saleOrderItems.Add(objSaleOrderItemsInfo);
                }
            }
            return saleOrderItems;
        }

        public List<ARSaleOrdersInfo> GetSaleOrderToReportCNPT(
                                                               int? objectID,
                                                               string objectType,
                                                               DateTime fromDate,
                                                               DateTime toDate,
                                                               int saleOrderID)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrderToReportCNPT",
                                        objectID,
                                        objectType,
                                        fromDate,
                                        toDate,
                                        saleOrderID);
            List<ARSaleOrdersInfo> documents = new List<ARSaleOrdersInfo>();
            if (ds.Tables.Count > 0)
            {
                ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    decimal TienNo = 0;
                    ARSaleOrdersInfo document = (ARSaleOrdersInfo)objSaleOrdersController.GetObjectFromDataRow(row);
                    if (document != null)
                    {
                        document.Khoang1 = 0;
                        document.Khoang2 = 0;
                        document.Khoang3 = 0;
                        document.NoTrongHan = 0;
                        if (document.ARSaleOrderTotalAmount > 0)
                        {
                            TienNo = document.SoTienHoaDon - ((document.SoTienHoaDon / document.ARSaleOrderTotalAmount) * document.SoTienDatCoc) - document.TienDaTra;
                        }
                        else
                        {
                            TienNo = document.SoTienHoaDon - document.TienDaTra;
                        }
                        if (document.SoNgayQuaHan >= 0 && document.SoNgayQuaHan <= 5)
                        {
                            document.Khoang1 = 0;
                            document.Khoang2 = 0;
                            document.Khoang3 = 0;
                            document.NoTrongHan = TienNo;
                        }
                        else if (document.SoNgayQuaHan >= 5 && document.SoNgayQuaHan <= 15)
                        {
                            document.Khoang1 = TienNo;
                            document.Khoang2 = 0;
                            document.Khoang3 = 0;
                            document.NoTrongHan = 0;
                        }
                        else if (document.SoNgayQuaHan >= 16 && document.SoNgayQuaHan <= 30)
                        {
                            document.Khoang1 = 0;
                            document.Khoang2 = TienNo;
                            document.Khoang3 = 0;
                            document.NoTrongHan = 0;
                        }
                        else if (document.SoNgayQuaHan > 30)
                        {
                            document.Khoang1 = 0;
                            document.Khoang2 = 0;
                            document.Khoang3 = TienNo;
                            document.NoTrongHan = 0;
                        }

                        document.TienCoc = document.SoTienDatCoc - document.TienCocDaTra;
                        if (document.TienCoc < 0)
                        {
                            document.TienCoc = 0;
                        }
                        if (document.TienCoc > 0 || TienNo > 1)
                        {
                            documents.Add(document);
                        }
                    }
                }
            }
            return documents;
        }
        public List<ARSaleOrdersInfo> ARSaleOrder_GetSubscribeProduction(
                                                                        DateTime fromDate,
                                                                        DateTime toDate,
                                                                        int FK_ARCustomerID,
                                                                        string ARSaleOrderNo,
                                                                        string MMBatchProductNo)
        {
            DataSet ds = dal.GetDataSet("RP_GetSubscribeProduction",
                                       fromDate,
                                       toDate,
                                       FK_ARCustomerID,
                                       ARSaleOrderNo,
                                       MMBatchProductNo);
            List<ARSaleOrdersInfo> documents = new List<ARSaleOrdersInfo>();
            if (ds.Tables.Count > 0)
            {
                ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleOrdersInfo document = (ARSaleOrdersInfo)objSaleOrdersController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<MMWoodPlanItemDetailsInfo> GetMMBatchProducts(
                                                               int customerID,
                                                               DateTime fromDate,
                                                               DateTime toDate,
                                                               int saleOrderID,
                                                               string batchProductNo)
        {
            DataSet ds = dal.GetDataSet("Report_GetMMBatchProducts",
                                        customerID,
                                        fromDate,
                                        toDate,
                                        saleOrderID,
                                        batchProductNo);
            List<MMWoodPlanItemDetailsInfo> documents = new List<MMWoodPlanItemDetailsInfo>();
            if (ds.Tables.Count > 0)
            {
                MMWoodPlanItemDetailsController objWoodPlanItemDetailsController = new MMWoodPlanItemDetailsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMWoodPlanItemDetailsInfo document = (MMWoodPlanItemDetailsInfo)objWoodPlanItemDetailsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetMMBatchProductProductTypeItems(
                                                               int customerID,
                                                               DateTime fromDate,
                                                               DateTime toDate,
                                                               int saleOrderID,
                                                               string batchProductNo,
                                                               string productType)
        {
            DataSet ds = dal.GetDataSet("Report_GetMMBatchProductProductItems",
                                        customerID,
                                        fromDate,
                                        toDate,
                                        saleOrderID,
                                        batchProductNo,
                                        productType);
            List<MMBatchProductProductionNormItemsInfo> documents = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                MMBatchProductProductionNormItemsController objBatchProductProductionNormItemsController = new MMBatchProductProductionNormItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo document = (MMBatchProductProductionNormItemsInfo)objBatchProductProductionNormItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        //[NKVung] [Report OrderTracking] [2015-12-03]  [START]
        public List<MMBatchProductsInfo> GetOrderTrackingWoodBySomeCriteria(int customerID, int saleOrderID, int batchProductID, DateTime? fromdate, DateTime? todate)
        {
            MMBatchProductsController objBatchProductsController = new MMBatchProductsController();
            DataSet ds = dal.GetDataSet("Report_GetOrderTrackingWoodBySomeCriteria", customerID, saleOrderID, batchProductID, fromdate, todate);
            return (List<MMBatchProductsInfo>)objBatchProductsController.GetListFromDataSet(ds);
        }
        public List<MMBatchProductsInfo> GetOrderTrackingOtherBySomeCriteria(int customerID, int saleOrderID, int batchProductID, DateTime? fromdate, DateTime? todate, string type)
        {
            MMBatchProductsController objBatchProductsController = new MMBatchProductsController();
            DataSet ds = dal.GetDataSet("Report_GetOrderTrackingOtherBySomeCriteria", customerID, saleOrderID, batchProductID, fromdate, todate, type);
            return (List<MMBatchProductsInfo>)objBatchProductsController.GetListFromDataSet(ds);
        }

        public List<MMBatchProductsInfo> GetOrderTrackingIngredientPaintBySomeCriteria(int customerID, int saleOrderID, int batchProductID, DateTime? fromdate, DateTime? todate, string type)
        {
            MMBatchProductsController objBatchProductsController = new MMBatchProductsController();
            DataSet ds = dal.GetDataSet("Report_GetOrderTrackingIngredientPaintBySomeCriteria", customerID, saleOrderID, batchProductID, fromdate, todate, type);
            return (List<MMBatchProductsInfo>)objBatchProductsController.GetListFromDataSet(ds);
        }

        public List<MMBatchProductsInfo> GetOrderTrackingOtherBySomeCriteriaPackaging(int customerID, int saleOrderID, int batchProductID, DateTime? fromdate, DateTime? todate, string type)
        {
            MMBatchProductsController objBatchProductsController = new MMBatchProductsController();
            DataSet ds = dal.GetDataSet("Report_GetOrderTrackingOtherBySomeCriteriaPackaging", customerID, saleOrderID, batchProductID, fromdate, todate, type);
            return (List<MMBatchProductsInfo>)objBatchProductsController.GetListFromDataSet(ds);
        }

        public List<MMBatchProductsInfo> GetOrderTrackingOutSourcingBySomeCriteria(int customerID, int saleOrderID, int batchProductID, DateTime? fromdate, DateTime? todate, string resourceType)
        {
            MMBatchProductsController objBatchProductsController = new MMBatchProductsController();
            DataSet ds = dal.GetDataSet("Report_GetOrderTrackingOutSourcingBySomeCriteria", customerID, saleOrderID, batchProductID, fromdate, todate, resourceType);
            return (List<MMBatchProductsInfo>)objBatchProductsController.GetListFromDataSet(ds);
        }
        //[NKVung] [END]
        public List<MMBatchProductsInfo> GetAllMMBatchproduct(
                                                               int customerID,
                                                               DateTime fromDate,
                                                               DateTime toDate,
                                                               int saleOrderID,
                                                               string batchProductNo)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllMMBatchProduct",
                                        customerID,
                                        fromDate,
                                        toDate,
                                        saleOrderID,
                                        batchProductNo);
            List<MMBatchProductsInfo> documents = new List<MMBatchProductsInfo>();
            if (ds.Tables.Count > 0)
            {
                MMBatchProductsController objBatchProductsController = new MMBatchProductsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductsInfo document = (MMBatchProductsInfo)objBatchProductsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<MMWoodPlansInfo> GetAllMMWoodPlans(int batchproductid)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllMMWoodPlans", batchproductid);
            List<MMWoodPlansInfo> documents = new List<MMWoodPlansInfo>();
            if (ds.Tables.Count > 0)
            {
                MMWoodPlansController objWoodPlansController = new MMWoodPlansController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMWoodPlansInfo document = (MMWoodPlansInfo)objWoodPlansController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<MMWoodPlanItemDetailsInfo> GetAllMMWoodPlansDetail(int batchproductid)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllMMWoodPlansDetail", batchproductid);
            List<MMWoodPlanItemDetailsInfo> documents = new List<MMWoodPlanItemDetailsInfo>();
            if (ds.Tables.Count > 0)
            {
                MMWoodPlanItemDetailsController objWoodPlansController = new MMWoodPlanItemDetailsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMWoodPlanItemDetailsInfo document = (MMWoodPlanItemDetailsInfo)objWoodPlansController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<MMAllocationPlansInfo> GetAllAllocationPlans(int batchproductid)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllAllocationPlans", batchproductid);
            List<MMAllocationPlansInfo> documents = new List<MMAllocationPlansInfo>();
            if (ds.Tables.Count > 0)
            {
                MMAllocationPlansController objWoodPlansController = new MMAllocationPlansController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMAllocationPlansInfo document = (MMAllocationPlansInfo)objWoodPlansController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<MMAllocationProposalsInfo> GetAllAllocationProposals(int batchproductid)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllAllocationProposals", batchproductid);
            List<MMAllocationProposalsInfo> documents = new List<MMAllocationProposalsInfo>();
            if (ds.Tables.Count > 0)
            {
                MMAllocationProposalsController objWoodPlansController = new MMAllocationProposalsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMAllocationProposalsInfo document = (MMAllocationProposalsInfo)objWoodPlansController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<ICShipmentsInfo> GetAllShipments(int batchproductid)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllShipments", batchproductid);
            List<ICShipmentsInfo> documents = new List<ICShipmentsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICShipmentsController objWoodPlansController = new ICShipmentsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICShipmentsInfo document = (ICShipmentsInfo)objWoodPlansController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<MMPurchasePlansInfo> GetAllPurchasePlans(int batchproductid)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllPurchasePlans", batchproductid);
            List<MMPurchasePlansInfo> documents = new List<MMPurchasePlansInfo>();
            if (ds.Tables.Count > 0)
            {
                MMPurchasePlansController objPurchasePlansController = new MMPurchasePlansController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMPurchasePlansInfo document = (MMPurchasePlansInfo)objPurchasePlansController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<APProposalsInfo> GetAllProposals(int batchproductid)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllProposals", batchproductid);
            List<APProposalsInfo> documents = new List<APProposalsInfo>();
            if (ds.Tables.Count > 0)
            {
                APProposalsController objPurchasePlansController = new APProposalsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APProposalsInfo document = (APProposalsInfo)objPurchasePlansController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<APPurchaseOrdersInfo> GetAllPurchaseOrders(int batchproductid)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllPurchaseOrders", batchproductid);
            List<APPurchaseOrdersInfo> documents = new List<APPurchaseOrdersInfo>();
            if (ds.Tables.Count > 0)
            {
                APPurchaseOrdersController objPurchasePlansController = new APPurchaseOrdersController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APPurchaseOrdersInfo document = (APPurchaseOrdersInfo)objPurchasePlansController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<APInvoiceInsInfo> GetAllInvoiceIn(int batchproductid)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllInvoiceIn", batchproductid);
            List<APInvoiceInsInfo> documents = new List<APInvoiceInsInfo>();
            if (ds.Tables.Count > 0)
            {
                APInvoiceInsController objPurchasePlansController = new APInvoiceInsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APInvoiceInsInfo document = (APInvoiceInsInfo)objPurchasePlansController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<ICReceiptsInfo> GetAllReceipts(int batchproductid)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllReceipts", batchproductid);
            List<ICReceiptsInfo> documents = new List<ICReceiptsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICReceiptsController objPurchasePlansController = new ICReceiptsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptsInfo document = (ICReceiptsInfo)objPurchasePlansController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        //[NKVung] [RP105-PurchasePlanItem] [START]
        public List<MMPurchasePlanItemsInfo> GetAllPurchasePlanItemWoodByBatchProductID(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllPurchasePlanItemWoodByBatchProductID", batchProductID);
            List<MMPurchasePlanItemsInfo> documents = new List<MMPurchasePlanItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                MMPurchasePlanItemsController objPurchasePlanItemsController = new MMPurchasePlanItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMPurchasePlanItemsInfo document = (MMPurchasePlanItemsInfo)objPurchasePlanItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<MMPurchasePlanItemsInfo> GetAllPurchasePlanItemOtherByBatchProductID(int batchProductID)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllPurchasePlanItemOtherByBatchProductID", batchProductID);
            List<MMPurchasePlanItemsInfo> documents = new List<MMPurchasePlanItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                MMPurchasePlanItemsController objPurchasePlanItemsController = new MMPurchasePlanItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMPurchasePlanItemsInfo document = (MMPurchasePlanItemsInfo)objPurchasePlanItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        //[END]
        //[NKVung] [RP105-ProposalItem] [START]
        public List<APProposalItemsInfo> GetAllProposalItemWoodByBatchProductID(int batchproductid)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllProposalItemWoodByBatchProductID", batchproductid);
            List<APProposalItemsInfo> documents = new List<APProposalItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                APProposalItemsController objProposalItemsController = new APProposalItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APProposalItemsInfo document = (APProposalItemsInfo)objProposalItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<APProposalItemsInfo> GetAllProposalItemOtherByBatchProductID(int batchproductid)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllProposalItemOtherByBatchProductID", batchproductid);
            List<APProposalItemsInfo> documents = new List<APProposalItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                APProposalItemsController objProposalItemsController = new APProposalItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APProposalItemsInfo document = (APProposalItemsInfo)objProposalItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        //[END]
        //[NKVung] [RP105-PurchaseOrderItem] [START]
        public List<APPurchaseOrderItemsInfo> GetAllPurchaseOrderItemWoodByBatchProductID(int batchproductid)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllPurchaseOrderItemWoodByBatchProductID", batchproductid);
            List<APPurchaseOrderItemsInfo> documents = new List<APPurchaseOrderItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                APPurchaseOrderItemsController objPurchaseOrderItemsController = new APPurchaseOrderItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APPurchaseOrderItemsInfo document = (APPurchaseOrderItemsInfo)objPurchaseOrderItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<APPurchaseOrderItemsInfo> GetAllPurchaseOrderItemOtherByBatchProductID(int batchproductid)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllPurchaseOrderItemOtherByBatchProductID", batchproductid);
            List<APPurchaseOrderItemsInfo> documents = new List<APPurchaseOrderItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                APPurchaseOrderItemsController objPurchaseOrderItemsController = new APPurchaseOrderItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APPurchaseOrderItemsInfo document = (APPurchaseOrderItemsInfo)objPurchaseOrderItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        //[END]
        //[NKVung] [RP105-InvoiceInItem] [START]
        public List<APInvoiceInItemsInfo> GetAllInvoiceInItemWoodByBatchProductID(int batchproductid)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllInvoiceInItemWoodByBatchProductID", batchproductid);
            List<APInvoiceInItemsInfo> documents = new List<APInvoiceInItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                APInvoiceInItemsController objInvoiceInItemsController = new APInvoiceInItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APInvoiceInItemsInfo document = (APInvoiceInItemsInfo)objInvoiceInItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<APInvoiceInItemsInfo> GetAllInvoiceInItemOtherByBatchProductID(int batchproductid)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllInvoiceInItemOtherByBatchProductID", batchproductid);
            List<APInvoiceInItemsInfo> documents = new List<APInvoiceInItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                APInvoiceInItemsController objInvoiceInItemsController = new APInvoiceInItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APInvoiceInItemsInfo document = (APInvoiceInItemsInfo)objInvoiceInItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        //[END]
        //[NKVung] [RP105-ReceiptItem] [START]
        public List<ICReceiptItemsInfo> GetAllReceiptItemWoodByBatchProductID(int batchproductid)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllReceiptItemWoodByBatchProductID", batchproductid);
            List<ICReceiptItemsInfo> documents = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo document = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<ICReceiptItemsInfo> GetAllReceiptItemOtherByBatchProductID(int batchproductid)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllReceiptItemOtherByBatchProductID", batchproductid);
            List<ICReceiptItemsInfo> documents = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo document = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        //[END]

        public List<ICShipmentProposalItemsInfo> GetICShipmentProposalItemsByID(int shipmentID)
        {

            DataSet ds = dal.GetDataSet("Report_GetICShipmentProposalItemsByID", shipmentID);
            List<ICShipmentProposalItemsInfo> List = new List<ICShipmentProposalItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICShipmentProposalItemsController objShipmentProposalItemsController = new ICShipmentProposalItemsController();
                int count = 0;
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    count++;
                    ICShipmentProposalItemsInfo objShipmentProposalItemsInfo = (ICShipmentProposalItemsInfo)objShipmentProposalItemsController.GetObjectFromDataRow(row);
                    objShipmentProposalItemsInfo.STT = count;
                    List.Add(objShipmentProposalItemsInfo);
                }
            }
            return List;
        }

        public List<ARDeliveryPlanItemsInfo> GetDeliveryPlanItemsByID(int deliveryPlanID)
        {

            DataSet ds = dal.GetDataSet("Report_GetDeliveryPlanItemsByID", deliveryPlanID);
            List<ARDeliveryPlanItemsInfo> List = new List<ARDeliveryPlanItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ARDeliveryPlanItemsController objDeliveryPlanItemsController = new ARDeliveryPlanItemsController();
                int count = 0;
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    count++;
                    ARDeliveryPlanItemsInfo objDeliveryPlanItemsInfo = (ARDeliveryPlanItemsInfo)objDeliveryPlanItemsController.GetObjectFromDataRow(row);
                    objDeliveryPlanItemsInfo.STT = count;
                    List.Add(objDeliveryPlanItemsInfo);
                }
            }
            return List;
        }

        public List<ICReceiptItemsInfo> GetListReceiptItemByReceiptID(int receiptID)
        {
            DataSet ds = dal.GetDataSet("Report_ICReceipt_GetListReceiptItemByReceiptID", receiptID);
            List<ICReceiptItemsInfo> List = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
                int count = 0;
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    count++;
                    ICReceiptItemsInfo objICReceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(row);
                    objICReceiptItemsInfo.STT = count;
                    char[] charsToTrim = { '\r', '\n', '\t', ' ' };
                    ///objICReceiptItemsInfo.TongKhoiluong += objICReceiptItemsInfo.ICReceiptItemProductQty;
                    ///objICReceiptItemsInfo.TongThanhTien += objICReceiptItemsInfo.ICReceiptItemTotalCost;
                    objICReceiptItemsInfo.ICReceiptDesc.Trim(charsToTrim);
                    //objICReceiptItemsInfo.ICReceiptDesc = 
                    List.Add(objICReceiptItemsInfo);
                }
            }
            return List;
        }
        public List<ICReceiptItemsInfo> GetListReceiptItemByReceiptIDForMaterialReceipt(int receiptID)
        {
            DataSet ds = dal.GetDataSet("Report_ICReceipt_GetListReceiptItemByReceiptIDForMaterialReceipt", receiptID);
            List<ICReceiptItemsInfo> List = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
                int count = 0;
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    count++;
                    ICReceiptItemsInfo objICReceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(row);
                    objICReceiptItemsInfo.STT = count;
                    char[] charsToTrim = { '\r', '\n', '\t', ' ' };
                    objICReceiptItemsInfo.ICReceiptDesc.Trim(charsToTrim);
                    List.Add(objICReceiptItemsInfo);
                }
            }
            return List;
        }
        public List<ICTransferItemsInfo> GetListTransferItemByTransferID(int receiptID)
        {
            DataSet ds = dal.GetDataSet("Report_GetListTransferItemByTransferID", receiptID);
            List<ICTransferItemsInfo> List = new List<ICTransferItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICTransferItemsController objTransferItemsController = new ICTransferItemsController();
                int count = 0;
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    count++;
                    ICTransferItemsInfo objTransferItemsInfo = (ICTransferItemsInfo)objTransferItemsController.GetObjectFromDataRow(row);
                    objTransferItemsInfo.STT = count;
                    char[] charsToTrim = { '\r', '\n', '\t', ' ' };
                    objTransferItemsInfo.ICTransferDesc.Trim(charsToTrim);
                    List.Add(objTransferItemsInfo);
                }
            }
            return List;
        }
        public List<ICShipmentItemsInfo> GetListShipmentItemByShipmentID(int ShipmentID)
        {
            DataSet ds = dal.GetDataSet("Report_ICShipment_GetItemListShipmentByID", ShipmentID);
            List<ICShipmentItemsInfo> List = new List<ICShipmentItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
                int count = 0;
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    count++;
                    ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)objShipmentItemsController.GetObjectFromDataRow(row);
                    objShipmentItemsInfo.STT = count;
                    ///objICReceiptItemsInfo.TongKhoiluong += objICReceiptItemsInfo.ICReceiptItemProductQty;
                    ///objICReceiptItemsInfo.TongThanhTien += objICReceiptItemsInfo.ICReceiptItemTotalCost;
                    List.Add(objShipmentItemsInfo);
                }
            }
            return List;
        }
        public List<ICShipmentItemsInfo> GetListShipmentDryLumberItemByShipmentID(int ShipmentID)
        {
            DataSet ds = dal.GetDataSet("Report_ICShipmentItem_GetListShipmentDryLumberItemByShipmentID", ShipmentID);
            List<ICShipmentItemsInfo> List = new List<ICShipmentItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
                int count = 0;
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    count++;
                    ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)objShipmentItemsController.GetObjectFromDataRow(row);
                    objShipmentItemsInfo.STT = count;
                    List.Add(objShipmentItemsInfo);
                }
            }
            return List;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetMMBatchProductProductTypeItemsForIngredientPaint(
                                                              int customerID,
                                                              DateTime fromDate,
                                                              DateTime toDate,
                                                              int saleOrderID,
                                                              string batchProductNo,
                                                              string productType)
        {
            DataSet ds = dal.GetDataSet("Report_GetMMBatchProductProductItems_ForIngredientPaint",
                                        customerID,
                                        fromDate,
                                        toDate,
                                        saleOrderID,
                                        batchProductNo,
                                        productType);
            List<MMBatchProductProductionNormItemsInfo> documents = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                MMBatchProductProductionNormItemsController objBatchProductProductionNormItemsController = new MMBatchProductProductionNormItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo document = (MMBatchProductProductionNormItemsInfo)objBatchProductProductionNormItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }

        //[NHAnh][ADD][REPORT RP107][START]
        //MMAllocationProposal
        public List<MMAllocationProposalsInfo> GetAllMMAllocationProposals(
                                                               int allocationProposalID,
                                                               DateTime fromDate,
                                                               DateTime toDate,
                                                               string allocationProposalName,
                                                               int batchProductID)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllMMAllocationProposals",
                                        allocationProposalID,
                                        fromDate,
                                        toDate,
                                        allocationProposalName,
                                        batchProductID);
            List<MMAllocationProposalsInfo> documents = new List<MMAllocationProposalsInfo>();
            if (ds.Tables.Count > 0)
            {
                MMAllocationProposalsController objAllocationProposalsController = new MMAllocationProposalsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMAllocationProposalsInfo document = (MMAllocationProposalsInfo)objAllocationProposalsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        //MMAlocationProposalItem
        public List<MMAllocationProposalItemsInfo> GetAllMMAllocationProposalItemOtherByAllocationProposalID(int allocationProposalID)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllMMAllocationProposalItemOtherByAllocationProposalID", allocationProposalID);
            List<MMAllocationProposalItemsInfo> documents = new List<MMAllocationProposalItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                MMAllocationProposalItemsController objAllocationProposalItemsController = new MMAllocationProposalItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMAllocationProposalItemsInfo document = (MMAllocationProposalItemsInfo)objAllocationProposalItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        //APProposalItem
        public List<APProposalItemsInfo> GetAllAPProposalItemOtherByAllocationProposalID(int allocationProposalID)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllAPProposalItemOtherByAllocationProposalID", allocationProposalID);
            List<APProposalItemsInfo> documents = new List<APProposalItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                APProposalItemsController objProposalItemsController = new APProposalItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APProposalItemsInfo document = (APProposalItemsInfo)objProposalItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        //APPurchaseOrderItem
        public List<APPurchaseOrderItemsInfo> GetAllPurchaseOrderItemOtherByAllocationProposalID(int allocationProposalID)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllPurchaseOrderItemOtherByAllocationProposalID", allocationProposalID);
            List<APPurchaseOrderItemsInfo> documents = new List<APPurchaseOrderItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                APPurchaseOrderItemsController objPurchaseOrderItemsController = new APPurchaseOrderItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APPurchaseOrderItemsInfo document = (APPurchaseOrderItemsInfo)objPurchaseOrderItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        //ICReceiptItems
        public List<ICReceiptItemsInfo> GetAllReceiptItemOtherByAllocationProposalID(int allocationProposalID)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllReceiptItemOtherByAllocationProposalID", allocationProposalID);
            List<ICReceiptItemsInfo> documents = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo document = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        //[NHAnh][ADD][REPORT RP107][END]

        public List<ICReceiptItemsInfo> GetReceiptShipmentTransferItemList(
                                                                DateTime? dateFrom,
                                                                DateTime? dateTo,
                                                                int? branchID,
                                                                string stockNos,
                                                                int? productID,
                                                                int? departmentID,
                                                                string productGroupName,
                                                                string shipmentType,
                                                                string receiptType,
                                                                bool isShipmentType,
                                                                bool isReceiptType,
                                                                int? productGroupID)
        {
            DataSet ds = dal.GetDataSet("Report_GetReceiptItemShipmentItemTransferItemList",
                                        dateFrom,
                                        dateTo,
                                        branchID,
                                        stockNos,
                                        productID,
                                        departmentID,
                                        productGroupName,
                                        shipmentType,
                                        receiptType,
                                        isShipmentType,
                                        isReceiptType,
                                        productGroupID);
            List<ICReceiptItemsInfo> receiptShipmentTransferItemList = new List<ICReceiptItemsInfo>();

            if (ds.Tables[0].Rows.Count > 0)
            {
                ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
                List<string> receiptShipmentTransferItemFilterNoList = new List<string>();
                int rowNumber = 0;
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(dr);
                    receiptShipmentTransferItemList.Add(objReceiptItemsInfo);
                }
            }
            return receiptShipmentTransferItemList;
        }

        public List<ICInventoryStocksInfo> GetIOInventoryListByBatchProductIDAndProductType(DateTime? dateFrom, DateTime? dateTo, string stockNoList,
                                                                                            int? productID, int? accountID, int? supplierID, int? bathcProductID)
        {
            List<ICInventoryStocksInfo> inventoryStockList = new List<ICInventoryStocksInfo>();
            ICInventoryStocksController objInventoryStocksController = new ICInventoryStocksController();
            DataSet ds = dal.GetDataSet("Report_GetIOInventoryListByBatchProductIDAndProductType", dateFrom, dateTo, productID, accountID, stockNoList, supplierID, bathcProductID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {

                    ICInventoryStocksInfo objInventoryStocksInfo = (ICInventoryStocksInfo)objInventoryStocksController.GetObjectFromDataRow(row);
                    //objInventoryStocksInfo.MMBatchProductProductionNormItemBlockPerOne = objInventoryStocksInfo.MMBatchProductProductionNormItemQuantity * objInventoryStocksInfo.MMBatchProductProductionNormItemBlockPerOne;
                    //objInventoryStocksInfo.MMBatchProductProductionNormItemBlockPerOneTotalPD = objInventoryStocksInfo.MMBatchProductItemProductQty * objInventoryStocksInfo.MMBatchProductProductionNormItemBlockPerOnePD;
                    objInventoryStocksInfo.TotalBlockReceipted = objInventoryStocksInfo.MMBatchProductProductionNormItemBlockPerOne * objInventoryStocksInfo.ICProductReceiptQty;
                    objInventoryStocksInfo.TotalBlockShipped = objInventoryStocksInfo.MMBatchProductProductionNormItemBlockPerOne * objInventoryStocksInfo.ICProductShipmentQty;

                    inventoryStockList.Add(objInventoryStocksInfo);
                }
            }
            return inventoryStockList;
        }
        public List<MMBatchProductProductionNormItemsInfo> GetMMAllocationProposalProductTypeItems(
                                                              int customerID,
                                                              DateTime fromDate,
                                                              DateTime toDate,
                                                              int saleOrderID,
                                                              string batchProductNo,
                                                              string productType)
        {
            DataSet ds = dal.GetDataSet("Report_GetMMAllocationProposalProductTypeItems",
                                        customerID,
                                        fromDate,
                                        toDate,
                                        saleOrderID,
                                        batchProductNo,
                                        productType);
            List<MMBatchProductProductionNormItemsInfo> documents = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                MMBatchProductProductionNormItemsController objBatchProductProductionNormItemsController = new MMBatchProductProductionNormItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo document = (MMBatchProductProductionNormItemsInfo)objBatchProductProductionNormItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<APPurchaseOrdersInfo> GetAPPuchaseOrdersbyCustomerAndPurchaseorderID(int supplierID, DateTime fromDate, DateTime toDate, int purchaseorderID)
        {
            DataSet ds = dal.GetDataSet("Report_GetAPPuchaseOrdersbyCustomerAndPurchaseorderID", supplierID, fromDate, toDate, purchaseorderID);
            List<APPurchaseOrdersInfo> documents = new List<APPurchaseOrdersInfo>();
            if (ds.Tables.Count > 0)
            {
                APPurchaseOrdersController objPurchasePlansController = new APPurchaseOrdersController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APPurchaseOrdersInfo document = (APPurchaseOrdersInfo)objPurchasePlansController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<ACLoanReceiptsInfo> GetACLoanReceiptForReport(int objectID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("Report_GetACLoanReceiptForReport", objectID, fromDate, toDate);
            List<ACLoanReceiptsInfo> documents = new List<ACLoanReceiptsInfo>();
            if (ds.Tables.Count > 0)
            {
                ACLoanReceiptsController objLoanReceiptsController = new ACLoanReceiptsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACLoanReceiptsInfo document = (ACLoanReceiptsInfo)objLoanReceiptsController.GetObjectFromDataRow(row);
                    if (document != null)
                    {
                        document.ACLoanReceiptAmountNT = 0;
                        document.DuDauKy = 0;
                        document.DuCuoiKy = 0;
                        if (document.ACLoanReceiptExchangeRate != 0)
                        {
                            document.ACLoanReceiptAmountNT = document.ACLoanReceiptExchangeAmount / document.ACLoanReceiptExchangeRate;
                        }
                        else
                        {
                            document.ACLoanReceiptAmountNT = document.ACLoanReceiptExchangeAmount;
                        }
                        if (document.GECurrencyName == CurrencyNo.VND.ToString())
                        {
                            //Tiền Việt thì không có lãi ngoại tệ
                            document.ACLoanReceiptAmountNT = 0;

                        }

                        if (document.GECurrencyName == CurrencyNo.VND.ToString())
                        {
                            document.DuDauKy = 0;
                            document.DuCuoiKy = 0;
                        }
                        else
                        {
                            document.DuDauKy = document.ACLoanReceiptAmountNT - document.ACLoanReceiptOpeningPaidAmount - document.TienDaTraDenDK;
                            document.DuCuoiKy = document.ACLoanReceiptAmountNT - document.ACLoanReceiptOpeningPaidAmount - document.TienDaTraDenCK;
                        }
                        document.DuDauKyVND = document.ACLoanReceiptExchangeAmount - document.ACLoanReceiptOpeningPaidAmount * document.ACLoanReceiptExchangeRate - document.TienDaTraDenDKExchange;
                        document.DuCuoiKyVND = document.ACLoanReceiptExchangeAmount - document.ACLoanReceiptOpeningPaidAmount * document.ACLoanReceiptExchangeRate - document.TienDaTraDenCKExchange;
                        //if (document.TienDaTraDenDK > 0)
                        //{
                        //    document.DuDauKy = document.ACLoanReceiptAmount - document.TienDaTraDenDK;
                        //    document.DuDauKyVND = document.ACLoanReceiptExchangeAmount - document.TienDaTraDenDKExchange;
                        //}
                        //else if (document.TienDaTraDenDK == 0)
                        //{
                        //    document.DuDauKy = document.ACLoanReceiptAmount;
                        //    document.DuDauKyVND = document.ACLoanReceiptExchangeAmount;
                        //}
                        //if (document.TienDaTraDenCK > 0)
                        //{
                        //    document.DuCuoiKy = document.ACLoanReceiptAmount - document.TienDaTraDenCK;
                        //    document.DuCuoiKyVND = document.ACLoanReceiptExchangeAmount - document.TienDaTraDenCKExchange;
                        //}
                        //else if (document.TienDaTraDenCK == 0)
                        //{
                        //    document.DuCuoiKy = document.ACLoanReceiptAmount - document.ACLoanReceiptPaidAmount;
                        //    document.DuCuoiKyVND = document.ACLoanReceiptExchangeAmount-document.ACLoanReceiptPaidAmount;
                        //}
                    }
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<ICShipmentItemsInfo> GetICShipmentItemForReport(int customerID, int batchProductID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("Report_GetICShipmentItemForReport", customerID, batchProductID, fromDate, toDate);
            List<ICShipmentItemsInfo> documents = new List<ICShipmentItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICShipmentItemsController objICShipmentItemsController = new ICShipmentItemsController();

                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICShipmentItemsInfo document = (ICShipmentItemsInfo)objICShipmentItemsController.GetObjectFromDataRow(row);
                    if (document != null)
                    {
                        document.M3VuotDM = 0;
                        document.M3ConLai = 0;
                        document.TongM3ThucTeXuat = 0;
                        if (document.M3ThucTeXuat >= document.M3KHSD)
                        {
                            document.M3VuotDM = document.M3ThucTeXuat - document.M3KHSD;
                        }
                        else if (document.M3ThucTeXuat < document.M3KHSD)
                        {
                            document.M3ConLai = document.M3KHSD - document.M3ThucTeXuat;
                        }
                        document.TongM3ThucTeXuat = document.M3ThucTeXuat - document.M3TraVeTuLSX;

                    }
                    documents.Add(document);
                }
            }
            return documents;
        }

        public DataSet GetICShipmentItemForReport162(int batchProductID, int objectID, string objectType, DateTime fromDate, DateTime toDate)
        {
            return dal.GetDataSet("Report_GetICShipmentItemForReport162New", batchProductID, objectID, objectType, fromDate, toDate);
            //DataSet ds = dal.GetDataSet("Report_GetICShipmentItemForReport162New", customerID, batchProductID, fromDate, toDate);
            //List<ICShipmentItemsInfo> documents = new List<ICShipmentItemsInfo>();
            //if (ds.Tables.Count > 0)
            //{
            //    ICShipmentItemsController objICShipmentItemsController = new ICShipmentItemsController();

            //    foreach (DataRow row in ds.Tables[0].Rows)
            //    {
            //        ICShipmentItemsInfo document = (ICShipmentItemsInfo)objICShipmentItemsController.GetObjectFromDataRow(row);
            //        if (document != null)
            //        {
            //            document.M3VuotDM = 0;
            //            document.M3ConLai = 0;
            //            document.TongM3ThucTeXuat = 0;
            //            if (document.M3ThucTeXuat >= document.M3KHSD)
            //            {
            //                document.M3VuotDM = document.M3ThucTeXuat - document.M3KHSD;
            //            }
            //            else if (document.M3ThucTeXuat < document.M3KHSD)
            //            {
            //                document.M3ConLai = document.M3KHSD - document.M3ThucTeXuat;
            //            }
            //            document.TongM3ThucTeXuat = document.M3ThucTeXuat - document.M3TraVeTuLSX;
            //            document.TongGiaTriThucTeXuat = document.ThanhTienThucTeXuat - document.GiaTriTraVe;

            //        }
            //        documents.Add(document);
            //    }
            //}
            //return documents;
        }
        public List<ICShipmentItemsInfo> GetICShipmentItemForReportDetail(int batchProductID, decimal productHeight, int woodTypeID)
        {
            DataSet ds = dal.GetDataSet("Report_GetICShipmentItemForReportDetail", batchProductID, productHeight, woodTypeID);
            List<ICShipmentItemsInfo> documents = new List<ICShipmentItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICShipmentItemsController objICShipmentItemsController = new ICShipmentItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICShipmentItemsInfo document = (ICShipmentItemsInfo)objICShipmentItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<ICShipmentItemsInfo> GetICShipmentItemForReportDetailvan(int batchProductID, decimal productHeight, int woodTypeID)
        {
            DataSet ds = dal.GetDataSet("Report_GetICShipmentItemForReportDetailvan", batchProductID, productHeight, woodTypeID);
            List<ICShipmentItemsInfo> documents = new List<ICShipmentItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICShipmentItemsController objICShipmentItemsController = new ICShipmentItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICShipmentItemsInfo document = (ICShipmentItemsInfo)objICShipmentItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<ICShipmentItemsInfo> GetICShipmentItemForReportDetailgo(int batchProductID, decimal productHeight, int woodTypeID)
        {
            DataSet ds = dal.GetDataSet("Report_GetICShipmentItemForReportDetailgo", batchProductID, productHeight, woodTypeID);
            List<ICShipmentItemsInfo> documents = new List<ICShipmentItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICShipmentItemsController objICShipmentItemsController = new ICShipmentItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICShipmentItemsInfo document = (ICShipmentItemsInfo)objICShipmentItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<MMAllocationPlansInfo> GetAllocationPlanItemByBatchProductIDAndCustomerID(int batchProductID, int customerID, DateTime fromdate, DateTime todate)
        {
            DataSet ds = dal.GetDataSet("MMAllocationPlanItems_GetAllocationPlanItemByBatchProductIDAndCustomerID", batchProductID, customerID, fromdate, todate);
            List<MMAllocationPlansInfo> AllocationPlanList = new List<MMAllocationPlansInfo>();
            if (ds.Tables.Count > 0)
            {
                MMAllocationPlansController objAllocationPlansController = new MMAllocationPlansController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMAllocationPlansInfo objAllocationPlansInfo = (MMAllocationPlansInfo)objAllocationPlansController.GetObjectFromDataRow(row);
                    if ((objAllocationPlansInfo.MMAllocationPlanDateDryLumber == DateTime.MinValue || objAllocationPlansInfo.MMAllocationPlanDateDryLumber == DateTime.MaxValue)
                        || (objAllocationPlansInfo.MMAllocationPlanDateHardware == DateTime.MinValue || objAllocationPlansInfo.MMAllocationPlanDateHardware == DateTime.MaxValue)
                        || (objAllocationPlansInfo.MMAllocationPlanDateIngredientPackaging == DateTime.MinValue || objAllocationPlansInfo.MMAllocationPlanDateIngredientPackaging == DateTime.MaxValue)
                        || (objAllocationPlansInfo.MMAllocationPlanDateIngredientPaint == DateTime.MinValue || objAllocationPlansInfo.MMAllocationPlanDateIngredientPaint == DateTime.MaxValue))
                    {
                        objAllocationPlansInfo.Trangthai = "Chưa hoạch định";
                    }
                    else
                    {
                        objAllocationPlansInfo.Trangthai = "Đã hoạch định";
                    }
                    AllocationPlanList.Add(objAllocationPlansInfo);
                }
            }
            return AllocationPlanList;
        }
        public ADConfigValuesInfo GetObjectByADConfigKeyGroupAndKeyValues(string keyGroup, string keyValue)
        {
            DataSet ds = dal.GetDataSet("ADConfigValue_GetObjectByADConfigKeyGroupAndKeyValues", keyGroup, keyValue);
            ADConfigValuesController obj = new ADConfigValuesController();

            if (ds.Tables[0].Rows.Count > 0)
            {
                ADConfigValuesInfo objReceiptsInfo = (ADConfigValuesInfo)obj.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                return objReceiptsInfo;
            }
            return null;
            // return documents;
        }
        public List<APPurchaseOrderItemsInfo> GetPurchaseOrderItemByProductID(int productID, int productID1, DateTime fromdate, DateTime todate)
        {
            DataSet ds = dal.GetDataSet("Report_GetPurchaseOrderItemByProductID", productID, productID1, fromdate, todate);
            List<APPurchaseOrderItemsInfo> purchaseOrderItem = new List<APPurchaseOrderItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                APPurchaseOrderItemsController objPurchaseOrderItemsController = new APPurchaseOrderItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APPurchaseOrderItemsInfo objPurchaseOrderItemsInfo = (APPurchaseOrderItemsInfo)objPurchaseOrderItemsController.GetObjectFromDataRow(row);
                    purchaseOrderItem.Add(objPurchaseOrderItemsInfo);
                }
            }
            return purchaseOrderItem;
        }
        public List<APPurchaseOrdersInfo> GetPurchaseOrderItemForReportShippedLate(int objectID, string acObjectType, DateTime fromDate, DateTime toDate, int employeeID)
        {
            DataSet ds = dal.GetDataSet("Report_GetPurchaseOrderItemForReportShippedLate", objectID, acObjectType, fromDate, toDate, employeeID);
            List<APPurchaseOrdersInfo> documents = new List<APPurchaseOrdersInfo>();
            if (ds.Tables.Count > 0)
            {
                APPurchaseOrdersController objPurchasePlansController = new APPurchaseOrdersController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APPurchaseOrdersInfo document = (APPurchaseOrdersInfo)objPurchasePlansController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<APPurchaseOrderItemsInfo> GetPurchaseOrderItemForReport(DateTime fromDate, DateTime toDate, int purchaseOrderID, string departmentNoList, int employeeID)
        {
            DataSet ds = dal.GetDataSet("Report_GetPurchaseOrderItemForReport", fromDate, toDate, purchaseOrderID, departmentNoList, employeeID);
            List<APPurchaseOrderItemsInfo> documents = new List<APPurchaseOrderItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                APPurchaseOrderItemsController objPurchasePlansController = new APPurchaseOrderItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APPurchaseOrderItemsInfo document = (APPurchaseOrderItemsInfo)objPurchasePlansController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<APPurchaseOrderItemsInfo> GetPurchaseOrderForReportBySupplierID(int supplierID, int productID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("Report_GetPurchaseOrderForReportBySupplierID", supplierID, productID, fromDate, toDate);
            List<APPurchaseOrderItemsInfo> documents = new List<APPurchaseOrderItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                APPurchaseOrderItemsController objPurchasePlansController = new APPurchaseOrderItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APPurchaseOrderItemsInfo document = (APPurchaseOrderItemsInfo)objPurchasePlansController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<APProposalItemsInfo> GetAllProposalItemByBatchProductIDnotnull(int purchaseOrderID, DateTime fromdate, DateTime todate, int employeeID, int batchProductID, int ProductGroup)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllProposalItemByBatchProductIDnotnull", purchaseOrderID, fromdate, todate, employeeID, batchProductID, ProductGroup);
            List<APProposalItemsInfo> documents = new List<APProposalItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                APProposalItemsController objProposalItemsController = new APProposalItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APProposalItemsInfo document = (APProposalItemsInfo)objProposalItemsController.GetObjectFromDataRow(row);
                    document.SLthieu = document.APProposalItemProductQty - document.ICReceiptQty;
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<ICReceiptItemsInfo> GetICreceiptItemByProposalItemID(int proposalItemID)
        {
            DataSet ds = dal.GetDataSet("Report_GetICreceiptItemByProposalItemID", proposalItemID);
            List<ICReceiptItemsInfo> receiptItemList = new List<ICReceiptItemsInfo>();
            ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
            if (ds != null)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(dr);
                    receiptItemList.Add(objReceiptItemsInfo);
                }
            }
            return receiptItemList;
        }
        public List<APProposalItemsInfo> GetAllProposalItemByAllocationProposalID(int purchaseOrderID, DateTime fromdate, DateTime todate)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllProposalItemByAllocationProposalID", purchaseOrderID, fromdate, todate);
            List<APProposalItemsInfo> documents = new List<APProposalItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                APProposalItemsController objProposalItemsController = new APProposalItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APProposalItemsInfo document = (APProposalItemsInfo)objProposalItemsController.GetObjectFromDataRow(row);
                    document.SLthieu = document.APProposalItemProductQty - document.ICReceiptQty;
                    documents.Add(document);
                }
            }
            return documents;
        }
        //MMAlocationProposalItem
        public List<MMAllocationProposalItemsInfo> GetAllAllocationProposalItemByAllocationProposalIDAndBatchProductID(int allocationProposalID, int batchProductID, DateTime fromdate, DateTime todate)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllAllocationProposalItemByAllocationProposalIDAndBatchProductID", allocationProposalID, batchProductID, fromdate, todate);
            List<MMAllocationProposalItemsInfo> documents = new List<MMAllocationProposalItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                MMAllocationProposalItemsController objAllocationProposalItemsController = new MMAllocationProposalItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMAllocationProposalItemsInfo document = (MMAllocationProposalItemsInfo)objAllocationProposalItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        //[HAnh][ADD][report 137],START
        public List<ICReceiptItemsInfo> GetReceiptItemsAndShipmentbyLotno(int? woodTypeID, string lotno, DateTime? fromdate, DateTime? todate)
        {
            DataSet ds = dal.GetDataSet("Report_GetReceiptItemsAndShipmentbyLotno", woodTypeID, lotno, fromdate, todate);
            List<ICReceiptItemsInfo> documents = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo document = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<ICReceiptItemsInfo> GetAllReceiptItemsAndShipmentbyLotno(int? woodTypeID, string lotno, DateTime? fromdate, DateTime? todate)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllReceiptItemsAndShipmentbyLotno", woodTypeID, lotno, fromdate, todate);
            List<ICReceiptItemsInfo> documents = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo document = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        //[HAnh][ADD][report 137],END
        public List<ACAssetsInfo> GetAssetForReport()
        {
            DataSet ds = dal.GetDataSet("Report_GetAssetForReport");
            List<ACAssetsInfo> documents = new List<ACAssetsInfo>();
            if (ds.Tables.Count > 0)
            {
                ACAssetsController objAssetsController = new ACAssetsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACAssetsInfo document = (ACAssetsInfo)objAssetsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        //[HAnh][ADD][report 142],START
        public List<MMBatchProductProductionNormItemsInfo> GetProductionNormByBatchproductNosAndType(
                                                              string batchproductType,
                                                              string batchProductnolist,
                                                              DateTime fromDate,
                                                              DateTime toDate
                                                              )
        {
            DataSet ds = dal.GetDataSet("BatchProductProductionNormItems_GetProductionNormByBatchproductNosAndType",
                                        batchproductType,
                                        batchProductnolist,
                                        fromDate,
                                        toDate
                                        );
            List<MMBatchProductProductionNormItemsInfo> documents = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                MMBatchProductProductionNormItemsController objBatchProductProductionNormItemsController = new MMBatchProductProductionNormItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo document = (MMBatchProductProductionNormItemsInfo)objBatchProductProductionNormItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        //[HAnh][ADD][report 142],END
        /// <summary>
        /// Get cancel purchase proposal items by proposal id
        /// </summary>
        /// <param name="InvoiceID">Proposal id</param>
        /// <returns>Data of proposal items</returns>
        public DataSet GetCancelPurchaseProposalItemByID(int cancelPurchaseProposalID)
        {
            return dal.GetDataSet("Report_GetCancelPurchaseProposalItemByID", cancelPurchaseProposalID);
        }
        public List<MMBatchProductItemsInfo> GetBatchProductItemsForReport(int batchProductID, int attributeTTMTID, int productID, DateTime FromDate, DateTime ToDate)
        {
            DataSet ds = dal.GetDataSet("Report_GetBatchProductItemsForReport", batchProductID, attributeTTMTID, productID, FromDate, ToDate);
            List<MMBatchProductItemsInfo> documents = new List<MMBatchProductItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                MMBatchProductItemsController objBatchProductItemsController = new MMBatchProductItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductItemsInfo document = (MMBatchProductItemsInfo)objBatchProductItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        //[HAnh][ADD][report 150],START
        public List<MMBatchProductProductionNormItemsInfo> RP150(DateTime fromDate, DateTime toDate, int batchProductID)
        {
            DataSet ds = dal.GetDataSet("MMBatchProductProductionNormItems_RP150", fromDate, toDate, batchProductID);
            List<MMBatchProductProductionNormItemsInfo> documents = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                MMBatchProductProductionNormItemsController objBatchProductProductionNormItemsController = new MMBatchProductProductionNormItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo document = (MMBatchProductProductionNormItemsInfo)objBatchProductProductionNormItemsController.GetObjectFromDataRow(row);
                    document.KLXuatthuc = document.KLXuatPK - document.KLNhapdoitra;

                    if (document.KLgoxe > 0)
                    {
                        document.sochenhlenh = document.KLXuatthuc - document.KLgoxe;
                        document.phantramsoDM = (document.KLXuatthuc / document.KLgoxe) * 100;
                    }
                    else if (document.SLBTP > 0)
                    {
                        document.sochenhlenh = document.KLXuatthuc - document.SLBTP;
                        document.phantramsoDM = (document.KLXuatthuc / document.SLBTP) * 100;
                    }
                    if (document.CPNL == Chiphinguyenlieu.CPNLGo.ToString())
                    {
                        document.KLXuatthucGo = document.KLXuatthuc;
                        document.KLXuatthucBTP = 0;
                    }
                    else
                    {
                        document.KLXuatthucGo = 0;
                        document.KLXuatthucBTP = document.KLXuatthuc;
                    }
                    document.Giatritong = document.Giatri - document.GTNhapdoitra;
                    documents.Add(document);
                }
            }
            return documents;
        }
        //[HAnh][ADD][report 150],END
        //[HAnh][ADD][report 152],START
        public List<MMBatchProductProductionNormItemsInfo> RP152go(DateTime fromDate, DateTime toDate, int batchProductID)
        {
            DataSet ds = dal.GetDataSet("Report_RP152_Go", fromDate, toDate, batchProductID);
            List<MMBatchProductProductionNormItemsInfo> documents = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                MMBatchProductProductionNormItemsController objBatchProductProductionNormItemsController = new MMBatchProductProductionNormItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo document = (MMBatchProductProductionNormItemsInfo)objBatchProductProductionNormItemsController.GetObjectFromDataRow(row);
                    document.KLXuatthuc = document.KLXuatPK - document.KLNhapdoitra;
                    document.sochenhlenh = document.KLXuatthuc - document.KLgoxe;
                    if (document.KLgoxe != 0)
                    {
                        document.phantramsoDM = (document.KLXuatthuc / document.KLgoxe) * 100;
                    }
                    document.Giatritong = document.Giatri - document.GTNhapdoitra;
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<MMBatchProductProductionNormItemsInfo> RP152Son(DateTime fromDate, DateTime toDate, int batchProductID)
        {
            DataSet ds = dal.GetDataSet("Report_RP152_Son", fromDate, toDate, batchProductID);
            List<MMBatchProductProductionNormItemsInfo> documents = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                MMBatchProductProductionNormItemsController objBatchProductProductionNormItemsController = new MMBatchProductProductionNormItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo document = (MMBatchProductProductionNormItemsInfo)objBatchProductProductionNormItemsController.GetObjectFromDataRow(row);
                    document.KLXuatthucBTP = document.KLXuatPK - document.KLNhapdoitra;
                    document.Giatritong = document.Giatri - document.GTNhapdoitra;
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<MMBatchProductProductionNormItemsInfo> RP152HardWare(DateTime fromDate, DateTime toDate, int batchProductID)
        {
            DataSet ds = dal.GetDataSet("Report_RP152_HardWare", fromDate, toDate, batchProductID);
            List<MMBatchProductProductionNormItemsInfo> documents = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                MMBatchProductProductionNormItemsController objBatchProductProductionNormItemsController = new MMBatchProductProductionNormItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo document = (MMBatchProductProductionNormItemsInfo)objBatchProductProductionNormItemsController.GetObjectFromDataRow(row);
                    document.KLXuatthucBTP = document.KLXuatPK - document.KLNhapdoitra;
                    document.Giatritong = document.Giatri - document.GTNhapdoitra;
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<MMBatchProductProductionNormItemsInfo> RP152BaoBi(DateTime fromDate, DateTime toDate, int batchProductID)
        {
            DataSet ds = dal.GetDataSet("Report_RP152_BaoBi", fromDate, toDate, batchProductID);
            List<MMBatchProductProductionNormItemsInfo> documents = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                MMBatchProductProductionNormItemsController objBatchProductProductionNormItemsController = new MMBatchProductProductionNormItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo document = (MMBatchProductProductionNormItemsInfo)objBatchProductProductionNormItemsController.GetObjectFromDataRow(row);
                    document.KLXuatthucBTP = document.KLXuatPK - document.KLNhapdoitra;
                    document.sochenhlenh = document.KLXuatthuc - document.SLBTP;
                    document.Giatritong = document.Giatri - document.GTNhapdoitra;
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<MMBatchProductProductionNormItemsInfo> RP152Keo(DateTime fromDate, DateTime toDate, int batchProductID)
        {
            DataSet ds = dal.GetDataSet("Report_RP152_Keo", fromDate, toDate, batchProductID);
            List<MMBatchProductProductionNormItemsInfo> documents = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                MMBatchProductProductionNormItemsController objBatchProductProductionNormItemsController = new MMBatchProductProductionNormItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo document = (MMBatchProductProductionNormItemsInfo)objBatchProductProductionNormItemsController.GetObjectFromDataRow(row);
                    document.KLXuatthucBTP = document.KLXuatPK - document.KLNhapdoitra;
                    document.Giatritong = document.Giatri - document.GTNhapdoitra;
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<MMBatchProductProductionNormItemsInfo> RP152Nham(DateTime fromDate, DateTime toDate, int batchProductID)
        {
            DataSet ds = dal.GetDataSet("Report_RP152_Nham", fromDate, toDate, batchProductID);
            List<MMBatchProductProductionNormItemsInfo> documents = new List<MMBatchProductProductionNormItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                MMBatchProductProductionNormItemsController objBatchProductProductionNormItemsController = new MMBatchProductProductionNormItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo document = (MMBatchProductProductionNormItemsInfo)objBatchProductProductionNormItemsController.GetObjectFromDataRow(row);
                    document.KLXuatthucBTP = document.KLXuatPK - document.KLNhapdoitra;
                    document.Giatritong = document.Giatri - document.GTNhapdoitra;
                    documents.Add(document);
                }
            }
            return documents;
        }
        //[HAnh][ADD][report 152],END
        //[HAnh][ADD][report 155],START
        public List<APProposalItemsInfo> GetProposalItemsReportByACObjectID(DateTime fromdate, DateTime todate, int batchproductID, int objectID, string objectType, int customerID, int purchaseOrderID)
        {
            DataSet ds = dal.GetDataSet("Report_GetProposalItemsByACObjectID", fromdate, todate, batchproductID, objectID, objectType, customerID, purchaseOrderID);
            List<APProposalItemsInfo> documents = new List<APProposalItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                APProposalItemsController objProposalItemsController = new APProposalItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APProposalItemsInfo document = (APProposalItemsInfo)objProposalItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        public List<APProposalItemsInfo> GetProposalItemsReport155(DateTime fromdate, DateTime todate, int batchproductID, int objectID, int customerID, int purchaseOrderID)
        {
            DataSet ds = dal.GetDataSet("Report_GetProposalItems_155", fromdate, todate, batchproductID, objectID, customerID, purchaseOrderID);
            List<APProposalItemsInfo> documents = new List<APProposalItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                APProposalItemsController objProposalItemsController = new APProposalItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APProposalItemsInfo document = (APProposalItemsInfo)objProposalItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            return documents;
        }
        //[HAnh][ADD][report 155],END

        public List<APPurchaseOrderItemsInfo> GetPurchaseOrderItemForReport154(int acObjectID, string acObjectType, DateTime searchFromDate, DateTime searchToDate, int acAssObjectID, string acAssObjectType, int purchaseOrderID, int batchProductID)
        {
            List<APPurchaseOrderItemsInfo> purchaseOrderItemList = new List<APPurchaseOrderItemsInfo>();
            APPurchaseOrderItemsController objPurchaseOrderItemsController = new APPurchaseOrderItemsController();
            DataSet ds = dal.GetDataSet("Report_GetPurchaseOrderItemForReport154", acObjectID, acObjectType, searchFromDate, searchToDate, acAssObjectID, acAssObjectType, purchaseOrderID, batchProductID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APPurchaseOrderItemsInfo objPurchaseOrderItemsInfo = (APPurchaseOrderItemsInfo)objPurchaseOrderItemsController.GetObjectFromDataRow(row);
                    decimal temp = 0;
                    temp = objPurchaseOrderItemsInfo.APPurchaseOrderItemProductQty * 10 / 100;
                    if (objPurchaseOrderItemsInfo.APPurchaseOrderItemNotReceiptYet > temp)
                    {
                        purchaseOrderItemList.Add(objPurchaseOrderItemsInfo);
                    }
                }
            }
            return purchaseOrderItemList;
        }


        public List<MMBatchProductProductionNormItemsInfo> GetBPPNIBlockAndPaint(int batchProductID, DateTime fromDate, DateTime toDate, int productForBatchID)
        {
            List<MMBatchProductProductionNormItemsInfo> purchaseOrderItemList = new List<MMBatchProductProductionNormItemsInfo>();
            MMBatchProductProductionNormItemsController objPurchaseOrderItemsController = new MMBatchProductProductionNormItemsController();
            DataSet ds = dal.GetDataSet("Report_GetBPPNIBlockAndPaint", batchProductID, fromDate, toDate, productForBatchID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMBatchProductProductionNormItemsInfo objPurchaseOrderItemsInfo = (MMBatchProductProductionNormItemsInfo)objPurchaseOrderItemsController.GetObjectFromDataRow(row);
                    purchaseOrderItemList.Add(objPurchaseOrderItemsInfo);
                }
            }
            return purchaseOrderItemList;
        }
        public List<ICProductsInfo> GetProductByBatchProductID(int batchProductID)
        {
            List<ICProductsInfo> purchaseOrderItemList = new List<ICProductsInfo>();
            ICProductsController objPurchaseOrderItemsController = new ICProductsController();
            DataSet ds = dal.GetDataSet("Report_GetProductByBatchProductID", batchProductID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICProductsInfo objPurchaseOrderItemsInfo = (ICProductsInfo)objPurchaseOrderItemsController.GetObjectFromDataRow(row);
                    purchaseOrderItemList.Add(objPurchaseOrderItemsInfo);
                }
            }
            return purchaseOrderItemList;
        }

        public DataSet GetLumberReceiptShipmentForRP156(int batchProductID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("Report_GetLumberReceiptShipmentForRP156", batchProductID, fromDate, toDate);
            return ds;
        }
        public DataSet GetMaterialReceiptShipmentForRP156NotInBP(int batchProductID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("Report_GetMaterialReceiptShipmentForRP156NotInBP", batchProductID, fromDate, toDate);
            return ds;
        }
        public DataSet GetMaterialReceiptShipmentForRP156NotInBP2(int batchProductID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("Report_GetMaterialReceiptShipmentForRP156NotInBP2", batchProductID, fromDate, toDate);
            return ds;
        }

        public DataSet GetBTPHaveReceiptForRP156(int batchProductID, DateTime fromDate, DateTime toDate, int productForBatchID)
        {
            DataSet ds = dal.GetDataSet("Report_GetBTPHaveReceiptForRP156", batchProductID, fromDate, toDate, productForBatchID);
            return ds;
        }
        public DataSet GetBTPHaveShipmentForRP156(int batchProductID, DateTime fromDate, DateTime toDate, int productForBatchID)
        {
            DataSet ds = dal.GetDataSet("Report_GetBTPHaveShipmentForRP156", batchProductID, fromDate, toDate, productForBatchID);
            return ds;
        }
        public DataSet GetBTPNotHaveReceiptShipmentForRP156(int batchProductID, DateTime fromDate, DateTime toDate, int productForBatchID)
        {
            DataSet ds = dal.GetDataSet("Report_GetBTPNotHaveReceiptShipmentForRP156", batchProductID, fromDate, toDate, productForBatchID);
            return ds;
        }
        public DataSet GetTPHaveShipmentForRP156(int batchProductID, DateTime fromDate, DateTime toDate, int productForBatchID)
        {
            DataSet ds = dal.GetDataSet("Report_GetTPHaveShipmentForRP156", batchProductID, fromDate, toDate, productForBatchID);
            return ds;
        }

        public DataSet GetTPHaveReceiptForRP156(int batchProductID, DateTime fromDate, DateTime toDate, int productForBatchID)
        {
            DataSet ds = dal.GetDataSet("Report_GetTPHaveReceiptForRP156", batchProductID, fromDate, toDate, productForBatchID);
            return ds;
        }
        public DataSet GetTPNotHaveReceiptShipmentForRP156(int batchProductID, DateTime fromDate, DateTime toDate, int productForBatchID)
        {
            DataSet ds = dal.GetDataSet("Report_GetTPNotHaveReceiptShipmentForRP156", batchProductID, fromDate, toDate, productForBatchID);
            return ds;
        }

        //[HAnh][ADD][report 157],START
        public List<ICShipmentItemsInfo> GetICShipmentItemForReport157(DateTime searchFromDate, DateTime searchToDate, string lotno)
        {
            DataSet ds = dal.GetDataSet("Report_GetICShipmentItemForReport157", searchFromDate, searchToDate, lotno);
            ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
            return (List<ICShipmentItemsInfo>)objShipmentItemsController.GetListFromDataSet(ds);
        }
        //[HAnh][ADD][report 157],END
        public List<ARInvoiceItemsInfo> GetListItemForReport163(DateTime searchFromDate, DateTime searchToDate, int InvoiceID, int CustomerID)
        {

            ARInvoiceItemsController objInvoiceItemsController = new ARInvoiceItemsController();


            List<ARInvoiceItemsInfo> InvoiceItemList = new List<ARInvoiceItemsInfo>();
            DataSet ds = dal.GetDataSet("ARInvoiceItems_GetListItemForReport163", searchFromDate, searchToDate, InvoiceID, CustomerID);

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARInvoiceItemsInfo objInvoiceItemsInfo = (ARInvoiceItemsInfo)objInvoiceItemsController.GetObjectFromDataRow(row);
                    ////objInvoiceItemsInfo.MouthAndYear = objInvoiceItemsInfo.ARInvoiceDate.ToString("MM-yyyy");
                    InvoiceItemList.Add(objInvoiceItemsInfo);
                }
            }
            return InvoiceItemList;
        }
        public List<APProposalItemsInfo> GetProposalItemForPrint(int proposalID)
        {
            DataSet ds = dal.GetDataSet("Report_GetProposalItemByProposalID", proposalID);
            APProposalItemsController objProposalItemsController = new APProposalItemsController();
            return (List<APProposalItemsInfo>)objProposalItemsController.GetListFromDataSet(ds);
        }
        public List<ARInvoiceItemsInfo> GetListItemForReport165(DateTime searchFromDate, DateTime searchToDate, int InvoiceID, int CustomerID)
        {

            ARInvoiceItemsController objInvoiceItemsController = new ARInvoiceItemsController();


            List<ARInvoiceItemsInfo> InvoiceItemList = new List<ARInvoiceItemsInfo>();
            DataSet ds = dal.GetDataSet("ARInvoiceItems_GetListItemForReport165", searchFromDate, searchToDate, InvoiceID, CustomerID);

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARInvoiceItemsInfo objInvoiceItemsInfo = (ARInvoiceItemsInfo)objInvoiceItemsController.GetObjectFromDataRow(row);
                    objInvoiceItemsInfo.MouthAndYear = objInvoiceItemsInfo.ARInvoiceDate.ToString("MM-yyyy");

                    if (objInvoiceItemsInfo.ARSaleOrderSaleType == SaleType.International.ToString())
                    {
                        objInvoiceItemsInfo.ARInvoiceVATInvoiceNoNK = objInvoiceItemsInfo.ARInvoiceVATInvoiceNo;
                        objInvoiceItemsInfo.ARInvoiceDateNK = Convert.ToString(objInvoiceItemsInfo.ARInvoiceDate);
                    }
                    else if (objInvoiceItemsInfo.ARSaleOrderSaleType == SaleType.National.ToString())
                    {
                        objInvoiceItemsInfo.ARInvoiceVATInvoiceNoND = objInvoiceItemsInfo.ARInvoiceVATInvoiceNo;
                        objInvoiceItemsInfo.ARInvoiceDateND = Convert.ToString(objInvoiceItemsInfo.ARInvoiceDate);
                    }
                    else
                    {
                        objInvoiceItemsInfo.ARInvoiceVATInvoiceNoNK = objInvoiceItemsInfo.ARInvoiceVATInvoiceNo;
                        objInvoiceItemsInfo.ARInvoiceDateNK = Convert.ToString(objInvoiceItemsInfo.ARInvoiceDate);
                        objInvoiceItemsInfo.ARInvoiceVATInvoiceNoND = objInvoiceItemsInfo.ARInvoiceVATInvoiceNo;
                        objInvoiceItemsInfo.ARInvoiceDateND = Convert.ToString(objInvoiceItemsInfo.ARInvoiceDate);
                    }

                    if (objInvoiceItemsInfo.TPtrongLSX != 0)
                    {
                        objInvoiceItemsInfo.BatchProductProductionNormItemBlockPerOne = objInvoiceItemsInfo.MMBatchProductProductionNormItemBlockPerOneTotal / objInvoiceItemsInfo.TPtrongLSX;
                    }
                    InvoiceItemList.Add(objInvoiceItemsInfo);
                }
            }
            return InvoiceItemList;
        }

        public List<ICReceiptItemsInfo> GetReceiptItemForReportFromOperation166(DateTime searchFromDate, DateTime searchToDate, int batchProductID, int productID)
        {

            ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
            List<ICReceiptItemsInfo> ReceiptItemList = new List<ICReceiptItemsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetReceiptItemForReportFromOperation166", searchFromDate, searchToDate, batchProductID, productID);

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objreceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(row);
                    objreceiptItemsInfo.SLHoanThanh = objreceiptItemsInfo.SLDaNhap - objreceiptItemsInfo.SLXuatChuyen;
                    if (objreceiptItemsInfo.SLDM > 0)
                    {
                        objreceiptItemsInfo.TyLeHoanThanh = objreceiptItemsInfo.SLHoanThanh / objreceiptItemsInfo.SLDM * 100;
                    }
                    ReceiptItemList.Add(objreceiptItemsInfo);
                }
            }
            return ReceiptItemList;
        }

        public List<ICReceiptItemsInfo> GetReceiptItemForReportFromOperation167(DateTime searchFromDate, DateTime searchToDate, int batchProductID, int productID)
        {

            ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
            List<ICReceiptItemsInfo> ReceiptItemList = new List<ICReceiptItemsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetReceiptItemForReportFromOperation167", searchFromDate, searchToDate, batchProductID, productID);

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objreceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(row);
                    objreceiptItemsInfo.SLHoanThanh = objreceiptItemsInfo.SLDaNhap - objreceiptItemsInfo.SLXuatChuyen;
                    if (objreceiptItemsInfo.SLDM > 0)
                    {
                        objreceiptItemsInfo.TyLeHoanThanh = objreceiptItemsInfo.SLHoanThanh / objreceiptItemsInfo.SLDM * 100;
                    }
                    ReceiptItemList.Add(objreceiptItemsInfo);
                }
            }
            return ReceiptItemList;
        }

        public List<ICReceiptItemsInfo> GetReceiptItemForReportFromOperation168(DateTime searchFromDate, DateTime searchToDate, int batchProductID, int productID)
        {

            ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
            List<ICReceiptItemsInfo> ReceiptItemList = new List<ICReceiptItemsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetReceiptItemForReportFromOperation168", searchFromDate, searchToDate, batchProductID, productID);

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objreceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(row);
                    objreceiptItemsInfo.SLHoanThanh = objreceiptItemsInfo.SLDaNhap - objreceiptItemsInfo.SLXuatChuyen;
                    if (objreceiptItemsInfo.SLDM > 0)
                    {
                        objreceiptItemsInfo.TyLeHoanThanh = objreceiptItemsInfo.SLHoanThanh / objreceiptItemsInfo.SLDM * 100;
                    }
                    ReceiptItemList.Add(objreceiptItemsInfo);
                }
            }
            return ReceiptItemList;
        }

        public List<ICReceiptItemsInfo> GetReceiptItemForReportFromOperation169(DateTime searchFromDate, DateTime searchToDate, int batchProductID, int productID)
        {

            ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
            List<ICReceiptItemsInfo> ReceiptItemList = new List<ICReceiptItemsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetReceiptItemForReportFromOperation169", searchFromDate, searchToDate, batchProductID, productID);

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objreceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(row);
                    objreceiptItemsInfo.SLHoanThanh = objreceiptItemsInfo.SLDaNhap - objreceiptItemsInfo.SLXuatChuyen;
                    if (objreceiptItemsInfo.SLDM > 0)
                    {
                        objreceiptItemsInfo.TyLeHoanThanh = objreceiptItemsInfo.SLHoanThanh / objreceiptItemsInfo.SLDM * 100;
                    }
                    ReceiptItemList.Add(objreceiptItemsInfo);
                }
            }
            return ReceiptItemList;
        }

        public List<ICReceiptItemsInfo> GetReceiptItemForReportFromOperation170(DateTime searchFromDate, DateTime searchToDate, int batchProductID, int productID)
        {

            ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
            List<ICReceiptItemsInfo> ReceiptItemList = new List<ICReceiptItemsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetReceiptItemForReportFromOperation170", searchFromDate, searchToDate, batchProductID, productID);

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objreceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(row);
                    objreceiptItemsInfo.SLHoanThanh = objreceiptItemsInfo.SLDaNhap - objreceiptItemsInfo.SLXuatChuyen;
                    if (objreceiptItemsInfo.SLDM > 0)
                    {
                        objreceiptItemsInfo.TyLeHoanThanh = objreceiptItemsInfo.SLHoanThanh / objreceiptItemsInfo.SLDM * 100;
                    }
                    ReceiptItemList.Add(objreceiptItemsInfo);
                }
            }
            return ReceiptItemList;
        }

        public List<ICReceiptItemsInfo> GetReceiptItemForReportFromOperation171(DateTime searchFromDate, DateTime searchToDate, int batchProductID, int productID)
        {

            ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
            List<ICReceiptItemsInfo> ReceiptItemList = new List<ICReceiptItemsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetReceiptItemForReportFromOperation171", searchFromDate, searchToDate, batchProductID, productID);

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objreceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(row);
                    objreceiptItemsInfo.SLHoanThanh = objreceiptItemsInfo.SLDaNhap - objreceiptItemsInfo.SLXuatChuyen;
                    if (objreceiptItemsInfo.SLDM > 0)
                    {
                        objreceiptItemsInfo.TyLeHoanThanh = objreceiptItemsInfo.SLHoanThanh / objreceiptItemsInfo.SLDM * 100;
                    }
                    ReceiptItemList.Add(objreceiptItemsInfo);
                }
            }
            return ReceiptItemList;
        }
        public List<ICReceiptItemsInfo> GetReceiptItemForReportFromOperation172(DateTime searchFromDate, DateTime searchToDate, int batchProductID, int productID)
        {

            ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
            List<ICReceiptItemsInfo> ReceiptItemList = new List<ICReceiptItemsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetReceiptItemForReportFromOperation172", searchFromDate, searchToDate, batchProductID, productID);

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICReceiptItemsInfo objreceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(row);
                    objreceiptItemsInfo.SLHoanThanh = objreceiptItemsInfo.SLDaNhap - objreceiptItemsInfo.SLXuatChuyen;
                    if (objreceiptItemsInfo.SLDM > 0)
                    {
                        objreceiptItemsInfo.TyLeHoanThanh = objreceiptItemsInfo.SLHoanThanh / objreceiptItemsInfo.SLDM * 100;
                    }
                    ReceiptItemList.Add(objreceiptItemsInfo);
                }
            }
            return ReceiptItemList;
        }
        public DataTable GetDataForReportLabourProductivity(string viewType, int? departmentID, int? departmentRoomID, int? departmentRoomGroupItemID, DateTime fromDate, DateTime toDate)
        {
            MMQuantityAllocationPercentConfigsController objQuantityAllocationPercentConfigsController = new MMQuantityAllocationPercentConfigsController();

            HRLabouringConfigItemsController objLabouringConfigItemsController = new HRLabouringConfigItemsController();
            List<HRLabouringConfigItemsInfo> LabouringConfigItemList;

            List<ADReportsInfo> ListDMChiTiet = new List<ADReportsInfo>();
            List<ADReportsInfo> ListDMCum = new List<ADReportsInfo>();
            List<ADReportsInfo> ListDMSP = new List<ADReportsInfo>();
            List<ADReportsInfo> ListGiatri = new List<ADReportsInfo>();
            //****************************************
            //ListGiatri = GetBatchItemPrice(toDate);
            //ListDMChiTiet = GetBatchItemProductionNormDetail(toDate);
            //ListDMCum = GetBatchItemProductionNormComponent(toDate);
            //ListDMSP = GetBatchItemProductionNormProduct();
            //****************************************
            DataSet ds = dal.GetDataSet("Report_GetDataForReportLabourProductivity", viewType, departmentID, departmentRoomID, departmentRoomGroupItemID, fromDate, toDate);
            BOSProgressBar.Start("Đang xử lý dữ liệu.....");
            List<ADReportsInfo> ListRP = new List<ADReportsInfo>();
            DataTable dt = new DataTable();
            dt.Columns.Add(new DataColumn("ICReceiptDate", typeof(string)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivitySL", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivityNS", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivitySLDG", typeof(decimal)));
            dt.Columns.Add(new DataColumn("HRLabouringConfigItemQty", typeof(decimal)));
            dt.Columns.Add(new DataColumn("HRLabouringConfigItemOverTimeQty", typeof(decimal)));
            dt.Columns.Add(new DataColumn("HRLabouringConfigItemTotalQty", typeof(decimal)));
            dt.Columns.Add(new DataColumn("HRLabouringConfigItemOverTimeRate", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivitySLLK", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivityNSLK", typeof(decimal)));

            //DataTable dtEx = new DataTable();
            //dtEx.Columns.Add(new DataColumn("ICReceiptDate", typeof(string)));
            //dtEx.Columns.Add(new DataColumn("CD", typeof(string)));
            //dtEx.Columns.Add(new DataColumn("LSX", typeof(string)));
            //dtEx.Columns.Add(new DataColumn("SP", typeof(string)));
            //dtEx.Columns.Add(new DataColumn("ARSaleOrderNo", typeof(string)));
            //dtEx.Columns.Add(new DataColumn("FK_GECurrencyID", typeof(string)));
            //dtEx.Columns.Add(new DataColumn("ARSaleOrderExchangeRate", typeof(string)));
            //dtEx.Columns.Add(new DataColumn("ARSaleOrderItemProductUnitPrice", typeof(string)));
            //dtEx.Columns.Add(new DataColumn("FK_GECurrencyID2", typeof(string)));
            //dtEx.Columns.Add(new DataColumn("ARSaleOrderExchangeRate2", typeof(string)));
            //dtEx.Columns.Add(new DataColumn("ARSaleOrderItemProductUnitPrice2", typeof(string)));
            //dtEx.Columns.Add(new DataColumn("Giatri", typeof(decimal)));
            //dtEx.Columns.Add(new DataColumn("TilePB", typeof(decimal)));
            //dtEx.Columns.Add(new DataColumn("Chitiet", typeof(decimal)));
            //dtEx.Columns.Add(new DataColumn("DinhMuc", typeof(decimal)));
            //dtEx.Columns.Add(new DataColumn("SLNhap", typeof(decimal)));

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo objReportsInfo = (ADReportsInfo)GetObjectFromDataRow(row);
                    ListRP.Add(objReportsInfo);
                }
                List<DateTime> receiptdate = new List<DateTime>();
                List<string> receiptdateMonth = new List<string>();
                List<string> receiptdateYear = new List<string>();

                if (ListRP != null && ListRP.Count > 0)
                {
                    receiptdate = ListRP.OrderBy(x => x.ICReceiptDate).Select(x => x.ICReceiptDate).Distinct().ToList();
                    receiptdateMonth = ListRP.OrderBy(x => x.ICReceiptDate).Select(x => x.ICReceiptDateMonth).Distinct().ToList();
                    receiptdateYear = ListRP.OrderBy(x => x.ICReceiptDate).Select(x => x.ICReceiptDateYear).Distinct().ToList();
                    if (viewType == "Date")
                    {
                        #region Date
                        if (receiptdate != null)
                        {
                            LabouringConfigItemList = new List<HRLabouringConfigItemsInfo>();
                            decimal SLLKDateSC = 0;
                            decimal SLLKDateDH = 0;
                            decimal SLLKDateLR = 0;
                            decimal SLLKDateS = 0;
                            decimal SLLKDateDG = 0;
                            decimal TotalLabouringSC = 0;
                            decimal TotalLabouringDH = 0;
                            decimal TotalLabouringLR = 0;
                            decimal TotalLabouringS = 0;
                            decimal TotalLabouringDG = 0;
                            decimal TongCongNhat = 0;
                            decimal SLNKDGTru = 0;
                            decimal SLNKDG = 0;
                            foreach (DateTime item in receiptdate)
                            {
                                DataRow newRow = dt.NewRow();
                                newRow["ICReceiptDate"] = item.ToString("dd/MM/yyyy");
                                string test = string.Empty;

                                MMQuantityAllocationPercentConfigsInfo OperationPercentConfigs =
                                    objQuantityAllocationPercentConfigsController.GetDataForReportLabourProductivityByMonth(departmentID, item.Month, item.Year);
                                if (OperationPercentConfigs == null)
                                {
                                    OperationPercentConfigs =
                                    objQuantityAllocationPercentConfigsController.GetDataForReportLabourProductivityNearMonth(departmentID, item.Year);
                                }

                                LabouringConfigItemList = objLabouringConfigItemsController.GetDataForReportLabourProductivity(viewType, departmentID, departmentRoomID, departmentRoomGroupItemID, item, item);
                                List<int> Product = new List<int>();
                                Product = ListRP.Where(x => x.ICReceiptDate.Date == item.Date).Select(x => x.FK_MMBatchProductItemID).Distinct().ToList();

                                decimal ICReceiptLabourProductivitySLSC = 0;
                                decimal ICReceiptLabourProductivitySLDH = 0;
                                decimal ICReceiptLabourProductivitySLLR = 0;
                                decimal ICReceiptLabourProductivitySLS = 0;
                                decimal ICReceiptLabourProductivitySLDG = 0;
                                decimal ICReceiptLabourProductivitySLDGKPB = 0;
                                decimal ICReceiptLabourProductivitySLNKDG = 0;
                                decimal ICReceiptLabourProductivitySLNKDGTru = 0;
                                decimal NSSC = 0;
                                decimal NSDH = 0;
                                decimal NSLR = 0;
                                decimal NSS = 0;
                                decimal NSDG = 0;
                                if (Product != null)
                                {
                                    int percentDG = 0;
                                    string mess = item.ToString("dd/MM/yyyy");
                                    foreach (int ProductID in Product)
                                    {
                                        percentDG++;
                                        decimal pct = (percentDG * 100) / Product.Count;
                                        BOSProgressBar.Start(mess + ": " + Math.Round(pct) + " % ");
                                        List<ADReportsInfo> ListRPSC = new List<ADReportsInfo>();
                                        List<ADReportsInfo> ListRPDH = new List<ADReportsInfo>();
                                        List<ADReportsInfo> ListRPLR = new List<ADReportsInfo>();
                                        List<ADReportsInfo> ListRPS = new List<ADReportsInfo>();
                                        List<ADReportsInfo> ListRPDG = new List<ADReportsInfo>();

                                        decimal ReceiptLabourProductivitySLSC = 0;
                                        decimal ReceiptLabourProductivitySLDH = 0;
                                        decimal ReceiptLabourProductivitySLLR = 0;
                                        decimal ReceiptLabourProductivitySLS = 0;
                                        decimal ReceiptLabourProductivitySLDG = 0;

                                        decimal giaTri = ListGiatri.Where(x => x.FK_MMBatchProductItemID == ProductID).FirstOrDefault()
                                                .ARSaleOrderItemTotalAmount;
                                        ADReportsInfo objGiatri = ListGiatri.Where(x => x.FK_MMBatchProductItemID == ProductID).FirstOrDefault();
                                        //decimal giaSP = objBatchProductItem.ARSaleOrderItemProductUnitPrice;
                                        decimal PercentSC = 0;
                                        decimal PercentDH = 0;
                                        decimal PercentLR = 0;
                                        decimal PercentS = 0;
                                        decimal PercentDG = 0;

                                        if (OperationPercentConfigs != null)
                                        {
                                            PercentSC = OperationPercentConfigs.MMQuantityAllocationPercentConfigSoChe;
                                            PercentDH = OperationPercentConfigs.MMQuantityAllocationPercentConfigDinhHinh;
                                            PercentLR = OperationPercentConfigs.MMQuantityAllocationPercentConfigLapRap;
                                            PercentS = OperationPercentConfigs.MMQuantityAllocationPercentConfigSon;
                                            PercentDG = OperationPercentConfigs.MMQuantityAllocationPercentConfigDongGoi;
                                        }

                                        //-------SC----//
                                        ListRPSC = ListRP.Where(x => x.ICReceiptDate == item && x.FK_MMOperationID == 48 && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPSC != null)
                                        {
                                            //decimal tongNhap = ListRPSC.Sum(x => x.ICReceiptItemProductQty);
                                            //decimal dmProduct = objBatchProductItem.MMBatchProductProductionNormItemQuantitySoChe;
                                            decimal tongNhap = ListRPSC.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMChiTiet.Where(x => x.FK_MMBatchProductItemID == ProductID).Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            decimal SLSC = 0;
                                            if (dmProduct > 0)
                                            {
                                                if (tongNhap > dmProduct)
                                                    ReceiptLabourProductivitySLSC = (1 * (PercentSC / 100));
                                                else
                                                    ReceiptLabourProductivitySLSC = (tongNhap / dmProduct * (PercentSC / 100));
                                                SLSC = ReceiptLabourProductivitySLSC * giaTri;
                                            }

                                            ICReceiptLabourProductivitySLSC += SLSC;
                                            //DataRow rowEx = dtEx.NewRow();
                                            //rowEx["ICReceiptDate"] = item.ToString("dd/MM/yyyy");
                                            //rowEx["CD"] = "So che";
                                            //rowEx["LSX"] = objBatchProductItem.MMBatchProductNo;
                                            //rowEx["SP"] = objBatchProductItem.ICProductNo;
                                            //rowEx["Giatri"] = giaTri;
                                            //rowEx["TilePB"] = PercentSC;
                                            //rowEx["DinhMuc"] = dmProduct;
                                            //rowEx["SLNhap"] = tongNhap;
                                            //dtEx.Rows.Add(rowEx);

                                        }

                                        //-------DH----//
                                        ListRPDH = ListRP.Where(x => x.ICReceiptDate == item && x.FK_MMOperationID == 87 && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPDH != null)
                                        {
                                            decimal tongNhap = ListRPDH.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMChiTiet.Where(x => x.FK_MMBatchProductItemID == ProductID).Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            decimal SLDH = 0;
                                            if (dmProduct > 0)
                                            {
                                                if (tongNhap > dmProduct)
                                                    ReceiptLabourProductivitySLDH = (1 * (PercentDH / 100));
                                                else
                                                    ReceiptLabourProductivitySLDH = (tongNhap / dmProduct * (PercentDH / 100));
                                                SLDH = ReceiptLabourProductivitySLDH * giaTri;
                                            }
                                            ICReceiptLabourProductivitySLDH += SLDH;
                                            //DataRow rowEx = dtEx.NewRow();
                                            //rowEx["ICReceiptDate"] = item.ToString("dd/MM/yyyy");
                                            //rowEx["CD"] = "Tinh che";
                                            //rowEx["LSX"] = objBatchProductItem.MMBatchProductNo;
                                            //rowEx["SP"] = objBatchProductItem.ICProductNo;
                                            //rowEx["Giatri"] = giaTri;
                                            //rowEx["TilePB"] = PercentDH;
                                            //rowEx["DinhMuc"] = dmProduct;
                                            //rowEx["SLNhap"] = tongNhap;
                                            //dtEx.Rows.Add(rowEx);
                                        }
                                        //-------LR----//
                                        ListRPLR = ListRP.Where(x => x.ICReceiptDate == item && x.FK_MMOperationID == 103 && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPLR != null)
                                        {
                                            decimal tongNhap = ListRPLR.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMSP.Where(x => x.FK_MMBatchProductItemID == ProductID).Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            decimal SLLR = 0;
                                            if (dmProduct > 0)
                                            {
                                                if (tongNhap > dmProduct)
                                                    ReceiptLabourProductivitySLLR = (1 * (PercentLR / 100));
                                                else
                                                    ReceiptLabourProductivitySLLR = (tongNhap / dmProduct * (PercentLR / 100));
                                                SLLR = ReceiptLabourProductivitySLLR * giaTri;
                                            }
                                            ICReceiptLabourProductivitySLLR += SLLR;
                                            //DataRow rowEx = dtEx.NewRow();
                                            //rowEx["ICReceiptDate"] = item.ToString("dd/MM/yyyy");
                                            //rowEx["CD"] = "Lap rap";
                                            //rowEx["LSX"] = objBatchProductItem.MMBatchProductNo;
                                            //rowEx["SP"] = objBatchProductItem.ICProductNo;
                                            //rowEx["Giatri"] = giaTri;
                                            //rowEx["TilePB"] = PercentLR;
                                            //rowEx["DinhMuc"] = dmProduct;
                                            //rowEx["SLNhap"] = tongNhap;
                                            //dtEx.Rows.Add(rowEx);
                                        }
                                        //-------S----//
                                        ListRPS = ListRP.Where(x => x.ICReceiptDate == item && x.FK_MMOperationID == 143 && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPS != null)
                                        {
                                            decimal tongNhap = ListRPS.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMSP.Where(x => x.FK_MMBatchProductItemID == ProductID).Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            decimal SLS = 0;
                                            if (dmProduct > 0)
                                            {
                                                if (tongNhap > dmProduct)
                                                    ReceiptLabourProductivitySLS = (1 * (PercentS / 100));
                                                else
                                                    ReceiptLabourProductivitySLS = (tongNhap / dmProduct * (PercentS / 100));
                                                SLS = ReceiptLabourProductivitySLS * giaTri;
                                            }
                                            ICReceiptLabourProductivitySLS += SLS;
                                            //DataRow rowEx = dtEx.NewRow();
                                            //rowEx["ICReceiptDate"] = item.ToString("dd/MM/yyyy");
                                            //rowEx["CD"] = "Son";
                                            //rowEx["LSX"] = objBatchProductItem.MMBatchProductNo;
                                            //rowEx["SP"] = objBatchProductItem.ICProductNo;
                                            //rowEx["Giatri"] = giaTri;
                                            //rowEx["TilePB"] = PercentS;
                                            //rowEx["DinhMuc"] = dmProduct;
                                            //rowEx["SLNhap"] = tongNhap;
                                            //dtEx.Rows.Add(rowEx);
                                        }
                                        //-------DG----//
                                        ListRPDG = ListRP.Where(x => x.ICReceiptDate == item && x.FK_MMOperationID == 144 && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPDG != null)
                                        {
                                            decimal tongNhap = ListRPDG.Sum(x => x.ICReceiptItemProductQty);
                                            decimal dmProduct = ListDMSP.Where(x => x.FK_MMBatchProductItemID == ProductID).Sum(x => x.MMBatchProductProductionNormItemQuantity);
                                            ADReportsInfo obj = ListDMSP.Where(x => x.FK_MMBatchProductItemID == ProductID).FirstOrDefault();
                                            decimal SLDG = 0;
                                            decimal SLDGKPB = 0;
                                            if (dmProduct > 0)
                                            {
                                                if (tongNhap > dmProduct)
                                                {
                                                    ReceiptLabourProductivitySLDG = (1 * (PercentDG / 100));
                                                    SLDGKPB = (1) * giaTri;
                                                }
                                                else
                                                {
                                                    ReceiptLabourProductivitySLDG = (tongNhap / dmProduct * (PercentDG / 100));
                                                    SLDGKPB = (tongNhap / dmProduct) * giaTri;
                                                }
                                                SLDG = ReceiptLabourProductivitySLDG * giaTri;

                                                ICReceiptLabourProductivitySLDG += SLDG;
                                                ICReceiptLabourProductivitySLDGKPB += SLDGKPB;
                                            }
                                            if (dmProduct == 0)
                                                ICReceiptLabourProductivitySLNKDGTru = tongNhap;
                                            ICReceiptLabourProductivitySLNKDG += tongNhap;


                                            //DataRow rowEx = dtEx.NewRow();
                                            //rowEx["ICReceiptDate"] = item.ToString("dd/MM/yyyy");
                                            //rowEx["CD"] = "Dong goi";
                                            //rowEx["LSX"] = obj.MMBatchProductNo;
                                            //rowEx["SP"] = obj.ICProductNo;
                                            //rowEx["ARSaleOrderNo"] = obj.ARSaleOrderNo;
                                            //rowEx["FK_GECurrencyID"] = obj.FK_GECurrencyID;
                                            //rowEx["ARSaleOrderExchangeRate"] = obj.ARSaleOrderExchangeRate;
                                            //rowEx["ARSaleOrderItemProductUnitPrice"] = obj.ARSaleOrderItemProductUnitPrice;
                                            //rowEx["FK_GECurrencyID2"] = obj.FK_GECurrencyID2;
                                            //rowEx["ARSaleOrderExchangeRate2"] = obj.ARSaleOrderExchangeRate2;
                                            //rowEx["ARSaleOrderItemProductUnitPrice2"] = obj.ARSaleOrderItemProductUnitPrice2;
                                            //rowEx["Giatri"] = giaTri;
                                            //rowEx["TilePB"] = PercentDG;
                                            //rowEx["DinhMuc"] = dmProduct;
                                            //rowEx["SLNhap"] = tongNhap;
                                            //dtEx.Rows.Add(rowEx);
                                        }

                                    }

                                }
                                SLNKDG += ICReceiptLabourProductivitySLNKDG;
                                SLNKDGTru += ICReceiptLabourProductivitySLNKDGTru;

                                SLLKDateSC += ICReceiptLabourProductivitySLSC;
                                SLLKDateDH += ICReceiptLabourProductivitySLDH;
                                SLLKDateLR += ICReceiptLabourProductivitySLLR;
                                SLLKDateS += ICReceiptLabourProductivitySLS;
                                SLLKDateDG += ICReceiptLabourProductivitySLDG;
                                newRow["ICReceiptLabourProductivitySL"] = (ICReceiptLabourProductivitySLSC + ICReceiptLabourProductivitySLDH + ICReceiptLabourProductivitySLLR
                                                + ICReceiptLabourProductivitySLS + ICReceiptLabourProductivitySLDG);
                                newRow["ICReceiptLabourProductivitySLDG"] = ICReceiptLabourProductivitySLDGKPB;
                                newRow["ICReceiptLabourProductivitySLLK"] = (SLLKDateSC + SLLKDateDH + SLLKDateLR + SLLKDateS + SLLKDateDG);

                                HRLabouringConfigItemsInfo objLabouringConfigItemsInfo = new HRLabouringConfigItemsInfo();
                                if (LabouringConfigItemList != null)
                                {
                                    objLabouringConfigItemsInfo.HRLabouringConfigItemQty = LabouringConfigItemList.Sum(x => x.HRLabouringConfigItemQty);
                                    objLabouringConfigItemsInfo.HRLabouringConfigItemOverTimeQty = LabouringConfigItemList.Sum(x => x.HRLabouringConfigItemOverTimeQty);
                                    objLabouringConfigItemsInfo.HRLabouringConfigItemTotalQty = LabouringConfigItemList.Sum(x => x.HRLabouringConfigItemTotalQty);
                                    if (objLabouringConfigItemsInfo.HRLabouringConfigItemQty > 0)
                                        objLabouringConfigItemsInfo.HRLabouringConfigItemOverTimeRate = objLabouringConfigItemsInfo.HRLabouringConfigItemTotalQty / objLabouringConfigItemsInfo.HRLabouringConfigItemQty;

                                    List<HRLabouringConfigItemsInfo> LabouringConfigSC = new List<HRLabouringConfigItemsInfo>();
                                    LabouringConfigSC = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 48).ToList();
                                    List<HRLabouringConfigItemsInfo> LabouringConfigDH = new List<HRLabouringConfigItemsInfo>();
                                    LabouringConfigDH = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 87).ToList();
                                    List<HRLabouringConfigItemsInfo> LabouringConfigLR = new List<HRLabouringConfigItemsInfo>();
                                    LabouringConfigLR = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 103).ToList();
                                    List<HRLabouringConfigItemsInfo> LabouringConfigS = new List<HRLabouringConfigItemsInfo>();
                                    LabouringConfigS = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 143).ToList();
                                    List<HRLabouringConfigItemsInfo> LabouringConfigDG = new List<HRLabouringConfigItemsInfo>();
                                    LabouringConfigDG = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 144).ToList();

                                    if (LabouringConfigSC != null)
                                    {
                                        decimal totalSC = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 48).Sum(x => x.HRLabouringConfigItemTotalQty);
                                        if (totalSC > 0)
                                        {
                                            NSSC = totalSC;
                                            TotalLabouringSC += totalSC;
                                        }
                                    }
                                    if (LabouringConfigDH != null)
                                    {
                                        decimal totalDH = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 87).Sum(x => x.HRLabouringConfigItemTotalQty);
                                        if (totalDH > 0)
                                        {
                                            NSDH = totalDH;
                                            TotalLabouringDH += totalDH;
                                        }
                                    }
                                    if (LabouringConfigLR != null)
                                    {
                                        decimal totalLR = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 103).Sum(x => x.HRLabouringConfigItemTotalQty);
                                        if (totalLR > 0)
                                        {
                                            NSLR = totalLR;
                                            TotalLabouringLR += totalLR;
                                        }
                                    }
                                    if (LabouringConfigS != null)
                                    {
                                        decimal totalS = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 143).Sum(x => x.HRLabouringConfigItemTotalQty);
                                        if (totalS > 0)
                                        {
                                            NSS = totalS;
                                            TotalLabouringS += totalS;
                                        }
                                    }
                                    if (LabouringConfigDG != null)
                                    {
                                        decimal totalDG = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 144).Sum(x => x.HRLabouringConfigItemTotalQty);
                                        if (totalDG > 0)
                                        {
                                            NSDG = totalDG;
                                            TotalLabouringDG += totalDG;
                                        }
                                    }



                                    if (objLabouringConfigItemsInfo != null)
                                    {
                                        if (objLabouringConfigItemsInfo.HRLabouringConfigItemTotalQty > 0)
                                        {
                                            newRow["ICReceiptLabourProductivityNS"] =
                                           (ICReceiptLabourProductivitySLSC
                                           + ICReceiptLabourProductivitySLDH
                                           + ICReceiptLabourProductivitySLLR
                                           + ICReceiptLabourProductivitySLS
                                           + ICReceiptLabourProductivitySLDG) / objLabouringConfigItemsInfo.HRLabouringConfigItemTotalQty;
                                            TongCongNhat += objLabouringConfigItemsInfo.HRLabouringConfigItemTotalQty;


                                            newRow["ICReceiptLabourProductivityNSLK"] = ((SLLKDateSC + SLLKDateDH + SLLKDateLR + SLLKDateS + SLLKDateDG) / TongCongNhat);

                                            newRow["HRLabouringConfigItemQty"] = objLabouringConfigItemsInfo.HRLabouringConfigItemQty;
                                            newRow["HRLabouringConfigItemOverTimeQty"] = objLabouringConfigItemsInfo.HRLabouringConfigItemOverTimeQty;
                                            newRow["HRLabouringConfigItemTotalQty"] = objLabouringConfigItemsInfo.HRLabouringConfigItemTotalQty;
                                            newRow["HRLabouringConfigItemOverTimeRate"] = (objLabouringConfigItemsInfo.HRLabouringConfigItemOverTimeRate);
                                        }
                                        else
                                        {
                                            newRow["ICReceiptLabourProductivityNS"] = 0;
                                            newRow["HRLabouringConfigItemQty"] = 0;
                                            newRow["HRLabouringConfigItemOverTimeQty"] = 0;
                                            newRow["HRLabouringConfigItemTotalQty"] = 0;
                                            newRow["HRLabouringConfigItemOverTimeRate"] = 0;
                                            newRow["ICReceiptLabourProductivityNSLK"] = ((SLLKDateSC + SLLKDateDH + SLLKDateLR + SLLKDateS + SLLKDateDG) / TongCongNhat);
                                        }
                                    }
                                }

                                dt.Rows.Add(newRow);

                            }
                            BOSProgressBar.Close();
                            //ExportToExcel(dtEx, @"C:\Users\test\Desktop\Test\");
                        }
                        #endregion
                    }
                    else if (viewType == "Month")
                    {
                        #region Month
                        if (receiptdateMonth != null)
                        {
                            LabouringConfigItemList = new List<HRLabouringConfigItemsInfo>();
                            decimal SLLKDateSC = 0;
                            decimal SLLKDateDH = 0;
                            decimal SLLKDateLR = 0;
                            decimal SLLKDateS = 0;
                            decimal SLLKDateDG = 0;
                            decimal TotalLabouringSC = 0;
                            decimal TotalLabouringDH = 0;
                            decimal TotalLabouringLR = 0;
                            decimal TotalLabouringS = 0;
                            decimal TotalLabouringDG = 0;
                            decimal TongCongNhat = 0;
                            foreach (string item in receiptdateMonth)
                            {
                                string[] month = item.Split('/');
                                int mm = int.Parse(month[0]);
                                int yy = int.Parse(month[1]);

                                MMQuantityAllocationPercentConfigsInfo OperationPercentConfigs =
                                  objQuantityAllocationPercentConfigsController.GetDataForReportLabourProductivityByMonth(departmentID, mm, yy);
                                if (OperationPercentConfigs == null)
                                {
                                    OperationPercentConfigs = objQuantityAllocationPercentConfigsController.GetDataForReportLabourProductivityNearMonth(departmentID, yy);
                                }

                                LabouringConfigItemList = objLabouringConfigItemsController.GetDataForReportLabourProductivityByMonth(departmentID, departmentRoomID, departmentRoomGroupItemID, mm, yy);

                                DataRow newRow = dt.NewRow();
                                newRow["ICReceiptDate"] = item;
                                List<int> Product = new List<int>();
                                Product = ListRP.Where(x => x.ICReceiptDateMonth == item).Select(x => x.FK_MMBatchProductItemID).Distinct().ToList();

                                decimal ICReceiptLabourProductivitySLSC = 0;
                                decimal ICReceiptLabourProductivitySLDH = 0;
                                decimal ICReceiptLabourProductivitySLLR = 0;
                                decimal ICReceiptLabourProductivitySLS = 0;
                                decimal ICReceiptLabourProductivitySLDG = 0;
                                decimal ICReceiptLabourProductivitySLDGKPB = 0;
                                decimal NSSC = 0;
                                decimal NSDH = 0;
                                decimal NSLR = 0;
                                decimal NSS = 0;
                                decimal NSDG = 0;

                                if (Product != null)
                                {
                                    int percentDG = 0;
                                    string mess = item;
                                    foreach (int ProductID in Product)
                                    {
                                        percentDG++;
                                        decimal pct = (percentDG * 100) / Product.Count;
                                        BOSProgressBar.Start(mess + ": " + Math.Round(pct) + " % ");
                                        List<ADReportsInfo> ListRPSC = new List<ADReportsInfo>();
                                        List<ADReportsInfo> ListRPDH = new List<ADReportsInfo>();
                                        List<ADReportsInfo> ListRPLR = new List<ADReportsInfo>();
                                        List<ADReportsInfo> ListRPS = new List<ADReportsInfo>();
                                        List<ADReportsInfo> ListRPDG = new List<ADReportsInfo>();

                                        decimal ReceiptLabourProductivitySLSC = 0;
                                        decimal ReceiptLabourProductivitySLDH = 0;
                                        decimal ReceiptLabourProductivitySLLR = 0;
                                        decimal ReceiptLabourProductivitySLS = 0;
                                        decimal ReceiptLabourProductivitySLDG = 0;

                                        decimal giaTri = ListGiatri.Where(x => x.FK_MMBatchProductItemID == ProductID).FirstOrDefault() != null ?
                                            ListGiatri.Where(x => x.FK_MMBatchProductItemID == ProductID).FirstOrDefault().ARSaleOrderItemTotalAmount : 0;
                                        decimal PercentSC = 0;
                                        decimal PercentDH = 0;
                                        decimal PercentLR = 0;
                                        decimal PercentS = 0;
                                        decimal PercentDG = 0;

                                        if (OperationPercentConfigs != null)
                                        {
                                            PercentSC = OperationPercentConfigs.MMQuantityAllocationPercentConfigSoChe;
                                            PercentDH = OperationPercentConfigs.MMQuantityAllocationPercentConfigDinhHinh;
                                            PercentLR = OperationPercentConfigs.MMQuantityAllocationPercentConfigLapRap;
                                            PercentS = OperationPercentConfigs.MMQuantityAllocationPercentConfigSon;
                                            PercentDG = OperationPercentConfigs.MMQuantityAllocationPercentConfigDongGoi;
                                        }

                                        //-------SC----//
                                        ListRPSC = ListRP.Where(x => x.ICReceiptDateMonth == item && x.FK_MMOperationID == 48 && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPSC != null)
                                        {
                                            decimal tongNhap = ListRPSC.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMChiTiet.Where(x => x.FK_MMBatchProductItemID == ProductID).Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            decimal SLSC = 0;
                                            if (dmProduct > 0)
                                            {
                                                if (tongNhap > dmProduct)
                                                    ReceiptLabourProductivitySLSC = (1 * (PercentSC / 100));
                                                else
                                                    ReceiptLabourProductivitySLSC = (tongNhap / dmProduct * (PercentSC / 100));
                                                SLSC = ReceiptLabourProductivitySLSC * giaTri;
                                            }

                                            ICReceiptLabourProductivitySLSC += SLSC;
                                        }

                                        //-------DH----//
                                        ListRPDH = ListRP.Where(x => x.ICReceiptDateMonth == item && x.FK_MMOperationID == 87 && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPDH != null)
                                        {
                                            decimal tongNhap = ListRPDH.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMChiTiet.Where(x => x.FK_MMBatchProductItemID == ProductID).Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            decimal SLDH = 0;
                                            if (dmProduct > 0)
                                            {
                                                if (tongNhap > dmProduct)
                                                    ReceiptLabourProductivitySLDH = (1 * (PercentDH / 100));
                                                else
                                                    ReceiptLabourProductivitySLDH = (tongNhap / dmProduct * (PercentDH / 100));
                                                SLDH = ReceiptLabourProductivitySLDH * giaTri;
                                            }
                                            ICReceiptLabourProductivitySLDH += SLDH;
                                        }
                                        //-------LR----//
                                        ListRPLR = ListRP.Where(x => x.ICReceiptDateMonth == item && x.FK_MMOperationID == 103 && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPLR != null)
                                        {
                                            decimal tongNhap = ListRPLR.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMSP.Where(x => x.FK_MMBatchProductItemID == ProductID).Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            decimal SLLR = 0;
                                            if (dmProduct > 0)
                                            {
                                                if (tongNhap > dmProduct)
                                                    ReceiptLabourProductivitySLLR = (1 * (PercentLR / 100));
                                                else
                                                    ReceiptLabourProductivitySLLR = (tongNhap / dmProduct * (PercentLR / 100));
                                                SLLR = ReceiptLabourProductivitySLLR * giaTri;
                                            }
                                            ICReceiptLabourProductivitySLLR += SLLR;
                                        }
                                        //-------S----//
                                        ListRPS = ListRP.Where(x => x.ICReceiptDateMonth == item && x.FK_MMOperationID == 143 && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPS != null)
                                        {
                                            decimal tongNhap = ListRPS.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMSP.Where(x => x.FK_MMBatchProductItemID == ProductID).Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            decimal SLS = 0;
                                            if (dmProduct > 0)
                                            {
                                                if (tongNhap > dmProduct)
                                                    ReceiptLabourProductivitySLS = (1 * (PercentS / 100));
                                                else
                                                    ReceiptLabourProductivitySLS = (tongNhap / dmProduct * (PercentS / 100));
                                                SLS = ReceiptLabourProductivitySLS * giaTri;
                                            }
                                            ICReceiptLabourProductivitySLS += SLS;
                                        }
                                        //-------DG----//
                                        ListRPDG = ListRP.Where(x => x.ICReceiptDateMonth == item && x.FK_MMOperationID == 144 && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPDG != null)
                                        {
                                            decimal tongNhap = ListRPDG.Sum(x => x.ICReceiptItemProductQty);
                                            decimal dmProduct = ListDMSP.Where(x => x.FK_MMBatchProductItemID == ProductID).Sum(x => x.MMBatchProductProductionNormItemQuantity);
                                            decimal SLDG = 0;
                                            decimal SLDGKPB = 0;
                                            if (dmProduct > 0)
                                            {
                                                if (tongNhap > dmProduct)
                                                {
                                                    ReceiptLabourProductivitySLDG = (1 * (PercentDG / 100));
                                                    SLDGKPB = (1) * giaTri;
                                                }
                                                else
                                                {
                                                    ReceiptLabourProductivitySLDG = (tongNhap / dmProduct * (PercentDG / 100));
                                                    SLDGKPB = (tongNhap / dmProduct) * giaTri;
                                                }
                                                SLDG = ReceiptLabourProductivitySLDG * giaTri;

                                                ICReceiptLabourProductivitySLDG += SLDG;
                                                ICReceiptLabourProductivitySLDGKPB += SLDGKPB;
                                            }
                                        }
                                    }
                                    BOSProgressBar.Close();
                                }
                                SLLKDateSC += ICReceiptLabourProductivitySLSC;
                                SLLKDateDH += ICReceiptLabourProductivitySLDH;
                                SLLKDateLR += ICReceiptLabourProductivitySLLR;
                                SLLKDateS += ICReceiptLabourProductivitySLS;
                                SLLKDateDG += ICReceiptLabourProductivitySLDG;
                                newRow["ICReceiptLabourProductivitySL"] = (ICReceiptLabourProductivitySLSC + ICReceiptLabourProductivitySLDH + ICReceiptLabourProductivitySLLR
                                                + ICReceiptLabourProductivitySLS + ICReceiptLabourProductivitySLDG);
                                newRow["ICReceiptLabourProductivitySLDG"] = ICReceiptLabourProductivitySLDGKPB;
                                newRow["ICReceiptLabourProductivitySLLK"] = (SLLKDateSC + SLLKDateDH + SLLKDateLR + SLLKDateS + SLLKDateDG);

                                HRLabouringConfigItemsInfo objLabouringConfigItemsInfo = new HRLabouringConfigItemsInfo();
                                if (LabouringConfigItemList != null)
                                {
                                    objLabouringConfigItemsInfo.HRLabouringConfigItemQty = LabouringConfigItemList.Sum(x => x.HRLabouringConfigItemQty);
                                    objLabouringConfigItemsInfo.HRLabouringConfigItemOverTimeQty = LabouringConfigItemList.Sum(x => x.HRLabouringConfigItemOverTimeQty);
                                    objLabouringConfigItemsInfo.HRLabouringConfigItemTotalQty = LabouringConfigItemList.Sum(x => x.HRLabouringConfigItemTotalQty);
                                    if (objLabouringConfigItemsInfo.HRLabouringConfigItemQty > 0)
                                        objLabouringConfigItemsInfo.HRLabouringConfigItemOverTimeRate = objLabouringConfigItemsInfo.HRLabouringConfigItemTotalQty / objLabouringConfigItemsInfo.HRLabouringConfigItemQty;

                                    List<HRLabouringConfigItemsInfo> LabouringConfigSC = new List<HRLabouringConfigItemsInfo>();
                                    LabouringConfigSC = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 48).ToList();
                                    List<HRLabouringConfigItemsInfo> LabouringConfigDH = new List<HRLabouringConfigItemsInfo>();
                                    LabouringConfigDH = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 87).ToList();
                                    List<HRLabouringConfigItemsInfo> LabouringConfigLR = new List<HRLabouringConfigItemsInfo>();
                                    LabouringConfigLR = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 103).ToList();
                                    List<HRLabouringConfigItemsInfo> LabouringConfigS = new List<HRLabouringConfigItemsInfo>();
                                    LabouringConfigS = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 143).ToList();
                                    List<HRLabouringConfigItemsInfo> LabouringConfigDG = new List<HRLabouringConfigItemsInfo>();
                                    LabouringConfigDG = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 144).ToList();

                                    if (LabouringConfigSC != null)
                                    {
                                        decimal totalSC = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 48).Sum(x => x.HRLabouringConfigItemTotalQty);
                                        if (totalSC > 0)
                                        {
                                            NSSC = totalSC;
                                            TotalLabouringSC += totalSC;
                                        }
                                    }
                                    if (LabouringConfigDH != null)
                                    {
                                        decimal totalDH = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 87).Sum(x => x.HRLabouringConfigItemTotalQty);
                                        if (totalDH > 0)
                                        {
                                            NSDH = totalDH;
                                            TotalLabouringDH += totalDH;
                                        }
                                    }
                                    if (LabouringConfigLR != null)
                                    {
                                        decimal totalLR = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 103).Sum(x => x.HRLabouringConfigItemTotalQty);
                                        if (totalLR > 0)
                                        {
                                            NSLR = totalLR;
                                            TotalLabouringLR += totalLR;
                                        }
                                    }
                                    if (LabouringConfigS != null)
                                    {
                                        decimal totalS = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 143).Sum(x => x.HRLabouringConfigItemTotalQty);
                                        if (totalS > 0)
                                        {
                                            NSS = totalS;
                                            TotalLabouringS += totalS;
                                        }
                                    }
                                    if (LabouringConfigDG != null)
                                    {
                                        decimal totalDG = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 144).Sum(x => x.HRLabouringConfigItemTotalQty);
                                        if (totalDG > 0)
                                        {
                                            NSDG = totalDG;
                                            TotalLabouringDG += totalDG;
                                        }
                                    }

                                    newRow["ICReceiptLabourProductivityNS"] =
                                             (ICReceiptLabourProductivitySLSC
                                             + ICReceiptLabourProductivitySLDH
                                             + ICReceiptLabourProductivitySLLR
                                             + ICReceiptLabourProductivitySLS
                                             + ICReceiptLabourProductivitySLDG) / (NSSC + NSDH + NSLR + NSS + NSDG);

                                    if (objLabouringConfigItemsInfo != null)
                                    {
                                        if (objLabouringConfigItemsInfo.HRLabouringConfigItemTotalQty > 0)
                                        {
                                            //newRow["ICReceiptLabourProductivityNS"] =
                                            //  (ICReceiptLabourProductivitySLSC
                                            //  + ICReceiptLabourProductivitySLDH
                                            //  + ICReceiptLabourProductivitySLLR
                                            //  + ICReceiptLabourProductivitySLS
                                            //  + ICReceiptLabourProductivitySLDG) / objLabouringConfigItemsInfo.HRLabouringConfigItemTotalQty;
                                            TongCongNhat += objLabouringConfigItemsInfo.HRLabouringConfigItemTotalQty;

                                            //newRow["ICReceiptLabourProductivityNSLK"] =
                                            //    ((TotalLabouringSC > 0 ? SLLKDateSC / TotalLabouringSC : 0)
                                            //    + (TotalLabouringDH > 0 ? SLLKDateDH / TotalLabouringDH : 0)
                                            //    + (TotalLabouringLR > 0 ? SLLKDateLR / TotalLabouringLR : 0)
                                            //    + (TotalLabouringS > 0 ? SLLKDateS / TotalLabouringS : 0)
                                            //    + (TotalLabouringDG > 0 ? SLLKDateDG / TotalLabouringDG : 0));
                                            newRow["ICReceiptLabourProductivityNSLK"] = ((SLLKDateSC + SLLKDateDH + SLLKDateLR + SLLKDateS + SLLKDateDG) / TongCongNhat);
                                            newRow["HRLabouringConfigItemQty"] = objLabouringConfigItemsInfo.HRLabouringConfigItemQty;
                                            newRow["HRLabouringConfigItemOverTimeQty"] = objLabouringConfigItemsInfo.HRLabouringConfigItemOverTimeQty;
                                            newRow["HRLabouringConfigItemTotalQty"] = objLabouringConfigItemsInfo.HRLabouringConfigItemTotalQty;
                                            newRow["HRLabouringConfigItemOverTimeRate"] = (objLabouringConfigItemsInfo.HRLabouringConfigItemOverTimeRate);
                                        }
                                        else
                                        {
                                            newRow["ICReceiptLabourProductivityNS"] = 0;
                                            newRow["HRLabouringConfigItemQty"] = 0;
                                            newRow["HRLabouringConfigItemOverTimeQty"] = 0;
                                            newRow["HRLabouringConfigItemTotalQty"] = 0;
                                            newRow["HRLabouringConfigItemOverTimeRate"] = 0;
                                            newRow["ICReceiptLabourProductivityNSLK"] = ((SLLKDateSC + SLLKDateDH + SLLKDateLR + SLLKDateS + SLLKDateDG) / TongCongNhat);
                                        }
                                    }
                                }

                                dt.Rows.Add(newRow);
                            }
                        }
                        #endregion
                    }
                    else if (viewType == "Year")
                    {
                        #region Year
                        if (receiptdateYear != null)
                        {
                            LabouringConfigItemList = new List<HRLabouringConfigItemsInfo>();
                            decimal SLLKDateSC = 0;
                            decimal SLLKDateDH = 0;
                            decimal SLLKDateLR = 0;
                            decimal SLLKDateS = 0;
                            decimal SLLKDateDG = 0;
                            decimal TotalLabouringSC = 0;
                            decimal TotalLabouringDH = 0;
                            decimal TotalLabouringLR = 0;
                            decimal TotalLabouringS = 0;
                            decimal TotalLabouringDG = 0;
                            decimal TongCongNhat = 0;
                            foreach (string item in receiptdateYear)
                            {
                                int yy = int.Parse(item);

                                MMQuantityAllocationPercentConfigsInfo OperationPercentConfigs =
                                  objQuantityAllocationPercentConfigsController.GetDataForReportLabourProductivityByYear(departmentID, yy);
                                LabouringConfigItemList = objLabouringConfigItemsController.GetDataForReportLabourProductivityByYear(departmentID, departmentRoomID, departmentRoomGroupItemID, yy);

                                DataRow newRow = dt.NewRow();
                                newRow["ICReceiptDate"] = item;
                                List<int> Product = new List<int>();
                                Product = ListRP.Where(x => x.ICReceiptDateYear == item).Select(x => x.FK_MMBatchProductItemID).Distinct().ToList();

                                decimal ICReceiptLabourProductivitySLSC = 0;
                                decimal ICReceiptLabourProductivitySLDH = 0;
                                decimal ICReceiptLabourProductivitySLLR = 0;
                                decimal ICReceiptLabourProductivitySLS = 0;
                                decimal ICReceiptLabourProductivitySLDG = 0;
                                decimal ICReceiptLabourProductivitySLDGKPB = 0;
                                decimal NSSC = 0;
                                decimal NSDH = 0;
                                decimal NSLR = 0;
                                decimal NSS = 0;
                                decimal NSDG = 0;

                                if (Product != null)
                                {
                                    int percentDG = 0;
                                    string mess = item;
                                    foreach (int ProductID in Product)
                                    {
                                        percentDG++;
                                        decimal pct = (percentDG * 100) / Product.Count;
                                        BOSProgressBar.Start(mess + ": " + Math.Round(pct) + " % ");
                                        List<ADReportsInfo> ListRPSC = new List<ADReportsInfo>();
                                        List<ADReportsInfo> ListRPDH = new List<ADReportsInfo>();
                                        List<ADReportsInfo> ListRPLR = new List<ADReportsInfo>();
                                        List<ADReportsInfo> ListRPS = new List<ADReportsInfo>();
                                        List<ADReportsInfo> ListRPDG = new List<ADReportsInfo>();

                                        decimal ReceiptLabourProductivitySLSC = 0;
                                        decimal ReceiptLabourProductivitySLDH = 0;
                                        decimal ReceiptLabourProductivitySLLR = 0;
                                        decimal ReceiptLabourProductivitySLS = 0;
                                        decimal ReceiptLabourProductivitySLDG = 0;

                                        decimal giaTri = ListGiatri.Where(x => x.FK_MMBatchProductItemID == ProductID).FirstOrDefault() != null ?
                                            ListGiatri.Where(x => x.FK_MMBatchProductItemID == ProductID).FirstOrDefault().ARSaleOrderItemTotalAmount : 0;
                                        decimal PercentSC = 0;
                                        decimal PercentDH = 0;
                                        decimal PercentLR = 0;
                                        decimal PercentS = 0;
                                        decimal PercentDG = 0;

                                        if (OperationPercentConfigs != null)
                                        {
                                            PercentSC = OperationPercentConfigs.MMQuantityAllocationPercentConfigSoChe;
                                            PercentDH = OperationPercentConfigs.MMQuantityAllocationPercentConfigDinhHinh;
                                            PercentLR = OperationPercentConfigs.MMQuantityAllocationPercentConfigLapRap;
                                            PercentS = OperationPercentConfigs.MMQuantityAllocationPercentConfigSon;
                                            PercentDG = OperationPercentConfigs.MMQuantityAllocationPercentConfigDongGoi;
                                        }

                                        //-------SC----//
                                        ListRPSC = ListRP.Where(x => x.ICReceiptDateMonth == item && x.FK_MMOperationID == 48 && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPSC != null)
                                        {
                                            decimal tongNhap = ListRPSC.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMChiTiet.Where(x => x.FK_MMBatchProductItemID == ProductID).Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            decimal SLSC = 0;
                                            if (dmProduct > 0)
                                            {
                                                if (tongNhap > dmProduct)
                                                    ReceiptLabourProductivitySLSC = (1 * (PercentSC / 100));
                                                else
                                                    ReceiptLabourProductivitySLSC = (tongNhap / dmProduct * (PercentSC / 100));
                                                SLSC = ReceiptLabourProductivitySLSC * giaTri;
                                            }

                                            ICReceiptLabourProductivitySLSC += SLSC;
                                        }

                                        //-------DH----//
                                        ListRPDH = ListRP.Where(x => x.ICReceiptDateMonth == item && x.FK_MMOperationID == 87 && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPDH != null)
                                        {
                                            decimal tongNhap = ListRPDH.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMChiTiet.Where(x => x.FK_MMBatchProductItemID == ProductID).Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            decimal SLDH = 0;
                                            if (dmProduct > 0)
                                            {
                                                if (tongNhap > dmProduct)
                                                    ReceiptLabourProductivitySLDH = (1 * (PercentDH / 100));
                                                else
                                                    ReceiptLabourProductivitySLDH = (tongNhap / dmProduct * (PercentDH / 100));
                                                SLDH = ReceiptLabourProductivitySLDH * giaTri;
                                            }
                                            ICReceiptLabourProductivitySLDH += SLDH;
                                        }
                                        //-------LR----//
                                        ListRPLR = ListRP.Where(x => x.ICReceiptDateMonth == item && x.FK_MMOperationID == 103 && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPLR != null)
                                        {
                                            decimal tongNhap = ListRPLR.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMSP.Where(x => x.FK_MMBatchProductItemID == ProductID)
                                                .Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            decimal SLLR = 0;
                                            if (dmProduct > 0)
                                            {
                                                if (tongNhap > dmProduct)
                                                    ReceiptLabourProductivitySLLR = (1 * (PercentLR / 100));
                                                else
                                                    ReceiptLabourProductivitySLLR = (tongNhap / dmProduct * (PercentLR / 100));
                                                SLLR = ReceiptLabourProductivitySLLR * giaTri;
                                            }
                                            ICReceiptLabourProductivitySLLR += SLLR;
                                        }
                                        //-------S----//
                                        ListRPS = ListRP.Where(x => x.ICReceiptDateMonth == item && x.FK_MMOperationID == 143 && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPS != null)
                                        {
                                            decimal tongNhap = ListRPS.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMSP.Where(x => x.FK_MMBatchProductItemID == ProductID)
                                                .Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            decimal SLS = 0;
                                            if (dmProduct > 0)
                                            {
                                                if (tongNhap > dmProduct)
                                                    ReceiptLabourProductivitySLS = (1 * (PercentS / 100));
                                                else
                                                    ReceiptLabourProductivitySLS = (tongNhap / dmProduct * (PercentS / 100));
                                                SLS = ReceiptLabourProductivitySLS * giaTri;
                                            }
                                            ICReceiptLabourProductivitySLS += SLS;
                                        }
                                        //-------DG----//
                                        ListRPDG = ListRP.Where(x => x.ICReceiptDateMonth == item && x.FK_MMOperationID == 144 && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPDG != null)
                                        {
                                            decimal tongNhap = ListRPDG.Sum(x => x.ICReceiptItemProductQty);
                                            decimal dmProduct = ListDMSP.Where(x => x.FK_MMBatchProductItemID == ProductID)
                                               .Sum(x => x.MMBatchProductProductionNormItemQuantity);
                                            decimal SLDG = 0;
                                            decimal SLDGKPB = 0;
                                            if (dmProduct > 0)
                                            {
                                                if (tongNhap > dmProduct)
                                                {
                                                    ReceiptLabourProductivitySLDG = (1 * (PercentDG / 100));
                                                    SLDGKPB = (1) * giaTri;
                                                }
                                                else
                                                {
                                                    ReceiptLabourProductivitySLDG = (tongNhap / dmProduct * (PercentDG / 100));
                                                    SLDGKPB = (tongNhap / dmProduct) * giaTri;
                                                }
                                                SLDG = ReceiptLabourProductivitySLDG * giaTri;
                                                SLDGKPB = (tongNhap / dmProduct) * giaTri;
                                                ICReceiptLabourProductivitySLDG += SLDG;
                                                ICReceiptLabourProductivitySLDGKPB += SLDGKPB;
                                            }
                                        }
                                    }
                                    BOSProgressBar.Close();
                                }
                                SLLKDateSC += ICReceiptLabourProductivitySLSC;
                                SLLKDateDH += ICReceiptLabourProductivitySLDH;
                                SLLKDateLR += ICReceiptLabourProductivitySLLR;
                                SLLKDateS += ICReceiptLabourProductivitySLS;
                                SLLKDateDG += ICReceiptLabourProductivitySLDG;
                                newRow["ICReceiptLabourProductivitySL"] = (ICReceiptLabourProductivitySLSC + ICReceiptLabourProductivitySLDH + ICReceiptLabourProductivitySLLR
                                                + ICReceiptLabourProductivitySLS + ICReceiptLabourProductivitySLDG);
                                newRow["ICReceiptLabourProductivitySLDG"] = ICReceiptLabourProductivitySLDGKPB;
                                newRow["ICReceiptLabourProductivitySLLK"] = (SLLKDateSC + SLLKDateDH + SLLKDateLR + SLLKDateS + SLLKDateDG);

                                HRLabouringConfigItemsInfo objLabouringConfigItemsInfo = new HRLabouringConfigItemsInfo();
                                if (LabouringConfigItemList != null)
                                {
                                    objLabouringConfigItemsInfo.HRLabouringConfigItemQty = LabouringConfigItemList.Sum(x => x.HRLabouringConfigItemQty);
                                    objLabouringConfigItemsInfo.HRLabouringConfigItemOverTimeQty = LabouringConfigItemList.Sum(x => x.HRLabouringConfigItemOverTimeQty);
                                    objLabouringConfigItemsInfo.HRLabouringConfigItemTotalQty = LabouringConfigItemList.Sum(x => x.HRLabouringConfigItemTotalQty);
                                    if (objLabouringConfigItemsInfo.HRLabouringConfigItemQty > 0)
                                        objLabouringConfigItemsInfo.HRLabouringConfigItemOverTimeRate = objLabouringConfigItemsInfo.HRLabouringConfigItemTotalQty / objLabouringConfigItemsInfo.HRLabouringConfigItemQty;

                                    List<HRLabouringConfigItemsInfo> LabouringConfigSC = new List<HRLabouringConfigItemsInfo>();
                                    LabouringConfigSC = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 48).ToList();
                                    List<HRLabouringConfigItemsInfo> LabouringConfigDH = new List<HRLabouringConfigItemsInfo>();
                                    LabouringConfigDH = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 87).ToList();
                                    List<HRLabouringConfigItemsInfo> LabouringConfigLR = new List<HRLabouringConfigItemsInfo>();
                                    LabouringConfigLR = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 103).ToList();
                                    List<HRLabouringConfigItemsInfo> LabouringConfigS = new List<HRLabouringConfigItemsInfo>();
                                    LabouringConfigS = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 143).ToList();
                                    List<HRLabouringConfigItemsInfo> LabouringConfigDG = new List<HRLabouringConfigItemsInfo>();
                                    LabouringConfigDG = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 144).ToList();

                                    if (LabouringConfigSC != null)
                                    {
                                        decimal totalSC = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 48).Sum(x => x.HRLabouringConfigItemTotalQty);
                                        if (totalSC > 0)
                                        {
                                            NSSC = totalSC;
                                            TotalLabouringSC += totalSC;
                                        }
                                    }
                                    if (LabouringConfigDH != null)
                                    {
                                        decimal totalDH = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 87).Sum(x => x.HRLabouringConfigItemTotalQty);
                                        if (totalDH > 0)
                                        {
                                            NSDH = totalDH;
                                            TotalLabouringDH += totalDH;
                                        }
                                    }
                                    if (LabouringConfigLR != null)
                                    {
                                        decimal totalLR = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 103).Sum(x => x.HRLabouringConfigItemTotalQty);
                                        if (totalLR > 0)
                                        {
                                            NSLR = totalLR;
                                            TotalLabouringLR += totalLR;
                                        }
                                    }
                                    if (LabouringConfigS != null)
                                    {
                                        decimal totalS = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 143).Sum(x => x.HRLabouringConfigItemTotalQty);
                                        if (totalS > 0)
                                        {
                                            NSS = totalS;
                                            TotalLabouringS += totalS;
                                        }
                                    }
                                    if (LabouringConfigDG != null)
                                    {
                                        decimal totalDG = LabouringConfigItemList.Where(x => x.FK_MMOperationID == 144).Sum(x => x.HRLabouringConfigItemTotalQty);
                                        if (totalDG > 0)
                                        {
                                            NSDG = totalDG;
                                            TotalLabouringDG += totalDG;
                                        }
                                    }

                                    if (objLabouringConfigItemsInfo != null)
                                    {
                                        if (objLabouringConfigItemsInfo.HRLabouringConfigItemTotalQty > 0)
                                        {
                                            TongCongNhat += objLabouringConfigItemsInfo.HRLabouringConfigItemTotalQty;
                                            newRow["ICReceiptLabourProductivityNS"] =
                                               (ICReceiptLabourProductivitySLSC
                                               + ICReceiptLabourProductivitySLDH
                                               + ICReceiptLabourProductivitySLLR
                                               + ICReceiptLabourProductivitySLS
                                               + ICReceiptLabourProductivitySLDG) / (objLabouringConfigItemsInfo.HRLabouringConfigItemTotalQty);
                                            //newRow["ICReceiptLabourProductivityNSLK"] =
                                            //    ((TotalLabouringSC > 0 ? SLLKDateSC / TotalLabouringSC : 0)
                                            //    + (TotalLabouringDH > 0 ? SLLKDateDH / TotalLabouringDH : 0)
                                            //    + (TotalLabouringLR > 0 ? SLLKDateLR / TotalLabouringLR : 0)
                                            //    + (TotalLabouringS > 0 ? SLLKDateS / TotalLabouringS : 0)
                                            //    + (TotalLabouringDG > 0 ? SLLKDateDG / TotalLabouringDG : 0));
                                            newRow["ICReceiptLabourProductivityNSLK"] = ((SLLKDateSC + SLLKDateDH + SLLKDateLR + SLLKDateS + SLLKDateDG) / TongCongNhat);
                                            newRow["HRLabouringConfigItemQty"] = objLabouringConfigItemsInfo.HRLabouringConfigItemQty;
                                            newRow["HRLabouringConfigItemOverTimeQty"] = objLabouringConfigItemsInfo.HRLabouringConfigItemOverTimeQty;
                                            newRow["HRLabouringConfigItemTotalQty"] = objLabouringConfigItemsInfo.HRLabouringConfigItemTotalQty;
                                            newRow["HRLabouringConfigItemOverTimeRate"] = (objLabouringConfigItemsInfo.HRLabouringConfigItemOverTimeRate);
                                        }
                                        else
                                        {
                                            newRow["ICReceiptLabourProductivityNS"] = 0;
                                            newRow["HRLabouringConfigItemQty"] = 0;
                                            newRow["HRLabouringConfigItemOverTimeQty"] = 0;
                                            newRow["HRLabouringConfigItemTotalQty"] = 0;
                                            newRow["HRLabouringConfigItemOverTimeRate"] = 0;
                                            newRow["ICReceiptLabourProductivityNSLK"] = ((SLLKDateSC + SLLKDateDH + SLLKDateLR + SLLKDateS + SLLKDateDG) / TongCongNhat);
                                        }
                                    }
                                }

                                dt.Rows.Add(newRow);
                            }
                        }
                        #endregion
                    }
                }
                return dt;
            }
            else
                return null;
        }

        public DataTable GetDataForReportProducttionCheckFlow(string viewType, int? workshopID, int? departmentRoomID, int? departmentRoomGroupItemID, DateTime fromDate, DateTime toDate)
        {

            DataSet ds = dal.GetDataSet("Report_GetDataForReportLabourProductivity", viewType, workshopID, fromDate, toDate);
            BOSProgressBar.Start("Đang xử lý dữ liệu.....");
            List<ADReportsInfo> ListRP = new List<ADReportsInfo>();
            DataTable dt = new DataTable();
            dt.Columns.Add(new DataColumn("ICReceiptDate", typeof(string)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivityKTNL", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivitySLNL", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivityKTSC", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivitySLSC", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivityKTDH", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivitySLDH", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivityKTLR", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivitySLLR", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivityKTS", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivitySLS", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivityKTDG", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivitySLDG", typeof(decimal)));

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo objReportsInfo = (ADReportsInfo)GetObjectFromDataRow(row);
                    ListRP.Add(objReportsInfo);
                }
                List<DateTime> receiptdate = new List<DateTime>();
                List<string> receiptdateMonth = new List<string>();
                List<string> receiptdateYear = new List<string>();
                if (ListRP != null && ListRP.Count > 0)
                {
                    receiptdate = ListRP.OrderBy(x => x.ICReceiptDate).Select(x => x.ICReceiptDate).Distinct().ToList();
                    receiptdateMonth = ListRP.OrderBy(x => x.ICReceiptDate).Select(x => x.ICReceiptDateMonth).Distinct().ToList();
                    receiptdateYear = ListRP.OrderBy(x => x.ICReceiptDate).Select(x => x.ICReceiptDateYear).Distinct().ToList();
                    //List<ADReportsInfo> BatchProductItemList = new List<ADReportsInfo>();
                    List<ADReportsInfo> AllBatchProductList = new List<ADReportsInfo>();

                    List<int> BatchProductItemID = new List<int>();
                    List<int> BatchProductID = new List<int>();
                    BatchProductItemID = ListRP.Select(x => x.FK_MMBatchProductItemID).Distinct().ToList();
                    BatchProductID = ListRP.Select(x => x.FK_MMBatchProductID).Distinct().ToList();
                    #region Lay Dinh Muc
                    #region DM Theo BOM
                    List<ADReportsInfo> ListDMChiTiet;
                    List<ADReportsInfo> ListDMCum;
                    List<ADReportsInfo> ListDMSP;
                    List<ADReportsInfo> ListAllDMSP = GetBatchItemProductionNormDetail(string.Join(",", BatchProductItemID.ToArray()));
                    List<ADReportsInfo> ListGiatri = new List<ADReportsInfo>();

                    ListGiatri = GetBatchItemPrice(string.Join(",", BatchProductID.ToArray()));
                    ListDMChiTiet = ListAllDMSP.Where(p => p.ICProductType == "Chitiet").ToList();
                    ListDMCum = ListAllDMSP.Where(p => p.ICProductType == "Cum").ToList();
                    ListDMSP = ListAllDMSP.Where(p => p.ICProductType == "Product").ToList();


                    if (BatchProductID != null)
                    {
                        ADReportsInfo objBatchProductItem = new ADReportsInfo();
                        DataSet dsBatchProductItem = new DataSet();
                        dsBatchProductItem = dal.GetDataSet("Report_GetBatchItemForReportProducttionCheckFlow", workshopID, fromDate, toDate);
                        if (dsBatchProductItem != null)
                        {
                            foreach (DataRow row in dsBatchProductItem.Tables[0].Rows)
                            {
                                objBatchProductItem = (ADReportsInfo)GetObjectFromDataRow(row);
                                AllBatchProductList.Add(objBatchProductItem);
                            }
                        }

                    }
                    #endregion

                    #endregion
                    if (viewType == "Date")
                    {

                        #region Date
                        if (receiptdate != null)
                        {
                            foreach (DateTime item in receiptdate)
                            {


                                DataRow newRow = dt.NewRow();
                                newRow["ICReceiptDate"] = item.ToString("dd/MM/yyyy");
                                string test = string.Empty;
                                #region DM Theo HDCTG CD phoi
                                List<ADReportsInfo> BatchProductList = new List<ADReportsInfo>();
                                BatchProductList = AllBatchProductList.Where(b => b.ICReceiptDate.Date == item.Date).ToList();
                                decimal ICReceiptLabourProductivitySLNL = 0;
                                decimal ICReceiptLabourProductivityKTNL = 0;
                                if (BatchProductList != null)
                                {
                                    List<int> Batch = new List<int>();
                                    Batch = BatchProductList.Select(x => x.FK_MMBatchProductID).Distinct().ToList();


                                    if (Batch != null)
                                    {
                                        foreach (int batchID in Batch)
                                        {
                                            ADReportsInfo objBatchProduct = BatchProductList.Where(x => x.FK_MMBatchProductID == batchID).FirstOrDefault();
                                            if (BatchProductList != null)
                                            {
                                                List<ADReportsInfo> ListRPP = new List<ADReportsInfo>();

                                                decimal giaTri = BatchProductList.Where(x => x.FK_MMBatchProductID == batchID).Sum(x => x.ARSaleOrderItemTotalAmount);
                                                decimal tongXuat = BatchProductList.Where(x => x.FK_MMBatchProductID == batchID).Sum(x => x.ICShipmentItemProductQty);
                                                decimal dmProduct = BatchProductList.Where(x => x.FK_MMBatchProductID == batchID).Sum(x => x.MMBatchProductProductionNormItemQuantityPhoi);
                                                decimal tongTinh = BatchProductList.Where(x => x.FK_MMBatchProductID == batchID).Sum(x => x.ICReceiptItemWoodQty);

                                                if (tongXuat / dmProduct > 1)
                                                {
                                                    ICReceiptLabourProductivitySLNL += giaTri;
                                                    ICReceiptLabourProductivityKTNL += tongTinh;
                                                }
                                                else
                                                {
                                                    ICReceiptLabourProductivitySLNL += (tongXuat / dmProduct) * giaTri;
                                                    ICReceiptLabourProductivityKTNL += tongXuat / dmProduct * tongTinh;
                                                }
                                            }
                                        }
                                    }
                                }
                                newRow["ICReceiptLabourProductivitySLNL"] = ICReceiptLabourProductivitySLNL;
                                newRow["ICReceiptLabourProductivityKTNL"] = ICReceiptLabourProductivityKTNL;
                                #endregion

                                #region CD Khac
                                decimal ICReceiptLabourProductivitySLSC = 0;
                                decimal ICReceiptLabourProductivitySLDH = 0;
                                decimal ICReceiptLabourProductivitySLLR = 0;
                                decimal ICReceiptLabourProductivitySLS = 0;
                                decimal ICReceiptLabourProductivitySLDG = 0;
                                decimal ICReceiptLabourProductivityKTSC = 0;
                                decimal ICReceiptLabourProductivityKTDH = 0;
                                decimal ICReceiptLabourProductivityKTLR = 0;
                                decimal ICReceiptLabourProductivityKTS = 0;
                                decimal ICReceiptLabourProductivityKTDG = 0;
                                List<int> Product = new List<int>();
                                Product = ListRP.Where(x => x.ICReceiptDate.Date == item.Date).Select(x => x.FK_MMBatchProductItemID).Distinct().ToList();
                                if (Product != null)
                                {
                                    int percentDG = 0;
                                    string mess = item.ToString("dd/MM/yyyy");
                                    foreach (int ProductID in Product)
                                    {
                                        percentDG++;
                                        decimal pct = (percentDG * 100) / Product.Count;
                                        BOSProgressBar.Start(mess + ": " + Math.Round(pct) + " % ");
                                        List<ADReportsInfo> ListRPSC = new List<ADReportsInfo>();
                                        List<ADReportsInfo> ListRPDH = new List<ADReportsInfo>();
                                        List<ADReportsInfo> ListRPLR = new List<ADReportsInfo>();
                                        List<ADReportsInfo> ListRPS = new List<ADReportsInfo>();
                                        List<ADReportsInfo> ListRPDG = new List<ADReportsInfo>();

                                        decimal giaTri = ListGiatri.Where(x => x.FK_MMBatchProductItemID == ProductID).FirstOrDefault() != null ?
                                            ListGiatri.Where(x => x.FK_MMBatchProductItemID == ProductID).FirstOrDefault().ARSaleOrderItemTotalAmount : 0;


                                        //-------SC----//
                                        ListRPSC = ListRP.Where(x => x.ICReceiptDate == item && x.FK_MMOperationID == 1 && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPSC != null)
                                        {

                                            decimal tongNhapWood = ListRPSC.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMChiTiet.Where(x => x.FK_MMBatchProductItemID == ProductID)
                                                .Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            if (tongNhapWood >= dmProduct)
                                                ICReceiptLabourProductivitySLSC += (1) * giaTri;
                                            else
                                                ICReceiptLabourProductivitySLSC += (tongNhapWood / dmProduct) * giaTri;
                                            ICReceiptLabourProductivityKTSC += tongNhapWood;
                                        }

                                        //-------DH----//
                                        ListRPDH = ListRP.Where(x => x.ICReceiptDate == item && x.FK_MMOperationID == 488 && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPDH != null)
                                        {

                                            decimal tongNhapWood = ListRPDH.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMChiTiet.Where(x => x.FK_MMBatchProductItemID == ProductID)
                                                 .Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            if (tongNhapWood >= dmProduct)
                                                ICReceiptLabourProductivitySLDH += (1) * giaTri;
                                            else
                                                ICReceiptLabourProductivitySLDH += (tongNhapWood / dmProduct) * giaTri;
                                            ICReceiptLabourProductivityKTDH += tongNhapWood;
                                        }
                                        //-------LR----//
                                        ListRPLR = ListRP.Where(x => x.ICReceiptDate == item && x.FK_MMOperationID == 103 && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPLR != null)
                                        {

                                            decimal tongNhapWood = ListRPLR.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMSP.Where(x => x.FK_MMBatchProductItemID == ProductID)
                                                 .Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            if (tongNhapWood > dmProduct)
                                                ICReceiptLabourProductivitySLLR += (1) * giaTri;
                                            else
                                                ICReceiptLabourProductivitySLLR += (tongNhapWood / dmProduct) * giaTri;
                                            ICReceiptLabourProductivityKTLR += tongNhapWood;
                                        }
                                        //-------S----//
                                        ListRPS = ListRP.Where(x => x.ICReceiptDate == item && (x.FK_MMOperationID == 143 || x.FK_MMOperationID == 145) && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPS != null)
                                        {
                                            decimal tongNhapWood = ListRPS.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMSP.Where(x => x.FK_MMBatchProductItemID == ProductID)
                                                 .Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            if (tongNhapWood >= dmProduct)
                                                ICReceiptLabourProductivitySLS += (1) * giaTri;
                                            else
                                                ICReceiptLabourProductivitySLS += (tongNhapWood / dmProduct) * giaTri;
                                            ICReceiptLabourProductivityKTS += tongNhapWood;
                                        }
                                        //-------DG----//
                                        ListRPDG = ListRP.Where(x => x.ICReceiptDate == item && (x.FK_MMOperationID == 144 || x.FK_MMOperationID == 146) && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPDG != null)
                                        {
                                            decimal tongNhapWood = ListRPDG.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMSP.Where(x => x.FK_MMBatchProductItemID == ProductID)
                                                 .Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            if (tongNhapWood >= dmProduct)
                                                ICReceiptLabourProductivitySLDG += (1) * giaTri;
                                            else
                                                ICReceiptLabourProductivitySLDG += tongNhapWood / dmProduct * giaTri;

                                            ICReceiptLabourProductivityKTDG += tongNhapWood;
                                        }
                                    }

                                }

                                newRow["ICReceiptLabourProductivitySLSC"] = ICReceiptLabourProductivitySLSC;
                                newRow["ICReceiptLabourProductivitySLDH"] = ICReceiptLabourProductivitySLDH;
                                newRow["ICReceiptLabourProductivitySLLR"] = ICReceiptLabourProductivitySLLR;
                                newRow["ICReceiptLabourProductivitySLS"] = ICReceiptLabourProductivitySLS;
                                newRow["ICReceiptLabourProductivitySLDG"] = ICReceiptLabourProductivitySLDG;

                                newRow["ICReceiptLabourProductivityKTSC"] = ICReceiptLabourProductivityKTSC;
                                newRow["ICReceiptLabourProductivityKTDH"] = ICReceiptLabourProductivityKTDH;
                                newRow["ICReceiptLabourProductivityKTLR"] = ICReceiptLabourProductivityKTLR;
                                newRow["ICReceiptLabourProductivityKTS"] = ICReceiptLabourProductivityKTS;
                                newRow["ICReceiptLabourProductivityKTDG"] = ICReceiptLabourProductivityKTDG;

                                #endregion

                                dt.Rows.Add(newRow);
                            }
                            BOSProgressBar.Close();
                        }
                        #endregion
                    }
                    else if (viewType == "Month")
                    {
                        #region Month
                        if (receiptdateMonth != null)
                        {
                            foreach (string item in receiptdateMonth)
                            {
                                DataRow newRow = dt.NewRow();
                                newRow["ICReceiptDate"] = item;
                                string[] month = item.Split('/');
                                int mm = int.Parse(month[0]);
                                int yy = int.Parse(month[1]);
                                DateTime date = new DateTime(yy, mm, 1);
                                BOSDbUtil uliti = new BOSDbUtil();
                                DateTime dateMonthEnd = BOSUtil.GetMonthEndDate(date);

                                #region CD Phoi
                                List<ADReportsInfo> BatchProductList = new List<ADReportsInfo>();
                                decimal ICReceiptLabourProductivitySLNL = 0;
                                decimal ICReceiptLabourProductivityKTNL = 0;

                                ////BatchProductList = GetBatchItemForReportProducttionCheckFlow(workshopID, departmentRoomID, date, dateMonthEnd);
                                BatchProductList = AllBatchProductList.Where(b => b.ICReceiptDate.Date >= date.Date && b.ICReceiptDate.Date <= dateMonthEnd.Date).ToList();
                                if (BatchProductList != null)
                                {
                                    List<int> Batch = new List<int>();
                                    Batch = BatchProductList.Select(x => x.FK_MMBatchProductID).Distinct().ToList();

                                    if (Batch != null)
                                    {
                                        foreach (int batchID in Batch)
                                        {
                                            ADReportsInfo objBatchProduct = BatchProductList.Where(x => x.FK_MMBatchProductID == batchID).FirstOrDefault();
                                            if (BatchProductList != null)
                                            {
                                                List<ADReportsInfo> ListRPP = new List<ADReportsInfo>();

                                                decimal giaTri = BatchProductList.Where(x => x.FK_MMBatchProductID == batchID).Sum(x => x.ARSaleOrderItemTotalAmount);
                                                decimal tongXuat = BatchProductList.Where(x => x.FK_MMBatchProductID == batchID).Sum(x => x.ICShipmentItemProductQty);
                                                decimal dmProduct = BatchProductList.Where(x => x.FK_MMBatchProductID == batchID).Sum(x => x.MMBatchProductProductionNormItemQuantityPhoi);
                                                decimal tongTinh = BatchProductList.Where(x => x.FK_MMBatchProductID == batchID).Sum(x => x.ICReceiptItemWoodQty);

                                                if (tongXuat / dmProduct > 1)
                                                {
                                                    ICReceiptLabourProductivitySLNL += giaTri;
                                                    ICReceiptLabourProductivityKTNL += tongTinh;
                                                }
                                                else
                                                {
                                                    ICReceiptLabourProductivitySLNL += (tongXuat / dmProduct) * giaTri;
                                                    ICReceiptLabourProductivityKTNL += tongXuat / dmProduct * tongTinh;
                                                }
                                            }
                                        }
                                    }
                                }
                                newRow["ICReceiptLabourProductivitySLNL"] = ICReceiptLabourProductivitySLNL;
                                newRow["ICReceiptLabourProductivityKTNL"] = ICReceiptLabourProductivityKTNL;
                                #endregion

                                #region CD Khac
                                decimal ICReceiptLabourProductivitySLSC = 0;
                                decimal ICReceiptLabourProductivitySLDH = 0;
                                decimal ICReceiptLabourProductivitySLLR = 0;
                                decimal ICReceiptLabourProductivitySLS = 0;
                                decimal ICReceiptLabourProductivitySLDG = 0;
                                decimal ICReceiptLabourProductivityKTSC = 0;
                                decimal ICReceiptLabourProductivityKTDH = 0;
                                decimal ICReceiptLabourProductivityKTLR = 0;
                                decimal ICReceiptLabourProductivityKTS = 0;
                                decimal ICReceiptLabourProductivityKTDG = 0;
                                List<int> Product = new List<int>();
                                Product = ListRP.Where(x => x.ICReceiptDateMonth == item).Select(x => x.FK_MMBatchProductItemID).Distinct().ToList();
                                if (Product != null)
                                {
                                    int percentDG = 0;
                                    string mess = item;
                                    foreach (int ProductID in Product)
                                    {
                                        percentDG++;
                                        decimal pct = (percentDG * 100) / Product.Count;
                                        BOSProgressBar.Start(mess + ": " + Math.Round(pct) + " % ");
                                        List<ADReportsInfo> ListRPSC = new List<ADReportsInfo>();
                                        List<ADReportsInfo> ListRPDH = new List<ADReportsInfo>();
                                        List<ADReportsInfo> ListRPLR = new List<ADReportsInfo>();
                                        List<ADReportsInfo> ListRPS = new List<ADReportsInfo>();
                                        List<ADReportsInfo> ListRPDG = new List<ADReportsInfo>();

                                        decimal giaTri = ListGiatri.Where(x => x.FK_MMBatchProductItemID == ProductID).FirstOrDefault() != null ?
                                            ListGiatri.Where(x => x.FK_MMBatchProductItemID == ProductID).FirstOrDefault().ARSaleOrderItemTotalAmount : 0;


                                        //-------SC----//
                                        ListRPSC = ListRP.Where(x => x.ICReceiptDateMonth == item && x.FK_MMOperationID == 1 && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPSC != null)
                                        {

                                            decimal tongNhapWood = ListRPSC.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMChiTiet.Where(x => x.FK_MMBatchProductItemID == ProductID)
                                                .Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            if (tongNhapWood >= dmProduct)
                                                ICReceiptLabourProductivitySLSC += (1) * giaTri;
                                            else
                                                ICReceiptLabourProductivitySLSC += (tongNhapWood / dmProduct) * giaTri;
                                            ICReceiptLabourProductivityKTSC += tongNhapWood;
                                        }

                                        //-------DH----//
                                        ListRPDH = ListRP.Where(x => x.ICReceiptDateMonth == item && x.FK_MMOperationID == 488 && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPDH != null)
                                        {
                                            decimal tongNhapWood = ListRPDH.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMChiTiet.Where(x => x.FK_MMBatchProductItemID == ProductID)
                                                .Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            if (tongNhapWood >= dmProduct)
                                                ICReceiptLabourProductivitySLDH += (1) * giaTri;
                                            else
                                                ICReceiptLabourProductivitySLDH += (tongNhapWood / dmProduct) * giaTri;
                                            ICReceiptLabourProductivityKTDH += tongNhapWood;
                                        }
                                        //-------LR----//
                                        ListRPLR = ListRP.Where(x => x.ICReceiptDateMonth == item && x.FK_MMOperationID == 103 && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPLR != null)
                                        {

                                            decimal tongNhapWood = ListRPLR.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMSP.Where(x => x.FK_MMBatchProductItemID == ProductID)
                                                .Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            if (tongNhapWood >= dmProduct)
                                                ICReceiptLabourProductivitySLLR += (1) * giaTri;
                                            else
                                                ICReceiptLabourProductivitySLLR += (tongNhapWood / dmProduct) * giaTri;
                                            ICReceiptLabourProductivityKTLR += tongNhapWood;
                                        }
                                        //-------S----//
                                        ListRPS = ListRP.Where(x => x.ICReceiptDateMonth == item && (x.FK_MMOperationID == 143 || x.FK_MMOperationID == 145) && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPS != null)
                                        {
                                            decimal tongNhapWood = ListRPS.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMSP.Where(x => x.FK_MMBatchProductItemID == ProductID)
                                                .Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            if (tongNhapWood >= dmProduct)
                                                ICReceiptLabourProductivitySLS += (1) * giaTri;
                                            else
                                                ICReceiptLabourProductivitySLS += (tongNhapWood / dmProduct) * giaTri;
                                            ICReceiptLabourProductivityKTS += tongNhapWood;
                                        }
                                        //-------DG----//
                                        ListRPDG = ListRP.Where(x => x.ICReceiptDateMonth == item && (x.FK_MMOperationID == 144 || x.FK_MMOperationID == 146) && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPDG != null)
                                        {
                                            decimal tongNhapWood = ListRPDG.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMSP.Where(x => x.FK_MMBatchProductItemID == ProductID)
                                                 .Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            if (tongNhapWood >= dmProduct)
                                                ICReceiptLabourProductivitySLDG += (1) * giaTri;
                                            else
                                                ICReceiptLabourProductivitySLDG += tongNhapWood / dmProduct * giaTri;

                                            ICReceiptLabourProductivityKTDG += tongNhapWood;
                                        }
                                    }
                                    BOSProgressBar.Close();
                                }

                                newRow["ICReceiptLabourProductivitySLSC"] = ICReceiptLabourProductivitySLSC;
                                newRow["ICReceiptLabourProductivitySLDH"] = ICReceiptLabourProductivitySLDH;
                                newRow["ICReceiptLabourProductivitySLLR"] = ICReceiptLabourProductivitySLLR;
                                newRow["ICReceiptLabourProductivitySLS"] = ICReceiptLabourProductivitySLS;
                                newRow["ICReceiptLabourProductivitySLDG"] = ICReceiptLabourProductivitySLDG;

                                newRow["ICReceiptLabourProductivityKTSC"] = ICReceiptLabourProductivityKTSC;
                                newRow["ICReceiptLabourProductivityKTDH"] = ICReceiptLabourProductivityKTDH;
                                newRow["ICReceiptLabourProductivityKTLR"] = ICReceiptLabourProductivityKTLR;
                                newRow["ICReceiptLabourProductivityKTS"] = ICReceiptLabourProductivityKTS;
                                newRow["ICReceiptLabourProductivityKTDG"] = ICReceiptLabourProductivityKTDG;


                                #endregion

                                dt.Rows.Add(newRow);
                            }
                        }
                        #endregion
                    }
                    else if (viewType == "Year")
                    {
                        #region Year
                        if (receiptdateYear != null)
                        {
                            foreach (string item in receiptdateYear)
                            {
                                DataRow newRow = dt.NewRow();
                                newRow["ICReceiptDate"] = item;

                                int yy = int.Parse(item);
                                DateTime date = new DateTime(yy, 1, 1);
                                BOSDbUtil uliti = new BOSDbUtil();
                                DateTime yearEndDate = BOSUtil.GetYearEndDate(date);
                                List<ADReportsInfo> BatchProductList = new List<ADReportsInfo>();
                                decimal ICReceiptLabourProductivitySLNL = 0;
                                decimal ICReceiptLabourProductivityKTNL = 0;
                                #region CD Phoi
                                //BatchProductList = GetBatchItemForReportProducttionCheckFlow(workshopID, departmentRoomID, date, yearEndDate);
                                BatchProductList = AllBatchProductList.Where(b => b.ICReceiptDate.Date >= date.Date && b.ICReceiptDate.Date <= yearEndDate.Date).ToList();
                                if (BatchProductList != null)
                                {
                                    List<int> Batch = new List<int>();
                                    Batch = BatchProductList.Select(x => x.FK_MMBatchProductID).Distinct().ToList();

                                    if (Batch != null)
                                    {
                                        foreach (int batchID in Batch)
                                        {
                                            ADReportsInfo objBatchProduct = BatchProductList.Where(x => x.FK_MMBatchProductID == batchID).FirstOrDefault();
                                            if (BatchProductList != null)
                                            {
                                                List<ADReportsInfo> ListRPP = new List<ADReportsInfo>();

                                                decimal giaTri = BatchProductList.Where(x => x.FK_MMBatchProductID == batchID).Sum(x => x.ARSaleOrderItemTotalAmount);
                                                decimal tongXuat = BatchProductList.Where(x => x.FK_MMBatchProductID == batchID).Sum(x => x.ICShipmentItemProductQty);
                                                decimal dmProduct = BatchProductList.Where(x => x.FK_MMBatchProductID == batchID).Sum(x => x.MMBatchProductProductionNormItemQuantityPhoi);
                                                decimal tongTinh = BatchProductList.Where(x => x.FK_MMBatchProductID == batchID).Sum(x => x.ICReceiptItemWoodQty);

                                                if (tongXuat / dmProduct > 1)
                                                {
                                                    ICReceiptLabourProductivitySLNL += giaTri;
                                                    ICReceiptLabourProductivityKTNL += tongTinh;
                                                }
                                                else
                                                {
                                                    ICReceiptLabourProductivitySLNL += (tongXuat / dmProduct) * giaTri;
                                                    ICReceiptLabourProductivityKTNL += tongXuat / dmProduct * tongTinh;
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion
                                newRow["ICReceiptLabourProductivitySLNL"] = ICReceiptLabourProductivitySLNL;
                                newRow["ICReceiptLabourProductivityKTNL"] = ICReceiptLabourProductivityKTNL;
                                #region CD Khac
                                decimal ICReceiptLabourProductivitySLSC = 0;
                                decimal ICReceiptLabourProductivitySLDH = 0;
                                decimal ICReceiptLabourProductivitySLLR = 0;
                                decimal ICReceiptLabourProductivitySLS = 0;
                                decimal ICReceiptLabourProductivitySLDG = 0;
                                decimal ICReceiptLabourProductivityKTSC = 0;
                                decimal ICReceiptLabourProductivityKTDH = 0;
                                decimal ICReceiptLabourProductivityKTLR = 0;
                                decimal ICReceiptLabourProductivityKTS = 0;
                                decimal ICReceiptLabourProductivityKTDG = 0;
                                List<int> Product = new List<int>();
                                Product = ListRP.Where(x => x.ICReceiptDateYear == item).Select(x => x.FK_MMBatchProductItemID).Distinct().ToList();
                                if (Product != null)
                                {
                                    int percentDG = 0;
                                    string mess = item;
                                    foreach (int ProductID in Product)
                                    {
                                        percentDG++;
                                        decimal pct = (percentDG * 100) / Product.Count;
                                        BOSProgressBar.Start(mess + ": " + Math.Round(pct) + " % ");
                                        List<ADReportsInfo> ListRPSC = new List<ADReportsInfo>();
                                        List<ADReportsInfo> ListRPDH = new List<ADReportsInfo>();
                                        List<ADReportsInfo> ListRPLR = new List<ADReportsInfo>();
                                        List<ADReportsInfo> ListRPS = new List<ADReportsInfo>();
                                        List<ADReportsInfo> ListRPDG = new List<ADReportsInfo>();

                                        decimal giaTri = ListGiatri.Where(x => x.FK_MMBatchProductItemID == ProductID).FirstOrDefault() != null ?
                                            ListGiatri.Where(x => x.FK_MMBatchProductItemID == ProductID).FirstOrDefault().ARSaleOrderItemTotalAmount : 0;
                                        //-------SC----//
                                        ListRPSC = ListRP.Where(x => x.ICReceiptDateYear == item && x.FK_MMOperationID == 1 && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPSC != null)
                                        {
                                            decimal tongNhapWood = ListRPSC.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMChiTiet.Where(x => x.FK_MMBatchProductItemID == ProductID)
                                                  .Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            if (tongNhapWood >= dmProduct)
                                                ICReceiptLabourProductivitySLSC += (1) * giaTri;
                                            else
                                                ICReceiptLabourProductivitySLSC += (tongNhapWood / dmProduct) * giaTri;
                                            ICReceiptLabourProductivityKTSC += tongNhapWood;
                                        }

                                        //-------DH----//
                                        ListRPDH = ListRP.Where(x => x.ICReceiptDateYear == item && x.FK_MMOperationID == 488 && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPDH != null)
                                        {
                                            decimal tongNhapWood = ListRPDH.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMChiTiet.Where(x => x.FK_MMBatchProductItemID == ProductID)
                                                  .Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            if (tongNhapWood > dmProduct)
                                                ICReceiptLabourProductivitySLDH += (1) * giaTri;
                                            else
                                                ICReceiptLabourProductivitySLDH += (tongNhapWood / dmProduct) * giaTri;
                                            ICReceiptLabourProductivityKTDH += tongNhapWood;
                                        }
                                        //-------LR----//
                                        ListRPLR = ListRP.Where(x => x.ICReceiptDateYear == item && x.FK_MMOperationID == 103 && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPLR != null)
                                        {
                                            decimal tongNhapWood = ListRPLR.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMSP.Where(x => x.FK_MMBatchProductItemID == ProductID)
                                                  .Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            if (tongNhapWood >= dmProduct)
                                                ICReceiptLabourProductivitySLLR += (1) * giaTri;
                                            else
                                                ICReceiptLabourProductivitySLLR += (tongNhapWood / dmProduct) * giaTri;
                                            ICReceiptLabourProductivityKTLR += tongNhapWood;
                                        }
                                        //-------S----//
                                        ListRPS = ListRP.Where(x => x.ICReceiptDateYear == item && (x.FK_MMOperationID == 143 || x.FK_MMOperationID == 145) && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPS != null)
                                        {
                                            decimal tongNhapWood = ListRPS.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMSP.Where(x => x.FK_MMBatchProductItemID == ProductID)
                                                  .Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            if (tongNhapWood >= dmProduct)
                                                ICReceiptLabourProductivitySLS += (1) * giaTri;
                                            else
                                                ICReceiptLabourProductivitySLS += (tongNhapWood / dmProduct) * giaTri;
                                            ICReceiptLabourProductivityKTS += tongNhapWood;
                                        }
                                        //-------DG----//
                                        ListRPDG = ListRP.Where(x => x.ICReceiptDateYear == item && (x.FK_MMOperationID == 144 || x.FK_MMOperationID == 146) && x.FK_MMBatchProductItemID == ProductID).ToList();
                                        if (ListRPDG != null)
                                        {
                                            decimal tongNhapWood = ListRPDG.Sum(x => x.ICReceiptItemWoodQty);
                                            decimal dmProduct = ListDMSP.Where(x => x.FK_MMBatchProductItemID == ProductID)
                                                  .Sum(x => x.MMBatchProductProductionNormItemBlock);
                                            if (tongNhapWood >= dmProduct)
                                                ICReceiptLabourProductivitySLDG += (1) * giaTri;
                                            else
                                                ICReceiptLabourProductivitySLDG += tongNhapWood / dmProduct * giaTri;

                                            ICReceiptLabourProductivityKTDG += tongNhapWood;
                                        }
                                    }
                                    BOSProgressBar.Close();
                                }

                                newRow["ICReceiptLabourProductivitySLSC"] = ICReceiptLabourProductivitySLSC;
                                newRow["ICReceiptLabourProductivitySLDH"] = ICReceiptLabourProductivitySLDH;
                                newRow["ICReceiptLabourProductivitySLLR"] = ICReceiptLabourProductivitySLLR;
                                newRow["ICReceiptLabourProductivitySLS"] = ICReceiptLabourProductivitySLS;
                                newRow["ICReceiptLabourProductivitySLDG"] = ICReceiptLabourProductivitySLDG;

                                newRow["ICReceiptLabourProductivityKTSC"] = ICReceiptLabourProductivityKTSC;
                                newRow["ICReceiptLabourProductivityKTDH"] = ICReceiptLabourProductivityKTDH;
                                newRow["ICReceiptLabourProductivityKTLR"] = ICReceiptLabourProductivityKTLR;
                                newRow["ICReceiptLabourProductivityKTS"] = ICReceiptLabourProductivityKTS;
                                newRow["ICReceiptLabourProductivityKTDG"] = ICReceiptLabourProductivityKTDG;
                                #endregion

                                dt.Rows.Add(newRow);
                            }
                        }
                        #endregion
                    }
                }
                return dt;
            }
            else
                return null;
        }

        public List<ADReportsInfo> GetBatchItemForReportProducttionCheckFlow(int? workShopID, string ba, DateTime fromDate, DateTime toDate)
        {
            List<ADReportsInfo> BatchProductItemList = new List<ADReportsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetBatchItemForReportProducttionCheckFlow", workShopID, fromDate, toDate);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo objReportsInfo = (ADReportsInfo)GetObjectFromDataRow(row);
                    if (objReportsInfo != null)
                    {
                        BatchProductItemList.Add(objReportsInfo);
                    }
                }
            }
            return BatchProductItemList;
        }

        public List<ADReportsInfo> GetBatchItemForReportProducttionCheckFlow(int? departmentID, int? departmentRoomID, string listBatchProductID, DateTime fromDate, DateTime toDate)
        {
            List<ADReportsInfo> BatchProductItemList = new List<ADReportsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetBatchItemForReportProducttionCheckFlowByListBatchID", departmentID, departmentRoomID, listBatchProductID, fromDate, toDate);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo objReportsInfo = (ADReportsInfo)GetObjectFromDataRow(row);
                    if (objReportsInfo != null)
                    {
                        if (objReportsInfo.MMBatchProductProductionNormItemQuantityPhoi > 0)
                        {
                            if (objReportsInfo.ICReceiptItemWoodQty / objReportsInfo.MMBatchProductProductionNormItemQuantityPhoi > 1)
                            {
                                objReportsInfo.MMBatchProductProductionNormItemQuantityRate = 1;
                            }
                            else
                            {
                                objReportsInfo.MMBatchProductProductionNormItemQuantityRate = objReportsInfo.ICReceiptItemWoodQty / objReportsInfo.MMBatchProductProductionNormItemQuantityPhoi;
                            }
                            BatchProductItemList.Add(objReportsInfo);
                        }
                    }
                }
            }
            return BatchProductItemList;
        }
        public DataTable GetDataReportTarget(string viewType, int? workShopID, DateTime fromDate, DateTime toDate, DateTime yearBeginDate)
        {
            MMLabourProductivityTargetConfigsController objLabourProductivityTargetConfigsController = new MMLabourProductivityTargetConfigsController();
            MMLabourProductivityTargetConfigsInfo objLabourProductivityTargetConfigsInfo;
            MMBatchProductProductionNormItemsController objBPPNIsController = new MMBatchProductProductionNormItemsController();
            DataSet ds = dal.GetDataSet("Report_GetDataForReportLabourProductivity", viewType, workShopID, fromDate, toDate);
            #region Table & List info
            List<ADReportsInfo> ListRP = new List<ADReportsInfo>();
            List<ADReportsInfo> ListRPByPhatSinhTK;
            List<ADReportsInfo> ListAllRPByPhatSinhTK;
            List<ADReportsInfo> ListDMChiTiet;
            List<ADReportsInfo> ListDMCum;
            List<ADReportsInfo> ListDMSP;
            DataTable dt = new DataTable();
            dt.Columns.Add(new DataColumn("ICReceiptDate", typeof(string)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivityKTSC", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivityGDSC", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivityDayPillowSC", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivityKTDH", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivityGDDH", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivityDayPillowDH", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivityKTLR", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivityGDLR", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivityDayPillowLR", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivityKTS", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivityGDS", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivityDayPillowS", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivityKTDG", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivityGDDG", typeof(decimal)));
            dt.Columns.Add(new DataColumn("ICReceiptLabourProductivityDayPillowDG", typeof(decimal)));
            #endregion

            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo objReportsInfo = (ADReportsInfo)GetObjectFromDataRow(row);
                    ListRP.Add(objReportsInfo);
                }
                List<DateTime> receiptdate = new List<DateTime>();

                if (ListRP != null && ListRP.Count > 0)
                {
                    #region get Data

                    List<int> BatchProductItemID = new List<int>();
                    List<int> BatchProductID = new List<int>();
                    BatchProductItemID = ListRP.Select(x => x.FK_MMBatchProductItemID).Distinct().ToList();
                    BatchProductID = ListRP.Select(x => x.FK_MMBatchProductID).Distinct().ToList();

                    receiptdate = ListRP.OrderBy(x => x.ICReceiptDate).Select(x => x.ICReceiptDate).Distinct().ToList();
                    List<ADReportsInfo> ListAllDMSP = GetBatchItemProductionNormDetail(string.Join(",", BatchProductItemID.ToArray()));
                    List<ADReportsInfo> ListGiatri = new List<ADReportsInfo>();
                    ListAllRPByPhatSinhTK = GetDataForReportLabourProductivityByOperationPhatSinhTrongKy(workShopID, string.Join(",", BatchProductItemID.ToArray()), yearBeginDate, toDate);
                    ListGiatri = GetBatchItemPrice(string.Join(",", BatchProductID.ToArray()));
                    ListDMChiTiet = ListAllDMSP.Where(p => p.ICProductType == "Chitiet").ToList();
                    ListDMCum = ListAllDMSP.Where(p => p.ICProductType == "Cum").ToList();
                    ListDMSP = ListAllDMSP.Where(p => p.ICProductType == "Product").ToList();


                    List<ADReportsInfo> psPhatSinhTKTruocKy = GetDataForReportTargetNhapTruocKyByList(workShopID, null, BatchProductID, toDate);
                    List<MMBatchProductProductionNormItemsInfo> bppniList = objBPPNIsController.GetItemToConvertReceiptToPrevReceiptOperationByList(BatchProductID, "SemiProduct");
                    #endregion
                    #region property
                    #endregion
                    BOSProgressBar.Start("Đang xử lý dữ liệu... ");
                    #region Date

                    if (receiptdate != null)
                    {
                        foreach (DateTime item in receiptdate)
                        {
                            string mess = item.ToString("dd/MM") + ": ";
                            decimal slPsSC = 0;
                            decimal slPsTC = 0;
                            decimal slPsLR = 0;
                            decimal slPsS = 0;
                            decimal slPsDG = 0;
                            decimal slPsTP = 0;

                            DataRow newRow = dt.NewRow();
                            newRow["ICReceiptDate"] = item.ToString("dd/MM/yyyy");
                            string test = string.Empty;
                            #region CD
                            #region Private Property
                            decimal ICReceiptLabourProductivityKTGDSC = 0;
                            decimal ICReceiptLabourProductivityKTGDDH = 0;
                            decimal ICReceiptLabourProductivityKTGDLR = 0;
                            decimal ICReceiptLabourProductivityKTGDS = 0;
                            decimal ICReceiptLabourProductivityKTGDDG = 0;

                            decimal ICReceiptLabourProductivitySLGDSC = 0;
                            decimal ICReceiptLabourProductivitySLGDDH = 0;
                            decimal ICReceiptLabourProductivitySLGDLR = 0;
                            decimal ICReceiptLabourProductivitySLGDS = 0;
                            decimal ICReceiptLabourProductivitySLGDDG = 0;

                            decimal phatSinhSC = 0;
                            decimal phatSinhTC = 0;
                            decimal phatSinhLR = 0;
                            decimal phatSinhS = 0;
                            decimal phatSinhDG = 0;
                            decimal phatSinhTP = 0;

                            List<ADReportsInfo> ListRPByPhatSinhSC = new List<ADReportsInfo>();
                            List<ADReportsInfo> ListRPByPhatSinhTC = new List<ADReportsInfo>();
                            List<ADReportsInfo> ListRPByPhatSinhLR = new List<ADReportsInfo>();
                            List<ADReportsInfo> ListRPByPhatSinhS = new List<ADReportsInfo>();
                            List<ADReportsInfo> ListRPByPhatSinhDG = new List<ADReportsInfo>();
                            List<ADReportsInfo> ListRPByPhatSinhTP = new List<ADReportsInfo>();

                            #endregion
                            ListRPByPhatSinhTK = ListAllRPByPhatSinhTK.Where(o => o.ICReceiptDate.Date <= item.Date).ToList();

                            #region Phat sinh TKy
                            if (ListRPByPhatSinhTK != null)
                            {
                                ListRPByPhatSinhSC = ListRPByPhatSinhTK.Where(x => x.FK_MMOperationID == 48).ToList();
                                ListRPByPhatSinhTC = ListRPByPhatSinhTK.Where(x => x.FK_MMOperationID == 87).ToList();
                                ListRPByPhatSinhLR = ListRPByPhatSinhTK.Where(x => x.FK_MMOperationID == 103).ToList();
                                ListRPByPhatSinhS = ListRPByPhatSinhTK.Where(x => x.FK_MMOperationID == 143).ToList();
                                ListRPByPhatSinhDG = ListRPByPhatSinhTK.Where(x => x.FK_MMOperationID == 144).ToList();
                                ListRPByPhatSinhTP = ListRPByPhatSinhTK.Where(x => x.FK_MMOperationID == 110).ToList();


                                #region Xly Phat sinh DG
                                if (ListRPByPhatSinhTP != null && ListRPByPhatSinhTP.Count > 0)
                                {
                                    List<int> batchItemTPID = new List<int>();
                                    int percentDG = 0;
                                    List<int> batchID = new List<int>();
                                    batchID = ListRPByPhatSinhDG.Select(x => x.FK_MMBatchProductID).Distinct().ToList();
                                    List<ADReportsInfo> psReGetDG = psPhatSinhTKTruocKy.Where(t => t.FK_MMOperationID == 144 && t.ICReceiptDate.Date <= item.Date).ToList();
                                    foreach (ADReportsInfo ctps in ListRPByPhatSinhTP)
                                    {
                                        percentDG++;
                                        decimal pct = (percentDG * 100) / ListRPByPhatSinhTP.Count;
                                        BOSProgressBar.SetDescription(mess + "Xử lý nhập thiếu ĐG: " + Math.Round(pct) + " % ");

                                        if (!(batchItemTPID.Contains(ctps.FK_MMBatchProductItemID)))
                                        {
                                            List<ADReportsInfo> psDGList = new List<ADReportsInfo>();
                                            decimal blockPerOne = ListDMSP.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID)
                                                .FirstOrDefault().MMBatchProductProductionNormItemBlockPerOne;
                                            decimal slTPPS = ListRPByPhatSinhTP.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID)
                                               .Sum(x => x.ICReceiptItemProductQty);
                                            decimal ktTPPS = blockPerOne * slTPPS;
                                            if (blockPerOne > 0)
                                                ctps.ICReceiptItemWoodQty = blockPerOne * ctps.ICReceiptItemProductQty;

                                            psDGList = ListRPByPhatSinhDG.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID).ToList();

                                            if (psDGList == null || psDGList.Count == 0)
                                            {
                                                List<ADReportsInfo> psReGetDGList = psReGetDG.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID).ToList();
                                                if (psReGetDGList != null && psReGetDGList.Count > 0)
                                                {

                                                    decimal slDGPS = psReGetDGList.Sum(x => x.ICReceiptItemProductQty);
                                                    decimal ktDGPS = slDGPS * blockPerOne;
                                                    if (ktDGPS < ktTPPS)
                                                    {
                                                        if (slTPPS == slDGPS)
                                                        {
                                                            ADReportsInfo ctpsBosung = ListRPByPhatSinhDG.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID).FirstOrDefault();
                                                            if (ctpsBosung != null)
                                                            {
                                                                ctpsBosung.ICReceiptItemWoodQty += ktTPPS - ktDGPS;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            ADReportsInfo ctpsBosung = (ADReportsInfo)ctps.Clone();
                                                            ctpsBosung.ICReceiptItemProductQty = slTPPS - slDGPS;
                                                            ctpsBosung.ICReceiptItemWoodQty = ktTPPS - ktDGPS;
                                                            ctpsBosung.FK_MMOperationID = 144;
                                                            ListRPByPhatSinhDG.Add(ctpsBosung);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    ADReportsInfo ctpsBosung = (ADReportsInfo)ctps.Clone();
                                                    ctpsBosung.ICReceiptItemProductQty = slTPPS;
                                                    ctpsBosung.ICReceiptItemWoodQty = ktTPPS;
                                                    ctpsBosung.FK_MMOperationID = 144;
                                                    ListRPByPhatSinhDG.Add(ctpsBosung);
                                                }
                                            }
                                            else
                                            {

                                                decimal slDGPS = psDGList.Sum(x => x.ICReceiptItemProductQty);
                                                decimal ktDGPS = slDGPS * blockPerOne;
                                                decimal ktCDGPS = 0;
                                                decimal slCDGPS = 0;
                                                List<ADReportsInfo> psReGetDGList = psReGetDG.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID).ToList();
                                                if (psReGetDGList != null && psReGetDGList.Count > 0)
                                                {

                                                    slCDGPS = psReGetDGList.Sum(x => x.ICReceiptItemProductQty);
                                                    ktCDGPS = slCDGPS * blockPerOne;
                                                }
                                                if (slCDGPS > slDGPS)
                                                {
                                                    ADReportsInfo ctpsBosung = ListRPByPhatSinhDG.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID).FirstOrDefault();
                                                    if (ctpsBosung != null)
                                                    {
                                                        ctpsBosung.ICReceiptItemProductQty += slCDGPS - slDGPS;
                                                        ctpsBosung.ICReceiptItemWoodQty = ctpsBosung.ICReceiptItemProductQty * blockPerOne;

                                                        //Tinh lai phat sinh
                                                        psDGList = ListRPByPhatSinhDG.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID).ToList();
                                                        slDGPS = psDGList.Sum(x => x.ICReceiptItemProductQty);
                                                        ktDGPS = psDGList.Sum(x => x.ICReceiptItemWoodQty);
                                                    }
                                                }
                                                if (ktCDGPS < ktTPPS)
                                                {
                                                    if (slCDGPS == slTPPS)
                                                    {
                                                        ADReportsInfo ctpsBosung = ListRPByPhatSinhDG.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID).FirstOrDefault();
                                                        if (ctpsBosung != null)
                                                        {
                                                            ctpsBosung.ICReceiptItemWoodQty += ktTPPS - ktCDGPS;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        ADReportsInfo ctpsBosung = (ADReportsInfo)ctps.Clone();
                                                        ctpsBosung.ICReceiptItemProductQty = slTPPS - slCDGPS;
                                                        ctpsBosung.ICReceiptItemWoodQty = ktTPPS - ktCDGPS;
                                                        ctpsBosung.FK_MMOperationID = 144;
                                                        ListRPByPhatSinhDG.Add(ctpsBosung);
                                                    }
                                                }
                                            }
                                            batchItemTPID.Add(ctps.FK_MMBatchProductItemID);
                                        }
                                    }

                                }
                                #endregion
                                #region Xly Phat sinh S


                                if (ListRPByPhatSinhDG != null && ListRPByPhatSinhDG.Count > 0)
                                {
                                    #region Convert S
                                    List<int> batchID = new List<int>();
                                    batchID = ListRPByPhatSinhDG.Select(x => x.FK_MMBatchProductID).Distinct().ToList();
                                    List<ADReportsInfo> convertNhapTruocKyDGBatchID = new List<ADReportsInfo>();

                                    BOSProgressBar.SetDescription(mess + "Tải dữ liệu ĐM Cụm");
                                    //List<MMBatchProductProductionNormItemsInfo> bppniList = objBPPNIsController.GetItemToConvertReceiptToPrevReceiptOperationByList(batchID, "SemiProduct");
                                    int percentDDS = 0;
                                    foreach (var batch in batchID)
                                    {
                                        percentDDS++;
                                        decimal pct = (percentDDS * 100) / batchID.Count;
                                        BOSProgressBar.SetDescription(mess + "Chuyển SP ĐG => Cụm: " + Math.Round(pct) + " % ");
                                        List<MMBatchProductProductionNormItemsInfo> bppniListFilter = bppniList.Where(x => x.FK_MMBatchProductID == batch).ToList();
                                        List<ADReportsInfo> NhapTruocKyLRBatchID = ListRPByPhatSinhDG.Where(x => x.FK_MMBatchProductID == batch && x.ICReceiptItemProductQty > 0).ToList();
                                        if (bppniListFilter != null && NhapTruocKyLRBatchID != null)
                                        {
                                            foreach (ADReportsInfo itemN in NhapTruocKyLRBatchID)
                                            {

                                                List<MMBatchProductProductionNormItemsInfo> bppniList1 = new List<MMBatchProductProductionNormItemsInfo>();
                                                List<MMBatchProductProductionNormItemsInfo> bppniTP = bppniListFilter.Where(pni => pni.FK_MMBatchProductID == itemN.FK_MMBatchProductID
                                                 && pni.FK_ICProductID == itemN.FK_ICProductID
                                                 && pni.FK_MMBatchProductItemID == itemN.FK_MMBatchProductItemID).ToList();
                                                if (bppniTP.Count() > 0)
                                                {
                                                    bppniList1 = bppniListFilter.Where(f => bppniTP.Any(tp => tp.MMBatchProductProductionNormItemID == f.MMBatchProductProductionNormItemParentID)).ToList();
                                                }
                                                decimal ktCtCon = 0;
                                                foreach (MMBatchProductProductionNormItemsInfo bppni in bppniList1)
                                                {
                                                    ADReportsInfo objItem = new ADReportsInfo();
                                                    BOSUtil.CopyObject(itemN, objItem);
                                                    objItem.FK_ICProductID = bppni.FK_ICProductID;
                                                    objItem.ICReceiptItemProductQty = (bppni.MMBatchProductProductionNormItemQuantity / bppni.MMBatchProductItemProductQty) * itemN.ICReceiptItemProductQty;
                                                    objItem.ICReceiptItemWoodQty = objItem.ICReceiptItemProductQty * bppni.MMBatchProductProductionNormItemBlockPerOne;
                                                    ktCtCon += objItem.ICReceiptItemWoodQty;
                                                    convertNhapTruocKyDGBatchID.Add(objItem);
                                                }
                                                if (ktCtCon < itemN.ICReceiptItemWoodQty)
                                                {
                                                    itemN.ICReceiptItemWoodQty = ktCtCon;
                                                }

                                            }

                                        }
                                    }

                                    //decimal slConve = convertNhapTruocKyDGBatchID.Sum(x => x.ICReceiptItemProductQty);
                                    //decimal ktConve = convertNhapTruocKyDGBatchID.Sum(x => x.ICReceiptItemWoodQty);
                                    //decimal ktCoNhap0 = ListRPByPhatSinhDG.Where(x => x.ICReceiptItemProductQty == 0).Sum(x => x.ICReceiptItemWoodQty);
                                    #endregion
                                    List<string> batchItemDGID = new List<string>();
                                    BOSProgressBar.SetDescription(mess + "Tải dữ liệu Sơn");
                                    List<ADReportsInfo> psReGetListS = psPhatSinhTKTruocKy.Where(t => t.FK_MMOperationID == 143 && t.ICReceiptDate.Date <= item.Date).ToList();
                                    int percentS = 0;
                                    foreach (ADReportsInfo ctps in convertNhapTruocKyDGBatchID)
                                    {
                                        percentS++;
                                        decimal pct = (percentS * 100) / convertNhapTruocKyDGBatchID.Count;
                                        BOSProgressBar.SetDescription(mess + "Xử lý nhập thiếu Sơn: " + Math.Round(pct) + " % ");
                                        if (!batchItemDGID.Contains(ctps.FK_MMBatchProductItemID + "_" + ctps.FK_ICProductID))
                                        {
                                            List<ADReportsInfo> psTCList = new List<ADReportsInfo>();
                                            decimal ktTPPS = convertNhapTruocKyDGBatchID.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                && x.FK_ICProductID == ctps.FK_ICProductID)
                                                        .Sum(x => x.ICReceiptItemWoodQty);
                                            decimal slTPPS = convertNhapTruocKyDGBatchID.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                && x.FK_ICProductID == ctps.FK_ICProductID)
                                               .Sum(x => x.ICReceiptItemProductQty);

                                            psTCList = ListRPByPhatSinhS.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                && x.FK_ICProductID == ctps.FK_ICProductID).ToList();
                                            if (psTCList == null || psTCList.Count == 0)
                                            {

                                                List<ADReportsInfo> psReGetTCList = psReGetListS.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                && x.FK_ICProductID == ctps.FK_ICProductID).ToList();
                                                if (psReGetTCList != null && psReGetTCList.Count > 0)
                                                {
                                                    decimal ktTCPS = psReGetTCList.Sum(x => x.ICReceiptItemWoodQty);
                                                    decimal slTCPS = psReGetTCList.Sum(x => x.ICReceiptItemProductQty);
                                                    if (ktTCPS < ktTPPS)
                                                    {
                                                        if (slTPPS == slTCPS)
                                                        {
                                                            ADReportsInfo ctpsBosung = ListRPByPhatSinhS.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                                && x.FK_ICProductID == ctps.FK_ICProductID).FirstOrDefault();
                                                            if (ctpsBosung != null)
                                                            {
                                                                ctpsBosung.ICReceiptItemWoodQty += ktTPPS - ktTCPS;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            ADReportsInfo ctpsBosung = (ADReportsInfo)ctps.Clone();
                                                            ctpsBosung.ICReceiptItemProductQty = slTPPS - slTCPS;
                                                            ctpsBosung.ICReceiptItemWoodQty = ktTPPS - ktTCPS;
                                                            ctpsBosung.FK_MMOperationID = 143;
                                                            ListRPByPhatSinhS.Add(ctpsBosung);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    ADReportsInfo ctpsBosung = (ADReportsInfo)ctps.Clone();
                                                    ctpsBosung.ICReceiptItemProductQty = slTPPS;
                                                    ctpsBosung.ICReceiptItemWoodQty = ktTPPS;
                                                    ctpsBosung.FK_MMOperationID = 143;
                                                    ListRPByPhatSinhS.Add(ctpsBosung);
                                                }
                                            }
                                            else
                                            {
                                                decimal ktTCPS = psTCList.Sum(x => x.ICReceiptItemWoodQty);
                                                decimal slTCPS = psTCList.Sum(x => x.ICReceiptItemProductQty);
                                                decimal ktCDGPS = 0;
                                                decimal slCDGPS = 0;
                                                List<ADReportsInfo> psReGetTCList = psReGetListS.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                && x.FK_ICProductID == ctps.FK_ICProductID).ToList();
                                                if (psReGetTCList != null && psReGetTCList.Count > 0)
                                                {
                                                    ktCDGPS = psReGetTCList.Sum(x => x.ICReceiptItemWoodQty);
                                                    slCDGPS = psReGetTCList.Sum(x => x.ICReceiptItemProductQty);
                                                }
                                                //Sl nhập trước kỳ > SL nhâp đã phat sinh
                                                if (slCDGPS > slTCPS)
                                                {
                                                    ADReportsInfo ctpsBosung = ListRPByPhatSinhS.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                        && x.FK_ICProductID == ctps.FK_ICProductID).FirstOrDefault();
                                                    if (ctpsBosung != null)
                                                    {
                                                        ctpsBosung.ICReceiptItemProductQty += slCDGPS - slTCPS;

                                                        ctpsBosung.ICReceiptItemWoodQty += ktCDGPS - ktTCPS;
                                                        //tính lai KL va SL đã phat sinh
                                                        psTCList = ListRPByPhatSinhS.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                        && x.FK_ICProductID == ctps.FK_ICProductID).ToList();
                                                        slTCPS = psTCList.Sum(x => x.ICReceiptItemProductQty);
                                                        ktTCPS = psTCList.Sum(x => x.ICReceiptItemWoodQty);
                                                    }
                                                }
                                                //Gia công
                                                if (ktCDGPS < ktTPPS)
                                                {
                                                    if (slCDGPS == slTPPS)
                                                    {
                                                        ADReportsInfo ctpsBosung = ListRPByPhatSinhS.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                            && x.FK_ICProductID == ctps.FK_ICProductID).FirstOrDefault();
                                                        if (ctpsBosung != null)
                                                        {
                                                            ctpsBosung.ICReceiptItemWoodQty += ktTPPS - ktCDGPS;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        ADReportsInfo ctpsBosung = (ADReportsInfo)ctps.Clone();
                                                        ctpsBosung.ICReceiptItemProductQty = slTPPS - slCDGPS;
                                                        ctpsBosung.ICReceiptItemWoodQty = ktTPPS - ktCDGPS;
                                                        ctpsBosung.FK_MMOperationID = 143;
                                                        ListRPByPhatSinhS.Add(ctpsBosung);
                                                    }
                                                }
                                            }
                                            batchItemDGID.Add(ctps.FK_MMBatchProductItemID + "_" + ctps.FK_ICProductID);
                                        }
                                    }

                                }
                                #endregion
                                #region Xly Phat sinh LR
                                if (ListRPByPhatSinhS != null && ListRPByPhatSinhS.Count > 0)
                                {
                                    List<string> batchItemSID = new List<string>();
                                    List<int> batchID = new List<int>();
                                    batchID = ListRPByPhatSinhS.Select(x => x.FK_MMBatchProductID).Distinct().ToList();
                                    BOSProgressBar.SetDescription(mess + "Tải dữ liệu LR...");
                                    List<ADReportsInfo> psReGetListLR = psPhatSinhTKTruocKy.Where(t => t.FK_MMOperationID == 103 && t.ICReceiptDate.Date <= item.Date).ToList();
                                    //GetDataForReportTargetNhapTruocKyByList(workShopID, 103, batchID, item);
                                    int percentLR = 0;
                                    foreach (ADReportsInfo ctps in ListRPByPhatSinhS)
                                    {
                                        percentLR++;
                                        decimal pct = (percentLR * 100) / ListRPByPhatSinhS.Count;
                                        BOSProgressBar.SetDescription(mess + "Xử lý nhập thiếu LR " + Math.Round(pct) + " % ");
                                        if (!(batchItemSID.Contains(ctps.FK_MMBatchProductItemID + "_" + ctps.FK_ICProductID)))
                                        {
                                            List<ADReportsInfo> psLRList = new List<ADReportsInfo>();
                                            decimal ktSPS = ListRPByPhatSinhS.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                && x.FK_ICProductID == ctps.FK_ICProductID)
                                                        .Sum(x => x.ICReceiptItemWoodQty);
                                            decimal slSPS = ListRPByPhatSinhS.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                && x.FK_ICProductID == ctps.FK_ICProductID)
                                               .Sum(x => x.ICReceiptItemProductQty);

                                            psLRList = ListRPByPhatSinhLR.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                && x.FK_ICProductID == ctps.FK_ICProductID).ToList();
                                            if (psLRList == null || psLRList.Count == 0)
                                            {
                                                List<ADReportsInfo> psReGetLRList = psReGetListLR.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                    && x.FK_ICProductID == ctps.FK_ICProductID).ToList();
                                                if (psReGetLRList != null && psReGetLRList.Count > 0)
                                                {
                                                    decimal ktLRPS = psReGetLRList.Sum(x => x.ICReceiptItemWoodQty);
                                                    decimal slLRPS = psReGetLRList.Sum(x => x.ICReceiptItemProductQty);
                                                    if (ktLRPS < ktSPS)
                                                    {
                                                        if (slSPS == slLRPS)
                                                        {
                                                            ADReportsInfo ctpsBosung = ListRPByPhatSinhLR.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                                && x.FK_ICProductID == ctps.FK_ICProductID).FirstOrDefault();
                                                            if (ctpsBosung != null)
                                                            {
                                                                ctpsBosung.ICReceiptItemWoodQty += ktSPS - ktLRPS;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            ADReportsInfo ctpsBosung = (ADReportsInfo)ctps.Clone();
                                                            ctpsBosung.ICReceiptItemProductQty = slSPS - slLRPS;
                                                            ctpsBosung.ICReceiptItemWoodQty = ktSPS - ktLRPS;
                                                            ctpsBosung.FK_MMOperationID = 103;
                                                            ListRPByPhatSinhLR.Add(ctpsBosung);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    ADReportsInfo ctpsBosung = (ADReportsInfo)ctps.Clone();
                                                    ctpsBosung.ICReceiptItemProductQty = slSPS;
                                                    ctpsBosung.ICReceiptItemWoodQty = ktSPS;
                                                    ctpsBosung.FK_MMOperationID = 103;
                                                    ListRPByPhatSinhLR.Add(ctpsBosung);
                                                }
                                            }
                                            else
                                            {
                                                decimal ktTCPS = psLRList.Sum(x => x.ICReceiptItemWoodQty);
                                                decimal slTCPS = psLRList.Sum(x => x.ICReceiptItemProductQty);
                                                decimal ktCDGPS = 0;
                                                decimal slCDGPS = 0;
                                                List<ADReportsInfo> psReGetLRList = psReGetListLR.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                    && x.FK_ICProductID == ctps.FK_ICProductID).ToList();
                                                if (psReGetLRList != null && psReGetLRList.Count > 0)
                                                {
                                                    ktCDGPS = psReGetLRList.Sum(x => x.ICReceiptItemWoodQty);
                                                    slCDGPS = psReGetLRList.Sum(x => x.ICReceiptItemProductQty);
                                                }

                                                //Sl nhập trước kỳ > SL nhâp đã phat sinh
                                                if (slCDGPS > slTCPS)
                                                {
                                                    ADReportsInfo ctpsBosung = ListRPByPhatSinhLR.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                        && x.FK_ICProductID == ctps.FK_ICProductID).FirstOrDefault();
                                                    if (ctpsBosung != null)
                                                    {
                                                        ctpsBosung.ICReceiptItemProductQty += slCDGPS - slTCPS;

                                                        ctpsBosung.ICReceiptItemWoodQty += ktCDGPS - ktTCPS;
                                                        //tính lai KL va SL đã phat sinh
                                                        psLRList = ListRPByPhatSinhLR.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                        && x.FK_ICProductID == ctps.FK_ICProductID).ToList();
                                                        slTCPS = psLRList.Sum(x => x.ICReceiptItemProductQty);
                                                        ktTCPS = psLRList.Sum(x => x.ICReceiptItemWoodQty);
                                                    }
                                                }

                                                if (ktCDGPS < ktSPS)
                                                {
                                                    if (slCDGPS == slSPS)
                                                    {
                                                        ADReportsInfo ctpsBosung = ListRPByPhatSinhLR.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                            && x.FK_ICProductID == ctps.FK_ICProductID).FirstOrDefault();
                                                        if (ctpsBosung != null)
                                                        {
                                                            ctpsBosung.ICReceiptItemWoodQty += ktSPS - ktCDGPS;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        ADReportsInfo ctpsBosung = (ADReportsInfo)ctps.Clone();
                                                        ctpsBosung.ICReceiptItemProductQty = slSPS - slCDGPS;
                                                        ctpsBosung.ICReceiptItemWoodQty = ktSPS - ktCDGPS;
                                                        ctpsBosung.FK_MMOperationID = 103;
                                                        ListRPByPhatSinhLR.Add(ctpsBosung);
                                                    }
                                                }
                                            }
                                            batchItemSID.Add(ctps.FK_MMBatchProductItemID + "_" + ctps.FK_ICProductID);
                                        }
                                    }

                                }
                                #endregion
                                #region Xly Phat sinh TC
                                if (ListRPByPhatSinhLR != null && ListRPByPhatSinhLR.Count > 0)
                                {
                                    #region Convert TC
                                    List<int> batchID = new List<int>();
                                    batchID = ListRPByPhatSinhLR.Select(x => x.FK_MMBatchProductID).Distinct().ToList();
                                    BOSProgressBar.SetDescription(mess + "Tải dữ liệu Cụm => ĐH: ");

                                    //List<MMBatchProductProductionNormItemsInfo> bppniList = objBPPNIsController.GetItemToConvertReceiptToPrevReceiptOperationByList(batchID, "SemiProduct");
                                    List<ADReportsInfo> convertNhapTruocKyLRBatchID = new List<ADReportsInfo>();
                                    List<ADReportsInfo> psReGetListTC = psPhatSinhTKTruocKy.Where(t => t.FK_MMOperationID == 87 && t.ICReceiptDate.Date <= item.Date).ToList();
                                    //GetDataForReportTargetNhapTruocKyByList(workShopID, 87, batchID, item);
                                    int percentLR = 0;
                                    foreach (var batch in batchID)
                                    {
                                        percentLR++;
                                        decimal pct = (percentLR * 100) / batchID.Count;
                                        BOSProgressBar.SetDescription(mess + "Chuyển Cụm => Chi tiết ĐH: " + Math.Round(pct) + " % ");
                                        List<MMBatchProductProductionNormItemsInfo> bppniListFilter = bppniList.Where(x => x.FK_MMBatchProductID == batch).ToList();
                                        List<ADReportsInfo> NhapTruocKyLRBatchID = ListRPByPhatSinhLR.Where(x => x.FK_MMBatchProductID == batch && x.ICReceiptItemProductQty > 0).ToList();
                                        if (bppniListFilter != null && NhapTruocKyLRBatchID != null)
                                        {
                                            foreach (ADReportsInfo itemN in NhapTruocKyLRBatchID)
                                            {
                                                if (itemN.TheNumberOfChild > 0)
                                                {
                                                    List<MMBatchProductProductionNormItemsInfo> bppniList1 = new List<MMBatchProductProductionNormItemsInfo>();
                                                    if (itemN.FK_MMBatchProductProductionNormItemID > 0)
                                                        bppniList1 = bppniListFilter.Where(pni => pni.MMBatchProductProductionNormItemParentID == itemN.FK_MMBatchProductProductionNormItemID).ToList();
                                                    if (bppniList1.Count == 0)
                                                    {
                                                        bppniList1 = bppniListFilter.Where(pni =>
                                                                        bppniListFilter.Where(pni1 => pni1.FK_MMBatchProductID == itemN.FK_MMBatchProductID
                                                                            && pni1.FK_ICProductID == itemN.FK_ICProductID
                                                                            && pni1.FK_MMBatchProductItemID == itemN.FK_MMBatchProductItemID)
                                                                            .Any(pni2 => pni2.MMBatchProductProductionNormItemID == pni.MMBatchProductProductionNormItemParentID)).ToList();
                                                    }
                                                    foreach (MMBatchProductProductionNormItemsInfo bppni in bppniList1)
                                                    {
                                                        ADReportsInfo objItem = new ADReportsInfo();
                                                        BOSUtil.CopyObject(itemN, objItem);
                                                        objItem.FK_ICProductID = bppni.FK_ICProductID;
                                                        objItem.ICReceiptItemProductQty = (bppni.MMBatchProductProductionNormItemQuantity / bppni.SoLuongCum) * itemN.ICReceiptItemProductQty;
                                                        objItem.ICReceiptItemWoodQty = objItem.ICReceiptItemProductQty * bppni.MMBatchProductProductionNormItemBlockPerOne;
                                                        convertNhapTruocKyLRBatchID.Add(objItem);
                                                    }
                                                }
                                                else
                                                {
                                                    convertNhapTruocKyLRBatchID.Add(itemN);
                                                }
                                            }
                                        }
                                    }

                                    #endregion


                                    List<string> batchItemLRID = new List<string>();
                                    int percentTC = 0;
                                    foreach (ADReportsInfo ctps in convertNhapTruocKyLRBatchID)
                                    {
                                        percentTC++;
                                        decimal pct = (percentTC * 100) / convertNhapTruocKyLRBatchID.Count;
                                        BOSProgressBar.SetDescription(mess + "Xử lý nhập thiếu ĐH: " + Math.Round(pct) + " % ");
                                        if (!batchItemLRID.Contains(ctps.FK_MMBatchProductItemID + "_" + ctps.FK_ICProductID))
                                        {
                                            List<ADReportsInfo> psTCList = new List<ADReportsInfo>();
                                            decimal ktTPPS = convertNhapTruocKyLRBatchID.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                && x.FK_ICProductID == ctps.FK_ICProductID)
                                                        .Sum(x => x.ICReceiptItemWoodQty);
                                            decimal slTPPS = convertNhapTruocKyLRBatchID.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                && x.FK_ICProductID == ctps.FK_ICProductID)
                                               .Sum(x => x.ICReceiptItemProductQty);

                                            psTCList = ListRPByPhatSinhTC.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                && x.FK_ICProductID == ctps.FK_ICProductID).ToList();
                                            if (psTCList == null || psTCList.Count == 0)
                                            {

                                                List<ADReportsInfo> psReGetTCList = psReGetListTC.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                && x.FK_ICProductID == ctps.FK_ICProductID).ToList();
                                                if (psReGetTCList != null && psReGetTCList.Count > 0)
                                                {
                                                    decimal ktTCPS = psReGetTCList.Sum(x => x.ICReceiptItemWoodQty);
                                                    decimal slTCPS = psReGetTCList.Sum(x => x.ICReceiptItemProductQty);
                                                    if (ktTCPS < ktTPPS)
                                                    {
                                                        if (slTPPS == slTCPS)
                                                        {
                                                            ADReportsInfo ctpsBosung = ListRPByPhatSinhTC.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                              && x.FK_ICProductID == ctps.FK_ICProductID).FirstOrDefault();
                                                            if (ctpsBosung != null)
                                                            {
                                                                ctpsBosung.ICReceiptItemWoodQty += ktTPPS - ktTCPS;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            ADReportsInfo ctpsBosung = (ADReportsInfo)ctps.Clone();
                                                            ctpsBosung.ICReceiptItemProductQty = slTPPS - slTCPS;
                                                            ctpsBosung.ICReceiptItemWoodQty = ktTPPS - ktTCPS;
                                                            ctpsBosung.FK_MMOperationID = 87;
                                                            ListRPByPhatSinhTC.Add(ctpsBosung);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    ADReportsInfo ctpsBosung = (ADReportsInfo)ctps.Clone();
                                                    ctpsBosung.ICReceiptItemProductQty = slTPPS;
                                                    ctpsBosung.ICReceiptItemWoodQty = ktTPPS;
                                                    ctpsBosung.FK_MMOperationID = 87;
                                                    ListRPByPhatSinhTC.Add(ctpsBosung);
                                                }
                                            }
                                            else
                                            {
                                                decimal ktTCPS = psTCList.Sum(x => x.ICReceiptItemWoodQty);
                                                decimal slTCPS = psTCList.Sum(x => x.ICReceiptItemProductQty);
                                                decimal ktCDGPS = 0;
                                                decimal slCDGPS = 0;
                                                List<ADReportsInfo> psReGetTCList = psReGetListTC.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                && x.FK_ICProductID == ctps.FK_ICProductID).ToList();
                                                if (psReGetTCList != null && psReGetTCList.Count > 0)
                                                {
                                                    ktCDGPS = psReGetTCList.Sum(x => x.ICReceiptItemWoodQty);
                                                    slCDGPS = psReGetTCList.Sum(x => x.ICReceiptItemProductQty);
                                                }
                                                //Sl nhập trước kỳ > SL nhâp đã phat sinh
                                                if (slCDGPS > slTCPS)
                                                {
                                                    ADReportsInfo ctpsBosung = ListRPByPhatSinhTC.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                        && x.FK_ICProductID == ctps.FK_ICProductID).FirstOrDefault();
                                                    if (ctpsBosung != null)
                                                    {
                                                        ctpsBosung.ICReceiptItemProductQty += slCDGPS - slTCPS;

                                                        ctpsBosung.ICReceiptItemWoodQty += ktCDGPS - ktTCPS;
                                                        //tính lai KL va SL đã phat sinh
                                                        psTCList = ListRPByPhatSinhTC.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                        && x.FK_ICProductID == ctps.FK_ICProductID).ToList();
                                                        slTCPS = psTCList.Sum(x => x.ICReceiptItemProductQty);
                                                        ktTCPS = psTCList.Sum(x => x.ICReceiptItemWoodQty);
                                                    }
                                                }

                                                if (ktCDGPS < ktTPPS)
                                                {
                                                    if (slCDGPS == slTPPS)
                                                    {
                                                        ADReportsInfo ctpsBosung = ListRPByPhatSinhTC.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                            && x.FK_ICProductID == ctps.FK_ICProductID).FirstOrDefault();
                                                        if (ctpsBosung != null)
                                                        {
                                                            ctpsBosung.ICReceiptItemWoodQty += ktTPPS - ktCDGPS;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        ADReportsInfo ctpsBosung = (ADReportsInfo)ctps.Clone();
                                                        ctpsBosung.ICReceiptItemProductQty = slTPPS - slCDGPS;
                                                        ctpsBosung.ICReceiptItemWoodQty = ktTPPS - ktCDGPS;
                                                        ctpsBosung.FK_MMOperationID = 87;
                                                        ListRPByPhatSinhTC.Add(ctpsBosung);
                                                    }
                                                }
                                            }
                                            batchItemLRID.Add(ctps.FK_MMBatchProductItemID + "_" + ctps.FK_ICProductID);
                                        }
                                    }

                                }
                                #endregion
                                #region Xly Phat sinh SC
                                if (ListRPByPhatSinhTC != null && ListRPByPhatSinhTC.Count > 0)
                                {
                                    List<string> batchItemTCID = new List<string>();
                                    List<int> batchID = new List<int>();
                                    batchID = ListRPByPhatSinhTC.Select(x => x.FK_MMBatchProductID).Distinct().ToList();
                                    List<ADReportsInfo> convertNhapTruocKyLRBatchID = new List<ADReportsInfo>();
                                    BOSProgressBar.SetDescription(mess + "Tải dữ liệu SC...");
                                    List<ADReportsInfo> psReGetListSC = psPhatSinhTKTruocKy.Where(t => t.FK_MMOperationID == 48 && t.ICReceiptDate.Date <= item.Date).ToList();
                                    //GetDataForReportTargetNhapTruocKyByList(workShopID, 48, batchID, item);
                                    int percentTC = 0;
                                    foreach (ADReportsInfo ctps in ListRPByPhatSinhTC)
                                    {
                                        percentTC++;
                                        decimal pct = (percentTC * 100) / ListRPByPhatSinhTC.Count;
                                        BOSProgressBar.SetDescription(mess + "Xử lý nhập thiếu SC: " + Math.Round(pct) + " % ");
                                        if (!(batchItemTCID.Contains(ctps.FK_MMBatchProductItemID + "_" + ctps.FK_ICProductID)))
                                        {
                                            List<ADReportsInfo> psSCList = new List<ADReportsInfo>();
                                            decimal ktTPPS = ListRPByPhatSinhTC.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                && x.FK_ICProductID == ctps.FK_ICProductID)
                                                        .Sum(x => x.ICReceiptItemWoodQty);
                                            decimal slTPPS = ListRPByPhatSinhTC.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                && x.FK_ICProductID == ctps.FK_ICProductID)
                                               .Sum(x => x.ICReceiptItemProductQty);

                                            psSCList = ListRPByPhatSinhSC.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                && x.FK_ICProductID == ctps.FK_ICProductID).ToList();
                                            List<ADReportsInfo> psReGetSCList = psReGetListSC.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                && x.FK_ICProductID == ctps.FK_ICProductID).ToList();
                                            if (psSCList == null || psSCList.Count == 0)
                                            {

                                                if (psReGetSCList != null && psReGetSCList.Count > 0)
                                                {
                                                    decimal ktSCPS = psReGetSCList.Sum(x => x.ICReceiptItemWoodQty);
                                                    decimal slSCPS = psReGetSCList.Sum(x => x.ICReceiptItemProductQty);
                                                    if (ktSCPS < ktTPPS)
                                                    {
                                                        if (slTPPS == slSCPS)
                                                        {
                                                            ADReportsInfo ctpsBosung = ListRPByPhatSinhSC.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                                && x.FK_ICProductID == ctps.FK_ICProductID).FirstOrDefault();
                                                            if (ctpsBosung != null)
                                                            {
                                                                ctpsBosung.ICReceiptItemWoodQty += ktTPPS - ktSCPS;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            ADReportsInfo ctpsBosung = (ADReportsInfo)ctps.Clone();
                                                            ctpsBosung.ICReceiptItemProductQty = slTPPS - slSCPS;
                                                            ctpsBosung.ICReceiptItemWoodQty = ktTPPS - ktSCPS;
                                                            ctpsBosung.FK_MMOperationID = 48;
                                                            ListRPByPhatSinhSC.Add(ctpsBosung);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    ADReportsInfo ctpsBosung = (ADReportsInfo)ctps.Clone();
                                                    ctpsBosung.ICReceiptItemProductQty = slTPPS;
                                                    ctpsBosung.ICReceiptItemWoodQty = ktTPPS;
                                                    ctpsBosung.FK_MMOperationID = 48;
                                                    ListRPByPhatSinhSC.Add(ctpsBosung);
                                                }
                                            }
                                            else
                                            {
                                                decimal ktTCPS = psSCList.Sum(x => x.ICReceiptItemWoodQty);
                                                decimal slTCPS = psSCList.Sum(x => x.ICReceiptItemProductQty);
                                                decimal ktCDGPS = 0;
                                                decimal slCDGPS = 0;
                                                List<ADReportsInfo> psReGetTCList = psReGetListSC.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                && x.FK_ICProductID == ctps.FK_ICProductID).ToList();
                                                if (psReGetTCList != null && psReGetTCList.Count > 0)
                                                {
                                                    ktCDGPS = psReGetTCList.Sum(x => x.ICReceiptItemWoodQty);
                                                    slCDGPS = psReGetTCList.Sum(x => x.ICReceiptItemProductQty);
                                                }

                                                //Sl nhập trước kỳ > SL nhâp đã phat sinh
                                                if (slCDGPS > slTCPS || ktCDGPS > ktTCPS)
                                                {
                                                    ADReportsInfo ctpsBosung = ListRPByPhatSinhSC.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                        && x.FK_ICProductID == ctps.FK_ICProductID).FirstOrDefault();
                                                    if (ctpsBosung != null)
                                                    {
                                                        ctpsBosung.ICReceiptItemProductQty += slCDGPS - slTCPS;

                                                        ctpsBosung.ICReceiptItemWoodQty += ktCDGPS - ktTCPS;
                                                        //tính lai KL va SL đã phat sinh
                                                        psSCList = ListRPByPhatSinhSC.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                        && x.FK_ICProductID == ctps.FK_ICProductID).ToList();
                                                        slTCPS = psSCList.Sum(x => x.ICReceiptItemProductQty);
                                                        ktTCPS = psSCList.Sum(x => x.ICReceiptItemWoodQty);
                                                    }
                                                }
                                                if (ktCDGPS < ktTPPS)
                                                {
                                                    if (slCDGPS == slTPPS)
                                                    {
                                                        ADReportsInfo ctpsBosung = ListRPByPhatSinhSC.Where(x => x.FK_MMBatchProductItemID == ctps.FK_MMBatchProductItemID
                                                            && x.FK_ICProductID == ctps.FK_ICProductID).FirstOrDefault();
                                                        if (ctpsBosung != null)
                                                        {
                                                            ctpsBosung.ICReceiptItemWoodQty += ktTPPS - ktCDGPS;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        ADReportsInfo ctpsBosung = (ADReportsInfo)ctps.Clone();
                                                        ctpsBosung.ICReceiptItemProductQty = slTPPS - slCDGPS;
                                                        ctpsBosung.ICReceiptItemWoodQty = ktTPPS - ktCDGPS;
                                                        ctpsBosung.FK_MMOperationID = 48;
                                                        ListRPByPhatSinhSC.Add(ctpsBosung);
                                                    }
                                                }
                                            }
                                            batchItemTCID.Add(ctps.FK_MMBatchProductItemID + "_" + ctps.FK_ICProductID);
                                        }

                                    }

                                }
                                #endregion

                                BOSProgressBar.SetDescription("Tính gối đầu: " + item.ToString("dd/MM/yyyy"));
                                #region Phat sinh TK SC

                                if (ListRPByPhatSinhSC != null)
                                {
                                    phatSinhSC = ListRPByPhatSinhSC.Sum(x => x.ICReceiptItemWoodQty);
                                    List<int> batchItemSCID = new List<int>();
                                    foreach (ADReportsInfo itemPS in ListRPByPhatSinhSC)
                                    {
                                        if (!batchItemSCID.Contains(itemPS.FK_MMBatchProductItemID) && itemPS.FK_MMBatchProductItemID > 0)
                                        {
                                            decimal dm = 0;
                                            decimal slSX = 0;
                                            decimal giatri = ListGiatri.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID).FirstOrDefault() != null ?
                                                ListGiatri.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID).FirstOrDefault().ARSaleOrderItemTotalAmount : 0;
                                            if (giatri == 0 || giatri > 50000)
                                            {

                                            }
                                            dm = ListDMChiTiet.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID)
                                                .Sum(x => x.MMBatchProductProductionNormItemBlock);

                                            slSX = ListRPByPhatSinhSC.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID).Sum(x => x.ICReceiptItemWoodQty);
                                            if (slSX >= dm)
                                            {
                                                slPsSC += 1 * giatri;
                                            }
                                            else
                                            {
                                                slPsSC += slSX / dm * giatri;
                                            }
                                        }
                                        batchItemSCID.Add(itemPS.FK_MMBatchProductItemID);
                                    }
                                }
                                #endregion
                                #region Phat sinh TK TC

                                if (ListRPByPhatSinhTC != null)
                                {
                                    phatSinhTC = ListRPByPhatSinhTC.Sum(x => x.ICReceiptItemWoodQty);
                                    List<int> batchItemTCID = new List<int>();
                                    foreach (ADReportsInfo itemPS in ListRPByPhatSinhTC)
                                    {
                                        if (!batchItemTCID.Contains(itemPS.FK_MMBatchProductItemID) && itemPS.FK_MMBatchProductItemID > 0)
                                        {
                                            decimal dm = 0;
                                            decimal slSX = 0;
                                            decimal giatri = ListGiatri.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID).FirstOrDefault() != null ?
                                                            ListGiatri.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID).FirstOrDefault().ARSaleOrderItemTotalAmount : 0;
                                            dm = ListDMChiTiet.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID)
                                                .Sum(x => x.MMBatchProductProductionNormItemBlock);

                                            slSX = ListRPByPhatSinhTC.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID).Sum(x => x.ICReceiptItemWoodQty);
                                            if (slSX >= dm)
                                            {
                                                slPsTC += 1 * giatri;
                                            }
                                            else
                                            {
                                                slPsTC += slSX / dm * giatri;
                                            }
                                        }
                                        batchItemTCID.Add(itemPS.FK_MMBatchProductItemID);
                                    }
                                }
                                #endregion
                                #region Phat sinh TK LR

                                if (ListRPByPhatSinhLR != null)
                                {
                                    phatSinhLR = ListRPByPhatSinhLR.Sum(x => x.ICReceiptItemWoodQty);
                                    List<int> batchItemLRID = new List<int>();
                                    foreach (ADReportsInfo itemPS in ListRPByPhatSinhLR)
                                    {
                                        if (!batchItemLRID.Contains(itemPS.FK_MMBatchProductItemID) && itemPS.FK_MMBatchProductItemID > 0)
                                        {
                                            decimal dm = 0;
                                            decimal slSX = 0;
                                            decimal giatri = ListGiatri.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID).FirstOrDefault() != null ?
                                                ListGiatri.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID).FirstOrDefault().ARSaleOrderItemTotalAmount : 0;
                                            dm = ListDMSP.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID)
                                                .Sum(x => x.MMBatchProductProductionNormItemBlock);

                                            slSX = ListRPByPhatSinhLR.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID).Sum(x => x.ICReceiptItemWoodQty);
                                            if (slSX >= dm)
                                            {
                                                slPsLR += 1 * giatri;
                                            }
                                            else
                                            {
                                                slPsLR += slSX / dm * giatri;
                                            }
                                        }
                                        batchItemLRID.Add(itemPS.FK_MMBatchProductItemID);
                                    }
                                }
                                #endregion
                                #region Phat sinh TK S

                                if (ListRPByPhatSinhS != null)
                                {
                                    phatSinhS = ListRPByPhatSinhS.Sum(x => x.ICReceiptItemWoodQty);
                                    List<int> batchItemSID = new List<int>();
                                    foreach (ADReportsInfo itemPS in ListRPByPhatSinhS)
                                    {
                                        if (!batchItemSID.Contains(itemPS.FK_MMBatchProductItemID) && itemPS.FK_MMBatchProductItemID > 0)
                                        {
                                            decimal dm = 0;
                                            decimal slSX = 0;
                                            decimal giatri = ListGiatri.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID).FirstOrDefault() != null ?
                                                ListGiatri.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID).FirstOrDefault().ARSaleOrderItemTotalAmount : 0;
                                            dm = ListDMSP.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID)
                                                .Sum(x => x.MMBatchProductProductionNormItemBlock);

                                            slSX = ListRPByPhatSinhS.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID).Sum(x => x.ICReceiptItemWoodQty);
                                            if (slSX >= dm)
                                            {
                                                slPsS += 1 * giatri;
                                            }
                                            else
                                            {
                                                slPsS += slSX / dm * giatri;
                                            }
                                        }
                                        batchItemSID.Add(itemPS.FK_MMBatchProductItemID);
                                    }
                                }
                                #endregion
                                #region Phat sinh TK DG

                                if (ListRPByPhatSinhDG != null)
                                {
                                    phatSinhDG = ListRPByPhatSinhDG.Sum(x => x.ICReceiptItemWoodQty);
                                    List<int> batchItemDGID = new List<int>();
                                    foreach (ADReportsInfo itemPS in ListRPByPhatSinhDG)
                                    {
                                        if (!batchItemDGID.Contains(itemPS.FK_MMBatchProductItemID))
                                        {
                                            decimal dm = 0;
                                            decimal slSX = 0;
                                            decimal giatri = 0;
                                            ADReportsInfo gitriInfo = ListGiatri.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID).FirstOrDefault();
                                            if (gitriInfo == null)
                                            {
                                                gitriInfo = ListGiatri.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID).FirstOrDefault();
                                            }
                                            if (gitriInfo != null)
                                                giatri = gitriInfo.ARSaleOrderItemTotalAmount;
                                            if (itemPS.FK_MMBatchProductItemID > 0)
                                            {
                                                dm = ListDMSP.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID).FirstOrDefault() != null ?
                                                    ListDMSP.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID).FirstOrDefault().MMBatchProductProductionNormItemBlock : 0;
                                            }
                                            else
                                            {
                                                dm = ListDMSP.Where(x => x.FK_ICProductID == itemPS.FK_ICProductID &&
                                                    x.FK_MMBatchProductID == itemPS.FK_MMBatchProductID).FirstOrDefault()
                                                        .MMBatchProductProductionNormItemBlock;
                                            }

                                            slSX = ListRPByPhatSinhDG.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID).Sum(x => x.ICReceiptItemWoodQty);
                                            if (slSX >= dm)
                                            {
                                                slPsDG += 1 * giatri;
                                            }
                                            else
                                            {
                                                slPsDG += slSX / dm * giatri;
                                            }
                                        }
                                        else
                                        {

                                        }
                                        batchItemDGID.Add(itemPS.FK_MMBatchProductItemID);
                                    }
                                }
                                #endregion
                                #region Phat sinh TK TP

                                if (ListRPByPhatSinhTP != null)
                                {
                                    phatSinhTP = ListRPByPhatSinhTP.Sum(x => x.ICReceiptItemWoodQty);
                                    List<int> batchItemTPID = new List<int>();
                                    foreach (ADReportsInfo itemPS in ListRPByPhatSinhTP)
                                    {
                                        if (!batchItemTPID.Contains(itemPS.FK_MMBatchProductItemID))
                                        {
                                            decimal dm = 0;
                                            decimal slSX = 0;
                                            decimal giatri = 0;
                                            decimal ktSx = 0;
                                            ADReportsInfo gitriInfo = ListGiatri.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID).FirstOrDefault();
                                            if (gitriInfo == null)
                                            {
                                                gitriInfo = ListGiatri.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID).FirstOrDefault();
                                            }
                                            if (gitriInfo != null)
                                                giatri = gitriInfo.ARSaleOrderItemTotalAmount;
                                            if (itemPS.FK_MMBatchProductItemID > 0)
                                            {
                                                dm = ListDMSP.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID).FirstOrDefault()
                                                    .MMBatchProductProductionNormItemBlock;
                                            }
                                            else
                                            {
                                                dm = ListDMSP.Where(x => x.FK_ICProductID == itemPS.FK_ICProductID &&
                                                    x.FK_MMBatchProductID == itemPS.FK_MMBatchProductID).FirstOrDefault()
                                                        .MMBatchProductProductionNormItemBlock;
                                            }
                                            slSX = ListRPByPhatSinhTP.Where(x => x.FK_MMBatchProductItemID == itemPS.FK_MMBatchProductItemID).Sum(x => x.ICReceiptItemWoodQty);
                                            if (slSX >= dm)
                                            {
                                                slPsTP += 1 * giatri;
                                            }
                                            else
                                            {
                                                slPsTP += slSX / dm * giatri;
                                            }
                                        }
                                        else
                                        {

                                        }
                                        batchItemTPID.Add(itemPS.FK_MMBatchProductItemID);
                                    }
                                }
                                #endregion

                            }
                            #endregion

                            #region Result


                            ICReceiptLabourProductivityKTGDSC = phatSinhSC - phatSinhTC;
                            ICReceiptLabourProductivityKTGDDH = phatSinhTC - phatSinhLR;
                            ICReceiptLabourProductivityKTGDLR = phatSinhLR - phatSinhS;
                            ICReceiptLabourProductivityKTGDS = phatSinhS - phatSinhDG;
                            ICReceiptLabourProductivityKTGDDG = phatSinhDG - phatSinhTP;

                            ICReceiptLabourProductivitySLGDSC = slPsSC - slPsTC;
                            ICReceiptLabourProductivitySLGDDH = slPsTC - slPsLR;
                            ICReceiptLabourProductivitySLGDLR = slPsLR - slPsS;
                            ICReceiptLabourProductivitySLGDS = slPsS - slPsDG;
                            ICReceiptLabourProductivitySLGDDG = slPsDG - slPsTP;

                            newRow["ICReceiptLabourProductivityGDSC"] = ICReceiptLabourProductivitySLGDSC;
                            newRow["ICReceiptLabourProductivityGDDH"] = ICReceiptLabourProductivitySLGDDH;
                            newRow["ICReceiptLabourProductivityGDLR"] = ICReceiptLabourProductivitySLGDLR;
                            newRow["ICReceiptLabourProductivityGDS"] = ICReceiptLabourProductivitySLGDS;
                            newRow["ICReceiptLabourProductivityGDDG"] = ICReceiptLabourProductivitySLGDDG;

                            newRow["ICReceiptLabourProductivityKTSC"] = ICReceiptLabourProductivityKTGDSC;
                            newRow["ICReceiptLabourProductivityKTDH"] = ICReceiptLabourProductivityKTGDDH;
                            newRow["ICReceiptLabourProductivityKTLR"] = ICReceiptLabourProductivityKTGDLR;
                            newRow["ICReceiptLabourProductivityKTS"] = ICReceiptLabourProductivityKTGDS;
                            newRow["ICReceiptLabourProductivityKTDG"] = ICReceiptLabourProductivityKTGDDG;

                            objLabourProductivityTargetConfigsInfo = objLabourProductivityTargetConfigsController.GetDataForReportLabourProductivityTargetByDate(workShopID, item);
                            if (objLabourProductivityTargetConfigsInfo != null)
                            {
                                newRow["ICReceiptLabourProductivityDayPillowSC"] = Math.Round(ICReceiptLabourProductivitySLGDSC / objLabourProductivityTargetConfigsInfo.MMLabourProductivityTargetConfigSoChe, 1).ToString("N1");
                                newRow["ICReceiptLabourProductivityDayPillowDH"] = Math.Round(ICReceiptLabourProductivitySLGDDH / objLabourProductivityTargetConfigsInfo.MMLabourProductivityTargetConfigSoChe, 1).ToString("N1");
                                newRow["ICReceiptLabourProductivityDayPillowLR"] = Math.Round(ICReceiptLabourProductivitySLGDLR / objLabourProductivityTargetConfigsInfo.MMLabourProductivityTargetConfigSoChe, 1).ToString("N1");
                                newRow["ICReceiptLabourProductivityDayPillowS"] = Math.Round(ICReceiptLabourProductivitySLGDS / objLabourProductivityTargetConfigsInfo.MMLabourProductivityTargetConfigSoChe, 1).ToString("N1");
                                newRow["ICReceiptLabourProductivityDayPillowDG"] = Math.Round(ICReceiptLabourProductivitySLGDDG / objLabourProductivityTargetConfigsInfo.MMLabourProductivityTargetConfigSoChe, 1).ToString("N1");

                            }
                            #endregion
                            #endregion

                            dt.Rows.Add(newRow);
                        }
                    }
                    #endregion

                    BOSProgressBar.Close();
                }
                return dt;
            }
            else
                return null;
        }
        public List<ADReportsInfo> GetDataForReportLabourProductivityByOperation(int? departmentID, int? departmentRoomID, DateTime toDate, int? MMOperationID, string MMBatchProductItemID)
        {
            List<ADReportsInfo> BatchProductItemList = new List<ADReportsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetDataForReportLabourProductivityByOperation", departmentID, departmentRoomID, toDate, MMOperationID, MMBatchProductItemID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo objReportsInfo = (ADReportsInfo)GetObjectFromDataRow(row);
                    if (objReportsInfo != null)
                    {
                        BatchProductItemList.Add(objReportsInfo);
                    }
                }
            }
            return BatchProductItemList;
        }
        public List<ADReportsInfo> GetDataForReportLabourProductivityByOperationPhatSinhTrongKy(int? workShopID, string batchItemIDs, DateTime fromDate, DateTime toDate)
        {
            List<ADReportsInfo> BatchProductItemList = new List<ADReportsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetDataForReportLabourProductivityByOperationPhatSinhTrongKy", workShopID, batchItemIDs, fromDate, toDate);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo objReportsInfo = (ADReportsInfo)GetObjectFromDataRow(row);
                    if (objReportsInfo != null)
                    {
                        BatchProductItemList.Add(objReportsInfo);
                    }
                }
            }
            return BatchProductItemList;
        }
        public List<ADReportsInfo> GetDataForReportLabourProductivityTonTruocKy(int? departmentID, int? departmentRoomID, DateTime fromDate, DateTime toDate)
        {
            List<ADReportsInfo> BatchProductItemList = new List<ADReportsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetDataForReportLabourProductivityTonTruocKy", departmentID, departmentRoomID, fromDate, toDate);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo objReportsInfo = (ADReportsInfo)GetObjectFromDataRow(row);
                    if (objReportsInfo != null)
                    {
                        BatchProductItemList.Add(objReportsInfo);
                    }
                }
            }
            return BatchProductItemList;
        }
        public List<ADReportsInfo> GetDataForReportLabourProductivityXuatTruocKy(int? departmentID, int? departmentRoomID, DateTime fromDate, DateTime toDate)
        {
            List<ADReportsInfo> BatchProductItemList = new List<ADReportsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetDataForReportLabourProductivityXuatTruocKy", departmentID, departmentRoomID, fromDate, toDate);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo objReportsInfo = (ADReportsInfo)GetObjectFromDataRow(row);
                    if (objReportsInfo != null)
                    {
                        BatchProductItemList.Add(objReportsInfo);
                    }
                }
            }
            return BatchProductItemList;
        }
        public List<ADReportsInfo> GetDataForReportLabourProductivityNhapTruocKy(int? departmentID, int? departmentRoomID, DateTime fromDate, DateTime toDate)
        {
            List<ADReportsInfo> BatchProductItemList = new List<ADReportsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetDataForReportLabourProductivityNhapTruocKy", departmentID, departmentRoomID, fromDate, toDate);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo objReportsInfo = (ADReportsInfo)GetObjectFromDataRow(row);
                    if (objReportsInfo != null)
                    {
                        BatchProductItemList.Add(objReportsInfo);
                    }
                }
            }
            return BatchProductItemList;
        }

        public List<ADReportsInfo> GetDataForReportTargetNhapTruocKy(int? departmentID, int? departmentRoomID, int? operationID, int batchProductItemID, DateTime toDate)
        {
            List<ADReportsInfo> BatchProductItemList = new List<ADReportsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetDataForReportTargetNhapTruocKy", departmentID, departmentRoomID, operationID, batchProductItemID, toDate);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo objReportsInfo = (ADReportsInfo)GetObjectFromDataRow(row);
                    if (objReportsInfo != null)
                    {
                        BatchProductItemList.Add(objReportsInfo);
                    }
                }
            }
            return BatchProductItemList;
        }
        public List<ADReportsInfo> GetDataForReportTargetNhapTruocKyByList(int? workShopID, int? operationID, List<int> batchID, DateTime toDate)
        {
            List<ADReportsInfo> BatchProductItemList = new List<ADReportsInfo>();
            string batch = string.Empty;
            DataSet ds = dal.GetDataSet("Report_GetDataForReportTargetNhapTruocKyByList", workShopID, operationID, string.Join(",", batchID.ToArray()), toDate);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo objReportsInfo = (ADReportsInfo)GetObjectFromDataRow(row);
                    if (objReportsInfo != null)
                    {
                        BatchProductItemList.Add(objReportsInfo);
                    }
                }
            }
            return BatchProductItemList;
        }
        public List<ADReportsInfo> GetBatchItemPrice(string batchID)
        {
            List<ADReportsInfo> BatchProductItemList = new List<ADReportsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetBatchItemPrice", batchID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo objReportsInfo = (ADReportsInfo)GetObjectFromDataRow(row);
                    if (objReportsInfo != null)
                    {
                        BatchProductItemList.Add(objReportsInfo);
                    }
                }
            }
            return BatchProductItemList;
        }
        public List<ADReportsInfo> GetBatchItemProductionNormDetail(string batchItemID)
        {
            List<ADReportsInfo> BatchProductItemList = new List<ADReportsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetBatchItemProductionNormDetail", batchItemID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo objReportsInfo = (ADReportsInfo)GetObjectFromDataRow(row);
                    if (objReportsInfo != null)
                    {
                        BatchProductItemList.Add(objReportsInfo);
                    }
                }
            }
            return BatchProductItemList;
        }
        public List<ADReportsInfo> GetBatchItemProductionNormComponent(DateTime toDate)
        {
            List<ADReportsInfo> BatchProductItemList = new List<ADReportsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetBatchItemProductionNormComponent", toDate);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo objReportsInfo = (ADReportsInfo)GetObjectFromDataRow(row);
                    if (objReportsInfo != null)
                    {
                        BatchProductItemList.Add(objReportsInfo);
                    }
                }
            }
            return BatchProductItemList;
        }
        public List<ADReportsInfo> GetBatchItemProductionNormProduct()
        {
            List<ADReportsInfo> BatchProductItemList = new List<ADReportsInfo>();
            DataSet ds = dal.GetDataSet("Report_GetBatchItemProductionNormProduct");
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo objReportsInfo = (ADReportsInfo)GetObjectFromDataRow(row);
                    if (objReportsInfo != null)
                    {
                        BatchProductItemList.Add(objReportsInfo);
                    }
                }
            }
            return BatchProductItemList;
        }
        //public static void ExportToExcel(System.Data.DataTable tbl, string excelFilePath)
        //{
        //    try
        //    {
        //        if (tbl == null || tbl.Columns.Count == 0)
        //            throw new Exception("ExportToExcel: Null or empty input table!\n");

        //        // load excel, and create a new workbook
        //        Microsoft.Office.Interop.Excel.Application excelApp = new Microsoft.Office.Interop.Excel.Application();
        //        Microsoft.Office.Interop.Excel.Workbook exWorkBook = excelApp.Workbooks.Add(Microsoft.Office.Interop.Excel.XlWBATemplate.xlWBATWorksheet);
        //        Microsoft.Office.Interop.Excel.Worksheet workSheet = (Microsoft.Office.Interop.Excel.Worksheet)exWorkBook.Worksheets[1];
        //        // column headings
        //        for (var i = 0; i < tbl.Columns.Count; i++)
        //        {
        //            workSheet.Cells[1, i + 1] = tbl.Columns[i].ColumnName;
        //        }

        //        // rows
        //        for (var i = 0; i < tbl.Rows.Count; i++)
        //        {
        //            // to do: format datetime values before printing
        //            for (var j = 0; j < tbl.Columns.Count; j++)
        //            {
        //                workSheet.Cells[i + 2, j + 1] = tbl.Rows[i][j];
        //            }
        //        }

        //        // check file path
        //        if (!string.IsNullOrEmpty(excelFilePath))
        //        {
        //            try
        //            {
        //                workSheet.SaveAs(excelFilePath, "RP175.xlsx"
        //                    , Type.Missing, Type.Missing, Type.Missing
        //                    , Type.Missing, Type.Missing, Microsoft.Office.Interop.Excel.XlSaveAsAccessMode.xlExclusive,
        //                    Type.Missing, Type.Missing);
        //                excelApp.Quit();

        //            }
        //            catch (Exception ex)
        //            {

        //            }
        //        }
        //        else
        //        { // no file path is given
        //            excelApp.Visible = true;
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        throw new Exception("ExportToExcel: \n" + ex.Message);
        //    }
        //}

        public List<ARInvoicesInfo> GetAllInvoicesByNotPrinted()
        {
            DataSet ds = dal.GetDataSet("ARInvoices_GetAllInvoicesByNotPrinted");
            ARInvoicesController controller = new ARInvoicesController();
            return (List<ARInvoicesInfo>)controller.GetListFromDataSet(ds);
        }
        public DataSet GetInvoiceItemByInvoiceNos(string invoiceNos)
        {
            return dal.GetDataSet("Report_GetInvoiceItemByInvoiceNos", invoiceNos);
        }

        public List<ADReportsInfo> GetValueForCostBugdetReport(int segmentID, string costType, int debitAccountID, int costCenterID, int departmentID, DateTime fromDate, DateTime toDate)
        {
            List<ADReportsInfo> documents = new List<ADReportsInfo>();
            ADReportsController documentsController = new ADReportsController();
            DataSet ds = dal.GetDataSet("ADReports_GetValueForCostBugdetReport", segmentID, costType, debitAccountID, costCenterID, departmentID, fromDate, toDate);
            foreach (DataRow row in ds.Tables[0].Rows)
            {
                ADReportsInfo documentsInfo = (ADReportsInfo)documentsController.GetObjectFromDataRow(row);
                documents.Add(documentsInfo);
            }
            return documents;
        }

        public List<ADReportsInfo> GetDataForReportThucTienNganSach(DateTime fromDate, DateTime toDate)
        {
            List<ADReportsInfo> documents = new List<ADReportsInfo>();
            ADReportsController documentsController = new ADReportsController();
            DataSet ds = dal.GetDataSet("ADReports_GetDataForReportThucTienNganSach", fromDate, toDate);

            ADReportsInfo summarryItem = new ADReportsInfo();
            summarryItem.SegmentName = "Lợi nhuận trước thuế: Doanh Thu - chi phí";
            summarryItem.ReportItemType = ReportItemType.Group.ToString();

            ADReportsInfo groupItem;
            string currentGroup = string.Empty;
            foreach (DataRow row in ds.Tables[0].Rows)
            {
                ADReportsInfo documentsInfo = (ADReportsInfo)documentsController.GetObjectFromDataRow(row);

                if (documentsInfo.SegmentType != currentGroup)
                {
                    currentGroup = documentsInfo.SegmentType;

                    groupItem = new ADReportsInfo();
                    groupItem.SegmentName = documentsInfo.SegmentType;
                    groupItem.ReportItemType = ReportItemType.Group.ToString();
                    documents.Add(groupItem);
                }



                if (documentsInfo.SegmentTypeValue == SegmentType.Revenue.ToString()
                     || documentsInfo.SegmentTypeValue == SegmentType.FinanceRevenue.ToString()
                    || documentsInfo.SegmentTypeValue == SegmentType.OtherIncome.ToString())
                {
                    summarryItem.PeriodActualCostBudget += documentsInfo.PeriodActualCostBudget;
                    summarryItem.PeriodCostBudget += documentsInfo.PeriodCostBudget;
                    summarryItem.ActualCostBudget += documentsInfo.ActualCostBudget;
                    summarryItem.CostBudget += documentsInfo.CostBudget;
                    summarryItem.CostBudgetLeft += documentsInfo.CostBudgetLeft;

                }
                else
                {
                    summarryItem.PeriodActualCostBudget -= documentsInfo.PeriodActualCostBudget;
                    summarryItem.PeriodCostBudget -= documentsInfo.PeriodCostBudget;
                    summarryItem.ActualCostBudget -= documentsInfo.ActualCostBudget;
                    summarryItem.CostBudget -= documentsInfo.CostBudget;
                    summarryItem.CostBudgetLeft -= documentsInfo.CostBudgetLeft;
                }
                documentsInfo.ReportItemType = ReportItemType.Item.ToString();
                documents.Add(documentsInfo);
            }


            documents.Add(summarryItem);


            return documents;
        }

        public List<HREmployeesInfo> GetTotalOrderQtAndTotalOrderAmountByEmployeeID(DateTime? fromdate, DateTime? todate, int? employeeID, int brabchID)
        {
            HREmployeesController objEmployeesController = new HREmployeesController();
            DataSet ds = dal.GetDataSet("Report_GetTotalOrderQtAndTotalOrderAmountByHREmployeeID", fromdate, todate, 0, brabchID);
            return (List<HREmployeesInfo>)objEmployeesController.GetListFromDataSet(ds);
        }
        public List<ADConfigValuesInfo> GetObjectByADConfigKeyGroup(string keyGroup)
        {
            DataSet ds = dal.GetDataSet("ADConfigValue_GetObjectByADConfigKeyGroup", keyGroup);
            ADConfigValuesController obj = new ADConfigValuesController();
            List<ADConfigValuesInfo> list = new List<ADConfigValuesInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADConfigValuesInfo objReceiptsInfo = (ADConfigValuesInfo)obj.GetObjectFromDataRow(row);
                    if (objReceiptsInfo != null)
                    {
                        list.Add(objReceiptsInfo);
                    }
                }
            }
            return list;
        }
        public DataSet GetReportsForTemplate()
        {
            DataSet ds = dal.GetDataSet("ADReports_GetReportsForTemplate");
            return ds;
        }
        public DataSet GetReportsForToolbar()
        {
            DataSet ds = dal.GetDataSet("ADReports_GetReportsForToolbar");
            return ds;
        }

        public object GetListGroupedShipmentItemByShipmentID(int ShipmentID)
        {
            DataSet ds = dal.GetDataSet("Report_ICShipment_GetListGroupedShipmentItemByShipmentID", ShipmentID);
            List<ICShipmentItemsInfo> List = new List<ICShipmentItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
                int count = 0;
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    count++;
                    ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)objShipmentItemsController.GetObjectFromDataRow(row);
                    objShipmentItemsInfo.STT = count;
                    ///objICReceiptItemsInfo.TongKhoiluong += objICReceiptItemsInfo.ICReceiptItemProductQty;
                    ///objICReceiptItemsInfo.TongThanhTien += objICReceiptItemsInfo.ICReceiptItemTotalCost;
                    List.Add(objShipmentItemsInfo);
                }
            }
            return List;
        }

        public List<HREmployeesInfo> GetEmployeesForReport194(DateTime fromDate, int? branchID, int? employeeID)
        {
            DataSet ds = dal.GetDataSet("HREmployees_GetEmployeesForReport194", fromDate, branchID, employeeID);
            List<HREmployeesInfo> results = new List<HREmployeesInfo>();
            if (ds.Tables.Count > 0)
            {
                HREmployeesController controller = new HREmployeesController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    HREmployeesInfo employee = (HREmployeesInfo)controller.GetObjectFromDataRow(row);
                    results.Add(employee);
                }
            }
            return results;
        }

        public List<HREmployeesInfo> GetEmployeesForReport195(DateTime fromDate, int? branchID, int? employeeID)
        {
            DataSet ds = dal.GetDataSet("HREmployees_GetEmployeesForReport195", fromDate, branchID, employeeID);
            List<HREmployeesInfo> results = new List<HREmployeesInfo>();
            if (ds.Tables.Count > 0)
            {
                HREmployeesController controller = new HREmployeesController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    HREmployeesInfo employee = (HREmployeesInfo)controller.GetObjectFromDataRow(row);
                    results.Add(employee);
                }
            }
            return results;
        }

        public List<HREmployeesInfo> GetEmployeesForReport211(DateTime fromDate, int? branchID, string productType)
        {
            DataSet ds = dal.GetDataSet("HREmployees_GetEmployeesForReport211", fromDate, branchID, productType);
            List<HREmployeesInfo> results = new List<HREmployeesInfo>();
            if (ds.Tables.Count > 0)
            {
                HREmployeesController controller = new HREmployeesController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    HREmployeesInfo employee = (HREmployeesInfo)controller.GetObjectFromDataRow(row);
                    results.Add(employee);
                }
            }
            return results;
        }

        public List<ADConfigValuesInfo> GetConfigValuesByConfigKeyGroup(string configKeyGroup)
        {
            List<ADConfigValuesInfo> configValueList = new List<ADConfigValuesInfo>();
            ADConfigValuesController objConfigValuesController = new ADConfigValuesController();
            DataSet ds = objConfigValuesController.GetADConfigValuesByGroup(configKeyGroup);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADConfigValuesInfo objConfigValuesInfo = (ADConfigValuesInfo)objConfigValuesController.GetObjectFromDataRow(row);
                    configValueList.Add(objConfigValuesInfo);
                }
            }
            ds.Dispose();
            return configValueList;
        }

        public List<string> GetColumnByTableName(string tableName)
        {
            DataSet ds = dal.GetDataSet("STBosTables_GetColumnByTableName", tableName);
            List<ADReportsInfo> resultList = (List<ADReportsInfo>)GetListFromDataSet(ds);

            List<string> colList = resultList.Select(t => t.ColumnName).Distinct().ToList();
            ds.Dispose();
            return colList;
        }

        public DataSet GetReportByReportNo(string reportNo)
        {
            return dal.GetDataSet("ADReports_GetReportByReportNo", reportNo);
        }

        public List<HREmployeeWorkScheduleItemsInfo> GetEmployeeWorkScheduleItemsForReport212(DateTime fromDate, DateTime toDate, int? branchID)
        {
            DataSet ds = dal.GetDataSet("HREmployeeWorkScheduleItems_GetEmployeeWorkScheduleItemsForReport212", fromDate, toDate, branchID);
            List<HREmployeeWorkScheduleItemsInfo> employeeWorkScheduleItems = new List<HREmployeeWorkScheduleItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                HREmployeeWorkScheduleItemsController objEmployeeWorkScheduleItemsController = new HREmployeeWorkScheduleItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    HREmployeeWorkScheduleItemsInfo objEmployeeWorkScheduleItemsInfo = (HREmployeeWorkScheduleItemsInfo)objEmployeeWorkScheduleItemsController.GetObjectFromDataRow(row);
                    employeeWorkScheduleItems.Add(objEmployeeWorkScheduleItemsInfo);
                }
            }
            return employeeWorkScheduleItems;
        }

        public DataSet GetDataForRP013(int companyID,
                                       string stockRef,
                                       int departmentID,
                                       string productGroupReference,
                                       int supplierID,
                                       int? productID,
                                       string productAttributeKey,
                                       int locationID,
                                       int branchID,
                                       DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ADReports_GetDataForRP013", companyID,
                                                                     departmentID,
                                                                     productGroupReference,
                                                                     supplierID,
                                                                     productID,
                                                                     productAttributeKey,
                                                                     branchID,
                                                                     stockRef,
                                                                     toDate);
            return ds;
        }

        public DataSet GetDataForRP013SaleOrder(int companyID,
                                               string stockRef,
                                               int departmentID,
                                               string productGroupReference,
                                               int supplierID,
                                               int? productID,
                                               string productAttributeKey,
                                               int locationID,
                                               int branchID,
                                               DateTime fromDate,
                                               DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ADReports_GetDataForRP013SaleOrder", companyID,
                                                                             departmentID,
                                                                             productGroupReference,
                                                                             supplierID,
                                                                             productID,
                                                                             productAttributeKey,
                                                                             branchID,
                                                                             stockRef,
                                                                             fromDate,
                                                                             toDate);
            return ds;
        }

        public DataSet GetDataForRP032StockMinMax(int branchID
                                                , string stockRef
                                                , int departmentID
                                                , int productGroupID
                                                , int supplierID)
        {
            DataSet ds = dal.GetDataSet("ADReports_GetDataForRP032StockMinMax", branchID, stockRef, departmentID, productGroupID, supplierID);
            return ds;
        }

        public List<VMVehiclesInfo> GetRP244(DateTime datefrom, DateTime dateto, int branchID, int vehicleID, string vehicleStatus)
        {
            DataSet ds = dal.GetDataSet("ADReport_GetRP244", datefrom, dateto, branchID, vehicleID, vehicleStatus);
            VMVehiclesController controller = new VMVehiclesController();
            return (List<VMVehiclesInfo>)controller.GetListFromDataSet(ds);
        }

        public List<MMAllocationProposalItemsInfo> GetAllocationProposalItem(int MMAllocationProposalID)
        {
            DataSet ds = dal.GetDataSet("Report_GetAllocationProposalItem", MMAllocationProposalID);
            List<MMAllocationProposalItemsInfo> documents = new List<MMAllocationProposalItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                MMAllocationProposalItemsController objAllocationProposalItemsController = new MMAllocationProposalItemsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    MMAllocationProposalItemsInfo document = (MMAllocationProposalItemsInfo)objAllocationProposalItemsController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }
            ds.Dispose();
            return documents;
        }
        public List<ADReportsInfo> GetListFromDataSet(DataSet ds)
        {
            List<ADReportsInfo> list = new List<ADReportsInfo>();
            if (ds.Tables.Count > 0)
            {
                ADReportsController ctl = new ADReportsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo item = (ADReportsInfo)ctl.GetObjectFromDataRow(row);
                    list.Add(item);
                }
            }
            ds.Dispose();
            return list;
        }

        public List<APPurchaseOrderItemForViews> GetPurchaseOrderItemByPurchaseOrderID1(int purchaseOrderID)
        {
            DataSet ds = dal.GetDataSet("Report_GetPurchaseOrderItemByPurchaseOrderID", purchaseOrderID);
            List<APPurchaseOrderItemForViews> purchaseOrderItem = new List<APPurchaseOrderItemForViews>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APPurchaseOrderItemForViews objPurchaseOrderItemsInfo = (APPurchaseOrderItemForViews)SqlDatabaseHelper.GetObjectFromDataRow(row, typeof(APPurchaseOrderItemForViews));
                    purchaseOrderItem.Add(objPurchaseOrderItemsInfo);
                }
            }
            ds.Dispose();
            return purchaseOrderItem;
        }

        public DataSet GetDSReturnSupplierItemsByReturnSupplierID(int ReturnSupplierID)
        {
            DataSet ds = dal.GetDataSet("Report_GetReturnSupplierItemsByReturnSupplierID", ReturnSupplierID);
            return ds;
        }

        public List<ICReceiptItemsInfo> GetReport213(string productType)
        {
            DataSet ds = dal.GetDataSet("ADReport_GetReport213", productType);
            ICReceiptItemsController controller = new ICReceiptItemsController();
            return (List<ICReceiptItemsInfo>)controller.GetListFromDataSet(ds);
        }

        public List<ADReportsInfo> GetRP215(int customerID, DateTime datefrom, DateTime dateTo, DateTime datefromPI, DateTime datetoPI)
        {
            List<ADReportsInfo> reportList = new List<ADReportsInfo>();
            DataSet ds = dal.GetDataSet("ADReports_GetRP215", customerID, datefrom, dateTo, datefromPI, datetoPI);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo objReportsInfo = (ADReportsInfo)GetObjectFromDataRow(row);
                    if (objReportsInfo != null)
                    {
                        reportList.Add(objReportsInfo);
                    }
                }
            }
            return reportList;
        }

        public List<ADReportsInfo> GetRP215PI(int customerID, DateTime datefrom, DateTime dateTo)
        {
            List<ADReportsInfo> reportList = new List<ADReportsInfo>();
            DataSet ds = dal.GetDataSet("ADReports_GetRP215PI", customerID, datefrom, dateTo);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo objReportsInfo = (ADReportsInfo)GetObjectFromDataRow(row);
                    if (objReportsInfo != null)
                    {
                        reportList.Add(objReportsInfo);
                    }
                }
            }
            ds.Dispose();
            return reportList;
        }

        public List<ADReportsInfo> GetRP215LSX(int customerID, DateTime datefrom, DateTime dateTo)
        {
            List<ADReportsInfo> reportList = new List<ADReportsInfo>();
            DataSet ds = dal.GetDataSet("ADReports_GetRP215LSX", customerID, datefrom, dateTo);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo objReportsInfo = (ADReportsInfo)GetObjectFromDataRow(row);
                    if (objReportsInfo != null)
                    {
                        reportList.Add(objReportsInfo);
                    }
                }
            }
            return reportList;
        }
        public List<ARSaleOrdersInfo> GetSaleOrderForDebtReport(
                                                              int objectID,
                                                              string objectType,
                                                              DateTime fromDate,
                                                              DateTime toDate,
                                                              int saleOrderID)
        {
            DataSet ds = dal.GetDataSet("ARSaleOrders_GetSaleOrderForDebtReport",
                                        objectID,
                                        objectType,
                                        fromDate,
                                        toDate,
                                        saleOrderID);
            List<ARSaleOrdersInfo> documents = new List<ARSaleOrdersInfo>();
            if (ds.Tables.Count > 0)
            {
                ARSaleOrdersController objSaleOrdersController = new ARSaleOrdersController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {

                    ARSaleOrdersInfo document = (ARSaleOrdersInfo)objSaleOrdersController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }

            return documents;
        }
        public List<ARInvoiceTransactionsInfo> GetInvoiceAndDepositBySaleOrderID(
                                                              int objectID,
                                                              string objectType,
                                                              DateTime fromDate,
                                                              DateTime toDate,
                                                              int saleOrderID)
        {
            DataSet ds = dal.GetDataSet("ARInvoiceTransactions_GetInvoiceAndDepositBySaleOrderID",
                                        objectID,
                                        objectType,
                                        fromDate,
                                        toDate,
                                        saleOrderID);
            List<ARInvoiceTransactionsInfo> documents = new List<ARInvoiceTransactionsInfo>();
            if (ds.Tables.Count > 0)
            {
                ARInvoiceTransactionsController objSaleOrdersController = new ARInvoiceTransactionsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {

                    ARInvoiceTransactionsInfo document = (ARInvoiceTransactionsInfo)objSaleOrdersController.GetObjectFromDataRow(row);
                    documents.Add(document);
                }
            }

            return documents;
        }

        public List<ICReceiptItemsInfo> GetDataForReport039(
                                                                DateTime? dateFrom,
                                                                DateTime? dateTo,
                                                                int? branchID,
                                                                string stockNos,
                                                                int? productID,
                                                                int? departmentID,
                                                                string productGroupName,
                                                                //string shipmentType,
                                                                //string receiptType,
                                                                bool isShipmentType,
                                                                bool isReceiptType,
                                                                int? productGroupID)
        {
            DataSet ds = dal.GetDataSet("Report_GetDataForReport039",
                                        dateFrom,
                                        dateTo,
                                        branchID,
                                        stockNos,
                                        productID,
                                        departmentID,
                                        productGroupName,
                                        //shipmentType,
                                        //receiptType,
                                        isShipmentType,
                                        isReceiptType,
                                        productGroupID);
            ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
            return (List<ICReceiptItemsInfo>)objReceiptItemsController.GetListFromDataSet(ds);
        }

        public List<ARCustomersInfo> GetTotalOrderQtAndTotalOrderAmountByObject(DateTime? fromdate, DateTime? todate, int objectID, string objectType)
        {
            ARCustomersController objCustomersController = new ARCustomersController();
            DataSet ds = dal.GetDataSet("Report_GetTotalOrderQtAndTotalOrderAmountByObject", fromdate, todate, objectID, objectType);
            return (List<ARCustomersInfo>)objCustomersController.GetListFromDataSet(ds);
        }
        public DataSet GetTimeOutDataSet(string storeName,int timeOutValue, params object[] paramValues)
        {
            DataSet ds = dal.GetTimeOutDataSet(storeName, timeOutValue, paramValues);
            return ds;
        }
        public List<APPaymentProposalsInfo> GetPaymentProposalListForRP(DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("APPaymentProposals_GetPaymentProposalListForRP", fromDate, toDate);
            List<APPaymentProposalsInfo> listItem = new List<APPaymentProposalsInfo>();
            if (ds.Tables.Count > 0)
            {
                APPaymentProposalsController objPaymentProposalsController = new APPaymentProposalsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    APPaymentProposalsInfo objPaymentProposalsInfo = (APPaymentProposalsInfo)objPaymentProposalsController.GetObjectFromDataRow(row);
                    listItem.Add(objPaymentProposalsInfo);
                }
            }
            return listItem;
        }
        public List<ICReceiptItemsInfo> GetListReceiptItemForReportAccountingByReceiptID(int receiptID)
        {
            DataSet ds = dal.GetDataSet("Report_ICReceipt_GetListReceiptItemForReportAccountingByReceiptID", receiptID);
            List<ICReceiptItemsInfo> List = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
                int count = 0;
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    count++;
                    ICReceiptItemsInfo objICReceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(row);
                    objICReceiptItemsInfo.STT = count;
                    char[] charsToTrim = { '\r', '\n', '\t', ' ' };
                    ///objICReceiptItemsInfo.TongKhoiluong += objICReceiptItemsInfo.ICReceiptItemProductQty;
                    ///objICReceiptItemsInfo.TongThanhTien += objICReceiptItemsInfo.ICReceiptItemTotalCost;
                    objICReceiptItemsInfo.ICReceiptDesc.Trim(charsToTrim);
                    //objICReceiptItemsInfo.ICReceiptDesc = 
                    List.Add(objICReceiptItemsInfo);
                }
            }
            return List;
        }
        public List<ICShipmentItemsInfo> GetShipmentByBatchProduct(DateTime dateFrom, DateTime dateTo, int? deparmentID, int? productGroupID)
        {
            DataSet ds = dal.GetDataSet("RP_GetShipmentByBatchProduct", dateFrom, dateTo, deparmentID, productGroupID);
            List<ICShipmentItemsInfo> listItem = new List<ICShipmentItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
                return (List<ICShipmentItemsInfo>)objShipmentItemsController.GetListFromDataSet(ds);
            }
            return listItem;
        }
        public List<ICShipmentItemsInfo> GetDetailShipmentByBatchProduct(DateTime dateFrom, DateTime dateTo, int? deparmentID, int? productGroupID)
        {
            DataSet ds = dal.GetDataSet("RP_GetDetailShipmentByBatchProduct", dateFrom, dateTo, deparmentID, productGroupID);
            List<ICShipmentItemsInfo> listItem = new List<ICShipmentItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
                return (List<ICShipmentItemsInfo>)objShipmentItemsController.GetListFromDataSet(ds);
            }
            return listItem;
        }
        public List<ICReceiptItemsInfo> GetListReceiptItemForReportPrintWoodPurchaseByReceiptID(int receiptID)
        {
            DataSet ds = dal.GetDataSet("RP_PrintWoodPurchaseReceiptA4", receiptID);
            List<ICReceiptItemsInfo> List = new List<ICReceiptItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICReceiptItemsController objReceiptItemsController = new ICReceiptItemsController();
                int count = 0;
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    count++;
                    ICReceiptItemsInfo objICReceiptItemsInfo = (ICReceiptItemsInfo)objReceiptItemsController.GetObjectFromDataRow(row);
                    objICReceiptItemsInfo.STT = count;
                    char[] charsToTrim = { '\r', '\n', '\t', ' ' };
                    ///objICReceiptItemsInfo.TongKhoiluong += objICReceiptItemsInfo.ICReceiptItemProductQty;
                    ///objICReceiptItemsInfo.TongThanhTien += objICReceiptItemsInfo.ICReceiptItemTotalCost;
                    if (objICReceiptItemsInfo.ICReceiptDesc != null)
                        objICReceiptItemsInfo.ICReceiptDesc.Trim(charsToTrim);
                    List.Add(objICReceiptItemsInfo);
                }
            }
            return List;
        }
        public List<ARSaleOrderItemsInfo> GetListSaleOrderItemForReportPrintSaleOrderWoodHPBySOID(int soID)
        {
            DataSet ds = dal.GetDataSet("RP_PrintSaleOrderWoodHPBySOID", soID);
            List<ARSaleOrderItemsInfo> List = new List<ARSaleOrderItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ARSaleOrderItemsController objSaleOrderItemsController = new ARSaleOrderItemsController();
                int count = 0;
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARSaleOrderItemsInfo objSaleOrderItemsInfo = (ARSaleOrderItemsInfo)objSaleOrderItemsController.GetObjectFromDataRow(row);
                    List.Add(objSaleOrderItemsInfo);
                }
            }
            return List;
        }
        public List<ICShipmentItemsInfo> GetListShipmentItemsForReportPrintPackingListHPBySID(int dpID)
        {
            DataSet ds = dal.GetDataSet("RP_PrintPackingListHPBySID", dpID);
            List<ICShipmentItemsInfo> List = new List<ICShipmentItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                ICShipmentItemsController objShipmentItemsController = new ICShipmentItemsController();
                int count = 0;
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)objShipmentItemsController.GetObjectFromDataRow(row);
                    List.Add(objShipmentItemsInfo);
                }
            }
            return List;
        }
        public List<MMBatchProductItemsInfo> GetTotalShipmentSO(DateTime dateFrom, DateTime dateTo, int? workShopID, string saleType)
        {
            DataSet ds = dal.GetDataSet("RP_GetTotalShipmentSO", dateFrom, dateTo, workShopID, saleType);
            List<MMBatchProductItemsInfo> listItem = new List<MMBatchProductItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                MMBatchProductItemsController objShipmentItemsController = new MMBatchProductItemsController();
                return (List<MMBatchProductItemsInfo>)objShipmentItemsController.GetListFromDataSet(ds);
            }
            return listItem;
        }
        public List<ADReportsInfo> GetRevenueByCustomer(DateTime fromYear, DateTime toYear, int customerID)
        {
            DataSet ds = dal.GetDataSet("RP_GetRevenueByCustomer", fromYear, toYear, customerID);
            List<ADReportsInfo> listItem = new List<ADReportsInfo>();
            if (ds.Tables.Count > 0)
            {
                ADReportsController objInvoicesController = new ADReportsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo objInvoicesInfo = (ADReportsInfo)objInvoicesController.GetObjectFromDataRow(row);
                    listItem.Add(objInvoicesInfo);
                }
            }
            return listItem;
        }
        public List<ADReportsInfo> GetRevenueByCustomer(DateTime fromYear, DateTime toYear, int customerID, string customerType, int employeeID, bool isDiscount)
        {
            DataSet ds = dal.GetDataSet("RP_GetRevenueByCustomer_1", fromYear, toYear, customerID, employeeID, customerType, isDiscount);
            List<ADReportsInfo> listItem = new List<ADReportsInfo>();
            if (ds.Tables.Count > 0)
            {
                ADReportsController objInvoicesController = new ADReportsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo objInvoicesInfo = (ADReportsInfo)objInvoicesController.GetObjectFromDataRow(row);
                    listItem.Add(objInvoicesInfo);
                }
            }
            return listItem;
        }
        public List<ADReportsInfo> GetRevenueByCustomer_1(DateTime fromYear, DateTime toYear, int customerID, string customerType, int employeeID, bool isDiscount)
        {
            DataSet ds = dal.GetDataSet("RP_GetRevenueByCustomer_1", fromYear, toYear, customerID, employeeID, customerType, isDiscount);
            List<ADReportsInfo> listItem = new List<ADReportsInfo>();
            if (ds.Tables.Count > 0)
            {
                ADReportsController objInvoicesController = new ADReportsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo objInvoicesInfo = (ADReportsInfo)objInvoicesController.GetObjectFromDataRow(row);
                    listItem.Add(objInvoicesInfo);
                }
            }
            return listItem;
        }
        public List<ADReportsInfo> GetRevenueByProductGroup(DateTime fromYear, DateTime toYear, int customerID)
        {
            DataSet ds = dal.GetDataSet("RP_GetRevenueByProductGroup", fromYear, toYear, customerID);
            List<ADReportsInfo> listItem = new List<ADReportsInfo>();
            if (ds.Tables.Count > 0)
            {
                ADReportsController objInvoicesController = new ADReportsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo objInvoicesInfo = (ADReportsInfo)objInvoicesController.GetObjectFromDataRow(row);
                    listItem.Add(objInvoicesInfo);
                }
            }
            return listItem;
        }
        public List<ADReportsInfo> GetRevenueByCustomerType(DateTime fromYear, DateTime toYear, string customerType)
        {
            DataSet ds = dal.GetDataSet("RP_GetRevenueByCustomerType", fromYear, toYear, customerType);
            List<ADReportsInfo> listItem = new List<ADReportsInfo>();
            if (ds.Tables.Count > 0)
            {
                ADReportsController objInvoicesController = new ADReportsController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ADReportsInfo objInvoicesInfo = (ADReportsInfo)objInvoicesController.GetObjectFromDataRow(row);
                    listItem.Add(objInvoicesInfo);
                }
            }
            return listItem;
        }
    }
    #endregion
}


