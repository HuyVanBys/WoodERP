using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ACAccounts
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ACAccountsController
    //Created Date:Monday, May 16, 2011
    //-----------------------------------------------------------

    public class ACAccountsController : BaseBusinessController
    {
        public ACAccountsController()
        {
            dal = new DALBaseProvider("ACAccounts", typeof(ACAccountsInfo));
        }

        /// <summary>
        /// Get all root accounts
        /// </summary>
        /// <returns>List of root accounts</returns>
        public List<ACAccountsInfo> GetAllRootAccounts()
        {
            DataSet ds = dal.GetDataSet("ACAccounts_GetAllRootAccounts");
            return (List<ACAccountsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get all account list
        /// </summary>
        /// <returns>The account list</returns>
        public List<ACAccountsInfo> GetAllAccountList()
        {
            DataSet ds = dal.GetDataSet("ACAccounts_GetAllAccounts");
            return (List<ACAccountsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get all accounts
        /// </summary>
        /// <returns>List of all accounts</returns>
        public DataSet GetAllAccountSet()
        {
            return dal.GetDataSet("ACAccounts_GetAllAccounts");
        }

        /// <summary>
        /// Get an account and its initial balance detailed by one or more criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>        
        /// <returns>Account object</returns>
        public ACAccountsInfo GetAccountInitialBalance(string accountNo, int? objectID, string objectType, int? currencyID, int? bankID, int? branchID, int? locationID)
        {
            return (ACAccountsInfo)dal.GetDataObject("ACAccounts_GetAccountInitialBalance", accountNo, objectID, objectType, currencyID, bankID, branchID, locationID);
        }
        public ACAccountsInfo GetAccountInitialBalanceByCurrenceID(string accountNo, int? objectID, string objectType, int? currencyID, int? bankID, int? branchID, int? locationID)
        {
            return (ACAccountsInfo)dal.GetDataObject("ACAccounts_GetAccountInitialBalanceByCurrenceID", accountNo, objectID, objectType, currencyID, bankID, branchID, locationID);
        }
        public ACAccountsInfo GetAccountInitialBalanceForRP042(string accountNo, int? objectID, string objectType, int? currencyID, int? bankID, int? branchID, int? locationID)
        {
            return (ACAccountsInfo)dal.GetDataObject("ACAccounts_GetAccountInitialBalanceForRP042", accountNo, objectID, objectType, currencyID, bankID, branchID, locationID);
        }
        /// <summary>
        /// Get an account and its initial balance detailed by one or more criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>        
        /// <returns>Account object</returns>
        public ACAccountsInfo GetAccountInitialBalanceBySomeCriteria(string accountNo, int? objectID, string objectType, int? currencyID, int? bankID, string branchNos)
        {
            return (ACAccountsInfo)dal.GetDataObject("ACAccounts_GetAccountInitialBalanceBySomeCriteria", accountNo, objectID, objectType, currencyID, bankID, branchNos);
        }

        /// <summary>
        /// Get an account and its initial balance detailed by one or more criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>        
        /// <returns>Account object</returns>
        public ACAccountsInfo GetAccountInitialBalanceByObjectID(string accountNo, int objectID, string objectType, int? currencyID, int? bankID, string branchNos)
        {
            return (ACAccountsInfo)dal.GetDataObject("ACAccounts_GetAccountInitialBalanceByObjectID", accountNo, objectID, objectType, currencyID, bankID, branchNos);
        }

        /// <summary>
        /// Get the initial balance of an account
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <returns>Initial balance</returns>
        public decimal GetAccountInitialBalance(string accountNo)
        {
            decimal initBalance = 0;
            ACAccountsInfo account = GetAccountInitialBalance(accountNo, null, null, null, null, null, null);
            if (account != null)
            {
                initBalance = account.ACAccountInitialBalance;
            }
            return initBalance;
        }

        /// <summary>
        /// Get an account and its sub ones by its no
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <returns>List of accounts</returns>
        public List<ACAccountsInfo> GetSubAccountsByAccountNo(string accountNo)
        {
            DataSet ds = dal.GetDataSet("ACAccounts_GetSubAccountsByAccountNo", accountNo);
            return (List<ACAccountsInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ACAccountsInfo> accounts = new List<ACAccountsInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACAccountsInfo objAccountsInfo = (ACAccountsInfo)GetObjectFromDataRow(row);
                    accounts.Add(objAccountsInfo);
                }
            }
            ds.Dispose();
            return accounts;
        }

        /// <summary>
        /// Get receivable accounts
        /// </summary>
        /// <returns>List of receivable accouns</returns>
        public List<ACAccountsInfo> GetReceivableAccounts()
        {
            DataSet ds = dal.GetDataSet("ACAccounts_GetReceivableAccounts");
            return (List<ACAccountsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get payable accounts
        /// </summary>
        /// <returns>List of payable accounts</returns>
        public List<ACAccountsInfo> GetPayableAccounts()
        {
            DataSet ds = dal.GetDataSet("ACAccounts_GetPayableAccounts");
            return (List<ACAccountsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get accounts detailed to objects
        /// </summary>
        /// <returns>List of accounts</returns>
        public List<ACAccountsInfo> GetDetailAccounts()
        {
            DataSet ds = dal.GetDataSet("ACAccounts_GetDetailAccounts");
            return (List<ACAccountsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Check whether an account is built-in
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <returns>True if the account is built-in, otherwise false</returns>
        public bool IsBuiltInAccount(string accountNo)
        {
            if (!accountNo.StartsWith("0"))
            {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Get accounts for evaluating exchange rate diff
        /// </summary>
        /// <returns>List of accounts</returns>
        public List<ACAccountsInfo> GetAccountsForEvaluatingExchangeRateDiff()
        {
            DataSet ds = dal.GetDataSet("ACAccounts_GetAccountsForEvaluatingExchangeRateDiff");
            return (List<ACAccountsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get an account by its id
        /// </summary>
        /// <param name="accountID">Account id</param>
        /// <returns>Account object</returns>
        public ACAccountsInfo GetAccountByID(int accountID)
        {
            return (ACAccountsInfo)dal.GetDataObject("ACAccounts_GetAccountByID", accountID);
        }


        public List<ACAccountsInfo> GetListAccountForShowIdentifyMenu()
        {
            DataSet ds = dal.GetDataSet("ACAccounts_GetListAccountForShowIdentifyMenu");
            return (List<ACAccountsInfo>)GetListFromDataSet(ds);
        }

        public List<ACAccountsInfo> IsAccountOrChildOfAccount(int accountID, string accountNo)
        {
            DataSet ds = dal.GetDataSet("ACAccounts_IsAccountOrChildOfAccount", accountID, accountNo);
            return (List<ACAccountsInfo>)GetListFromDataSet(ds);
        }
        public List<ACAccountsInfo> GetListAccountAndParentByACAccountID(string accountNo)
        {
            DataSet ds = dal.GetDataSet("ACAccounts_GetListAccountAndParentByACAccountID", accountNo);
            return (List<ACAccountsInfo>)GetListFromDataSet(ds);
        }

        public DataSet GetListAccountNotChild()
        {
            DataSet ds = dal.GetDataSet("ACAccounts_GetListAccountNotChild");
            return ds;
        }
        public ACAccountsInfo GetTranAccountBalance(DateTime FromDate, int? currencyID, string objectType, int? objectID, int? branchID, int accountID)
        {
            return (ACAccountsInfo)dal.GetDataObject("ACAccounts_GetTransInitialBalance", FromDate, currencyID, objectType, objectID, branchID, accountID);
        }

        public void DeleteAccountsByAccountParentID(int parentID)
        {
            dal.ExecuteStoredProcedure("ACAccounts_DeleteAccountsByAccountParentID", parentID);
        }
    }
    #endregion
}