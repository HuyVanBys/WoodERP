using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ACAccountBalances
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ACAccountDetailsController
    //Created Date:17 May 2012
    //-----------------------------------------------------------

    public class ACAccountDetailsController : BaseBusinessController
    {
        public ACAccountDetailsController()
        {
            dal = new DALBaseProvider("ACAccountDetails", typeof(ACAccountDetailsInfo));
        }

        /// <summary>
        /// Get the details of an account by some criteria
        /// some criteria
        /// </summary>
        /// <param name="accountID">Account id</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <returns>List of account details</returns>
        public List<ACAccountDetailsInfo> GetAccountDetailList(int accountID, int? objectID, string objectType, int? currencyID)
        {
            DataSet ds = dal.GetDataSet("ACAccountDetails_GetAccountDetailList", accountID, objectID, objectType, currencyID);
            return (List<ACAccountDetailsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get the details of an account
        /// </summary>
        /// <param name="accountID">Account id</param>        
        /// <returns>List of account details</returns>
        public List<ACAccountDetailsInfo> GetAccountDetailList(int accountID)
        {
            return (List<ACAccountDetailsInfo>)GetAccountDetailList(accountID, null, null, null);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ACAccountDetailsInfo> accountDetails = new List<ACAccountDetailsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACAccountDetailsInfo accountBalance = (ACAccountDetailsInfo)GetObjectFromDataRow(row);
                    accountDetails.Add(accountBalance);
                }
            }
            ds.Dispose();
            return accountDetails;
        }

        /// <summary>
        /// Get account details for transferring
        /// </summary>
        /// <returns>List of account details</returns>
        public List<ACAccountDetailsInfo> GetAccountDetailsForTransferring(int companyID)
        {
            DataSet ds = dal.GetDataSet("ACAccountDetails_GetAccountDetailsForTransferring", companyID);
            return (List<ACAccountDetailsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get an account detail based on some criteria
        /// </summary>
        /// <param name="accountID">Account id</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <returns>Account detail object</returns>
        public ACAccountDetailsInfo GetAccountDetail(int accountID, int objectID, string objectType, int currencyID)
        {
            return (ACAccountDetailsInfo)dal.GetDataObject("ACAccountDetails_GetAccountDetail", accountID, objectID, objectType, null, currencyID);
        }

        /// <summary>
        /// Get an account detail based on some criteria
        /// </summary>
        /// <param name="accountID">Account id</param>
        /// <param name="bankID">Bank id</param>
        /// <param name="currencyID">Currency id</param>
        /// <returns>Account detail object</returns>
        public ACAccountDetailsInfo GetAccountDetail(int accountID, int bankID, int currencyID)
        {
            return (ACAccountDetailsInfo)dal.GetDataObject("ACAccountDetails_GetAccountDetail", accountID, null, null, bankID, currencyID);
        }

        public List<ACAccountDetailsInfo> GetAccountDetailByObjectIDAndSomeCriteria(int objectID, int? currencyID)
        {
            DataSet ds = dal.GetDataSet("ACAccountDetails_GetAccountDetailByObjectIDAndSomeCriteria", objectID, currencyID);
            return (List<ACAccountDetailsInfo>)GetListFromDataSet(ds);
        }

        public List<ACAccountDetailsInfo> GetAccountDetailByObjectIDAndCurrencyID(int objectID, int currencyID)
        {
            DataSet ds = dal.GetDataSet("ACAccountDetails_GetAccountDetailByObjectIDAndCurrencyID", objectID, currencyID);
            return (List<ACAccountDetailsInfo>)GetListFromDataSet(ds);
        }

        public List<ACAccountDetailsInfo> GetAllAccountDetailList(string accountNo, int? objectID, string objectType, int? currencyID)
        {
            DataSet ds = dal.GetDataSet("ACAccountDetails_GetAllAccountDetailList", accountNo, objectID, objectType, currencyID);
            return (List<ACAccountDetailsInfo>)GetListFromDataSet(ds);
        }

        public List<ACAccountDetailsInfo> GetAccountDetailListByAccountNo(string accountNo, int? objectID, string objectType, int? currencyID)
        {
            DataSet ds = dal.GetDataSet("ACAccountDetails_GetAccountDetailListByAccountNo", accountNo, objectID, objectType, currencyID);
            return (List<ACAccountDetailsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Delete Old object balance
        /// </summary>
        /// <param name="employeeID">Employee id</param>
        /// <param name="date">Date contains the month</param>
        public void DeleteOldObjectBalanceByAcountIDAndDate(string AcountIDs, DateTime date, int? branchID)
        {
            dal.ExecuteStoredProcedure("ACAccountDetails_DeleteOldObjectBalanceByAcountIDAndDate", AcountIDs, date, branchID);
        }
    }
    #endregion
}