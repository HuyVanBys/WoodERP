using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace BOSERP
{
    #region ACDocuments
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ACDocumentsController
    //Created Date:Wednesday, June 08, 2011
    //-----------------------------------------------------------

    public class ACDocumentsController : BaseBusinessController
    {
        public ACDocumentsController()
        {
            dal = new DALBaseProvider("ACDocuments", typeof(ACDocumentsInfo));
        }

        /// <summary>
        /// Get document by document type id and document no
        /// </summary>
        /// <param name="documentTypeID">The document type id.</param>
        /// <param name="documentNo">The document no</param>
        /// <returns>Data of document</returns>
        public ACDocumentsInfo GetDocumentByDocumentTypeIDAndDocumentNo(int documentTypeID, string documentNo)
        {
            return (ACDocumentsInfo)dal.GetDataObject("ACDocuments_GetDocumentByDocumentTypeIDAndDocumentNo", documentTypeID, documentNo);
        }

        /// <summary>
        /// Get a document by its type and no
        /// </summary>
        /// <param name="documentType">Document type</param>
        /// <param name="documentNo">Document no</param>
        /// <returns>Document object</returns>
        public ACDocumentsInfo GetDocumentByTypeAndNo(string documentType, string documentNo)
        {
            ACDocumentTypesController objDocumentTypesController = new ACDocumentTypesController();
            int documentTypeID = objDocumentTypesController.GetObjectIDByName(documentType);
            return GetDocumentByDocumentTypeIDAndDocumentNo(documentTypeID, documentNo);
        }


        /// <summary>
        /// Get document list based on some criteria
        /// </summary>
        /// <param name="documentNo">The document no</param>
        /// <param name="documentTypeName">The document type</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="fromDate">Search from document date</param>
        /// <param name="toDate">Search to document date</param>        
        /// <returns>List of documents</returns>
        public DataSet GetDocumentList(
                                    string documentNo,
                                    string documentType,
                                    int? objectID,
                                    string objectType,
                                    int? employeeID,
                                    DateTime? fromDate,
                                    DateTime? toDate)
        {
            return dal.GetDataSet("ACDocuments_GetDocumentList",
                                documentNo,
                                documentType,
                                objectID,
                                objectType,
                                employeeID,
                                fromDate,
                                toDate);
        }

        /// <summary>
        /// Get all relative documents of a transaction
        /// </summary>
        /// <param name="documentTypeID">Type id of the document associating with the transaction</param>
        /// <param name="documentNo">No of the document associating with the transaction</param>
        /// <returns></returns>
        public List<ACDocumentsInfo> GetRelativeDocumentsByDocumentTypeIDAndDocumentNo(int documentTypeID, string documentNo)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetRelativeDocumentsByDocumentTypeIDAndDocumentNo", documentTypeID, documentNo);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get general documents based on some criteria
        /// </summary>
        /// <param name="documentNo">Document no</param>
        /// <param name="documentTypeID">Document type id</param>
        /// <param name="employeeID">Employee id</param>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns></returns>
        public DataSet GetGeneralDocumentList(
                                            string documentNo,
                                            int? documentTypeID,
                                            int? employeeID,
                                            DateTime? fromDate,
                                            DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetGeneralDocumentList",
                                        documentNo,
                                        documentTypeID,
                                        employeeID,
                                        fromDate,
                                        toDate);
            return ds;
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ACDocumentsInfo> documents = new List<ACDocumentsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACDocumentsInfo objDocumentsInfo = (ACDocumentsInfo)GetObjectFromDataRow(row);
                    documents.Add(objDocumentsInfo);
                }
            }
            ds.Dispose();
            return documents;
        }

        /// <summary>
        /// Get document list relating to an account by some criteria
        /// </summary>
        /// <param name="accountID">Account id</param>        
        /// <param name="currencyID">Currency id</param>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns>List of documents</returns>
        public List<ACDocumentsInfo> GetDocumentsByAccountID(
                                                    int accountID,
                                                    int? objectID,
                                                    string objectType,
                                                    int? currencyID,
                                                    int? bankID,
                                                    int? locationID,
                                                    int? branchID,
                                                    DateTime? fromDate,
                                                    DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetDocumentsByAccountID", accountID, objectID, objectType, currencyID, bankID, locationID, branchID, fromDate, toDate);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get document list relating to an account by some criteria
        /// </summary>
        /// <param name="accountID">Account id</param>        
        /// <param name="currencyID">Currency id</param>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns>List of documents</returns>
        public List<ACDocumentsInfo> GetDocumentsByAccountID(
                                                    int accountID,
                                                    int? currencyID,
                                                    int? locationID,
                                                    int? branchID,
                                                    DateTime? fromDate,
                                                    DateTime? toDate)
        {
            return GetDocumentsByAccountID(accountID, null, null, currencyID, null, locationID, branchID, fromDate, toDate);
        }

        /// <summary>
        /// Delete a document and all its relevant data
        /// </summary>
        /// <param name="documentTypeID">Document type id</param>
        /// <param name="documentNo">Document no</param>
        public void DeleteByDocumentTypeIDAndDocumentNo(int documentTypeID, string documentNo)
        {
            dal.ExecuteStoredProcedure("ACDocuments_DeleteByDocumentTypeIDAndDocumentNo", documentTypeID, documentNo);
        }

        /// <summary>
        /// Delete a document and all its relevant data
        /// </summary>
        /// <param name="documentID">Document id</param>
        public void DeleteByID(int documentID)
        {
            dal.ExecuteStoredProcedure("ACDocuments_DeleteByID", documentID);
        }

        /// <summary>
        /// Get a document by its type and reference
        /// </summary>
        /// <param name="documentType">Document type</param>
        /// <param name="documentReference">Document reference</param>
        /// <returns>Document object</returns>        
        public ACDocumentsInfo GetDocumentByTypeAndReference(string documentType, string documentReference)
        {
            return (ACDocumentsInfo)dal.GetDataObject("ACDocuments_GetDocumentByTypeAndReference", documentType, documentReference);
        }

        /// <summary>
        /// Get documents that belong to a type for transferring
        /// </summary>
        /// <param name="documentType">Given document type</param>
        /// <returns>List of transferred documents</returns>
        public List<ACDocumentsInfo> GetDocumentsForTransferring(string documentType)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetDocumentsForTransferring", documentType);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get documents for transferring
        /// </summary>
        /// <returns>List of transferred documents</returns>
        public List<ACDocumentsInfo> GetDocumentsForTransferring()
        {
            return GetDocumentsForTransferring(null);
        }

        /// <summary>
        /// Get fee payments relating to a receipt
        /// </summary>
        /// <param name="receiptID">Receipt id</param>
        /// <returns>List of fee payments</returns>
        public List<ACDocumentsInfo> GetFeePaymentsByReceiptID(int receiptID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetFeePaymentsByReceiptID", receiptID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get asset shipments for broadcasting to a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <returns>List of broadcasted asset shipments</returns>
        public List<ACDocumentsInfo> GetAssetShipmentsForBroadcasting(int branchID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetAssetShipmentsForBroadcasting", branchID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get asset transfers for broadcasting to a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <returns>List of broadcasted asset transfers</returns>
        public List<ACDocumentsInfo> GetAssetTransfersForBroadcasting(int branchID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetAssetTransfersForBroadcasting", branchID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get equipment transfers for broadcasting to a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <returns>List of broadcasted equipment transfers</returns>
        public List<ACDocumentsInfo> GetEquipmentTransfersForBroadcasting(int branchID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetEquipmentTransfersForBroadcasting", branchID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get documents for broadcasting to a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <returns>List of broadcasted documents</returns>
        public List<ACDocumentsInfo> GetDocumentsForBroadcasting(int branchID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetDocumentsForBroadcasting", branchID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get documents by a specific reference
        /// </summary>
        /// <param name="reference">Reference</param>
        /// <returns>List of documents</returns>
        public List<ACDocumentsInfo> GetDocumentsByReference(string reference)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetDocumentsByReference", reference);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get fee payment list based on some criteria
        /// </summary>
        /// <param name="documentNo">Document no</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="employeeID">Employee id</param>
        /// <param name="packNo">Pack no of receipts paid by the payments</param>
        /// <param name="documentDateFrom">Date the result should be filtered from</param>
        /// <param name="documentDateTo">Date the result should be filtered to</param>        
        /// <returns>List of fee payments</returns>
        public DataSet GetFeePaymentSet(
                                    string documentNo,
                                    int objectID,
                                    string objectType,
                                    int employeeID,
                                    string packNo,
                                    DateTime documentDateFrom,
                                    DateTime documentDateTo)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetFeePaymentList",
                                        documentNo,
                                        objectID,
                                        objectType,
                                        employeeID,
                                        packNo,
                                        documentDateFrom,
                                        documentDateTo);
            return ds;
        }

        public DataSet GetDocumentListDataSetByListOfBranchID(string documentNo,
                                                            int? documentTypeID,
                                                            int? employeeID,
                                                            DateTime? dateFrom,
                                                            DateTime? dateTo, List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetDocumentListDataSet(documentNo, documentTypeID, employeeID, ojbBranchsInfo.BRBranchID, dateFrom, dateTo);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public DataSet GetDocumentListDataSet(string documentNo,
                                    int? documentTypeID,
                                    int? employeeID,
                                    int? branchID,
                                    DateTime? dateFrom,
                                    DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetDocumentListBySomeCriteria", documentNo,
                                documentTypeID,
                                employeeID,
                                branchID,
                                dateFrom,
                                dateTo);
            return ds;
        }

        /// <summary>
        /// Get document list based on some criteria by branch id
        /// </summary>
        /// <param name="documentNo">The document no</param>
        /// <param name="documentTypeName">The document type</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="fromDate">Search from document date</param>
        /// <param name="toDate">Search to document date</param>   
        /// <param name="branchID">Branch ID</param> 
        /// <param name="branchList"> branch List</param>
        /// <returns></returns>
        public DataSet GetDocumentListByListOfBranchID(
                                                    string documentNo,
                                                    string documentType,
                                                    int? objectID,
                                                    string objectType,
                                                    int? employeeID,
                                                    DateTime? fromDate,
                                                    DateTime? toDate,
                                                    int branchID,
                                                    List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetDocumentListByBranchID(documentNo, documentType, objectID, objectType, employeeID, fromDate, toDate, ojbBranchsInfo.BRBranchID);
                rtn.Merge(ds);
            }
            return rtn;
        }


        public DataSet GetDocumentListByListOfBranchID1(
                                                    string documentNo,
                                                    int documentID,
                                                    int? objectID,
                                                    string objectType,
                                                    int? employeeID,
                                                    DateTime? fromDate,
                                                    DateTime? toDate,
                                                    int branchID,
                                                    List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetDocumentListByBranchID1(documentNo, documentID, objectID, objectType, employeeID, fromDate, toDate, ojbBranchsInfo.BRBranchID);
                rtn.Merge(ds);
            }
            return rtn;
        }
        /// <summary>
        /// Get document list based on some criteria by branch id
        /// </summary>
        /// <param name="documentNo">The document no</param>
        /// <param name="documentTypeName">The document type</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="fromDate">Search from document date</param>
        /// <param name="toDate">Search to document date</param>   
        /// <param name="branchID">Branch ID</param>   
        /// <returns>List of documents</returns>
        public DataSet GetDocumentListByBranchID(
                                    string documentNo,
                                    string documentType,
                                    int? objectID,
                                    string objectType,
                                    int? employeeID,
                                    DateTime? fromDate,
                                    DateTime? toDate,
                                    int branchID)
        {
            return dal.GetDataSet("ACDocuments_GetDocumentListByBranchID",
                                documentNo,
                                documentType,
                                objectID,
                                objectType,
                                employeeID,
                                fromDate,
                                toDate,
                                branchID);
        }

        public DataSet GetDocumentListByBranchID1(
                                    string documentNo,
                                    int documentID,
                                    int? objectID,
                                    string objectType,
                                    int? employeeID,
                                    DateTime? fromDate,
                                    DateTime? toDate,
                                    int branchID)
        {
            return dal.GetDataSet("ACDocuments_GetDocumentListByBranchID1",
                                documentNo,
                                documentID,
                                objectID,
                                objectType,
                                employeeID,
                                fromDate,
                                toDate,
                                branchID);
        }

        /// <summary>
        /// Get general documents based on some criteria by branch id
        /// </summary>
        /// <param name="documentNo">Document no</param>
        /// <param name="documentTypeID">Document type id</param>
        /// <param name="employeeID">Employee id</param>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>  
        /// <param name="branchID">Branch ID</param>   
        /// <param name="branchList"> branch List</param>
        /// <returns></returns>
        public DataSet GetGeneralDocumentListByListOfBranchID(
                                                    string documentNo,
                                                    int? documentTypeID,
                                                    int? employeeID,
                                                    DateTime? fromDate,
                                                    DateTime? toDate,
                                                    int branchID,
                                                    List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetGeneralDocumentListByBranchID(documentNo, documentTypeID, employeeID, fromDate, toDate, ojbBranchsInfo.BRBranchID);
                rtn.Merge(ds);
            }
            return rtn;
        }

        /// <summary>
        /// Get general documents based on some criteria by branch id
        /// </summary>
        /// <param name="documentNo">Document no</param>
        /// <param name="documentTypeID">Document type id</param>
        /// <param name="employeeID">Employee id</param>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>  
        /// <param name="branchID">Branch ID</param>   
        /// <returns>List of documents</returns>
        public DataSet GetGeneralDocumentListByBranchID(
                                    string documentNo,
                                    int? documentTypeID,
                                    int? employeeID,
                                    DateTime? fromDate,
                                    DateTime? toDate,
                                    int branchID)
        {
            return dal.GetDataSet("ACDocuments_GetGeneralDocumentListByBranchID",
                                documentNo,
                                documentTypeID,
                                employeeID,
                                fromDate,
                                toDate,
                                branchID);
        }

        /// <summary>
        /// Get salary calculation list by list of branch id
        /// </summary>
        /// <param name="documentNo">documentNo</param>
        /// <param name="documentTypeID">documentTypeID</param>
        /// <param name="documentDateFrom">documentDateFrom</param>
        /// <param name="documentDateTo">documentDateTo</param>
        /// <param name="branchID">branchID</param>
        /// <param name="branchList">branchList</param>
        /// <returns></returns>
        public DataSet GetSalaryCalculationListByListOfBranchID(
                                                               string documentNo,
                                                               int? documentTypeID,
                                                               DateTime? documentDateFrom,
                                                               DateTime? documentDateTo,
                                                               int? branchID,
                                                               List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetSalaryCalculationListByBranchID(documentNo, documentTypeID, documentDateFrom, documentDateTo, ojbBranchsInfo.BRBranchID);
                rtn.Merge(ds);
            }

            return rtn;
        }

        /// <summary>
        /// Get salary calculation list by branch id
        /// </summary>
        /// <param name="documentNo">documentNo</param>
        /// <param name="documentTypeID">documentTypeID</param>
        /// <param name="documentDateFrom">documentDateFrom</param>
        /// <param name="documentDateTo">documentDateTo</param>
        /// <param name="branchID">branchID</param>
        /// <returns></returns>
        public DataSet GetSalaryCalculationListByBranchID(
                                                           string documentNo,
                                                           int? documentTypeID,
                                                           DateTime? documentDateFrom,
                                                           DateTime? documentDateTo,
                                                           int? branchID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetSalaryCalculationListByBranchID",
                                            documentNo,
                                            documentTypeID,
                                            documentDateFrom,
                                            documentDateTo,
                                            branchID);
            return ds;
        }

        public DataSet GetFeePaymentSet(
                                    string documentNo,
                                    int objectID,
                                    string objectType,
                                    int employeeID,
                                    string packNo,
                                    DateTime documentDateFrom,
                                    DateTime documentDateTo,
                                    List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = dal.GetDataSet("ACDocuments_GetFeePaymentList",
                                            documentNo,
                                            objectID,
                                            objectType,
                                            employeeID,
                                            packNo,
                                            documentDateFrom,
                                            documentDateTo,
                                            ojbBranchsInfo.BRBranchID);
                rtn.Merge(ds);
            }
            return rtn;
        }

        public DataSet GetFeePaymentSet(
                                    string documentNo,
                                    int objectID,
                                    string objectType,
                                    int employeeID,
                                    string packNo,
                                    DateTime documentDateFrom,
                                    DateTime documentDateTo,
                                    int? FK_BRBranchID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetFeePaymentList",
                                        documentNo,
                                        objectID,
                                        objectType,
                                        employeeID,
                                        packNo,
                                        documentDateFrom,
                                        documentDateTo,
                                        FK_BRBranchID);
            return ds;
        }

        /// <summary>
        /// Get documents by a specific reference
        /// </summary>
        /// <param name="reference">Reference</param>
        /// <returns>List of documents</returns>
        public List<ACDocumentsInfo> GetDocumentsForInputVAT(DateTime? fromDate, DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetDocumentListForInputVAT", fromDate, toDate);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }
        public List<ACDocumentsInfo> GetDocumentsForOutputVAT(DateTime? fromDate, DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetDocumentListForOutputVAT", fromDate, toDate);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public string GetTaxNumber(int ObjectID, string ObjectType)
        {
            string TaxNumber = (string)dal.GetSingleValue("ACObjects_GetTaxNumber", ObjectID, ObjectType);

            return TaxNumber;
        }
        public List<ACDocumentsInfo> GetPCinACDocument()
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetPCinACDocument");
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }
        public List<ACDocumentsInfo> GetPTinACDocument()
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetPTinACDocument");
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }
        public List<ACDocumentsInfo> GetUNCinACDocument()
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetUNCinACDocument");
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }
        public List<ACDocumentsInfo> GetBCinACDocument()
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetBCinACDocument");
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }
        public List<ACDocumentsInfo> GetListItemByACDocumentNo(string no)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetListItemByACDocumentNo", no);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }
        public List<ACDocumentsInfo> GetListDocumentsByNo(string no)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetListDocumentsByNo", no);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }
        public int GetDocumentDateByAssetID(int AssetID, DateTime FromDate, DateTime ToDate)
        {
            Object obj = dal.GetSingleValue("ACDocuments_GetDocumentDateByAssetID", AssetID, FromDate, ToDate);
            int Debt = 0;
            if (obj != null)
                Int32.TryParse(obj.ToString(), out Debt);

            return Debt;
        }
        public List<ACDocumentsInfo> GetListObjectByNo(string documentNo)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetListObjectByNo", documentNo);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public void UpdateReferenceFromDocument(string documentNo, DateTime date)
        {
            dal.ExecuteStoredProcedure("ACDocuments_UpdateReferenceFromDocument", documentNo, date);

        }

        public DataSet GetAllACDocumentsForLookupControl()
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetAllACDocumentsForLookupControl");
            return ds;
        }

        public List<ACDocumentsInfo> GetDocumentListByDocumentNo(string documentNo)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetDocumentListByDocumentNo", documentNo);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public DataSet GetDocumentListForAccountingBillByBranchIDs(
                                                    string documentNo,
                                                    int documentID,
                                                    int? objectID,
                                                    string objectType,
                                                    int? employeeID,
                                                    DateTime? fromDate,
                                                    DateTime? toDate,
                                                    int branchID,
                                                    List<BRBranchsInfo> branchList)
        {
            DataSet result = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetDocumentListForAccountingBillByBranchID(documentNo, documentID, objectID, objectType, employeeID, fromDate, toDate, ojbBranchsInfo.BRBranchID);
                result.Merge(ds);
            }
            return result;
        }

        public DataSet GetDocumentListForAccountingBillByBranchID(
                                    string documentNo,
                                    int documentID,
                                    int? objectID,
                                    string objectType,
                                    int? employeeID,
                                    DateTime? fromDate,
                                    DateTime? toDate,
                                    int branchID)
        {
            return dal.GetDataSet("ACDocuments_GetDocumentListForAccountingBillByBranchID",
                                documentNo,
                                documentID,
                                objectID,
                                objectType,
                                employeeID,
                                fromDate,
                                toDate,
                                branchID);
        }

        /// <summary>
        /// Get all relative documents of a transaction
        /// </summary>
        /// <param name="documentTypeID">Type id of the document associating with the transaction</param>
        /// <param name="documentNo">No of the document associating with the transaction</param>
        /// <returns></returns>
        public List<ACDocumentsInfo> GetDocumentsForAdvanceRefund()
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetDocumentsForAdvanceRefund");
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public decimal GetTotalDocumentAmountForBudgetTrackingBySomeCriteria(DateTime budgetTrackingFromYear, DateTime budgetTrackingToMonth, int? brBranchID, int? FK_ACDebitAccountID, int? FK_ACCreditAccountID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetTotalDocumentAmountForBudgetTrackingBySomeCriteria", budgetTrackingFromYear, budgetTrackingToMonth, brBranchID, FK_ACDebitAccountID, FK_ACCreditAccountID);
            List<ACDocumentsInfo> List = (List<ACDocumentsInfo>)GetListFromDataSet(ds);
            return List.FirstOrDefault().ACBudgetTrackingItemMonthPerformAmount;
        }

        public List<ACDocumentsInfo> GetDocumentForInvoiceClearing(int objectID, string objectType, int currencyID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetDocumentForInvoiceClearing", objectID, objectType, currencyID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentsInfo> GetDocumentForInvoiceClear(int objectID, string objectType)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetDocumentForInvoiceClear", objectID, objectType);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public DataSet GetDocumentListDatasetForFeePayment(
                                                string documentNo,
                                                int objectID,
                                                string objectType,
                                                int employeeID,
                                                DateTime fromDate,
                                                DateTime toDate,
                                                int branchID,
                                                string lotNo)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetDocumentListDatasetForFeePayment",
                                                documentNo,
                                                objectID,
                                                objectType,
                                                employeeID,
                                                fromDate,
                                                toDate,
                                                branchID,
                                                lotNo);
            return ds;
        }

        public DataSet GetDocumentListDatasetForSaleCost(
                                                string documentNo,
                                                int objectID,
                                                string objectType,
                                                int employeeID,
                                                DateTime fromDate,
                                                DateTime toDate,
                                                int branchID,
                                                string lotNo)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetDocumentListDatasetForSaleCost",
                                                documentNo,
                                                objectID,
                                                objectType,
                                                employeeID,
                                                fromDate,
                                                toDate,
                                                branchID,
                                                lotNo);
            return ds;
        }

        public DataSet GetDocumentListDataset(
                                                string documentNo,
                                                int objectID,
                                                string objectType,
                                                int employeeID,
                                                DateTime fromDate,
                                                DateTime toDate,
                                                int branchID,
                                                string lotNo)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetDocumentListDataset",
                                                documentNo,
                                                objectID,
                                                objectType,
                                                employeeID,
                                                fromDate,
                                                toDate,
                                                branchID,
                                                lotNo);
            return ds;
        }

        public DataSet GetInvoiceListDatasetByListOfBranchIDForFeePayment(
                                string documentNo,
                                                int objectID,
                                                string objectType,
                                                int employeeID,
                                                DateTime fromDate,
                                                DateTime toDate,
                                                string lotNo,
                                List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetDocumentListDatasetForFeePayment(documentNo,
                                                objectID,
                                                objectType,
                                                employeeID,
                                                fromDate,
                                                toDate,
                                                ojbBranchsInfo.BRBranchID,
                                                lotNo);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public DataSet GetInvoiceListDatasetByListOfBranchIDForSaleCost(
                                string documentNo,
                                                int objectID,
                                                string objectType,
                                                int employeeID,
                                                DateTime fromDate,
                                                DateTime toDate,
                                                string lotNo,
                                List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetDocumentListDatasetForSaleCost(documentNo,
                                                objectID,
                                                objectType,
                                                employeeID,
                                                fromDate,
                                                toDate,
                                                ojbBranchsInfo.BRBranchID,
                                                lotNo);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public DataSet GetInvoiceListDatasetByListOfBranchID(
                                string documentNo,
                                                int objectID,
                                                string objectType,
                                                int employeeID,
                                                DateTime fromDate,
                                                DateTime toDate,
                                                string lotNo,
                                List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetDocumentListDataset(documentNo,
                                                objectID,
                                                objectType,
                                                employeeID,
                                                fromDate,
                                                toDate,
                                                ojbBranchsInfo.BRBranchID,
                                                lotNo);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public List<ACDocumentsInfo> GetFeePaymentsByInvoiceInternalReceiptID(int receiptID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetFeePaymentsByInvoiceInternalReceiptID", receiptID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentsInfo> GetFeePaymentsByTransferID(int transferID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetFeePaymentsByTransferID", transferID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentsInfo> GetDocumentsForReportRP059(DateTime fromDate, DateTime toDate, int? currencyID, int? branchID, int? accountID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetDocumentsForReportRP059", fromDate, toDate, currencyID, branchID, accountID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentsInfo> GetDocumentsForReportRP081(int? supplierID, DateTime fromDate, DateTime toDate, int? currencyID, int? locationID, int? branchID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetDocumentsForReportRP081", supplierID, fromDate, toDate, currencyID, locationID, branchID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentsInfo> GetDocumentsForReceivedTransfer()
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetDocumentsForReceivedTransfer");
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }
        public List<ACDocumentsInfo> GetExitsAllocateCost(int ACDocumentTypeID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetExitsAllocateCost", ACDocumentTypeID, fromDate, toDate);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }
        public List<ACDocumentsInfo> GetExitsGeneralAccountingByTpye(int ACDocumentTypeID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetExitsGeneralAccountingByTpye", ACDocumentTypeID, fromDate, toDate);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentsInfo> GetDocumentsForLoanReceipt()
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetDocumentsForLoanReceipt");
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public ACDocumentsInfo GetDocumentsInfoFromTransactionByDocumentNo(string documentNo)
        {
            DataSet ds = dal.GetDataSet("ACTransactions_GetDocumentsInfoFromTransactionByDocumentNo", documentNo);
            return ((List<ACDocumentsInfo>)GetListFromDataSet(ds)).FirstOrDefault();
        }

        public List<ACDocumentsInfo> GetDocumentsForLoanReceipt(int branchID, int loanReceiptTypeID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetDocumentsForLoanReceipt", branchID, loanReceiptTypeID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }
        public DataSet GetDocumentListDataSetByListOfBranchIDForAssetTransfer(string documentNo,
                                                           int? documentTypeID,
                                                           int? employeeID,
                                                           DateTime? dateFrom,
                                                           DateTime? dateTo, List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetDocumentListDataSetForAssetTransfer(documentNo, documentTypeID, employeeID, ojbBranchsInfo.BRBranchID, dateFrom, dateTo);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public DataSet GetDocumentListDataSetForAssetTransfer(string documentNo,
                                    int? documentTypeID,
                                    int? employeeID,
                                    int? branchID,
                                    DateTime? dateFrom,
                                    DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetDocumentListBySomeCriteriaForAssetTransfer", documentNo,
                                documentTypeID,
                                employeeID,
                                branchID,
                                dateFrom,
                                dateTo);
            return ds;
        }

        public DataSet GetDocumentListDataSetByListOfBranchIDForEquipmentTransfer(string documentNo,
                                                           int? documentTypeID,
                                                           int? employeeID,
                                                           DateTime? dateFrom,
                                                           DateTime? dateTo, List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetDocumentListDataSetForEquipmentTransfer(documentNo, documentTypeID, employeeID, ojbBranchsInfo.BRBranchID, dateFrom, dateTo);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public DataSet GetDocumentListDataSetForEquipmentTransfer(string documentNo,
                                    int? documentTypeID,
                                    int? employeeID,
                                    int? branchID,
                                    DateTime? dateFrom,
                                    DateTime? dateTo)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetDocumentListBySomeCriteriaForEquipmentTransfer", documentNo,
                                documentTypeID,
                                employeeID,
                                branchID,
                                dateFrom,
                                dateTo);
            return ds;
        }

        public List<ACDocumentsInfo> GetRelativeDocumentListByInvoiceID(int InvoiceID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetRelativeDocumentListByInvoiceID", InvoiceID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentsInfo> GetRelativeDocumentListByInvoiceInID(int InvoiceInID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetRelativeDocumentListByInvoiceInID", InvoiceInID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentsInfo> GetRelativeDocumentListByPaymentVoucherID(int paymentVoucherID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetRelativeDocumentListByPaymentVoucherID", paymentVoucherID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentsInfo> GetRelativeDocumentListByReceiptVoucherID(int receiptVoucherID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetRelativeDocumentListByReceiptVoucherID", receiptVoucherID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentsInfo> GetRelativeDocumentListByAdvanceRefundID(int advanceRefundID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetRelativeDocumentListByAdvanceRefundID", advanceRefundID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentsInfo> GetRelativeDocumentListByAssetReceiptID(int assetReceiptID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetRelativeDocumentListByAssetReceiptID", assetReceiptID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentsInfo> GetRelativeDocumentListByEquipmentShipmentID(int equipmentShipmentID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetRelativeDocumentListByEquipmentShipmentID", equipmentShipmentID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentsInfo> GetRelativeDocumentListByBillOfLadingID(int billOfLadingID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetRelativeDocumentListByBillOfLadingID", billOfLadingID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentsInfo> CheckAvailableSaleDocumentDate(DateTime dateCheck, string deliveryPlanItems, string containerLoaderItems, string saleOrderItems, string saleForecastItems)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_CheckAvailableSaleDocumentDate", dateCheck, deliveryPlanItems, containerLoaderItems, saleOrderItems, saleForecastItems);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentsInfo> GetRelativeDocumentListByCustomerPaymentID(int customerPaymentID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetRelativeDocumentListByCustomerPaymentID", customerPaymentID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public decimal GetDocumentAmountBySomeCriteria(int clearDocumentID, int clearInvoiceInID, string documentNo)
        {
            return (decimal)dal.GetSingleValue("ACDocuments_GetDocumentAmountBySomeCriteria", clearDocumentID, clearInvoiceInID, documentNo);
        }

        public List<ACDocumentsInfo> CheckClosePurchaseOrderByPurchaseOrderID(int purchaseOrderID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_CheckClosePurchaseOrderByPurchaseOrderID", purchaseOrderID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentsInfo> GetRelativeDocumentListByListAccountBankID(int listAccountBankID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetRelativeDocumentListByListAccountBankID", listAccountBankID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentsInfo> GetRelativeDocumentListByAdvanceRequestID(int advanceRequestID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetRelativeDocumentListByAdvanceRequestID", advanceRequestID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentsInfo> GetRelativeDocumentListByDeliveryPlanID(int deliveryPlanID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetRelativeDocumentListByDeliveryPlanID", deliveryPlanID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentsInfo> GetRelativeDocumentListByProposalID(int proposalID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetRelativeDocumentListByProposalID", proposalID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentsInfo> GetRelativeDocumentListByAccountingBillID(int accountingBillID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetRelativeDocumentListByAccountingBillID", accountingBillID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentsInfo> CheckAvailablePurchaseDocumentDate(DateTime dateCheck, string receiptItems, string purchaseOrderItems)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_CheckAvailablePurchaseDocumentDate", dateCheck, receiptItems, purchaseOrderItems);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentsInfo> CheckAvailablePurchaseProposalDate(DateTime dateCheck, string proposalItems)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_CheckAvailablePurchaseProposalDate", dateCheck, proposalItems);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentsInfo> GetRelativeDocumentListByPaymentOrderID(int paymentOrderID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetRelativeDocumentListByPaymentOrderID", paymentOrderID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentsInfo> GetRelativeDocumentListByBankTransactionID(int bankTransactionID)
        {
            DataSet ds = dal.GetDataSet("ACDocuments_GetRelativeDocumentListByBankTransactionID", bankTransactionID);
            return (List<ACDocumentsInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}