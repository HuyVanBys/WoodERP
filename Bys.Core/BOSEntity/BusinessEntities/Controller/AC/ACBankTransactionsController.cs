using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;



namespace BOSERP
{
    #region ACBankTransactions
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ACBankTransactionsController
    //Created Date:Tuesday, March 13, 2012
    //-----------------------------------------------------------

    public class ACBankTransactionsController : BaseBusinessController
    {
        public ACBankTransactionsController()
        {
            dal = new DALBaseProvider("ACBankTransactions", typeof(ACBankTransactionsInfo));
        }

        /// <summary>
        /// Gets the bank transaction list.
        /// </summary>
        /// <param name="bankTransactionNo">The bank transaction no.</param>
        /// <param name="objectID">The object ID.</param>        
        /// <param name="bankTransactionType">Type of the bank transaction.</param>
        /// <param name="employeeID">The employee ID.</param>
        /// <param name="fromDate">From date.</param>
        /// <param name="toDate">To date.</param>
        /// <returns>List of bank transaction</returns>
        public DataSet GetBankTransactionList(string bankTransactionNo,
                                    int? objectID,
                                    string objectType,
                                    string bankTransactionType,
                                    int? employeeID,
                                    DateTime? fromDate,
                                    DateTime? toDate)
        {
            return dal.GetDataSet("ACBankTransactions_GetBankTransactionList",
                                bankTransactionNo,
                                objectID,
                                objectType,
                                bankTransactionType,
                                employeeID,
                                fromDate,
                                toDate);
        }

        /// <summary>
        /// Get a bank transaction by its reference info
        /// </summary>
        /// <param name="reference">Reference info</param>
        /// <returns>Bank transaction object</returns>
        public ACBankTransactionsInfo GetBankTransactionByReference(string reference)
        {
            return (ACBankTransactionsInfo)dal.GetDataObject("ACBankTransactions_GetBankTransactionByReference", reference);
        }

        /// <summary>
        /// Get a bank transaction by its id
        /// </summary>
        /// <param name="bankTransactionID">Bank transaction id</param>
        /// <returns>Bank transaction object</returns>
        public ACBankTransactionsInfo GetBankTransactionByID(int bankTransactionID)
        {
            return (ACBankTransactionsInfo)dal.GetDataObject("ACBankTransactions_GetBankTransactionByID", bankTransactionID);
        }

        /// <summary>
        /// Get bank transactions for transferring
        /// </summary>
        /// <returns>List of transferred bank transactions</returns>
        public List<ACBankTransactionsInfo> GetBankTransactionsForTransferring()
        {
            DataSet ds = dal.GetDataSet("ACBankTransactions_GetBankTransactionsForTransferring");
            return (List<ACBankTransactionsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get bank transactions for broadcasting to a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <returns>List of broadcasted bank transactions</returns>
        public List<ACBankTransactionsInfo> GetBankTransactionsForBroadcasting(int branchID)
        {
            DataSet ds = dal.GetDataSet("ACBankTransactions_GetBankTransactionsForBroadcasting", branchID);
            return (List<ACBankTransactionsInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ACBankTransactionsInfo> bankTransactions = new List<ACBankTransactionsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACBankTransactionsInfo bankTransaction = (ACBankTransactionsInfo)GetObjectFromDataRow(row);
                    bankTransactions.Add(bankTransaction);
                }
            }
            ds.Dispose();
            return bankTransactions;
        }

        /// <summary>
        /// Gets the bank transaction list by list of branch id
        /// </summary>
        /// <param name="bankTransactionNo">The bank transaction no.</param>
        /// <param name="objectID">The object ID.</param>        
        /// <param name="bankTransactionType">Type of the bank transaction.</param>
        /// <param name="employeeID">The employee ID.</param>
        /// <param name="fromDate">From date.</param>
        /// <param name="toDate">To date.</param>
        /// <param name="branchID">branch ID.</param>
        /// <param name="branchID"> list branch ID.</param>
        /// <returns>List of bank transaction</returns>
        public DataSet GetBankTransactionListByListOfBranchID(string bankTransactionNo,
                                    int? objectID,
                                    string objectType,
                                    string bankTransactionType,
                                    int? employeeID,
                                    DateTime? fromDate,
                                    DateTime? toDate,
                                    int? branchID,
                                    List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetBankTransactionListByBranchID(bankTransactionNo, objectID, objectType, bankTransactionType, employeeID, fromDate, toDate
                                                                , ojbBranchsInfo.BRBranchID);
                rtn.Merge(ds);
            }

            return rtn;
        }

        /// <summary>
        /// Gets the bank transaction list by branch id
        /// </summary>
        /// <param name="bankTransactionNo">The bank transaction no.</param>
        /// <param name="objectID">The object ID.</param>        
        /// <param name="bankTransactionType">Type of the bank transaction.</param>
        /// <param name="employeeID">The employee ID.</param>
        /// <param name="fromDate">From date.</param>
        /// <param name="toDate">To date.</param>
        /// <param name="branchID">BRBranch ID.</param>
        /// <returns>List of bank transaction</returns>
        public DataSet GetBankTransactionListByBranchID(string bankTransactionNo,
                                    int? objectID,
                                    string objectType,
                                    string bankTransactionType,
                                    int? employeeID,
                                    DateTime? fromDate,
                                    DateTime? toDate,
                                    int? branchID)
        {
            return dal.GetDataSet("ACBankTransactions_GetBankTransactionListByBranchID",
                                bankTransactionNo,
                                objectID,
                                objectType,
                                bankTransactionType,
                                employeeID,
                                fromDate,
                                toDate,
                                branchID);
        }

        public DataSet GetBankTransactionList(string bankTransactionNo,
                                            List<BRBranchsInfo> branchList,
                                            int? objectID,
                                            string objectType,
                                            string bankTransactionType,
                                            int? employeeID,
                                            DateTime? fromDate,
                                            DateTime? toDate)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = dal.GetDataSet("ACBankTransactions_GetBankTransactionListByBranchID",
                                bankTransactionNo,
                                objectID,
                                objectType,
                                bankTransactionType,
                                employeeID,
                                fromDate,
                                toDate,
                                ojbBranchsInfo.BRBranchID);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public List<ACBankTransactionsInfo> GetBankTransactionsForRP149(DateTime fromDate, DateTime toDate, int bankID, int currencyID)
        {
            List<ACBankTransactionsInfo> bankTransactions = new List<ACBankTransactionsInfo>();
            ACDocumentEntrysInfo objDocumentEntrysInfo = new ACDocumentEntrysInfo();
            ACDocumentEntrysController objDocumentEntrysController = new ACDocumentEntrysController();
            DataSet ds = dal.GetDataSet("ACBankTransactions_GetBankTransactionsForRP149", fromDate, toDate, bankID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {

                    ACBankTransactionsInfo bankTransaction = (ACBankTransactionsInfo)GetObjectFromDataRow(row);
                    //if (bankTransaction.ACDocumentEntryExchangeAmount != 0)
                    bankTransaction.ACBankTransactionExchangeAmount = bankTransaction.ACDocumentEntryExchangeAmount;
                    bankTransaction.AmountInWords = ReadAmount(bankTransaction.ACBankTransactionExchangeAmount.ToString(), bankTransaction.FK_GECurrencyID, currencyID);
                    bankTransactions.Add(bankTransaction);
                }
            }
            return bankTransactions;


        }
        private static string ReadGroup3(string group3)
        {
            string[] readDigit = new string[10] { " Không", " Một", " Hai", " Ba", " Bốn", " Năm", " Sáu", " Bảy", " Tám", " Chín" };
            string temp = String.Empty;
            if (group3 == "000") return String.Empty;
            try
            {
                temp = readDigit[int.Parse(group3[0].ToString())] + " Trăm";
                if (group3[1].ToString() == "0")
                    if (group3[2].ToString() == "0") return temp;
                    else
                    {
                        temp += " Lẻ" + readDigit[int.Parse(group3[2].ToString())];
                        return temp;
                    }

                else
                    temp += readDigit[int.Parse(group3[1].ToString())] + " Mươi";

                if (group3[2].ToString() == "5") temp += " Lăm";
                else if (group3[2].ToString() != "0") temp += readDigit[int.Parse(group3[2].ToString())];
            }
            catch { }
            return temp;
        }

        private static string ReadAmount(string amount)
        {
            if (Convert.ToDouble(amount) > 0)
            {
                string temp = String.Empty;
                while (amount.Length < 12)
                {
                    amount = "0" + amount;
                }
                string g1 = amount.Substring(0, 3);
                string g2 = amount.Substring(3, 3);
                string g3 = amount.Substring(6, 3);
                string g4 = amount.Substring(9, 3);

                if (g1 != "000")
                {
                    temp = ReadGroup3(g1);
                    temp += " Tỷ";
                }
                if (g2 != "000")
                {
                    temp += ReadGroup3(g2);
                    temp += " Triệu";
                }
                if (g3 != "000")
                {
                    temp += ReadGroup3(g3);
                    temp += " Ngàn";
                }

                temp = temp + ReadGroup3(g4);

                temp = temp.Replace("Một Mươi", "Mười");
                temp = temp.Trim();
                if (temp.IndexOf("Không Trăm") == 0)
                    temp = temp.Remove(0, 10);
                temp = temp.Trim();
                if (temp.IndexOf("Lẻ") == 0)
                    temp = temp.Remove(0, 2);
                temp = temp.Trim();
                temp = temp.Replace("Mươi Một", "Mươi Mốt");
                temp = temp.Trim();
                if (!string.IsNullOrEmpty(temp))
                {
                    return temp.Substring(0, 1).ToUpper() + temp.Substring(1).ToLower();
                }
            }
            return string.Empty;
        }

        /// <summary>
        /// Get displayed text by currency of an amount
        /// </summary>
        /// <param name="amount">Given amount</param>
        /// <param name="currencyID">Currency id</param>
        /// <returns>Displayed text of the amount</returns>
        public static string ReadAmount(string amount, int currencyID, int BosAppcurrencyID)
        {
            amount = Math.Round(Convert.ToDouble(amount), 2).ToString();
            GECurrenciesController objCurrencyController = new GECurrenciesController();
            GECurrenciesInfo currency = (GECurrenciesInfo)objCurrencyController.GetObjectByID(currencyID);
            if (currency != null)
            {
                if (currency.GECurrencyID == BosAppcurrencyID)
                {
                    amount = Math.Round(Convert.ToDouble(amount), 0).ToString();
                }
            }

            string[] parts = amount.Split(new string[] { NumberFormatInfo.CurrentInfo.NumberDecimalSeparator }, StringSplitOptions.RemoveEmptyEntries);
            string amountWord = string.Empty;
            if (parts.Length > 0)
            {
                amountWord += ReadAmount(parts[0]);
            }
            if (parts.Length > 1)
            {
                string word = ReadAmount(parts[1]).ToLower();
                if (NumberFormatInfo.CurrentInfo.NumberDecimalSeparator == ".")
                {
                    amountWord += string.Format(" chấm {0}", word);
                }
                else if (NumberFormatInfo.CurrentInfo.NumberDecimalSeparator == ",")
                {
                    amountWord += string.Format(" phẩy {0}", word);
                }
            }

            if (!string.IsNullOrEmpty(amountWord) && currency != null)
            {
                amountWord += string.Format(" {0}", currency.GECurrencyDesc);
            }
            return amountWord;
        }

        public ACBankTransactionsInfo GetBankTransactionVietcombankByID(int bankTransactionID)
        {
            return (ACBankTransactionsInfo)dal.GetDataObject("ACBankTransactions_GetBankTransactionVietcombankByID", bankTransactionID);
        }

    }
    #endregion
}