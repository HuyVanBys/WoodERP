using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ACBankTransactionItems
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ACBankTransactionItemsController
    //Created Date:Tuesday, March 13, 2012
    //-----------------------------------------------------------

    public class ACBankTransactionItemsController : BaseBusinessController
    {
        public ACBankTransactionItemsController()
        {
            dal = new DALBaseProvider("ACBankTransactionItems", typeof(ACBankTransactionItemsInfo));
        }


        /// <summary>
        /// Get all items of a bank transaction
        /// </summary>
        /// <param name="transactionID">Bank transaction id</param>
        /// <returns>List of items</returns>
        public List<ACBankTransactionItemsInfo> GetItemsByTransactionID(int transactionID)
        {
            DataSet ds = dal.GetDataSet("ACBankTransactionItems_GetItemsByTransactionID", transactionID);
            return (List<ACBankTransactionItemsInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ACBankTransactionItemsInfo> items = new List<ACBankTransactionItemsInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACBankTransactionItemsInfo objBankTransactionItemsInfo = (ACBankTransactionItemsInfo)GetObjectFromDataRow(row);
                    items.Add(objBankTransactionItemsInfo);
                }
            }
            ds.Dispose();
            return items;
        }

        public decimal GetAmountForLoanReceipt(int bankTransactionID)
        {
            Object obj = dal.GetSingleValue("ACBankTransactionItems_GetAmountForLoanReceipt", bankTransactionID);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }

        public List<ACBankTransactionItemsInfo> GetBankTransactionsForRP161(DateTime fromDate, DateTime toDate, int bankID)
        {
            DataSet ds = dal.GetDataSet("ACBankTransactions_GetBankTransactionsForRP161", fromDate, toDate, bankID);
            return (List<ACBankTransactionItemsInfo>)GetListFromDataSet(ds);
        }

        public ACBankTransactionItemsInfo CreateBankTransactionItemByLoanReceiptID(int loanReceiptID)
        {
            DataSet ds = dal.GetDataSet("ACBankTransactionItems_CreateBankTransactionItemByLoanReceiptID", loanReceiptID);
            ACBankTransactionItemsInfo objBankTransactionItemsInfo = new ACBankTransactionItemsInfo();
            if (ds.Tables.Count > 0)
            {
                objBankTransactionItemsInfo = (ACBankTransactionItemsInfo)dal.GetSingleObject(ds.Tables[0]);
            }
            return objBankTransactionItemsInfo;
        }

        public List<ACBankTransactionItemsInfo> GetBankTransactionItemByAdvanceRefundDirect(int advandRefundID)
        {
            DataSet ds = dal.GetDataSet("ACBankTransactions_GetBankTransactionByAdvanceRefundDirect", advandRefundID);
            return (List<ACBankTransactionItemsInfo>)GetListFromDataSet(ds);
        }
        public List<ACBankTransactionItemsInfo> GetDetailBankTransactions(DateTime? fromDate, DateTime? toDate, int bankID, int branchID)
        {
            DataSet ds = dal.GetDataSet("RP_GetDetailBankTransactions", fromDate, toDate, bankID, branchID);
            return (List<ACBankTransactionItemsInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}