using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ACAssets
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ACAssetsController
    //Created Date:04 May 2012
    //-----------------------------------------------------------

    public class ACAssetsController : BaseBusinessController
    {
        public ACAssetsController()
        {
            dal = new DALBaseProvider("ACAssets", typeof(ACAssetsInfo));
        }

        /// <summary>
        /// Get asset list based on some criteria
        /// </summary>
        /// <param name="assetNo">Asset no</param>
        /// <param name="assetType">Asset type</param>
        /// <param name="branchID">Branch id</param>        
        /// <returns></returns>
        public List<ACAssetsInfo> GetAssetList(string assetNo, string assetType, int? branchID)
        {
            DataSet ds = dal.GetDataSet("ACAssets_GetAssetList", assetNo, assetType, branchID);
            return (List<ACAssetsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get all assets
        /// </summary>
        /// <returns>List of assets</returns>
        public List<ACAssetsInfo> GetAllAssets()
        {
            DataSet ds = dal.GetDataSet("ACAssets_GetAllObjects");
            return (List<ACAssetsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get assets by type
        /// </summary>
        /// <param name="assetType">Asset type</param>
        /// <returns>List of assets</returns>
        public List<ACAssetsInfo> GetAssetsByType(string assetType)
        {
            return GetAssetList(null, assetType, null);
        }

        /// <summary>
        /// Get an asset and its inventory info in a room
        /// </summary>
        /// <param name="assetID">Asset id</param>
        /// <param name="roomID">Room id</param>
        /// <returns>Asset object</returns>
        public ACAssetsInfo GetAssetByAssetIDAndRoomID(int assetID, int roomID)
        {
            ACAssetsInfo asset = (ACAssetsInfo)dal.GetDataObject("ACAssets_GetAssetByAssetIDAndRoomID", assetID, roomID);
            return asset;
        }

        /// <summary>
        /// Get an asset by its id
        /// </summary>
        /// <param name="assetID">Asset id</param>
        /// <returns>Asset object</returns>
        public ACAssetsInfo GetAssetByID(int assetID)
        {
            return (ACAssetsInfo)dal.GetDataObject("ACAssets_GetAssetByID", assetID);
        }

        /// <summary>
        /// Get the list of assets for depreciating of a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <param name="date">Date that only assets have the used date being less than it 
        /// should be choosen for depreciating</param>
        /// <returns>List of assets</returns>
        public List<ACAssetsInfo> GetAssetsForDepreciating(int branchID, DateTime date)
        {
            DataSet ds = dal.GetDataSet("ACAssets_GetAssetsForDepreciating", branchID, date);
            return (List<ACAssetsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get assets for transferring
        /// </summary>
        /// <returns>List of transferred assets</returns>
        public List<ACAssetsInfo> GetAssetsForTransferring()
        {
            DataSet ds = dal.GetDataSet("ACAssets_GetAssetsForTransferring");
            return (List<ACAssetsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get assets for broadcasting to a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <returns>List of broadcasted assets</returns>
        public List<ACAssetsInfo> GetAssetsForBroadcasting(int branchID)
        {
            DataSet ds = dal.GetDataSet("ACAssets_GetAssetsForBroadcasting", branchID);
            return (List<ACAssetsInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ACAssetsInfo> assets = new List<ACAssetsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACAssetsInfo asset = (ACAssetsInfo)GetObjectFromDataRow(row);
                    assets.Add(asset);
                }
            }
            ds.Dispose();
            return assets;
        }
        /// <summary>
        /// Get asset list based on some criteria
        /// </summary>
        /// <param name="assetType">Asset type</param>
        /// <param name="branchID">Branch id</param>        
        /// <returns></returns>
        public List<ACAssetsInfo> GetAssetByAssetTypeAndBranchIDAndRoomID(string assetType, int? branchID, int? roomID)
        {
            DataSet ds = dal.GetDataSet("ACAssets_GetAssetByAssetTypeAndBranchIDAndRoomID", assetType, branchID, roomID);
            return (List<ACAssetsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get asset list based on some criteria
        /// </summary>
        /// <param name="fromDate">From date</param>
        /// <param name="Todate">To date</param>
        /// <param name="assetType">Asset type</param>
        /// <param name="branchID">BranchID</param>
        /// <param name="roomID">Department room ID</param>
        /// <returns></returns>
        public List<ACAssetsInfo> GetAssetsBySomeCriteria(DateTime? fromDate, DateTime? Todate, string assetType, int? branchID, int? roomID)
        {
            DataSet ds = dal.GetDataSet("ACAssets_GetAssetsBySomeCriteria", fromDate, Todate, assetType, branchID, roomID);
            return (List<ACAssetsInfo>)GetListFromDataSet(ds);
        }
        public List<ACAssetsInfo> GetAssetsByID(DateTime? fromDate, DateTime? Todate, int? assetID)
        {
            DataSet ds = dal.GetDataSet("ACAssets_GetAssetsByID", fromDate, Todate, assetID);
            return (List<ACAssetsInfo>)GetListFromDataSet(ds);
        }
        public List<ACAssetsInfo> GetAssetsByProductIDAndAccountID(DateTime? fromDate, DateTime? Todate, int? assetID, int? accountID, int? costAccountID, int? departmentRoomID)
        {
            DataSet ds = dal.GetDataSet("ACAssets_GetAssetsByProductIDAndAccountID", fromDate, Todate, assetID, accountID, costAccountID, departmentRoomID);
            return (List<ACAssetsInfo>)GetListFromDataSet(ds);
        }
        public List<ACAssetsInfo> GetAssetsByProductID(int? productID)
        {
            DataSet ds = dal.GetDataSet("ACAssets_GetAssetsByProductID", productID);
            return (List<ACAssetsInfo>)GetListFromDataSet(ds);
        }
        public ACAssetsInfo GetACAssetByProductID(int productID)
        {
            return (ACAssetsInfo)dal.GetDataObject("ICProducts_GetACAssetByProductID", productID);
        }

        public List<ACAssetsInfo> GetAssetsForLookupEditControl()
        {
            DataSet ds = dal.GetDataSet("ACAssets_GetAssetsForLookupEditControl");
            return (List<ACAssetsInfo>)GetListFromDataSet(ds);
        }

        public List<ACAssetsInfo> GetAssetsForAssetReceipt()
        {
            DataSet ds = dal.GetDataSet("ACAssets_GetAssetsForAssetReceipt");
            return (List<ACAssetsInfo>)GetListFromDataSet(ds);
        }

        public List<ACAssetsInfo> GetAssetsForStopDepreciationAsset()
        {
            DataSet ds = dal.GetDataSet("ACAssets_GetAssetsForStopDepreciationAsset");
            return (List<ACAssetsInfo>)GetListFromDataSet(ds);
        }

        public IEnumerable<ACAssetsInfo> GetAllAssetList(string assetNo, string assetType)
        {
            throw new NotImplementedException();
        }
    }
    #endregion
}