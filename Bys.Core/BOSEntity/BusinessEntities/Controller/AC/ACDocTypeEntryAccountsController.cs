using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace BOSERP
{
    #region ACDocTypeEntryAccounts
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ACDocTypeEntryAccountsController
    //Created Date:Friday, June 03, 2011
    //-----------------------------------------------------------

    public class ACDocTypeEntryAccountsController : BaseBusinessController
    {
        public ACDocTypeEntryAccountsController()
        {
            dal = new DALBaseProvider("ACDocTypeEntryAccounts", typeof(ACDocTypeEntryAccountsInfo));
        }

        /// <summary>
        /// Get all document type entry account 
        /// </summary>
        /// <returns>List of the document type entry account</returns>
        public List<ACDocTypeEntryAccountsInfo> GetAllDocTypeEntryAccount()
        {
            List<ACDocTypeEntryAccountsInfo> docTypeEntryAccountList = new List<ACDocTypeEntryAccountsInfo>();
            DataSet ds = dal.GetDataSet("ACDocTypeEntryAccounts_GetAllDocTypeEntryAccount");
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACDocTypeEntryAccountsInfo objDocTypeEntryAccountsInfo = new ACDocTypeEntryAccountsInfo();
                    objDocTypeEntryAccountsInfo = (ACDocTypeEntryAccountsInfo)GetObjectFromDataRow(row);
                    docTypeEntryAccountList.Add(objDocTypeEntryAccountsInfo);
                }
            }
            return docTypeEntryAccountList;
        }

        /// <summary>
        /// Get doc type entry account by doc type entry id and posting type
        /// </summary>
        /// <param name="docTypeEntryID">The doc type entry id</param>
        /// <param name="docTypeEntryAccountType">The posting type</param>
        /// <returns>Data of doc type entry account</returns>
        public DataSet GetDataByDocTypeEntryIDAndPostingType(int docTypeEntryID, string postingType)
        {
            DataSet ds = dal.GetDataSet("ACDocTypeEntryAccounts_GetDataByDocTypeEntryIDAndPostingType", docTypeEntryID, postingType);
            return ds;
        }

        /// <summary>
        /// Delete all doc type entry account by document type id
        /// </summary>
        /// <param name="documentTypeID">The document type id.</param>
        public void DeleteAllDataByDocumentTypeID(int documentTypeID)
        {
            dal.ExecuteStoredProcedure("ACDocTypeEntryAccounts_DeleteAllDataByDocumentTypeID", documentTypeID);
        }

        /// <summary>
        /// Get document type entry account is default by document type entry 
        /// </summary>
        /// <param name="docTypeEntryID">ID of the document type entry</param>
        /// <returns>Data of doc type entry account</returns>
        public List<ACDocTypeEntryAccountsInfo> GetAccountsByEntryID(int docTypeEntryID)
        {
            DataSet ds = dal.GetDataSet("ACDocTypeEntryAccounts_GetDocTypeEntryAccountByDocTypeEntryID", docTypeEntryID);
            List<ACDocTypeEntryAccountsInfo> accounts = new List<ACDocTypeEntryAccountsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACDocTypeEntryAccountsInfo objDocTypeEntrAccountsInfo = (ACDocTypeEntryAccountsInfo)GetObjectFromDataRow(row);
                    accounts.Add(objDocTypeEntrAccountsInfo);
                }
            }
            return accounts;
        }

        /// <summary>
        /// Get document type entry account by document type id
        /// </summary>
        /// <param name="documentTypeID">Document type id</param>
        /// <returns>List of the document type entry account</returns>
        public List<ACDocTypeEntryAccountsInfo> GetAccountsByDocumentTypeID(int documentTypeID)
        {
            List<ACDocTypeEntryAccountsInfo> docTypeEntryAccountList = new List<ACDocTypeEntryAccountsInfo>();
            ACAccountsController objAccountsController = new ACAccountsController();
            DataSet ds = dal.GetDataSet("ACDocTypeEntryAccounts_GetDocTypeEntryAccountByDocumentTypeID", documentTypeID);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACDocTypeEntryAccountsInfo objDocTypeEntryAccountsInfo = (ACDocTypeEntryAccountsInfo)GetObjectFromDataRow(row);
                    ACAccountsInfo objAccountsInfo = (ACAccountsInfo)objAccountsController.GetObjectByID(objDocTypeEntryAccountsInfo.FK_ACAccountID);
                    docTypeEntryAccountList.Add(objDocTypeEntryAccountsInfo);
                }
            }
            return docTypeEntryAccountList;
        }

        /// <summary>
        /// Get document type entry account by document type id, doc type entry id and posting type
        /// </summary>
        /// <param name="docTypeEntryAccountList">List of the document type entry account before process</param>
        /// <param name="documentTypeID">Document type id</param>
        /// <param name="entryTypeID">Entry type id</param>
        /// <param name="postingType">Posting type</param>
        /// <returns>List of the document type entry account after process</returns>
        public List<ACDocTypeEntryAccountsInfo> GetDataByDocumentTypeIDAndDocTypeEntryIDAndPostingType(List<ACDocTypeEntryAccountsInfo> docTypeEntryAccountList, int documentTypeID, int entryTypeID, string postingType)
        {
            List<ACDocTypeEntryAccountsInfo> docTypeEntryAccountTempList = new List<ACDocTypeEntryAccountsInfo>();
            ACDocTypeEntrysController objDocTypeEntrysController = new ACDocTypeEntrysController();
            ACDocumentsController objDocumentsController = new ACDocumentsController();
            ACDocTypeEntrysInfo objDocTypeEntrysInfo = objDocTypeEntrysController.GetDocTypeEntryByDocumentTypeIDAndEntryTypeID(documentTypeID, entryTypeID);
            if (objDocTypeEntrysInfo != null && docTypeEntryAccountList != null)
            {
                var list = (from docTypeEntryAccount in docTypeEntryAccountList
                            where docTypeEntryAccount.FK_ACDocTypeEntryID == objDocTypeEntrysInfo.ACDocTypeEntryID &&
                                  docTypeEntryAccount.ACPostingType == postingType
                            select docTypeEntryAccount);

                foreach (var docTypeEntryAccount in list)
                {
                    if (docTypeEntryAccount.FK_ACAccountID != 0)
                        docTypeEntryAccountTempList.Add(docTypeEntryAccount);
                }
            }
            return docTypeEntryAccountTempList;
        }

        /// <summary>
        /// Get document type entry account by document type id
        /// </summary>
        /// <param name="documentID">Document id</param>
        /// <returns>List of the document type entry account</returns>
        public List<ACDocTypeEntryAccountsInfo> GetDocTypeEntryAccountByDocumentTypeID(int documentID)
        {
            List<ACDocTypeEntryAccountsInfo> DocTypeEntryAccountList = new List<ACDocTypeEntryAccountsInfo>();
            ACDocTypeEntryAccountsController objDocTypeEntryAccountsController = new ACDocTypeEntryAccountsController();
            ACDocumentsController objDocumentsController = new ACDocumentsController();
            ACDocumentsInfo objDocumentsInfo = (ACDocumentsInfo)objDocumentsController.GetObjectByID(documentID);
            DocTypeEntryAccountList = GetAccountsByDocumentTypeID(objDocumentsInfo.FK_ACDocumentTypeID);
            return DocTypeEntryAccountList;
        }

        /// <summary>
        /// Get document type entry account with all account
        /// </summary>
        /// <returns></returns>
        public List<ACDocTypeEntryAccountsInfo> GetListAllAccount()
        {
            List<ACDocTypeEntryAccountsInfo> docTypeEntryAccount = new List<ACDocTypeEntryAccountsInfo>();
            DataSet ds = dal.GetDataSet("ACAccounts_GetAllData");
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACDocTypeEntryAccountsInfo objDocTypeEntryAccountsInfo = (ACDocTypeEntryAccountsInfo)GetObjectFromDataRow(row);
                    docTypeEntryAccount.Add(objDocTypeEntryAccountsInfo);
                }
            }
            return docTypeEntryAccount;
        }
        public List<ACDocTypeEntryAccountsInfo> GetAccountIDByTypeDocument(string ACDocumentTypeName, string ACEntryTypeName)
        {
            List<ACDocTypeEntryAccountsInfo> docTypeEntryAccount = new List<ACDocTypeEntryAccountsInfo>();
            DataSet ds = dal.GetDataSet("ACDocTypeEntryAccounts_GetAccountIDByTypeDocument", ACDocumentTypeName, ACEntryTypeName);
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACDocTypeEntryAccountsInfo objDocTypeEntryAccountsInfo = (ACDocTypeEntryAccountsInfo)GetObjectFromDataRow(row);
                    docTypeEntryAccount.Add(objDocTypeEntryAccountsInfo);
                }
            }
            return docTypeEntryAccount;
        }
        public int GetAcountIDByEntryTypeIDAndPostingType(int entryTypeID, string postingType)
        {
            Object obj = dal.GetSingleValue("ACDocTypeEntryAccounts_GetAcountIDByEntryTypeIDAndPostingType", entryTypeID, postingType);
            int Debt = 0;
            if (obj != null)
                Int32.TryParse(obj.ToString(), out Debt);

            return Debt;
        }

    }
    #endregion
}