using BOSLib;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ACCostObjects
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ACCostObjectsController
    //Created Date:21 June 2012
    //-----------------------------------------------------------

    public class ACCostObjectsController : BaseBusinessController
    {
        public ACCostObjectsController()
        {
            dal = new DALBaseProvider("ACCostObjects", typeof(ACCostObjectsInfo));
        }

        /// <summary>
        /// Get cost objects for transferring
        /// </summary>
        /// <returns>List of transferred cost objects</returns>
        public List<ACCostObjectsInfo> GetCostObjectsForTransferring()
        {
            DataSet ds = dal.GetDataSet("ACCostObjects_GetCostObjectsForTransferring");
            return (List<ACCostObjectsInfo>)GetListFromDataSet(ds);
        }
        public List<ACCostObjectsInfo> GetAllAliveCostObject()
        {
            DataSet ds = dal.GetDataSet("ACCostObjects_GetAllAliveCostObject");
            return (List<ACCostObjectsInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ACCostObjectsInfo> costObjects = new List<ACCostObjectsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACCostObjectsInfo costObject = (ACCostObjectsInfo)GetObjectFromDataRow(row);
                    costObjects.Add(costObject);
                }
            }
            ds.Dispose();
            return costObjects;
        }

        public DataSet GetCostObjectListByListOfBranchID(
                                               string costObjectNo,
                                               string costObjectName,
                                               List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetCostObjectList(costObjectNo, costObjectName, ojbBranchsInfo.BRBranchID);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public DataSet GetCostObjectList(
                                   string costObjectNo,
                                   string costObjectName,
                                   int? branchID)
        {
            DataSet ds = dal.GetDataSet("ACCostObjects_GetCostObjectList", costObjectNo, costObjectName, branchID);
            return ds;
        }
    }
    #endregion
}