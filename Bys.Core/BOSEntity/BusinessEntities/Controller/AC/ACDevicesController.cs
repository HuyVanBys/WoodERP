using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ACDevices
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ACDevicesController
    //Created Date:31 October 2018
    //-----------------------------------------------------------

    public class ACDevicesController : BaseBusinessController
    {
        public ACDevicesController()
        {
            dal = new DALBaseProvider("ACDevices", typeof(ACDevicesInfo));
        }
        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ACDevicesInfo> accountDetails = new List<ACDevicesInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACDevicesInfo accountBalance = (ACDevicesInfo)GetObjectFromDataRow(row);
                    accountDetails.Add(accountBalance);
                }
            }
            ds.Dispose();
            return accountDetails;
        }
        public List<ACDevicesInfo> GetDataByTSCDCDDC(String type)
        {
            DataSet ds = dal.GetDataSet("ACDevices_GetDataByTSCDCDDC", type);
            return (List<ACDevicesInfo>)GetListFromDataSet(ds);
        }

        public DataSet GetACDevicesList(string deviceNo, string listbranch, int? employeeID, string deviceName, string type, DateTime? fromdate, DateTime? toDate)
        {
            return dal.GetDataSet("ACDevices_GetACDevicesList", deviceNo, listbranch, employeeID, deviceName, type, fromdate, toDate);
        }
        public List<ACDevicesInfo> GetListByListID(string listDevice)
        {
            DataSet ds = dal.GetDataSet("ACDevices_GetListByListID", listDevice);
            return (List<ACDevicesInfo>)GetListFromDataSet(ds);
        }
        public List<ACDevicesInfo> GetDeviceByIdentifyNoAndTypeExceptID(string no, string type, int id)
        {
            DataSet ds = dal.GetDataSet("ACDevices_GetDeviceByIdentifyNoAndTypeExceptID", no, type, id);
            return (List<ACDevicesInfo>)GetListFromDataSet(ds);
        }
        public List<ACDevicesInfo> GetDeviceByIdentifyIsAlive()
        {
            DataSet ds = dal.GetDataSet("ACDevices_GetDeviceByIdentifyIsAlive");
            return (List<ACDevicesInfo>)GetListFromDataSet(ds);
        }

    }
    #endregion
}