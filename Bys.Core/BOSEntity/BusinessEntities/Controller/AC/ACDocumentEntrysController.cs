using BOSCommon;
using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ACDocumentEntrys
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ACDocumentEntrysController
    //Created Date:Tuesday, June 28, 2011
    //-----------------------------------------------------------

    public class ACDocumentEntrysController : BaseBusinessController
    {
        public ACDocumentEntrysController()
        {
            dal = new DALBaseProvider("ACDocumentEntrys", typeof(ACDocumentEntrysInfo));
        }

        /// <summary>
        /// Get the list of entries based on some criteria
        /// </summary>
        /// <param name="documentID">Document id</param>
        /// <param name="documentTypeID">Document type id</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns>List of entries</returns>
        public List<ACDocumentEntrysInfo> GetEntryList(
                                            int? documentID,
                                            int? documentTypeID,
                                            int? objectID,
                                            string objectType,
                                            int? currencyID,
                                            int? bankID,
                                            int? locationID,
                                            int? branchID,
                                            DateTime? fromDate,
                                            DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetEntryList",
                                        documentID,
                                        documentTypeID,
                                        objectID,
                                        objectType,
                                        currencyID,
                                        bankID,
                                        locationID,
                                        branchID,
                                        fromDate,
                                        toDate);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get entry list based on some criteria
        /// </summary>
        /// <param name="documentTypeID">Document type id</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns>List of entries</returns>
        public List<ACDocumentEntrysInfo> GetEntryList(int? documentTypeID, int? currencyID, int? locationID, int? branchID, DateTime? fromDate, DateTime? toDate)
        {
            return GetEntryList(null, documentTypeID, null, null, currencyID, null, locationID, branchID, fromDate, toDate);
        }

        /// <summary>
        /// Get document entry by document id
        /// </summary>
        /// <param name="objDocumentsInfo">ID of the document</param>
        /// <returns>List of the document entry</returns>
        public List<ACDocumentEntrysInfo> GetDocumentEntryByDocumentID(int documentID)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDocumentEntryByDocumentID", documentID);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }



        public decimal GetAccountBalanceForRP042(
                                string accountNo,
                                DateTime date,
                                int? objectID,
                                string objectType,
                                int? currencyID,
                                int? bankID,
                                int? locationID,
                                int? branchID)
        {
            ACAccountsController objAccountsController = new ACAccountsController();
            ACAccountsInfo account = (ACAccountsInfo)objAccountsController.GetObjectByNo(accountNo);
            decimal balance = 0;
            decimal initBalance = 0;
            if (account != null)
            {
                string postingRule = account.ACAccountPostingRule;
                if (objectID > 0)
                {
                    account = objAccountsController.GetAccountInitialBalanceForRP042(accountNo, objectID, objectType, currencyID, bankID, branchID, locationID);
                    initBalance += account.ACAccountInitialBalance;
                }
                //else if (branchID > 0)
                //{
                //    account = objAccountsController.GetAccountInitialBalance(accountNo, branchID, ObjectType.Branch.ToString(), currencyID, bankID, branchID, locationID);
                //    initBalance += account.ACAccountInitialBalance;
                //}
                //else if (locationID > 0)
                //{
                //    BRBranchsController objBranchsController = new BRBranchsController();
                //    List<BRBranchsInfo> branches = objBranchsController.GetBranchesByLocationID(locationID.Value);
                //    foreach (BRBranchsInfo branch in branches)
                //    {
                //        account = objAccountsController.GetAccountInitialBalance(accountNo, branch.BRBranchID, ObjectType.Branch.ToString(), currencyID, bankID, branchID, locationID);
                //        initBalance += account.ACAccountInitialBalance;
                //    }
                //}
                else
                {
                    account = objAccountsController.GetAccountInitialBalanceForRP042(accountNo, objectID, objectType, currencyID, bankID, branchID, locationID);
                    initBalance += account.ACAccountInitialBalance;
                }

                decimal debitAmount = GetAccountDebitAmountForRP042(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date);

                decimal creditAmount = GetAccountCreditAmountForRP042(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date);


                if (postingRule == AccountPostingRule.IncreasingByDebit.ToString())
                {
                    balance = initBalance + debitAmount - creditAmount;
                }
                else if (postingRule == AccountPostingRule.IncreasingByCredit.ToString())
                {
                    balance = initBalance + creditAmount - debitAmount;
                }
            }
            if (balance > 0)
            {
                string b = "";
            }
            return balance;
        }
        #region Account Trans balance
        /// <summary>
        /// Get the balance of an account detailed by one or more criteria        
        /// </summary>
        /// <returns>Balance of the account</returns>
        public decimal GetAccountTranBalance(
                                DateTime date,
                                int? currencyID,
                                string objectType,
                                int? objectID,
                                int? branchID,
                                int AccountID
                                )
        {
            ACAccountsController objAccountsController = new ACAccountsController();

            decimal balance = 0;
            ACAccountsInfo account = objAccountsController.GetTranAccountBalance(date, currencyID, objectType, objectID, branchID, AccountID);
            if (account != null)
                balance = account.ACAccountInitialBalance;
            return balance;
        }
        #endregion
        #region Account balance
        /// <summary>
        /// Get the balance of an account detailed by one or more criteria        
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="date">Date the result is calculated to</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <returns>Balance of the account</returns>
        public decimal GetAccountBalance(
                                string accountNo,
                                DateTime date,
                                int? objectID,
                                string objectType,
                                int? currencyID,
                                int? bankID,
                                int? locationID,
                                int? branchID)
        {
            ACAccountsController objAccountsController = new ACAccountsController();
            ACAccountsInfo account = (ACAccountsInfo)objAccountsController.GetObjectByNo(accountNo);
            decimal balance = 0;
            decimal initBalance = 0;
            if (account != null)
            {
                string postingRule = account.ACAccountPostingRule;
                if (objectID > 0)
                {
                    account = objAccountsController.GetAccountInitialBalance(accountNo, objectID, objectType, currencyID, bankID, branchID, locationID);
                    initBalance += account.ACAccountInitialBalance;
                }
                else if (branchID > 0)
                {
                    account = objAccountsController.GetAccountInitialBalance(accountNo, branchID, ObjectType.Branch.ToString(), currencyID, bankID, branchID, locationID);
                    initBalance += account.ACAccountInitialBalance;
                }
                else if (locationID > 0)
                {
                    BRBranchsController objBranchsController = new BRBranchsController();
                    List<BRBranchsInfo> branches = objBranchsController.GetBranchesByLocationID(locationID.Value);
                    foreach (BRBranchsInfo branch in branches)
                    {
                        account = objAccountsController.GetAccountInitialBalance(accountNo, branch.BRBranchID, ObjectType.Branch.ToString(), currencyID, bankID, branchID, locationID);
                        initBalance += account.ACAccountInitialBalance;
                    }
                }
                else
                {
                    account = objAccountsController.GetAccountInitialBalance(accountNo, objectID, objectType, currencyID, bankID, branchID, locationID);
                    initBalance += account.ACAccountInitialBalance;
                }

                decimal debitAmount = GetAccountDebitAmount(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date);
                decimal creditAmount = GetAccountCreditAmount(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date);
                if (postingRule == AccountPostingRule.IncreasingByDebit.ToString())
                {
                    balance = initBalance + debitAmount - creditAmount;
                }
                else if (postingRule == AccountPostingRule.IncreasingByCredit.ToString())
                {
                    balance = initBalance + creditAmount - debitAmount;
                }
            }
            return balance;
        }
        public decimal GetAccountBalanceByCompleteDocument(
                                string accountNo,
                                DateTime date,
                                int? objectID,
                                string objectType,
                                int? currencyID,
                                int? bankID,
                                int? locationID,
                                int? branchID)
        {
            ACAccountsController objAccountsController = new ACAccountsController();
            ACAccountsInfo account = (ACAccountsInfo)objAccountsController.GetObjectByNo(accountNo);
            decimal balance = 0;
            decimal initBalance = 0;
            if (account != null)
            {
                string postingRule = account.ACAccountPostingRule;
                if (objectID > 0)
                {
                    account = objAccountsController.GetAccountInitialBalance(accountNo, objectID, objectType, currencyID, bankID, branchID, locationID);
                    initBalance += account.ACAccountInitialBalance;
                }
                //else if (branchID > 0)
                //{
                //    account = objAccountsController.GetAccountInitialBalance(accountNo, branchID, ObjectType.Branch.ToString(), currencyID, bankID, branchID, locationID);
                //    initBalance += account.ACAccountInitialBalance;
                //}
                //else if (locationID > 0)
                //{
                //    BRBranchsController objBranchsController = new BRBranchsController();
                //    List<BRBranchsInfo> branches = objBranchsController.GetBranchesByLocationID(locationID.Value);
                //    foreach (BRBranchsInfo branch in branches)
                //    {
                //        account = objAccountsController.GetAccountInitialBalance(accountNo, branch.BRBranchID, ObjectType.Branch.ToString(), currencyID, bankID, branchID, locationID);
                //        initBalance += account.ACAccountInitialBalance;
                //    }
                //}
                else
                {
                    account = objAccountsController.GetAccountInitialBalance(accountNo, objectID, objectType, currencyID, bankID, branchID, locationID);
                    initBalance += account.ACAccountInitialBalance;
                }
                //TNDLoc [ADD][08/08/2016][Receipt, Shipment chỉ lấy Complete],START
                //decimal debitAmount = GetAccountDebitAmount(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date);
                decimal debitAmount = GetAccountDebitAmountByCompleteDocument(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date);

                // decimal creditAmount = GetAccountCreditAmount(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date);                
                decimal creditAmount = GetAccountCreditAmountByCompleteDocument(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date);
                //TNDLoc [ADD][08/08/2016][Receipt, Shipment chỉ lấy Complete],END

                if (postingRule == AccountPostingRule.IncreasingByDebit.ToString())
                {
                    balance = initBalance + debitAmount - creditAmount;
                }
                else if (postingRule == AccountPostingRule.IncreasingByCredit.ToString())
                {
                    balance = initBalance + creditAmount - debitAmount;
                }
            }
            return balance;
        }

        public decimal GetAccountBalanceByCompleteDocumentAndCurrency(
                                string accountNo,
                                DateTime date,
                                int? objectID,
                                string objectType,
                                int? currencyID,
                                int? bankID,
                                int? locationID,
                                int? branchID)
        {
            ACAccountsController objAccountsController = new ACAccountsController();
            ACAccountsInfo account = (ACAccountsInfo)objAccountsController.GetObjectByNo(accountNo);
            decimal balance = 0;
            decimal initBalance = 0;
            if (account != null)
            {
                string postingRule = account.ACAccountPostingRule;
                if (objectID > 0)
                {
                    account = objAccountsController.GetAccountInitialBalanceByCurrenceID(accountNo, objectID, objectType, currencyID, bankID, branchID, locationID);
                    initBalance += account.ACAccountInitialBalanceByCurrency;
                }
                //else if (branchID > 0)
                //{
                //    account = objAccountsController.GetAccountInitialBalance(accountNo, branchID, ObjectType.Branch.ToString(), currencyID, bankID, branchID, locationID);
                //    initBalance += account.ACAccountInitialBalance;
                //}
                //else if (locationID > 0)
                //{
                //    BRBranchsController objBranchsController = new BRBranchsController();
                //    List<BRBranchsInfo> branches = objBranchsController.GetBranchesByLocationID(locationID.Value);
                //    foreach (BRBranchsInfo branch in branches)
                //    {
                //        account = objAccountsController.GetAccountInitialBalance(accountNo, branch.BRBranchID, ObjectType.Branch.ToString(), currencyID, bankID, branchID, locationID);
                //        initBalance += account.ACAccountInitialBalance;
                //    }
                //}
                else
                {
                    account = objAccountsController.GetAccountInitialBalanceByCurrenceID(accountNo, objectID, objectType, currencyID, bankID, branchID, locationID);
                    initBalance += account.ACAccountInitialBalanceByCurrency;
                }
                //TNDLoc [ADD][08/08/2016][Receipt, Shipment chỉ lấy Complete],START
                //decimal debitAmount = GetAccountDebitAmount(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date);
                decimal debitAmount = GetAccountDebitAmountByCompleteDocumentAndCurrency(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date);

                // decimal creditAmount = GetAccountCreditAmount(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date);                
                decimal creditAmount = GetAccountCreditAmountByCompleteDocumentAndCurrency(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date);
                //TNDLoc [ADD][08/08/2016][Receipt, Shipment chỉ lấy Complete],END

                if (postingRule == AccountPostingRule.IncreasingByDebit.ToString())
                {
                    balance = initBalance + debitAmount - creditAmount;
                }
                else if (postingRule == AccountPostingRule.IncreasingByCredit.ToString())
                {
                    balance = initBalance + creditAmount - debitAmount;
                }
            }
            return balance;
        }
        public decimal GetAccountBalance2(
                                string accountNo,
                                DateTime date,
                                int? objectID,
                                string objectType,
                                int? currencyID,
                                int? bankID,
                                int? locationID,
                                int? branchID)
        {
            ACAccountsController objAccountsController = new ACAccountsController();
            ACAccountsInfo account = (ACAccountsInfo)objAccountsController.GetObjectByNo(accountNo);
            decimal balance = 0;
            decimal initBalance = 0;
            if (account != null)
            {
                string postingRule = account.ACAccountPostingRule;
                if (objectID > 0)
                {
                    account = objAccountsController.GetAccountInitialBalance(accountNo, objectID, objectType, currencyID, bankID, branchID, locationID);
                    initBalance += account.ACAccountInitialBalanceByCurrency;
                }
                else if (branchID > 0)
                {
                    account = objAccountsController.GetAccountInitialBalance(accountNo, branchID, ObjectType.Branch.ToString(), currencyID, bankID, branchID, locationID);
                    initBalance += account.ACAccountInitialBalanceByCurrency;
                }
                else if (locationID > 0)
                {
                    BRBranchsController objBranchsController = new BRBranchsController();
                    List<BRBranchsInfo> branches = objBranchsController.GetBranchesByLocationID(locationID.Value);
                    foreach (BRBranchsInfo branch in branches)
                    {
                        account = objAccountsController.GetAccountInitialBalance(accountNo, branch.BRBranchID, ObjectType.Branch.ToString(), currencyID, bankID, branchID, locationID);
                        initBalance += account.ACAccountInitialBalanceByCurrency;
                    }
                }
                else
                {
                    account = objAccountsController.GetAccountInitialBalance(accountNo, objectID, objectType, currencyID, bankID, branchID, locationID);
                    initBalance += account.ACAccountInitialBalanceByCurrency;
                }

                decimal debitAmount = GetAccountDebitAmount2(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date);
                decimal creditAmount = GetAccountCreditAmount2(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date);
                if (postingRule == AccountPostingRule.IncreasingByDebit.ToString())
                {
                    balance = initBalance + debitAmount - creditAmount;
                }
                else if (postingRule == AccountPostingRule.IncreasingByCredit.ToString())
                {
                    balance = initBalance + creditAmount - debitAmount;
                }
            }
            return balance;
        }

        /// <summary>
        /// Get the balance of an account detailed by one or more criteria        
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="date">Date the result is calculated to</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <returns>Balance of the account</returns>
        public decimal GetAccountBalanceByBranchNoList(
                                string accountNo,
                                DateTime date,
                                int? objectID,
                                string objectType,
                                int? currencyID,
                                int? bankID,
                                string branchNos)
        {
            ACAccountsController objAccountsController = new ACAccountsController();
            ACAccountsInfo account = (ACAccountsInfo)objAccountsController.GetObjectByNo(accountNo);
            decimal balance = 0;
            decimal initBalance = 0;
            if (account != null)
            {
                string postingRule = account.ACAccountPostingRule;

                account = objAccountsController.GetAccountInitialBalanceBySomeCriteria(accountNo, objectID, objectType, currencyID, bankID, branchNos);
                initBalance += account.ACAccountInitialBalance;
                //if (objectID > 0)
                //{
                //    account = objAccountsController.GetAccountInitialBalanceBySomeCriteria(accountNo, objectID, objectType, currencyID, bankID, branchNos);
                //    initBalance += account.ACAccountInitialBalance;
                //}
                //else if (branchID > 0)
                //{
                //    account = objAccountsController.GetAccountInitialBalance(accountNo, branchID, ObjectType.Branch.ToString(), currencyID, bankID, branchID, locationID);
                //    initBalance += account.ACAccountInitialBalance;
                //}
                //else if (locationID > 0)
                //{
                //    BRBranchsController objBranchsController = new BRBranchsController();
                //    List<BRBranchsInfo> branches = objBranchsController.GetBranchesByLocationID(locationID.Value);
                //    foreach (BRBranchsInfo branch in branches)
                //    {
                //        account = objAccountsController.GetAccountInitialBalance(accountNo, branch.BRBranchID, ObjectType.Branch.ToString(), currencyID, bankID, branchID, locationID);
                //        initBalance += account.ACAccountInitialBalance;
                //    }
                //}
                //else
                //{
                //    account = objAccountsController.GetAccountInitialBalance(accountNo, objectID, objectType, currencyID, bankID, branchID, locationID);
                //    initBalance += account.ACAccountInitialBalance;
                //}

                decimal debitAmount = GetAccountDebitAmountBySomeCriteria(accountNo, objectID, objectType, currencyID, bankID, null, date, branchNos);
                decimal creditAmount = GetAccountCreditAmountBySomeCriteria(accountNo, objectID, objectType, currencyID, bankID, null, date, branchNos);
                if (postingRule == AccountPostingRule.IncreasingByDebit.ToString())
                {
                    balance = initBalance + debitAmount - creditAmount;
                }
                else if (postingRule == AccountPostingRule.IncreasingByCredit.ToString())
                {
                    balance = initBalance + creditAmount - debitAmount;
                }
            }
            return balance;
        }

        /// <summary>
        /// Get the balance of an account detailed by one or more criteria        
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="date">Date the result is calculated to</param>        
        /// <param name="currencyID">Currency id</param>        
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <returns>Balance of the account</returns>
        public decimal GetAccountBalance(string accountNo, DateTime date, int? currencyID, int? locationID, int? branchID)
        {
            return GetAccountBalance(accountNo, date, null, null, currencyID, null, locationID, branchID);
        }

        public decimal GetAccountBalanceByCompleteDocument(string accountNo, DateTime date, int? currencyID, int? locationID, int? branchID)
        {
            return GetAccountBalanceByCompleteDocument(accountNo, date, null, null, currencyID, null, locationID, branchID);
        }

        public decimal GetAccountBalanceByCompleteDocumentAndCurrency(string accountNo, DateTime date, int? currencyID, int? locationID, int? branchID)
        {
            return GetAccountBalanceByCompleteDocumentAndCurrency(accountNo, date, null, null, currencyID, null, locationID, branchID);
        }

        /// <summary>
        /// Get the balance of an account detailed by one or more criteria        
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// /// <param name="date">Date the result is calculated to</param>        
        /// <param name="currencyID">Currency id</param>        
        /// <returns>Balance of the account</returns>
        public decimal GetAccountBalance(string accountNo, DateTime date, int? currencyID)
        {
            return GetAccountBalance(accountNo, date, null, null, currencyID, null, null, null);
        }

        /// <summary>
        /// Get the balance of an account detailed by one or more criteria        
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// /// <param name="date">Date the result is calculated to</param>        
        /// <param name="currencyID">Currency id</param>        
        /// <param name="bankID">Bank id</param>
        /// <returns>Balance of the account</returns>
        public decimal GetAccountBalance(string accountNo, DateTime date, int? currencyID, int? bankID)
        {
            return GetAccountBalance(accountNo, date, null, null, currencyID, bankID, null, null);
        }

        /// <summary>
        /// Get the balance of an account detailed by one or more criteria        
        /// </summary>
        /// <param name="accountNo">Account no</param>        
        /// <param name="date">Date the result is calculated to</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <returns>Balance of the account</returns>
        public decimal GetAccountBalance(string accountNo, DateTime date, int? objectID, string objectType)
        {
            return GetAccountBalance(accountNo, date, objectID, objectType, null, null, null, null);
        }
        /// <summary>
        /// Get the balance of an account detailed by one or more criteria        
        /// </summary>
        /// <param name="accountNo">Account no</param>        
        /// <param name="date">Date the result is calculated to</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <returns>Balance of the account</returns>
        public decimal GetAccountBalance(string accountNo, DateTime date, int? objectID, string objectType, int? currencyID)
        {
            return GetAccountBalance(accountNo, date, objectID, objectType, currencyID, null, null, null);
        }

        /// <summary>
        /// Get the balance of an account detailed by one or more criteria        
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="date">Date the result is calculated to</param>
        /// <returns>Balance of the account</returns>
        public decimal GetAccountBalance(string accountNo, DateTime date)
        {
            return GetAccountBalance(accountNo, date, null, null, null, null, null, null);
        }

        /// <summary>
        /// Get the debit amount of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Debit amount</returns>

        public decimal GetAccountDebitAmount(
                                        string accountNo,
                                        int? objectID,
                                        string objectType,
                                        int? currencyID,
                                        int? bankID,
                                        int? locationID,
                                        int? branchID,
                                        DateTime? fromDate,
                                        DateTime? toDate)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountDebitAmount",
                                                                                accountNo,
                                                                                null,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                locationID,
                                                                                branchID,
                                                                                fromDate,
                                                                                toDate);
            return entry.ACDocumentEntryExchangeAmount;
        }

        public decimal GetAccountDebitAmountForRP042(
                                       string accountNo,
                                       int? objectID,
                                       string objectType,
                                       int? currencyID,
                                       int? bankID,
                                       int? locationID,
                                       int? branchID,
                                       DateTime? fromDate,
                                       DateTime? toDate)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountDebitAmountForRP042",
                                                                                accountNo,
                                                                                null,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                locationID,
                                                                                branchID,
                                                                                fromDate,
                                                                                toDate);
            return entry.ACDocumentEntryExchangeAmount;
        }

        public decimal GetAccountDebitAmountByCompleteDocument(
                                        string accountNo,
                                        int? objectID,
                                        string objectType,
                                        int? currencyID,
                                        int? bankID,
                                        int? locationID,
                                        int? branchID,
                                        DateTime? fromDate,
                                        DateTime? toDate)
        {
            // Chỉ lấy document chứng từ hoàn tất ( shipment, receipt )
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountDebitAmountByCompleteDocument",
                                                                                accountNo,
                                                                                null,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                locationID,
                                                                                branchID,
                                                                                fromDate,
                                                                                toDate);
            return entry.ACDocumentEntryExchangeAmount;
        }

        public decimal GetAccountDebitAmountByCompleteDocumentAndCurrency(
                                        string accountNo,
                                        int? objectID,
                                        string objectType,
                                        int? currencyID,
                                        int? bankID,
                                        int? locationID,
                                        int? branchID,
                                        DateTime? fromDate,
                                        DateTime? toDate)
        {
            // Chỉ lấy document chứng từ hoàn tất ( shipment, receipt )
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountDebitAmountByCompleteDocumentAndCurrency",
                                                                                accountNo,
                                                                                null,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                locationID,
                                                                                branchID,
                                                                                fromDate,
                                                                                toDate);
            return entry.ACDocumentEntryAmount;
        }


        public decimal GetAccountDebitAmount2(
                                        string accountNo,
                                        int? objectID,
                                        string objectType,
                                        int? currencyID,
                                        int? bankID,
                                        int? locationID,
                                        int? branchID,
                                        DateTime? fromDate,
                                        DateTime? toDate)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountDebitAmount",
                                                                                accountNo,
                                                                                null,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                locationID,
                                                                                branchID,
                                                                                fromDate,
                                                                                toDate);
            //return entry.ACDocumentEntryExchangeAmount;
            return entry.ACDocumentEntryAmount;
        }
        /// <summary>
        /// Get the debit amount of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Debit amount</returns>
        public decimal GetAccountDebitAmountBySomeCriteria(
                                        string accountNo,
                                        int? objectID,
                                        string objectType,
                                        int? currencyID,
                                        int? bankID,
                                        DateTime? fromDate,
                                        DateTime? toDate,
                                        string branchNos)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountDebitAmountBySomeCriteria",
                                                                                accountNo,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                fromDate,
                                                                                toDate,
                                                                                branchNos);
            return entry.ACDocumentEntryExchangeAmount;
        }

        /// <summary>
        /// Get the debit amount of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Debit amount</returns>
        public decimal GetAccountDebitAmountByObjectID(
                                        string accountNo,
                                        int objectID,
                                        string objectType,
                                        int? currencyID,
                                        int? bankID,
                                        DateTime? fromDate,
                                        DateTime? toDate,
                                        string branchNos)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountDebitAmountByObjectID",
                                                                                accountNo,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                fromDate,
                                                                                toDate,
                                                                                branchNos);
            return entry.ACDocumentEntryExchangeAmount;
        }


        /// <summary>
        /// Get the debit amount of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>        
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Debit amount</returns>
        public decimal GetAccountDebitAmount(string accountNo, int? objectID, string objectType, int? currencyID, DateTime? fromDate, DateTime? toDate)
        {
            return GetAccountDebitAmount(accountNo, objectID, objectType, currencyID, null, null, null, fromDate, toDate);
        }

        /// <summary>
        /// Get the debit amount of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>        
        /// <returns>Debit amount</returns>
        public decimal GetAccountDebitAmount(string accountNo, int? locationID, int? branchID, DateTime? fromDate, DateTime? toDate)
        {
            return GetAccountDebitAmount(accountNo, null, null, null, null, locationID, branchID, fromDate, toDate);
        }
        public decimal GetAccountDebitAmountByCompleteDocument(string accountNo, int? locationID, int? branchID, DateTime? fromDate, DateTime? toDate)
        {
            return GetAccountDebitAmountByCompleteDocument(accountNo, null, null, null, null, locationID, branchID, fromDate, toDate);
        }

        public decimal GetAccountDebitAmountByCompleteDocumentAndCurrency(string accountNo, int? locationID, int? branchID, DateTime? fromDate, DateTime? toDate)
        {
            return GetAccountDebitAmountByCompleteDocumentAndCurrency(accountNo, null, null, null, null, locationID, branchID, fromDate, toDate);
        }
        /// <summary>
        /// Get the debit amount of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Debit amount</returns>
        public decimal GetAccountDebitAmount(string accountNo, DateTime? fromDate, DateTime? toDate)
        {
            return GetAccountDebitAmount(accountNo, null, null, null, null, null, null, fromDate, toDate);
        }

        /// <summary>
        /// Get the debit amount of an account that has a specific contrary account
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="contraryAccountNo">Contrary account no</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Debit amount</returns>
        public decimal GetAccountDebitAmount(string accountNo, string contraryAccountNo, DateTime? fromDate, DateTime? toDate)
        {
            object amount = dal.GetSingleValue("ACDocumentEntrys_GetAccountDebitAmount", accountNo, contraryAccountNo, null, null, null, null, null, null, fromDate, toDate);
            return Convert.ToDecimal(amount);
        }

        public decimal GetAccountDebitExchangeAmount(string accountNo, string contraryAccountNo, DateTime? fromDate, DateTime? toDate)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountDebitAmount", accountNo, contraryAccountNo, null, null, null, null, null, null, fromDate, toDate);
            return entry.ACDocumentEntryExchangeAmount;
        }

        public decimal GetAccountDocumentEntryExchangeAmount(string accountNo, string contraryAccountNo, DateTime? fromDate, DateTime? toDate)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountDocumentEntryAmount", accountNo, contraryAccountNo, null, null, null, null, null, null, fromDate, toDate);
            return entry.ACDocumentEntryExchangeAmount;
        }

        /// <summary>
        /// Get the debit amount of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>        
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Debit amount</returns>
        public decimal GetAccountDebitAmount(string accountNo, int? objectID, string objectType, DateTime? fromDate, DateTime? toDate)
        {
            return GetAccountDebitAmount(accountNo, objectID, objectType, null, null, null, null, fromDate, toDate);
        }

        /// <summary>
        /// Get the debit amount of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="currencyID">Currency id</param>        
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Debit amount</returns>
        public decimal GetAccountDebitAmount(string accountNo, int? currencyID, DateTime? fromDate, DateTime? toDate)
        {
            return GetAccountDebitAmount(accountNo, null, null, currencyID, null, null, null, fromDate, toDate);
        }

        /// <summary>
        /// Get the credit amount of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>        
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Credit amount</returns>
        public decimal GetAccountCreditAmount(
                                        string accountNo,
                                        int? objectID,
                                        string objectType,
                                        int? currencyID,
                                        int? bankID,
                                        int? locationID,
                                        int? branchID,
                                        DateTime? fromDate,
                                        DateTime? toDate)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountCreditAmount",
                                                                                accountNo,
                                                                                null,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                locationID,
                                                                                branchID,
                                                                                fromDate,
                                                                                toDate);
            return entry.ACDocumentEntryExchangeAmount;
        }
        /// <summary>
        /// Get the credit amount of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>        
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Credit amount</returns>
        public decimal GetTransactionAccountAmount(
                                        string accountNo,
                                        int? objectID,
                                        string objectType,
                                        int? currencyID,
                                        int? bankID,
                                        int? locationID,
                                        int? branchID,
                                        DateTime? fromDate,
                                        DateTime? toDate)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACTransactions_GetTransactionAccountAmount",
                                                                                accountNo,
                                                                                null,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                locationID,
                                                                                branchID,
                                                                                fromDate,
                                                                                toDate);
            return entry.ACDocumentEntryExchangeAmount;
        }
        /// <summary>
        /// Get the credit amount of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>        
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Credit amount</returns>
        public List<ACDocumentEntrysInfo> GetProjectGroupTransactionAmount(
                                        string accountNo,
                                        int? objectID,
                                        string objectType,
                                        int? currencyID,
                                        int? bankID,
                                        int? locationID,
                                        int? branchID,
                                        DateTime? fromDate,
                                        DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ACTransactions_GetProjectGroupTransactionAmount",
                                                                                accountNo,
                                                                                null,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                locationID,
                                                                                branchID,
                                                                                fromDate,
                                                                                toDate);
            List<ACDocumentEntrysInfo> documentEntries = new List<ACDocumentEntrysInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACDocumentEntrysInfo objDocumentEntrysInfo = (ACDocumentEntrysInfo)GetObjectFromDataRow(row);
                    documentEntries.Add(objDocumentEntrysInfo);
                }
            }
            return documentEntries;
        }
        public decimal GetAccountCreditAmountForRP042(
                                       string accountNo,
                                       int? objectID,
                                       string objectType,
                                       int? currencyID,
                                       int? bankID,
                                       int? locationID,
                                       int? branchID,
                                       DateTime? fromDate,
                                       DateTime? toDate)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountCreditAmountForRP042",
                                                                                accountNo,
                                                                                null,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                locationID,
                                                                                branchID,
                                                                                fromDate,
                                                                                toDate);
            return entry.ACDocumentEntryExchangeAmount;
        }

        public decimal GetAccountCreditAmountByCompleteDocument(
                                        string accountNo,
                                        int? objectID,
                                        string objectType,
                                        int? currencyID,
                                        int? bankID,
                                        int? locationID,
                                        int? branchID,
                                        DateTime? fromDate,
                                        DateTime? toDate)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountCreditAmountByCompleteDocument",
                                                                                accountNo,
                                                                                null,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                locationID,
                                                                                branchID,
                                                                                fromDate,
                                                                                toDate);
            return entry.ACDocumentEntryExchangeAmount;
        }

        public decimal GetAccountCreditAmountByCompleteDocumentAndCurrency(
                                        string accountNo,
                                        int? objectID,
                                        string objectType,
                                        int? currencyID,
                                        int? bankID,
                                        int? locationID,
                                        int? branchID,
                                        DateTime? fromDate,
                                        DateTime? toDate)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountCreditAmountByCompleteDocumentAndCurrency",
                                                                                accountNo,
                                                                                null,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                locationID,
                                                                                branchID,
                                                                                fromDate,
                                                                                toDate);
            return entry.ACDocumentEntryAmount;
        }

        public decimal GetAccountCreditAmount2(
                                        string accountNo,
                                        int? objectID,
                                        string objectType,
                                        int? currencyID,
                                        int? bankID,
                                        int? locationID,
                                        int? branchID,
                                        DateTime? fromDate,
                                        DateTime? toDate)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountCreditAmount",
                                                                                accountNo,
                                                                                null,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                locationID,
                                                                                branchID,
                                                                                fromDate,
                                                                                toDate);
            //return entry.ACDocumentEntryExchangeAmount;
            return entry.ACDocumentEntryAmount;
        }
        /// <summary>
        /// Get the credit amount of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>        
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Credit amount</returns>
        public decimal GetAccountCreditAmountBySomeCriteria(
                                        string accountNo,
                                        int? objectID,
                                        string objectType,
                                        int? currencyID,
                                        int? bankID,
                                        DateTime? fromDate,
                                        DateTime? toDate,
                                        string branchNos)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountCreditAmountBySomeCriteria",
                                                                                accountNo,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                fromDate,
                                                                                toDate,
                                                                                branchNos);
            return entry.ACDocumentEntryExchangeAmount;
        }

        /// <summary>
        /// Get the credit amount of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>        
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Credit amount</returns>
        public decimal GetAccountCreditAmountByObjectID(
                                        string accountNo,
                                        int objectID,
                                        string objectType,
                                        int? currencyID,
                                        int? bankID,
                                        DateTime? fromDate,
                                        DateTime? toDate,
                                        string branchNos)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountCreditAmountByObjectID",
                                                                                accountNo,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                fromDate,
                                                                                toDate,
                                                                                branchNos);
            return entry.ACDocumentEntryExchangeAmount;
        }
        /// <summary>
        /// Get the credit amount of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>        
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>        
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Credit amount</returns>
        public decimal GetAccountCreditAmount(string accountNo, int? objectID, string objectType, int? currencyID, DateTime? fromDate, DateTime? toDate)
        {
            return GetAccountCreditAmount(accountNo, objectID, objectType, currencyID, null, null, null, fromDate, toDate);
        }

        /// <summary>
        /// Get the credit amount of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Credit amount</returns>
        public decimal GetAccountCreditAmount(string accountNo, int? locationID, int? branchID, DateTime? fromDate, DateTime? toDate)
        {
            return GetAccountCreditAmount(accountNo, null, null, null, null, locationID, branchID, fromDate, toDate);
        }

        public decimal GetAccountCreditAmountByCompleteDocument(string accountNo, int? locationID, int? branchID, DateTime? fromDate, DateTime? toDate)
        {
            return GetAccountCreditAmountByCompleteDocument(accountNo, null, null, null, null, locationID, branchID, fromDate, toDate);
        }

        public decimal GetAccountCreditAmountByCompleteDocumentAndCurrency(string accountNo, int? locationID, int? branchID, DateTime? fromDate, DateTime? toDate)
        {
            return GetAccountCreditAmountByCompleteDocumentAndCurrency(accountNo, null, null, null, null, locationID, branchID, fromDate, toDate);
        }

        /// <summary>
        /// Get the credit amount of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Credit amount</returns>
        public decimal GetAccountCreditAmount(string accountNo, DateTime? fromDate, DateTime? toDate)
        {
            return GetAccountCreditAmount(accountNo, null, null, null, null, null, null, fromDate, toDate);
        }
        /// <summary>
        /// Get the credit amount of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Credit amount</returns>
        public decimal GetTransactionAccountAmount(string accountNo, DateTime? fromDate, DateTime? toDate)
        {
            return GetTransactionAccountAmount(accountNo, null, null, null, null, null, null, fromDate, toDate);
        }

        /// <summary>
        /// Get the credit amount of an account that has a specific contrary account
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="contraryAccountNo">Contrary account no</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Credit amount</returns>
        public decimal GetAccountCreditAmount(string accountNo, string contraryAccountNo, DateTime? fromDate, DateTime? toDate)
        {
            object amount = dal.GetSingleValue("ACDocumentEntrys_GetAccountCreditAmount", accountNo, contraryAccountNo, null, null, null, null, null, null, fromDate, toDate);
            return Convert.ToDecimal(amount);
        }


        public decimal GetAccountCreditExchangeAmount(string accountNo, string contraryAccountNo, DateTime? fromDate, DateTime? toDate)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountCreditAmount", accountNo, contraryAccountNo, null, null, null, null, null, null, fromDate, toDate);
            return entry.ACDocumentEntryExchangeAmount;
        }
        /// <summary>
        /// Get the credit amount of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Credit amount</returns>
        public decimal GetAccountCreditAmount(string accountNo, int? objectID, string objectType, DateTime? fromDate, DateTime? toDate)
        {
            return GetAccountCreditAmount(accountNo, objectID, objectType, null, null, null, null, fromDate, toDate);
        }

        /// <summary>
        /// Get the credit amount of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Credit amount</returns>
        public decimal GetAccountCreditAmount(string accountNo, int? currencyID, DateTime? fromDate, DateTime? toDate)
        {
            return GetAccountCreditAmount(accountNo, null, null, currencyID, null, null, null, fromDate, toDate);
        }
        #endregion

        #region Account balance by currency
        /// <summary>
        /// Get the balance by currency of an account detailed by one or more criteria        
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="date">Date the result is calculated to</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>
        /// <returns>Balance of the account</returns>
        public decimal GetAccountBalanceByCurrency(
                                            string accountNo,
                                            DateTime date,
                                            int? objectID,
                                            string objectType,
                                            int? currencyID,
                                            int? bankID,
                                            int? locationID,
                                            int? branchID)
        {
            ACAccountsController objAccountsController = new ACAccountsController();
            ACAccountsInfo account = (ACAccountsInfo)objAccountsController.GetObjectByNo(accountNo);
            decimal balance = 0;
            decimal initBalance = 0;
            if (account != null)
            {
                string postingRule = account.ACAccountPostingRule;
                if (objectID > 0)
                {
                    account = objAccountsController.GetAccountInitialBalance(accountNo, objectID, objectType, currencyID, bankID, branchID, locationID);
                    initBalance += account.ACAccountInitialBalanceByCurrency;
                }
                //else if (branchID > 0)
                //{
                //    account = objAccountsController.GetAccountInitialBalance(accountNo, branchID, ObjectType.Branch.ToString(), currencyID, bankID, branchID, locationID);
                //    initBalance += account.ACAccountInitialBalanceByCurrency;
                //}
                //else if (locationID > 0)
                //{
                //    BRBranchsController objBranchsController = new BRBranchsController();
                //    List<BRBranchsInfo> branches = objBranchsController.GetBranchesByLocationID(locationID.Value);
                //    foreach (BRBranchsInfo branch in branches)
                //    {
                //        account = objAccountsController.GetAccountInitialBalance(accountNo, branch.BRBranchID, ObjectType.Branch.ToString(), currencyID, bankID, branchID, locationID);
                //        initBalance += account.ACAccountInitialBalanceByCurrency;
                //    }
                //}
                else
                {
                    account = objAccountsController.GetAccountInitialBalance(accountNo, objectID, objectType, currencyID, bankID, branchID, locationID);
                    initBalance += account.ACAccountInitialBalanceByCurrency;
                }

                decimal debitAmount = GetAccountDebitAmountByCurrency(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date);
                decimal creditAmount = GetAccountCreditAmountByCurrency(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date);
                if (postingRule == AccountPostingRule.IncreasingByDebit.ToString())
                {
                    balance = initBalance + debitAmount - creditAmount;
                }
                else if (postingRule == AccountPostingRule.IncreasingByCredit.ToString())
                {
                    balance = initBalance + creditAmount - debitAmount;
                }
            }
            return balance;
        }

        public decimal GetAccountBalanceByCurrencyAndExchangeRate(
                                            string accountNo,
                                            DateTime date,
                                            int? objectID,
                                            string objectType,
                                            int? currencyID,
                                            int? bankID,
                                            int? locationID,
                                            int? branchID)
        {
            ACAccountsController objAccountsController = new ACAccountsController();
            ACAccountsInfo account = (ACAccountsInfo)objAccountsController.GetObjectByNo(accountNo);
            decimal balance = 0;
            decimal initBalance = 0;
            if (account != null)
            {
                string postingRule = account.ACAccountPostingRule;
                if (objectID > 0)
                {
                    account = objAccountsController.GetAccountInitialBalanceByCurrenceID(accountNo, objectID, objectType, currencyID, bankID, branchID, locationID);
                    initBalance += account.ACAccountInitialBalanceByCurrency;
                }
                else
                {
                    account = objAccountsController.GetAccountInitialBalanceByCurrenceID(accountNo, objectID, objectType, currencyID, bankID, branchID, locationID);
                    initBalance += account.ACAccountInitialBalanceByCurrency;
                }

                decimal debitAmount = GetAccountDebitAmountByCurrencyAndExchangeRate(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date);
                decimal creditAmount = GetAccountCreditAmountByCurrencyAndExchangeRate(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date);
                if (postingRule == AccountPostingRule.IncreasingByDebit.ToString())
                {
                    balance = initBalance + debitAmount - creditAmount;
                }
                else if (postingRule == AccountPostingRule.IncreasingByCredit.ToString())
                {
                    balance = initBalance + creditAmount - debitAmount;
                }
            }
            return balance;
        }

        /// <summary>
        /// Get the balance by currency of an account detailed by one or more criteria        
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="date">Date the result is calculated to</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>
        /// <returns>Balance of the account</returns>
        public decimal GetAccountExchangeBalanceByCurrency(
                                            string accountNo,
                                            DateTime date,
                                            int? objectID,
                                            string objectType,
                                            int? currencyID,
                                            int? bankID,
                                            int? locationID,
                                            int? branchID)
        {
            ACAccountsController objAccountsController = new ACAccountsController();
            ACAccountsInfo account = (ACAccountsInfo)objAccountsController.GetObjectByNo(accountNo);
            decimal balance = 0;
            decimal initBalance = 0;
            if (account != null)
            {
                string postingRule = account.ACAccountPostingRule;
                if (objectID > 0)
                {
                    account = objAccountsController.GetAccountInitialBalance(accountNo, objectID, objectType, currencyID, bankID, branchID, locationID);
                    initBalance += account.ACAccountInitialBalance;
                }
                else if (branchID > 0)
                {
                    account = objAccountsController.GetAccountInitialBalance(accountNo, branchID, ObjectType.Branch.ToString(), currencyID, bankID, branchID, locationID);
                    initBalance += account.ACAccountInitialBalance;
                }
                else if (locationID > 0)
                {
                    BRBranchsController objBranchsController = new BRBranchsController();
                    List<BRBranchsInfo> branches = objBranchsController.GetBranchesByLocationID(locationID.Value);
                    foreach (BRBranchsInfo branch in branches)
                    {
                        account = objAccountsController.GetAccountInitialBalance(accountNo, branch.BRBranchID, ObjectType.Branch.ToString(), currencyID, bankID, branchID, locationID);
                        initBalance += account.ACAccountInitialBalance;
                    }
                }
                else
                {
                    account = objAccountsController.GetAccountInitialBalance(accountNo, objectID, objectType, currencyID, bankID, branchID, locationID);
                    initBalance += account.ACAccountInitialBalance;
                }

                decimal debitAmount = GetAccountDebitExchangeAmountByCurrency(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date);
                decimal creditAmount = GetAccountCreditExchangeAmountByCurrency(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date);
                if (postingRule == AccountPostingRule.IncreasingByDebit.ToString())
                {
                    balance = initBalance + debitAmount - creditAmount;
                }
                else if (postingRule == AccountPostingRule.IncreasingByCredit.ToString())
                {
                    balance = initBalance + creditAmount - debitAmount;
                }
            }
            return balance;
        }

        /// <summary>
        /// Get the balance by currency of an account detailed by one or more criteria   
        /// </summary>
        /// <param name="accountNo">Account no</param>        
        /// <param name="date">Date the result is calculated to</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <returns>Balance of the account</returns>
        public decimal GetAccountBalanceByCurrency(string accountNo, DateTime date, int? objectID, string objectType, int? currencyID)
        {
            return GetAccountBalanceByCurrency(accountNo, date, objectID, objectType, currencyID, null, null, null);
        }


        /// <summary>
        /// Get the balance by currency of an account detailed by one or more criteria        
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="date">Date the result is calculated to</param>        
        /// <param name="currencyID">Currency id</param>        
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <returns>Balance of the account</returns>
        public decimal GetAccountBalanceByCurrency(string accountNo, DateTime date, int? currencyID, int? locationID, int? branchID)
        {
            return GetAccountBalanceByCurrency(accountNo, date, null, null, currencyID, null, locationID, branchID);
        }

        /// <summary>
        /// Get the balance by currency of an account detailed by one or more criteria        
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="date">Date the result is calculated to</param>        
        /// <param name="currencyID">Currency id</param>        
        /// <returns>Balance of the account</returns>
        public decimal GetAccountBalanceByCurrency(string accountNo, DateTime date, int? currencyID)
        {
            return GetAccountBalanceByCurrency(accountNo, date, null, null, currencyID, null, null, null);
        }

        /// <summary>
        /// Get the balance by currency of an account detailed by one or more criteria        
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="date">Date the result is calculated to</param>        
        /// <param name="currencyID">Currency id</param>        
        /// <param name="bankID">Bank id</param>
        /// <returns>Balance of the account</returns>
        public decimal GetAccountBalanceByCurrency(string accountNo, DateTime date, int? currencyID, int? bankID)
        {
            return GetAccountBalanceByCurrency(accountNo, date, null, null, currencyID, bankID, null, null);
        }

        /// <summary>
        /// Get the debit amount by currency of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Debit amount</returns>
        public decimal GetAccountDebitAmountByCurrency(
                                                string accountNo,
                                                int? objectID,
                                                string objectType,
                                                int? currencyID,
                                                int? bankID,
                                                int? locationID,
                                                int? branchID,
                                                DateTime? fromDate,
                                                DateTime? toDate)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountDebitAmount",
                                                                                accountNo,
                                                                                null,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                locationID,
                                                                                branchID,
                                                                                fromDate,
                                                                                toDate);
            return entry.ACDocumentEntryAmount;
        }

        public decimal GetAccountDebitAmountByCurrencyAndExchangeRate(
                                                string accountNo,
                                                int? objectID,
                                                string objectType,
                                                int? currencyID,
                                                int? bankID,
                                                int? locationID,
                                                int? branchID,
                                                DateTime? fromDate,
                                                DateTime? toDate)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountDebitAmountByCurrencyAndExchangeRate",
                                                                                accountNo,
                                                                                null,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                locationID,
                                                                                branchID,
                                                                                fromDate,
                                                                                toDate);
            return entry.ACDocumentEntryAmount;
        }
        /// <summary>
        /// Get the debit amount by currency of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Debit amount</returns>
        public decimal GetAccountDebitExchangeAmountByCurrency(
                                                string accountNo,
                                                int? objectID,
                                                string objectType,
                                                int? currencyID,
                                                int? bankID,
                                                int? locationID,
                                                int? branchID,
                                                DateTime? fromDate,
                                                DateTime? toDate)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountDebitAmount",
                                                                                accountNo,
                                                                                null,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                locationID,
                                                                                branchID,
                                                                                fromDate,
                                                                                toDate);
            return entry.ACDocumentEntryExchangeAmount;
        }

        /// <summary>
        /// Get the debit amount by currency of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>        
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Debit amount</returns>
        public decimal GetAccountDebitAmountByCurrency(string accountNo, int? objectID, string objectType, int? currencyID, DateTime? fromDate, DateTime? toDate)
        {
            return GetAccountDebitAmountByCurrency(accountNo, objectID, objectType, currencyID, null, null, null, fromDate, toDate);
        }

        /// <summary>
        /// Get the credit amount by currency of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>        
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Credit amount</returns>
        public decimal GetAccountCreditAmountByCurrency(
                                                string accountNo,
                                                int? objectID,
                                                string objectType,
                                                int? currencyID,
                                                int? bankID,
                                                int? locationID,
                                                int? branchID,
                                                DateTime? fromDate,
                                                DateTime? toDate)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountCreditAmount",
                                                                                accountNo,
                                                                                null,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                locationID,
                                                                                branchID,
                                                                                fromDate,
                                                                                toDate);
            return entry.ACDocumentEntryAmount;
        }

        public decimal GetAccountCreditAmountByCurrencyAndExchangeRate(
                                               string accountNo,
                                               int? objectID,
                                               string objectType,
                                               int? currencyID,
                                               int? bankID,
                                               int? locationID,
                                               int? branchID,
                                               DateTime? fromDate,
                                               DateTime? toDate)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountCreditAmountByCurrencyAndExchangeRate",
                                                                                accountNo,
                                                                                null,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                locationID,
                                                                                branchID,
                                                                                fromDate,
                                                                                toDate);
            return entry.ACDocumentEntryAmount;
        }

        /// <summary>
        /// Get the credit amount by currency of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>        
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Credit amount</returns>
        public decimal GetAccountCreditExchangeAmountByCurrency(
                                                string accountNo,
                                                int? objectID,
                                                string objectType,
                                                int? currencyID,
                                                int? bankID,
                                                int? locationID,
                                                int? branchID,
                                                DateTime? fromDate,
                                                DateTime? toDate)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountCreditAmount",
                                                                                accountNo,
                                                                                null,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                locationID,
                                                                                branchID,
                                                                                fromDate,
                                                                                toDate);
            return entry.ACDocumentEntryExchangeAmount;
        }

        /// <summary>
        /// Get the credit amount by currency of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>        
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>        
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Credit amount</returns>
        public decimal GetAccountCreditAmountByCurrency(string accountNo, int? objectID, string objectType, int? currencyID, DateTime? fromDate, DateTime? toDate)
        {
            return GetAccountCreditAmountByCurrency(accountNo, objectID, objectType, currencyID, null, null, null, fromDate, toDate);
        }
        #endregion

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ACDocumentEntrysInfo> documentEntries = new List<ACDocumentEntrysInfo>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACDocumentEntrysInfo objDocumentEntrysInfo = (ACDocumentEntrysInfo)GetObjectFromDataRow(row);
                    if (!string.IsNullOrEmpty(objDocumentEntrysInfo.MonthYearString))
                        objDocumentEntrysInfo.MonthYear = DateTime.Parse(objDocumentEntrysInfo.MonthYearString);
                    documentEntries.Add(objDocumentEntrysInfo);
                }
            }
            ds.Dispose();
            return documentEntries;
        }

        /// <summary>
        /// Get entries that relate to owing accounts by date
        /// </summary>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns>List of entries</returns>
        public List<ACDocumentEntrysInfo> GetOwingEntriesByDate(DateTime? fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetOwingEntriesByDate", fromDate, toDate);
            List<ACDocumentEntrysInfo> entries = (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
            ACAccountsController objAccountsController = new ACAccountsController();
            List<ACAccountsInfo> payableAccounts = objAccountsController.GetPayableAccounts();
            List<ACAccountsInfo> receivableAccounts = objAccountsController.GetReceivableAccounts();
            foreach (ACDocumentEntrysInfo entry in entries)
            {
                if (payableAccounts.Exists(a => a.ACAccountNo == entry.ACDocumentDebitAccount) ||
                    receivableAccounts.Exists(a => a.ACAccountNo == entry.ACDocumentDebitAccount))
                {
                    entry.OwingByDebit = true;
                }
                if (payableAccounts.Exists(a => a.ACAccountNo == entry.ACDocumentCreditAccount) ||
                    receivableAccounts.Exists(a => a.ACAccountNo == entry.ACDocumentCreditAccount))
                {
                    entry.OwingByCredit = true;
                }
            }
            return entries;
        }

        /// <summary>
        /// Get entries that relate to owing accounts by date and currency id
        /// </summary>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="currencyID"></param>
        /// <returns></returns>
        public List<ACDocumentEntrysInfo> GetOwingEntriesByDateAndCurrencyID(DateTime? fromDate, DateTime toDate, int currencyID)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetOwingEntriesByDateAndCurrencyID", fromDate, toDate, currencyID);
            List<ACDocumentEntrysInfo> entries = (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
            ACAccountsController objAccountsController = new ACAccountsController();
            List<ACAccountsInfo> payableAccounts = objAccountsController.GetPayableAccounts();
            List<ACAccountsInfo> receivableAccounts = objAccountsController.GetReceivableAccounts();
            foreach (ACDocumentEntrysInfo entry in entries)
            {
                if (payableAccounts.Exists(a => a.ACAccountNo == entry.ACDocumentDebitAccount) ||
                    receivableAccounts.Exists(a => a.ACAccountNo == entry.ACDocumentDebitAccount))
                {
                    entry.OwingByDebit = true;
                }
                if (payableAccounts.Exists(a => a.ACAccountNo == entry.ACDocumentCreditAccount) ||
                    receivableAccounts.Exists(a => a.ACAccountNo == entry.ACDocumentCreditAccount))
                {
                    entry.OwingByCredit = true;
                }
            }
            return entries;
        }

        /// <summary>
        /// Get entries that relate to owing accounts by date and currency id
        /// </summary>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="currencyID"></param>
        /// <returns></returns>
        public List<ACDocumentEntrysInfo> GetOwingEntriesByObjectIDAndDateAndCurrencyID(int objectID, DateTime? fromDate, DateTime toDate, int currencyID)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetOwingEntriesByObjectIDAndDateAndCurrencyID", objectID, fromDate, toDate, currencyID);
            List<ACDocumentEntrysInfo> entries = (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
            ACAccountsController objAccountsController = new ACAccountsController();
            List<ACAccountsInfo> payableAccounts = objAccountsController.GetPayableAccounts();
            List<ACAccountsInfo> receivableAccounts = objAccountsController.GetReceivableAccounts();
            foreach (ACDocumentEntrysInfo entry in entries)
            {
                if (payableAccounts.Exists(a => a.ACAccountNo == entry.ACDocumentDebitAccount) ||
                    receivableAccounts.Exists(a => a.ACAccountNo == entry.ACDocumentDebitAccount))
                {
                    entry.OwingByDebit = true;
                }
                if (payableAccounts.Exists(a => a.ACAccountNo == entry.ACDocumentCreditAccount) ||
                    receivableAccounts.Exists(a => a.ACAccountNo == entry.ACDocumentCreditAccount))
                {
                    entry.OwingByCredit = true;
                }
            }
            return entries;
        }

        /// <summary>
        /// Get entries relating to an account by some criteria
        /// </summary>
        /// <param name="accountID">Account id</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns>List of entries</returns>
        public List<ACDocumentEntrysInfo> GetEntriesByAccountID(
                                                        int accountID,
                                                        int? objectID,
                                                        string objectType,
                                                        int? currencyID,
                                                        int? bankID,
                                                        int? locationID,
                                                        int? branchID,
                                                        DateTime? fromDate,
                                                        DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetEntriesByAccountID", accountID, objectID, objectType, currencyID, bankID, locationID, branchID, fromDate, toDate);


            //return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);     
            List<ACDocumentEntrysInfo> Entrys = new List<ACDocumentEntrysInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACDocumentEntrysInfo objDocumentEntrysInfo = (ACDocumentEntrysInfo)GetObjectFromDataRow(row);
                    //objDocumentEntrysInfo.ACObjectNo = GetObjectNoByIDAndType(objDocumentEntrysInfo.FK_ACObjectID, objDocumentEntrysInfo.ACObjectType);
                    Entrys.Add(objDocumentEntrysInfo);
                }
            }
            return Entrys;
        }
        public List<ACDocumentEntrysInfo> GetEntriesByAccountIDByCompleteDocument(
                                                        int accountID,
                                                        int? objectID,
                                                        string objectType,
                                                        int? currencyID,
                                                        int? bankID,
                                                        int? locationID,
                                                        int? branchID,
                                                        DateTime? fromDate,
                                                        DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetEntriesByAccountIDByCompleteDocument", accountID, objectID, objectType, currencyID, bankID, locationID, branchID, fromDate, toDate);


            //return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);     
            List<ACDocumentEntrysInfo> Entrys = new List<ACDocumentEntrysInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACDocumentEntrysInfo objDocumentEntrysInfo = (ACDocumentEntrysInfo)GetObjectFromDataRow(row);
                    //objDocumentEntrysInfo.ACObjectNo = GetObjectNoByIDAndType(objDocumentEntrysInfo.FK_ACObjectID, objDocumentEntrysInfo.ACObjectType);
                    Entrys.Add(objDocumentEntrysInfo);
                }
            }
            return Entrys;
        }

        public string GetObjectNoByIDAndType(int ObjectID, string ObjectType)
        {
            string no = string.Empty;
            object temp = dal.GetSingleValue("ACObjects_GetObjectNoByIDAndTypeSP", ObjectID, ObjectType);

            no = temp.ToString();
            //no = ds.Tables[0].Rows[0].ItemArray[0].ToString();
            return no;
        }


        /// <summary>
        /// Get entries relating to an account by some criteria
        /// </summary>
        /// <param name="accountID">Account id</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>                
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns>List of entries</returns>
        public List<ACDocumentEntrysInfo> GetEntriesByAccountID(int accountID, int? objectID, string objectType, int? currencyID, DateTime? fromDate, DateTime? toDate)
        {
            return GetEntriesByAccountID(accountID, objectID, objectType, currencyID, null, null, null, fromDate, toDate);
        }

        /// <summary>
        /// Get entries relating to an account by some criteria
        /// </summary>
        /// <param name="accountID">Account id</param>
        /// <param name="currencyID">Currency id</param>                
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns>List of entries</returns>
        public List<ACDocumentEntrysInfo> GetEntriesByAccountID(int accountID, int? currencyID, int? locationID, int? branchID, DateTime? fromDate, DateTime? toDate)
        {
            return GetEntriesByAccountID(accountID, null, null, currencyID, null, locationID, branchID, fromDate, toDate);
        }

        public List<ACDocumentEntrysInfo> GetEntriesByAccountIDByCompleteDocument(int accountID, int? currencyID, int? locationID, int? branchID, DateTime? fromDate, DateTime? toDate)
        {
            return GetEntriesByAccountIDByCompleteDocument(accountID, null, null, currencyID, null, locationID, branchID, fromDate, toDate);
        }


        /// <summary>
        /// Get entries relating to an account by some criteria
        /// </summary>
        /// <param name="accountID">Account id</param>
        /// <param name="currencyID">Currency id</param>        
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns>List of entries</returns>
        public List<ACDocumentEntrysInfo> GetEntriesByAccountID(int accountID, int? currencyID, DateTime? fromDate, DateTime? toDate)
        {
            return GetEntriesByAccountID(accountID, null, null, currencyID, null, null, null, fromDate, toDate);
        }

        /// <summary>
        /// Get entries relating to an account by some criteria
        /// </summary>
        /// <param name="accountID">Account id</param>
        /// <param name="currencyID">Currency id</param>        
        /// <param name="bankID">Bank id</param>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns>List of entries</returns>
        public List<ACDocumentEntrysInfo> GetEntriesByAccountID(int accountID, int? currencyID, int? bankID, DateTime? fromDate, DateTime? toDate)
        {
            return GetEntriesByAccountID(accountID, null, null, currencyID, bankID, null, null, fromDate, toDate);
        }

        /// <summary>
        /// Get entries relating to an account by some criteria
        /// </summary>
        /// <param name="accountID">Account id</param>        
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns></returns>
        public List<ACDocumentEntrysInfo> GetEntriesByAccountID(int accountID, DateTime? fromDate, DateTime? toDate)
        {
            return GetEntriesByAccountID(accountID, null, null, null, null, null, null, fromDate, toDate);
        }

        /// <summary>
        /// Get depreciation entries relating to an asset
        /// </summary>
        /// <param name="assetID">Asset id</param>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns>List of entries</returns>
        public List<ACDocumentEntrysInfo> GetDepreciationEntriesByAssetID(int assetID, DateTime? fromDate, DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDepreciationEntriesByAssetID", assetID, fromDate, toDate);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get entries for allocating cost of a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <returns>List of entries</returns>
        public List<ACDocumentEntrysInfo> GetEntriesForAllocatingCost(int branchID)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetEntriesForAllocatingCost", branchID);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get the debit amount of an account relating to a branch
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Debit amount</returns>
        public decimal GetAccountDebitAmountByBranch(string accountNo, int branchID, DateTime fromDate, DateTime toDate)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountDebitAmountByBranch",
                                                                                accountNo,
                                                                                branchID,
                                                                                fromDate,
                                                                                toDate);
            return entry.ACDocumentEntryExchangeAmount;
        }

        /// <summary>
        /// Get the credit amount of an account relating to a branch
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Credit amount</returns>
        public decimal GetAccountCreditAmountByBranch(string accountNo, int branchID, DateTime fromDate, DateTime toDate)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountCreditAmountByBranch",
                                                                                accountNo,
                                                                                branchID,
                                                                                fromDate,
                                                                                toDate);
            return entry.ACDocumentEntryExchangeAmount;
        }

        /// <summary>
        /// Get the balance by currency of an account detailed by one or more criteria        
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="date">Date the result is calculated to</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>
        /// <returns>Balance of the account and ref value of base currency</returns>
        public decimal GetAccountBalanceByCurrency(
                                            string accountNo,
                                            DateTime date,
                                            int? objectID,
                                            string objectType,
                                            int? currencyID,
                                            int? bankID,
                                            int? locationID,
                                            int? branchID,
                                            ref decimal baseBalance)
        {
            ACAccountsController objAccountsController = new ACAccountsController();
            ACAccountsInfo account = (ACAccountsInfo)objAccountsController.GetObjectByNo(accountNo);
            decimal balance = 0;
            decimal initBalance = 0;
            //decimal baseBalance = 0;
            decimal baseInitBalance = 0;
            if (account != null)
            {
                string postingRule = account.ACAccountPostingRule;
                if (objectID > 0)
                {
                    account = objAccountsController.GetAccountInitialBalance(accountNo, objectID, objectType, currencyID, bankID, branchID, locationID);
                    initBalance += account.ACAccountInitialBalanceByCurrency;
                    baseInitBalance += account.ACAccountInitialBalance;
                }
                else if (branchID > 0)
                {
                    account = objAccountsController.GetAccountInitialBalance(accountNo, branchID, ObjectType.Branch.ToString(), currencyID, bankID, branchID, locationID);
                    initBalance += account.ACAccountInitialBalanceByCurrency;
                    baseInitBalance += account.ACAccountInitialBalance;
                }
                else if (locationID > 0)
                {
                    BRBranchsController objBranchsController = new BRBranchsController();
                    List<BRBranchsInfo> branches = objBranchsController.GetBranchesByLocationID(locationID.Value);
                    foreach (BRBranchsInfo branch in branches)
                    {
                        account = objAccountsController.GetAccountInitialBalance(accountNo, branch.BRBranchID, ObjectType.Branch.ToString(), currencyID, bankID, branchID, locationID);
                        initBalance += account.ACAccountInitialBalanceByCurrency;
                        baseInitBalance += account.ACAccountInitialBalance;
                    }
                }
                else
                {
                    account = objAccountsController.GetAccountInitialBalance(accountNo, objectID, objectType, currencyID, bankID, branchID, locationID);
                    initBalance += account.ACAccountInitialBalanceByCurrency;
                    baseInitBalance += account.ACAccountInitialBalance;

                }

                //decimal debitAmount = GetAccountDebitAmountByCurrency(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date, ref baseDebitAmount);
                //decimal creditAmount = GetAccountCreditAmountByCurrency(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date);

                //decimal baseDebitAmount = GetAccountDebitAmountByCurrency(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date);
                //decimal baseCreditAmount = GetAccountCreditAmountByCurrency(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date);
                //Begin DaoLC 21/12/2013
                decimal baseDebitAmount = 0;
                decimal baseCreditAmount = 0;
                decimal debitAmount = GetAccountDebitAmountByCurrency(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date, ref baseDebitAmount);
                decimal creditAmount = GetAccountCreditAmountByCurrency(accountNo, objectID, objectType, currencyID, bankID, locationID, branchID, null, date, ref baseCreditAmount);
                //End DaoLC 21/12/2013
                if (postingRule == AccountPostingRule.IncreasingByDebit.ToString())
                {
                    balance = initBalance + debitAmount - creditAmount;
                    //NUThao [EDIT] [10/16/2014] [DB centre] [Report Permission], START
                    //baseBalance = baseInitBalance + baseDebitAmount - baseCreditAmount;
                    baseBalance += baseInitBalance + baseDebitAmount - baseCreditAmount;
                    //NUThao [EDIT] [10/16/2014] [DB centre] [Report Permission], RND
                }
                else if (postingRule == AccountPostingRule.IncreasingByCredit.ToString())
                {
                    balance = initBalance + creditAmount - debitAmount;
                    //NUThao [EDIT] [10/16/2014] [DB centre] [Report Permission], START
                    //baseBalance = baseInitBalance + baseCreditAmount - baseDebitAmount;
                    baseBalance += baseInitBalance + baseCreditAmount - baseDebitAmount;
                    //NUThao [EDIT] [10/16/2014] [DB centre] [Report Permission], END
                }
            }
            return balance;
        }
        /// <summary>
        /// Get the debit amount by currency of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Debit amount and ref base debit amount</returns>
        public decimal GetAccountDebitAmountByCurrency(
                                                string accountNo,
                                                int? objectID,
                                                string objectType,
                                                int? currencyID,
                                                int? bankID,
                                                int? locationID,
                                                int? branchID,
                                                DateTime? fromDate,
                                                DateTime? toDate,
                                                ref decimal baseDebitAmount)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountDebitAmount",
                                                                                accountNo,
                                                                                null,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                locationID,
                                                                                branchID,
                                                                                fromDate,
                                                                                toDate);
            baseDebitAmount = entry.ACDocumentEntryExchangeAmount;
            return entry.ACDocumentEntryAmount;
        }
        /// <summary>
        /// Get the credit amount by currency of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>        
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Credit amount</returns>
        public decimal GetAccountCreditAmountByCurrency(
                                                string accountNo,
                                                int? objectID,
                                                string objectType,
                                                int? currencyID,
                                                int? bankID,
                                                int? locationID,
                                                int? branchID,
                                                DateTime? fromDate,
                                                DateTime? toDate, ref decimal baseAccountCreditAmount)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountCreditAmount",
                                                                                accountNo,
                                                                                null,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                locationID,
                                                                                branchID,
                                                                                fromDate,
                                                                                toDate);
            baseAccountCreditAmount = entry.ACDocumentEntryExchangeAmount;
            return entry.ACDocumentEntryAmount;
        }

        /// <summary>
        /// Get DocumentEntry List For General Segment Report
        /// </summary>
        /// <param name="segmentID">Segment ID</param>
        /// <param name="accountNo">Account No</param>
        /// <param name="objectID">Object ID</param>
        /// <param name="currencyID">Currency ID</param>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <returns>DocumentEntry List</returns>
        //NUThao [EDIT] [10/16/2014] [DB centre] [Report Permission], START
        //public List<ACDocumentEntrysInfo> GetDocumentEntryForGeneralSegmentReport(int segmentID, string accountNo, int? objectID, int? currencyID, 
        //                                                                               DateTime? fromDate, DateTime? toDate)
        //{
        //    DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDocumentEntryForGeneralSegmentReport", segmentID, accountNo, objectID, currencyID, fromDate, toDate);
        public List<ACDocumentEntrysInfo> GetDocumentEntryForGeneralSegmentReport(int segmentID, string accountNo, int? objectID, int? currencyID,
                                                                                       int branchID, DateTime? fromDate, DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDocumentEntryForGeneralSegmentReport", segmentID, accountNo, objectID, currencyID, branchID, fromDate, toDate);
            //NUThao [EDIT] [10/16/2014] [DB centre] [Report Permission], END
            List<ACDocumentEntrysInfo> documents = new List<ACDocumentEntrysInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACDocumentEntrysInfo objDocumentEntrysInfo = (ACDocumentEntrysInfo)dal.GetObjectFromDataRow(row);
                    documents.Add(objDocumentEntrysInfo);
                }
            }

            return documents;
        }
        /// <summary>
        /// Get depreciation entries relating to an Id
        /// </summary>
        /// <param name="assetID">ICShipmentItem ID </param>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns>List of entries</returns>
        public List<ACDocumentEntrysInfo> GetDepreciationEntriesByShipmentItemID(int shipmentItemID, DateTime? fromDate, DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDepreciationEntriesByShipmentItemID", shipmentItemID, fromDate, toDate);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get the credit amount by currency of an account by some criteria
        /// </summary>
        /// <param name="accountNo">Account no</param>        
        /// <param name="objectID">Object id</param>
        /// <param name="objectType">Object type</param>
        /// <param name="currencyID">Currency id</param>
        /// <param name="bankID">Bank id</param>
        /// <param name="locationID">Location id</param>
        /// <param name="branchID">Branch id</param>
        /// <param name="fromDate">Date the result is calculated from</param>
        /// <param name="toDate">Date the result is calculated to</param>
        /// <returns>Credit amount</returns>
        public decimal GetAccountAmountByCreditAndDebitAccountsAndCurrency(
                                                string debitAccountNo,
                                                string creditAccountNo,
                                                int? objectID,
                                                string objectType,
                                                int? currencyID,
                                                int? bankID,
                                                int? locationID,
                                                int? branchID,
                                                DateTime? fromDate,
                                                DateTime? toDate)
        {
            ACDocumentEntrysInfo entry = (ACDocumentEntrysInfo)dal.GetDataObject("ACDocumentEntrys_GetAccountAmountByCreditAndDebitAccountsAndCurrency",
                                                                                debitAccountNo,
                                                                                creditAccountNo,
                                                                                null,
                                                                                objectID,
                                                                                objectType,
                                                                                currencyID,
                                                                                bankID,
                                                                                locationID,
                                                                                branchID,
                                                                                fromDate,
                                                                                toDate);
            //baseAccountCreditAmount = entry.ACDocumentEntryExchangeAmount;
            return entry.ACDocumentEntryAmount;
        }


        /// <summary>
        /// Get depreciation entries relating to a cost object
        /// </summary>
        /// <param name="costObjectID">cost object id</param>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns>List of entries</returns>
        public List<ACDocumentEntrysInfo> GetDepreciationEntriesByCostObjectID(string costObjectNo, int branchID, DateTime? fromDate, DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDepreciationEntriesByCostObjectID", costObjectNo, branchID, fromDate, toDate);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get depreciation entries relating to an equipment
        /// </summary>
        /// <param name="equipmentID">equipment id</param>
        /// /// <param name="branchID">branch id</param>
        /// /// <param name="departmentRoomID">deparment room id</param>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="toDate">Date the result is filtered to</param>
        /// <returns>List of entries</returns>
        public List<ACDocumentEntrysInfo> GetDepreciationEntriesByEquipmentID(int? equipmentID, int? branchID, int? deparmentRoomID, DateTime? fromDate, DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDepreciationEntriesByEquipmentID", equipmentID, branchID, deparmentRoomID, fromDate, toDate);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public decimal GetDocumentEntryAmountByAccountNo(string accountNo, DateTime? fromDate, DateTime? toDate)
        {
            object amount = dal.GetSingleValue("ACDocumentEntrys_GetDocumentEntryAmountByAccountNo", accountNo, fromDate, toDate);
            return Convert.ToDecimal(amount);
        }

        public decimal GetDocumentEntryCreditAmountByAccountNo(string accountNo, DateTime? fromDate, DateTime? toDate)
        {
            object amount = dal.GetSingleValue("ACDocumentEntrys_GetDocumentEntryCreditAmountByAccountNo", accountNo, fromDate, toDate);
            return Convert.ToDecimal(amount);
        }

        public List<ACDocumentEntrysInfo> GetListDocumentEntryAmountByAccountNo(string accountNo, DateTime? fromDate, DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetListDocumentEntryAmountByAccountNo", accountNo, fromDate, toDate);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }
        public decimal GetDocumentEntrysForACDocumentEntryAmountUNC(int documentID)
        {
            Object obj = dal.GetSingleValue("ACDocumentEntrys_GetDocumentEntrysForACDocumentEntryAmountUNC", documentID);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }
        public decimal GetDocumentEntrysForACDocumentEntryAmountBC(int documentID)
        {
            Object obj = dal.GetSingleValue("ACDocumentEntrys_GetDocumentEntrysForACDocumentEntryAmountBC", documentID);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }
        public decimal GetDocumentEntrysForACDocumentEntryAmountPT(int documentID)
        {
            Object obj = dal.GetSingleValue("ACDocumentEntrys_GetDocumentEntrysForACDocumentEntryAmountPT", documentID);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }
        public decimal GetDocumentEntrysForACDocumentEntryAmountPC(int documentID)
        {
            Object obj = dal.GetSingleValue("ACDocumentEntrys_GetDocumentEntrysForACDocumentEntryAmountPC", documentID);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }
        public decimal GetDocumentEntryAmountDebitInDocumentEntrys(int documentID)
        {
            Object obj = dal.GetSingleValue("ACDocumentEntrys_GetDocumentEntryAmountDebitInDocumentEntrys", documentID);
            decimal Debt = 0;
            if (obj != null)
                decimal.TryParse(obj.ToString(), out Debt);

            return Debt;
        }
        public List<ACDocumentEntrysInfo> GetListObjectByACDocumentNo(string ACDocumentNo)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetListObjectByACDocumentNo", ACDocumentNo);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }
        public List<ACDocumentEntrysInfo> GetObjectByACDocumentIDAndFK_ACCreditAccount(int ACDocumentID, int CreditAccountID)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetObjectByACDocumentIDAndFK_ACCreditAccount", ACDocumentID, CreditAccountID);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetAllDocumentEntries(string accountNo,
                                                                     string generalObjectType,
                                                                     int objectID
                                                                   , string objectType
                                                                   , int currencyID
                                                                   , int locationID
                                                                   , int branchID
                                                                   , DateTime toDate
           )
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetAllDocumentEntries", accountNo, generalObjectType, objectID, objectType, currencyID, locationID, branchID, toDate);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetAccountTotalAmountByCreditAndDebitAccounts(string debitNo, string creditNo, int objectID, string objectType, int currencyID, int branchID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetAccountTotalAmountByCreditAndDebitAccounts", debitNo, creditNo, objectID, objectType, currencyID, branchID, fromDate, toDate);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetAllDocumentForReport(string accountNo,
                                                                  string generalObjectType,
                                                                  int objectID
                                                                    , string objectType
                                                                    , int currencyID
                                                                    , int locationID
                                                                    , int branchID
                                                                    , DateTime toDate
            )
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetAllDocumentForReport", accountNo, generalObjectType, objectID, objectType, currencyID, locationID, branchID, toDate);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetAccountAmountByCreditAndDebitAccountsAndCurrencyAll(string debitNo, string creditNo, int objectID, string objectType, int currencyID, int branchID, DateTime fromDate, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetAccountAmountByCreditAndDebitAccountsAndCurrencyAll", debitNo, creditNo, objectID, objectType, currencyID, branchID, fromDate, toDate);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetDocumentEntryListByDocumentNo(string documentNo)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDocumentEntryListByDocumentNo", documentNo);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetDefaultDocumentEntryByDocumentType(string documentType)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDefaultDocumentEntryByDocumentType", documentType);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }
        public List<ACDocumentEntrysInfo> GetObjectByACUnfinishedConstructionCostID(int ACUnfinishedConstructionCostID)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetObjectByACUnfinishedConstructionCostID", ACUnfinishedConstructionCostID);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }
        public ACDocumentEntrysInfo GetDefaultDocumentEntryByEntryAndDocumentType(string documentType, string entryType)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDefaultDocumentEntryByEntryAndDocumentType", documentType, entryType);


            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACDocumentEntrysInfo objDocumentEntrysInfo = (ACDocumentEntrysInfo)GetObjectFromDataRow(row);
                    return objDocumentEntrysInfo;
                }
            }
            return null;
        }
        public List<ACDocumentEntrysInfo> GetEntriesForAllocatingCostWithToDate(int branchID, DateTime toDate)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetEntriesForAllocatingCostWithToDate", branchID, toDate);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetEntryByBillOfLadingNoList(string billOfLadingNoList)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetEntryByBillOfLadingNoList", billOfLadingNoList);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetEntryWithObjectInfo(int documentID)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetEntryWithObjectInfo", documentID);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetDocumentEntrysForReportRP046I(DateTime? fromDate
                                                                            , DateTime? toDate
                                                                            , int? currencyID
                                                                            , string objectType
                                                                            , int? objectID
                                                                            , string reportType
                                                                            , int? branchID
                                                                            , int accountID)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDocumentEntrysForReportRP046I", fromDate, toDate, currencyID, objectType, objectID, reportType, branchID, accountID);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetDocumentEntrysForReportRP047(DateTime? fromDate
                                                                            , DateTime? toDate
                                                                            , int? currencyID
                                                                            , string objectType
                                                                            , int? objectID
                                                                            , int? branchID
                                                                            , int accountID)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDocumentEntrysForReportRP047", fromDate, toDate, currencyID, objectType, objectID, branchID, accountID);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetDocumentEntrysForReportRP049I(DateTime? fromDate
                                                                            , DateTime? toDate
                                                                            , int? currencyID
                                                                            , string objectType
                                                                            , int? objectID
                                                                            , string reportType
                                                                            , int? branchID
                                                                            , int accountID)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDocumentEntrysForReportRP049I", fromDate, toDate, currencyID, objectType, objectID, reportType, branchID, accountID);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetDocumentEntrysForReportRP050(DateTime? fromDate
                                                                            , DateTime? toDate
                                                                            , int? currencyID
                                                                            , string objectType
                                                                            , int? objectID
                                                                            , int? branchID
                                                                            , int accountID)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDocumentEntrysForReportRP050", fromDate, toDate, currencyID, objectType, objectID, branchID, accountID);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetDocumentEntrysForReportRP061(DateTime fromDate, DateTime toDate, int? currencyID, int? branchID, int? accountID)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDocumentEntrysForReportRP061", fromDate, toDate, currencyID, branchID, accountID);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetDocumentsForReportRP074(DateTime fromDate, DateTime toDate, int? currencyID, int? branchID, int? accountID)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDocumentsForReportRP074", fromDate, toDate, currencyID, branchID, accountID);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetDocumentsForReportRP041(DateTime fromDate, DateTime toDate, int? currencyID, int? branchID, int? accountID)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDocumentsForReportRP041", fromDate, toDate, currencyID, branchID, accountID);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetDocumentsForReportRP042(DateTime fromDate, DateTime toDate, int? currencyID, int? branchID, int? accountID, string objectType, int? objectID)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDocumentsForReportRP042", fromDate, toDate, currencyID, branchID, accountID, objectType, objectID);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetEntryByReceiptNo(string receiptNo)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetEntryByReceiptNo", receiptNo);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetEntryByInvoiceInNo(string invoiceInNo)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetEntryByInvoiceInNo", invoiceInNo);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetDocumentEntrysForReportRP060(DateTime fromDate, DateTime toDate, int? currencyID, int? branchID, int? accountID)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDocumentEntrysForReportRP060", fromDate, toDate, currencyID, branchID, accountID);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetDocumentEntryGroupByAcountSoTHCN(DateTime fromDate, DateTime toDate, int? currencyID, string accountID, int? branchID)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDocumentEntryGroupByAcountSoTHCN", fromDate, toDate, currencyID, accountID, branchID);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetDocumentEntrySoTHCN(DateTime fromDate, DateTime toDate, int? currencyID, string accountID, int? branchID)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDocumentEntrySoTHCN", fromDate, toDate, currencyID, accountID, branchID);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetDocumentEntrySoChuT(DateTime fromDate, DateTime toDate, int AccountID, int? currencyID, int branchID)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDocumentEntrySoChuT", fromDate, toDate, AccountID, currencyID, branchID);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetDocumentEntrysNhatKy(DateTime fromDate, DateTime toDate, string debitAccountID, string creditAccountID, int? currencyID, int? branchID)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDocumentEntrysNhatKy", fromDate, toDate, debitAccountID, creditAccountID, currencyID, branchID);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetDocumentEntryGroupByAcountSoChitietCN(DateTime fromDate, DateTime toDate, string accountID, int? currencyID, int? objectID, string objectType, int? branchID)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDocumentEntryGroupByAcountSoChitietCN", fromDate, toDate, accountID, currencyID, objectID, objectType, branchID);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetListEntryForPrintSermiProduct(int receiptID)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetListEntryForPrintSermiProduct", receiptID);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetDocumentEntrysByMonthAndBranchIDs(DateTime dateTime, string branchs, string documentTypeName)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetDocumentEntrysByMonthAndBranchIDs", dateTime, branchs, documentTypeName);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetAccountingEntries(string @ModuleName, int @DocumentID, string @DocumentNo)
        {
            DataSet ds = dal.GetDataSet("ACTransactions_GetAccountingEntries", @ModuleName, @DocumentID, @DocumentNo);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }
        public List<ACDocumentEntrysInfo> GetAccountTranferCostBySomeCriteria(DateTime fromDate, DateTime toDate, string documentTypeName)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetAccountTranferCostBySomeCriteria", fromDate, toDate, documentTypeName);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }

        public List<ACDocumentEntrysInfo> GetEvaluateBusinessResultBySomeCriteria(DateTime fromDate, DateTime toDate, string documentTypeName)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetEvaluateBusinessResultBySomeCriteria", fromDate, toDate, documentTypeName);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }
        public List<ACDocumentEntrysInfo> GetPayableEvaluateBySomeCriteria(DateTime fromDate, DateTime toDate, string documentTypeName, int currencyID, decimal exchangeRate, string accountID, bool ByObject, bool ByInvoice)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetPayableEvaluateBySomeCriteria", fromDate, toDate, documentTypeName, currencyID, exchangeRate, accountID, ByObject, ByInvoice);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }
        public List<ACDocumentEntrysInfo> GetReceivableAssetEvaluateBySomeCriteria(DateTime fromDate, DateTime toDate, string documentTypeName, int currencyID, decimal exchangeRate, string accountID, bool ByObject, bool ByInvoice)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetReceivableAssetEvaluateBySomeCriteria", fromDate, toDate, documentTypeName, currencyID, exchangeRate, accountID, ByObject, ByInvoice);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }
        public List<ACDocumentEntrysInfo> GetProjectTranferCostBySomeCriteria(DateTime fromDate, DateTime toDate, string documentTypeName)
        {
            DataSet ds = dal.GetDataSet("ACDocumentEntrys_GetProjectTranferCostBySomeCriteria", fromDate, toDate, documentTypeName);
            return (List<ACDocumentEntrysInfo>)GetListFromDataSet(ds);
        }
    }
    #endregion
}