using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ACEquipmentTransferItems
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ACEquipmentTransferItemsController
    //Created Date:09 May 2012
    //-----------------------------------------------------------

    public class ACEquipmentTransferItemsController : BaseBusinessController
    {
        public ACEquipmentTransferItemsController()
        {
            dal = new DALBaseProvider("ACEquipmentTransferItems", typeof(ACEquipmentTransferItemsInfo));
        }

        /// <summary>
        /// Get all items of an equipment transfer
        /// </summary>
        /// <param name="documentID">Id of the document represents the equipment transfer</param>
        /// <returns>List of items</returns>
        public List<ACEquipmentTransferItemsInfo> GetItemsByDocumentID(int documentID)
        {
            DataSet ds = dal.GetDataSet("ACEquipmentTransferItems_GetItemsByDocumentID", documentID);
            return (List<ACEquipmentTransferItemsInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ACEquipmentTransferItemsInfo> items = new List<ACEquipmentTransferItemsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACEquipmentTransferItemsInfo item = (ACEquipmentTransferItemsInfo)GetObjectFromDataRow(row);
                    items.Add(item);
                }
            }
            ds.Dispose();
            return items;
        }

        /// <summary>
        /// Get transfer items relating to an equipment
        /// </summary>
        /// <param name="equipmentID">Equipment id</param>
        /// <param name="fromDate">Date the result is filtered from</param>
        /// <param name="fromDate">Date the result is filtered to</param>
        /// <returns>List of transfer items</returns>
        public List<ACEquipmentTransferItemsInfo> GetItemsByEquipmentID(int equipmentID, DateTime? fromDate, DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ACEquipmentTransferItems_GetItemsByEquipmentID", equipmentID, fromDate, toDate);
            return (List<ACEquipmentTransferItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ACEquipmentTransferItemsInfo> GetItemsByDepartmentRoomID(int departmentRoomID, DateTime? fromDate, DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ACEquipmentTransferItems_GetItemsByDepartmentRoom", departmentRoomID, fromDate, toDate);
            return (List<ACEquipmentTransferItemsInfo>)GetListFromDataSet(ds);
        }

        public List<ACEquipmentTransferItemsInfo> GetSeriesByEquipmentIDAndRoomID(int productID, int departmentRoomID)
        {
            DataSet ds = dal.GetDataSet("ACEquipmentTransferItems_GetSeriesByEquipmentIDAndRoomID", productID, departmentRoomID);
            return (List<ACEquipmentTransferItemsInfo>)GetListFromDataSet(ds);

        }
        public List<ACEquipmentTransferItemsInfo> GetItemByProductIdentifiedEquipmentID(int productIdentifiedEquipmentID)
        {
            DataSet ds = dal.GetDataSet("ACEquipmentTransferItems_GetItemByProductIdentifiedEquipmentID", productIdentifiedEquipmentID);
            return (List<ACEquipmentTransferItemsInfo>)GetListFromDataSet(ds);

        }

    }
    #endregion
}