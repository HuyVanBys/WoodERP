using BOSLib;
using System;
using System.Collections.Generic;
using System.Data;


namespace BOSERP
{
    #region ACAssetReceipts
    //-----------------------------------------------------------
    //Generated By: BOS Studio
    //Class:ACAssetReceiptsController
    //Created Date:04 May 2012
    //-----------------------------------------------------------

    public class ACAssetReceiptsController : BaseBusinessController
    {
        public ACAssetReceiptsController()
        {
            dal = new DALBaseProvider("ACAssetReceipts", typeof(ACAssetReceiptsInfo));
        }

        /// <summary>
        /// Get asset receipts for transferring
        /// </summary>
        /// <returns>List of transferred asset receipts</returns>
        public List<ACAssetReceiptsInfo> GetAssetReceiptsForTransferring()
        {
            DataSet ds = dal.GetDataSet("ACAssetReceipts_GetAssetReceiptsForTransferring");
            return (List<ACAssetReceiptsInfo>)GetListFromDataSet(ds);
        }

        /// <summary>
        /// Get asset receipts for broadcasting to a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <returns>List of broadcasted asset receipts</returns>
        public List<ACAssetReceiptsInfo> GetAssetReceiptsForBroadcasting(int branchID)
        {
            DataSet ds = dal.GetDataSet("ACAssetReceipts_GetAssetReceiptsForBroadcasting", branchID);
            return (List<ACAssetReceiptsInfo>)GetListFromDataSet(ds);
        }

        public override System.Collections.IList GetListFromDataSet(DataSet ds)
        {
            List<ACAssetReceiptsInfo> assetReceipts = new List<ACAssetReceiptsInfo>();
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ACAssetReceiptsInfo assetReceipt = (ACAssetReceiptsInfo)GetObjectFromDataRow(row);
                    assetReceipts.Add(assetReceipt);
                }
            }
            ds.Dispose();
            return assetReceipts;
        }

        /// <summary>
        /// Get asset receipts for broadcasting to a branch
        /// </summary>
        /// <param name="branchID">Branch id</param>
        /// <returns>List of broadcasted asset receipts</returns>
        public DataSet GetAssetReceiptListBySomeCriteria(string assetReceiptNo, string assetReceiptInvoiceNo,
                                                                        int? supplierID, int? employeeID, int? branchID,
                                                                        DateTime? fromDate, DateTime? toDate)
        {
            DataSet ds = dal.GetDataSet("ACAssetReeceipts_GetAssetReceiptListBySomeCriteria ", assetReceiptNo, assetReceiptInvoiceNo,
                                                        supplierID, employeeID, branchID, fromDate, toDate);
            return ds;
        }

        public DataSet GetAssetReceiptListDataSetByListOfBranchID(string assetReceiptNo, string assetReceiptInvoiceNo,
                                                                    int? supplierID, int? employeeID,
                                                                    DateTime? fromDate, DateTime? toDate,
                                                                    List<BRBranchsInfo> branchList)
        {
            DataSet rtn = new DataSet();
            foreach (BRBranchsInfo ojbBranchsInfo in branchList)
            {
                DataSet ds = GetAssetReceiptListBySomeCriteria(assetReceiptNo, assetReceiptInvoiceNo,
                                                        supplierID, employeeID, ojbBranchsInfo.BRBranchID,
                                                        fromDate, toDate);
                rtn.Merge(ds);
            }

            return rtn;
        }

        public void UpdateAssetDataByAssetReceipt(int assetReceiptID, bool isRollBack)
        {
            dal.ExecuteStoredProcedure("ACAssetReceipts_UpdateAssetDataByAssetReceipt", assetReceiptID, isRollBack);
        }

        public void DeleteAssetByPurchaseAssetReceipt(int assetReceiptID)
        {
            dal.ExecuteStoredProcedure("ACAssetReceipts_DeleteAssetByPurchaseAssetReceipt", assetReceiptID);
        }
    }
    #endregion
}